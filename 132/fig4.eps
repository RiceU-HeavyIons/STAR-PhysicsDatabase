%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: nudyn_plus_minus_dNdeta_ave_STAR.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Gary Westfall
%%CreationDate: 1/6/09
%%BoundingBox: 0 0 531 385
%%HiResBoundingBox: 0 0 530.2500 384.8096
%%CropBox: 0 0 530.2500 384.8096
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-01-06T07:53:49-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2009-01-06T07:53:51-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2009-01-06T07:53:51-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>188</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXnvnrRNL1&#xA;j8xPLNtqWh2mvwJpGtSLZ3scMkaOLnSwJQs6uvIBivSu5xVOP+VT/lZ/1Juh/wDcNs/+qeKrI/yr&#xA;/KeVS0flDQXUMykrp1mRyRirDaPqrAg++KZRI5uH5W/lMenlHQftcP8AjnWf2v5f7vr7YoXL+VP5&#xA;UsSF8n6ESpo1NNszQ9aH93iqGg/Lr8mZ7iS2g8seXJbmFik0KWNizoy0JVlCVBFe+KrZfy+/JWF5&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">nudyn_plus_minus_dNdeta_ave_STAR</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:F77F117407206811994CACE9CF2AC18B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F117407206811994CACE9CF2AC18B</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:2f49655a-1ae5-f647-8a21-2e9bb899a5d3</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8ed71fa0-1910-d14f-ae5f-ac2805140fb5</stRef:instanceID>
            <stRef:documentID>uuid:2f49655a-1ae5-f647-8a21-2e9bb899a5d3</stRef:documentID>
            <stRef:originalDocumentID>uuid:2f49655a-1ae5-f647-8a21-2e9bb899a5d3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811994CACE9CF2AC18B</stEvt:instanceID>
                  <stEvt:when>2009-01-06T07:53:51-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -384.81 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 384.81 li
530.25 384.81 li
530.25 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1.5 lw
0 lc
0 lj
4 ml
[12 12 ] 0 dsh
true sadj
529.505 231.637 mo
77.1611 231.637 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
[2 2 ] 0 dsh
528.839 165.37 mo
76.4951 165.37 li
@
[12 2 2 2 ] 0 dsh
528.572 34.4141 mo
75.4282 34.4141 li
@
75.75 330 mo
76.75 329 li
76.75 2 li
528.25 2 li
529.25 1 li
75.75 1 li
75.75 330 li
1 1 1 rgb
ef
2 lw
10 ml
[] 0 dsh
75.75 330 mo
529.25 330 li
75.75 330 mo
75.75 1 li
529.25 1 li
529.25 330 li
75.75 330 li
cp
0 0 0 rgb
@
1 lw
75.75 330 mo
75.75 1 li
@
75.75 330 mo
529.25 330 li
@
529.25 320.25 mo
529.25 330 li
518 325.25 mo
518 330 li
506.5 325.25 mo
506.5 330 li
495.25 325.25 mo
495.25 330 li
484 325.25 mo
484 330 li
472.5 320.25 mo
472.5 330 li
461.25 325.25 mo
461.25 330 li
449.75 325.25 mo
449.75 330 li
438.5 325.25 mo
438.5 330 li
427.25 325.25 mo
427.25 330 li
415.75 320.25 mo
415.75 330 li
404.5 325.25 mo
404.5 330 li
393.25 325.25 mo
393.25 330 li
381.75 325.25 mo
381.75 330 li
370.5 325.25 mo
370.5 330 li
359.25 320.25 mo
359.25 330 li
347.75 325.25 mo
347.75 330 li
336.5 325.25 mo
336.5 330 li
325.25 325.25 mo
325.25 330 li
313.75 325.25 mo
313.75 330 li
302.5 320.25 mo
302.5 330 li
291.25 325.25 mo
291.25 330 li
279.75 325.25 mo
279.75 330 li
268.5 325.25 mo
268.5 330 li
257 325.25 mo
257 330 li
245.75 320.25 mo
245.75 330 li
234.5 325.25 mo
234.5 330 li
223 325.25 mo
223 330 li
211.75 325.25 mo
211.75 330 li
200.5 325.25 mo
200.5 330 li
189 320.25 mo
189 330 li
177.75 325.25 mo
177.75 330 li
166.5 325.25 mo
166.5 330 li
155 325.25 mo
155 330 li
143.75 325.25 mo
143.75 330 li
132.5 320.25 mo
132.5 330 li
121 325.25 mo
121 330 li
109.75 325.25 mo
109.75 330 li
98.25 325.25 mo
98.25 330 li
87 325.25 mo
87 330 li
75.75 320.25 mo
75.75 330 li
@
75.75 330 mo
75.75 1 li
@
82.5 1 mo
75.75 1 li
82.5 10.25 mo
75.75 10.25 li
82.5 19.25 mo
75.75 19.25 li
89.25 28.5 mo
75.75 28.5 li
82.5 330 mo
75.75 330 li
82.5 321 mo
75.75 321 li
82.5 311.75 mo
75.75 311.75 li
89.25 302.75 mo
75.75 302.75 li
89.25 28.5 mo
75.75 28.5 li
82.5 37.75 mo
75.75 37.75 li
82.5 46.75 mo
75.75 46.75 li
82.5 56 mo
75.75 56 li
82.5 65 mo
75.75 65 li
89.25 74.25 mo
75.75 74.25 li
82.5 83.25 mo
75.75 83.25 li
82.5 92.5 mo
75.75 92.5 li
82.5 101.5 mo
75.75 101.5 li
82.5 110.75 mo
75.75 110.75 li
89.25 120 mo
75.75 120 li
82.5 129 mo
75.75 129 li
82.5 138.25 mo
75.75 138.25 li
82.5 147.25 mo
75.75 147.25 li
82.5 156.5 mo
75.75 156.5 li
89.25 165.5 mo
75.75 165.5 li
82.5 174.75 mo
75.75 174.75 li
82.5 184 mo
75.75 184 li
82.5 193 mo
75.75 193 li
82.5 202.25 mo
75.75 202.25 li
89.25 211.25 mo
75.75 211.25 li
82.5 220.5 mo
75.75 220.5 li
82.5 229.5 mo
75.75 229.5 li
82.5 238.75 mo
75.75 238.75 li
82.5 247.75 mo
75.75 247.75 li
89.25 257 mo
75.75 257 li
82.5 266.25 mo
75.75 266.25 li
82.5 275.25 mo
75.75 275.25 li
82.5 284.5 mo
75.75 284.5 li
82.5 293.5 mo
75.75 293.5 li
89.25 302.75 mo
75.75 302.75 li
@
80.75 126.25 mo
95.75 126.25 li
83.6147 135.067 li
88.25 120.801 li
92.8853 135.067 li
80.75 126.25 li
cp
1 0 0 rgb
f
93.75 132 mo
108.75 132 li
96.6147 140.817 li
101.25 126.551 li
105.885 140.817 li
93.75 132 li
cp
f
112.5 129.25 mo
127.5 129.25 li
115.365 138.067 li
120 123.801 li
124.635 138.067 li
112.5 129.25 li
cp
f
139.75 126.5 mo
154.75 126.5 li
142.615 135.317 li
147.25 121.051 li
151.885 135.317 li
139.75 126.5 li
cp
f
178.75 114 mo
193.75 114 li
181.615 122.817 li
186.25 108.551 li
190.885 122.817 li
178.75 114 li
cp
f
231 115.5 mo
246 115.5 li
233.865 124.317 li
238.5 110.051 li
243.135 124.317 li
231 115.5 li
cp
f
306.75 103 mo
321.75 103 li
309.614 111.817 li
314.25 97.5508 li
318.885 111.817 li
306.75 103 li
cp
f
384.5 86 mo
399.5 86 li
387.365 94.8169 li
392 80.5508 li
396.635 94.8169 li
384.5 86 li
cp
f
460 63.25 mo
475 63.25 li
462.864 72.0669 li
467.5 57.8008 li
472.135 72.0669 li
460 63.25 li
cp
f
100 137.75 mo
102.25 137.75 li
101.25 137.25 mo
101.25 137.75 li
100 131 mo
102.25 131 li
101.25 131.5 mo
101.25 131 li
118.75 136 mo
121 136 li
120 134.5 mo
120 136 li
118.75 127.5 mo
121 127.5 li
120 128.75 mo
120 127.5 li
123.25 132.75 mo
123.25 130.5 li
123.25 131.75 mo
116.5 132.75 mo
116.5 130.5 li
116.5 131.75 mo
146 136.25 mo
148.25 136.25 li
147.25 131.75 mo
147.25 136.25 li
146 121.5 mo
148.25 121.5 li
147.25 126 mo
147.25 121.5 li
152.25 130 mo
152.25 127.75 li
150.5 129 mo
152.25 129 li
142 130 mo
142 127.75 li
143.75 129 mo
142 129 li
185.25 120 mo
187.25 120 li
186.25 119.25 mo
186.25 120 li
185.25 112.75 mo
187.25 112.75 li
186.25 113.5 mo
186.25 112.75 li
194.25 117.5 mo
194.25 115.25 li
189.5 116.5 mo
194.25 116.5 li
178.25 117.5 mo
178.25 115.25 li
183 116.5 mo
178.25 116.5 li
237.25 121 mo
239.5 121 li
238.5 120.75 mo
238.5 121 li
237.25 114.75 mo
239.5 114.75 li
238.5 115 mo
238.5 114.75 li
249.75 119 mo
249.75 116.75 li
241.75 118 mo
249.75 118 li
227 119 mo
227 116.75 li
235 118 mo
227 118 li
313.25 112 mo
315.5 112 li
314.25 108.5 mo
314.25 112 li
313.25 99.25 mo
315.5 99.25 li
314.25 102.75 mo
314.25 99.25 li
331.5 106.75 mo
331.5 104.5 li
317.75 105.5 mo
331.5 105.5 li
297.25 106.75 mo
297.25 104.5 li
311 105.5 mo
297.25 105.5 li
391 95.5 mo
393.25 95.5 li
392 91.25 mo
392 95.5 li
391 81.75 mo
393.25 81.75 li
392 85.75 mo
392 81.75 li
414.75 89.75 mo
414.75 87.5 li
395.25 88.5 mo
414.75 88.5 li
369.25 89.75 mo
369.25 87.5 li
388.75 88.5 mo
369.25 88.5 li
466.25 74.25 mo
468.5 74.25 li
467.5 68.5 mo
467.5 74.25 li
466.25 57.25 mo
468.5 57.25 li
467.5 63 mo
467.5 57.25 li
495.25 66.75 mo
495.25 64.5 li
470.75 65.75 mo
495.25 65.75 li
439.75 66.75 mo
439.75 64.5 li
464 65.75 mo
439.75 65.75 li
@
100 204.5 mo
102.25 204.5 li
101.25 202.75 mo
101.25 204.5 li
100 192.25 mo
102.25 192.25 li
101.25 194 mo
101.25 192.25 li
146 189.5 mo
148.25 189.5 li
147.25 186.75 mo
147.25 189.5 li
146 175.25 mo
148.25 175.25 li
147.25 178 mo
147.25 175.25 li
152.25 183.5 mo
152.25 181.25 li
151.5 182.25 mo
152.25 182.25 li
142 183.5 mo
142 181.25 li
142.75 182.25 mo
142 182.25 li
185.25 179 mo
187.25 179 li
186.25 177.5 mo
186.25 179 li
185.25 167 mo
187.25 167 li
186.25 168.5 mo
186.25 167 li
194.25 174 mo
194.25 171.75 li
190.75 173 mo
194.25 173 li
178.25 174 mo
178.25 171.75 li
181.75 173 mo
178.25 173 li
237.25 177.5 mo
239.5 177.5 li
238.5 177.5 mo
237.25 168.5 mo
239.5 168.5 li
238.5 168.5 mo
249.75 174.25 mo
249.75 172 li
242.75 173 mo
249.75 173 li
227 174.25 mo
227 172 li
234 173 mo
227 173 li
313.25 171 mo
315.5 171 li
314.25 168.25 mo
314.25 171 li
313.25 156.75 mo
315.5 156.75 li
314.25 159.5 mo
314.25 156.75 li
331.5 165 mo
331.5 162.75 li
318.75 164 mo
331.5 164 li
297.25 165 mo
297.25 162.75 li
310 164 mo
297.25 164 li
391 159.5 mo
393.25 159.5 li
392 156 mo
392 159.5 li
391 143.5 mo
393.25 143.5 li
392 147 mo
392 143.5 li
414.75 152.75 mo
414.75 150.5 li
396.5 151.5 mo
414.75 151.5 li
369.25 152.75 mo
369.25 150.5 li
387.5 151.5 mo
369.25 151.5 li
466.25 150.5 mo
468.5 150.5 li
467.5 143.25 mo
467.5 150.5 li
466.25 127.25 mo
468.5 127.25 li
467.5 134.5 mo
467.5 127.25 li
495.25 140 mo
495.25 137.75 li
472 139 mo
495.25 139 li
439.75 140 mo
439.75 137.75 li
463 139 mo
439.75 139 li
0 .501961 0 rgb
f
100 204.5 mo
102.25 204.5 li
101.25 202.75 mo
101.25 204.5 li
100 192.25 mo
102.25 192.25 li
101.25 194 mo
101.25 192.25 li
146 189.5 mo
148.25 189.5 li
147.25 186.75 mo
147.25 189.5 li
146 175.25 mo
148.25 175.25 li
147.25 178 mo
147.25 175.25 li
152.25 183.5 mo
152.25 181.25 li
151.5 182.25 mo
152.25 182.25 li
142 183.5 mo
142 181.25 li
142.75 182.25 mo
142 182.25 li
185.25 179 mo
187.25 179 li
186.25 177.5 mo
186.25 179 li
185.25 167 mo
187.25 167 li
186.25 168.5 mo
186.25 167 li
194.25 174 mo
194.25 171.75 li
190.75 173 mo
194.25 173 li
178.25 174 mo
178.25 171.75 li
181.75 173 mo
178.25 173 li
237.25 177.5 mo
239.5 177.5 li
238.5 177.5 mo
237.25 168.5 mo
239.5 168.5 li
238.5 168.5 mo
249.75 174.25 mo
249.75 172 li
242.75 173 mo
249.75 173 li
227 174.25 mo
227 172 li
234 173 mo
227 173 li
313.25 171 mo
315.5 171 li
314.25 168.25 mo
314.25 171 li
313.25 156.75 mo
315.5 156.75 li
314.25 159.5 mo
314.25 156.75 li
331.5 165 mo
331.5 162.75 li
318.75 164 mo
331.5 164 li
297.25 165 mo
297.25 162.75 li
310 164 mo
297.25 164 li
391 159.5 mo
393.25 159.5 li
392 156 mo
392 159.5 li
391 143.5 mo
393.25 143.5 li
392 147 mo
392 143.5 li
414.75 152.75 mo
414.75 150.5 li
396.5 151.5 mo
414.75 151.5 li
369.25 152.75 mo
369.25 150.5 li
387.5 151.5 mo
369.25 151.5 li
466.25 150.5 mo
468.5 150.5 li
467.5 143.25 mo
467.5 150.5 li
466.25 127.25 mo
468.5 127.25 li
467.5 134.5 mo
467.5 127.25 li
495.25 140 mo
495.25 137.75 li
472 139 mo
495.25 139 li
439.75 140 mo
439.75 137.75 li
463 139 mo
439.75 139 li
@
94.2402 187.53 mo
94.2402 184.218 91.5518 181.53 88.2402 181.53 cv
84.9282 181.53 82.2402 184.218 82.2402 187.53 cv
82.2402 190.842 84.9282 193.53 88.2402 193.53 cv
91.5518 193.53 94.2402 190.842 94.2402 187.53 cv
ef
107.2 198.57 mo
107.2 195.258 104.512 192.57 101.2 192.57 cv
97.8882 192.57 95.2002 195.258 95.2002 198.57 cv
95.2002 201.882 97.8882 204.57 101.2 204.57 cv
104.512 204.57 107.2 201.882 107.2 198.57 cv
ef
125.92 185.25 mo
125.92 181.938 123.232 179.25 119.92 179.25 cv
116.608 179.25 113.92 181.938 113.92 185.25 cv
113.92 188.562 116.608 191.25 119.92 191.25 cv
123.232 191.25 125.92 188.562 125.92 185.25 cv
ef
153.28 182.25 mo
153.28 178.938 150.592 176.25 147.28 176.25 cv
143.968 176.25 141.28 178.938 141.28 182.25 cv
141.28 185.562 143.968 188.25 147.28 188.25 cv
150.592 188.25 153.28 185.562 153.28 182.25 cv
ef
192.16 172.89 mo
192.16 169.578 189.472 166.89 186.16 166.89 cv
182.848 166.89 180.16 169.578 180.16 172.89 cv
180.16 176.202 182.848 178.89 186.16 178.89 cv
189.472 178.89 192.16 176.202 192.16 172.89 cv
ef
244.48 172.89 mo
244.48 169.578 241.792 166.89 238.48 166.89 cv
235.168 166.89 232.48 169.578 232.48 172.89 cv
232.48 176.202 235.168 178.89 238.48 178.89 cv
241.792 178.89 244.48 176.202 244.48 172.89 cv
ef
320.32 164.01 mo
320.32 160.698 317.632 158.01 314.32 158.01 cv
311.008 158.01 308.32 160.698 308.32 164.01 cv
308.32 167.322 311.008 170.01 314.32 170.01 cv
317.632 170.01 320.32 167.322 320.32 164.01 cv
ef
398.08 151.53 mo
398.08 148.218 395.392 145.53 392.08 145.53 cv
388.768 145.53 386.08 148.218 386.08 151.53 cv
386.08 154.842 388.768 157.53 392.08 157.53 cv
395.392 157.53 398.08 154.842 398.08 151.53 cv
ef
473.44 139.05 mo
473.44 135.738 470.752 133.05 467.44 133.05 cv
464.128 133.05 461.44 135.738 461.44 139.05 cv
461.44 142.362 464.128 145.05 467.44 145.05 cv
470.752 145.05 473.44 142.362 473.44 139.05 cv
ef
100 258.5 mo
102.25 258.5 li
101.25 258 mo
101.25 258.5 li
100 248.75 mo
102.25 248.75 li
101.25 249.25 mo
101.25 248.75 li
146 251.25 mo
148.25 251.25 li
147.25 249 mo
147.25 251.25 li
146 237.75 mo
148.25 237.75 li
147.25 240 mo
147.25 237.75 li
152.25 245.5 mo
152.25 243.25 li
151.5 244.5 mo
152.25 244.5 li
142 245.5 mo
142 243.25 li
142.75 244.5 mo
142 244.5 li
185.25 239.5 mo
187.25 239.5 li
186.25 236.75 mo
186.25 239.5 li
185.25 225 mo
187.25 225 li
186.25 227.75 mo
186.25 225 li
194.25 233.25 mo
194.25 231.25 li
190.75 232.25 mo
194.25 232.25 li
178.25 233.25 mo
178.25 231.25 li
181.75 232.25 mo
178.25 232.25 li
249.75 240 mo
249.75 237.75 li
242.75 238.75 mo
249.75 238.75 li
227 240 mo
227 237.75 li
234 238.75 mo
227 238.75 li
313.25 234.75 mo
315.5 234.75 li
314.25 232.25 mo
314.25 234.75 li
313.25 220.75 mo
315.5 220.75 li
314.25 223.25 mo
314.25 220.75 li
331.5 228.75 mo
331.5 226.75 li
318.75 227.75 mo
331.5 227.75 li
297.25 228.75 mo
297.25 226.75 li
310 227.75 mo
297.25 227.75 li
391 220.75 mo
393.25 220.75 li
392 216.25 mo
392 220.75 li
391 202.75 mo
393.25 202.75 li
392 207.25 mo
392 202.75 li
414.75 212.75 mo
414.75 210.5 li
396.5 211.75 mo
414.75 211.75 li
369.25 212.75 mo
369.25 210.5 li
387.5 211.75 mo
369.25 211.75 li
466.25 206.5 mo
468.5 206.5 li
467.5 200.75 mo
467.5 206.5 li
466.25 186.25 mo
468.5 186.25 li
467.5 191.75 mo
467.5 186.25 li
495.25 197.5 mo
495.25 195.25 li
472 196.25 mo
495.25 196.25 li
439.75 197.5 mo
439.75 195.25 li
463 196.25 mo
439.75 196.25 li
0 0 1 rgb
@
88.25 240.75 mo
82.25 240.75 li
82.25 252.75 li
94.25 252.75 li
94.25 240.75 li
88.25 240.75 li
cp
ef
101.25 247.75 mo
95.25 247.75 li
95.25 259.75 li
107.25 259.75 li
107.25 247.75 li
101.25 247.75 li
cp
ef
120 243.25 mo
114 243.25 li
114 255.25 li
126 255.25 li
126 243.25 li
120 243.25 li
cp
ef
147.25 238.5 mo
141.25 238.5 li
141.25 250.5 li
153.25 250.5 li
153.25 238.5 li
147.25 238.5 li
cp
ef
186.25 226.25 mo
180.25 226.25 li
180.25 238.25 li
192.25 238.25 li
192.25 226.25 li
186.25 226.25 li
cp
ef
238.5 232.75 mo
232.5 232.75 li
232.5 244.75 li
244.5 244.75 li
244.5 232.75 li
238.5 232.75 li
cp
ef
314.25 221.75 mo
308.25 221.75 li
308.25 233.75 li
320.25 233.75 li
320.25 221.75 li
314.25 221.75 li
cp
ef
392 205.75 mo
386 205.75 li
386 217.75 li
398 217.75 li
398 205.75 li
392 205.75 li
cp
ef
467.5 190.25 mo
461.5 190.25 li
461.5 202.25 li
473.5 202.25 li
473.5 190.25 li
467.5 190.25 li
cp
ef
82.5 132.25 mo
84.75 132.25 li
83.5 127.5 mo
83.5 132.25 li
82.5 116 mo
84.75 116 li
83.5 120.75 mo
83.5 116 li
91 126.25 mo
93.25 126.25 li
92.25 124.5 mo
92.25 126.25 li
91 116.25 mo
93.25 116.25 li
92.25 118 mo
92.25 116.25 li
104.75 132.75 mo
107 132.75 li
105.75 126.25 mo
105.75 132.75 li
104.75 113.25 mo
107 113.25 li
105.75 119.5 mo
105.75 113.25 li
124 138.75 mo
126.25 138.75 li
125.25 135 mo
125.25 138.75 li
124 124.25 mo
126.25 124.25 li
125.25 128.25 mo
125.25 124.25 li
129.25 132.75 mo
129.25 130.5 li
128.5 131.5 mo
129.25 131.5 li
121 132.75 mo
121 130.5 li
121.75 131.5 mo
121 131.5 li
151 124.5 mo
153.25 124.5 li
152.25 124 mo
152.25 124.5 li
151 116.5 mo
153.25 116.5 li
152.25 117.25 mo
152.25 116.5 li
158.5 121.75 mo
158.5 119.5 li
155.5 120.5 mo
158.5 120.5 li
146 121.75 mo
146 119.5 li
149 120.5 mo
146 120.5 li
189 131.25 mo
191.25 131.25 li
190.25 126.75 mo
190.25 131.25 li
189 116 mo
191.25 116 li
190.25 120.25 mo
190.25 116 li
199.75 124.75 mo
199.75 122.5 li
193.5 123.5 mo
199.75 123.5 li
180.5 124.75 mo
180.5 122.5 li
187 123.5 mo
180.5 123.5 li
240 133.5 mo
242.25 133.5 li
241.25 125.75 mo
241.25 133.5 li
240 111.25 mo
242.25 111.25 li
241.25 119 mo
241.25 111.25 li
255.5 123.5 mo
255.5 121.25 li
244.5 122.5 mo
255.5 122.5 li
227 123.5 mo
227 121.25 li
238 122.5 mo
227 122.5 li
292.75 145.5 mo
295 145.5 li
294 139.5 mo
294 145.5 li
292.75 126.75 mo
295 126.75 li
294 132.75 mo
294 126.75 li
312.75 137.25 mo
312.75 135 li
297.25 136 mo
312.75 136 li
275.25 137.25 mo
275.25 135 li
290.75 136 mo
275.25 136 li
342.25 125.5 mo
344.5 125.5 li
343.25 116 mo
343.25 125.5 li
342.25 100.25 mo
344.5 100.25 li
343.25 109.5 mo
343.25 100.25 li
366.5 114 mo
366.5 111.75 li
346.5 112.75 mo
366.5 112.75 li
320 114 mo
320 111.75 li
340 112.75 mo
320 112.75 li
1 0 0 rgb
@
[11.55 3.45 ] 5.775 dsh
335.75 110.25 mo
350.75 110.25 li
338.615 119.067 li
343.25 104.801 li
347.885 119.067 li
335.75 110.25 li
cp
286.5 133.5 mo
301.5 133.5 li
289.365 142.317 li
294 128.051 li
298.635 142.317 li
286.5 133.5 li
cp
233.75 120 mo
248.75 120 li
236.615 128.817 li
241.25 114.551 li
245.885 128.817 li
233.75 120 li
cp
182.75 121 mo
197.75 121 li
185.615 129.817 li
190.25 115.551 li
194.885 129.817 li
182.75 121 li
cp
144.75 118 mo
159.75 118 li
147.615 126.817 li
152.25 112.551 li
156.885 126.817 li
144.75 118 li
cp
117.75 129 mo
132.75 129 li
120.615 137.817 li
125.25 123.551 li
129.885 137.817 li
117.75 129 li
cp
98.25 120.5 mo
113.25 120.5 li
101.115 129.317 li
105.75 115.051 li
110.385 129.317 li
98.25 120.5 li
cp
84.75 118.75 mo
99.75 118.75 li
87.6147 127.567 li
92.25 113.301 li
96.8853 127.567 li
84.75 118.75 li
cp
76 121.5 mo
91 121.5 li
78.8647 130.317 li
83.5 116.051 li
88.1353 130.317 li
76 121.5 li
cp
@
82.5 203.5 mo
84.75 203.5 li
83.5 196.25 mo
83.5 203.5 li
82.5 180.25 mo
84.75 180.25 li
83.5 187.5 mo
83.5 180.25 li
91 201.25 mo
93.25 201.25 li
92.25 193.25 mo
92.25 201.25 li
91 176.5 mo
93.25 176.5 li
92.25 184.25 mo
92.25 176.5 li
104.75 205.5 mo
107 205.5 li
105.75 200 mo
105.75 205.5 li
104.75 185.5 mo
107 185.5 li
105.75 191 mo
105.75 185.5 li
124 199 mo
126.25 199 li
125.25 196 mo
125.25 199 li
124 184 mo
126.25 184 li
125.25 187 mo
125.25 184 li
151 198.75 mo
153.25 198.75 li
152.25 194.75 mo
152.25 198.75 li
151 181.75 mo
153.25 181.75 li
152.25 185.75 mo
152.25 181.75 li
158.5 191.25 mo
158.5 189 li
156.75 190.25 mo
158.5 190.25 li
146 191.25 mo
146 189 li
147.75 190.25 mo
146 190.25 li
189 199.75 mo
191.25 199.75 li
190.25 193.25 mo
190.25 199.75 li
189 177.75 mo
191.25 177.75 li
190.25 184.25 mo
190.25 177.75 li
199.75 190 mo
199.75 187.75 li
194.75 188.75 mo
199.75 188.75 li
180.5 190 mo
180.5 187.75 li
185.75 188.75 mo
180.5 188.75 li
240 200 mo
242.25 200 li
241.25 196 mo
241.25 200 li
240 183.25 mo
242.25 183.25 li
241.25 187 mo
241.25 183.25 li
255.5 192.75 mo
255.5 190.5 li
245.75 191.5 mo
255.5 191.5 li
227 192.75 mo
227 190.5 li
236.75 191.5 mo
227 191.5 li
292.75 221.25 mo
295 221.25 li
294 211.75 mo
294 221.25 li
292.75 193.5 mo
295 193.5 li
294 202.75 mo
294 193.5 li
312.75 208.5 mo
312.75 206.25 li
298.5 207.25 mo
312.75 207.25 li
275.25 208.5 mo
275.25 206.25 li
289.5 207.25 mo
275.25 207.25 li
342.25 193 mo
344.5 193 li
343.25 186.75 mo
343.25 193 li
342.25 171.5 mo
344.5 171.5 li
343.25 178 mo
343.25 171.5 li
366.5 183.5 mo
366.5 181.25 li
347.75 182.25 mo
366.5 182.25 li
320 183.5 mo
320 181.25 li
338.75 182.25 mo
320 182.25 li
0 .501961 0 rgb
f
[] 0 dsh
82.5 203.5 mo
84.75 203.5 li
83.5 196.25 mo
83.5 203.5 li
82.5 180.25 mo
84.75 180.25 li
83.5 187.5 mo
83.5 180.25 li
91 201.25 mo
93.25 201.25 li
92.25 193.25 mo
92.25 201.25 li
91 176.5 mo
93.25 176.5 li
92.25 184.25 mo
92.25 176.5 li
104.75 205.5 mo
107 205.5 li
105.75 200 mo
105.75 205.5 li
104.75 185.5 mo
107 185.5 li
105.75 191 mo
105.75 185.5 li
124 199 mo
126.25 199 li
125.25 196 mo
125.25 199 li
124 184 mo
126.25 184 li
125.25 187 mo
125.25 184 li
151 198.75 mo
153.25 198.75 li
152.25 194.75 mo
152.25 198.75 li
151 181.75 mo
153.25 181.75 li
152.25 185.75 mo
152.25 181.75 li
158.5 191.25 mo
158.5 189 li
156.75 190.25 mo
158.5 190.25 li
146 191.25 mo
146 189 li
147.75 190.25 mo
146 190.25 li
189 199.75 mo
191.25 199.75 li
190.25 193.25 mo
190.25 199.75 li
189 177.75 mo
191.25 177.75 li
190.25 184.25 mo
190.25 177.75 li
199.75 190 mo
199.75 187.75 li
194.75 188.75 mo
199.75 188.75 li
180.5 190 mo
180.5 187.75 li
185.75 188.75 mo
180.5 188.75 li
240 200 mo
242.25 200 li
241.25 196 mo
241.25 200 li
240 183.25 mo
242.25 183.25 li
241.25 187 mo
241.25 183.25 li
255.5 192.75 mo
255.5 190.5 li
245.75 191.5 mo
255.5 191.5 li
227 192.75 mo
227 190.5 li
236.75 191.5 mo
227 191.5 li
292.75 221.25 mo
295 221.25 li
294 211.75 mo
294 221.25 li
292.75 193.5 mo
295 193.5 li
294 202.75 mo
294 193.5 li
312.75 208.5 mo
312.75 206.25 li
298.5 207.25 mo
312.75 207.25 li
275.25 208.5 mo
275.25 206.25 li
289.5 207.25 mo
275.25 207.25 li
342.25 193 mo
344.5 193 li
343.25 186.75 mo
343.25 193 li
342.25 171.5 mo
344.5 171.5 li
343.25 178 mo
343.25 171.5 li
366.5 183.5 mo
366.5 181.25 li
347.75 182.25 mo
366.5 182.25 li
320 183.5 mo
320 181.25 li
338.75 182.25 mo
320 182.25 li
@
349.36 182.25 mo
349.36 178.938 346.672 176.25 343.36 176.25 cv
340.048 176.25 337.36 178.938 337.36 182.25 cv
337.36 185.562 340.048 188.25 343.36 188.25 cv
346.672 188.25 349.36 185.562 349.36 182.25 cv
299.92 207.21 mo
299.92 203.898 297.232 201.21 293.92 201.21 cv
290.608 201.21 287.92 203.898 287.92 207.21 cv
287.92 210.521 290.608 213.21 293.92 213.21 cv
297.232 213.21 299.92 210.521 299.92 207.21 cv
247.36 191.61 mo
247.36 188.298 244.672 185.61 241.36 185.61 cv
238.048 185.61 235.36 188.298 235.36 191.61 cv
235.36 194.922 238.048 197.61 241.36 197.61 cv
244.672 197.61 247.36 194.922 247.36 191.61 cv
196.24 188.73 mo
196.24 185.418 193.552 182.73 190.24 182.73 cv
186.928 182.73 184.24 185.418 184.24 188.73 cv
184.24 192.042 186.928 194.73 190.24 194.73 cv
193.552 194.73 196.24 192.042 196.24 188.73 cv
158.32 190.17 mo
158.32 186.858 155.632 184.17 152.32 184.17 cv
149.008 184.17 146.32 186.858 146.32 190.17 cv
146.32 193.482 149.008 196.17 152.32 196.17 cv
155.632 196.17 158.32 193.482 158.32 190.17 cv
131.2 191.61 mo
131.2 188.298 128.512 185.61 125.2 185.61 cv
121.888 185.61 119.2 188.298 119.2 191.61 cv
119.2 194.922 121.888 197.61 125.2 197.61 cv
128.512 197.61 131.2 194.922 131.2 191.61 cv
111.76 195.45 mo
111.76 192.138 109.072 189.45 105.76 189.45 cv
102.448 189.45 99.7598 192.138 99.7598 195.45 cv
99.7598 198.762 102.448 201.45 105.76 201.45 cv
109.072 201.45 111.76 198.762 111.76 195.45 cv
98.3198 188.73 mo
98.3198 185.418 95.6318 182.73 92.3198 182.73 cv
89.0078 182.73 86.3198 185.418 86.3198 188.73 cv
86.3198 192.042 89.0078 194.73 92.3198 194.73 cv
95.6318 194.73 98.3198 192.042 98.3198 188.73 cv
89.4399 192.09 mo
89.4399 188.778 86.752 186.09 83.4399 186.09 cv
80.1279 186.09 77.4399 188.778 77.4399 192.09 cv
77.4399 195.402 80.1279 198.09 83.4399 198.09 cv
86.752 198.09 89.4399 195.402 89.4399 192.09 cv
@
82.5 257.25 mo
84.75 257.25 li
83.5 248.75 mo
83.5 257.25 li
82.5 231 mo
84.75 231 li
83.5 239.75 mo
83.5 231 li
91 260.5 mo
93.25 260.5 li
92.25 251.75 mo
92.25 260.5 li
91 234.25 mo
93.25 234.25 li
92.25 242.75 mo
92.25 234.25 li
104.75 266 mo
107 266 li
105.75 260.25 mo
105.75 266 li
104.75 245.5 mo
107 245.5 li
105.75 251.25 mo
105.75 245.5 li
124 262.25 mo
126.25 262.25 li
125.25 259 mo
125.25 262.25 li
124 247 mo
126.25 247 li
125.25 250.25 mo
125.25 247 li
151 259.75 mo
153.25 259.75 li
152.25 255.75 mo
152.25 259.75 li
151 243 mo
153.25 243 li
152.25 247 mo
152.25 243 li
158.5 252.5 mo
158.5 250.25 li
156.75 251.25 mo
158.5 251.25 li
146 252.5 mo
146 250.25 li
147.75 251.25 mo
146 251.25 li
189 265.25 mo
191.25 265.25 li
190.25 259.75 mo
190.25 265.25 li
189 245.25 mo
191.25 245.25 li
190.25 250.75 mo
190.25 245.25 li
199.75 256.25 mo
199.75 254 li
194.75 255.25 mo
199.75 255.25 li
180.5 256.25 mo
180.5 254 li
185.75 255.25 mo
180.5 255.25 li
240 264.75 mo
242.25 264.75 li
241.25 259.5 mo
241.25 264.75 li
240 245.5 mo
242.25 245.5 li
241.25 250.75 mo
241.25 245.5 li
255.5 256.25 mo
255.5 254 li
245.75 255.25 mo
255.5 255.25 li
227 256.25 mo
227 254 li
236.75 255.25 mo
227 255.25 li
292.75 297.25 mo
295 297.25 li
294 284.75 mo
294 297.25 li
292.75 263.5 mo
295 263.5 li
294 276 mo
294 263.5 li
312.75 281.5 mo
312.75 279.25 li
298.5 280.25 mo
312.75 280.25 li
275.25 281.5 mo
275.25 279.25 li
289.5 280.25 mo
275.25 280.25 li
342.25 261.5 mo
344.5 261.5 li
343.25 255.25 mo
343.25 261.5 li
342.25 240 mo
344.5 240 li
343.25 246.25 mo
343.25 240 li
366.5 251.75 mo
366.5 249.5 li
347.75 250.75 mo
366.5 250.75 li
320 251.75 mo
320 249.5 li
338.75 250.75 mo
320 250.75 li
0 0 1 rgb
@
343.25 244.75 mo
337.25 244.75 li
337.25 256.75 li
349.25 256.75 li
349.25 244.75 li
343.25 244.75 li
cp
294 274.25 mo
288 274.25 li
288 286.25 li
300 286.25 li
300 274.25 li
294 274.25 li
cp
241.25 249.25 mo
235.25 249.25 li
235.25 261.25 li
247.25 261.25 li
247.25 249.25 li
241.25 249.25 li
cp
190.25 249.25 mo
184.25 249.25 li
184.25 261.25 li
196.25 261.25 li
196.25 249.25 li
190.25 249.25 li
cp
152.25 245.25 mo
146.25 245.25 li
146.25 257.25 li
158.25 257.25 li
158.25 245.25 li
152.25 245.25 li
cp
125.25 248.75 mo
119.25 248.75 li
119.25 260.75 li
131.25 260.75 li
131.25 248.75 li
125.25 248.75 li
cp
105.75 249.75 mo
99.75 249.75 li
99.75 261.75 li
111.75 261.75 li
111.75 249.75 li
105.75 249.75 li
cp
92.25 241.25 mo
86.25 241.25 li
86.25 253.25 li
98.25 253.25 li
98.25 241.25 li
92.25 241.25 li
cp
83.5 238.25 mo
77.5 238.25 li
77.5 250.25 li
89.5 250.25 li
89.5 238.25 li
83.5 238.25 li
cp
@
95.2637 20.0752 mo
110.264 20.0752 li
98.1289 28.8916 li
102.764 14.626 li
107.398 28.8916 li
95.2637 20.0752 li
cp
1 0 0 rgb
f
108.764 45.9971 mo
108.764 42.6846 106.074 39.9971 102.764 39.9971 cv
99.4512 39.9971 96.7637 42.6846 96.7637 45.9971 cv
96.7637 49.3086 99.4512 51.9971 102.764 51.9971 cv
106.074 51.9971 108.764 49.3086 108.764 45.9971 cv
0 .501961 0 rgb
ef
108.764 45.9971 mo
108.764 42.6846 106.074 39.9971 102.764 39.9971 cv
99.4512 39.9971 96.7637 42.6846 96.7637 45.9971 cv
96.7637 49.3086 99.4512 51.9971 102.764 51.9971 cv
106.074 51.9971 108.764 49.3086 108.764 45.9971 cv
@
102.764 62.8389 mo
96.7637 62.8389 li
96.7637 74.8389 li
108.764 74.8389 li
108.764 62.8389 li
102.764 62.8389 li
cp
0 0 1 rgb
ef
gsave
38.582 131.261 mo
70.5313 131.261 li
70.5313 111.687 li
38.582 111.687 li
clp
44.2305 129.612 mo
43.1855 129.612 41.6055 128.939 41.125 126.357 cv
40.8301 124.743 40.8301 122.267 40.8301 120.681 cv
40.8301 118.959 40.8301 117.183 41.0449 115.731 cv
41.5527 112.53 43.5605 112.286 44.2305 112.286 cv
45.1123 112.286 46.8789 112.772 47.3867 115.435 cv
47.6553 116.941 47.6553 118.985 47.6553 120.681 cv
47.6553 122.698 47.6553 124.527 47.3613 126.249 cv
46.959 128.803 45.4336 129.61 44.2305 129.61 cv
44.2305 129.612 li
cp
49.9063 121.003 mo
49.9063 118.849 49.7695 116.695 48.8281 114.702 cv
47.5908 112.117 45.3848 111.687 44.2559 111.687 cv
42.6426 111.687 40.6777 112.387 39.5742 114.891 cv
38.7139 116.749 38.5801 118.849 38.5801 121.003 cv
38.5801 123.023 38.6875 125.446 39.7891 127.492 cv
40.9473 129.673 42.9121 130.211 44.2285 130.211 cv
45.6816 130.211 47.7266 129.646 48.9102 127.088 cv
49.7705 125.23 49.9063 123.131 49.9063 121.003 cv
49.9063 121.003 li
cp
0 0 0 rgb
f
56.207 128.187 mo
56.207 127.407 55.5605 126.761 54.7803 126.761 cv
54 126.761 53.3555 127.407 53.3555 128.187 cv
53.3555 128.967 54.001 129.612 54.7803 129.612 cv
55.5605 129.612 56.207 128.966 56.207 128.187 cv
56.207 128.187 li
cp
f
70.5313 124.196 mo
70.5313 120.985 68.3184 118.287 65.4063 118.287 cv
64.1113 118.287 62.9512 118.726 61.9814 119.686 cv
61.9814 114.44 li
62.5215 114.588 63.4111 114.761 64.2754 114.761 cv
67.5938 114.761 69.4844 112.337 69.4844 111.99 cv
69.4844 111.83 69.4023 111.697 69.2148 111.697 cv
69.1875 111.697 69.1328 111.697 68.998 111.773 cv
68.459 112.001 67.1406 112.511 65.334 112.511 cv
64.2559 112.511 63.0156 112.333 61.75 111.8 cv
61.5332 111.724 61.4805 111.724 61.4258 111.724 cv
61.1563 111.724 61.1563 111.938 61.1563 112.369 cv
61.1563 120.331 li
61.1563 120.815 61.1563 121.031 61.5332 121.031 cv
61.7227 121.031 61.7754 120.949 61.8828 120.787 cv
62.1797 120.353 63.1758 118.887 65.3574 118.887 cv
66.7568 118.887 67.4297 120.13 67.6465 120.615 cv
68.0762 121.612 68.1309 122.666 68.1309 124.013 cv
68.1309 124.958 68.1309 126.575 67.4863 127.709 cv
66.8418 128.761 65.8477 129.461 64.6113 129.461 cv
62.6504 129.461 61.1191 128.031 60.6621 126.438 cv
60.7402 126.449 60.8203 126.462 61.1113 126.462 cv
61.9824 126.462 62.4316 125.793 62.4316 125.15 cv
62.4316 124.507 61.9805 123.836 61.1055 123.836 cv
60.7344 123.836 59.8066 124.026 59.8066 125.269 cv
59.8066 127.592 61.6602 130.212 64.6719 130.212 cv
67.7891 130.212 70.5313 127.623 70.5313 124.196 cv
70.5313 124.196 li
cp
f
grestore
28.9023 214.644 mo
36.0293 214.644 li
36.0293 213.068 li
28.9023 213.068 li
28.9023 214.644 li
cp
0 0 0 rgb
f
44.2285 219.669 mo
43.1846 219.669 41.6055 218.997 41.125 216.414 cv
40.8301 214.8 40.8301 212.324 40.8301 210.737 cv
40.8301 209.017 40.8301 207.241 41.0449 205.788 cv
41.5527 202.587 43.5596 202.344 44.2285 202.344 cv
45.1113 202.344 46.877 202.829 47.3857 205.492 cv
47.6553 206.999 47.6553 209.042 47.6553 210.737 cv
47.6553 212.755 47.6553 214.585 47.3594 216.306 cv
46.959 218.86 45.4336 219.667 44.2285 219.667 cv
44.2285 219.669 li
cp
49.9053 211.06 mo
49.9053 208.906 49.7695 206.753 48.8281 204.759 cv
47.5898 202.175 45.3848 201.743 44.2559 201.743 cv
42.6406 201.743 40.6777 202.444 39.5742 204.948 cv
38.7129 206.806 38.5791 208.906 38.5791 211.06 cv
38.5791 213.08 38.6855 215.503 39.7891 217.55 cv
40.9463 219.73 42.9102 220.269 44.2275 220.269 cv
45.6807 220.269 47.7256 219.702 48.9092 217.146 cv
49.7695 215.288 49.9053 213.188 49.9053 211.06 cv
49.9053 211.06 li
cp
f
gsave
28.8301 221.318 mo
70.5303 221.318 li
70.5303 201.743 li
28.8301 201.743 li
clp
56.1309 218.243 mo
56.1309 217.464 55.4844 216.818 54.7041 216.818 cv
53.9248 216.818 53.2803 217.464 53.2803 218.243 cv
53.2803 219.024 53.9248 219.669 54.7041 219.669 cv
55.4844 219.669 56.1309 219.022 56.1309 218.243 cv
56.1309 218.243 li
cp
f
70.5313 214.253 mo
70.5313 211.043 68.3184 208.345 65.4063 208.345 cv
64.1113 208.345 62.9512 208.783 61.9805 209.743 cv
61.9805 204.497 li
62.5205 204.646 63.4111 204.819 64.2734 204.819 cv
67.5938 204.819 69.4824 202.394 69.4824 202.048 cv
69.4824 201.888 69.4023 201.755 69.2129 201.755 cv
69.1875 201.755 69.1328 201.755 68.998 201.831 cv
68.459 202.06 67.1387 202.567 65.333 202.567 cv
64.2549 202.567 63.0137 202.39 61.748 201.857 cv
61.5332 201.781 61.4785 201.781 61.4248 201.781 cv
61.1563 201.781 61.1563 201.997 61.1563 202.427 cv
61.1563 210.389 li
61.1563 210.872 61.1563 211.088 61.5332 211.088 cv
61.7227 211.088 61.7754 211.007 61.8828 210.845 cv
62.1797 210.41 63.1758 208.944 65.3564 208.944 cv
66.7568 208.944 67.4297 210.188 67.6445 210.673 cv
68.0752 211.67 68.1309 212.723 68.1309 214.07 cv
68.1309 215.015 68.1309 216.632 67.4844 217.767 cv
66.8418 218.817 65.8477 219.519 64.6113 219.519 cv
62.6494 219.519 61.1191 218.089 60.6621 216.495 cv
60.7393 216.507 60.8203 216.52 61.1094 216.52 cv
61.9814 216.52 62.4316 215.851 62.4316 215.207 cv
62.4316 214.563 61.9805 213.894 61.1035 213.894 cv
60.7334 213.894 59.8066 214.083 59.8066 215.325 cv
59.8066 217.649 61.6602 220.27 64.6709 220.27 cv
67.7881 220.27 70.5313 217.68 70.5313 214.253 cv
70.5313 214.253 li
cp
f
grestore
28.6025 261.481 mo
35.7295 261.481 li
35.7295 259.907 li
28.6025 259.907 li
28.6025 261.481 li
cp
f
45.1807 249.284 mo
45.1807 248.638 45.1807 248.583 44.5576 248.583 cv
42.8779 250.308 40.4932 250.308 39.624 250.308 cv
39.624 251.132 li
40.1631 251.132 41.7529 251.132 43.1553 250.448 cv
43.1553 264.39 li
43.1553 265.359 43.0742 265.682 40.6484 265.682 cv
39.7861 265.682 li
39.7861 266.507 li
40.7275 266.426 43.0684 266.426 44.1436 266.426 cv
45.2197 266.426 47.5615 266.426 48.501 266.507 cv
48.501 265.682 li
47.6514 265.682 li
45.2607 265.682 45.1807 265.386 45.1807 264.39 cv
45.1807 249.284 li
cp
f
55.8311 265.083 mo
55.8311 264.302 55.1846 263.657 54.4053 263.657 cv
53.626 263.657 52.9795 264.302 52.9795 265.083 cv
52.9795 265.862 53.626 266.508 54.4053 266.508 cv
55.1855 266.508 55.8311 265.862 55.8311 265.083 cv
55.8311 265.083 li
cp
f
64.8545 266.508 mo
63.8096 266.508 62.2314 265.835 61.751 263.253 cv
61.4551 261.639 61.4551 259.163 61.4551 257.576 cv
61.4551 255.854 61.4551 254.079 61.6689 252.628 cv
62.1787 249.427 64.1846 249.183 64.8545 249.183 cv
65.7373 249.183 67.5029 249.669 68.0117 252.331 cv
68.2803 253.837 68.2803 255.882 68.2803 257.576 cv
68.2803 259.594 68.2803 261.423 67.9854 263.145 cv
67.584 265.699 66.0576 266.507 64.8545 266.507 cv
64.8545 266.508 li
cp
70.5313 257.899 mo
70.5313 255.745 70.3936 253.591 69.4531 251.599 cv
68.2158 249.014 66.0107 248.583 64.8799 248.583 cv
63.2666 248.583 61.3027 249.283 60.2002 251.787 cv
59.3389 253.646 59.2041 255.745 59.2041 257.899 cv
59.2041 259.919 59.3115 262.342 60.415 264.388 cv
61.5723 266.569 63.5361 267.106 64.8535 267.106 cv
66.3057 267.106 68.3506 266.542 69.5342 263.983 cv
70.3955 262.126 70.5313 260.027 70.5313 257.899 cv
70.5313 257.899 li
cp
f
28.9023 305.767 mo
36.0293 305.767 li
36.0293 304.192 li
28.9023 304.192 li
28.9023 305.767 li
cp
f
45.4805 293.569 mo
45.4805 292.923 45.4805 292.868 44.8574 292.868 cv
43.1777 294.593 40.793 294.593 39.9238 294.593 cv
39.9238 295.417 li
40.4629 295.417 42.0527 295.417 43.4551 294.733 cv
43.4551 308.675 li
43.4551 309.645 43.373 309.967 40.9473 309.967 cv
40.0859 309.967 li
40.0859 310.792 li
41.0273 310.712 43.3672 310.712 44.4443 310.712 cv
45.5195 310.712 47.8604 310.712 48.8008 310.792 cv
48.8008 309.967 li
47.9512 309.967 li
45.5605 309.967 45.4805 309.671 45.4805 308.675 cv
45.4805 293.569 li
cp
f
gsave
28.8301 312.442 mo
70.5303 312.442 li
70.5303 292.868 li
28.8301 292.868 li
clp
56.1309 309.368 mo
56.1309 308.589 55.4844 307.942 54.7041 307.942 cv
53.9248 307.942 53.2803 308.589 53.2803 309.368 cv
53.2803 310.148 53.9248 310.793 54.7041 310.793 cv
55.4844 310.793 56.1309 310.147 56.1309 309.368 cv
56.1309 309.368 li
cp
f
70.5313 305.378 mo
70.5313 302.167 68.3184 299.469 65.4063 299.469 cv
64.1113 299.469 62.9512 299.907 61.9805 300.867 cv
61.9805 295.622 li
62.5205 295.77 63.4111 295.942 64.2734 295.942 cv
67.5938 295.942 69.4824 293.519 69.4824 293.171 cv
69.4824 293.012 69.4023 292.878 69.2129 292.878 cv
69.1875 292.878 69.1328 292.878 68.998 292.954 cv
68.459 293.183 67.1387 293.692 65.333 293.692 cv
64.2549 293.692 63.0137 293.515 61.748 292.981 cv
61.5332 292.905 61.4785 292.905 61.4248 292.905 cv
61.1563 292.905 61.1563 293.12 61.1563 293.552 cv
61.1563 301.513 li
61.1563 301.997 61.1563 302.212 61.5332 302.212 cv
61.7227 302.212 61.7754 302.13 61.8828 301.968 cv
62.1797 301.534 63.1758 300.068 65.3564 300.068 cv
66.7568 300.068 67.4297 301.312 67.6445 301.796 cv
68.0752 302.794 68.1309 303.847 68.1309 305.194 cv
68.1309 306.14 68.1309 307.757 67.4844 308.89 cv
66.8418 309.942 65.8477 310.642 64.6113 310.642 cv
62.6494 310.642 61.1191 309.212 60.6621 307.618 cv
60.7393 307.63 60.8203 307.644 61.1094 307.644 cv
61.9814 307.644 62.4316 306.974 62.4316 306.331 cv
62.4316 305.688 61.9805 305.017 61.1035 305.017 cv
60.7334 305.017 59.8066 305.208 59.8066 306.45 cv
59.8066 308.772 61.6602 311.394 64.6709 311.394 cv
67.7881 311.394 70.5313 308.804 70.5313 305.378 cv
70.5313 305.378 li
cp
f
grestore
gsave
38.2813 176.009 mo
70.5313 176.009 li
70.5313 156.434 li
38.2813 156.434 li
clp
43.9297 174.359 mo
42.8857 174.359 41.3066 173.687 40.8262 171.104 cv
40.5313 169.49 40.5313 167.015 40.5313 165.429 cv
40.5313 163.707 40.5313 161.931 40.7461 160.479 cv
41.2539 157.278 43.2607 157.034 43.9297 157.034 cv
44.8125 157.034 46.5781 157.52 47.0879 160.183 cv
47.3564 161.689 47.3564 163.733 47.3564 165.429 cv
47.3564 167.445 47.3564 169.274 47.0605 170.996 cv
46.6602 173.551 45.1348 174.358 43.9297 174.358 cv
43.9297 174.359 li
cp
49.6064 165.751 mo
49.6064 163.597 49.4707 161.443 48.5293 159.45 cv
47.292 156.866 45.0859 156.434 43.957 156.434 cv
42.3418 156.434 40.3789 157.135 39.2754 159.639 cv
38.4141 161.497 38.2803 163.597 38.2803 165.751 cv
38.2803 167.771 38.3867 170.193 39.4902 172.239 cv
40.6475 174.421 42.6113 174.958 43.9287 174.958 cv
45.3818 174.958 47.4268 174.394 48.6104 171.835 cv
49.4707 169.978 49.6064 167.879 49.6064 165.751 cv
49.6064 165.751 li
cp
f
grestore
55.9063 172.935 mo
55.9063 172.155 55.2607 171.509 54.4814 171.509 cv
53.7012 171.509 53.0566 172.155 53.0566 172.935 cv
53.0566 173.715 53.7021 174.359 54.4814 174.359 cv
55.2607 174.359 55.9063 173.714 55.9063 172.935 cv
55.9063 172.935 li
cp
f
64.8555 174.359 mo
63.8105 174.359 62.2324 173.687 61.75 171.104 cv
61.457 169.49 61.457 167.015 61.457 165.429 cv
61.457 163.707 61.457 161.931 61.6699 160.479 cv
62.1797 157.278 64.1855 157.034 64.8555 157.034 cv
65.7383 157.034 67.5039 157.52 68.0117 160.183 cv
68.2813 161.689 68.2813 163.733 68.2813 165.429 cv
68.2813 167.445 68.2813 169.274 67.9863 170.996 cv
67.5859 173.551 66.0596 174.358 64.8555 174.358 cv
64.8555 174.359 li
cp
70.5313 165.751 mo
70.5313 163.597 70.3955 161.443 69.4531 159.45 cv
68.2168 156.866 66.0098 156.434 64.8809 156.434 cv
63.2676 156.434 61.3047 157.135 60.2002 159.639 cv
59.3398 161.497 59.2051 163.597 59.2051 165.751 cv
59.2051 167.771 59.3125 170.193 60.416 172.239 cv
61.5723 174.421 63.5371 174.958 64.8535 174.958 cv
66.3066 174.958 68.3516 174.394 69.5352 171.835 cv
70.3965 169.978 70.5313 167.879 70.5313 165.751 cv
70.5313 165.751 li
cp
f
45.1816 66.9761 mo
45.1816 66.3296 45.1816 66.2739 44.5586 66.2739 cv
42.8789 67.999 40.4941 67.999 39.625 67.999 cv
39.625 68.8237 li
40.1641 68.8237 41.7539 68.8237 43.1563 68.1401 cv
43.1563 82.0811 li
43.1563 83.0508 43.0752 83.373 40.6494 83.373 cv
39.7871 83.373 li
39.7871 84.1978 li
40.7285 84.1187 43.0693 84.1187 44.1445 84.1187 cv
45.2207 84.1187 47.5605 84.1187 48.502 84.1978 cv
48.502 83.373 li
47.6523 83.373 li
45.2607 83.373 45.1816 83.0771 45.1816 82.0811 cv
45.1816 66.9761 li
cp
f
55.832 82.7739 mo
55.832 81.9946 55.1855 81.3486 54.4063 81.3486 cv
53.625 81.3486 52.9805 81.9946 52.9805 82.7739 cv
52.9805 83.5547 53.627 84.1992 54.4063 84.1992 cv
55.1855 84.1992 55.832 83.5532 55.832 82.7739 cv
55.832 82.7739 li
cp
f
64.8555 84.1992 mo
63.8105 84.1992 62.2324 83.5269 61.75 80.9443 cv
61.4561 79.3301 61.4561 76.8545 61.4561 75.2681 cv
61.4561 73.5469 61.4561 71.771 61.6699 70.3188 cv
62.1797 67.1177 64.1855 66.874 64.8555 66.874 cv
65.7383 66.874 67.5039 67.3599 68.0127 70.0225 cv
68.2813 71.5293 68.2813 73.5728 68.2813 75.2681 cv
68.2813 77.2852 68.2813 79.1147 67.9863 80.8359 cv
67.585 83.3906 66.0586 84.1978 64.8555 84.1978 cv
64.8555 84.1992 li
cp
70.5313 75.5903 mo
70.5313 73.4365 70.3945 71.2827 69.4541 69.2896 cv
68.2168 66.7056 66.0117 66.2739 64.8809 66.2739 cv
63.2676 66.2739 61.3037 66.9746 60.2012 69.4785 cv
59.3398 71.3364 59.2051 73.4365 59.2051 75.5903 cv
59.2051 77.6104 59.3125 80.0332 60.416 82.0796 cv
61.5723 84.2607 63.5361 84.7983 64.8535 84.7983 cv
66.3066 84.7983 68.3516 84.2329 69.5352 81.6753 cv
70.3965 79.8179 70.5313 77.7188 70.5313 75.5903 cv
70.5313 75.5903 li
cp
f
45.4805 20.2793 mo
45.4805 19.6328 45.4805 19.5771 44.8574 19.5771 cv
43.1777 21.3022 40.793 21.3022 39.9238 21.3022 cv
39.9238 22.127 li
40.4629 22.127 42.0537 22.127 43.4551 21.4434 cv
43.4551 35.3843 li
43.4551 36.354 43.373 36.6763 40.9492 36.6763 cv
40.0859 36.6763 li
40.0859 37.501 li
41.0273 37.4219 43.3672 37.4219 44.4443 37.4219 cv
45.5195 37.4219 47.8604 37.4219 48.8027 37.501 cv
48.8027 36.6763 li
47.9512 36.6763 li
45.5605 36.6763 45.4805 36.3804 45.4805 35.3843 cv
45.4805 20.2793 li
cp
f
gsave
39.7051 39.1519 mo
70.4551 39.1519 li
70.4551 19.5771 li
39.7051 19.5771 li
clp
56.1309 36.0771 mo
56.1309 35.2979 55.4844 34.6519 54.7051 34.6519 cv
53.9248 34.6519 53.2803 35.2979 53.2803 36.0771 cv
53.2803 36.8579 53.9258 37.5024 54.7051 37.5024 cv
55.4844 37.5024 56.1309 36.8564 56.1309 36.0771 cv
56.1309 36.0771 li
cp
f
70.5313 32.0869 mo
70.5313 28.8765 68.3184 26.1782 65.4063 26.1782 cv
64.1113 26.1782 62.9512 26.6167 61.9805 27.5767 cv
61.9805 22.3311 li
62.5205 22.479 63.4111 22.6523 64.2734 22.6523 cv
67.5938 22.6523 69.4844 20.2275 69.4844 19.8809 cv
69.4844 19.7212 69.4023 19.5879 69.2129 19.5879 cv
69.1875 19.5879 69.1328 19.5879 68.998 19.6641 cv
68.459 19.8926 67.1387 20.4014 65.333 20.4014 cv
64.2559 20.4014 63.0156 20.2236 61.75 19.6909 cv
61.5332 19.6147 61.4805 19.6147 61.4258 19.6147 cv
61.1563 19.6147 61.1563 19.8301 61.1563 20.2607 cv
61.1563 28.2222 li
61.1563 28.7061 61.1563 28.9214 61.5332 28.9214 cv
61.7227 28.9214 61.7754 28.8398 61.8828 28.6777 cv
62.1797 28.2437 63.1758 26.7778 65.3564 26.7778 cv
66.7568 26.7778 67.4297 28.021 67.6445 28.5059 cv
68.0762 29.5034 68.1309 30.5562 68.1309 31.9038 cv
68.1309 32.8486 68.1309 34.4658 67.4863 35.5996 cv
66.8418 36.6514 65.8477 37.3516 64.6113 37.3516 cv
62.6494 37.3516 61.1172 35.9219 60.6621 34.3281 cv
60.7402 34.3398 60.8203 34.353 61.1094 34.353 cv
61.9814 34.353 62.4316 33.6836 62.4316 33.0405 cv
62.4316 32.3975 61.9805 31.7266 61.1055 31.7266 cv
60.7334 31.7266 59.8047 31.917 59.8047 33.1592 cv
59.8047 35.4824 61.6602 38.103 64.6709 38.103 cv
67.7891 38.103 70.5313 35.5132 70.5313 32.0869 cv
70.5313 32.0869 li
cp
f
grestore
26.6558 255.729 mo
26.5752 255.729 26.521 255.729 26.0625 256.189 cv
22.6714 259.567 17.584 260.434 13.4648 260.434 cv
8.78125 260.434 4.09668 259.406 .732422 256.081 cv
.408691 255.729 .354492 255.729 .273926 255.729 cv
.0864258 255.729 0 255.837 0 255.999 cv
0 256.271 1.83545 258.706 5.25488 260.302 cv
8.21631 261.683 11.2046 262.007 13.4658 262.007 cv
15.5654 262.007 18.8232 261.709 21.8643 260.221 cv
25.1748 258.597 26.9253 256.269 26.9253 255.998 cv
26.9253 255.835 26.8433 255.728 26.6558 255.728 cv
26.6558 255.729 li
cp
f
16.9629 245.921 mo
17.4492 246.055 17.502 246.055 17.9604 246.457 cv
19.4443 247.64 19.8735 248.739 19.8735 249.491 cv
19.8735 250.833 18.3926 251.208 17.3408 251.208 cv
15.9932 251.208 12.6782 250.35 11.4385 249.732 cv
9.84814 248.9 8.84961 247.692 8.84961 246.618 cv
8.84961 244.875 11.061 244.497 11.2227 244.497 cv
11.3848 244.497 11.5459 244.552 11.6807 244.579 cv
16.9629 245.921 li
cp
1.79736 240.327 mo
1.76953 240.327 1.49902 240.327 1.49902 240.677 cv
1.49902 241.08 1.74023 243.625 1.79443 244.08 cv
1.8208 244.295 1.9541 244.455 2.30273 244.455 cv
2.62402 244.455 2.62402 244.215 2.62402 243.813 cv
2.62402 242.525 2.81396 242.473 3.0835 242.473 cv
3.62256 242.554 li
10.0063 244.161 li
8.99121 244.644 8.24902 245.42 8.24902 246.627 cv
8.24902 249.762 12.2183 253.084 16.1572 253.084 cv
18.6943 253.084 20.4741 251.61 20.4741 249.521 cv
20.4741 248.984 20.3657 247.644 18.4526 246.036 cv
19.585 245.821 20.4741 244.884 20.4741 243.598 cv
20.4741 242.66 19.8545 242.044 18.9932 241.614 cv
18.0234 241.16 16.3813 240.811 16.3271 240.811 cv
16.0576 240.811 16.0576 241.052 16.0576 241.133 cv
16.0576 241.4 16.166 241.427 16.5425 241.508 cv
18.2886 241.963 19.8735 242.445 19.8735 243.544 cv
19.8735 244.268 19.1748 244.348 18.6357 244.348 cv
17.9897 244.348 17.8022 244.295 17.3438 244.188 cv
1.79736 240.327 li
cp
f
4.61865 219.846 mo
3.54199 219.577 2.7085 219.094 2.62598 216.94 cv
2.62598 216.806 2.59863 216.483 2.09326 216.483 cv
2.06641 216.483 1.80029 216.483 1.80029 216.832 cv
1.80029 217.721 1.88086 218.662 1.88086 219.55 cv
1.88086 220.465 1.80029 221.406 1.80029 222.293 cv
1.80029 222.454 1.80029 222.778 2.3335 222.778 cv
2.62598 222.778 2.62598 222.509 2.62598 222.293 cv
2.65332 220.76 3.21826 220.464 3.81055 220.464 cv
3.89209 220.464 4.29492 220.518 4.37598 220.544 cv
16.3564 223.558 li
2.31348 229.502 li
1.82959 229.718 1.80029 229.745 1.80029 230.363 cv
1.80029 233.968 li
1.80029 234.506 1.80029 234.748 2.3335 234.748 cv
2.62598 234.748 2.62598 234.506 2.62598 233.994 cv
2.62598 233.861 2.62598 232.166 2.87109 232.166 cv
17.3306 235.77 li
18.4072 236.039 19.2686 236.496 19.3506 238.675 cv
19.3506 238.836 19.377 239.133 19.8823 239.133 cv
20.0684 239.133 20.1753 238.998 20.1753 238.783 cv
20.1753 237.922 20.0947 236.981 20.0947 236.093 cv
20.0947 235.178 20.1753 234.21 20.1753 233.322 cv
20.1753 233.188 20.1753 232.837 19.6421 232.837 cv
19.3755 232.837 19.3506 233.08 19.3506 233.376 cv
19.2964 234.937 18.7046 235.151 18.1655 235.151 cv
17.978 235.151 17.8433 235.125 17.5474 235.045 cv
3.33545 231.492 li
3.49707 231.386 3.55078 231.386 3.82031 231.251 cv
19.6641 224.552 li
20.1211 224.364 20.1753 224.283 20.1753 224.042 cv
20.1753 223.745 20.0962 223.745 19.6099 223.611 cv
4.61865 219.846 li
cp
f
1.01514 206.044 mo
.665039 205.907 .558105 205.907 .524414 205.907 cv
.23584 205.907 0 206.15 0 206.445 cv
0 206.633 .0820313 206.82 .243164 206.9 cv
25.8413 216.198 li
26.1914 216.333 26.2983 216.333 26.3262 216.333 cv
26.6558 216.333 26.9253 216.092 26.9253 215.797 cv
26.9253 215.449 26.7363 215.369 26.2793 215.208 cv
1.01514 206.044 li
cp
f
16.9629 196.121 mo
17.4492 196.255 17.502 196.255 17.9604 196.658 cv
19.4443 197.839 19.8735 198.939 19.8735 199.69 cv
19.8735 201.032 18.3926 201.408 17.3408 201.408 cv
15.9932 201.408 12.6782 200.549 11.4385 199.933 cv
9.84814 199.101 8.84961 197.892 8.84961 196.818 cv
8.84961 195.075 11.061 194.697 11.2227 194.697 cv
11.3848 194.697 11.5459 194.752 11.6807 194.779 cv
16.9629 196.121 li
cp
1.79736 190.526 mo
1.76953 190.526 1.49902 190.526 1.49902 190.877 cv
1.49902 191.279 1.74023 193.825 1.79443 194.28 cv
1.8208 194.495 1.9541 194.655 2.30273 194.655 cv
2.62402 194.655 2.62402 194.414 2.62402 194.013 cv
2.62402 192.727 2.81396 192.673 3.0835 192.673 cv
3.62256 192.753 li
10.0063 194.361 li
8.99121 194.844 8.24902 195.62 8.24902 196.827 cv
8.24902 199.962 12.2183 203.284 16.1572 203.284 cv
18.6943 203.284 20.4741 201.811 20.4741 199.72 cv
20.4741 199.185 20.3657 197.844 18.4526 196.236 cv
19.585 196.021 20.4741 195.084 20.4741 193.798 cv
20.4741 192.86 19.8545 192.243 18.9932 191.814 cv
18.0234 191.36 16.3813 191.012 16.3271 191.012 cv
16.0576 191.012 16.0576 191.252 16.0576 191.332 cv
16.0576 191.601 16.166 191.627 16.5425 191.707 cv
18.2886 192.163 19.8735 192.645 19.8735 193.743 cv
19.8735 194.468 19.1748 194.548 18.6357 194.548 cv
17.9897 194.548 17.8022 194.495 17.3438 194.388 cv
1.79736 190.526 li
cp
f
12.6885 177.324 mo
12.2036 177.189 11.855 177.108 11.1284 177.108 cv
9.37988 177.108 8.25 178.186 8.25 180.204 cv
8.25 182.329 9.6709 183.729 10.626 184.375 cv
9.06934 184.509 8.25 185.64 8.25 186.852 cv
8.25 188.089 9.30762 188.601 9.79688 188.843 cv
10.7183 189.327 12.3447 189.677 12.4263 189.677 cv
12.6963 189.677 12.6963 189.407 12.6963 189.354 cv
12.6963 189.085 12.6694 189.058 12.0747 188.896 cv
10.1499 188.439 8.84961 187.901 8.84961 186.932 cv
8.84961 186.475 9.06738 186.098 10.0918 186.098 cv
10.6582 186.098 10.9541 186.179 12.3574 186.528 cv
18.5845 188.089 li
18.9888 188.17 19.6099 188.331 19.7446 188.331 cv
20.2295 188.331 20.4712 187.954 20.4712 187.552 cv
20.4712 187.229 20.2559 186.744 19.7168 186.556 cv
19.6641 186.529 18.397 186.207 17.7217 186.044 cv
16.9131 185.856 16.1045 185.642 15.2959 185.452 cv
14.7026 185.291 14.1094 185.13 13.4897 184.995 cv
13.3286 184.941 12.4385 184.726 12.2769 184.699 cv
12.0342 184.617 10.5249 183.784 9.79688 182.87 cv
9.36475 182.278 8.85059 181.443 8.85059 180.287 cv
8.85059 179.129 9.76611 178.833 10.7329 178.833 cv
10.8677 178.833 11.3516 178.833 12.4277 179.103 cv
24.7954 182.173 li
25.1177 182.252 25.1719 182.252 25.2261 182.252 cv
25.6289 182.252 25.9526 181.956 25.9526 181.499 cv
25.9526 180.664 25.1719 180.476 24.876 180.395 cv
12.6885 177.324 li
cp
f
13.4658 168.331 mo
11.3657 168.331 8.10791 168.63 5.06641 170.115 cv
1.75488 171.735 0 174.059 0 174.33 cv
0 174.491 .112793 174.6 .273926 174.6 cv
.354492 174.6 .408691 174.6 .893555 174.087 cv
3.55859 171.444 7.83838 169.907 13.4648 169.907 cv
18.0674 169.907 22.8062 170.906 26.1973 174.249 cv
26.521 174.6 26.5737 174.6 26.6543 174.6 cv
26.8169 174.6 26.9238 174.491 26.9238 174.33 cv
26.9238 174.059 25.0928 171.628 21.6753 170.034 cv
18.7134 168.656 15.7266 168.331 13.4648 168.331 cv
13.4658 168.331 li
cp
f
8.54736 159.606 mo
8.51953 159.606 8.25 159.606 8.25 159.957 cv
8.25 160.575 8.46387 162.539 8.51807 163.238 cv
8.54443 163.453 8.5708 163.749 9.05273 163.749 cv
9.37402 163.749 9.37402 163.508 9.37402 163.104 cv
9.37402 161.813 9.56396 161.76 9.8335 161.76 cv
10.0225 161.76 11.2925 162.082 12.0205 162.271 cv
18.6357 163.912 li
19.0415 164.019 19.7974 164.208 19.8516 164.208 cv
20.1475 164.208 20.1753 163.938 20.1753 163.777 cv
20.1753 163.4 li
19.8516 161.519 18.7998 158.586 16.2085 155.815 cv
12.8906 152.265 9.22119 151.538 8.97949 151.538 cv
8.51953 151.538 8.25 151.86 8.25 152.319 cv
8.25 152.533 8.3584 153.152 9.14063 153.366 cv
15.2666 155.089 18.2886 159.178 19.2876 162.243 cv
8.54736 159.606 li
cp
f
22.2305 144.318 mo
23.1152 144.809 23.8696 145.775 23.8696 147.006 cv
23.8696 148.065 23.2471 148.822 22.7021 149.202 cv
22.1367 149.58 21.3823 149.807 20.1768 149.807 cv
19.7432 149.807 18.3296 149.807 17.4448 149.03 cv
16.5952 148.273 16.4253 147.346 16.4253 146.797 cv
16.4253 145.889 16.8398 145.074 17.5195 144.544 cv
17.8213 144.316 17.8389 144.316 18.1978 144.316 cv
22.2305 144.318 li
cp
11.3569 145.654 mo
12.0469 145.654 li
12.0469 144.406 12.1787 144.257 13.1001 144.257 cv
16.9937 144.257 li
16.3037 144.957 15.8994 145.863 15.8994 146.903 cv
15.8994 149.416 17.7832 151.532 20.1563 151.532 cv
22.5117 151.532 24.394 149.528 24.394 147.128 cv
24.394 145.578 23.5796 144.65 23.2456 144.33 cv
24.394 144.33 li
24.2065 141.418 li
23.5283 141.418 li
23.5283 142.681 23.3979 142.831 22.4751 142.831 cv
11.146 142.831 li
11.3569 145.654 li
cp
f
17.9648 131.533 mo
16.8208 131.004 16.8003 130.04 16.8003 129.737 cv
16.125 129.737 li
16.1631 130.271 16.1997 130.629 16.1997 131.179 cv
16.1997 131.689 16.1807 132.392 16.125 132.902 cv
16.8003 132.902 li
16.8369 132.277 17.2134 132.126 17.5137 132.126 cv
17.7393 132.126 17.9077 132.22 18.0967 132.296 cv
22.5498 134.398 li
17.5884 136.728 li
17.4771 136.783 17.3643 136.84 17.2324 136.84 cv
16.7988 136.84 16.7988 136.197 16.7988 135.875 cv
16.1235 135.875 li
16.1426 136.159 16.1997 137.521 16.1997 138.053 cv
16.1997 138.62 16.1807 139.359 16.1235 139.907 cv
16.7988 139.907 li
16.7988 138.841 16.8574 138.632 17.458 138.345 cv
24.2183 135.143 li
24.5947 135.311 24.9521 135.5 25.3271 135.67 cv
26.228 136.083 27.5229 136.687 27.5229 137.967 cv
27.5229 138.437 27.4292 138.588 27.2988 138.776 cv
27.2988 138.759 27.1069 138.26 26.4741 138.26 cv
25.9937 138.26 25.6479 138.601 25.6479 139.074 cv
25.6479 139.567 25.9922 139.907 26.4873 139.907 cv
27.3823 139.907 28.0488 139.02 28.0488 137.999 cv
28.0488 136.392 26.3774 135.466 25.8135 135.201 cv
17.9648 131.533 li
cp
f
18.5391 119.508 mo
16.9058 119.508 15.9478 120.315 15.9478 122.325 cv
15.9478 123.866 16.7827 124.86 17.748 125.387 cv
17.748 125.405 li
15.9478 125.405 li
16.1543 128.165 li
16.8311 128.165 li
16.8311 126.929 16.9614 126.782 17.8828 126.782 cv
22.7432 126.782 li
23.5503 126.782 23.5503 126.967 23.5503 128.165 cv
24.2256 128.165 li
24.2256 128.127 24.1509 126.811 24.1509 126.02 cv
24.1509 125.322 24.2065 124.022 24.2256 123.854 cv
23.5503 123.854 li
23.5503 125.092 23.5503 125.282 22.7432 125.282 cv
19.3652 125.282 li
17.3936 125.282 16.4722 123.727 16.4722 122.489 cv
16.4722 121.177 17.5063 121.008 18.4629 121.008 cv
22.7432 121.008 li
23.5503 121.008 23.5503 121.191 23.5503 122.385 cv
24.2256 122.385 li
24.2256 122.349 24.1494 121.028 24.1494 120.239 cv
24.1494 119.542 24.2065 118.242 24.2256 118.072 cv
23.5503 118.072 li
23.5503 119.316 23.5503 119.508 22.7432 119.508 cv
18.5391 119.508 li
cp
f
23.9238 113.282 mo
24.9507 113.282 26.1445 113.472 27.3398 114.753 cv
27.4146 114.829 27.4702 114.885 27.5625 114.885 cv
27.6943 114.885 27.8247 114.734 27.8247 114.621 cv
27.8247 114.357 26.3247 112.757 24.0938 112.757 cv
22.9307 112.757 22.0488 113.208 22.0488 114.075 cv
22.0488 114.696 22.541 115.147 23.127 115.147 cv
23.7319 115.147 24.2241 114.714 24.2241 114.055 cv
24.2241 113.604 23.9224 113.302 23.9224 113.281 cv
23.9238 113.282 li
cp
f
16.6772 100.112 mo
16.5264 100.187 16.4707 100.225 16.4517 100.225 cv
16.4136 100.225 16.3945 100.206 16.0942 99.7725 cv
15.6431 99.1514 15.1934 98.5107 14.7612 97.8711 cv
13.0137 95.3848 12.1885 94.2178 12.0747 92.8818 cv
12.0557 92.6738 12.0361 92.4482 11.6499 92.4482 cv
11.4961 92.4482 11.3994 92.5801 11.3994 92.6924 cv
11.3994 93.0879 11.4551 93.5771 11.4551 93.9922 cv
11.4551 94.5 11.3994 95.7617 11.3994 96.2695 cv
11.3994 96.3828 11.3994 96.665 11.8115 96.665 cv
11.8301 96.665 12.0557 96.665 12.0747 96.3828 cv
12.0938 96.1572 12.1309 95.9121 12.3369 95.9121 cv
12.6738 95.9121 13.0869 96.4951 13.2549 96.7402 cv
18.7632 104.593 li
12.8613 103.104 li
12.2241 102.935 12.0732 102.917 12.0732 101.448 cv
12.0732 101.146 12.0732 100.884 11.6792 100.884 cv
11.5107 100.884 11.3979 100.997 11.3979 101.185 cv
11.3979 101.73 11.4741 103.106 11.4741 103.651 cv
11.4741 103.972 11.4741 104.631 11.4551 104.95 cv
11.4365 105.327 11.3994 105.779 11.3994 106.137 cv
11.3994 106.25 11.3994 106.532 11.8115 106.532 cv
12.0747 106.532 12.0747 106.326 12.0747 105.911 cv
12.0747 105.609 12.0747 105.533 12.1128 105.195 cv
12.1509 104.818 12.1885 104.78 12.3765 104.78 cv
12.4141 104.78 12.5078 104.78 12.7896 104.856 cv
22.7622 107.36 li
23.3994 107.511 23.5503 107.549 23.5503 109.017 cv
23.5503 109.356 23.5503 109.582 23.9634 109.582 cv
23.9824 109.582 24.2256 109.582 24.2256 109.28 cv
24.2256 108.734 24.1509 107.378 24.1509 106.833 cv
24.1509 106.512 24.1509 105.854 24.1699 105.533 cv
24.1875 105.157 24.2256 104.686 24.2256 104.328 cv
24.2256 104.215 24.2256 103.933 23.8125 103.933 cv
23.5503 103.933 23.5503 104.159 23.5503 104.536 cv
23.5503 104.555 23.5503 104.912 23.5137 105.251 cv
23.4756 105.685 23.4199 105.685 23.231 105.685 cv
23.0801 105.685 22.3828 105.495 19.6143 104.8 cv
17.4097 101.674 li
22.7036 98.9434 li
22.9497 98.8096 22.9673 98.8096 23.061 98.8096 cv
23.4946 98.8096 23.5518 99.3369 23.5518 99.6768 cv
23.5518 99.9023 23.5518 100.166 23.9634 100.166 cv
23.9824 100.166 24.2271 100.147 24.2271 99.8457 cv
24.2271 99.3193 24.1509 97.9629 24.1509 97.4355 cv
24.1509 96.8701 24.2271 96.1172 24.2271 95.5898 cv
24.2271 95.3457 24.0952 95.2139 23.833 95.2139 cv
23.5518 95.2139 23.5518 95.46 23.5518 95.6475 cv
23.5518 95.9873 23.5327 96.5703 22.9321 96.8906 cv
16.6772 100.112 li
cp
f
17.3994 85.6758 mo
17.3994 83.4346 li
18.5347 83.707 20.2544 84.1074 21.7471 84.1074 cv
22.5044 84.1074 23.0142 84.0137 23.4302 83.9004 cv
24.375 83.6016 24.4512 83.3574 24.4512 83.0566 cv
24.4512 82.6631 24.0542 82.21 23.6001 82.21 cv
23.4492 82.21 23.373 82.2471 23.1841 82.3613 cv
22.4854 82.7188 21.4087 83.0566 19.8589 83.0566 cv
19.4985 83.0566 18.7427 83.0566 17.4009 82.793 cv
17.4009 80.4277 li
17.4009 80.0879 17.4009 79.9355 17.25 79.7285 cv
17.0625 79.4639 16.7637 79.4053 16.6699 79.4053 cv
16.125 79.4053 16.125 79.8955 16.125 80.2148 cv
16.125 87.3135 li
16.125 88.0859 16.2949 88.6133 17.0815 89.46 cv
17.5122 89.9502 18.5229 90.6846 18.6914 90.6846 cv
18.917 90.6846 18.917 90.4385 18.917 90.3633 cv
18.917 90.1572 18.8789 90.1377 18.7104 90.0254 cv
17.4009 89.0645 17.4009 87.8965 17.4009 87.4834 cv
17.4009 86.335 li
19.481 86.918 21.7104 87.9346 22.8442 88.5 cv
23.0903 88.6133 23.4873 88.8018 23.562 88.8574 cv
23.6382 88.877 23.7144 88.915 23.8462 88.915 cv
24.1479 88.915 24.4512 88.6875 24.4512 88.2559 cv
24.4512 87.501 23.6001 87.2949 21.8994 86.8418 cv
17.3994 85.6758 li
cp
f
267.458 373.799 mo
267.325 374.284 267.325 374.338 266.923 374.796 cv
265.74 376.278 264.64 376.71 263.889 376.71 cv
262.547 376.71 262.171 375.228 262.171 374.177 cv
262.171 372.829 263.03 369.514 263.647 368.274 cv
264.478 366.685 265.687 365.687 266.76 365.687 cv
268.505 365.687 268.882 367.896 268.882 368.06 cv
268.882 368.221 268.827 368.382 268.8 368.517 cv
267.458 373.799 li
cp
273.053 358.633 mo
273.053 358.606 273.053 358.335 272.701 358.335 cv
272.3 358.335 269.754 358.576 269.298 358.63 cv
269.085 358.657 268.923 358.79 268.923 359.14 cv
268.923 359.461 269.165 359.461 269.566 359.461 cv
270.853 359.461 270.905 359.649 270.905 359.919 cv
270.826 360.458 li
269.218 366.842 li
268.735 365.826 267.96 365.084 266.753 365.084 cv
263.618 365.084 260.296 369.054 260.296 372.991 cv
260.296 375.527 261.769 377.308 263.859 377.308 cv
264.396 377.308 265.735 377.2 267.343 375.288 cv
267.558 376.419 268.495 377.308 269.782 377.308 cv
270.72 377.308 271.336 376.688 271.765 375.827 cv
272.22 374.858 272.569 373.216 272.569 373.163 cv
272.569 372.894 272.327 372.894 272.247 372.894 cv
271.979 372.894 271.952 373.002 271.872 373.378 cv
271.417 375.124 270.935 376.708 269.836 376.708 cv
269.112 376.708 269.032 376.01 269.032 375.472 cv
269.032 374.825 269.085 374.638 269.192 374.181 cv
273.053 358.633 li
cp
f
293.458 361.455 mo
293.727 360.378 294.211 359.544 296.362 359.46 cv
296.497 359.46 296.819 359.435 296.819 358.929 cv
296.819 358.901 296.819 358.636 296.469 358.636 cv
295.583 358.636 294.641 358.716 293.752 358.716 cv
292.838 358.716 291.897 358.636 291.008 358.636 cv
290.848 358.636 290.526 358.636 290.526 359.168 cv
290.526 359.46 290.795 359.46 291.008 359.46 cv
292.543 359.489 292.838 360.055 292.838 360.646 cv
292.838 360.728 292.784 361.131 292.758 361.212 cv
289.745 373.19 li
283.8 359.149 li
283.585 358.665 283.559 358.636 282.94 358.636 cv
279.335 358.636 li
278.798 358.636 278.555 358.636 278.555 359.168 cv
278.555 359.46 278.798 359.46 279.308 359.46 cv
279.442 359.46 281.138 359.46 281.138 359.703 cv
277.532 374.165 li
277.265 375.242 276.808 376.104 274.628 376.185 cv
274.468 376.185 274.171 376.212 274.171 376.718 cv
274.171 376.903 274.306 377.011 274.521 377.011 cv
275.382 377.011 276.322 376.93 277.21 376.93 cv
278.126 376.93 279.094 377.011 279.981 377.011 cv
280.114 377.011 280.466 377.011 280.466 376.478 cv
280.466 376.211 280.224 376.185 279.927 376.185 cv
278.367 376.131 278.151 375.539 278.151 375 cv
278.151 374.812 278.179 374.678 278.259 374.382 cv
281.81 360.171 li
281.918 360.332 281.918 360.387 282.053 360.655 cv
288.75 376.498 li
288.938 376.955 289.02 377.01 289.26 377.01 cv
289.557 377.01 289.557 376.929 289.69 376.444 cv
293.458 361.455 li
cp
f
307.262 357.864 mo
307.396 357.515 307.396 357.407 307.396 357.38 cv
307.396 357.083 307.154 356.836 306.859 356.836 cv
306.672 356.836 306.484 356.922 306.404 357.083 cv
297.102 382.737 li
296.967 383.087 296.967 383.195 296.967 383.222 cv
296.967 383.518 297.209 383.761 297.504 383.761 cv
297.852 383.761 297.934 383.572 298.094 383.114 cv
307.262 357.864 li
cp
f
gsave
260.222 384.81 mo
336.195 384.81 li
336.195 356.835 li
260.222 356.835 li
clp
317.184 373.799 mo
317.049 374.284 317.049 374.338 316.646 374.796 cv
315.465 376.278 314.365 376.71 313.613 376.71 cv
312.271 376.71 311.895 375.228 311.895 374.177 cv
311.895 372.829 312.754 369.514 313.371 368.274 cv
314.203 366.685 315.41 365.687 316.484 365.687 cv
318.229 365.687 318.605 367.896 318.605 368.06 cv
318.605 368.221 318.551 368.382 318.523 368.517 cv
317.184 373.799 li
cp
322.777 358.633 mo
322.777 358.606 322.777 358.335 322.426 358.335 cv
322.023 358.335 319.479 358.576 319.023 358.63 cv
318.809 358.657 318.648 358.79 318.648 359.14 cv
318.648 359.461 318.889 359.461 319.291 359.461 cv
320.576 359.461 320.631 359.649 320.631 359.919 cv
320.549 360.458 li
318.943 366.842 li
318.461 365.826 317.684 365.084 316.477 365.084 cv
313.342 365.084 310.02 369.054 310.02 372.991 cv
310.02 375.527 311.494 377.308 313.584 377.308 cv
314.119 377.308 315.459 377.2 317.068 375.288 cv
317.281 376.419 318.219 377.308 319.506 377.308 cv
320.443 377.308 321.061 376.688 321.488 375.827 cv
321.943 374.858 322.293 373.216 322.293 373.163 cv
322.293 372.894 322.053 372.894 321.971 372.894 cv
321.703 372.894 321.676 373.002 321.596 373.378 cv
321.141 375.124 320.658 376.708 319.561 376.708 cv
318.838 376.708 318.756 376.01 318.756 375.472 cv
318.756 374.825 318.809 374.638 318.916 374.181 cv
322.777 358.633 li
cp
f
336.055 369.523 mo
336.189 369.039 336.271 368.689 336.271 367.964 cv
336.271 366.216 335.193 365.085 333.174 365.085 cv
331.047 365.085 329.648 366.505 329.002 367.461 cv
328.869 365.905 327.738 365.085 326.527 365.085 cv
325.289 365.085 324.777 366.144 324.535 366.631 cv
324.051 367.553 323.701 369.179 323.701 369.261 cv
323.701 369.531 323.971 369.531 324.023 369.531 cv
324.293 369.531 324.32 369.504 324.48 368.909 cv
324.939 366.985 325.477 365.685 326.445 365.685 cv
326.902 365.685 327.279 365.901 327.279 366.927 cv
327.279 367.492 327.199 367.788 326.85 369.19 cv
325.289 375.418 li
325.207 375.822 325.045 376.442 325.045 376.577 cv
325.045 377.063 325.422 377.305 325.826 377.305 cv
326.15 377.305 326.633 377.089 326.822 376.55 cv
326.85 376.496 327.172 375.229 327.334 374.556 cv
327.521 373.747 327.738 372.938 327.926 372.13 cv
328.086 371.536 328.248 370.942 328.383 370.323 cv
328.438 370.161 328.652 369.271 328.68 369.109 cv
328.76 368.867 329.594 367.357 330.508 366.63 cv
331.1 366.198 331.936 365.685 333.092 365.685 cv
334.248 365.685 334.545 366.603 334.545 367.569 cv
334.545 367.704 334.545 368.188 334.275 369.264 cv
331.207 381.628 li
331.125 381.95 331.125 382.005 331.125 382.058 cv
331.125 382.46 331.422 382.784 331.879 382.784 cv
332.715 382.784 332.902 382.004 332.984 381.707 cv
336.055 369.523 li
cp
f
grestore
gsave
69.3003 353.054 mo
80.7007 353.054 li
80.7007 333.478 li
69.3003 333.478 li
clp
74.9487 351.403 mo
73.9048 351.403 72.3257 350.731 71.8452 348.149 cv
71.5503 346.534 71.5503 344.06 71.5503 342.472 cv
71.5503 340.751 71.5503 338.976 71.7651 337.522 cv
72.2729 334.321 74.2798 334.079 74.9487 334.079 cv
75.8315 334.079 77.5972 334.563 78.1069 337.228 cv
78.3745 338.733 78.3745 340.776 78.3745 342.472 cv
78.3745 344.489 78.3745 346.319 78.0796 348.04 cv
77.6792 350.595 76.1538 351.401 74.9487 351.401 cv
74.9487 351.403 li
cp
80.6255 342.794 mo
80.6255 340.642 80.4897 338.487 79.5483 336.493 cv
78.3101 333.909 76.105 333.478 74.9761 333.478 cv
73.3608 333.478 71.3979 334.179 70.2944 336.683 cv
69.4331 338.54 69.2993 340.642 69.2993 342.794 cv
69.2993 344.815 69.4058 347.237 70.5093 349.284 cv
71.6665 351.466 73.6304 352.003 74.9478 352.003 cv
76.4009 352.003 78.4448 351.437 79.6284 348.88 cv
80.4897 347.022 80.6255 344.923 80.6255 342.794 cv
80.6255 342.794 li
cp
f
grestore
180.522 347.821 mo
179.85 347.821 li
179.715 348.618 179.526 349.79 179.258 350.188 cv
179.069 350.401 177.295 350.401 176.704 350.401 cv
171.862 350.401 li
174.713 347.634 li
178.909 343.927 180.522 342.476 180.522 339.79 cv
180.522 336.726 178.102 334.577 174.823 334.577 cv
171.784 334.577 169.793 337.052 169.793 339.446 cv
169.793 340.952 171.152 340.952 171.233 340.952 cv
171.694 340.952 172.645 340.628 172.645 339.515 cv
172.645 338.808 172.153 338.103 171.196 338.103 cv
170.976 338.103 170.922 338.103 170.84 338.103 cv
171.456 336.382 172.903 335.403 174.456 335.403 cv
176.893 335.403 178.045 337.587 178.045 339.794 cv
178.045 341.948 176.706 344.075 175.231 345.745 cv
170.088 351.507 li
169.793 351.804 169.793 351.856 169.793 352.503 cv
179.77 352.503 li
180.522 347.821 li
cp
f
188.645 352.503 mo
187.6 352.503 186.022 351.829 185.54 349.247 cv
185.245 347.634 185.245 345.157 185.245 343.571 cv
185.245 341.851 185.245 340.073 185.46 338.622 cv
185.969 335.421 187.975 335.177 188.645 335.177 cv
189.527 335.177 191.293 335.663 191.801 338.325 cv
192.071 339.833 192.071 341.876 192.071 343.571 cv
192.071 345.589 192.071 347.417 191.776 349.14 cv
191.374 351.694 189.849 352.501 188.645 352.501 cv
188.645 352.503 li
cp
194.321 343.894 mo
194.321 341.739 194.185 339.585 193.243 337.593 cv
192.005 335.009 189.801 334.577 188.671 334.577 cv
187.057 334.577 185.092 335.278 183.99 337.782 cv
183.129 339.64 182.995 341.739 182.995 343.894 cv
182.995 345.913 183.102 348.337 184.206 350.382 cv
185.362 352.563 187.327 353.101 188.643 353.101 cv
190.096 353.101 192.141 352.536 193.325 349.978 cv
194.185 348.12 194.321 346.022 194.321 343.894 cv
194.321 343.894 li
cp
f
202.071 352.503 mo
201.026 352.503 199.447 351.829 198.965 349.247 cv
198.67 347.634 198.67 345.157 198.67 343.571 cv
198.67 341.851 198.67 340.073 198.885 338.622 cv
199.394 335.421 201.401 335.177 202.071 335.177 cv
202.952 335.177 204.719 335.663 205.227 338.325 cv
205.495 339.833 205.495 341.876 205.495 343.571 cv
205.495 345.589 205.495 347.417 205.201 349.14 cv
204.799 351.694 203.274 352.501 202.071 352.501 cv
202.071 352.503 li
cp
207.747 343.894 mo
207.747 341.739 207.61 339.585 206.668 337.593 cv
205.43 335.009 203.226 334.577 202.095 334.577 cv
200.483 334.577 198.518 335.278 197.415 337.782 cv
196.553 339.64 196.42 341.739 196.42 343.894 cv
196.42 345.913 196.528 348.337 197.63 350.382 cv
198.788 352.563 200.75 353.101 202.069 353.101 cv
203.522 353.101 205.565 352.536 206.749 349.978 cv
207.61 348.12 207.747 346.022 207.747 343.894 cv
207.747 343.894 li
cp
f
290.264 347.275 mo
283.67 347.275 li
290.264 337.22 li
290.264 347.275 li
cp
282.917 348.101 mo
290.04 348.101 li
290.04 350.437 li
290.04 351.403 289.985 351.7 288.02 351.7 cv
287.462 351.7 li
287.462 352.524 li
288.565 352.444 289.964 352.444 291.094 352.444 cv
292.223 352.444 293.65 352.444 294.752 352.524 cv
294.752 351.7 li
294.186 351.7 li
292.194 351.7 292.139 351.403 292.139 350.437 cv
292.139 348.101 li
294.833 348.101 li
294.833 347.275 li
292.139 347.275 li
292.139 335.004 li
292.139 334.464 292.139 334.302 291.708 334.302 cv
291.465 334.302 291.385 334.302 291.17 334.626 cv
282.917 347.276 li
282.917 348.101 li
cp
f
302.362 352.525 mo
301.319 352.525 299.739 351.854 299.258 349.271 cv
298.963 347.656 298.963 345.181 298.963 343.595 cv
298.963 341.873 298.963 340.097 299.178 338.646 cv
299.686 335.444 301.694 335.2 302.362 335.2 cv
303.245 335.2 305.012 335.687 305.52 338.349 cv
305.787 339.855 305.787 341.899 305.787 343.595 cv
305.787 345.612 305.787 347.441 305.492 349.163 cv
305.092 351.718 303.566 352.524 302.362 352.524 cv
302.362 352.525 li
cp
308.039 343.917 mo
308.039 341.763 307.902 339.608 306.961 337.616 cv
305.723 335.032 303.518 334.601 302.389 334.601 cv
300.775 334.601 298.811 335.301 297.708 337.805 cv
296.846 339.663 296.713 341.763 296.713 343.917 cv
296.713 345.937 296.82 348.36 297.922 350.405 cv
299.081 352.587 301.043 353.125 302.362 353.125 cv
303.814 353.125 305.857 352.56 307.041 350.002 cv
307.902 348.145 308.039 346.045 308.039 343.917 cv
308.039 343.917 li
cp
f
315.787 352.525 mo
314.742 352.525 313.164 351.854 312.682 349.271 cv
312.389 347.656 312.389 345.181 312.389 343.595 cv
312.389 341.873 312.389 340.097 312.602 338.646 cv
313.111 335.444 315.117 335.2 315.787 335.2 cv
316.67 335.2 318.436 335.687 318.945 338.349 cv
319.213 339.855 319.213 341.899 319.213 343.595 cv
319.213 345.612 319.213 347.441 318.918 349.163 cv
318.518 351.718 316.99 352.524 315.787 352.524 cv
315.787 352.525 li
cp
321.463 343.917 mo
321.463 341.763 321.326 339.608 320.387 337.616 cv
319.148 335.032 316.943 334.601 315.813 334.601 cv
314.199 334.601 312.236 335.301 311.133 337.805 cv
310.271 339.663 310.137 341.763 310.137 343.917 cv
310.137 345.937 310.244 348.36 311.348 350.405 cv
312.506 352.587 314.469 353.125 315.787 353.125 cv
317.238 353.125 319.283 352.56 320.467 350.002 cv
321.328 348.145 321.463 346.045 321.463 343.917 cv
321.463 343.917 li
cp
f
402.266 352.327 mo
400.564 352.327 399.754 350.712 399.592 350.308 cv
399.105 349.04 399.105 346.884 399.105 346.401 cv
399.105 344.3 399.971 341.603 402.402 341.603 cv
402.834 341.603 404.076 341.603 404.914 343.274 cv
405.4 344.271 405.4 345.647 405.4 346.966 cv
405.4 348.261 405.4 349.606 404.941 350.575 cv
404.131 352.192 402.889 352.327 402.268 352.327 cv
402.266 352.327 li
cp
399.027 343.655 mo
399.027 343.009 li
399.027 336.198 402.373 335.228 403.75 335.228 cv
404.398 335.228 405.531 335.386 406.125 336.278 cv
405.725 336.278 404.65 336.278 404.65 337.503 cv
404.65 338.347 405.297 338.755 405.889 338.755 cv
406.318 338.755 407.125 338.513 407.125 337.462 cv
407.125 335.847 405.939 334.554 403.705 334.554 cv
400.26 334.554 396.625 338.028 396.625 343.978 cv
396.625 351.167 399.748 353.077 402.252 353.077 cv
405.242 353.077 407.801 350.55 407.801 347.001 cv
407.801 343.585 405.396 341.003 402.4 341.003 cv
400.564 341.003 399.566 342.368 399.027 343.655 cv
399.027 343.655 li
cp
f
415.699 352.479 mo
414.654 352.479 413.076 351.806 412.594 349.224 cv
412.301 347.61 412.301 345.134 412.301 343.548 cv
412.301 341.827 412.301 340.05 412.516 338.599 cv
413.023 335.397 415.029 335.153 415.699 335.153 cv
416.582 335.153 418.348 335.64 418.857 338.302 cv
419.125 339.81 419.125 341.853 419.125 343.548 cv
419.125 345.565 419.125 347.394 418.83 349.116 cv
418.43 351.671 416.904 352.478 415.699 352.478 cv
415.699 352.479 li
cp
421.375 343.87 mo
421.375 341.716 421.24 339.562 420.299 337.569 cv
419.061 334.985 416.854 334.554 415.727 334.554 cv
414.111 334.554 412.148 335.255 411.045 337.759 cv
410.184 339.616 410.049 341.716 410.049 343.87 cv
410.049 345.89 410.156 348.313 411.26 350.358 cv
412.416 352.54 414.381 353.077 415.697 353.077 cv
417.15 353.077 419.195 352.513 420.379 349.954 cv
421.24 348.097 421.375 345.999 421.375 343.87 cv
421.375 343.87 li
cp
f
429.123 352.479 mo
428.08 352.479 426.502 351.806 426.02 349.224 cv
425.725 347.61 425.725 345.134 425.725 343.548 cv
425.725 341.827 425.725 340.05 425.939 338.599 cv
426.447 335.397 428.455 335.153 429.123 335.153 cv
430.006 335.153 431.773 335.64 432.281 338.302 cv
432.551 339.81 432.551 341.853 432.551 343.548 cv
432.551 345.565 432.551 347.394 432.256 349.116 cv
431.854 351.671 430.328 352.478 429.123 352.478 cv
429.123 352.479 li
cp
434.801 343.87 mo
434.801 341.716 434.664 339.562 433.723 337.569 cv
432.486 334.985 430.279 334.554 429.15 334.554 cv
427.535 334.554 425.572 335.255 424.469 337.759 cv
423.609 339.616 423.475 341.716 423.475 343.87 cv
423.475 345.89 423.582 348.313 424.686 350.358 cv
425.842 352.54 427.805 353.077 429.123 353.077 cv
430.576 353.077 432.621 352.513 433.805 349.954 cv
434.664 348.097 434.801 345.999 434.801 343.87 cv
434.801 343.87 li
cp
f
360.025 305.13 mo
354.025 305.13 li
354.025 317.13 li
366.025 317.13 li
366.025 305.13 li
360.025 305.13 li
cp
0 0 1 rgb
@
366.025 289.387 mo
366.025 286.076 363.336 283.387 360.025 283.387 cv
356.713 283.387 354.025 286.076 354.025 289.387 cv
354.025 292.699 356.713 295.387 360.025 295.387 cv
363.336 295.387 366.025 292.699 366.025 289.387 cv
0 .501961 0 rgb
@
[11.55 3.45 ] 5.775 dsh
352.525 265.961 mo
367.525 265.961 li
355.391 274.777 li
360.025 260.512 li
364.66 274.777 li
352.525 265.961 li
cp
1 0 0 rgb
@
379.833 316.918 mo
378.699 316.918 378.158 315.84 378.051 315.57 cv
377.727 314.726 377.727 313.289 377.727 312.966 cv
377.727 311.564 378.303 309.768 379.924 309.768 cv
380.212 309.768 381.04 309.768 381.599 310.882 cv
381.924 311.546 381.924 312.463 381.924 313.343 cv
381.924 314.205 381.924 315.104 381.617 315.75 cv
381.077 316.827 380.248 316.917 379.834 316.917 cv
379.833 316.918 li
cp
377.674 311.136 mo
377.674 310.705 li
377.674 306.165 379.904 305.518 380.822 305.518 cv
381.255 305.518 382.01 305.623 382.406 306.218 cv
382.139 306.218 381.423 306.218 381.423 307.034 cv
381.423 307.596 381.854 307.868 382.248 307.868 cv
382.535 307.868 383.073 307.707 383.073 307.007 cv
383.073 305.93 382.282 305.067 380.793 305.067 cv
378.496 305.067 376.073 307.384 376.073 311.351 cv
376.073 316.144 378.155 317.418 379.824 317.418 cv
381.817 317.418 383.523 315.732 383.523 313.365 cv
383.523 311.089 381.92 309.367 379.924 309.367 cv
378.699 309.367 378.033 310.278 377.674 311.135 cv
377.674 311.136 li
cp
0 0 0 rgb
f
392.324 313.897 mo
391.875 313.897 li
391.786 314.43 391.66 315.209 391.48 315.476 cv
391.355 315.617 390.172 315.617 389.777 315.617 cv
386.551 315.617 li
388.451 313.772 li
391.248 311.301 392.324 310.334 392.324 308.543 cv
392.324 306.501 390.71 305.067 388.523 305.067 cv
386.498 305.067 385.172 306.718 385.172 308.313 cv
385.172 309.318 386.077 309.318 386.131 309.318 cv
386.438 309.318 387.072 309.102 387.072 308.359 cv
387.072 307.889 386.744 307.418 386.105 307.418 cv
385.96 307.418 385.924 307.418 385.869 307.418 cv
386.279 306.271 387.244 305.618 388.279 305.618 cv
389.904 305.618 390.673 307.074 390.673 308.546 cv
390.673 309.981 389.779 311.399 388.797 312.513 cv
385.368 316.354 li
385.172 316.552 385.172 316.587 385.172 317.019 cv
391.822 317.019 li
392.324 313.897 li
cp
f
396.724 316.067 mo
396.724 315.548 396.293 315.117 395.772 315.117 cv
395.253 315.117 394.822 315.548 394.822 316.067 cv
394.822 316.588 395.253 317.018 395.772 317.018 cv
396.293 317.018 396.724 316.587 396.724 316.067 cv
396.724 316.067 li
cp
f
403.624 313.518 mo
399.228 313.518 li
403.624 306.814 li
403.624 313.518 li
cp
398.726 314.067 mo
403.474 314.067 li
403.474 315.626 li
403.474 316.271 403.438 316.467 402.127 316.467 cv
401.756 316.467 li
401.756 317.018 li
402.49 316.964 403.424 316.964 404.177 316.964 cv
404.93 316.964 405.881 316.964 406.615 317.018 cv
406.615 316.467 li
406.238 316.467 li
404.91 316.467 404.874 316.271 404.874 315.626 cv
404.874 314.067 li
406.669 314.067 li
406.669 313.518 li
404.874 313.518 li
404.874 305.337 li
404.874 304.977 404.874 304.869 404.586 304.869 cv
404.425 304.869 404.371 304.869 404.228 305.085 cv
398.726 313.519 li
398.726 314.067 li
cp
f
423.813 315.889 mo
424.046 316.289 424.764 317.018 424.961 317.018 cv
425.124 317.018 425.124 316.873 425.124 316.603 cv
425.124 313.463 li
425.124 312.759 425.195 312.668 426.354 312.668 cv
426.354 312.117 li
425.69 312.136 424.704 312.172 424.167 312.172 cv
423.449 312.172 421.926 312.172 421.279 312.117 cv
421.279 312.668 li
421.854 312.668 li
423.47 312.668 423.523 312.866 423.523 313.533 cv
423.523 314.687 li
423.523 316.705 421.244 316.868 420.742 316.868 cv
419.576 316.868 416.024 316.238 416.024 310.885 cv
416.024 305.512 419.57 304.918 420.649 304.918 cv
422.576 304.918 424.213 306.537 424.574 309.18 cv
424.607 309.433 424.607 309.486 424.849 309.486 cv
425.124 309.486 425.124 309.433 425.124 309.055 cv
425.124 304.799 li
425.124 304.493 425.124 304.367 424.926 304.367 cv
424.854 304.367 424.782 304.367 424.639 304.584 cv
423.74 305.917 li
423.166 305.341 422.197 304.367 420.42 304.367 cv
417.081 304.367 414.174 307.204 414.174 310.884 cv
414.174 314.563 417.046 317.418 420.456 317.418 cv
421.767 317.418 423.203 316.95 423.813 315.888 cv
423.813 315.889 li
cp
f
429.273 312.467 mo
429.381 309.813 430.887 309.368 431.497 309.368 cv
433.344 309.368 433.522 311.772 433.522 312.467 cv
429.273 312.467 li
cp
434.274 312.867 mo
434.669 312.867 434.724 312.867 434.724 312.467 cv
434.724 310.7 433.752 308.969 431.508 308.969 cv
429.425 308.969 427.773 310.82 427.773 313.066 cv
427.773 315.475 429.658 317.217 431.724 317.217 cv
433.914 317.217 434.724 315.226 434.724 314.884 cv
434.724 314.705 434.579 314.668 434.489 314.668 cv
434.328 314.668 434.292 314.776 434.256 314.92 cv
433.629 316.767 432.016 316.767 431.837 316.767 cv
430.94 316.767 430.224 316.228 429.812 315.563 cv
429.273 314.7 429.273 313.515 429.273 312.867 cv
434.274 312.867 li
cp
f
446.367 306.522 mo
446.619 305.857 447.104 305.337 448.324 305.317 cv
448.324 304.768 li
447.768 304.803 447.05 304.821 446.583 304.821 cv
446.045 304.821 445.005 304.785 444.539 304.768 cv
444.539 305.317 li
445.471 305.336 445.849 305.803 445.849 306.216 cv
445.849 306.359 445.795 306.467 445.759 306.574 cv
442.477 315.225 li
439.051 306.162 li
438.942 305.91 438.942 305.875 438.942 305.839 cv
438.942 305.317 439.965 305.317 440.413 305.317 cv
440.413 304.768 li
439.768 304.821 438.529 304.821 437.849 304.821 cv
436.987 304.821 436.217 304.785 435.57 304.768 cv
435.57 305.317 li
436.736 305.317 437.077 305.317 437.328 306.002 cv
441.49 317.023 li
441.615 317.364 441.705 317.418 441.938 317.418 cv
442.243 317.418 442.279 317.328 442.369 317.077 cv
446.367 306.522 li
cp
f
461.656 316.968 mo
459.932 316.968 457.523 315.386 457.523 310.695 cv
457.523 306.04 460.146 304.817 461.639 304.817 cv
463.201 304.817 465.772 306.094 465.772 310.695 cv
465.772 315.458 463.31 316.968 461.656 316.968 cv
461.656 316.968 li
cp
467.623 310.938 mo
467.623 307.275 464.908 304.367 461.639 304.367 cv
458.422 304.367 455.673 307.24 455.673 310.938 cv
455.673 314.617 458.44 317.418 461.639 317.418 cv
464.908 317.418 467.623 314.563 467.623 310.938 cv
467.623 310.938 li
cp
f
471.773 315.96 mo
471.862 316.247 472.615 317.217 473.978 317.217 cv
476.109 317.217 477.974 315.455 477.974 313.135 cv
477.974 310.851 476.231 309.068 474.222 309.068 cv
472.822 309.068 472.068 309.873 471.709 310.275 cv
471.709 309.068 li
469.125 309.265 li
469.125 309.818 li
470.397 309.818 470.522 309.928 470.522 310.721 cv
470.522 319.156 li
470.522 319.968 470.325 319.968 469.125 319.968 cv
469.125 320.518 li
469.735 320.5 470.667 320.464 471.134 320.464 cv
471.618 320.464 472.533 320.5 473.16 320.518 cv
473.16 319.968 li
471.97 319.968 471.773 319.968 471.773 319.155 cv
471.773 316.123 li
471.773 315.96 li
cp
471.773 310.957 mo
472.291 310.04 473.167 309.519 474.078 309.519 cv
475.382 309.519 476.473 311.101 476.473 313.132 cv
476.473 315.308 475.222 316.817 473.899 316.817 cv
473.185 316.817 472.506 316.458 472.023 315.721 cv
471.773 315.343 471.773 315.325 471.773 314.966 cv
471.773 310.957 li
cp
f
481.724 315.96 mo
481.813 316.247 482.565 317.217 483.928 317.217 cv
486.06 317.217 487.924 315.455 487.924 313.135 cv
487.924 310.851 486.182 309.068 484.172 309.068 cv
482.771 309.068 482.019 309.873 481.659 310.275 cv
481.659 309.068 li
479.075 309.265 li
479.075 309.818 li
480.348 309.818 480.473 309.928 480.473 310.721 cv
480.473 319.156 li
480.473 319.968 480.275 319.968 479.075 319.968 cv
479.075 320.518 li
479.686 320.5 480.617 320.464 481.084 320.464 cv
481.567 320.464 482.482 320.5 483.11 320.518 cv
483.11 319.968 li
481.919 319.968 481.724 319.968 481.724 319.155 cv
481.724 316.123 li
481.724 315.96 li
cp
481.724 310.957 mo
482.241 310.04 483.117 309.519 484.027 309.519 cv
485.332 309.519 486.423 311.101 486.423 313.132 cv
486.423 315.308 485.171 316.817 483.85 316.817 cv
483.135 316.817 482.456 316.458 481.974 315.721 cv
481.724 315.343 481.724 315.325 481.724 314.966 cv
481.724 310.957 li
cp
f
493.507 316.768 mo
492.739 316.768 491.953 316.391 491.471 315.564 cv
491.024 314.774 491.024 313.679 491.024 313.032 cv
491.024 312.333 491.024 311.363 491.453 310.572 cv
491.936 309.747 492.775 309.368 493.49 309.368 cv
494.275 309.368 495.044 309.765 495.509 310.537 cv
495.975 311.309 495.975 312.351 495.975 313.032 cv
495.975 313.679 495.975 314.648 495.58 315.438 cv
495.188 316.246 494.4 316.767 493.508 316.767 cv
493.507 316.768 li
cp
497.475 313.175 mo
497.475 310.875 495.679 308.969 493.507 308.969 cv
491.265 308.969 489.523 310.929 489.523 313.175 cv
489.523 315.493 491.39 317.217 493.489 317.217 cv
495.661 317.217 497.475 315.457 497.475 313.175 cv
497.475 313.175 li
cp
f
501.759 313.53 mo
502.152 313.603 503.623 313.89 503.623 315.183 cv
503.623 316.099 502.995 316.817 501.598 316.817 cv
500.093 316.817 499.447 315.796 499.106 314.273 cv
499.054 314.041 499.035 313.969 498.855 313.969 cv
498.623 313.969 498.623 314.096 498.623 314.418 cv
498.623 316.787 li
498.623 317.092 498.623 317.217 498.819 317.217 cv
498.909 317.217 498.927 317.199 499.267 316.857 cv
499.303 316.821 499.303 316.786 499.625 316.444 cv
500.412 317.2 501.217 317.217 501.593 317.217 cv
503.649 317.217 504.474 316.015 504.474 314.723 cv
504.474 313.771 503.936 313.232 503.721 313.017 cv
503.129 312.442 502.431 312.299 501.678 312.155 cv
500.674 311.958 499.474 311.725 499.474 310.684 cv
499.474 310.055 499.938 309.318 501.479 309.318 cv
503.449 309.318 503.539 310.937 503.575 311.494 cv
503.593 311.656 503.754 311.656 503.79 311.656 cv
504.022 311.656 504.022 311.565 504.022 311.223 cv
504.022 309.4 li
504.022 309.094 504.022 308.968 503.826 308.968 cv
503.736 308.968 503.701 308.968 503.469 309.183 cv
503.415 309.254 503.235 309.416 503.164 309.47 cv
502.484 308.968 501.752 308.968 501.483 308.968 cv
499.303 308.968 498.623 310.172 498.623 311.178 cv
498.623 311.807 498.909 312.309 499.394 312.704 cv
499.967 313.171 500.469 313.278 501.759 313.53 cv
501.759 313.53 li
cp
f
508.324 305.968 mo
508.324 305.395 507.875 305.018 507.373 305.018 cv
506.817 305.018 506.423 305.502 506.423 305.968 cv
506.423 306.451 506.817 306.918 507.373 306.918 cv
507.875 306.918 508.324 306.541 508.324 305.968 cv
508.324 305.968 li
cp
508.273 309.067 mo
505.736 309.264 li
505.736 309.817 li
506.91 309.817 507.073 309.928 507.073 310.811 cv
507.073 315.656 li
507.073 316.467 506.874 316.467 505.665 316.467 cv
505.665 317.017 li
506.239 316.999 507.207 316.963 507.638 316.963 cv
508.266 316.963 508.894 316.999 509.503 317.017 cv
509.503 316.467 li
508.344 316.467 508.273 316.377 508.273 315.675 cv
508.273 309.067 li
cp
f
513.173 309.817 mo
515.74 309.817 li
515.74 309.268 li
513.173 309.268 li
513.173 305.968 li
512.725 305.968 li
512.707 307.437 512.169 309.353 510.414 309.424 cv
510.414 309.817 li
511.923 309.817 li
511.923 314.787 li
511.923 317.001 513.595 317.217 514.242 317.217 cv
515.52 317.217 516.023 315.941 516.023 314.792 cv
516.023 313.768 li
515.574 313.768 li
515.574 314.756 li
515.574 316.085 515.036 316.768 514.373 316.768 cv
513.174 316.768 513.174 315.129 513.174 314.823 cv
513.173 309.817 li
cp
f
519.023 312.467 mo
519.131 309.813 520.638 309.368 521.247 309.368 cv
523.094 309.368 523.272 311.772 523.272 312.467 cv
519.023 312.467 li
cp
524.024 312.867 mo
524.419 312.867 524.474 312.867 524.474 312.467 cv
524.474 310.7 523.502 308.969 521.258 308.969 cv
519.175 308.969 517.523 310.82 517.523 313.066 cv
517.523 315.475 519.408 317.217 521.474 317.217 cv
523.664 317.217 524.474 315.226 524.474 314.884 cv
524.474 314.705 524.329 314.668 524.239 314.668 cv
524.078 314.668 524.042 314.776 524.006 314.92 cv
523.379 316.767 521.766 316.767 521.587 316.767 cv
520.69 316.767 519.974 316.228 519.562 315.563 cv
519.023 314.7 519.023 313.515 519.023 312.867 cv
524.024 312.867 li
cp
f
379.833 295.871 mo
378.699 295.871 378.158 294.794 378.051 294.524 cv
377.727 293.68 377.727 292.242 377.727 291.92 cv
377.727 290.519 378.303 288.721 379.924 288.721 cv
380.212 288.721 381.04 288.721 381.599 289.836 cv
381.924 290.5 381.924 291.417 381.924 292.297 cv
381.924 293.159 381.924 294.057 381.617 294.703 cv
381.077 295.781 380.248 295.871 379.834 295.871 cv
379.833 295.871 li
cp
377.674 290.09 mo
377.674 289.659 li
377.674 285.118 379.904 284.472 380.822 284.472 cv
381.255 284.472 382.01 284.576 382.406 285.172 cv
382.139 285.172 381.423 285.172 381.423 285.988 cv
381.423 286.55 381.854 286.822 382.248 286.822 cv
382.535 286.822 383.073 286.66 383.073 285.961 cv
383.073 284.884 382.282 284.021 380.793 284.021 cv
378.496 284.021 376.073 286.338 376.073 290.305 cv
376.073 295.098 378.155 296.371 379.824 296.371 cv
381.817 296.371 383.523 294.686 383.523 292.319 cv
383.523 290.043 381.92 288.32 379.924 288.32 cv
378.699 288.32 378.033 289.232 377.674 290.089 cv
377.674 290.09 li
cp
f
392.324 292.851 mo
391.875 292.851 li
391.786 293.383 391.66 294.163 391.48 294.429 cv
391.355 294.571 390.172 294.571 389.777 294.571 cv
386.551 294.571 li
388.451 292.727 li
391.248 290.255 392.324 289.287 392.324 287.496 cv
392.324 285.455 390.71 284.021 388.523 284.021 cv
386.498 284.021 385.172 285.672 385.172 287.268 cv
385.172 288.271 386.077 288.271 386.131 288.271 cv
386.438 288.271 387.072 288.055 387.072 287.313 cv
387.072 286.843 386.744 286.371 386.105 286.371 cv
385.96 286.371 385.924 286.371 385.869 286.371 cv
386.279 285.225 387.244 284.572 388.279 284.572 cv
389.904 284.572 390.673 286.027 390.673 287.5 cv
390.673 288.936 389.779 290.354 388.797 291.467 cv
385.368 295.308 li
385.172 295.506 385.172 295.541 385.172 295.972 cv
391.822 295.972 li
392.324 292.851 li
cp
f
396.724 295.021 mo
396.724 294.502 396.293 294.071 395.772 294.071 cv
395.253 294.071 394.822 294.502 394.822 295.021 cv
394.822 295.542 395.253 295.972 395.772 295.972 cv
396.293 295.972 396.724 295.541 396.724 295.021 cv
396.724 295.021 li
cp
f
403.624 292.472 mo
399.228 292.472 li
403.624 285.768 li
403.624 292.472 li
cp
398.726 293.021 mo
403.474 293.021 li
403.474 294.579 li
403.474 295.224 403.438 295.421 402.127 295.421 cv
401.756 295.421 li
401.756 295.971 li
402.49 295.918 403.424 295.918 404.177 295.918 cv
404.93 295.918 405.881 295.918 406.615 295.971 cv
406.615 295.421 li
406.238 295.421 li
404.91 295.421 404.874 295.224 404.874 294.579 cv
404.874 293.021 li
406.669 293.021 li
406.669 292.472 li
404.874 292.472 li
404.874 284.291 li
404.874 283.931 404.874 283.822 404.586 283.822 cv
404.425 283.822 404.371 283.822 404.228 284.039 cv
398.726 292.472 li
398.726 293.021 li
cp
f
423.813 294.842 mo
424.046 295.243 424.764 295.972 424.961 295.972 cv
425.124 295.972 425.124 295.827 425.124 295.557 cv
425.124 292.417 li
425.124 291.713 425.195 291.621 426.354 291.621 cv
426.354 291.071 li
425.69 291.09 424.704 291.126 424.167 291.126 cv
423.449 291.126 421.926 291.126 421.279 291.071 cv
421.279 291.621 li
421.854 291.621 li
423.47 291.621 423.523 291.82 423.523 292.487 cv
423.523 293.641 li
423.523 295.659 421.244 295.821 420.742 295.821 cv
419.576 295.821 416.024 295.192 416.024 289.839 cv
416.024 284.466 419.57 283.871 420.649 283.871 cv
422.576 283.871 424.213 285.49 424.574 288.134 cv
424.607 288.386 424.607 288.439 424.849 288.439 cv
425.124 288.439 425.124 288.386 425.124 288.009 cv
425.124 283.752 li
425.124 283.447 425.124 283.321 424.926 283.321 cv
424.854 283.321 424.782 283.321 424.639 283.537 cv
423.74 284.871 li
423.166 284.295 422.197 283.321 420.42 283.321 cv
417.081 283.321 414.174 286.158 414.174 289.838 cv
414.174 293.518 417.046 296.371 420.456 296.371 cv
421.767 296.371 423.203 295.903 423.813 294.842 cv
423.813 294.842 li
cp
f
429.273 291.421 mo
429.381 288.768 430.887 288.322 431.497 288.322 cv
433.344 288.322 433.522 290.727 433.522 291.421 cv
429.273 291.421 li
cp
434.274 291.821 mo
434.669 291.821 434.724 291.821 434.724 291.421 cv
434.724 289.654 433.752 287.922 431.508 287.922 cv
429.425 287.922 427.773 289.774 427.773 292.021 cv
427.773 294.428 429.658 296.171 431.724 296.171 cv
433.914 296.171 434.724 294.179 434.724 293.838 cv
434.724 293.658 434.579 293.622 434.489 293.622 cv
434.328 293.622 434.292 293.73 434.256 293.873 cv
433.629 295.721 432.016 295.721 431.837 295.721 cv
430.94 295.721 430.224 295.182 429.812 294.517 cv
429.273 293.654 429.273 292.469 429.273 291.82 cv
434.274 291.821 li
cp
f
446.368 285.477 mo
446.619 284.812 447.104 284.291 448.324 284.271 cv
448.324 283.722 li
447.768 283.757 447.05 283.775 446.583 283.775 cv
446.045 283.775 445.005 283.739 444.539 283.722 cv
444.539 284.271 li
445.472 284.29 445.849 284.757 445.849 285.17 cv
445.849 285.313 445.795 285.421 445.759 285.528 cv
442.477 294.179 li
439.05 285.116 li
438.942 284.864 438.942 284.829 438.942 284.793 cv
438.942 284.271 439.965 284.271 440.413 284.271 cv
440.413 283.722 li
439.768 283.775 438.53 283.775 437.849 283.775 cv
436.987 283.775 436.217 283.739 435.57 283.722 cv
435.57 284.271 li
436.736 284.271 437.077 284.271 437.328 284.955 cv
441.49 295.977 li
441.616 296.318 441.705 296.372 441.938 296.372 cv
442.243 296.372 442.278 296.282 442.369 296.031 cv
446.368 285.477 li
cp
f
460.931 289.01 mo
458.635 288.453 li
457.522 288.184 456.823 287.215 456.823 286.173 cv
456.823 284.916 457.789 283.821 459.185 283.821 cv
462.172 283.821 462.565 286.77 462.673 287.578 cv
462.691 287.686 462.691 287.793 462.89 287.793 cv
463.123 287.793 463.123 287.703 463.123 287.362 cv
463.123 283.752 li
463.123 283.446 463.123 283.32 462.933 283.32 cv
462.812 283.32 462.794 283.339 462.673 283.556 cv
462.044 284.584 li
461.505 284.061 460.77 283.321 459.172 283.321 cv
457.181 283.321 455.673 284.902 455.673 286.806 cv
455.673 288.297 456.623 289.607 458.022 290.093 cv
458.22 290.164 459.135 290.38 460.391 290.685 cv
460.875 290.811 461.413 290.937 461.915 291.601 cv
462.292 292.068 462.473 292.66 462.473 293.253 cv
462.473 294.528 461.574 295.821 460.068 295.821 cv
459.548 295.821 458.186 295.731 457.234 294.85 cv
456.194 293.879 456.141 292.729 456.123 292.081 cv
456.104 291.9 455.961 291.9 455.907 291.9 cv
455.673 291.9 455.673 292.026 455.673 292.35 cv
455.673 295.94 li
455.673 296.245 455.673 296.371 455.863 296.371 cv
455.984 296.371 456.002 296.336 456.123 296.138 cv
456.123 296.119 456.177 296.065 456.771 295.11 cv
457.328 295.723 458.479 296.371 460.079 296.371 cv
462.183 296.371 463.623 294.612 463.623 292.637 cv
463.623 290.842 462.438 289.369 460.931 289.01 cv
460.931 289.01 li
cp
f
470.473 291.672 mo
470.473 293.462 li
470.473 295.162 469.186 295.771 468.382 295.771 cv
467.506 295.771 466.773 295.145 466.773 294.25 cv
466.773 293.265 467.524 291.779 470.473 291.672 cv
470.473 291.672 li
cp
470.6 294.608 mo
470.671 295.322 471.156 296.071 472 296.071 cv
472.377 296.071 473.475 295.82 473.475 294.372 cv
473.475 293.371 li
473.024 293.371 li
473.024 294.374 li
473.024 295.413 472.579 295.521 472.383 295.521 cv
471.795 295.521 471.724 294.712 471.724 294.622 cv
471.724 291.029 li
471.724 290.275 471.724 289.574 471.073 288.91 cv
470.369 288.209 469.466 287.922 468.6 287.922 cv
467.119 287.922 465.874 288.773 465.874 289.97 cv
465.874 290.513 466.232 290.821 466.699 290.821 cv
467.201 290.821 467.524 290.46 467.524 289.988 cv
467.524 289.771 467.438 289.174 466.633 289.155 cv
467.117 288.521 467.997 288.322 468.571 288.322 cv
469.451 288.322 470.474 289.02 470.474 290.61 cv
470.474 291.272 li
469.558 291.327 468.301 291.381 467.17 291.921 cv
465.823 292.533 465.374 293.47 465.374 294.262 cv
465.374 295.721 467.116 296.171 468.248 296.171 cv
469.433 296.171 470.26 295.452 470.601 294.608 cv
470.6 294.608 li
cp
f
475.523 289.782 mo
475.523 294.61 li
475.523 295.421 475.329 295.421 474.146 295.421 cv
474.146 295.971 li
474.774 295.953 475.688 295.918 476.173 295.918 cv
476.64 295.918 477.572 295.953 478.182 295.971 cv
478.182 295.421 li
476.972 295.421 476.773 295.421 476.773 294.611 cv
476.773 291.302 li
476.773 289.431 478.048 288.422 479.195 288.422 cv
480.326 288.422 480.523 289.395 480.523 290.42 cv
480.523 294.611 li
480.523 295.421 480.327 295.421 479.132 295.421 cv
479.132 295.971 li
479.76 295.953 480.674 295.918 481.159 295.918 cv
481.625 295.918 482.558 295.953 483.167 295.971 cv
483.167 295.421 li
481.971 295.421 481.774 295.421 481.774 294.611 cv
481.774 291.302 li
481.774 289.431 483.047 288.422 484.195 288.422 cv
485.325 288.422 485.522 289.395 485.522 290.42 cv
485.522 294.611 li
485.522 295.421 485.325 295.421 484.118 295.421 cv
484.118 295.971 li
484.745 295.953 485.66 295.918 486.145 295.918 cv
486.61 295.918 487.543 295.953 488.152 295.971 cv
488.152 295.421 li
487.232 295.421 486.791 295.421 486.773 294.881 cv
486.773 291.442 li
486.773 289.895 486.773 289.336 486.215 288.688 cv
485.964 288.382 485.371 288.021 484.329 288.021 cv
482.819 288.021 482.028 289.112 481.724 289.803 cv
481.472 288.222 480.143 288.021 479.334 288.021 cv
478.022 288.021 477.178 288.803 476.675 289.928 cv
476.675 288.021 li
474.147 288.218 li
474.147 288.771 li
475.383 288.771 475.524 288.898 475.524 289.782 cv
475.523 289.782 li
cp
f
490.523 291.421 mo
490.631 288.768 492.138 288.322 492.747 288.322 cv
494.594 288.322 494.772 290.727 494.772 291.421 cv
490.523 291.421 li
cp
495.524 291.821 mo
495.919 291.821 495.974 291.821 495.974 291.421 cv
495.974 289.654 495.002 287.922 492.758 287.922 cv
490.675 287.922 489.023 289.774 489.023 292.021 cv
489.023 294.428 490.908 296.171 492.974 296.171 cv
495.164 296.171 495.974 294.179 495.974 293.838 cv
495.974 293.658 495.829 293.622 495.739 293.622 cv
495.578 293.622 495.542 293.73 495.506 293.873 cv
494.879 295.721 493.266 295.721 493.087 295.721 cv
492.19 295.721 491.474 295.182 491.062 294.517 cv
490.523 293.654 490.523 292.469 490.523 291.82 cv
495.524 291.821 li
cp
f
379.833 273.625 mo
378.698 273.625 378.159 272.548 378.051 272.277 cv
377.727 271.434 377.727 269.996 377.727 269.674 cv
377.727 268.271 378.304 266.475 379.924 266.475 cv
380.212 266.475 381.04 266.475 381.599 267.59 cv
381.923 268.254 381.923 269.17 381.923 270.051 cv
381.923 270.912 381.923 271.811 381.617 272.457 cv
381.077 273.535 380.248 273.625 379.834 273.625 cv
379.833 273.625 li
cp
377.674 267.844 mo
377.674 267.412 li
377.674 262.873 379.905 262.225 380.823 262.225 cv
381.255 262.225 382.011 262.33 382.407 262.926 cv
382.139 262.926 381.423 262.926 381.423 263.742 cv
381.423 264.304 381.854 264.576 382.248 264.576 cv
382.535 264.576 383.073 264.414 383.073 263.715 cv
383.073 262.637 382.282 261.775 380.793 261.775 cv
378.496 261.775 376.073 264.092 376.073 268.059 cv
376.073 272.852 378.155 274.125 379.825 274.125 cv
381.817 274.125 383.523 272.439 383.523 270.073 cv
383.523 267.797 381.921 266.074 379.923 266.074 cv
378.7 266.074 378.034 266.986 377.675 267.843 cv
377.674 267.844 li
cp
f
392.323 270.605 mo
391.875 270.605 li
391.786 271.137 391.66 271.917 391.481 272.183 cv
391.355 272.324 390.173 272.324 389.778 272.324 cv
386.551 272.324 li
388.451 270.48 li
391.248 268.009 392.323 267.041 392.323 265.25 cv
392.323 263.209 390.71 261.775 388.524 261.775 cv
386.498 261.775 385.172 263.426 385.172 265.021 cv
385.172 266.025 386.077 266.025 386.131 266.025 cv
386.438 266.025 387.072 265.809 387.072 265.066 cv
387.072 264.596 386.744 264.125 386.106 264.125 cv
385.96 264.125 385.923 264.125 385.869 264.125 cv
386.279 262.979 387.244 262.326 388.279 262.326 cv
389.904 262.326 390.673 263.781 390.673 265.254 cv
390.673 266.689 389.778 268.107 388.797 269.221 cv
385.368 273.063 li
385.172 273.26 385.172 273.295 385.172 273.726 cv
391.821 273.726 li
392.323 270.605 li
cp
f
396.724 272.775 mo
396.724 272.256 396.293 271.824 395.772 271.824 cv
395.253 271.824 394.823 272.256 394.823 272.775 cv
394.823 273.295 395.253 273.725 395.772 273.725 cv
396.293 273.725 396.724 273.295 396.724 272.775 cv
396.724 272.775 li
cp
f
403.624 270.225 mo
399.228 270.225 li
403.624 263.521 li
403.624 270.225 li
cp
398.726 270.775 mo
403.474 270.775 li
403.474 272.334 li
403.474 272.979 403.438 273.175 402.128 273.175 cv
401.756 273.175 li
401.756 273.725 li
402.491 273.672 403.423 273.672 404.177 273.672 cv
404.93 273.672 405.88 273.672 406.616 273.725 cv
406.616 273.175 li
406.238 273.175 li
404.91 273.175 404.874 272.978 404.874 272.334 cv
404.874 270.775 li
406.669 270.775 li
406.669 270.225 li
404.874 270.225 li
404.874 262.045 li
404.874 261.684 404.874 261.576 404.587 261.576 cv
404.425 261.576 404.371 261.576 404.228 261.793 cv
398.726 270.226 li
398.726 270.775 li
cp
f
423.813 272.596 mo
424.046 272.996 424.764 273.725 424.962 273.725 cv
425.124 273.725 425.124 273.58 425.124 273.311 cv
425.124 270.17 li
425.124 269.467 425.195 269.375 426.354 269.375 cv
426.354 268.825 li
425.69 268.844 424.704 268.879 424.167 268.879 cv
423.449 268.879 421.925 268.879 421.28 268.825 cv
421.28 269.375 li
421.854 269.375 li
423.47 269.375 423.524 269.574 423.524 270.24 cv
423.524 271.395 li
423.524 273.412 421.244 273.575 420.741 273.575 cv
419.576 273.575 416.024 272.946 416.024 267.592 cv
416.024 262.22 419.569 261.625 420.649 261.625 cv
422.576 261.625 424.214 263.244 424.573 265.888 cv
424.608 266.141 424.608 266.193 424.849 266.193 cv
425.124 266.193 425.124 266.141 425.124 265.763 cv
425.124 261.506 li
425.124 261.201 425.124 261.074 424.926 261.074 cv
424.854 261.074 424.782 261.074 424.639 261.291 cv
423.741 262.625 li
423.166 262.049 422.197 261.074 420.421 261.074 cv
417.081 261.074 414.174 263.912 414.174 267.592 cv
414.174 271.271 417.046 274.125 420.456 274.125 cv
421.767 274.125 423.203 273.657 423.813 272.596 cv
423.813 272.596 li
cp
f
429.274 269.175 mo
429.382 266.521 430.888 266.076 431.497 266.076 cv
433.343 266.076 433.522 268.48 433.522 269.175 cv
429.274 269.175 li
cp
434.274 269.574 mo
434.669 269.574 434.724 269.574 434.724 269.175 cv
434.724 267.408 433.752 265.676 431.508 265.676 cv
429.425 265.676 427.773 267.528 427.773 269.774 cv
427.773 272.182 429.658 273.925 431.724 273.925 cv
433.914 273.925 434.724 271.933 434.724 271.592 cv
434.724 271.412 434.579 271.376 434.489 271.376 cv
434.327 271.376 434.292 271.484 434.257 271.627 cv
433.629 273.475 432.016 273.475 431.837 273.475 cv
430.94 273.475 430.224 272.936 429.812 272.271 cv
429.274 271.408 429.274 270.223 429.274 269.574 cv
434.274 269.574 li
cp
f
446.368 263.23 mo
446.618 262.564 447.104 262.045 448.323 262.025 cv
448.323 261.475 li
447.767 261.511 447.05 261.529 446.583 261.529 cv
446.046 261.529 445.005 261.492 444.539 261.475 cv
444.539 262.025 li
445.472 262.043 445.849 262.511 445.849 262.924 cv
445.849 263.066 445.795 263.175 445.759 263.282 cv
442.477 271.932 li
439.05 262.869 li
438.942 262.618 438.942 262.582 438.942 262.547 cv
438.942 262.025 439.965 262.025 440.413 262.025 cv
440.413 261.475 li
439.769 261.529 438.53 261.529 437.849 261.529 cv
436.987 261.529 436.216 261.492 435.57 261.475 cv
435.57 262.025 li
436.736 262.025 437.077 262.025 437.328 262.709 cv
441.489 273.73 li
441.616 274.072 441.706 274.126 441.938 274.126 cv
442.243 274.126 442.278 274.035 442.368 273.785 cv
446.368 263.23 li
cp
f
463.801 266.479 mo
463.782 266.424 463.712 266.28 463.712 266.227 cv
463.712 266.209 464.034 265.957 464.231 265.814 cv
467.369 263.391 li
469.055 262.15 469.755 262.08 470.292 262.025 cv
470.437 262.008 470.615 261.989 470.615 261.67 cv
470.615 261.6 470.562 261.475 470.418 261.475 cv
470.023 261.475 469.575 261.528 469.146 261.528 cv
468.499 261.528 467.8 261.475 467.154 261.475 cv
467.028 261.475 466.813 261.475 466.813 261.83 cv
466.813 261.953 466.903 262.008 467.028 262.025 cv
467.423 262.063 467.585 262.152 467.585 262.403 cv
467.585 262.727 467.046 263.139 466.938 263.229 cv
459.945 268.613 li
461.38 262.852 li
461.542 262.205 461.577 262.023 462.886 262.023 cv
463.335 262.023 463.497 262.023 463.497 261.67 cv
463.497 261.51 463.353 261.475 463.245 261.475 cv
462.743 261.475 461.452 261.527 460.95 261.527 cv
460.43 261.527 459.157 261.475 458.636 261.475 cv
458.511 261.475 458.278 261.475 458.278 261.813 cv
458.278 262.023 458.439 262.023 458.798 262.023 cv
459.03 262.023 459.354 262.043 459.569 262.061 cv
459.856 262.096 459.964 262.15 459.964 262.348 cv
459.964 262.42 459.945 262.473 459.892 262.689 cv
457.488 272.33 li
457.309 273.03 457.273 273.174 455.856 273.174 cv
455.552 273.174 455.354 273.174 455.354 273.512 cv
455.354 273.725 455.569 273.725 455.624 273.725 cv
456.126 273.725 457.399 273.671 457.901 273.671 cv
458.277 273.671 458.672 273.689 459.048 273.689 cv
459.442 273.689 459.837 273.725 460.214 273.725 cv
460.339 273.725 460.572 273.725 460.572 273.369 cv
460.572 273.174 460.411 273.174 460.07 273.174 cv
459.407 273.174 458.905 273.174 458.905 272.852 cv
458.905 272.726 459.013 272.33 459.066 272.063 cv
459.317 271.129 459.55 270.178 459.783 269.244 cv
462.456 267.162 li
462.921 268.239 464.087 270.913 464.535 271.99 cv
464.751 272.475 464.751 272.51 464.751 272.617 cv
464.751 273.156 463.979 273.174 463.817 273.174 cv
463.62 273.174 463.423 273.174 463.423 273.529 cv
463.423 273.724 463.638 273.724 463.675 273.724 cv
464.392 273.724 465.146 273.67 465.862 273.67 cv
466.257 273.67 467.226 273.724 467.62 273.724 cv
467.71 273.724 467.942 273.724 467.942 273.369 cv
467.942 273.174 467.745 273.174 467.584 273.174 cv
466.849 273.155 466.615 272.994 466.347 272.365 cv
463.801 266.479 li
cp
f
478.033 260.961 mo
478.123 260.729 478.123 260.656 478.123 260.639 cv
478.123 260.441 477.962 260.275 477.765 260.275 cv
477.64 260.275 477.515 260.334 477.462 260.441 cv
471.261 277.543 li
471.171 277.777 471.171 277.849 471.171 277.866 cv
471.171 278.064 471.332 278.225 471.528 278.225 cv
471.761 278.225 471.814 278.1 471.921 277.795 cv
478.033 260.961 li
cp
f
483.876 267.025 mo
485.901 267.025 li
485.29 269.686 485.123 270.458 485.123 271.661 cv
485.123 271.931 485.123 272.416 485.269 273.026 cv
485.45 273.816 485.651 273.924 485.925 273.924 cv
486.29 273.924 486.673 273.602 486.673 273.242 cv
486.673 273.134 486.673 273.098 486.562 272.846 cv
486.023 271.553 486.023 270.385 486.023 269.883 cv
486.023 268.93 486.149 267.961 486.349 267.024 cv
488.406 267.024 li
488.642 267.024 489.292 267.024 489.292 266.408 cv
489.292 265.975 488.915 265.975 488.574 265.975 cv
482.567 265.975 li
482.173 265.975 481.491 265.975 480.702 266.824 cv
480.074 267.529 479.608 268.36 479.608 268.451 cv
479.608 268.469 479.608 268.631 479.823 268.631 cv
479.966 268.631 480.003 268.559 480.11 268.414 cv
480.988 267.024 482.028 267.024 482.388 267.024 cv
483.409 267.024 li
482.836 269.199 481.868 271.373 481.114 273.008 cv
480.971 273.277 480.971 273.313 480.971 273.439 cv
480.971 273.78 481.258 273.924 481.491 273.924 cv
482.028 273.924 482.173 273.421 482.388 272.756 cv
482.638 271.93 482.638 271.895 482.872 270.996 cv
483.876 267.025 li
cp
f
122.885 49.2241 mo
122.437 49.2241 li
122.347 49.7573 122.222 50.5366 122.042 50.8022 cv
121.917 50.9448 120.734 50.9448 120.339 50.9448 cv
117.113 50.9448 li
119.012 49.1001 li
121.81 46.6284 122.885 45.6616 122.885 43.8706 cv
122.885 41.8286 121.272 40.395 119.085 40.395 cv
117.06 40.395 115.734 42.0454 115.734 43.6411 cv
115.734 44.646 116.638 44.646 116.693 44.646 cv
117 44.646 117.634 44.4292 117.634 43.687 cv
117.634 43.2163 117.305 42.7456 116.667 42.7456 cv
116.521 42.7456 116.485 42.7456 116.43 42.7456 cv
116.841 41.5991 117.805 40.9458 118.841 40.9458 cv
120.466 40.9458 121.234 42.4014 121.234 43.8735 cv
121.234 45.3091 120.34 46.728 119.359 47.8403 cv
115.93 51.6812 li
115.734 51.8794 115.734 51.9146 115.734 52.3452 cv
122.383 52.3452 li
122.885 49.2241 li
cp
f
128.25 52.3452 mo
127.554 52.3452 126.501 51.8979 126.181 50.1753 cv
125.984 49.0991 125.984 47.4487 125.984 46.3921 cv
125.984 45.2437 125.984 44.0601 126.127 43.0918 cv
126.466 40.9575 127.804 40.7954 128.25 40.7954 cv
128.839 40.7954 130.016 41.1196 130.355 42.894 cv
130.535 43.8989 130.535 45.2612 130.535 46.3921 cv
130.535 47.7358 130.535 48.9556 130.337 50.103 cv
130.071 51.8062 129.053 52.3452 128.25 52.3452 cv
128.25 52.3452 li
cp
132.035 46.6069 mo
132.035 45.1704 131.944 43.7344 131.316 42.4058 cv
130.492 40.6831 129.021 40.395 128.268 40.395 cv
127.192 40.395 125.883 40.8623 125.148 42.5317 cv
124.574 43.77 124.484 45.1704 124.484 46.6069 cv
124.484 47.9526 124.555 49.5679 125.291 50.9321 cv
126.062 52.3862 127.372 52.7456 128.25 52.7456 cv
129.218 52.7456 130.582 52.3687 131.371 50.6636 cv
131.945 49.4253 132.035 48.0249 132.035 46.6069 cv
132.035 46.6069 li
cp
f
137.25 52.3452 mo
136.554 52.3452 135.501 51.8979 135.181 50.1753 cv
134.984 49.0991 134.984 47.4487 134.984 46.3921 cv
134.984 45.2437 134.984 44.0601 135.127 43.0918 cv
135.466 40.9575 136.804 40.7954 137.25 40.7954 cv
137.839 40.7954 139.016 41.1196 139.355 42.894 cv
139.535 43.8989 139.535 45.2612 139.535 46.3921 cv
139.535 47.7358 139.535 48.9556 139.337 50.103 cv
139.071 51.8062 138.053 52.3452 137.25 52.3452 cv
137.25 52.3452 li
cp
141.035 46.6069 mo
141.035 45.1704 140.944 43.7344 140.316 42.4058 cv
139.492 40.6831 138.021 40.395 137.268 40.395 cv
136.192 40.395 134.883 40.8623 134.148 42.5317 cv
133.574 43.77 133.484 45.1704 133.484 46.6069 cv
133.484 47.9526 133.555 49.5679 134.291 50.9321 cv
135.062 52.3862 136.372 52.7456 137.25 52.7456 cv
138.218 52.7456 139.582 52.3687 140.371 50.6636 cv
140.945 49.4253 141.035 48.0249 141.035 46.6069 cv
141.035 46.6069 li
cp
f
158.324 51.2163 mo
158.558 51.6167 159.275 52.3452 159.472 52.3452 cv
159.636 52.3452 159.636 52.2007 159.636 51.9302 cv
159.636 48.7905 li
159.636 48.0864 159.707 47.9956 160.867 47.9956 cv
160.867 47.4448 li
160.203 47.4634 159.216 47.4995 158.679 47.4995 cv
157.96 47.4995 156.437 47.4995 155.792 47.4448 cv
155.792 47.9956 li
156.367 47.9956 li
157.982 47.9956 158.035 48.1938 158.035 48.8608 cv
158.035 50.0142 li
158.035 52.0327 155.755 52.1948 155.253 52.1948 cv
154.087 52.1948 150.536 51.5659 150.536 46.2124 cv
150.536 40.8398 154.082 40.2456 155.162 40.2456 cv
157.087 40.2456 158.724 41.8643 159.085 44.5073 cv
159.119 44.7593 159.119 44.814 159.361 44.814 cv
159.636 44.814 159.636 44.7593 159.636 44.3823 cv
159.636 40.1265 li
159.636 39.8208 159.636 39.6948 159.437 39.6948 cv
159.365 39.6948 159.294 39.6948 159.15 39.9116 cv
158.252 41.2446 li
157.677 40.6685 156.708 39.6948 154.931 39.6948 cv
151.593 39.6948 148.685 42.5317 148.685 46.2114 cv
148.685 49.8911 151.557 52.7456 154.968 52.7456 cv
156.279 52.7456 157.714 52.2769 158.324 51.2153 cv
158.324 51.2163 li
cp
f
163.785 47.7944 mo
163.893 45.1411 165.399 44.6958 166.009 44.6958 cv
167.855 44.6958 168.035 47.1001 168.035 47.7944 cv
163.785 47.7944 li
cp
168.787 48.1948 mo
169.182 48.1948 169.234 48.1948 169.234 47.7944 cv
169.234 46.0278 168.263 44.2964 166.019 44.2964 cv
163.937 44.2964 162.285 46.1479 162.285 48.394 cv
162.285 50.8022 164.169 52.5444 166.235 52.5444 cv
168.426 52.5444 169.234 50.5522 169.234 50.2124 cv
169.234 50.0327 169.092 49.9956 169.002 49.9956 cv
168.84 49.9956 168.805 50.104 168.768 50.2476 cv
168.14 52.0942 166.527 52.0942 166.349 52.0942 cv
165.453 52.0942 164.735 51.5552 164.324 50.8901 cv
163.785 50.0278 163.785 48.8423 163.785 48.1948 cv
168.787 48.1948 li
cp
f
180.879 41.8501 mo
181.131 41.1851 181.615 40.6646 182.836 40.645 cv
182.836 40.0952 li
182.279 40.1309 181.563 40.1489 181.096 40.1489 cv
180.557 40.1489 179.518 40.1128 179.051 40.0952 cv
179.051 40.645 li
179.982 40.6636 180.359 41.1309 180.359 41.5435 cv
180.359 41.687 180.307 41.7949 180.271 41.9023 cv
176.988 50.5522 li
173.563 41.4897 li
173.455 41.2383 173.455 41.2026 173.455 41.1665 cv
173.455 40.645 174.477 40.645 174.926 40.645 cv
174.926 40.0952 li
174.279 40.1489 173.041 40.1489 172.359 40.1489 cv
171.5 40.1489 170.729 40.1128 170.082 40.0952 cv
170.082 40.645 li
171.248 40.645 171.588 40.645 171.84 41.3296 cv
176.002 52.3511 li
176.127 52.6919 176.217 52.7456 176.451 52.7456 cv
176.756 52.7456 176.791 52.6558 176.881 52.4048 cv
180.879 41.8501 li
cp
f
195.443 45.3843 mo
193.146 44.8276 li
192.035 44.5581 191.336 43.5884 191.336 42.5469 cv
191.336 41.2896 192.301 40.1948 193.695 40.1948 cv
196.684 40.1948 197.078 43.1431 197.186 43.9517 cv
197.203 44.0601 197.203 44.1675 197.4 44.1675 cv
197.635 44.1675 197.635 44.0776 197.635 43.7363 cv
197.635 40.1255 li
197.635 39.8203 197.635 39.6943 197.445 39.6943 cv
197.324 39.6943 197.307 39.7129 197.186 39.9292 cv
196.557 40.9575 li
196.018 40.4351 195.281 39.6948 193.684 39.6948 cv
191.691 39.6948 190.186 41.2759 190.186 43.1797 cv
190.186 44.6704 191.135 45.9819 192.535 46.4663 cv
192.732 46.5386 193.646 46.7534 194.902 47.0581 cv
195.387 47.1851 195.924 47.3101 196.426 47.9741 cv
196.805 48.4419 196.984 49.0347 196.984 49.6265 cv
196.984 50.9019 196.086 52.1948 194.58 52.1948 cv
194.061 52.1948 192.697 52.105 191.746 51.2241 cv
190.707 50.2534 190.652 49.1021 190.635 48.4546 cv
190.617 48.2749 190.473 48.2749 190.418 48.2749 cv
190.186 48.2749 190.186 48.3999 190.186 48.7231 cv
190.186 52.314 li
190.186 52.6187 190.186 52.7456 190.375 52.7456 cv
190.496 52.7456 190.514 52.7095 190.635 52.5112 cv
190.635 52.4937 190.689 52.439 191.281 51.4839 cv
191.84 52.0972 192.99 52.7456 194.59 52.7456 cv
196.693 52.7456 198.135 50.9858 198.135 49.0112 cv
198.135 47.2153 196.949 45.7427 195.443 45.3843 cv
195.443 45.3843 li
cp
f
204.984 48.0464 mo
204.984 49.8354 li
204.984 51.5356 203.697 52.145 202.895 52.145 cv
202.018 52.145 201.285 51.5181 201.285 50.6235 cv
201.285 49.6382 202.037 48.1538 204.984 48.0464 cv
204.984 48.0464 li
cp
205.111 50.9819 mo
205.184 51.6958 205.668 52.4448 206.512 52.4448 cv
206.889 52.4448 207.986 52.1948 207.986 50.7456 cv
207.986 49.7446 li
207.537 49.7446 li
207.537 50.7476 li
207.537 51.7866 207.09 51.894 206.895 51.894 cv
206.307 51.894 206.236 51.0854 206.236 50.9956 cv
206.236 47.4038 li
206.236 46.6489 206.236 45.9487 205.584 45.2837 cv
204.881 44.5835 203.979 44.2954 203.111 44.2954 cv
201.631 44.2954 200.387 45.147 200.387 46.3433 cv
200.387 46.8862 200.744 47.1948 201.211 47.1948 cv
201.713 47.1948 202.037 46.8335 202.037 46.3628 cv
202.037 46.144 201.949 45.5474 201.145 45.5288 cv
201.629 44.896 202.508 44.6958 203.084 44.6958 cv
203.963 44.6958 204.986 45.3931 204.986 46.9839 cv
204.986 47.646 li
204.07 47.7007 202.813 47.7554 201.682 48.2944 cv
200.336 48.9077 199.887 49.8433 199.887 50.6362 cv
199.887 52.0942 201.629 52.5444 202.76 52.5444 cv
203.945 52.5444 204.771 51.8257 205.111 50.9819 cv
205.111 50.9819 li
cp
f
210.086 46.1558 mo
210.086 50.9839 li
210.086 51.7944 209.891 51.7944 208.709 51.7944 cv
208.709 52.3452 li
209.336 52.3267 210.25 52.2915 210.734 52.2915 cv
211.201 52.2915 212.135 52.3267 212.744 52.3452 cv
212.744 51.7944 li
211.533 51.7944 211.336 51.7944 211.336 50.9858 cv
211.336 47.6753 li
211.336 45.8042 212.609 44.7954 213.758 44.7954 cv
214.889 44.7954 215.086 45.7681 215.086 46.7944 cv
215.086 50.9858 li
215.086 51.7944 214.889 51.7944 213.693 51.7944 cv
213.693 52.3452 li
214.322 52.3267 215.236 52.2915 215.721 52.2915 cv
216.188 52.2915 217.119 52.3267 217.729 52.3452 cv
217.729 51.7944 li
216.533 51.7944 216.336 51.7944 216.336 50.9858 cv
216.336 47.6753 li
216.336 45.8042 217.609 44.7954 218.758 44.7954 cv
219.887 44.7954 220.084 45.7681 220.084 46.7944 cv
220.084 50.9858 li
220.084 51.7944 219.887 51.7944 218.68 51.7944 cv
218.68 52.3452 li
219.307 52.3267 220.223 52.2915 220.707 52.2915 cv
221.172 52.2915 222.105 52.3267 222.715 52.3452 cv
222.715 51.7944 li
221.795 51.7944 221.354 51.7944 221.336 51.2554 cv
221.336 47.8159 li
221.336 46.269 221.336 45.7095 220.777 45.062 cv
220.525 44.7554 219.934 44.395 218.891 44.395 cv
217.381 44.395 216.59 45.4858 216.285 46.1763 cv
216.033 44.5952 214.705 44.395 213.896 44.395 cv
212.584 44.395 211.74 45.1763 211.236 46.3022 cv
211.236 44.395 li
208.709 44.5913 li
208.709 45.145 li
209.945 45.145 210.086 45.2729 210.086 46.1558 cv
210.086 46.1558 li
cp
f
225.035 47.7944 mo
225.143 45.1411 226.648 44.6958 227.258 44.6958 cv
229.105 44.6958 229.285 47.1001 229.285 47.7944 cv
225.035 47.7944 li
cp
230.037 48.1948 mo
230.432 48.1948 230.484 48.1948 230.484 47.7944 cv
230.484 46.0278 229.514 44.2964 227.27 44.2964 cv
225.188 44.2964 223.535 46.1479 223.535 48.394 cv
223.535 50.8022 225.42 52.5444 227.484 52.5444 cv
229.676 52.5444 230.484 50.5522 230.484 50.2124 cv
230.484 50.0327 230.342 49.9956 230.252 49.9956 cv
230.09 49.9956 230.053 50.104 230.018 50.2476 cv
229.391 52.0942 227.777 52.0942 227.6 52.0942 cv
226.703 52.0942 225.984 51.5552 225.572 50.8901 cv
225.035 50.0278 225.035 48.8423 225.035 48.1948 cv
230.037 48.1948 li
cp
f
122.886 24.9551 mo
122.437 24.9551 li
122.348 25.4868 122.222 26.2671 122.042 26.5327 cv
121.917 26.6748 120.734 26.6748 120.339 26.6748 cv
117.113 26.6748 li
119.013 24.8306 li
121.81 22.3589 122.886 21.3911 122.886 19.6001 cv
122.886 17.5581 121.273 16.1255 119.085 16.1255 cv
117.06 16.1255 115.734 17.7754 115.734 19.3716 cv
115.734 20.376 116.639 20.376 116.693 20.376 cv
117.001 20.376 117.634 20.1587 117.634 19.417 cv
117.634 18.9463 117.306 18.4751 116.667 18.4751 cv
116.522 18.4751 116.486 18.4751 116.431 18.4751 cv
116.841 17.3286 117.806 16.6758 118.841 16.6758 cv
120.466 16.6758 121.235 18.1313 121.235 19.6035 cv
121.235 21.0396 120.341 22.4575 119.359 23.5703 cv
115.93 27.4121 li
115.734 27.6094 115.734 27.645 115.734 28.0757 cv
122.384 28.0757 li
122.886 24.9551 li
cp
f
128.251 28.0752 mo
127.555 28.0752 126.502 27.6274 126.181 25.9053 cv
125.985 24.8296 125.985 23.1792 125.985 22.1216 cv
125.985 20.9741 125.985 19.7896 126.128 18.8218 cv
126.466 16.688 127.805 16.5254 128.251 16.5254 cv
128.839 16.5254 130.017 16.8491 130.356 18.6245 cv
130.535 19.6289 130.535 20.9917 130.535 22.1216 cv
130.535 23.4663 130.535 24.686 130.338 25.8335 cv
130.071 27.5371 129.054 28.0747 128.251 28.0747 cv
128.251 28.0752 li
cp
132.036 22.3364 mo
132.036 20.9004 131.945 19.4644 131.317 18.1362 cv
130.492 16.4126 129.021 16.1255 128.268 16.1255 cv
127.193 16.1255 125.883 16.5923 125.148 18.2622 cv
124.574 19.5005 124.484 20.9004 124.484 22.3364 cv
124.484 23.6826 124.556 25.2983 125.292 26.6626 cv
126.063 28.1162 127.372 28.4756 128.25 28.4756 cv
129.219 28.4756 130.582 28.0986 131.371 26.3936 cv
131.945 25.1548 132.036 23.7549 132.036 22.3364 cv
132.036 22.3364 li
cp
f
137.251 28.0752 mo
136.555 28.0752 135.502 27.6274 135.181 25.9053 cv
134.985 24.8296 134.985 23.1792 134.985 22.1216 cv
134.985 20.9741 134.985 19.7896 135.128 18.8218 cv
135.466 16.688 136.805 16.5254 137.251 16.5254 cv
137.839 16.5254 139.017 16.8491 139.356 18.6245 cv
139.535 19.6289 139.535 20.9917 139.535 22.1216 cv
139.535 23.4663 139.535 24.686 139.338 25.8335 cv
139.071 27.5371 138.054 28.0747 137.251 28.0747 cv
137.251 28.0752 li
cp
141.036 22.3364 mo
141.036 20.9004 140.945 19.4644 140.317 18.1362 cv
139.492 16.4126 138.021 16.1255 137.268 16.1255 cv
136.193 16.1255 134.883 16.5923 134.148 18.2622 cv
133.574 19.5005 133.484 20.9004 133.484 22.3364 cv
133.484 23.6826 133.556 25.2983 134.292 26.6626 cv
135.063 28.1162 136.372 28.4756 137.25 28.4756 cv
138.219 28.4756 139.582 28.0986 140.371 26.3936 cv
140.945 25.1548 141.036 23.7549 141.036 22.3364 cv
141.036 22.3364 li
cp
f
158.325 26.9458 mo
158.558 27.3467 159.276 28.0752 159.473 28.0752 cv
159.636 28.0752 159.636 27.9307 159.636 27.6602 cv
159.636 24.5205 li
159.636 23.8164 159.708 23.7256 160.867 23.7256 cv
160.867 23.1753 li
160.203 23.1934 159.216 23.2295 158.679 23.2295 cv
157.961 23.2295 156.437 23.2295 155.792 23.1753 cv
155.792 23.7256 li
156.367 23.7256 li
157.982 23.7256 158.036 23.9238 158.036 24.5908 cv
158.036 25.7446 li
158.036 27.7627 155.756 27.9253 155.253 27.9253 cv
154.087 27.9253 150.537 27.2964 150.537 21.9424 cv
150.537 16.5698 154.082 15.9751 155.162 15.9751 cv
157.087 15.9751 158.725 17.5942 159.085 20.2378 cv
159.12 20.4897 159.12 20.5439 159.361 20.5439 cv
159.636 20.5439 159.636 20.4897 159.636 20.1128 cv
159.636 15.8564 li
159.636 15.5513 159.636 15.4248 159.438 15.4248 cv
159.366 15.4248 159.294 15.4248 159.15 15.6411 cv
158.253 16.9751 li
157.678 16.3984 156.709 15.4253 154.932 15.4253 cv
151.593 15.4253 148.686 18.2622 148.686 21.9414 cv
148.686 25.6216 151.558 28.4756 154.968 28.4756 cv
156.279 28.4756 157.714 28.0073 158.325 26.9453 cv
158.325 26.9458 li
cp
f
163.786 23.5249 mo
163.893 20.8716 165.4 20.4258 166.009 20.4258 cv
167.855 20.4258 168.035 22.8306 168.035 23.5249 cv
163.786 23.5249 li
cp
168.787 23.9248 mo
169.181 23.9248 169.236 23.9248 169.236 23.5249 cv
169.236 21.7578 168.264 20.0259 166.02 20.0259 cv
163.937 20.0259 162.286 21.8784 162.286 24.1245 cv
162.286 26.5317 164.17 28.2749 166.236 28.2749 cv
168.425 28.2749 169.236 26.2827 169.236 25.9419 cv
169.236 25.7622 169.091 25.7261 169.001 25.7261 cv
168.839 25.7261 168.804 25.834 168.768 25.9775 cv
168.141 27.8242 166.528 27.8242 166.349 27.8242 cv
165.453 27.8242 164.736 27.2852 164.324 26.6206 cv
163.786 25.7578 163.786 24.5723 163.786 23.9243 cv
168.787 23.9248 li
cp
f
180.88 17.5796 mo
181.131 16.9155 181.616 16.395 182.835 16.3755 cv
182.835 15.8257 li
182.28 15.8608 181.562 15.8789 181.095 15.8789 cv
180.557 15.8789 179.517 15.8428 179.051 15.8257 cv
179.051 16.3755 li
179.983 16.394 180.361 16.8608 180.361 17.2734 cv
180.361 17.417 180.307 17.5249 180.271 17.6323 cv
176.989 26.2822 li
173.562 17.2202 li
173.455 16.9683 173.455 16.9331 173.455 16.897 cv
173.455 16.3755 174.477 16.3755 174.925 16.3755 cv
174.925 15.8257 li
174.28 15.8789 173.042 15.8789 172.361 15.8789 cv
171.5 15.8789 170.728 15.8428 170.083 15.8257 cv
170.083 16.3755 li
171.249 16.3755 171.589 16.3755 171.84 17.0591 cv
176.001 28.0811 li
176.127 28.4219 176.217 28.4761 176.451 28.4761 cv
176.755 28.4761 176.791 28.3857 176.881 28.1348 cv
180.88 17.5796 li
cp
f
198.313 20.8276 mo
198.294 20.7744 198.223 20.6304 198.223 20.5767 cv
198.223 20.5591 198.546 20.3071 198.744 20.1636 cv
201.881 17.7397 li
203.567 16.501 204.266 16.4292 204.804 16.375 cv
204.948 16.3574 205.127 16.3394 205.127 16.0205 cv
205.127 15.9497 205.074 15.8247 204.93 15.8247 cv
204.536 15.8247 204.086 15.8784 203.657 15.8784 cv
203.011 15.8784 202.312 15.8247 201.667 15.8247 cv
201.541 15.8247 201.326 15.8247 201.326 16.1802 cv
201.326 16.3042 201.415 16.3574 201.541 16.375 cv
201.935 16.4126 202.096 16.5024 202.096 16.7534 cv
202.096 17.0767 201.558 17.4893 201.451 17.5786 cv
194.458 22.9639 li
195.892 17.2017 li
196.053 16.5562 196.089 16.3745 197.398 16.3745 cv
197.847 16.3745 198.008 16.3745 198.008 16.02 cv
198.008 15.8599 197.865 15.8247 197.757 15.8247 cv
197.255 15.8247 195.964 15.8779 195.461 15.8779 cv
194.942 15.8779 193.668 15.8247 193.148 15.8247 cv
193.023 15.8247 192.79 15.8247 192.79 16.1616 cv
192.79 16.3745 192.952 16.3745 193.31 16.3745 cv
193.542 16.3745 193.866 16.3921 194.081 16.4106 cv
194.368 16.4463 194.475 16.5005 194.475 16.6978 cv
194.475 16.77 194.458 16.8237 194.404 17.0386 cv
192 26.6802 li
191.821 27.3804 191.786 27.5239 190.369 27.5239 cv
190.063 27.5239 189.867 27.5239 189.867 27.8613 cv
189.867 28.0742 190.082 28.0742 190.135 28.0742 cv
190.637 28.0742 191.911 28.021 192.413 28.021 cv
192.79 28.021 193.184 28.0391 193.56 28.0391 cv
193.955 28.0391 194.349 28.0747 194.726 28.0747 cv
194.851 28.0747 195.084 28.0747 195.084 27.7197 cv
195.084 27.5244 194.923 27.5244 194.583 27.5244 cv
193.918 27.5244 193.417 27.5244 193.417 27.2012 cv
193.417 27.0757 193.524 26.6807 193.579 26.4121 cv
193.83 25.479 194.062 24.5273 194.295 23.5947 cv
196.967 21.5112 li
197.433 22.5894 198.599 25.2632 199.047 26.3398 cv
199.262 26.8242 199.262 26.8604 199.262 26.9678 cv
199.262 27.5063 198.492 27.5239 198.33 27.5239 cv
198.132 27.5239 197.935 27.5239 197.935 27.8789 cv
197.935 28.0737 198.15 28.0737 198.186 28.0737 cv
198.904 28.0737 199.657 28.0205 200.375 28.0205 cv
200.769 28.0205 201.738 28.0737 202.132 28.0737 cv
202.221 28.0737 202.455 28.0737 202.455 27.7188 cv
202.455 27.5234 202.257 27.5234 202.096 27.5234 cv
201.361 27.5054 201.127 27.3438 200.858 26.7153 cv
198.313 20.8276 li
cp
f
212.545 15.311 mo
212.635 15.0786 212.635 15.0063 212.635 14.9883 cv
212.635 14.7905 212.474 14.626 212.278 14.626 cv
212.153 14.626 212.028 14.6831 211.974 14.7905 cv
205.772 31.8936 li
205.683 32.127 205.683 32.1987 205.683 32.2163 cv
205.683 32.4141 205.844 32.5752 206.041 32.5752 cv
206.273 32.5752 206.327 32.4497 206.433 32.145 cv
212.545 15.311 li
cp
f
218.437 21.3755 mo
220.464 21.3755 li
219.851 24.0352 219.685 24.8081 219.685 26.0112 cv
219.685 26.2808 219.685 26.7656 219.831 27.3765 cv
220.013 28.167 220.214 28.2744 220.488 28.2744 cv
220.852 28.2744 221.236 27.9512 221.236 27.5918 cv
221.236 27.4839 221.236 27.4478 221.124 27.1963 cv
220.585 25.9028 220.585 24.7354 220.585 24.2324 cv
220.585 23.2803 220.711 22.3101 220.911 21.3745 cv
222.968 21.3745 li
223.204 21.3745 223.853 21.3745 223.853 20.7588 cv
223.853 20.3247 223.477 20.3247 223.136 20.3247 cv
217.128 20.3247 li
216.735 20.3247 216.053 20.3247 215.264 21.1738 cv
214.636 21.8789 214.169 22.7104 214.169 22.8008 cv
214.169 22.8188 214.169 22.9814 214.385 22.9814 cv
214.529 22.9814 214.564 22.9097 214.672 22.7651 cv
215.55 21.3745 216.591 21.3745 216.95 21.3745 cv
217.972 21.3745 li
217.398 23.5493 216.43 25.7227 215.676 27.3579 cv
215.533 27.6274 215.533 27.6636 215.533 27.7891 cv
215.533 28.1304 215.82 28.2739 216.053 28.2739 cv
216.591 28.2739 216.735 27.771 216.95 27.1064 cv
217.201 26.2803 217.201 26.2441 217.433 25.3457 cv
218.437 21.3755 li
cp
f
122.886 70.2935 mo
122.437 70.2935 li
122.348 70.8267 122.222 71.606 122.042 71.8716 cv
121.917 72.0142 120.734 72.0142 120.339 72.0142 cv
117.113 72.0142 li
119.013 70.1685 li
121.81 67.6978 122.886 66.731 122.886 64.9399 cv
122.886 62.897 121.273 61.4634 119.085 61.4634 cv
117.06 61.4634 115.734 63.1138 115.734 64.7095 cv
115.734 65.7153 116.639 65.7153 116.693 65.7153 cv
117.001 65.7153 117.634 65.4985 117.634 64.7563 cv
117.634 64.2856 117.306 63.8149 116.667 63.8149 cv
116.522 63.8149 116.486 63.8149 116.431 63.8149 cv
116.841 62.6685 117.806 62.0142 118.841 62.0142 cv
120.466 62.0142 121.235 63.4702 121.235 64.9419 cv
121.235 66.3774 120.341 67.7954 119.359 68.9087 cv
115.93 72.7505 li
115.734 72.9478 115.734 72.9829 115.734 73.4146 cv
122.384 73.4146 li
122.886 70.2935 li
cp
f
128.251 73.4146 mo
127.555 73.4146 126.502 72.9653 126.181 71.2446 cv
125.985 70.1685 125.985 68.5181 125.985 67.4595 cv
125.985 66.313 125.985 65.1294 126.128 64.1606 cv
126.466 62.0259 127.805 61.8638 128.251 61.8638 cv
128.839 61.8638 130.017 62.188 130.356 63.9634 cv
130.535 64.9673 130.535 66.3306 130.535 67.4595 cv
130.535 68.8052 130.535 70.0239 130.338 71.1724 cv
130.071 72.8755 129.054 73.4146 128.251 73.4146 cv
128.251 73.4146 li
cp
132.036 67.6753 mo
132.036 66.2388 131.945 64.8032 131.317 63.4751 cv
130.492 61.7524 129.021 61.4634 128.268 61.4634 cv
127.193 61.4634 125.883 61.9312 125.148 63.6001 cv
124.574 64.8384 124.484 66.2388 124.484 67.6753 cv
124.484 69.022 124.556 70.6372 125.292 72.0005 cv
126.063 73.4556 127.372 73.8149 128.25 73.8149 cv
129.218 73.8149 130.582 73.438 131.371 71.7329 cv
131.945 70.4946 132.036 69.0942 132.036 67.6753 cv
132.036 67.6753 li
cp
f
137.251 73.4146 mo
136.555 73.4146 135.502 72.9653 135.181 71.2446 cv
134.985 70.1685 134.985 68.5181 134.985 67.4595 cv
134.985 66.313 134.985 65.1294 135.128 64.1606 cv
135.466 62.0259 136.805 61.8638 137.251 61.8638 cv
137.839 61.8638 139.017 62.188 139.356 63.9634 cv
139.535 64.9673 139.535 66.3306 139.535 67.4595 cv
139.535 68.8052 139.535 70.0239 139.338 71.1724 cv
139.071 72.8755 138.054 73.4146 137.251 73.4146 cv
137.251 73.4146 li
cp
141.036 67.6753 mo
141.036 66.2388 140.945 64.8032 140.317 63.4751 cv
139.492 61.7524 138.021 61.4634 137.268 61.4634 cv
136.193 61.4634 134.883 61.9312 134.148 63.6001 cv
133.574 64.8384 133.484 66.2388 133.484 67.6753 cv
133.484 69.022 133.556 70.6372 134.292 72.0005 cv
135.063 73.4556 136.372 73.8149 137.25 73.8149 cv
138.218 73.8149 139.582 73.438 140.371 71.7329 cv
140.945 70.4946 141.036 69.0942 141.036 67.6753 cv
141.036 67.6753 li
cp
f
158.325 72.2856 mo
158.558 72.686 159.276 73.4146 159.473 73.4146 cv
159.636 73.4146 159.636 73.27 159.636 72.9985 cv
159.636 69.8599 li
159.636 69.1548 159.708 69.0649 160.867 69.0649 cv
160.867 68.5142 li
160.203 68.5317 159.216 68.5688 158.679 68.5688 cv
157.961 68.5688 156.437 68.5688 155.792 68.5142 cv
155.792 69.0649 li
156.367 69.0649 li
157.982 69.0649 158.036 69.2622 158.036 69.9302 cv
158.036 71.0825 li
158.036 73.1021 155.756 73.2642 155.253 73.2642 cv
154.087 73.2642 150.537 72.6353 150.537 67.2817 cv
150.537 61.9087 154.082 61.3149 155.162 61.3149 cv
157.087 61.3149 158.725 62.9341 159.085 65.5767 cv
159.12 65.8286 159.12 65.8833 159.361 65.8833 cv
159.636 65.8833 159.636 65.8286 159.636 65.4517 cv
159.636 61.1958 li
159.636 60.8892 159.636 60.7642 159.438 60.7642 cv
159.366 60.7642 159.294 60.7642 159.15 60.981 cv
158.253 62.313 li
157.678 61.7368 156.709 60.7642 154.932 60.7642 cv
151.593 60.7642 148.686 63.6001 148.686 67.2798 cv
148.686 70.9595 151.558 73.8149 154.968 73.8149 cv
156.279 73.8149 157.714 73.3462 158.325 72.2837 cv
158.325 72.2856 li
cp
f
163.786 68.8638 mo
163.893 66.2095 165.4 65.7642 166.009 65.7642 cv
167.855 65.7642 168.035 68.1685 168.035 68.8638 cv
163.786 68.8638 li
cp
168.787 69.2642 mo
169.181 69.2642 169.236 69.2642 169.236 68.8638 cv
169.236 67.0962 168.264 65.3647 166.02 65.3647 cv
163.937 65.3647 162.286 67.2173 162.286 69.4634 cv
162.286 71.8716 164.17 73.6138 166.236 73.6138 cv
168.425 73.6138 169.236 71.6216 169.236 71.2798 cv
169.236 71.1021 169.091 71.0649 169.001 71.0649 cv
168.839 71.0649 168.804 71.1724 168.768 71.3169 cv
168.141 73.1626 166.528 73.1626 166.349 73.1626 cv
165.453 73.1626 164.736 72.6235 164.324 71.9595 cv
163.786 71.0962 163.786 69.9106 163.786 69.2642 cv
168.787 69.2642 li
cp
f
180.88 62.9185 mo
181.13 62.2544 181.615 61.7329 182.835 61.7134 cv
182.835 61.1646 li
182.279 61.1997 181.562 61.2173 181.095 61.2173 cv
180.557 61.2173 179.517 61.1821 179.05 61.1646 cv
179.05 61.7134 li
179.984 61.7329 180.361 62.1997 180.361 62.6118 cv
180.361 62.7563 180.307 62.8638 180.271 62.9712 cv
176.988 71.6216 li
173.562 62.5591 li
173.455 62.3071 173.455 62.272 173.455 62.2349 cv
173.455 61.7134 174.477 61.7134 174.925 61.7134 cv
174.925 61.1646 li
174.28 61.2173 173.042 61.2173 172.361 61.2173 cv
171.5 61.2173 170.728 61.1821 170.083 61.1646 cv
170.083 61.7134 li
171.249 61.7134 171.589 61.7134 171.84 62.3989 cv
176.001 73.4204 li
176.128 73.7603 176.217 73.8149 176.451 73.8149 cv
176.755 73.8149 176.791 73.7251 176.88 73.4731 cv
180.88 62.9185 li
cp
f
196.168 73.3638 mo
194.443 73.3638 192.036 71.7817 192.036 67.0923 cv
192.036 62.436 194.659 61.2134 196.15 61.2134 cv
197.713 61.2134 200.285 62.4907 200.285 67.0923 cv
200.285 71.854 197.822 73.3638 196.168 73.3638 cv
196.168 73.3638 li
cp
202.135 67.3345 mo
202.135 63.6724 199.42 60.7642 196.15 60.7642 cv
192.935 60.7642 190.185 63.6372 190.185 67.3345 cv
190.185 71.0142 192.953 73.8149 196.15 73.8149 cv
199.42 73.8149 202.135 70.9595 202.135 67.3345 cv
202.135 67.3345 li
cp
f
206.285 72.356 mo
206.375 72.6431 207.127 73.6138 208.49 73.6138 cv
210.623 73.6138 212.486 71.8521 212.486 69.5317 cv
212.486 67.2466 210.744 65.4653 208.734 65.4653 cv
207.333 65.4653 206.581 66.27 206.221 66.6724 cv
206.221 65.4653 li
203.637 65.6606 li
203.637 66.2153 li
204.91 66.2153 205.035 66.3247 205.035 67.1177 cv
205.035 75.5532 li
205.035 76.3638 204.837 76.3638 203.637 76.3638 cv
203.637 76.9146 li
204.248 76.897 205.179 76.8599 205.646 76.8599 cv
206.13 76.8599 207.044 76.897 207.672 76.9146 cv
207.672 76.3638 li
206.482 76.3638 206.286 76.3638 206.286 75.5513 cv
206.286 72.52 li
206.285 72.356 li
cp
206.285 67.354 mo
206.803 66.436 207.679 65.9146 208.589 65.9146 cv
209.894 65.9146 210.985 67.4966 210.985 69.5278 cv
210.985 71.7036 209.734 73.2134 208.412 73.2134 cv
207.697 73.2134 207.018 72.854 206.535 72.1177 cv
206.285 71.7388 206.285 71.7212 206.285 71.3618 cv
206.285 67.354 li
cp
f
216.236 72.356 mo
216.325 72.6431 217.078 73.6138 218.439 73.6138 cv
220.572 73.6138 222.436 71.8521 222.436 69.5317 cv
222.436 67.2466 220.694 65.4653 218.684 65.4653 cv
217.284 65.4653 216.531 66.27 216.171 66.6724 cv
216.171 65.4653 li
213.587 65.6606 li
213.587 66.2153 li
214.859 66.2153 214.985 66.3247 214.985 67.1177 cv
214.985 75.5532 li
214.985 76.3638 214.787 76.3638 213.587 76.3638 cv
213.587 76.9146 li
214.197 76.897 215.129 76.8599 215.595 76.8599 cv
216.08 76.8599 216.995 76.897 217.623 76.9146 cv
217.623 76.3638 li
216.431 76.3638 216.236 76.3638 216.236 75.5513 cv
216.236 72.52 li
216.236 72.356 li
cp
216.236 67.354 mo
216.753 66.436 217.628 65.9146 218.541 65.9146 cv
219.844 65.9146 220.935 67.4966 220.935 69.5278 cv
220.935 71.7036 219.683 73.2134 218.361 73.2134 cv
217.646 73.2134 216.968 72.854 216.486 72.1177 cv
216.236 71.7388 216.236 71.7212 216.236 71.3618 cv
216.236 67.354 li
cp
f
228.07 73.1646 mo
227.301 73.1646 226.515 72.7876 226.033 71.9614 cv
225.586 71.1704 225.586 70.0747 225.586 69.4282 cv
225.586 68.729 225.586 67.7603 226.015 66.9692 cv
226.498 66.1431 227.337 65.7642 228.052 65.7642 cv
228.837 65.7642 229.607 66.1606 230.071 66.9331 cv
230.537 67.7056 230.537 68.7466 230.537 69.4282 cv
230.537 70.0747 230.537 71.0454 230.142 71.8345 cv
229.75 72.6431 228.962 73.1626 228.07 73.1626 cv
228.07 73.1646 li
cp
232.037 69.5708 mo
232.037 67.272 230.241 65.3647 228.07 65.3647 cv
225.826 65.3647 224.085 67.3247 224.085 69.5708 cv
224.085 71.8892 225.952 73.6138 228.051 73.6138 cv
230.222 73.6138 232.037 71.854 232.037 69.5708 cv
232.037 69.5708 li
cp
f
236.271 69.9263 mo
236.666 69.9985 238.134 70.2856 238.134 71.5786 cv
238.134 72.4946 237.507 73.2134 236.11 73.2134 cv
234.605 73.2134 233.959 72.1919 233.619 70.6704 cv
233.566 70.438 233.547 70.3657 233.368 70.3657 cv
233.134 70.3657 233.134 70.4927 233.134 70.8149 cv
233.134 73.1841 li
233.134 73.4888 233.134 73.6138 233.332 73.6138 cv
233.421 73.6138 233.439 73.5962 233.779 73.2544 cv
233.814 73.2173 233.814 73.1821 234.136 72.8403 cv
234.923 73.5962 235.729 73.6138 236.105 73.6138 cv
238.162 73.6138 238.986 72.4106 238.986 71.1196 cv
238.986 70.1665 238.447 69.6294 238.232 69.4126 cv
237.64 68.8384 236.943 68.6958 236.189 68.5513 cv
235.186 68.354 233.986 68.1216 233.986 67.0806 cv
233.986 66.4517 234.451 65.7153 235.992 65.7153 cv
237.961 65.7153 238.051 67.3325 238.087 67.8911 cv
238.105 68.0522 238.265 68.0522 238.302 68.0522 cv
238.535 68.0522 238.535 67.9614 238.535 67.6196 cv
238.535 65.7974 li
238.535 65.4907 238.535 65.3638 238.337 65.3638 cv
238.249 65.3638 238.212 65.3638 237.98 65.5786 cv
237.927 65.6509 237.748 65.813 237.676 65.8657 cv
236.998 65.3638 236.263 65.3638 235.996 65.3638 cv
233.814 65.3638 233.134 66.5688 233.134 67.5747 cv
233.134 68.2026 233.421 68.7056 233.906 69.1001 cv
234.479 69.5669 234.98 69.6743 236.271 69.9263 cv
236.271 69.9263 li
cp
f
242.886 62.3638 mo
242.886 61.7915 242.437 61.4146 241.935 61.4146 cv
241.38 61.4146 240.986 61.8989 240.986 62.3638 cv
240.986 62.8481 241.38 63.3149 241.935 63.3149 cv
242.437 63.3149 242.886 62.938 242.886 62.3638 cv
242.886 62.3638 li
cp
242.835 65.4634 mo
240.298 65.6606 li
240.298 66.2134 li
241.472 66.2134 241.634 66.3247 241.634 67.2075 cv
241.634 72.0532 li
241.634 72.8638 241.437 72.8638 240.228 72.8638 cv
240.228 73.4126 li
240.801 73.395 241.769 73.3599 242.2 73.3599 cv
242.828 73.3599 243.456 73.395 244.065 73.4126 cv
244.065 72.8638 li
242.906 72.8638 242.835 72.7739 242.835 72.0708 cv
242.835 65.4634 li
cp
f
247.685 66.2134 mo
250.251 66.2134 li
250.251 65.6646 li
247.685 65.6646 li
247.685 62.3638 li
247.237 62.3638 li
247.218 63.8325 246.681 65.7485 244.925 65.8208 cv
244.925 66.2134 li
246.435 66.2134 li
246.435 71.1841 li
246.435 73.397 248.107 73.6138 248.754 73.6138 cv
250.031 73.6138 250.536 72.3384 250.536 71.188 cv
250.536 70.1646 li
250.085 70.1646 li
250.085 71.1528 li
250.085 72.481 249.548 73.1646 248.885 73.1646 cv
247.686 73.1646 247.686 71.5259 247.686 71.2192 cv
247.685 66.2134 li
cp
f
253.585 68.8638 mo
253.693 66.2095 255.199 65.7642 255.809 65.7642 cv
257.656 65.7642 257.835 68.1685 257.835 68.8638 cv
253.585 68.8638 li
cp
258.586 69.2642 mo
258.981 69.2642 259.035 69.2642 259.035 68.8638 cv
259.035 67.0962 258.064 65.3647 255.82 65.3647 cv
253.737 65.3647 252.085 67.2173 252.085 69.4634 cv
252.085 71.8716 253.97 73.6138 256.035 73.6138 cv
258.226 73.6138 259.035 71.6216 259.035 71.2798 cv
259.035 71.1021 258.892 71.0649 258.801 71.0649 cv
258.64 71.0649 258.604 71.1724 258.568 71.3169 cv
257.941 73.1626 256.328 73.1626 256.149 73.1626 cv
255.252 73.1626 254.535 72.6235 254.124 71.9595 cv
253.585 71.0962 253.585 69.9106 253.585 69.2642 cv
258.586 69.2642 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Gary Westfall) ()%%Title: (nudyn_plus_minus_dNdeta_ave_STAR.eps)%%CreationDate: 1/6/09 7:53 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6G@)<2dP-!^JA-ZOaCI"c@$@pR#%N;%`^5JhKS1YVHhR9qrTq"n3mMDN1^`D/kIJ@>qcd*,h-HR%Fk(T5[,-1Ggc[M9esl\C%/D<PApPQ-@'OB$9PY/P`VmU\lM6\!;:rKfcQHMp=2QLaL[79>TeZ@?Um>Y_kfkN/U2u]d5MMIH%aJfk,C\<#Fn)AZ,;LL0^f(Rmg%mAG8I]@hM0FGcqm2@sP*2sYBXot.!.QeP[O)YAC[gGafV]FD@N/cKA?]gfF/G#pa+Up[hJ(W^K(L4;S*cYB!\F<,[ZSNP_2fDE$Z%2!EhrX4,e?;nLMYFInq\+4Im9<qH!\dX#f;@\.9KrQo#!?YV6toh).%VSqt]G3Fe_o+E`4au+gG@hdbG.Jgcro$gpprd(UC]ia'l%<UOTR2C3.@cIp\H^_fed0b!cBjda'8CT[3J;[7V:r<V)H*&d8#FW)C+^Kn$*[)Lrsop6Eg;JA;D3j>d3qAYH=Yo&94@*T94s3t4h%N\.n(I]YKA1qupAk:P.6].aX8ro,ReYi1XOqaJ]'<ZKa4:+.&>`F"??E?Q[V"KZD'"P2eHp%7b'=QCLpDg#;[GA>r]Wu/'*1kp%D%r>1@k=D)'tSPH<'3tE9Ej&"\hN:PpF[(+YrgM"=ZoYWjAXi&"7?r,:A%kLNUVAuQ6p<%\Wl'nFpP^[?icGC1T"?._$2os]e2;_a7%)Y_LneCn4"[T<=SW`5ZonbDg%XkK0q:2tg\FnYOYWKeu0YLAnq?s'O7O_$jj8rEZCY.[uMLBFER1[%m"Y?JX8WhG]>9&m)LXjVO_%N>g)IUXCV)>[fmAq?q<n0LlJZK&o7$kr]$(W&="s&gp=AnM+-aHtQI7'WpA@l`L+fr6fE4-/*$u`6Q1%`Ua$LD4FFV`c6W*:j5RF%5eJD9#QJqK5j@nV+S3>cqaRDgIsPd.?6>f>8IZs+bEc7:59&p\QeQ-NWVrRbP6O%HZoV"5HL:'kG,P%sKah\Tri#olVFX*FosX\e%MX8$$p/lUB&^J\^2O-Cg#i-FBN&p3mT?jBkI9-\W%e@?Z5BYoB$i>qGh[N0l(CO/C5fG3kp!/W_ikeRSV,j*:/=\j(&$Ca57e*tg%&d8,B".r-a_>_-H5_W.8i4F_t\XjmhJPA?;bHd5-(oHJ8<d(`K&<%;9s$5QWr:g_o^PbkWY^#iY.,G!sij:u'mg9G]!e)O3(SL*`%Ii9TVMAfsMGrhqSJU>oSf]^Fom`rhK).LH!s&8-EE_`WgPBGOfd98d#F9(Os`T\9e'c:IKQj1`CgE"]>59()f@_`]=]WXZSg8oBG%L!n4t8Ah%8e5I)pUXK!odSj5&[C`?GQ_G+RE6EgZ<<XQ3XOBLj4pCm=M\6QB#Xp@m^]=P:Y$L?-ELT_@54*7+#-i&S%r+kq]fq]a%)$-]plR`EG#9$I0HE"9D)9<Mb$4q_iWV1,6_a(Y3>WAic!;9U,]48&Uf]hDL>GkUdXT5V>JV4n.!#&C\"WG`;[\$m_lEj,nZd^ob%!>O_*=_Z\,X!i6_qi1aL>,t\,K@0ZE`kL#=<VY>f7IdQQVpR3nZ%O2A=c8mpBT&M3</me`*V]^*&]saN$/S\.L4^Y\/!akDdeKlk%5*KK"/]S2r#?A-g&$9$;d5=.mk]^L`T,Z&?F7ZL977m9r./F'.#ulW</IF$Ss']>/CEJRIU\tPJ>bh-++FLbQ,nPJ^>sg.j(-S`"%57pOZCSYfI^A^Tt`pm9r(&F>(Vrs#of&'AKZaR`T->0a_DP[FK&#a6F^!4!o3%6-aRak"N:Q&O[0CYe>;hqJq1`(oP7rT@[%kuN1%f1WdXg%0/(>>M_HSQ`Y+q0t>\&`D85<?FLIDM\fO2NGkt5Fm:1q<CYeDmXH^WjLJ%e8^<ZrMq,DP2P_lEXbUSGYd%UeGmtMBf$d:%*"u8+_d0mt1GbcdLc4Cgj19X_dUM>U)f-#B=H#?7*hQbb7*@gU9UM5(O_akj85Sknr19tc^ZhCErg!AZA't>GNlL$XhqFX`bC>h@%rVQ<I@_74!%*GDc`:@fdJ,?d,^AJdijo5^d[!huKIk`n]%j-FIrMfY.SJKt2;\"a_l<S+6IB5Rp4Q\Y0ZK-M$#eRNr(HaiMp%Qp@%k:t;UGesFHR-\.sq,a^Dpn&U^]S,T*RXamek+D\KBS>N<2N6C&#:+kQg3n`^(?HE6GFea8Y#"-HXSLGIf'$<15L/tR3W5kfn5ARO%mQ_*t[NFIirHK\`2L0J4<]HEHV'WK:cZO(`]qhVHT6cf'Aso5ZAI$G8R>S)2XhSVi0=?:PMHb:#S]^=urMfCLZtXNEh'UI#9&nm4%nk^j.1gbqG9Lit7n"inR<A`2&X4DSc4)I'k6FHgb$@PDNq-VMC#9ZIJ`g#_PNO!.+S9eMrgO?3T7JFOI>&>Yt\\&59)hm-<Melko%J(:P>R%i>-^!`j&RmeQ%RW"bn;kmC[^hi*_g$Z59cS[/T!PPWo>BdJ:7WNT#>?j.&Fs>V:55SP3B>rnifs?QOHYDfA<mUD=NO2Sj%j=#=r6qlNjU6uD(S$ut]>\MlNT<NRF=4efNfIaKZ_<<A',HK>[fqmEK:Tq73<6s$]?#.tuY1b`Q6RuNMilHq(ent2Cf+^*LZ$h_s%$L`I.2/i!dY,JFgg6/b<Lok@?LeMU@[90;DZYq\NR4:BXkfbm<:L[1!DD\`$%-g=%ogRIRgVBSp_2m`XIPcI32EGGm?MMZ<fXcOK%,)0r8HDacRHU@R\/dT\LSRpPfPn%bNn5^>U&J9q&l9,;eU3"T\/"Ad0h.761V*7t^=RO:?`VZ2X<ibt:%6t8,?X%)RX@YWj=QYWL%'QT3;lc4>g0;iLkI[F;2=-BF=C\KNg]Ai3B`Qcu_?[1_>:+t1"r7jhXU)N>hH6KsH8^g%\k`R;PAVp&])e$E[IY$3U*GaJrS#qHd%B'4H-^GJ-B>cM)3e8#+ecZ4MHoUH9%euShHmhAg"g1Y+n.?s(IS0G,b&pNHTbB(4Rf?c\'gt$7-3(bc$D)G\L]6rN"Pjdn",tTZ:%I_->iZBAC+Qg;Gql5>"aQZ&McBP&#oe/g+)%Q:.[[FscjF\"ui\r#dLdcmJRZ#]5%FC;1!$CFp&Kqh,>*@HA`WIMUI,B?o7A4%6!%%b!KL"e)XFArd#\N1j1$]=1K5O`>uHHM.@DOTD?>X\m>3&?']Id1A87aat:nl:$E-0,if:3\R+jMr/9Y^rScu].72`SUER`\XkGQ%AS(TAd(HfUpJ9d^-#I6B"!U>(8Z5/l-_;mE+B-jI"%E!'(]JTU/f4p%5=3T[0pu.'QWIseVp=TKc<S&F]2PnW\WO40P;UQ,NTWHu%;_nuAqbFkg*C7*[!BIJs9CX^n:$&pe/2OF#jIOQmqf]*jX4Up`=JCb'=)1#`1c2+pU`Ch:q-.`?ahgRP[4RnOY0t%4lF^(OBFYeh%AQgg6.ZJu]r<4pPK8r#2?,_t)^;!+_q.uq\CnXO)l-VU-]E])GfPLKsh]=5C8<qPAV+;3F_g:FP\$WupAOm*FD/0Tns2fJ6(ji+^%UfK9I*E]Vm;b+"*B'Se6$:c!\po$$:gi_+hT0VT*;66Viiq3pId"6=CBsf`D=3319RPal&UTc!U3QecSJo7d?3goJ8Mc5R'[+@;F%b?j?[X7\MDBt`,TMG.Q>Dsc7jZau1=N)Rs]_q3IfZ]TC_8Lf'Q$I[5V(*IVI3`0lhGnn=EO]ItpOYW>(nf\P.6KsD*Y)[C]a=,([%?p01:aGE\,+IUHlFnBi=]k%gOR(9KunkU%7<!Ab^7j1)b/N@O?\7WY+Cc#di^M8P>m%7VM[C)t3W.uEWFgY;S^C^bPD1Ape&bc68%F8JEDGI<a`_@(TI.^.(Aqc(b+8\j@/*jNUClZKn"2CTmXUS!dcAQBUkd,4uBkEj5uQeP!kWLe)l7%N^;])tq]`Y.C-p1PqM@FX!b%p.BH+''YcsM+2odUoi]Q&b<8'V/Za@hg<EQku3lKZ_u>6$U:c/B(PHqF"l9sC'[<*jUq2R&Yk1j],/#J>&<dIWT)fr[77E,q$SRS%dO=DX'00j5dRGpO"52Iq0!=<qH(.XIh^Gd[RW$/H;!3_\7^9sV*];3h4]J!kBX6,+RO^^7Z>'IgWn;#0MJB9g7/"ktZ!R524`;jS%YP"eCo4MpT<?JJmH]:`4'GVP;=p#NW.!;e?YF9rU(Z-.W(hQUi]mZo_Vq5h,keqo*Wr/'f#$Lj"9C(j(&D9nKU)5hu-`)dg'8^"O%*lq%!9K0h;I$'b.]ar52<$b'u-EpFIKeGTJ2tF&V6h!NcOm_PZo9b;_Nq2I]U*B2uhInh8T!B5CjOgS-0eI0^8>Eq3:eNBfp3$h!%C)\FR;r$`mdV=.[IHt=1']ibl[%5fa2f0rd-*jk(m#b5s(HZ[^dH'qq?UJE;?B(tW1k?i]R)VN/fM/QQ[2buG$kufjhEcT&JuN<-%.9.fbRY$gVDOZ.?#62?$ithQabX#IJcYjOUbrtlKikf==1eJ&N)eZNq5JoU"2O`1:<qE/R7"fn!m^2e014+prVN3Q:50rM4I(Y<I%M^0`^7+hbQYZLjB[[u)t.:9&3:OB$5W>1\kjQ%4oibh@C1?T-YdB:XOolC8^oPa&T0e17W[tfk"oJ_V6ZL/V$p_`'h#hH#Xk&$s4%,4T_5QgU'"BZn`jD:'.mL3D3n-;]R=QEBW3!Nr?tV^rnj;3a(3+.R#b\4p!e:,u/fm\a72B_CY`W^9:ch_q9J..XrK:)/I$%>r*[%_1F!'6<N:`B\2GZ<+FP*2YQhGGI*#;NEBh[h-^0Jb1GAO@q#(MG';uPA)f5cq=o6_Q5Q=V0?X&tYC,T9Dr-72cb&X@QR\L!`oXMM%[:Yb#]uRBlHZs1?IUVfS:`>g/If;;bIIoZBRsTO7XC(_`Z.ZV*Za%'YMp8MPj3TOsQ7f)6H$=(7qQnYZg5"%cc"C\Npt)gb*nZ&<%h0\tsEW4R5e,O#!G:M4s]r>i_9!-\8dd>cDld;W\rNNsTm!ek5hJRdd^2C?]^Di["[kGL40<Hg+c'^H(_-=/l50n,jc^[=K#@?,'%fmq6=5r\m$elCq,h.h@OIt:)Op5B1<N"&/IX;u,$^03ajcgQk*pEm:qXO+D))"!B74*[6#hALZ9"/g:pHnI(ZK,l?7oAMVRGNr$%%E\lG5FmI*,p#kC*GPn*$ini"%@\Z.8NXcDm=L5#)mqI9LPhbKCZ)LdY/@CW[4Ya.2EGKP`2-ME-B%rMjL[usS\rTdTaiggI7\.^1%A)!A29Pefuqp$^V-N)?WUSP.5gL%[3VDRSO/"N34XedoObLh+7rEM2eA'pb$R9uN?].IA8:@RrFMT6Z!R@K41YPk.n^S=8,0A^S8%fCT]!ndk'8&N2`,]rL0EBBaAF()h=a?!HRVa6hAGh>6Yd7l@;i12F>HqY@kt25S^fWn3X1m)2BJCHq0m7X&:\RTGj#jKX.RT5%0u%morAC[bcJ$V<OtEWujom)Va6%Z>((WM6?-^g"4f1j@5]`+3+#8h:'<)Nc2BkPb&]*Sg?6t-lG*fDau6dp"iEo*`e>#7QS!)C;6?6%@&#M`e,+E;B#S*t4+p*%f0UoMecUF#OuI\I58@t`4$.]dar9*IIbp*Do_YY.E4+dS2-ME9a*7QjrTABs4_cn3ki#5$.CIRRkF7I=%PX_jRNO-T-Ri97/(7X7\q<S!kg0?#1dBf=-&#kO0?135G:MLRm^N6ekI%@nU&gqr%i8*/@_sL`kf]^ohZ^KP2q9HiPSJj)E'#qM$%I!rD(;]8r0rqc6@YI2;<^TH;:,W,oc)4S=M=mLH.RG_l$pi64C3k<Y5j+lM.Ric8U)u\/5J#5\t^N>P0j^e)`79ZJ@`m*[2+-RX,%?Cbt>XgL)sNC#/Fm+1WN04f`fh6Clg`W9k^1>^]@*h&AFgUA[<)kH@W1ro&K9`KKe\Ud\)pO9(V+7$+udg=mpF#Xin2"-FA,F9=V%-C:WRUQ(RDm>"L+YgIaH.($ht`'J\8qOP))NNT_%8E"\IA<!`cD9^%sGAM-nG`jr\UU0_E1;20"ZQF@W5!^^Glp<W[4?)I%KD3-S%dI"DfUTLGZC#8(5kAk[?]BALVpE-A3Hfb1`J/ZC-fN@$:[GBT<'5Z1^Rc't1rV/hEo,]`'F]%>Qg25kt[Uak]c<Us2-=<>d>^oAi%J#eNV2"n(b4"7_(b@[T!nh)@-<a^8lXL(0rM7H1lB(ramq:cQ0k'([3n_M5e_9.p])_M*ba0$B)Q)h[Sklg/>G<`Y3hYXS.j)8.o%;fXrAp@gbaCFA<5)a=\+K@sE%/LB;d3Ef^;RnUr[^HYln^Wn4h#"RQF_+Cc>KGcj*-KJ@UGNX;@cRW($b:0tDVnR%rr3dNePr!Tf%54`WcosC;gH["mi_u"JFS9qcSrHi84SkdQo3X(QA]7%"CS!&9kqo*G+==Ld6J"#uT[3.L(o#HT2>+'#G'5$UOba$u>h6h2#Hkl9-%+h)K#/WJ*PgM&HE]/\O4N$$Z7CYp'q*[cI+N@3kS^4!`m3]2)fP*F^9/_te,PjHrH;cB&jm`r;mpPqJA^L1pq&SeH(]X5_.9Pu3>%^AV6*RONY)qaJ&$1C!YJdke&^Ah'hSo'>qg=/k`'&s6?-G:.hQoeL]?SSUjIbYM-]FNn92B)dKD2Rdu.D/AY+:XCV1m_4WS>tr)m%Y7oDM2ob"SDa5)LGkP:Jje_)qo]BtTg/BRV*!VBo:e*1q8D,.<l2IGop>*U7dd8k^GiN#$mOUcjAo$1j>WS;9b0ECRB>Md[CaB%Q%?C8$>4)t+uo6n;TBDO[&dIHUro;R]fg[!^98u(6)d#o=@LE"c[Us[AX)3+'C\`o+Am'JBVUGb^\>-l'5]0G0,[:jZ[*hD42HDAd=%KKd)A=&64nn(tg/V](7i51Io><3rh9`ng?Wgo,:>RGR0&p4Er;Q-j28G=ZE^Zq8UbDUTN+Uc++Ypl;VH3`_D7;B&&Mj?.:*k>\3M%\qlAhmsT"PbrLkCW-S6Y(ZOZG/m#UDGI?)V:FS;Q]JPqL>jLe>\YN(1*4)H,^HSd<N\8hQS!mW$[ZB)/LL1uKs6\4PLmaMUIcpJ?%k4inUs&h'5o*sB.:p5!':A+4#nfGm4jOFJ'GNEoe3kEsKI\"(I'"8cFoBQdF[ET?`GpaPuM4(oa[0QPL[;!pfs5(a^2FF1ZhX^5<%8c&US;9@SJOJN[UH2gAKiPUqh$g=ndaXreA%rR,XU;;2"/4Zp)]6nD_C(mPjqp,!D,i9j0HCLW%ke*^8WZCD)X@ipsmhY*M&"?@,%Y9>H3X$C+?`Fd[2hKhsYrAiDNnq?P8R/7+[j"$Ad&^m;o`FdO*WqE]"^4&*/[=31PI(u=<KR9eIK[AHa1YItWJ,OQ9)DIJk-7]2O%fC[<o.-9+LC9ifqaZgSeGF$raElRaBeMJciPIl7fI+l4dW1?'Cbhok8kIls7=Y\?G3S0(NSuq=<=1nVpqC(SWP^9LPcRj5(7sdb#%Y`gGRBE(+2aq@M3f(F#1ZTgk4kO?f_DKP97].MO*pQN[AqPfu[*L].]@K3"(TgcL/S*K<`]r1]i4%!^&0kuuCF#>FqO$uMqrLQKD%9L^\u?DD>2a+.&9bguH!3C7080oYI?UNTOa+-kCLAQms$r^5-YmE'uTbl-PNpG=N$=`0ZgD(!YA+PS;OjZo,j$;OmF#.o7u2<3l&%14J^?a19AWFgR>_gTjYu>0_!0Ys3W<bXV03\@'A@Q4kR@k^qe9:'JaqSZk%&j+h73hH5#=c7[*476>eb:J/s75M#]*n5Jm#kLQOD%Up0WW7.-5(T7bbJP!JF+<[Orn96tbX*]oeF:16i0AB)\s]\A9@<K/RF8q!l2F7@bqoTXasU%>a'foq-M>Njb:E'/bSWrD&jl(G`1%GA1>dj_$gH$Dr]&SB0R"9kMQGOVR4/dcFiNQ=O"(fZD#R]:5m<AbW6%b)<?fhN??laIP:69AB(:%oPuA,FG_aV&aTrU(j`u)<7#7%^<s%TMp(ppijt%<AZL=F=S7sGr7IXeEY$<d$+.frlsVhQ]IoG["RKZ%@5k?G%rj'@G-)j)lhc)Yb3V$qHR1a(,rIVd'CUEonuI0m%2dEfXR[p"5Qb6p`Pd)dK'i@L`00,=I9>ug3KLndm?0Oc]noQ-0>7NJ;]oKeiLsV8MP+#-V;<o#W:4G;b]@)ojmYDCqY=6#J5LiK_%;k'?W)FuStm'.MdSNb+baoMN#Cco*uKi29K)NXs?4f071hg6Rl!&2.]rTa9Zj',[aI$d(YKq+@@fho%A/pg&UP1OQ!erTO"3LWYG%#P(bK2_b5oD<jmEaa`aspZD6^Nr<,E]n2`E]LP(amGV4]:6mu[AA.7Rj4@0VG/06#R@i>VB\gA(9:t2K4O$3UAP3"`Gp9jZWUbD&%KuBQb6pj6nV)X6%p61Zs`D5jY9EHW>nsVM!ng?5e:L.d^!;"4R-_o7Ar`1GDfHg"tkgN`G)dT.mQ-Ps,s#>9O-?WLjQ((f=2NTbB%%EqS9]dC=S27a[11djcHFA4ZfU@`n>P`ALfTp.p3k%h3rq;$RB-fd#5TCb4E?BT8<mU#X_Cs\4-@XTuJ`Qobg0Df`135@^br&dHZ%m(RL:CUCcq?F"V\W0"^ApL?m8+9M&D&$<eFh-^n[D(I5[ZapiR(2(\VNt4fbQH<W6<]<0!)ti*=;-f]'T=aGg(Z!1uKSR:65i_`h%Cs61oU3Z-+Lhn6\H!u%NgYRh/N+$Gk#19^+[itJqX]bqPe*d!Wj,#7KIIp"bM%cJS:EX)VNn`nXRbSFF55CeImjB69h@TD"6mMGY%`0&@aEKq/FUUjm,HfQ$]);+G1I8.?G8\a:Y'-]'CjIAh:r%+(qoQ*UOAeHNGH2eR1bsDJE@g!LJr>`SSc7d!]+A9KA&\Km^%2'kk%L6n,_5XdXO+85&n-W.5OcMi+h'J7FM6$S-^B]l/$HR1d5WE3`57]gaG5hi2uC=tY./D(1P<J-<:*@ArX;RYXlR03\<Gp_\'Q.POL%LX4Mif2P1"s-5\tB+g>l(ARmM/0O86aO8a;-*rrArHgcI&+fb\+/_pR>!PB?K@tVdVC.tF+P0\5?n;B*cn5l_,uG<A^3T1(-iN,%%MWBW'$&#BUX'ZVqSE%&9-o_&^N-l`#Ut:*P(CmA5Tn_*MJOqoRRi;F74R-E+08sQ[J8Angb6G%ED.7`Bp8rh.<[&@W2N3#*_8:KV%:gE?kP'imTV,6H6-Pn_ck(SE(<5oHN@CTa)(SXRtSDo78PqLs\J_ZB,oG:*3;"706GtPVUUribcYFhfZBOiUW<+]>c:g*!*;<Es^%"\f23\IN-[8Jb46]rVR/Zo0sTNDeVuACNA7,J(sAcEhCai@(@IXSr&KL!'.5Vi,aJq2hnQSE"k5(fNGG/R>6ZV,Ve^.V$&,B..IC%SnmTerajlO5&Dcj*%oUVf.W`%FecT%D]=5l:Rnh+ldFDP%3k-!hS_Qi/<;qSm:IKPP.6]#m^JV*;FHJ'nj8*&/aNc8;!!%5+\/H9%beb6Q96+Q\"&]1&Esb]V:]E>reEMWN2Y["D$mXdB`o_pLS"p>$6>882FP.7J>nKF+`mA9ecnXp1p_^U/#eI*N_1#kWZ6SS-d=R"k%ct,_o'hY6XU!&IhMa\!`*(-&56!#Io-AF-7Jr[K*7M%qR?&kYO7M%qR*C6T-iJ*2_bDr7UnlY>t\u7u:HA'seP-geE".pV@[/-](%/u;]s:YrR,3GpM+:?@:ud\OT#4_mjMp[AI5Ds;t$3pF\O4T1</A2;uiXKQp7Nj@pC1n2T)$oXTmL_@D]b<RsEo_:t/m2\3RIsg?a%k9]kua"DFZG:>]GZ%j2JUJ'DdF(cT]1MAB_XgstNNci:LVnW535$UD+fhZYnq7/AO]/f"8RM\`Jhp=,IGNj8!1Y=;E$/(qZ;"0f[%/]K!e/c"*IXsN`LFrSL;,YBXs@P[@oFk*js)M4nu1]ue8I3OT\@"HV71E4$4foG=X$'C9/Bi\gC,2:(&;gJh6D]!XLk]U^&BjW$\%4H;(5#\.f/IQQdH>Ed+eVR,-6_qAo`ak]]i!7>15<mO'X@"2&g)#5YW`dqE<ZGhZLiqTfD?'*gemVXE&_cZZD;F[_Zd'Vo[b,:IV%AVec+(3o%B\duGY\m4P;:A"+.mj!jrOo;D5GC@F"oo+`!h[GVa?B4BR0q+Z0DEcJn;u/cqjXNXCfQ@_,V6:b0^C'4POIW$S3b)%)%YM\VcFQtEdA+J9&$H0i"cN$F`e5Pb#)=_`eC6=69&Y.@la"Je:e)POo<[Mi80nha4?C,@b6eP-.7YJ0u3W=IE'GuRiW3tjCX'4bP%3RL4U#$dkiRuqf`-U#DMpY#!u*U-XaZ#-*o);99LH;-nqjKb9RaV4KXPC.DHoqQq>NlmK2]qSt=`)('IO,3FBoOG>n;O)p2PSkU1%5]tL"U68Pb+F+C,<6B!bORcN=4E[Ol*nTa4]?*C#:?A%Epao6_$]#)#>[*k&A6`l9@e%MVcIS=N-DO4WIp=NT_ChHLVO)LQNhEn@%0#bT]Z!r/sa"0">7/5J'VorS4=Y]ZkL\F^DPf"[in+_4-%54?.Z,f>j)DLn5LEB]O77MQHj:=WDh]e6q/K"I)e3R2DX0.9._;b(_%Z,i`nq/KkiH.qEic@NOrEp_q8?4s;W?%M-rT>u9TNTUn>?h[&&PIPXNApXsI;)FXTDLXK4*?&+EkA6A-k6XL[RdT')0#h7)pN*kt%oF)h"\Ls[H$hfIYld(nPd6i%@YJ4Ce>b0koR?>A"*CM<c0)["pqG,?!WWt,jRuFn[")KIA,E":f6I5+INZoO)q8;hYM[pg=2ota6%qN$D)p4=?.4PWaSWk%0KH?cBK-m"C^o$Abg=$0aI(I;!u!sag@MgIgJlbCie_^0\S'TnA7*\PK7!_*_3VlbmFdPp01\--(gj]Vm@%.>(sR`T"kFZSt]uT?,Y4L=9_W4?em5?4qm]rU]!cl]DJ7oRuRf-d+;*pC/e8M(-dLoL?u5KP/pSH\SA$Dbg"WmnM3T1C[f5IqO6(%1QPt]<??n!AI%3_%\\:K-TTUj,S<noS\jjt]g29KrT'd$Z.*9nFaZ883,)&)L\W"-0t_lSak)%L:Y%8EVnE_7+c`7V"V0LQhn!6@%ddPYK^S[:]ArXm+T:"m92)H=Rf@Lp\KX3BP(;bBTdTHpb(6SH1'G7=rImt9;$HP[QOa?t=";.Wq\3#S(eB7RF>W.mq&ZL:n.(ZCs%Mrjf88C--<W_`R_Uuq[c[&t#hqt8>;anTOa^J78n7@hDs\ZTGP37VL^o%CEq-sS5B)eg]?b%!RtHD6$3+;?GF>t,b?2jE,RG:6^G%HKCfnE3X<mh6d/5Tl>ihKoq/-V:in0l=[mso8nRVpQIB7T:uf.rI#8A/rs:um"9$iE$ifLg#!jp@6d:md1;?M+iE*DUE:BAmrBQi%NP87raE<3#iOXP:IU+im]p0SRc*8n_g_#ut1k@f/$d`P[C0]bA(8;m6OQkY0h><]!\%eN:/p,YT[TYn^DO/"Q5+@8S`qmQMDk$31%T?]>rB$\1B21Nksn8%1i8ks8??X.O,=d.%hRnP.SF0B1OrgFDbG-n!a@U[%^h'@kc[s)14:NZ2.,Qqq/ET?=>/_KG72<kTWjtee;%m-%U>PX`?1po*nIZs^?a&U(@$HDC8:G&!fIW:iS^/Cno"_CcVjG2c\/UX9W,H>6VA)@q#/#;YUZ&U)HA7YKUmG,:__W3O&9nKar.%I#kJl*,Y[I$[0/($?hp.dMq$<r9h13[-Klhddbdp-*>SDN9NLZs-hXid'9^ToBkbA:9Y6ELgU';]=43)Kj<a+%3no6SX4Rmj4DN7%=q6LtMp9P5@\#489.)?J.P5?iJY?slq:t^d\W'7d0WjbboT!T@LP&O>d%7)d=#G_XoIKf;ia"`Ll(-PliD5p0k977bOhE$,oT!29%2cYTY8Zki>>h;Kl#*+FS(.q&WmtaL4qD'.Tlf$GSU.=9Ba-ZAb>>AP]SmCXWej/Xpcf%J6q3Kamn&ONS0?mh\b>3/&c1_3D02$6`%d<(#p@JYnZ9@<p,'lI!uF@i`Zakqjk-CQR/-CAaYL5`!&MPV79o!+6klr6dXJYVI=dh7_D*`4b"&uqO1#jFF>/kN%ga-$7UVG"Lu%d<Oc/U?RhMl!cRr,D`3iZEls6$TErV\g1LldU#EY9pbC@Wt@hM-,n;$I7Hd>9p`f*C%Xt79paA+pm6tqO/>QR^I"nQnME`m?./Qq%H:&,V:"PB)kF9<j7+8!UQD9D9lYFKENi),3L#5cIFYqpI1Y,ni?'9qB(jRrD&d!rm*bdH:&q\!AUZmqZ9=fN/LQ86)MPZ5HYJWlZ%-&%CKDam2.9pZPe([!Hh8(/bY7c^tYO[R[[Lu]I?1gO!1?,h5=_^g6f;k#@:!+YJU4nK:?EX%>Z`TB>BD2s!p:V!G.P:f?'?<pHq%18Tn[hQ+ha0(R7cc^/JnRoI[24AL8WLL?6_$Z'ucJ3n##F)n1i]9J3fjEb+7YPj^8-0F$gQQr(cmlVmV;IiXlN-VGb4hZtKY,FgS%E;0;$.EW89goN:_EuGifJ*=%rR'l!fm\8ULasWAHs3+b0L&$tnIQ6dPG8ZNJq#]f$I1n`t5FF`X2roKQ]toX:)r-V:RCbQs`D?Fs%pQK>hb]r>(:TVu6eh_Lop8oE$i)Hb=]lH=6/nrOXIHTm<Iq3O7.uU$@"i'bS;1bJn:(85eo=CR;(BaB/oGpX9V!IPU61=c_ci*Z0%&4kF%pU?57_D'f&,B$O":5h+E-aN\MdpIJMkBUKoBOl<LdE,$2UJ(SE<8)a2L9$REGYfRO%<XQiDlC!>H:+7boS2YifR37Qp[Ij3%I%28S.YP%%ILa"el4;3K/2*_D&Y<E,+CU,Sm^,ODhO\#+XES&h`XD/'^fpPj@dW73]jJqEdeUWbLr_J8I7\\J1-ZthEd<CT]IS+S%J(J:A;jl[Zf*if(V7#Qt#;s<VO#6OV`)D)_che@21LA3CfaEPU.n:A[q6cV/aO&8dDa3E2BW-.9j+j%2`JKTBY7qLh>>9A=Ms!cZ%a/\G=`Ij1#r_?pp&+RRJ89Q+CT/XD2Hd-X91/.]3)4?ZZ(_65USVjUEIcG==A(^Ikh;Ia&p[c7-L,;YDgl3NKEH?:k0BMjd5.P%C%)bF:4g)G6aO"0\KhHb+mGoiF@qh;X'n%I"hgTZ"=E0p="k3/TrP/&^<Y*#m#jq"PqN8O8`Ke;?rXK@H=-CP?`.%udE`t8I*?N3TS%DX[<]<t%m>euYZc6i`ej"P+b4iTQN.MtP)Rr`qM>[7:$?A82t1\%^kV'2J18oN(V9oR+M1]GTA*V7lblraD4N(m#tul)#3E[A$p-%B,FQK6s)X\?!EXp`Vj7ZB.WFL?K<k?k6YV/BuP2g_=^D/oZS8m,i9=(-<r7"?df=&?\0GZ81j!6A'-)7DNs<oJg%S.;=;7nEXIPf%WIc;h?1])r\pj1:qPAqbDq;6J[&6BHoh^S;hUo%MMndY!TE,p-,oS-9O^Yj!2gSd_AA0WTr,[q.D.7e$U7Q^1[*-ZH9Z<`tZXR1i%kqs6bDs!8;'4GL\NE0i6/?oc"0.[$5TsXWDqsqqmpT<$3g9123e&H^E]!8NSY`E[lB<QpWPj6ZaEU-Nh*ObRkqGgEU>bQheBic/_%h0iTldC3"!*cC[=of+N/c[D<4I2m%f1cZJYPofhS*oF\988Zl/rj)M`WR4%h]u-^;M8^G4Q1`AWI&Jn@N=p$7(MDKkm3;PVSTF=G%n0'+ODgX#l1p-HEb=i>]K,LEjrqPG@HZLeTL)52B007O^XN8-m.q4-ja8Rs2HqA2IrB]i@0!3N);PW7-\)?KA7Ht!p>=VaV.?+PD%OiIjiNII`o23.TpN[F2prSg,1Md<BU>jaso3UUZ7g:fblL!c;P@HBJ<4R`u::2t6^hs+Kc5@rQ*=-L."QJ:IOqmp&!'smYZ]`)DD%]_Q:uHEU`<Y`PZ9,lPj>,o-NDdAaib@F>4HOH,=A[H_K_eZgT=K?[gr3gkr=T]K:eUmG5e2Z%Qtap8!*IsH)(W3fkPRbSE3f7%JS%2WpaI4e)D[D"d-lFDE4nQe[drhb/moa]Y<fl#u&McV'"begfu][r6)I>a:daQe.RFg3]70O^._'e^(A1f9[@5=Scpj8A6"OKr[G4%BV_8),IlidTj81I+8`T+K'tV7RO;BDp\A+\!A2K7hpJQ'I"W8F!;"3gp!d.V=h9r#*rB'`C#mi[`hR,ris47Ic:_S`Xg_0la>qJ\%3K:l0WBPCi2BgE<Fcjd,9`NaFP0&_r/F-FVqD(IWJRGDM<u9le8?+"c\!+WJq[4YW3kaEEaW3qG1]EpI[CUe,=S3<`,1]lDV=+,F%ae`2+G7JXaj*I''r02pA"cUn,`)+b3GHT@]!Jajn8=[Z[db";WD2,7U(uHDBfg:^J7AFWSOS+#!\"=Q(q7]Z(6!C%R0mf-@k+j3e%$5`,r%b5hB,RQ5D$t.kcH[l+$*3,q3W^[naSmf[M@K:E@#EJqFY?tHAT]Vq/5SRUL$qJp_fRQhLZ)s1h@<VOaVQJ3!0C#e[)`.mU%Z6U;BJ6am1WRETGMgChP4?sTgHC(A7P1Y1/lVH-2@a\34O7Mu:,29nonjQp/qKG*FQXj)5rM+bR?Xt+pUO5a*SfH!;V*<$l2i7LH%J2b9=Hq@AKd6Gd?q*+Aj*p(TBIcV-%njTVefVnu93i,cqkIEp3;dT,9`ODQ1?,)LiEfKG?:rC!4(EH[AY\=)UgVe=7ZE6G"0ieCi%lPJ<@Yugl.rAIXQ?,(3V:oYl!kIZ0l/&Yff9D^VH^[M$\g;u^sl^-uVU04XRHIjf?,hE=Yoja+hC$&[B?\Ws[07.BgmoL"mY$^n'%IKR7`P45V]p4/;h<;V0s06*Dc^M5sJ]7/ESB.;_iNm:DVn>"Lk,>IGBl<V/@7RspM,C%fnqc1Bp^He(\Y$\W;S)OV-pUblG?;p,h%^S0QF)aV\prce=HZ-_csi*F+a$Pgp]H`2/eZ3+_Q,#SYlf.Zqd7D.n%H_"U'GQ#,/i:L+LKV-].i@4\1^MI@[M".W6ht9XTVi`/+%duoH8f.Yn;3Z=,Apq)!;poU]#rOT^a2;l)qfb5c?A/k5J^Wa$-N]VM#n+pVQ%eoK7h[j/bLq^ngI,%*[X+(";F!SNdQ[M;mmVU_9%]7/Fr4H"J,ra!;*=8bT%Q.F,CUJMlR]7/H-c#GCg6/V@YIar@mp\=T(d`?`qDs38HaB/=0nfD.6>rp$X)nOr"lfT_2(kijq?,*OM%Mo_rJ11Fq<GQ$Ur8po0-OJoPc`LPF@f&sYo=^o\L+40aPnugjuia-uHl^'9mFkCp:,aOs=UC[($?[k7@$1I^"*Xj]/oo$JDXPYN#%*V5NgWaEbIcMDk=085F+0qaG_%J[)5[\Hcf9khCerR/RCS6e";5NZ[".c73FqH^l8oZBJWonsBaY#kRVnK-3;oul2(Kq(Wh?LR`%%$\n4!EQEA&Z3+PN7iq)(^[,&#''-<KhY#&)JsZs&MKf$iatU`HlPEjKpoAk3dC"D8l^,j9H:2c8Ib-6B3H.OrY:@_$m,>b%kVD0+%h&[ZCmn27HiU[-2qjM5cDD>(NF11+W1i+m9a.0]hkj?XlaK_@`d7mq8R,rrC'IFqhTE<s%*VU\nLp4.`X6I*uq1Zr.Z@*9ZLdD@6%<m,6]NQjSm4tk-H(>mm(%c'"oRr(CX/Mu?7PIn4FS6<Ckpc^mMf9m[agHJm[^\m=J:7Q`Z[on#pS/k;S*ae(<-1C3Yc].sPGOVj5%r9NQd^NLBI8(YA&^7LarqtF`aT:bE33t$g^?Z1+bVf$B1AuC,c]"a;5:1c`G^Wq:8mBfJu;j4>L4Y\kOX>Led`l-nml0el-YI!3S%iRIFjM3e<,qk_;EX0o6X1,e`6kA\XK5H`=]W&h!![^!,SCk)8hD="oN*Z7&[7use'e&m((m;[EW4ZR_.MZY']Od=1?[UtkXUFTT4%0a`7`[_DSsXnKZ1GBbTuCP`1NY7&=90"3p3hm_2I[[5R2Wp0m]p5\(lqOc6taf:iUg#Ml2aN:R7L3GKJm:^u-Brl-HDnjF.1[dsQ%-PO=OqKhDeD!0:.YHtng-[^F-c-"s@=JkDdH2lh$DqGi3g[4Ou^%nqadgt*Q(r1D(XQ?r,4\m$nnbH1b7r54S:2kRG\f.$s55ICC%plbm63).TLqR6CdlfpfLAofkPDAUm5XPHm,*I_2*5Q>c2[d3lQRLS)LQ0iPMoPW^0Vg#a0;JZ5OG)IAV\lDniq)3rAVIhdM8oNH_%]6enef$D<rL!mt>A\l=(Bl$eAs+JD/`Ug`bZ[4WD/6)Vm,EJH^O,/(_%1I<Wq/!7)O-^0TT^D1p8Js9!>\BLg0Oq.X81r1cP.oXl%q?I#$KP(oOf&l1_4n8(&YO.hDX*s%-kN]tMLP)iIoQss6ka^&q,r90*N/c8fbWsK_/aM3)P?DH[j'h1YAf+^kr5@Hea>fWcOd\?:%itVliV8@p!/&(V]>a8I`)P3MO70?s+S0b[8"pQWlR(M4+Kh73]^AV2t\3J<F,.Fa&I\l)r]Z+;*@'`Pcq_4YcXAII%5WkYJqJ<fI%h*%V\7pGq@AWiKk/6m)=/f^HGgQ;;DNcM79Dc'9QQa1;DR%=QlX+"+'RL?$CY'r(=:?Ymp81#R[Ug\F^YFP.c`e>[cL!gML%1T)C%n?2_0pA@;$><[7kf)-V6;sZ>8Im4l&Pkb6k]X$*pRKr5frGUSBWU47k^YM&2TmrP1$YF8D/tjQcNU:V!oD>-$[f'h2f]Bm5k8+#J%S\4cAooflt[5D7#iP2H!(K%[N`Qe-W`;%#>0e1aK*E77"F7XRtEW;KAOLsnlV=j!&LV)G'@m%r&h>2H&Mds;_A,39K>3);ZD!o_e%8L$$S$7(`ON3!7Ndm[kRk9Kp$ph=lErOP>&B(N-FEh#[4@^#Fp*WPAX.6tZSVV/Z8"Am9;6lT`,Ts&rrBZu`]$VWkW\rF6.Ek'`V%Dq[(HkV5kZG8$/=%&5MAnM>qSUCQreY!,Z!$L(%%jZCNo?X)kNe5#q&N'uQq04#rn@"A5]o*m/K@"p[#q7(t)@QI+i_@Bb8pLe'(%ImBq*TT@887-1;mU%<QC52OpMkC37bNTr(l?["GX4g3[mK_i:*8at$b1bR&sl!al]bYGr3Mn*mm'u9Z0*$b9Hj.tqU_*)s@k%gQ(%7j-PLE&BZ/MHUbS&$s\OcEg/V>Ba=C=K4iD.:Q="pR/0QKrp=f[uUI1$pjDF!/CWpY>Q@Zg[3*)O<fE:-<@h[DLKr8-c*fg/s0\7%G#5V.O2SCIZuIHTQR=g$\%*ML@IIJN'PGg4GBRq6O807?[?K26bIWa>E=*!MK7R8><hD`0IqC\4H$gADfp,e"/i*%CB-D7GRS'fO%=oC6W+diC#&Z#.K:%_DiY)++i6!!fLKufb*iA_XclK:[id;dC?N!B/TWHG`gCG'G.006Jk0A2[q%ia$beEt3=2/HQ2-iU@U*na.A%p,8dY]eQF5oj3H"oL*lt:A#rClXN5,C_Be9fuU'MIYgX8(=XU;Dk>u4AS_]3gLkO6Y144O.j*WNNo_P)52.fY3XKO.m+'E\;g\p%%/'!c$=DZG#clQ]ANp03bEtYtf-ggm*l$YPq]0FHu^X$EeJ=W%jS(ZeboP>3<a3T,GX>a)8#M%kP[!f_qCKRdBLX15=PI=@9$>hEt%MAunrmth,Rp*auH.,kN@Y*Wd1kCKa.h@hWchL+\%&%\Br^*O"&L:)JM3M1DpBuY0&K>e0+ed)0Y2ehBkCoZi-.D?=VKjm[3QRSgo%o5%3bj\"saJPbRBE\IhVV=.%t7G]%>7CuHH;(!*4hM4&t[4B^mF(OmP_)-."0iNt)d.ZQD)gb3E8f5`Z.+GEDQj7Udf\,^[+nqh<%]6SQM^V\HUQCCpEO$;2AbPd6^bIPYK7Q$`ho&1Y57$4dqo'Z*`I?+h\ihuBG5./GB;.t;mTOI&2CqsJTmBOSnYWWcj71P>?2S",3%RJ4O4s,8.hM,?Hr,NkVS)7;!dp*%_DB6)A5losXF;XB2BNh!?m1Q!Di'<W2*dQ$gATH'BL^=r&0!]MDY>roR\rna(Yg+-if+1RcJ%I<-Vi\Wc1LQ?=%gin*VB\VGrOVUdNgbO]tHlG@FcknqE>H%Drq[E?`.s7O!Y/qU^6=&OtNPCHE*gn!QK`@7#YGNX8B^u6\,L$].o%GL)B%NZZ8YV%`E;0)O*IKDI6<IEP9i>#o3D@nC3Ibc;.frVQDJaOj]n)>;"(LGb36Cs%^/AFma1]X'GiT_dI2Cs6T2>0B!SA_bQe%5T[)MAr,XJpD[Y5RZt0\cGq&QZH=j;8r2J]ga3$49u]TVNO<nlR*c*LO:e,/Zr#h.!B9lq2"5,ZP37LAL+U]fad"G0AMErK5/&7?%"]>7S.#jPuC1;XK<dqm%Hf+!F(FgNa00V3>caQ,V3PW1Jl(*aYH3f5o7@!._87)X:ClAq#0Zt$Aktf.Y0\@h=[T=hl?T.ZHQH&]C%^Uu8>rr&R\TVh$6mt<EtilH[Po^-dJ9K%nkXtnn+0@7/Je\AdObhIc`C%ug^E^S4@:MVuG"''=![UP/%G7L>)9Da*/)!C.T$Bc25%]^GBV+b'AH[FN%"-<C\CH%2FSCt[3?lfXX`_lS=%%f\63&/iF9#"c4(.;K[o>lC/Y<Q\LaDQEe#p+!JIk]cRcZ<&JjQ(XF'm8a1!%\_m^D>BYpU)u/p;L"!MWX``EFH?a0=k6`:<$Yt*dH/?&HDRXAg0=?:P2Oi7+QWg._>V%M/SSd`\"n$!)g:XI$l,+\4041<:=h`(i%O\<G0NSNZE5[M1=GouH:n%LkhWbgN2Qckh7N&]:n]t8qVIA\30bUu,0*1K.g*feK.5!dc'qsrD+gZ$o=gu667fXu3;+X]jo0.36@%]cPgWpYC2lrc.qhG16J')g;Ucg#]'b[COna:TOA$HTBaWpoV3br9esgC0c<JkejHC8OhmHqc<G69YJ)L".K%j%?)2pnG?[2md&1N%kkqoJZ)RQA30*G@rqS6+^Lj+RW8IUpRsq@jO3KUI?]WH4b9=/k`I?\X=Ya`_eUYr.U@=9QPKLhe2*7"c9:+G:^4(&hP^B!?@<nmJ%RG3usFE`VV4,FFn`%u$c:Gg,>^9]mK=m/<m\(PY%<n*/.^3c3;.?/?(9hd3sN5ZZo45qQSaB4-s2#aFNTB5IGQLX#&kGlT_d+EF+%n.8sU>M`MRe]?K@^$VA-`INES"J,^lff9TXEp)(?RPW-tg!7,sbY>"e-QBD1s#@\Ufpe>E"R&RrNloI0R5)h*V2I5W:CSQU-N(El%j97mYkG?!_)f'bo4=r1Tp1PabF`r7[>ir08T)VXa3IS[4k\VEFf7S9u[O#X%na;VbMn;fbbPo]6Kd;&"dbktg%II,d0.h(CS\P3o%CZEh"IpMrWf(d6ElMB$>LsPuGWI"([0@=UH]mf53H[@HE0hs&agn'fLceQ+gS7]Mcj'NZGKdf52:4XKO>Q8U0U)j7H[aN2ZqSefp%p;(<6P'pC,q7M[GZO*ZJOHFH&E3E!@?^c64>d6-RLk;03#+ltW+U!0/G3fUsS`Xl']b1>#Ya5K\=j/3K5[fc$`5rE!cRGZeT9*r^%+Ka<;S"!a[P!EV+iadf2GbD7!e_kBaURi&Frp5mdWr,0Qq%>]f1M&+ZVN<RgFMr-\\9+&:TGUF%pG?0Zl9b8WPML:aPH/1Xq!')X%R3RE<(2)UjU/PYFn5"+`ZZQ'G!qOp?,X4QH+@l<\^[j[WER&,#OP+a`_p9fgl_;T"S=.ZnRlH`4"iZlSiqe47\@;A!YJ"l>=4?Jb%4Q=Q&/!"<'#Z4d9?K3C7KQIE.dK,6f[,uXW"M;(lS8a26Gl6P[i[_@hj5ss$@r5K-gjDi+r3=u)3f:JGXVcrKNJWoPm?VK:]X/DX%-J8+go#d!&UMA)mm\gJhpA"?)8YIhQj6f5B`Pog<RRH[&V7A)'eg:>(>/.3*&+fMl%p(+%n`Chf'$Tl9ZO$tdnS=OYJ$a-1ieq7R%giO_rYFG1i0kST0nS9TQc0lrO?&miS`/g/[+o5#Vo)2CYPim'tq/WX#pMqPDC4qg!C!e$@L,#`'_,\[m'iRA!G'jW(V<O!.G<a%l%Pij9T5bIen^*K29d&(2^j%iUg+.Co"d1jAkmcUHD]-$=YPb2VG?-%"WQ?>t_4f-CI?L@8YWlMPG-Aq%)MAuo]:Ya1dO!9Hh2X*?N%]&Z!ddrPWb6%(AG^XP'X0ZpB8>/0jW*6,iLI:2#+`itrTbXTB$9=%I=:$4Ll=_E)!VGJ0H`UFRRDCu)]hAn>k[M5@=<"tHY`)2b?%/14`!'2;658tR&;;]u4MV-q:I6Xf,E8p)oQm)Mt*!epAD*O#23cMg;/gqo""L[RU#`#cCLj^rT$Z)geSjInVg;C7:s+nte!=kdG=%SbRoo)as,!/el=0_pG>WTetCUXM4NrHS""]]D$$oFd<M'Xf"@iQ<cS(^ku&2`KBc;KU'Gt-JjLp8%+0.<)u"n7s&b3XOXQG#WG<r%5`-dj7c&P2lN=,7T`2.'RJiQ'XJf>]dpD'pfqW`6B!&ulZUaDK/Soi4a6Z[8A]%8<E6KB2>;jmi0$!<U]4H&qA]ulUe8EqaGP"XP%b:]$B*4&0&QAmNLh2^0`G0?c5mrHY?jd'a(pc7\@b$%g?2qk<s[>MgSr_<)9AZ[0Uno(g8bt;adULQ=O<UKgm>kh,Di?cps<oZri%5Ur!j!'.*&hHmI;Ha@%*G\S3tri*:4As*%-^q]Zr%u[;"'J7pjKT"30gVOYi/Xk/-"&MC'(=lZ[c)5=>WS+5Wr[BHDki2*iHuH@$%=Cbu]T^7Hn'_KDTJ^TW;NOMqId)2?);-\bR0)gSiVsrS=_;H=6i'3=u"@%>Oc*CRO]BBq>McZcUr*^<.YgR7%[B6`M3+:4C_QrR^%G4DC?(hM/P9a*R+S/&3.,-U1`Ai['tW"Q[QcO*%<ieM(mFA2q5.ON`'e8p&]0"R?MFp")r"_G^]/-Wn:7e*urPR[E.L68;3@/jP4%@+tW5?;VXgNX:gDDUF%Ke1pf:($ke,$a%pX1R:X8Pjf)47CDgGLoF_50$LuM3OYSLdjQ9C8W5L)<KH)"$&2,DglBmF'K[hhSE&g2%><'g-q^->("98*.C%eV>)Xu3e3V8el9uCLDGa;%pCsuia7(,YXCs15s.)@]U]W[T+iCT0rGYt7\c*Q4kbG,3dnA;J;N@0!`?pp-7%1sZX`XZMp.)4"^s84A\SRSF!b9_3)De++p'1Mf:-PUCaR'3uuJ(>5:f;CoX?Ho$A=-[B;8>pu-'fqB'^Asm8a[LlXpSeRT)FLbqN%B3RY)[7p1.40iNDaYVc:U<,7<p=L.IrUM.:hY&0e-^$SJLb>5loBah^p0+7p[UV]@:aC=`)-oLi(>6,.5qUPJgPIJV8FfG5\r8Dh%Zb>QXau%H<,Kn/l+uA_rMNm$:@<;N]RUs*#A-#,^B3M0u71#Po8!gBJd\Tl&+Cu]Hm8?_*.:Yq#6LGt^LT;V?.A\eJ:X>i$apd&2%NFYVG*BK=!Q6[qPrNZl&B&[`3d5GjT_`Xp(/M!"/Ot%DrVTPa"b(Q241+B'ma9hM\o;&DQ#*E_f<7tTNo&.""n9pQ&^K!b]77P.W%>(8k?mk(AHA]Jbs9U8SE0P=QjGuA3X<[=.\<As>qR7D:JkRj=@Q/e68("^ff_NS/HW-=P*.andt9M29XhiDlE-++ct?6l-h<V=^;%H15$M\;%#:^K$$QkTf%XQ#/rJ-VpcAOE@G,.A_'3SOM1NH8\E2fnPf*BGoP"Q_I)aGM$#JC2.h1P:G=Ha?VkeZ9?_W8T`8<U1bCt%@1X+t1+3I_PlccmKtq;iN0B,Qd$"&'/>d&@5&=')*836Rct*"b"R[t^XU1mL#[CRe'1#eTg_W;<D=`jB02j-hE[Vh+Hi[5*%9d_P%m5WUIB`t.:=\<*jr2.SrN@=uf6RAEiE&QIG<\2We'81Z:"<'H0e+1\R9hhQ13`9_3Z,F/>;!4l)'R*e>=WSXm4,+6$$R$UMl_s%\%V0'B":r&sLnO^sr6ir5Is(@>DJXirpFt#1L0k$d#)pq<H$I(^>Et8+[j:/OXs'5l><t8oHi!8_C7EccD$6Op)U97(oV%o.!&\W%7%N6h\Q90"1n#J&$p&O9V]>eG!`l-fo#>E$A+5[b%j+AthjUaF0@dc$@K`IC7[d"'Yi/O8L@WZb7e6Xn)QB-VT%Ld[$>TdrC2Hm+%D%,#O+8(FKKoK0\c;a#AgKfj[%:b[OHP=s8S4>7d6+Ng%%T+MH%i?rc-l=\Ra_H\SAb7)gBFXFuZQ*8f>I8-qjX+WsO]KL.s0.h$)l%`1T+fE]i'2*.e@<=92`t;+.!Rr.<Oe%#*6`$J6NV_EL=pqhtROJu2.jags.S[OAr3_\"l*YOF9/Qif;LR8sT,MfA<QO;u+I*KcS<%GU+4eGUVWp9XnZ9VT6uVW2MIGaE2^)_8qH`1Bi:^QqWDAZRpg#)305<N)lRK7<P2d[J@?I9N.N]aeqsn;@kAkP[alE6(E$*:)Ktu%KW6ZNZ>;Z$2X-b:rF/V$D+U[j%4m:^(fl:R)mYVt>'cc@Q1gX+&LleU<@424LJ*MjA&Sh[)MZ>ra_5NYX3.`l^nXXY/Y=h!+[\kP%*R0oP^)8\2]RK(bl3i+_buaQucZ"9g!)H4,a:&+ZJgcS\'"j64\hY9p@-Y-EV@t<=!oK5/0)KKXW0H[Cf9UH^l+2hQni@t/l?QQ-%c@QqWQMd-5,3uR&cHja;-806+6S6bbOeV+VQ^pNm/_^]W>($PcPKK&sd"4s7M_q@u6k,a=WZW+d7'96O(Kl]%g3aQ9:*^KA&?dXc%=j]j-X<KF0=D%*F&lKY*c%\s-0uJu_n7nIBBPE=U(.hM1AV3BDX:g6@^^!$Q"o\ctan1BRQ;&l_Z]C'Nll$usR7t'VU[T1@*Y/E=%NG2S+\(4R-eFRqBere48HCV<tH6R(gH!3@?I=1m:b3"(l>r"`._FX>$XG/1c':*0U6Ie#SZ;t7CUOWJ],E-S=,8Af4+G`3WC\:&s%^>P-Z^'"R9-E>V:PU"hRktAP(;i2$!R>=c3:;bR3).o\-au!t^g3ppW0gQ[$l03JE=<F"Q!a_.ZU9)I8SsH/:EUG1M,Ee':i+WbE%o(2uIl\d(a.8Ln/I8#O@,0R:jU)aB,1ZC%l29;lX].tUA)2oC$)N6&d8g5_LM6s3rQ<>"YF'UI[!FT`(V6o65*@oD9]QdiUi[2!N%ZArqE-TWT<^7H-ua[<I+<Fn9g<Y\25cVmis:GE'AFEh[GP*202]MK]19NmRIJYgm2H$fpGDUh(>`tLQSX]8qt(!8(o2P."kR%@Vc%5^7F6e1c\I:jgM'p;;%4CUUH"Ek\D`o*W2F@>qWJ%Na0p9qAD$R;BLiT!.p?mA[f%5N#,T%jK].JriQ8g+-t3?-_,JFdWQk"K`_e%kD#H+'ZVD$gjs!FD\NJcIK7;+1a1I.".D8#KB<\FJci"V:`Mj8&<n<)W$iDbY[o*e!j:TND2H7'@kA!P[30f@bP3eC?"9lM[R&,f%jY7%+<<`Y&o<)K*XN7kE]H&[XM^FocdF>HW*)_J."jS"h)@X_p"H`afU6YqmTZrr,2C?edd_m%;&8Y$^8X>OqQC,5f7mdK3.0O3%%-:6ST8OurA4P1Ao9A(Z[F<^H+RXV1<934\Ko*euk!:h)HTcgM:,9bDU3&F'XKrKR%*L<iD<)5o=+H@[)*Z?7sMWKVE:'^tJY^$1E%D@U[00X=:uQ'H<5gE;E0T!(bZ@MHd)+fl]c,9\].T>]_nd<8X'>#7?o-+l3tfQ_(gTj'E<>[8JJYgeU3$Q'iq&@'(rC."Z5,K+#e%O::_9*!/9R1D`$%WL'pNQm>),L\2o$Agg%P$&JuN.+Xu?<"#^-ZBQ8e^sk5**45rbR1ndo((ekh;KkKFGfXHqJ/k_G[QdOii=/ik%#>_Cd-%u"fU(@D<Xf+P.Ni4.N'Lusj3'J9L@G=+0%2)k^)AX1s3QqNP?lQUQ/>MQ_OAeR5*gK'+LmR(^.b[D8L>bWpR;kn%,2:"]%&n[InhZrC;?pXlSg7Ess$aNj6PT#Ose29E022[)W@$i2iK?R):K7opk69na7.)Q[K6=RO-'](qA1)s2'VD-?J9>M*s@?M2L*n4+B%O)YS^afsgm#tVIsH6ltQBK2mWn^4:d#s'3fU,#[X>rHF$"#f@/?^YaDrbqV6&F)*b#_uC,!"'X7+)7W7-]U_`9N=m(5[sF`r)/ni%qI8gu8@9R%V$_Kf6sZRgC0ij7ibZq.*RsgMe3Oa1K?3FPR!?_1#IRF`j$j3TFRleNkI!H"E6=u`m5V,Y<'L!O!lF8]UfJQp2;@.\%#bLZ'!g^_I6GM"XE!/W5JLc[XU;#r,lD_p<lDZ@Qijei!X/e2dM(5IfFWiGl3X2a;C)A3AWhSbq0P)bEXfX2_;=Kq#-W`;Qfne;.%W]EVFWj!1pW`h<\X#@G?#d%'/Z6[AGQ&q;*TsmW69L73*E.A\J<sZ=IC&:d#;t$L<CT3!P"]uKiLn_,d3"!ieTMPe_Pnd$uUpMTf%"-tcTL)cXYBOs?0Zt`SE`72,Y*JuA=U>nST[%s%>K_VebdS3#@TFscYa)MB@+"O%(E",\rU.fpF>nrPqUQg&*W9$FJ>/CM3<49;O%`iH.f5)H/7e5"IkR?2Hs*9dgG'iIngX.-,d!4^F(XhO"TVG1eu6dD945.Edj`D+"RBkasa25+.,#c#PDQH^.8;qS?D>&G>.-r",[%jXR*ubpjR=<ne108lXKJ,3l,NPh5T=)+@!C?hlhRP8Lf5Z7_:E-VSoW`KHs7";T`XMb2ijcC'@T"QE#8AQ`ZgA3sH6O('@3Q7^Z0%F\uL_#"f`&)4=MB9?:QL!T=]=L/0Y<h-nF:9QCdl.2q#6;-6?-DW=)MBDJgA[<,]OKbKLb\qt-$5)c<+Ko&J?q(:?$agt$3S3C+u%B+n(`_E'0X-5Rq5n5IfcdWLtdI%Ie5`3_#_8(..%5Di*2FL$)cNA;e"^??[\`Y,SE69ob`>i61mJ"EEuFcdBP?OjWb`KRU3NbYe&%G7r#6nlHAbhm2p%0UD?BL6>ITZBNIHSsH1"%e-l"XYR3s]A/XpPFcjsZ5m#!?jZC2cjT?T<P?*uDgltSRpQT1g+qDlN/V$E=['U9%i-?NgjWg2eF>:bn]?M(8)!cCb'oF*Tp3<XP]'?#C&l#Hh't#'E*CR5^P/1^(;[nF\jNNDEWD(>X-Q+(AYi##Kg%MfnaY>>1=hL1B%a:o:D=PAhsC6dHU(qY_B#qamIaVU+Sin9>o2Dtq*D>@bF^;\jheR^)sHeC,0Y[ob]BY`&f&0:,YW(ca_OeX\Aa-(7>!5pb*8?;SF%)iA`D\&IdrpXsqlR\:D>@-,>4MmP*X=X'h[CY>Z%EN`<PY*D2KipPDr=],`=X!XilVG'i>9?X=t>?0gd-E]I">2IQ:Nk2fG]m(kg%R(cVOp@PAn(TFDi\Y#.sU8?W!:hAqDaGt_)9Kp%n)Uf2'RK=T]o<`ZGbm8i:.8qbcQrjL7(J2g\]<W^d;72\I::2[!`uW1+%H.f?%Ke/fpd\Yo<&@-^SZZW09Ktn$p$bci(#ZPsqef+c=\^haIk_R_]+nXc^g@ECtG,28]XfF2ZO)IYU&l8$K[k%f7^k])Ei=5l>Ti;]n%RESZt5RuJ6Z79h>.hEM%@&[_Qp]CdPADS&Kj[;C?Aig7),OS-:#U_pp91LrSK&"KH#\=U)$_rYKn"oAfBkaM`#\Q]l%sLh2oC&#/%m[b=(=%HI@Jead6iBm+J$a1g.*u\fXV.NEcZ7.]".ig];\@#I,=t*B?":]?p/EXu^]-9Q3XRI:=V9>_q8%s*3KHnLM8$u6L63BqA%Huu0DGa]ik$FY>n**HFkVEd&uapD"C'M`Cph#qc%-GpCO3pE!&Qmts9;L7GrlAHug.>8G)Y\`b"b&hc),Z#Bp0#K@ZVJoAn4Mqh,%?o/L76BtG.WJQ0$ic'YTo%t7bdL%So0oUiN?9Mh9o(>I`LNs;D75U7]KPa@pHm\88PEI.1\SWHl*b/$DE"eLgT-p.#d4E7b@9'94%Ao-f5L7\k^=L=L:Qb7H-YuePaAk>1eoNU05o=ubSPGDNu/dLn"4Jh>L\RDtu1*IZ>R(1$66DW/<=a>"$/^dr:WD,Z(]IqO9a=BO0%"1c(fdo8Rt\-I[X3jRe#WFOjqYD,>0KUX5_8dr6,Ut(S?SoB\J!j9f.Letn;1OWg@V1]j=S?/G:`(d>4A[A"F'tCs%'=5eY;IMFR%al6Gu&?/1*PZF!G79u5/C--g2P^$u%TTaM]Df$)L_?J^c2KpOqKO`am<E7AplL>:Y>-ojbRj$IO-WpHS0XXU=b[iQ%DHWHe^05Xc%1%f>l!Rn9$+Wp5rTTu`L;MquHCf\CDUBit<K"s1;#deDf/qn7>mMgnJ<([MLAX:A"=PPT6cSK]dHX-V^?(N]ao@;m4N96r\qrNX0%'R(eTHl9UG!mc`Hn>n#>/XnIs[b#',kBT6%*9.[0aq,@9=s_KmPrq^?,VfeB`=+&#g:kc)4I7]=J;KV=-9k8&<n312Fg\5)P8g+3%`o>+U&_RXi#jG71E[*Z'-XB:_kRJlf,uZBOnG!<P;PkJU/\qPX$sh$*Z`1IE]j`El&2P@2aQOVI.PhqE1lIh?Gm,C&82MYMl,HSP%n5NSg?OX0J(3'F+!\NpD*)OU&-FtF$AW/S],M#]!TKplU&@RP9i`WOP"99qAc3T4E!(YHpU2#5_^"Xn.Z*:m&8]VMK<<I9]@COe.%PHYHH,qm%7<Lb%Pmk$fOT*Q'p[R;,B_B-6R;<#C/(hlJ?a:!gs7=\?U3L9(Vd6K-eSVf^_=S.FS"%gf@3<Op1%A/AiZ;U%nKGpXY%-?tVq/\RA`a.si\W[D6%1R(-=-B+g\[O33JK'JUPV0XaJFcDGOD+j=JR-T8b:)+2.BFG9E2:UI(71.V'8eFX(AN6JXQ3$,cV+Om1%9G/Q'_g2sX_(YpA,qsUf]KH:p(0%JJ.5`#pWG?l]DHl']!(9bIRlK0\0Mk=\'<o#f>C3FcdXGMW6dXpcDJW1m$0.Be`/sX;%)jXD%a7eTfG2hlq8@>+:,tl@O92&XOUJZZ0b5M%`;-#Ao$HWG6l=ZM%4Y%]e1Ysa'G=5:Xn7.7g^f&\c9H6KX8"Nc7RQAls:T@A26e"!%%.To?&1)u-Ihq\Vdp*<gF4l6[u^."HMQ]\m!mlV$!f1U[@'Z21>C:@n2^*aXBZ#<WhC3Q^ba\lk1!`R_GWam%bY(%kr;p^_[pgkRt%?BOU;j:$ha2(Vq)E%#8].N.E;6_Po:`,KB$>L\cHi)"lQhZFEl:qP?6@HhMmon5W<^2b4`n^&+Ye=@%=;tD8&\.kZ,_Iem:\q;WT%95q@.]I@;?+\ESW3/gBi=@Y]f9;05>S.8O\_C\XXKU5NK(H>maWG4^JS,N0X#gM$:c4b;VWE^f)BnUf(YUKt)=k7,`Yu[1lA8Rnk%lZ6Xh'TOV)D=R(NE.s,9hmr;.ZWKf:NRY>P:ni+J5h&if9R4("^rLS-/!0L)!of!s8-'Gl8BS9W^ia,rK7InLZ@KlDHES%h%2f).%I:FQjV)dk05(.B;C<i,X.tk!u-VOSD;p4<lZ^<PsNt#0%A(&crfLIBDjt,gQh,p`"!DYIYe<[T!QEL4%QX.&l_%8*#QH:-`p`18G%>+l_qBT&[fY%7te>4eBOaf=e2i'd0>hh;[p8'\MQD<M&\`(C:<G%C(tXbTT-UsaheCg2j*8&/20+Q,hJ5gSR_eBerl\/.a[n"Ht`%Z=XrUajak'/dDO5F]>/#?V<mfK$Br:/r];/;L`84/'`9*GnrR`]W.J3?<bV8Wimk9J!"o3imNSULo\BJK0,,rWfe)H#:[h48Qf'>%jpJ>_/"W((==D+bV@[O2]XAEO%BHGZ[6d_hA;"Defjk?n%s`_[lEDSACbMC%-T6o_2WUcS*1i6lAJS3o/\V?=AS[nYYpn[q/&EK_%8dTD^Q851AT<Uh<5-LrkPn)'.ju7U;Ti-$)')R_-8#%M9daM-33KJRX\0HsS2`a_Q_SsPL'@W\#"<"hkiHmlW=\^/7iKhF1aI?;#%Ig7Qkf#e5[FBe-PGo:=1l+0P-S1gA?PF,D4K1NSU]?1F0&g:3u/_8/<bf$k>+2LH!#g+RU[XB`5(MTBSQ4Cg.Zmm067lMrMnX+pI%"d'E[/MUGQj!pX$jWjQ!"_-[>4>AZ]U<XCg'cC<JU'XiD=,F?uO+^.UO&6Td<['*s2,P\o8uqMh,i*((I[bb7S-Rm:4PMO#d!Q,9%!Dt.)#%Il?G#Cl'(P5BI&.B>EPlm0#-P2eFB[5"`FgZ`p;Z0lD0h;!9QUp1;71P:K,p6qCG,JcIY6-Kr-tgVQ9H]j[n)+F09ialG%9gG(o`c4_T'^hh(+pDpS/HmoQ+MBj*Ka(b@2C9R!R-9\aV7J64FUbKW=<G?-;`'PaqXfWn(YNR1W[eYIBb$:H8;*tBh(@P+GUr\(%XM?5Jn.2^SZ=i)sD")L8+l-a$O98_0Kjg`\2<ss]aUbZ\9T`Hf5SRk'bQpd16oY"i#jBi"J5#/MW6"mH5IP8nD'VDbVuY?LIU*7#%6rY$FCkGhPe&FK>ZAXWm/\qd&W"J<!VB,62I:-kbfqerhd9R%i6_ZU]jHi6kVb1:RF72())o)HCct&.NBGH+kFuaYlG,#MJ++!%#%@VhInft[s4OAH1E!2tPe`u%`"5U\p%palQci]?l)1M6'oQ3^b2BAE4jef1&l[46VcJ;tDWQDrTOEcfN6D6[/#@=o<tMGhII$X=,D%F6=DnoC"Cr/F:1*B"fZ7IWg?u:UVh:s$cN%!5Lp<.oZMud=GlmQ!ccbLH6RYnAFnGE<\2na/LU#[gou@\JACkMJn4*\u\[.?YV;>%!MF]r:%#C1b(N$aJri!&_Yuo,9n8.VhllSj^.1=&DtgLIDVu6E!.&EA3^A]rK$^`4=I(E=oA]P2:G'CpjaK<=D/<;eh!.Fp6]V_0%K+@irr^3k+>pHX#FY+R.[[n:#Og#8VV@]-e`=iQokXun1^ul(O&Ia]?O-g**XT1$`?crZAiOZ1H5QZ0L:gO5A2NH2j>%XekWAZ^9%lH"F1190Ypm6oBsR2?(IN0d5HaX.j.T^OuM&?H6kP`HU3^nI%bd>8hfQNbb\5dc.4@&BoS4:M$@/`nA?!upj%EYoq<E"F$&(Bm)D%."0h]mIupg4]+m4g)g3b;a6dJBZTaM7ffUn]_W-&CI]@t6,/!20ZrOo!E/u+2],?kPr+TeKcu^9\-"LB3YhcJ;\2q3:aM;RR9%>7%/ZfH*<>`$KAJ+/,LuYe9!]b-1,L'ZjfEhsogV[j][\M8-R@JS]+s(j\p%X'1"!7JE;oihVBJ*TF[M[*[BY'bME2*EV%2==B!EM9[%7KO"EF>X&%k)D&m$-oD<T<us2YYdM_%EYFOC;9,,!"^4/,.C$A`b-e0qp'o/KU2\Wh,&@WgWV7=5#NtK*96\\qf=r\$H$Ln2Ogl<%-id45Z.ROJ@&Tg=Ylm611`ruJbgDAsctM)@hd\gX"(7<V]%S#FUJ3Z9('X28++"$h,XI/pBgm"3@4u'4J]F;F/E1*b\\Q#u?$$F]%fldW@T6Yst2O&dKi6fpb!1F,<`Loe*#!M=/UB74]n<a2spP=77bbMQ^.Y3?7&2-Em?r39,ifqWoIC<shW<)c3[2c:W>'5\b\jT9b%FPn(MG8pa@2mb/[oF9r=B6k'R0&qa-^j9YRH'Dlj8f8\f')Fl>'`](0V]ZU__r2''--r>@U-sOfjYmV]5idMi*uq(iTFI&Jm%#c'%=RDuL'PLq'FV$Q+Z]D!)@KKN\a=3IflE["5lk[;MNXDBd@<$%nGk%nTT);-p'U*MGA%K0henI9)*f<n^lYG&9gWO<;;o,3pPlU`,%OH!%Hf.(oj6m+&K]t?7-S`4teX`;rFIVHO%Jem2QUmF0Ah02seN+]EE$_BOF4Go:&m(J@df:/=+o0n#N5Ra*.hgr-CgH%`+9\0^r%:nU8a'Zg\>:gF0STSXVjY#S-qabogZ1+0?P[HT^uFQc'm&qi30aAmmYNkT%i"!h.XjS2FYb:tS$O9]lG%>WP%ImboNirtW8["jie%$/bkF0EP6D7)'sbG>X1S!]d]"i$BN_a>&\_H=M[HX+1^3KVn%<"GeceM4B-EG2#Ct3I2jD:FV1-66aJI*esu=UI=P/gmIHZOX+t[%L;XW+qPk`3jSWbL+%VR9%:=ZW+pZC^=AX?1M;1?h1<QODU,.XrAf-.JJW(>oZ@G>\RVoBGSZ:L=Vb?(d?!W#O@?\Dq'"R$OOH@P#%PXSHWj:XJm*Rg2d9"63@KL$kP!+:c(EWcBE/Y;(iQ#Mrg13Emgo26,jM4DGjE3)YWa(9HgOB.#oKE.(cW#1ZtE02-XSRiZQaVb`?%#F7_$\a)%a-Dk8Z@2ekMMO,f0dRCK7b5k0G$MpFIX"krn\OC[7ld3k$\0%P0NcT!qGJ8_mc=UE&%8U';Q]+StIo'Z%#&7(u5.Qt/%&/&$i7#@EZ3UD?Sl6&^BL1;\58_@RE;.X-8;5.)n,_3?lPrK'3#@KuSL%eNR_uV-MoA59YZG22!N_@ukWnkSB7<=u6h]Zcd!oY-r%;DQ;1:Wjq-EsY[+\LPKCF0`@8f1?*l[OJSM3i#$F(Cg431l:?77(Tc;bn4@CTdS7CFqd2ujq:'k\&CN2i#+e>F[5/RL9<cbdlW7s%:6ZB8+c5>^VuTFHf?97hXoM-P-`e`*9$s/t7M:<I3I]nF:82TN9Jj4YRZ$<'W"hVGgh([kr&tLGZ(1BSNoau\3VC<!BYrHi^CIIN%].ek&'=7?e&jS9H!J"JN[M>cP0U]0e!KeIp"Q1=fPDJRs!%?N*013$*!OtZjZ8nW?)i`&'[bum,2CI(/r/>0-cVXZgRnJj)c,jZA%Bemfm(bLfE7]KDlq>6icL#c7TfgM]bhpqdPAEfRa$3^5J30.+[.GGob@jISnd08JK<AGkk'/9mINZdTAV@WJ&K+l\D">K)q#p$,V%Qd-19Ldsp*kJV9IZBp[N9>ZY*Kk;s.'*-?&$-f!i&jU0XWXK]WEKDO@5mR1YX\%\D_9iQjSok:/?apkbfG];7%Ze%L_^05i@+3`U%0R2CQ8iXlUKZ3PYE6a+=ln&S-ZiV5_Kl[s2"A"Y;r^ib8Z<6LkPUp^AZX/T76'BR9-VgW@eJ1U\@<GRIJc9`M3BD4@6&+="8a,ep%;qS2OpOmWj:%#$5?Xq+6FeB\I#-(<-?@3]*s/O8"#p?A04ioZ/9VTqjUbC[W&Gd*7[716XYRf-,`W_o.Ue/c7_2.mpGTj&lm!pMb%0LfS3+q8ZS`!Fa79HU(N:RH]L-:&>uBS@A?@t]rXMSOpg%RMfZiXL#>`2.t(@lGPHq>1BG4V,Vq!`4+=!+ZcMWbW_P/uX]Bjg0/G%QlR8FH\=rji:+UG<reC./X(R.3!b@">(.1$`7lZi&4e;Q,'u[TU$4s+L_jQUYDnID'TJX>09?/t44Wa6a)->f'adi@&P:6*#(`3d%g-,Tci1olU&6Ud23X/;7#EUe*=aC[qk(g*o6ipIP:dp#((qq,4i*9BMedMeFr(#=f<CZ:<6P:>6[;1GaL+5b6^5ZM;Sh://k6WgQ%!!)3Okb?s#h$W6iQZ#pF+J+6njMqSGR17OFjcLig*?:`kJWGhIo&,TsWi(l?LDNjS=<*Cg8'LuM4YsTr%ZVi`Zi[hUKLGH^7L<4>%<WVuGW"K?opWlMgrRe!hgf?PEPi0.h-=85:#anA?mg@K"UCS%1QK3;_ap`5IE'USn.KFI0k_H?,-pJqh+tP>aNa8+aUCX]kH&T5b%U!*9FBXT(+8I4iUU2,I_h2<V%;sKRAD2oF&jhM/04U(c:ZM@WY4`9OBWCrc;TsX"r-tJYf!e:q$fNtKW@,gZ!!*'=A_Lu9")&/3l%OKmu!3Eb%LAI=PP?qX6=-7T\)8HXK\R)Fe+!%QreQ#A/a.KKa%H\SRh.)3%5e-)jE[Qd@8142Q)'u4D<.9-@.-3Z/mg*6U97e#[T%RO2/JB.q%N(8d6#nnOg4'Fk1b$q]BOMo=]ApptGKFX1u-`[g,6":U6Ta=.FKrCI&[#3$%o5T&*(1hWJ3W!me]<7aCFfmV[+QO&`h%8Hp<R(8#`EF8hnb?q0@/=Tb&`]h;T_fQ\%E=>AO\/C[i4T?K;D&$%OCk.%H;JClIZU"d?,=KLQ!:)4D&/IXJlaL&u`VP'L00E\!b%1n"X7)T_"6Ict3L;qbWg,j[9k!m%ZXTOCHEl5Bpmi/>5\NCt&;!shNHjK/l$;#lQ.GI/"$F'THIS,f8BL$mY%!9Y1pMJ.ek!"P.)%_8hP^Wh=Qt?W!hCM1rftj7S0/nB%YQ00&A$AI-/Q*qREO+H%*]K^$HrD0D_/Gt%k"+\7mW7NR7P!dIA\&;1].\>D"aYo3)>L0.WI%JRf)?=[Z]/`NB5A]>pjSJacW`QDIf:/<UrgBa(fhY8&jH'hACj'hFVK<ZhO,&2)HtOP6)\6s5([HeTr9.k?]MCs#RT+9^&E$7h2@%-nCA^#n%7q1+KLh+CH!q3[bC<AHef,NAD`Z5SB`k5^F:dMuk[`&.oGneZ;$c1hTm#"[[a!Ukr<,A6N,e<"X!O@KUYI'o8;EI7@@j%#R&1P>(Ijt92n6.1?dq53.T1f3e3shZq@QrSA<aY5ZZZbKR8LhDV7/R:f\^P$sA-pj5I\NYQ>D?S)dpb"es"&G`u/NgfJSD,HO-C%TWCBk,cj7e`<u`Y"gZ4+_9oAMoEM#J.4^L6;*;!uCB2]^%9L"?=nmpq;E4ori%/)8JWM#D%k\5?&.p\L=&pFZU_G4-O9?s^O=J/M%5kHoDRSI`(_PZ^N8:[oG&Vt%d>Cd(<$KFhD."JT)WA<8IK7c"^(k<!!$KNsN>97t;HLU>hR"6MJR=S<TDW="_I`5Ke*>++,5Sgsa%&nW86*0O"2_@.[jap]O]MWU%fO'V+HMq)]CWLJGm1k[C^ap]O]ap]OA#%\"e5l\S:8/(qYpI8a*_YXLA.fB4P71YP1#V)]0^&jAQ%[JkZ4qjUi-G+;\D*C7qYO._U2:Gk98GC4B2!s`]q2qQfq\FXo6"=Z+XZVGe`B7E+D7_L=\1*<><8g5,uT8Pr%k<lu5JX[f5^5U5p%?kjR$O>NoX9YbER$cGg<A((*krhbOMO[F,W5^L4AHZXt2V$sE0L(GFiGp:*b>G-,5039B`;;-]t2?8.:T/#E[/1QSHM"l^pb@2YX%?aq[.rL0'5"\D][3>f>9=m$F_i@U?$D:Hq<lu-3^\03h`E5=U.2b+Q@KYh-29dPr$:`J,$O/eI/;]C)ed,SU,@t)-UB'd$(c"PCp%lSLYE(+Drhl)Clsh!<<YmlH^krSCM]]'I0O(*hr\FJ)2Y$fJQsXO:Dc4brBAW<kOU2d`le/BgjBLCqY-:"0'2=<(0VT)`[I6N0CY%T[T&&KkLRZn[>OdoS-[2P%gW<L,<-&j;]fa2_O]Ng&ca6i0&W^4TRFE?WUu@j;Z,miLYusFBr?\DDRR8QF[EhZ.<aq+R](h8&\Ge%pU$?Sb#QXXp2'8g8Uc_S_P+nHE?Y0B%jpN'(3kN4(-r`%rgKV*8p?pI=ZV>+"L19SIWX60mf:"85K@))D*WO-3qKg+JA9$X%!nf0%*dic0b@`*[QOMd]h0S*u:4MdL3L8R[o_&$J^R=B4rjU<Rk)SH@UpL*3V(V.b[+*>^2F&*--p0[$\GG%5c9!0A:"CHV2A"3K@L%!b%?.o<nXFj$mG<d)+?kW&0#2i]T+LVC#<`_fXJ@*kO]E,UGmVIE\eZEl#2`K:+#"VB-BClc"g*ea85[*GB9cG4qG)k2T=5%K#!WJU^%YE(,Zg$-Mt)^+Kh&GZE*!J6NN2o'-M\'F\;$epQpn,.$lhtd09'aN.;GQ+t?O#NuMe'<14OM:>65W@,ok+@f[4rWWmX`0(#3nlkb%;DduMgA.%Q+hmOO?oq]qkA(.)SM'utq.Q@h/an'DcbV(!4!3j2HcAPLSt%Rl5*tHuT<urC>oMOKB_SCOrJ-.-bghYi'V#aSp]%\X%EG!R=ff"&5!NXKice4ihF.M8.oh;%Rkg,iZKYRLFggoICBn!D)$H6T$k'f*M@M&KM$mBRt)HZ\7DBsT`^DV;maOW_9EBm/'"R.k_%c0bTZBuEoYr,;1q_)uDPG=#\ZXN,%0W"M?XlejV;[Gq7+Re>/s:,=Zi*MV$L8o<c9X78R>1omT3oU46q]4WM>q';RVHufHam/T$s%?_:8F4D'l'C1Z,"KA\;+[N>0@!MJV9Sh,o*!Tl)Z9nootcV"aU^E\f-+@ts7nsJ*$_."7r@mG:_U5a@4n!NA.pmE5F0;id(#Fo5+%J-Jt$T5Ed/`fqZc<*:t.%B`U=[]Z3_@Do-``%Pr]'jX#K0cU79NoAFka)G6@4kT@G$mR;)LI,SMMBBb"c(#t=o8Gj2%D]\,cJ_8B%<(r4B_l2"tVn@*,f1N`&3eoH:Znf/;%)C>mFUmC5`(>>!5Do9&WB1NL@]YLN5[<P)IdUI6c,A"fmd^YYR&7(5RJV7JT*5k*nU^Tp%k+Z"\G_F"`*MsDY;gdr\-_@%5o]-UR)WoSmIQb&[;%!@)*]oBmUscqL[X_dj]^KLGc^B_Y@PnWLs#ZdmL7A>`.;&Ef*](kLZHt-L%;=VO<4e_!S^sgoHC')]T"SD&-7;':77JU9g8B/^g2.&kZ[O%<4GTu$$G.72KeXB7o1I;'0T?%+MnF)c=.W1O=5OdV2Z#c>I%0R'B%qJp0W=;'Pla[#$dDpGEdKJRCoa0aIccE-fq4BDanB@^b#h.C;c,BRN@hU_]b2\fXS`ljc-.SL[h-"kf-#\KUpbJKk\Fbo8)g,4EM%AKBtr6+CCjjN@TK[G6.4!LPP+!9)*^OSc<bJEI7OG4n;cb9CtQj1_VM61\[,GPOA[]8P(,"k_ITIEqTAQ\@qTY5_)?OQPj-U[]n[%L.[;E0l`]m#[^W>0gA[NjT,!IiQD:%]%Uu=KkWs1CW9^:+M:k)-@GqE73CFZp%b$/SMaN1ZXn=rUZuV6a.G4ms7^SZgrH%0JFI2?%)tR\CB^gni4aT$V"^:J0@>0'lRea8i6)AUG(B/2*n[gmK!9)3aON.uSSekAP!u0Gd,Miu.>o'4AG8B;O,^7f?_OZtHd%(o%gf`Dr%>'=QKVm#1,6Kc@p[C\Ndr#P<^dDY#Rog/.0=>ufh/]jJN#j6r_)nl<T.gNpGQ.m:ObiI%.&%DL`#h9O<\s#&\d%_td`t80[mWlHJ%#7,6KDF8=Xf,]fem`bg[C<`8\r]#AC]ieHLPmY!GZORQ'X96!l$ZA<>N'"B82\i=u2gcn0J`](DWR4ODZ/#H1kP3l>->+*IM:))!%9G*[Th@MccUX!Lb(3d'5LGK=T:$/-2ZORPlXCq]K(3ef4I!tG,_G;uI/clLhEIc<%7DPF]fC%hjE+PRUk+ruP4tFa=2-@\X\I\kS%73Xm(NoW^R4]s!1iQ6s8E)XTcLuH$OqYN:&qfP#(KSFME\gM:CkJ-A+**N8b`#:ZLgE-dA5&94h5Q(B5,0>J:^*sjucK2cS-a,hn%!Vp$[4!"goIq#W*QI4U)PI9pfIj]:>G(l4iJg?/0X!fXHF(^#_d3/Lt]`(qY`N)WPq>(m;s&G<XMt%rjF>N'TRa2$fcN,h1aEIV5%DP'@,PX7\E!Y0DbXMPC<5n4/'!aa[tIg3R2*M%cMQ]Yh[<(.K\J;9_/H@h)_7qORW.6C:'RQ,W'*_i+,^WZ=SU`Sg15(L:KI__^/%Mg!][0J(:=90VdGE"ROV8,s,B@4EhY4Wl<9MZ61q,l#L?U$incV:Yt<Et#3;Q5LO<.rq^$l`O?R%PVT*Sk02=`>/8Wo._BN4O6,W%V*>^t7.>CD!AX.KHiDn/$(%49-s5.?KO'g/?G$8]L-W1t5VuG[jBmF<71++7Cl@W?L9&1?%I3ER6_-dV/N"uK\\[5+_L:BG:p>>O%eg-R-+N_(rn6G$>L?HmQ2?>B*>7RlZ@EB$CQa_Zj+%SEn4"_j$^G)q=NqiM)@,\O9C=532LBXQoWUAQ$=#Mb"i>D^8UDM+7#m#eo%c^_a3<=u@Z0)hj@73hNs(>0BZR@iGb0'r9/r@EJnBLYL2mp04XC.jY(_"5jcGRamVFaHFelO!H:0j[>geZ;O>lqpKF<jko87c2=p%NL)aDNUiV1!A*%Co+0Z_*8tiK#o>=<+@-g#'G^nJ5l!jpe"+jFL\RL!<nt$X$j)6g3WQH!Mslh`#f)>`bc)St4\;-ed+DR?47-sJ%M"1N$1=$hR*\$sR>AZ"&L@@dX<sO*X!A%A]3-GL#mZ2%VmGS(Z>HKG2ZN>@mJph,VW*Zc4*/T2niPNP[=1B?"#jad_+2GIAOdoFp%pO[StWB'):i&ZE([?<iSqKk#nD?8"ZBe6h@]d_WP$r42qN!$j.bo"?K@-^r4Y-tT!OW5"U3\_9"/F7:mg0.U5'HD>+`R5kR7Hp-1%(U>rcEhM`E6Fl$#^jUnu5neStJF5h(J0lMI;-JG&2T:&P]NVK=OEK>fmSfUkpeI>C>ccbUdfEE[1\hmdIqkn]s8ED8k^+eZ\I=df%_Z$MCd<6C[So0,*oIFG'A0QA49k(,s$o-ak:e+Gli.,2E"TDob*5FqnS/)0#W5AsDp[:@E5(\FFjo?2'm+W)o%LY.m&-jU29>H*2%ZNC#.?o;CWJcjg.?6[<5KG0RNeqFsf:e1GS7Nn3'+JM+&oK,U,U;5>Q$.L?2rT]r-H(NWr&HL+LS'_cPJh*/(fImh7H*hTY0&MMi%Fct1h8n4,0;/ckP2,^+m3ucCE/B<LiY3)E-U6>fN85l"]Z$On21+^0R1sI&-JBH>CUM#(R_)i+cDn[@p,b>qOouo2g_#`JAkr@!j%_*H]2gfg>AA!]#in2L&`P3Gh@qq854G+gt%?>>g`qZ.OcK-[?a!RD<Oci=VuM]3l)lrAf5"7SupXBW&G:t-FkJr=%9]5#.ee1Bd1%'?M#\,AT4?q`6qekSX@;$0!P#=l@Vu9A)Gumhk.7J6R6dVb[u7\-$CU(7&QIA#!L)4>JT.[YR`6;lOjl30$h\*qsVs(:nsKSV:u>%5R/J?1RoeYh2_Se9)ZiIF5>d3HOS"eP>2+3k`SLAG!TrHFXt$63@n;%+TUa*7?uT=h0lY%2;=b<3E2Yd!92+KL'k?O0Pq][j#)h@%=kQLROoW:=_m]FBmCoQes4j.ETm\!j#F64ff\fcrcbEj)_9n'4*+[cU%<7a*!\158*<;O3-##?mn<H$Jq+ok)W2bh0b;cjj7Z8QN%$mY;YBEi5V4Q*?i$S_8g*?NO4q.;,.k?P87nqgQNe??LG^Di#Xp30DqU4lPt'W+8:V>u]'9'\K'bW`uS8Q,UfMpW0DRt[m.E;;5U%s$^Z>XCV)r;SsJ8.b8Ng64j_0],t_fY(a\_NVhp:_^6/h?:bTY$hiT20/[R_Pi#Q@@1FQB.bY"jc:eH9:":Vag[*RqL;@hclb9E.%rc_8Xn;P6KNuBo"QhSX;fJI>tCKV&]ffT2QC=E^;&]=dFJrT))E&eVu3\a(IJY\,_FL3.b(SHs3?lD*cBh/m\LbLTo.Q3d84h)sG%/+B?=b#L0`%iL^R?8C@u+O&p`mILA7b&qb^0mIdXdGUJGgi<HD:$dFCPC=cOli@sfE\oKUP#@S!)usb*s#kY?AYe_LNuj%j<spm%%DR.NM(']sVi^f,^5V"df?k9J(<D5Z^3S,0Q(jmd:QQ7[%JY\!j2QhbE5TD@lSs\CGH2Xqn_VbOsk:(+RN9-1281cCk/M.A^O'_7U%L1-Vr'l]+ljaIYh^6G$UE1dm1%Qt4HY;QGX>S2$"BjqPm<GZ!a^jK*9Lta27n#0]W$SD`eZd<&iZju$T:'t[UhrqWgp*"ZUO"TQ[%d`#*'l!g=,kT*R?n@(aH5,R81;oLFKLa&RaGR[Yo^r\D>d<>EZLaga@2iU.s@c.B4JA]Eu/_VUSr/HB0O4='!f<\;/Dg6nWDs/!^%Sl`Xi[:E<c[T2B%5^=sCBS;6Op)+EV2?&=RXks)2fCeRr(G)g"H3fKKJ7QAXI@7+\_lXZ]`L`&']C%.(AsB"\"9:$3&('WY!ISki%GD7lg]XA\c1<oP\)kT2WQKe5bC(ceLrc2#?&URTj'qV/?r@G^;CYbP_"fpt7T9e[C%FD19NjuHjoH;Fg*+6D6!UuGC>TgN'+h[#;%VO`gZ6ifF5TUF3!CKVQql8[+MXHIpf)"R"TWcBnjIREQ[!1k1+:Ic?D,reZiR>aX0J-GXXB[Hk./?9n/ndbU2DTV6bGKZ(cg&-ZL%X?;Dj1BJKMKVH6U;.o-<_Qoq\+",+ZD&qV>MF&B6APj&A1F[SMD1IN^7ZD%\/PB0PL4TS;FQ&hkXR/YPO'of+[fh5GU>e&*^c"R2%@#4(,qOIuFkGi!C@m]\:(>bZXXE]^aM]P0V1j^%>8'MrOpfo?fC/<%*/I-h$(;I$i<1rSU][k$PG?5^,8lKbJs-nr3;*S-hkY>Bl%^EHeYn(<2*.BfZZ2H1a`Y"NoAiE`kJ+sI_MO0\B7j?<@s][oqY0M!cRml)A)G3ITc:n#sfgm>MQk>tKP"I04bY:_\?]#:euNV"=H%UYS0,*.&<R5<M8WATOf3d'*g12Y)#9f=(P4]HYEW"aV6R8;]I\*En-[iKNTDU(Lc<D+HG&6>9@^o&D]N!:#q3f:n88hZC<31CC]R%EhNPmb.a.eZ_1ddXiMS6FiPB`J8U.t\K$2>IR3o68"NT-d+=Sp[ta-J_kLGh(HO2'H3"[ODYbQe_+O\,.VS40EQN`j>)##6oeu1O%j\-Hu%Ur_"d;RtJPr/]UjpbD'E[se4bj64%ZTimiLjs05'j3=0#.(<#!<R!%5WVhnq=En=*4Z?8@'hg35k*mBNK!]MfBF]mU1i-=%WPMs/MA$qWWm/D7%cJ(R)[d<Nptp8Hkdc9E8XE$FgS.CPZK6Zg3'['p2*fsqBGP]?Rh[/ZU(+WX"@t60q95@iW#l23]_&I@0e/-C%qo/q`+[&Ug!CR,9A,g+IVYg^"BbUD_fk_K=kq1\FK=B,]?2uXFaj,N)ge8M+0A_TT_HLIKFZ>0hh,t:A%e;*^^W9Zt4m_$]?po.3%VTV<.i++'<dO^n/k'];+='?lsVWpr,If?8,^Pu6F75;>FG]<@lM/Dk^W7&IG^hh8uoLp0T^@H1#qA@eTClM4d\KgRt;hofQk^V/Q%_XhOe@k]NlA*N-'oaH6rBZfQ-mS!V]MZ?Qj1?*h%)7u_'hmB.c#!pn5&YYYFT.2ON#69[J:>>pd-2%B$VYP$\=UZ0/iW*+"6P3)M%Ag&@Kn)-Y'r;CHt8qh?u*8h""*tZURg!thh-Z&*s#k760T/#CG8A.9IL[m$TkOY8PlLusQXh#?W_LONKJ=0%r*a5YbEdK97BIdKJ%3qE50F8qoAliqofR;sfYpoEBR_+_b:p]/V@3ViQ[p6gHoSh8Mt5gO;YFW3`7N2`,Ha-`rqRAK1-e^adLMhZ1!Rttjq%:Q`Kblb3i%%e(7X2&:%rJn?>0l@.>PHZ%;'a6#<\SQKi5_hd!F47nhhmY9#;L+'(iE!JY*/aNbu95qt?/,PLLT`K#9_Lq7f!4iJO[f^!0Zgc9i%bVX0E0^@6gKn>:>=T[;*7Kq^Zq#E6HIhp?O%CMmi5UbQ4Ah`t.'qsQR_F:-fMX:Br.(,H0lTbkB"FsddPOWk?Z@sC[F_'0$X#COY%[qX=nUqA$&.tPM9WmkpVQaY2sS/0ra;i?&U[9u99gt&\=&PuYoC*gq_K*jRgjFC\1Io\$:7YEgD<ro%&",1TRmJr2\VT61tU;[.^%e3^^P"(d!.p&N+I7:"iu+Jd$hblJ2<i?;<g@XOY#dKEC3Lap`%fg'!VMF&rULX'0`H?0^I"pB:kjsMjqJM0J69oR:m"3Y)39bR^=%Hii&C+!'jf!LbhH04g1KJC:h\T]3/P)WC0<</oC>lFCPk"fi!"#GQDEBV'8qTW0uQ7NQIo5k]=fXpY&pkBrkI-m2IoG^sg/]nLQ1%L_Pff#EUFTU[YY$6%@EP[,V9c[#%?8F%B7t]ENaq+7<n>J'sQHbd^_8e8VOt3DpdR"*ddX+C3t23F&)\@JLOS<>5MMl2CJ662mS&%WER7SPS(28MRZ2^X8ufBCnlEXE6Q7smf4L0948;9rp<0(=>p=RVqLVoC=4Lh10$jl+^BHQkq)pQ3>>V.W=@a09)03IXt`R^`3Z;?%bXsIFgOX+s35CMB8!lZT.L`LD`Q&U1.GL'hqJAe;]K=N1(P;:!8=sEmCPiGM!OaaZ#;kN(4uXFHCLK)7J*U!Wh,imE62:nC\IK:W%pdsYT%?PLu=^<$,I`gF6JT)#N#XbouNW9V9j;)B\[S]h/iBLo1.QOJeOZGb!#(uJ:pgXUQ4XL/>M&4@oN/p9^Di"42Qa1l-`HEmL%JG9C]<sYaDj#e!k=ou:ilE(Hq'-k?*j&#RVecoifb:ZfX_]AOK'ZPVpaJ\A5]e@VWb*kO64O+n$?j:%E2?MJ\fpigJg[,Wqh6-?Q%b_S8]hJqmg<oU?FgTC$;#N.uA39E+Xi`c0;$--]\QtM3c*Je8BWs-DH6lq'le/D=91Or,4[k"p*[aX4\GQ->`^%fg&W%7DP;-8.*%M$7l2Y:KV7CbtuFRUAR+/#pT?dKq&4d$?&QV-%'L$19#K5i-\hQAQH*bhG?n[Fs2C&G2$#E@l&("0'NNiTr!/"q,s$4TIrCJ-<So%QUks-#n?t%FuW2TF#"JA/)s4;.ZJu"OF`DqNT&P.<1^5=d"@+BlH%D&`Irbi%S8Ud!E`)Y2um?9\aQ<2G?f$,Z7oCkdhb7!L&p$"%<_dYEc/9U&!&_O*J$e1"!<Def$s3SKJ<gO)'[$[hJBYq?>cJkZ&?8XK.u(=/&(!J/Itf;eKe`X<'V'&353IFe&_4,X(2$>#D[i2L%;StuGK&a)Y'rA3Oa>XDE'i\RIr>gtGHgr7t"!Rm&=A9"N*ps*NI$6"#@LF0A,aP<gRft6r=lK]YFG;(J@\<JKc.JccH_4G7&4>pt%J97;(Jn+)t:&r=l-Wt=39>S9BXKDYMD355PLio7BXh9_c$eft/9dHtP>ud)*!5`c#>!PWuUs+=15iX+V5/(%G6:?Q83.1loX9\2r%)-Z(NJsMk3@N;VW_icur'#7'K!0_j"f0b?-^ZMSV9Qne?E<TkG85aC,n^bTu2J%VB,HM[)*iu_+'>TB:MTfp.NQ]+HTi/P3]5GA1%XsTp#,f15KL8&D:3@?W`j`5L:GfI`3c(:!h!UC&1N-f"iZbNo)ZfIafnGC*VIiFk+TW/[r>S#51Ugab*S#7e^*K69a/42Dtk#Ush%d6fJ#M)g-ca"L4f'cesCiXdoaE0UEhS1W9YrWgLH(MsSJ;O]Jh/XdnO,jHb-]*n\2$V6Z<m?t]@R@uCj!/c35!u:![s351/Q<6=F%L0UFCe\7"5a<D"%HAPHHejuhB_<:(RbuJrW4KQ\u7VI"s"\,4\VL\q#V'TN4rc.qg-gX$(9t7CcaCG>&$lG`^6aY2CE03tE<i5hd%<i3?..^I43cc'M\W%Ji&OW^+TcSD!76;8(HAq+MR@)9X0*,kA+[g.G*?hO(b6cMFKpn4M.@Dt8So/3/To,pGb"-!6UZ^ok+JX@+(%Z+a3cU*\'4Y*E"X[6!.d(T;iKU41de"C_?T'`TFl.DYCVC-l!2,NaO^D#q%.(YSKq(0oEK3.T4df;f?u<*_ML)#o+df.<b]ZWf$J%D;icdF+J:?AEjfaaqO:"n[kAIkgh$\e&Em!E2?KB-Tr:B;lcH,W6TktRuVt-Att*U8aT*7jL6fl2"MH5l1]SoZ\,@C"s$i#pSNB_%2Vc``W6M[)p6m(T5\$)=[F,4!JHm9rI_K/#DgDH"e(dOaY"I5S;53_]==YMK5eo4n!qu\&jhPorcKmgKH;bLWS(*SlpSC#4Slj;N%!@mee+Q1h<o5<Rm"u[.CXJ0>d%Y'S#bWu'L>p[9j#F:gaVHgPcJj7CeQ.O\P$Vc/^M>s^+2t=@G@3e7=:9h`N!2]hBQo>Af?@CtH%!8.\&J,l#a<_e1am0!Q(ooP*<1YGA"2pET'J#MUL8_Q@0C]1_Z&(egXF2i$b&J,p4e(_ml"'2(tP147Y1TVf];!6^P1R(,=@?4[&%Dih=hHAa"9QA-jkX7u/t1o4Lb_.ja1f?KKaHJ>ssb^/_2s3SLQ58s*QJ<5VJrLM`g*H']J'D"D\8@JQfdM27YO`hAFAcA;)]pj)P%P'08i86#r3T-"p"JJWo,=ip0MIFA2?m;o%8?N&?M.aK1:Q>6N<$F"pJP#:)&%j50@MK6Z9iO/4R?'NG9%jd1s-bP2-h&0TGrB]pT%ZV*WlC8rEb7!4#8_GWeq*3MpLiV?c&\ghc:fsXenfdj<6:q(*-K?Z&]oPp`3JJMbrj:9sW7aZOO-=1!27FcSa6,m%8gC+LN?sWlL%@]*q7WJ29sIA8L^61EZ-qUsB@.1jQ*`qdNL80.Q8@_<P/96nqnZ<Uj<n?ICoQ?(i8q5.:>r>l*2qG"?^U71%8.e*WWihVE[GaJII%PFdCjKQ.%;&A6ZYo)JUr4:W7&>>NQ_G,n5DjgMG:)kh9@+F(&Imu^dr\WcN+%8.KL!.^o8#DTflkW)0O>Wf-(R,B<k,_Xn'<q0M#%;R+4'2N6rPbf"nBO<MN=abd5NEkP*U!#EH3Rk_oJmNOjpLO=G@4\R;``V:G8,Q'ob!I/j?+tYRE8d1#7TQTIi?A=#HLu]_D&dPfW%lV)j=r(*qYKO*9gG\.d'b$,;-B=[;pPTc,;gUs+5b_dD#bnosE6XI>VKi?[UT<V4Q=fqS8Liq=JDV[;[X4-#YVK=REh@ON\Z36_!%$X*%.A(uHe#?&5loa>9l$6i`1TX-rD\R"R(2VllPT9E_Eo2,/I;+&acXTT&^Lb67O]95!e0VqChSjut8eH`^oj,*E;Q!MHBr-cJ)%bJ33ZWH(_tWPCd8IN`f;o?D@.5k*P<9$>;XE"BtnK'f+LN:.V9)B?S76TiK?W\]&uH4`bO_e>-]Xspq*[/r./lsGml'V]p?5TG>%%5487Dr6uTQXPRP:8[4_=f&OptoJ=pMel0R>oa''][Q(TPb\0BKj*S5d@B&#Vj4rrQ)1s'-3cL(S/8Y)qMXK;!.=L7Jn"E1=L[DP$%%cKiG[RguF9>g6,E^hfO(qFmNrGBpg0p6`\]_#pc<?q%C^['H'&)G8"6??PkQe9%-532=h.P$5_L1],=Uq59#bS1CX#"-F]fG;r<%!_Giu[]S^&7fEW(Q57D9[qV@bq?u`P61CDpF\&XC;N:3@$]G^G98UD@X@N\eRT(0;j#%?6k%4Os)oQ?OkYA0*;XJB.![hMca;C+B%!?o&uL'bVMJeWJaDp)N[N,':O+7.Mh2)ZW,^Wc\A*L4^WFnB`_JCJSr3eZQA_6Qnb6t@^L>EjE17ac_k5#)"qmX)$`3t*bQWN=28%4#fg&Z!H7?1q(_DA$:UY?+SYOI,7Pqd/oG`18"TIPp,;L#;YbM75L0lp2akJaVl^C*2KMTfgr[W-8uocZk&G&4ie2",9aB3G9^NA%^*)#4X])/O0J013YDNR94*/SkqJ)k<868m"]W-n\:!F$5,#qPB?*D$h+j(Tr"r\$\lkX!K^CXT"?cZE[T/m3U4a:e4([c"A,:U%N%,qIA/e;'N;\(p8ZQjHX^"Y1*J#7GmO"?E*LY&'Z+.j=h=TsT'mQ/3?NY\"#a&:cC]TBf+"(]YIkW`9+A?&;,\]SYlFb\V7oDN65n%,PB4*accZfb0gZmf#.7?2O9H)KNk-$2<IQ.dW6<a$e'91l%PM1`96uF-Y3V!7rq[.Q5Y#`f+)AKR<@p5l4T9_XZ;TV`.Uq"go4$F%pJo9Y1j(7/:mVf,l;FD'ZmYO#3FhKD[_uEOaPE7&h+XqrPbgiBg"j!?"H57QUFbA6CUrp++qVmLH^"ILaEJW$B[mhQHB]]uFHn+_%M5_rrS1.*)^QEZ8%%+%/OD-g^Ph6ui!j1ZYLjj/kk5&i35Tn[CR+Pp?,WqMnA!Yb_*`\%i#>;n`+HD8-X&LCJe$aF7K?`-".8,A<%OJ=9ObZ(D`3(I'0Ot8Di8tY,1WfhC0[@).`:40N<M7V+CTrs%PbW*\>.rb`D'mFaGAnmgQ7m^phE*ODhW>3TBG?WoodmrUo#s#Rp%_G"%JHYAO%\e=*rSD0ehTg'eX+'j_O/lrK6Ln]a$+R)L'jRl7d'mC]eN?):R+\,U[@FUQm0L<Y)Q&&E-+@fN0S/"tgOE]n,1dDjo%+Ff2MqQchP1dEmr#YJQ3QU%!1(LR27=>s)l`r47"1mj#N)jg_PW[eu3g/RIUL#mqa4f9_X%=ZKE>h#7<,CL*G0E[=lM&$"2`d+\P%Ig_Bh[lpQG9C!G0FYa"'>ZkTLif$XehVmM)UrRX4I$qYP_h]H[n+q`?0&@Dq;3D->G)8JMcE;f`pUK&?7]j8]%f-MD-4n1U>l4*4%G2!r8X"][\*N+LT-hsOb\.4,R[RKh[<hSQWh/%0FEZ.IbdfOT0YU1/LOQUMYRB"ou)tQSJY#f]Oc*MqKaA+_jA@,8kH-rbkUoo2_%^(JQTShM"FQLb&0i'ca[AIYA"nf[eg_Ye2s$J?`*?1pogignhH%85Rn?ZTF8-@YJ7DMk,uJ68]O`aXfEWR9Lb&>!J_X0bu3)6<$W%16mFGG)$*`pu^_O/SYd#!DHj?=gj2g/?0L$'c+L^bb<R39t%83+O&]_`JK"u#a4%`?8bH(!AgL2jirP<.6r`T'bL>tCoSp*hG)1[%6Qnd^*$B@_U_Pa%;4cA[\>K5MNL$a?Ho]&l'@Kk;=H=KH;M6'dMXJ>_Mm6<I2b2]b)I!u)q+Z\0neh)4eStU4LNDcQ5hFO260r^&%'o,FE&%?-g)%M7RL+5`i<l:_n^BL#0_Ll<CMNQ6P)>c<Dg5O0\;[``^['>c)p)TOM&eTred=D5dr5MD=n98,#j:^jp=/12jrUi+m%FJAR-5?+Kn)aoBGUfc=*564b7<I6ZYl;q66^bL*+rIOg?Q"eu$PYh)^ZQ1Uaf*b.O#61PL!UAO1-%N1K+_#qQ3cj!l)6Lcp=B-/l%eTNG&1/rVe3V47(TKW<_mH@%tCsgo<p]p=$K;PA,R;<sK(aA[IQbqj1Ysn1V6Zfk:;r3g&*H"^mbHRR8l"5e>It6^U/Vi_ESmc%E%);g%=OW-0_TR\2]9hP4!?7[WEVINAu9%nbgdb!Zpq$!%sU-=?O[E4:rc_5`3-NMO)Joka,EhDA&req=:'Z,G,G>%#B(lW1o1&qJ3%F^5C5p?VF'T_:Je<r<C9[e#nEiS8!`OXes:ca"mG_UubJ.*Q0/rpV_4kE?m1*^WIC3/ei/)/qALi"XFt9EQUnC:Y3sN@n$IR!.uP%C]_+WdQ0X@;F"13h#K!?%@@fbrP[Xa!e:C[jD,S,mnlLYa)U\W^j*U@M:SkkH*\G@>j)H!X2mF4V3V1o0%cR4q@:S8krTppk^Qp=%G=9@K]o%&*hsk&['$kbdgkH"84.6S;IiaCi:]gM@p1t+r;f!f8C2O)b46PK9L3h'(O6A5\`BoR"36MKV>WNN.ngk5jmLFiu.Bo2*%o\@mt=MbDZ5KI,"\mDq0-5K8:dF*8PNR,/#ZJtpA3j;BiFN^UL3J#'RJjX/lN*lpO4,CI9cU;N%W.$]5C9u^AJO!dV'"*BY+bohg%2?up4)6'_b7)([Kh'-$r=F_DaFM/`ga9%6s*-13i1=ck_8l^<Tr]Cf^*X%N]5FP?JVI5,pEd-9[c>t6k:Ca6ApPX5:]R<>,Bk(*]%6gu(1K(93=<nK`"eciM$6AruPMJr<A0p`h[+]f32?7[:Rf.XcTAqH_X3oC4u[/%PoVo\]j0?@7GUeG][=agE<:>Jod8^m]KaS2S8%V;ci5;m![B5\V>:PHh5`e3G)BU1bmQ?6`naVKn-?AQcs,WXN@\QtVS*i<ttDZQs`l[=u84V+B\/I5=Gdj-u;1#O+m'^M+`p7rqP`%)Lpl&K!Plmf'%?$b=uFP)[[_GRj_[cpGH/0)o[o_Rh#V71?\#+o*[^2e7n=@b0IGR6;J)Cn$DAXW>53VFK41qW\C"Q5/LWK<JptQ%6-"hc#i7?l?.Y1al21<g9)[V?hPJcnLP&Atf>4-D+g2t(RJZCW_^f`u)OduOnP:,lgZoJ]7.5fELjuW&F'CqLJKXqk*\+$uO^tr/%r:`+?eW@g?o*KYg6P<!)gA*c70GHJJGf)M#@$5;?7ImBkN7p0Pe.bQ$n_.33"R5tt4SB3%`s"A#P:@`:#i7=B4S,F+aUJ/H@nj&d%P(_W_m?=jUH;C&ak/UHT<Q'/l"bEjuB!G*u8I$(+`Pf\-C\2#[HXsD4C;4M>os<7!RFMo%MV9'n:+*<4gWM4/rNO%uBBP(.Hk$SZ%b@8^ggT;g-##bO+1"1SnOL4?bk$l#<IChkJkusm7&7UW*/[Bq4XO2+c(luK'qfkg@Z,S22=,f\JO4&5C22:^*:a8VUN4DT(RMV1Q%ce83lAO[1dkjh.X@SN2]-k_9^;q:%OEfCUeF0mLM^fYFJaE9g3J0U/^oFkhW*JhlrI9`]oQK24e\/o+=N_;NVM2fgh\H]JS.@=;t%nmrbn8E&/PG(5ZjN<\"(j>m:)lNF#E4.+-466t1\0ja98Y1Y,dZnBrESCN!fp0U%]DVM)&BCl0%3h-JRh1&'2JEcM_4T:7=!T2CE%3Y@-8#9rnt>bJ-cAk22LA!]%KN4J?\n,C&5Uf:#ietJ/>iR,@N:#6!LcIf6Y+Ai]1k`[I2\'NnedcJ;/M"jE(GJRrM'ec#;ja8TU%4Zmqme1Y&Cjr56.IGFW3&SS^j*X5,^Ygb8Bd\+Gl=iZ!s6W*88rAXE90,T`]>!`j622tt!ig"Le?>B[q^<tNZhQ>N1'.MX^-<%!o%jgB_Y26j?6Y,AV&_Q5hGqM7AsC7VKsI$hBq"U""#^41G%I5I_Eb!e'A<5Q80.WV1pSf2B)?*_]F&>\Leg0Tg@oqS!SK6U]BKm]T^%b>b1IlEQ*mLt-A^eY]+BiIG-\k>k-cXcn%I*m,+%)Ytc_Y-A<G<PV@LNs4W>.^*tW+o45_B$db+#:(O34.)Gj*/"i;F4@+Q-Qh-_%qm(jBfhHIdM8m#,l$skR/%GXB23llSg>'h:_q4NR4</TinQV1J(iC8DL8s4bP]RX;pmAOoc`'#JkieA`dX!89Jpm8d(d;oHgQ#f(%Slr?n-AnO69DG0SW&c!A9X#PYO>f9F9BN>-F.;t/!annO(0!ZH/dMk9;tOLn%W`jjAF)PE\*<_+8/17Q*7;"F2?'to<IUJdZ4ck5%Z!X*D.Tt(DHnT3"bRP3jF4c)Q&kMl1K401l+`rem&nU)09#\7Z)?kF5QJ!$6O<UI@"5@14bauK6+#Ea\W^68BhN9)6!P)19'X8#W%V4,7`f1W,P)Bf.F82Y1,[@ZFo3V4/rPGB*5_jr*E6j.b+6EH;lY0m)c`#@c#'h<AN#/Z%1Bg4XL/H,a>=S"tpQR(,f#"S+"/Ck6,%p8]X])Uj"Mf1RF.1mK689WiNIBZ&&OXX:<-c9`^`a>F5#/kN3U;I$AScJ7%7A0/:ANeL^_"K9q@j;L2j<l$e:bq-M=^>t^jpKgFo%"*(j],Z]A%-J&J^EfH\Y,-riP/5K>N''sY>,&E)%q7J!**]Y(>R([6n,hOB$g!/@W]3948&F>#h_%%_S0/+4/5[:P8#.e/^%>,u<%^*D7R<dE4@fC.BKp<:i#r<KO\U]2^fip4J;E;KLW)tubep#!H'p[Ok<QN-]GDWGA?>nbEo8[s9,(ek(h$*33>7oE;m$*(8%qM!"A%q"sAa8>W>jhe7)3Q7fWt`ku/@0u\L+8rGD7//(uD`gj-jlG"Of9qr#qX>Iqh,>4U,-Bs;d,-n$iG]'RrH*dW#\*>5;XQBQ!%oR-=%"2Vik5=TZ%/L$_l:;)7Q,P\O@j<Y$uY2!_U`gfp3_"K%[_LXr]k&472'o2gGiO((m3beX5`nG4Fd,k/9["XZ^Oq@,Y[saT/McM';%Q=MOFj:E&T=n1d0kdq\5T3?Na*tn:SU*RPC`V/uJ!qb<9T>]M"8E+Db=jO92`fXY6,<Vq2&E*"pF5@b%',V,#<@/CX/,e:hWTAi$%)^o-^a@iYDEqXGA7l2!o>8m(OT&4]KZURU<`*Wd;Wq"b3oj_lK%I:B)^O]LuJV8,Vh1%Rh/Nm\gQ@tX?`rtA?dUZ!W8i'g7K/;/"%;3B2o%[E#9aO`'Yo=cb1L#^VXA[7%T$/,_/@[^"<<oe7QY^4q-OfFKU/Kt\1/R":&.DAq<QB!>Gbd3XK+X:">4VMQfimtL_iuV!H%+%B^14P)u1jBW)d2'A]W7aD0>?HaO#aAI"-;6eY/WetV&7Tp-_Q=VFpR`UJGWBg5<PXFJa*/V@K*jh8=K5&GEm^/^tD9,I`#pu,S%U!Y^MLS")\LR/tsM3o%.RJrS`YKsaAd`J(tZZdOpjq!5QM)H>`hIt<f[u+bVP=bQ/?"q^]ac+<T$aH.=6BKJ!neoO>U.#CCU0e.W%bE@$.Um<(5/G6(-pSP4kE=/C+4hg&f-4GXt1RYLtT-JSU.A<LKQ3f4[e`ssNOZJ@U82^oP:XoW=]Vu"[RYoqZ!:an263RiMNWZYd%cdR?#j\9\iP&eCgUJ*\"1CZ&AS]Nk;SCk<JRF=b+0q1Bq\udq+>c%UEd<LbPqN*>ZW"N4gO_@);L4t@'Tl*oh1rQe%>N8;RRoM;)%<qTKoN=bC?\jd<Iju%*J,))I7Ib^'amH>[,ko\-')Rc`Z-CI?"a*Wc39WOoFI=rN,#T6Q^`3i`KLEt@9KQiqUW"eF7BZfs'Q?lDk%kqh<hVINY#W'@0Il^-iu@X\(g;GE1Mq%+k&/2N]Jq>hG\ObLCC/a`me+>2/pUkO:P([?VmTs!RY'gbXOZ!BmHe6o6cpE<F@rTfV?%\#'M5W=bYF[Q@$YT=IdeQmC2+b9e:050+?%5iVA:F28@),oaTXgl6!1%EdjQ2^0RFl++1Y,MB9BP@4E\ci4mNLB#1=HL!cpM4sQ;%3#f$8rjRA#iDKc]&/e\rRH6)MFNa]/r`B*qhuB$mQ0YXRoj9,eG#d[JZ-l3nrmdB\04WlGlg8)$rs()<qsbW_s8)bhYH&gN&'0,5%I75M*M$:<Nkp._`_;Kd9YOPdqr'JWMT8[nC'f2af(IA*S>/a9!ngGJfX6<Hg3ZiS&'M+)D*+NkZ/!6_gc11E"k/l[(]o#kfkF4ZL%n*=?\T7<]ZgWuIALnC&)c/^Z=rscpq#-%fc^]"`lUZ8QXo3\HXb3EO,:!h>c$lF##]J.RqXd"KX'!V.&RP3=%)$:'O].pXG8%Xi>%^qB[HJ!,?Z?iTG!s6]ircm`uOEC&jq6"cVV^rE2Z9]$`R%(ett/"Q<'cc>fSPf7.VXs;7X,A;okGbYu`$=$9@Q=_QsW&-K,On)?]%f"bC1qI%R#,^r+Lf,AsD$r-u#NGQDI#VQ-?aO3;'ISOO(1n%n+!NB*.l2[ouLrTu`'Um9jhc5JiZ85Ue"b=WEjs:psY4"$9cjp6C%#U>O)2DC3Z@/r0&ik=l^^f#j,PN77Kj9Cf/g.[3!eS`N16BJaQhtCoAD2TKE6oAe)a<erA$AO+Q9c0Uce($'S(!B$0][Y_`bphuL%a#Z=pd[QM[pshododB]m5oL!*`u:t:^`VYef8$N-q?a-=h5\XE":kHIBB45i2doq!9"^^+/b+t)ddS.^,'_CBL/KNMJa^@Qr*sCk%#r%.Fg-Bc2,7F_;XS"oQ!j*Qj+Z0C\PoTuRO'ju^/SQi8Ib7S0S7<smrF)lQ*ZWq3-,k#Rh4X^V69OgV>E1=XWo-A=bS98;d,uDF%-DXUr*@5eM1qVL+`lcV]!+WhFOOj9Ia&IZ!>HZ/(\3e36#?!.0dh-\FgNCOkFJ2gRe@q1/=l%M=Df]fdcPaeP0JcN;[EhSgLfL,$%Vj.F4>Nk'>r5$Ogo+kbgp[Ar$Rffpr59;mgOng(PdbJD%-5K,<kF`e`.o7Lj`sdVnYoqjgWiC@&gCDeFh8#MIb708NP&1E(&\ALN%FfE@I@M+-R6_m5Rn2GQ7`cCIi>X(1l^qRfJ<o6B'TS)J/Z;s[(,4<j$]T=UO_K,s/p'?a"g<%fraepcm;-('bG#O1gBrY!]ZKE]E%&<kPSWcYre3hugkb0m!6XJ=4KmpG.2aWTO1#/^H0j)XsZZ([(>/%BFJr*,n7>9Y@`n>!IEohqjPh)I&K83[J?A#akgDe_ndRXWQo%=cq76djTX&`oc=I^4,n;`%XZK1YOLeHe<;Qm`g()#Q)g!+DKj>FglQi`>&FlNCC_h]jM(qq6;HCr*\D"ZVUIqRBk:/KPciSg[TUW%^B[oA9Q^o775o'3d0`X$CM.0.MgQH!KVa-7o4qqHVVeH:O'J\s']\,e0S2q?BgfF1Wr3[=*$*r$d8(%)^qlPbOP.W/T]GJN_"*lu%;7F.)DQ+@\fO"pYFRH>$#4f*6QKeU%s0@a'&V+W?kl^"@dQ@%j=YjTq^:>214D?0Qp\`IPSmX(&M0`<qhqiMK!5^RnB9Ih%V3@bs%<Ea1aN?%.3r/go$#JktWmLS1]\n/Aq5bi3e*o*c1>O_>I+IgE&DOmW*_8Vqj^f8-bW>66]=:@5HH*74lg=:J&4,ph:8'?]HIK)=6%.Q_5M*%o+`d;Q^HmZfuugh(Jiqanm"m,A>@njS%@XBRSd)Rd7`RHS;c?]2'?7q>G]M=%Z:&-pDD@`FOE-4jM`7Q$sE@7,pDhLnE6%-5!HZ3N<2li7E_^g1dn;brq#6!+`16MtpYH>)EO'C[";Lk0fD#7+KYMb$H&5/Z<?I!50`[X!eV-oSa4s@T[=KW'!lZ\1/IqY>(id%Xd7J>KM3hVoA=F7SQ9!R<</I^/e[Vn@iDH82,mg>]r5)!_;'T7$#cOQ%%GH.3@t0$OAi>+Y\l1RHrIM,AD#ZeH/DKWYhms,qVc:g%Ecgeun60mIK;m*ZpV#hPA!Gs5h;t?eAmi*mgb9jo'*!^]!I6A&$dbHaUjfsu?#[QrR`HWKK?.#*HhhAuR3`P7[]CsOOH*!GXGi5p%1NhVM;qbTbg7PUKWgeb$\S3\CBXQh<[4iL*R:jr'V@<OQq4s?eS$3^.,(foB9%MG?L'^*7QJ,:S930Y^g&0AjQLX*LK;8mZc!L#i%"k#h<3JacZb3KkG/8#n\Rq:/S`[UJ]f9VnAl`puGVX>SMP*Q>^Mr<ofjc^/MV_o:3+(Fds5+=j3,NJ%E9qiPc"@[IY'Ns@M7Y=[;%e8!.SN/K_-jFj<4q6LT\%em*\526i\Pl!gaQ7ZB0FV1nTR+p)n/#[PuC*&aD]VQrk8st1;',W^m]uFUdgB\AP,mV;E\:':qn%]aO%+P1Qh6M;lr.^CV0aq`$lrc<>P@+MHX$d_tr(guN0_!1Rkg\/(/=B_2tJ%[ONJ3[d;!2=fb&>\=Gn>Q[:C.^4?K4Kf&r_ZZh[MPA>%=X+h"_O,4-S*sCc^4S-,q[8e8-hbFPM(Ddfqje<,U!0hV=Nh6^U7Kub0LIqZ/L-Sm6VJ#JYMC_<6=(cMm6&jMU2k]Pqt(",e+5]D%llE)"QRhS4dFL%`0b6A<-0Z2(>h)OBcj<g;)i,e<[tB8>e33A2!lGOANL_uF02tXps*ue!&:_nDL*)SB%hg52VkLm5#Q./TZ.<&k%M@&XqObj-7IR<qJ3f@!>5-;gF.Qqj`,fG-A_WVh[>8BQAS$XEoGFkFbYrI1&2W!b@4TG>bYKr7m4!/p%'F\_nXA"J&.(b`^(^b4%%j/X#2#8nZPM5:ng-[uDU`BaC_''(7YUK;9Z:V0`*<j%_J4fiH:8G]`).q%HHGXn-.1V3PVj1^!<i,I[#L&X0U000h/;oBIrp`sBm%YnMX;)9[9+]**`%[Y1WZe[C_*0GCKD^d4Q-iRH'U2T3^HN=6!ti]>Ai@:>;S"2T&E0-mrGIPJ3BelhM/N@m1tl"fg10ZUm>((C^`%*[]F`;8N<*U=/)GL=;P7^hb\5Y<tg?r9HPQ]_#gIoe7o>m\pp.J[f9E8VRk`g`.CQ:;^u0>[+H`4Vfou\St4_q;Nrp&*UA=8s79E%TCkj]9hBfE2qUCJ"b@1IgY4L_afrGSDlDIBW_(;q(lN*-CIS,36EZ\1a#]+S[G0P\0WfZ6SM\APX:#Mc7BcQ19EPQrDfii[Ei]Tq%<.?R?-F(?TUE3g!L-V0CUXd`%lYi1l(tsJ\euQ%7,)@%Pl+X(EB/TXBgr>9]$o[uoYKG$BjI7+Fh;d@11/?G)WCP#A$;Z/hOl(L'%s"[1A/L<P;g?-@9668Z'H!i8c-SPB0?XuRk3sda8K;HXO*7el7dUb`Tc\]i$0:DFB8'#$CKfkG.nt3gAKKMIO+fDBDN[3\)9[</@%hl2d@=ifP-(d"]Y*V&LaqN6jE&jh&O,NQ)m1UQ(rn%HU*i'P`=E+S*26`0K#jR>!c?!gJN=GSt8VFXbs3R='#qV@,,Fp&h-oOU3G%$$m^;kQab4Sh\=hHsUT!#s!E)Ord_]3mp*POsM7T;a_*RQXVr,mf!iAGl:`B/fL.!gtsm+!6_)X=GXP/>jpJ8Z_i1=>grj;UAeXW%L8YUo%`h;\_SL-b-XfBDoLHkt.]6,*\!_?Daq#TKjC>)fNQVj]A-_*YLZ`DWRUddTPid>3:Y3EM0$l*s&dM&O_]8Z*I=C#(040+p%Gitj#B?N2lN;[V&^sKVTbW\BD+:r6ue@eun)jm#qVj/J8"NCNR7RFP`>peq#Z''X>JlV_/G$nQIGcf"cL'l4=mOd0M[SX.^L/]sl%'##sf?ttB8Q-J.=0G0u)_f]`:Ts7I)^GUi%.W>Q3bC5k@oQ^bL5rcr,/KGCN(7"qh&@4?-j+":R0Aei1^2Fl>r>7s_II$k_Rnc/E%e<^*,O6>)K8RjO,4jscrFUn/+6'K%`MIuoVZjWr_LN!PQBJYm3nXMl>Z,%W?EDDK$R9o0L>?0]'i`LehI5#2>C(ZT'JENSSduWu<%(!kEq!8/r"-Rj4k73feX"HSi>-)Zl@6hI]s5T3TE?.S0,">qW0)))pZMFU=&$>a(]^0<&6",LdOA)T5Dm%E/bQN7a3KCjk1"*u-:%o$QVr4&de0*^`Rj-@ZLd2C:[=I<;,4Xo>Ajdk't8C5#T+_d8W?YY:A&p0bBcDljt8,FBj_8cW#eOre,`>Ci&S-<V[T`R5p7)$j12%U7ZKYo<)bZa7gT0c./jqN]OBjc@J4m/@4)E*fO-H+T"SK^s@-;91fm#FApJTBJnU&FX`iEL^q`_NCqOM&8t_J3!]qrGp2Ej%HcbA%5\lPpP$DA8MFk<_1DlTm<*gCVjFgX[-1jG+^`64tc&RukW@1q>6k5!i-+8DC(T1n=.r<-ePb#CnIjj(c5eGP;@C6p2h*"on%:Er;%=!q8fU/a4n$bFtW3%[(.QKbMNf1@l=mH!;lL4f5>gK_TJ2sl&#7@un)D$)*QlZ5_tqIQ-jQDK.;HW#r`Hi"&boec<,$2==V'q*b[%;B1q%"u[$l^J*&5NA2TC15%k43Z.3k\hPPUCnZ*cqp5e^<VS26!s(7cZoV4cZ2hHuhCPAhW^[A([Zuq-%Ds/A[jnE.*Uc9cJ]#RU%mLe)["5lJue5+-2(ur'A5rl`BqYTs/6su>U1:N12am4X8ZTGnbG(2V,ZN(ibl+e+U73ok$k]6&#ISfIZ#rjG_#:Ym[-dmo@:5^4[%jsuGjG`._U>W=B$53qO$:UOuT`FV*LSNBIRj)DW>0pZ@iQL5ZpB0WZm@ftum)3s[nUTM9[fa<6r(EUbJj*jmpWfM3_=]=4@Yg^!t%72:<iE0AoE*ge-2d9"?Ia,u/j!qM)d_-&m'6aYQU8%T=fSIjF.\^^qlr,TeY/Ybmc@T1#:(Y6\1!C/Qf\`ofc>T40#g!I2i2`_53%ntfl-MU(hdb7_nN(fTG/]rf(rakg&B.skK-Li4aJF)U@E6fCYoecCB>G^EX"_RW_@[Z6gCcLeOL'&M2mRC@;m"t"\$nU&j3QuGGZ%c0T:A+(O0YKH+pr$_t1RYZ*mY[K<Zre@ht(i,ufh>eV8Pee5LLhU]Mj52"[Ok\AH#<ZpFOHWpaM(HX,_K<`qZgH&H`jR$e)VlGf)%>8(K&eq>#]lf[hYIIu(D]WI^gQG'EeDd1?<aq`@^hU]Nc_:dQM6tPZ=gR=52+Fj+DT8NFn%*JH/3=j74CZRc<NOYTE^l-or2t8rp%,Q&)64:#O\$GtdlOs;LncK"5>79I?[:-RtMYujrXW?]?uOW7gBXZXO2)$;U&/81Y'"Y4%5*/j$;?P2GXaY=RSl:==%"Us//@QMTt%E$32'6mE57?s2-QUFqj$YN-gaA\1>5=jZ+._QX8J308bD:88Id_+a<jYm,6>8f@r(<mDh>/E$#L2AT.*NoVmPB][Gm\C6O-.Nu8V%M<?i+X:?LR3FN](WhMr#(-%Jp/>ADb=eN.#_E)!2:Be<n(?7oP"feYus#JBAYm@_0Y7WW5:8#Rr-On3)R$^q:,pB`I1aZc1L)_$[%Tu%HSJJLf@cgj>H0[.TWJJQX*JJS'""^8!JC>>BL#fL,IBSe0m7KRI-]unYpYi63?(<BHYV$OBB(o_1[KNZNm@ULS-,)4\./0+H]%S<Aq(Ml13pgS[RMLN90o!l`N]LpTE=?7';GTb\=<3U[:eC4Rg&f#e9+#fK(^*6FliNoa)qVdIpr;Q.RG'Lj,#K;FKaAjVsOdc=eo%ANgQa[Q"nKU+Pq"@*oap=#_4m71nr]cptoeO52fu[@i0dD35F$[#X3\Mppt0;627B8j],%feQG/L32[\VJ(m12A?\2=D?Me]LB3t%J;]@7iZ^VK+W&=<^_(V',6PRL$+Y"#LKm4t&#N_HmJ9/@WV\3d>G,RcZDg7)"nl6!Zo[^m&AH^XPXP$We,4PQhI6t[n9ZBi^OaRg%a:iIMf_7$coFA@Gp5em0__&*qED1Xc"%6JDi!]r_EjS9Bni2NuSe^)PopW-LmM'HqI8@VD^<jK6)Pmu'\9r\Wf.UM.CT%D]1)c%+%Tl;R'<D`%crPjR9oHVpr>&rI5CZ.O=[;bL0NA5-:NjSikk0=:@3.OM&(m"hO:)f8#3.Qc`peU!*MqfThZcJMh=iC&;6phB6"#`n'%c6<dsa&Mto=dbEe61G>i-Ku3^GuTUA<':9O&f+mkNoVmPge(uj),Wp-2V)SLF&l!"e'D%d&SL'^F.>[JJMdOZW4bPOU=G;aMe@]g%:!%AjR"d?a'PHC1&oe[1:kslKN<2(b+rk"PcMZ&6.n!jV:SdtTR]7$60t4O9LoPD>7p8%-ekm?J(=Oh(&SWt2NBDb-p32P'3))NZ%+p$E\rMO\#Km+u$=_,b:/E10b'mCUP];A4SMb3"q$X=5JpYLQ4WC.>3_'''RncW,UOom:2WtRhi+A+J5&75B)/IcNrhGXP\@$+N>%NCR/3P!^gqQ,d'i/@P!]C[iBi9KePK/T>2Q(+=58<^2RG$V/X6MFIX!HNIUS]_mj@dXAll0licq1+m6Z4k.?2*,:U?.F]OdU*?n5%HM(f,Z?386=4\+%Yq/UT"C&gF4P1j%_1O=7WtRt=.TRjN?Z:HG>E`RGU9Pop_H!t![Ko;S_C_LIa'2q)fQ7#a\^>g'ZMFD:DaCX9%h4]Y6E%F<bIRX0r4;_o?+T?]""U`#[$l8@KNoYGCB]Y?jWu(rt+;6s5XVcVA9r1(3G`18:lA9`n7rl72Zs%I1@^W[uX>=c4A%CcY%[fD"Zrt05/8<14$XVc*K!71G"'QSbsdnY!//uCA:,2sdXO1:Rn#!3D5dE3[dYj3FH@mjS[^qVI!_daATF^q9CMJ:0^'4Q=Pf.RNq%1ZH9<8<131!_cA3M7B4l@'(,_iCK!=LfPR(YqGuK+F-QXm)(@5i\m>:]6fRJ+PRZG]2$:u?!JS`!e<,.KOH9N\t4E[mW5$%SU_*2%;o(TjJ-uU&^dU*NJ.!JJ$51/irc:*X_Rnn1(EgNqbMa4P>*f:.b+P'</\pA"$5h_;bO:K>ggU`k6k6\F&[H?`II^52VAsK)0ii6Y%7QAI,WQLKl+b!gP>6NrZ'kqOeMn(k,(,<nmd8#LQ>GTA$i>/?A$+DmXF$_D*j9-6^F2BN'pE"47&a^MJ_Gu`Y/Z,ed4l0Y:d>n^S%'5t^N!^"[6\8W]`>XYWd:'4Xt;\L;j'BJ!Hrp/kdd=Ft7&n$q'na+q&8Gn6?'?o1I.fq1rIp3%APo\ig^#M-JXLJS<*;?BL_%*T[%We!n8(@e,ADnl,.9UaL&nr=h.@(<c.ZuY:YX1dKK!]AgD",uftF/0KMUQ+o"?r[9<8bFl)JI]Zc-YehDL(tj6oR,_4cAa4qXBq4o%RT/h+FES`o4k?L%><N4A?!;3X9OGBDA25jDk*?'H^DT9k/i29=^Dpj0iM;@C%L1Ymeo*qiA;+fq<[[kMZN_IR6Fr?BjX;#!VCi(]%D/h^XPLp9\Z-krq&$'4SY\1B[Yo?9@fVrHu]SW)SkdXMkXimag"/A;*)7K\)CV,7^Jq32s.Y[H=A"7XShaT2PH:>7p&p(l^O:W[1%f=DE-C:!!bnd^-@!p%^;,XTp#-:DJ5go;coT-l^X(LXltq<N41@lYTh*/@NqM5%7+#b7*T':Ff1d#rI.VJD5uVF7]-1a^1`c\u,0%#*Pl:[kd$1n*u**n)hH@.,s,%K4P5An;QSR4('m]alf@AZ'o`K[9:M@!+QJa(L+8(IBc06V2*8MK?Y&+4&WMh9-[2/f,D-Qg^oC(%&RF_hXn[1ckM#CZ4/NVXpXI@<QghkBll6#lMlk[p+??rRFm!e>[0jJ%Qr`3Vj8Jgc1O_d326kC#_^Nk#LY,jDB[H^8k2**-U%[<o%Ld)SM6f2bYGL$rF't[ho4Jtq^9B5M9bk0oP0K_GSd#d_.qiui3%]BQt(#nQi@K@ae_*k=F(Od[RcA5i_"5CtArLL0(i<'B8$9eW&%hRfeL;T8=m+D!.J_LNXB1CgO")>c)Q7[SC*8\NZebt\J$e=6hqRn_QL%Wkjr<#Bma'k3ZSFuS6"[N+(uaV6k>QisYZ3Uj$.n)@[*%(KPg$_9_rr,sd[.`d/UTL%S[dJqK1fp=t+&r&H%lrFAn.c0;`p<m>Hl=RGSq-0,[Z?Sc)U?eCY^.>i>3]a@GY^2`'b,O@6uJGj"i%#jcN-<a^H')4@sSF9$#e0BH1h!"^o(T9cpkB!s5m6YN22_g]AM<L+N+1H4mSq2b]K&JX-g8g=6,MjPU*CjDBS:,hNNIknHsg&F-D%6fHH%.6C%]k.4Y;Ua*;l0!fAo'o%+($'"lNKWnV]7ctme!B79hY^C_gqWRb,043`hhR_P-<`F53:VsX+lIZEe'c]Vc<ngX`=Vg1h%Hib1,q`fr_0AE5(c7KAEp"NY)QIjR\-3q??.O9)h+Be&O[h)nf>BEa9!+a<UrG/HY6L&k8qk(r/8JQAV\Y@<t^>B6L(t(t$]"^lS%[DD7op6=m'.'uS=J"fr$W?Cpj+dYMBoN[h)fp2a3hXg+b:Cd6JC^p7%ABZD+-%fK@CfHscIKgjkhQD-Ei&.]Pr]h:ISoNUr&]8m/%!qMafkh_S;#,+c*=FMGK1P*Nh*%Y]6W\\A5f.Sq$>MNo!\m6=<1NS=[jiiZnH"IP0HLGb_A1;ldCM"3&AnK0DT#UDG6@]UD<dgN$%1YAGHeAX?C@dI(,AJY`48Q1g-T,TbX>CFc7rqCa+!-]%o*m*]_&K7g/mtAO:WrYqNDPQ]A(Xn:H;><?RjiuF8KjT5>CTGTDKjiED%jG6,D'snUUbV@&RQ5@_+>u>:ff!7(&&:E?DU(eKYP2>hQYP%Y9*BiaG]&\)<U,3qDc:I2)7VB1^DV6DLo8jpT1.oE#6,Er/Ah7Ap%ID#a3QJL)tE\Y0%::Ce"f_mo4nh#+DEO`O;H^d25B'sLsbjU?@l%:"o2aYopD"pIng\>4P-NE"8ptebK4GN<W,f=h6DYW'(dhI"Z%4hR8(P<^DIHl9ZYA)-Po8/T&s-H#Slon"l3_tDo9(qq`Cli,:HoPF;7JDT&M%A(C^)88t%ID--IH`HdZ2LMh<kf`J/HhdGKpdR[2%r*fBW/\1d9GqD#\'b/lG3"NcQ=[3RXR9I5])fshAL2YWD?.n_,2:?sk^7WeLR?2*iN+?o:hZq7rnn0'DZ%ViWl2H%j=4Wl@S)dXM%*VeCM=&A;`1%OY=$8m=ifXTNp]f;gc)X.i&ga^u0_paN2)fR'D?_\@k2`UgTr/7)XjM!60GHLki0CDrH>(8i(q"1!OMTWMWk5=4#%EG_[[30:\SdE#ImLd/SncH,TupNS&&he&npmOJQ-:lGqZeUbqm4cKrPF\cj_$)oE)Pe"!U:n`86E*n_u@1B!Gi_'^$bh(=`4o)V"%^h"P-[dr7Bpkf]n=7`NE&Dh7D"d(r`6M,7KNg3c_-!ObSA>CI"C?iOueiU^XYJ^t6/'`Pi"V^D@)neNULTQ\9U>3Y5]rc*gk-'@C%3G2)@NbZr!0tn3*ht(pd:^`s=2q<1cfL>:9*QbtGBI2MNr`d%e%1g\uM8D9O<C)EIYo5h55pY[nnJj[^CSt3,)mOI9ED1e)HFc3k%2s:9*;.%Z-)Y;MYrq`"E([mW)p-PJI=,(^M1@OnmZ=4%,'dV):)==hFM-=_-csC]@?GeRXoD9#,\%%'$g8e_Op56I;!hU+mFW4%"%I84:FFoo[uN>?i%AZ='GGs-aRat&Lm/H/+aN@i!rOkY+0#mi@p?sNg-6$^_2.'JYAb3NbaaK3$*Pl=-'Zm]A3CGe*5Fo+q>/\HMP%DBm$aBlX$E$p\pdoSBhZZ*i2H'9"_c7EZ"W*Q`-LB]W2om*VVK#;RPuRIH(K<N_IMbslR>RM1Y?+&6<i_X!3VX7]4A:>P<[;[3Hn%`tq(*J2:M)$gda,nTcosmp!uscPto'*.B>KA<!*eglY9UNE46Jm!)AoI)-$LT+l4LoFpK`$q[8HBQX*!?M*jT^4,n;?WjR7,8uSM%ZT=BiY#M)Z+Ki$n^##&H`(7'nON`$a:VMr-<\:L!=g,e>-"][pmF?s5&Eg_fP)6Bi$C:#VH>]3r4,3K`SUNTl2.KC0NNY1).0lT-%(GP%M.ktE&O?1SX^Opf\an4d%FK5mmL:6XlA:SkX;.$Hp]\V(hqO1X15*-A]<3cG`Oj:">8_cL2dKfBo59Maho1+)4--Q8]kE@"3%=56S&):r<2@MWqW#j/0`ZC%h,^S]hDJ^GkGZL]h*'fCK6IH^ru(l()FP_@ejYIi04(G&Vi1@]Kk^hP41!ZNqn(^ECrX#"*'aOJgT%K_pWI_$?t6e`,bNr$kCRb1tSO3VE&mbk.+O*E7SpZA:R5'c=#ef8(.$?/nM).%%3I/OqO&:%l8nl=%Du<eo.].4;%P+LhE?5qapV%X1g.(pbX:kXc\FC#%ZTVBsX%3Km+3s<MI1\rT0iK#0HPhSb*-:pPiGIXW?,r,C)SG7L@Fg*#L.UT-)dE%f(Q>$g"rTYVf/#HZ^V*%??<1/MUt/4Hc<%hTY2,if9T2b=g-VK8kq)^05?@LG]gf)YG]q0ZgO[UG='a53ek6\NHg6OC?er`?B5F0SCc60.Bb]RHHdnYI>@Xp%A_6aCo'5e-.Bc62%bpSV`)"IiRYi[=b,\&&"Qe0r9R2Uu:1hJ,OX:]sf`EtkQ.j'F;iDrN+auC!YE!/9CUEYmj!r<lp_iTnbEt2<%6[?X/;0ucb)W6;#okm.^%,Om:V\l%0$mm-Qmu"eJg!cM\)Mmuj*Q`]\B]XVClno(7$GJ#jiZ/oVD83EFF+e2YC)JHJYOom#H1P>/%^K<Z\nQh';@l_*AG?rCn">+7'GJs<[p!0\0h27_DA`jK^Gs2/n_[#'6HQl.ec?Ht0.5:R%n6Q"(,''_%H;(M7f[c-GiK`0>ep7V=%/!+nM%-%gWiH=MBa9f%pq6b6tEW<RCGkGrc_CI^_'#,1=a$+(q;UU\\=`T@,]PbJB*l]^"cb'X@nOa,!:P*S7o.>)A1L@QP%"9Au%!uUEr@,/LN(pAKM]/<;X?njZP]\YH*Z85ehEQ2d_S\o\8XiPap,>#4_fWAk2!fP_lN7[:,1L;j]DABN0fs*hf]j6nlHb9WfSoRe`%f5l!)`-4']dp5`gB=m.\ZTHpl2H)[#^4$Y6Z!F7B%]2Om:n5=3cp?H0+X,iWYZ:DnJLif(?5U=1F1Ktce4]qdE/a,+4e-%+6IB,^%jX<1527b&`fk$T@f?MYNhC!SZ^Z?=A$=jl![Oo7u@LMprdJAPRj,.K.#n>!:Tmt#t"5dDPfBRmq9D6obW*0NdXtq&HnEZd2fg5+4%@4Ah<kYdGRoHMZCqKjrKdol-mJSB.k2Z>cDaZe^Z*),4"d(iI^3fVU6G8e^Vm.E3$ON2APS!CBf^tA7_W!nhfBDLp#S'W]1EG8.r%hkT7qdmCN`.PufULqVQA6Z4cH)l'm3LOu?h84#JV2lG&k`sP4-Zh\U67ao\`:F$]F`^j1oMai+(3MI))HWLG\\`\U!bZn8X2<e+G%=k:;NM!0l!p)^?9bj4Lf7E#O=^P=:)f6XpST("7.lrG%W)$L_#hrB]t^%Qe4X!i:n<HYFlcE):**\6W[a&l?,Qo9V4A:Yuh)4<i1%:<(B98BV1^bG@/R+G]K/.LPO3<lnE4OmTOSG29`g0oJ!4a31RE@ekSEbC2JrDXMS,\DOF\ahK%t@6Jfg.JnA=bXOIqK<m`!b=K<&%[6_Qq9]*Ao5a^p1+?lL"j]4f=-\rI+#uoqK3MI,Rh7@Q/SL^`5TU@^,\d;D`]771#j6KcW>+)p[)7'tQCFO1T-%GM;TV(j57]U!)%b[1q92Dd#kj1UVN^u0HE)arhQ:9mS?a0M#oD(@K3kj7**0;T6\_YdUp1lpT@Bk`*Y(?>X&&F1Gb'XnoK<@mb@e)/'6H'oTbGHjdF%%F>Bc^Q>A3!=ch&V#[SFCHtNa\ZnkkG*0dY\lUVGmo6g5X48qTINj6Wb#i4'52J\.^^F<-Pp2r?P1#b%h0*18-+;!Q_UI)YfpK87%?/>o6Ji`Il4EMeI*_tG[DR93P]q:+aer4;O4L*$:6$CZ-?uET5EY>sGQ$LcM_/STdDLL4o<+5":3uMsOSp^n;afW!3M3CK'FBoXn%OT:+R^49>rgX;aG[",5G!>?aj;8M3D72k]KI'Hu]\Xfp)UKB%F9E;Z=Lp-e%c^YSY'fk6.;pSH3!,fqo"Y1'\#-3hrUe-m]X=CVr%B3M?.JAtambZA`p4grjmeES[APMq#&KLe#K-+GhHIMm*!""rE8POP==7uTBE`/][RB^T11?"#C\-gn;:#PL+C##0X`#uW+,"5I-b%I-:-sCT1>R^#eAo-o[AS/>Q^p!`_V]ceZF?/Abo+EuX/!;kWj?hoHEjj+T5Qre3%o=/T]fC_T;ZC6hX,?XYJ"Fs,+]:a?ZO`2Cr-%JLQ>[5jZUpZ0%h^C&R`COa.6[%45S+m$lYo-+*jR9H(hSct,c\784?'Ls3eD'Mt%q76rpX/u.\B3;-(J\0"XFK'G[@;]tI)s/IUu%k4/Utl2AkK=&_SLH+-Bk?O4!FIf8SlOo1IVWa)*"';MK;d;tfI*7:d;"/pjQpS*,:<!(p)lc?]#(ACR6*rO9A1tdgsY&=$3o/(-^%(^ERs&%4e?mZ9mG;k0eZ"h>M\n@"UCBZ<`cP3']H&XN6A+eAZX@gp<A[jUqZ!U8P]4@8*N(p/1Kn)\Xqs("Z=n&:m)ZZ5lJ:5G$L%OUIFIiKA-DlZ;O2L@d^%"L<l6ni(f4S+P;2[s2iq#*u0nIkM,h/ZR.s'-:DXeG#2.q:XYf<tADO/"gfImEqntICVS#"3>Q]."h&2%g[%>2?BnC`=U1%`!gcqj_Od0p:Fd\F6f.^!4?sD[cQOV>3G':!+*d%OQ<eg;?T="3?lJ=uZU(Du)E8^_7_gWf(h^]N"Xn&<S2-@4%B!JT9CJ&k%5b5J5Ia$Oh@C!TNHJ>d'&q\=^4IQlep%S9]Jj9jDG##iUdDC@u\`?-tr+8<a"(X5pcZCN;C.GV.%eO#,(E9bt<-Ifb%-1/b8)M+Q>cu[CBd3H$q#L]dOo<GnDNFIBTh#+^P5DT6uX=gn_)b87LUgBZF[pl@@r>lhb$,N^f@B7L(6t,]]:j;);S:=3SVN'Vr%/CJ*kUPfH2m.plmq[I%`9ZdNEn]Fc8DX5P]3='L+rO.F/_#6=HpFe:dr(I:nMaqlr6?g>l1LWgbqOBjJF_#-tQ(8gEB-=;b*taK:%CY2+A$FuEljXCWan?aAY;R,+*YM'1p/3BtMj:uGKI<(C"'I^BaX[cmJ;PLL>WCQ>/r;CI)47tTFq_C<G=G*4#fkQHhWU9*;.t6m=%QYfNc,`+`pM/n:geaeY$H;/YhU'6?Kl`<em$P8>YkMhe3J[8S1C-jC0OR#enrRRj;_f5@>SU0]GcOe$Z+>Vod_gYA9f.W?PDBJRi%>U.h=+--79]`s5;*#EsWPDY"/MH8G#T@8AW[3CdE.F\0[=<43ROO>n9,!Io@#@fBk="B$pDuJOf_fK"jr-Q4G*3k-kk;Nci<!7h_%@lrT2a;;Vek/JFDSlm_F)hFR=Gls0e[+U[Zg*.RV_hG%KnlJ.SX6@8R&mlGW6^ag?>JV^tZesKb;0#>))\!r_]jE[a((8LMC&+./%Y?rV5C/.X/=mP"$>R0CHJi*+<\aJi`Y'^*rf;OaqjgnfkEkQtDF^%)l\uec=L;,FcFdkVW3fp`<k>/Y.Herd;s6^E.DYHr;hEU*?%TCu3dHhf,B^&F73%-13pk&A)r3i9jWqIAO!I[SD)fBD%G>jn;*%9M.cY1rn(f5:JNlTe^X"%b"mrKQV5>cui[.G*tdOR)jDY0Zhg%\V:de/_BK*^?)rXT5oo/HHUFR0%YZmf*1;W*JhlrIdMnqp\Igk+Z"&Irg:@%?RF:`qY<8KZPQui]@.j2A$?Nhf!/R/?0g`M!9C[.%f@Q'Wka&Qh>9.8Ah(h<\`V[4/bNhSUisXV&f^['riN%:EF^]ZZb65f8%YAmNCtKI@<p5ILB!?DQ]rMpM&KnT&(>?EF%0Z-OOUL9g%:91Wo7lUL_X,QhakHTuN>>H%>4K5llhg56,G5e-I@XDSiGp1Kpk5,7u$cp0jliIiI2>(diVUV`k.?HSo6I8f^Q<p[I7UrI*97)oL%5RJq;Mp)*-fQBL>f:.XcC2rh`#e;HA&.PUfn$I\MW-/IbP@@s@Uk9Akdcfcop0:9-Z.^k=3XCUJ!b`7A@DHYe7@OCLf,S=e[9epQ%?GG3@4[(h%Jq`b^W,,9WYW<cNX.E%3]c0,g=FVP!c<VREI<V1@3`tTVCDsTejt^MM4f9`qj0KV^oWA398#`[UTFB0/$$f^J,1n;`%67)hVXO.CadCbN`_)Dg&3][K[IW+?nl\fPl/scJ+<_-:l\lRLacU%/4gX/=WYn^i(!_LK%<D55?0Ik;fJ-G(;@=TMMkSJnQ>(0R]%9TP06:`u3-_7I/2_"k_I5lYfgXP="g?ad/qcm08+]:#6OOP'jGUJ&'cUQ;)jHTJM9q;MXC@MQ#>gD;E8pD\+oba<PT0I'to`&qe,%!HQ]joQ)t^32K*KUKPX"/Y[Ir"9.#Qrn);#BLP%mTUXgolJ-==q7+oYUV_hhR9Lj+7@,4PHP`FLJ<@H79IStiptj&j$\WEdogX>$%qcH&FWY;LOJc$[7j$(E9+nTOApDG!X<T#LG"`iuG#_(l%L6'htSZTKFGk47L4aqLh%qc#H0)k.e(@h#+7SNTEGU[pR^C%ljL@5LH%iS>8AKTql@ZnH._[fm.\T7bh*YR#-s-N8h8O:0A0K7'q.c[q[t'mP#IO;erAPi[UEmee,t93<F^)NZG,<P-Q9j\.k^mo-+sdYDW_%)<8CI!#WfXk`%#B+3\5>/,^A5BZo=]7-Nk:1(EiE@1Fbg1TZY26YS^(_I%4l6P[\`%Aq3JHHs7/+P5DSTlP\-iA<D0nu6%)7@tJ.%0bY^r$k+),1c+W4jX*]Dj-UVOO7)k5Pm#d9/B,OrT=YB5)6h?eY+2QIcuMpuh6/Vo'd1$0!O_*.n.u)eN/Ws/D2%'4o4)Y5`*]X4%D'70U<XCHu)3D*LiZH%SRbhEe+qHYmB@$PW&_^1*CTK]:%p/O)g<^/Qqm5l1`/.?#$6h$/A.@Tr'bg<5&cN6PM-6't>6PDPP",l_%cTNLs[i&;%b7GNnn9an[MuUB,GQ[M1()0nZjFA<mk_7e$4<p(_^9/N5StiLae`n9h_GqT^eFp=Wcg`X+n?di`AH[6$cP8f<B<b?)%oI^cj?`bT]&&M$,n]eQP/Jako=IoDF)Vm?WbBKI2Yml:JG*dU$_749>j"c:\;jPUc<m=-[lR&&339HW0/7B2C)6JXfd:/O:_O2KL%6S.9=*J]?IX6pmS_W6_`C%Xd9TT*dZK+@`XR"M`,0P_#J[eXc/7"EK#B*i(?L6/HrD.@.TG*N[FKGaijJ'Vb"?:\;S\H7,tGh[;k%D.72EG_o%X'aV`@9N*LE's,nX=$jhK@A'^'lB\,G_[5cLY7_b+-L-oP*,>r0pqf<Gs1l'8m_DjDROb]#hFP0ZGYMLZFHD>_SM-eA%\R3Zk;nFF/?%Nu\gC)DP[2\."nt(S2m9/;*7VUQsBg@Od`f9H$DuX4c#2IZqDDN8`/qi36]"`35:#D5C61]D&DpA]R+f5`W2Y[1<%-<r='+qgqXnQ#RiMZTMk+NQO_DC2IL.`:r/WD=&77GD1A47UoU]5tRSf;B.U'IsGnR&Z,_72i$0()(4A<u[gKI2'Rq<ZpTJcAObm%Q+HR'Z#0Y0oiI,C_Oure%0JN$h!6>28T2chU,*/o$2BP8Wi!X\`,6aZf)bPD4(;r'gXPk5:hKjGqfI6^(h.JsjYhN@`6a,a(C1Y7%+qXP_:P?/+(e!knAS5de:0a;'<i&BV&%aNDC(.q"?0%p5Wqd]jCNRb8drnD*$4/4:Q3(Jo1:KFfNMlr.m6L;bX@ea]%Bm\(&`#>$%aE*s;\V/c]IpG3<.Wl@H9XdH$(&p:KkjZjt)T+EH"E6!j(mO@S=Wu_Ec+7tkjXU\'G^7FRUs%Pl3A@P^&,K"VIX`gR0VtHJ%.kal%]/i,]+^S&!352ts5RdiTkc2cd:V@gUO:Y7&RRGjaf?dt4>U)ZJ(daY_<dq?SPb1uGg#eH(?*!BFfjDKb]5)'u$rcG`CXhE/Yi5p=%PIuXcTKu=j?8ETj6OUa6:4TGO?6i:8Y"UKr%IA.eY\`hL[N5i-@*.5MYrs>`VpBMRpt%/@A%H!c):%7XlOoQ>58h)?1qjWHD(1AX%^P=Yl#q:g]490O[LQ;<LcY6rqbbXaP$Pnm0LLqk1]pd\m/gdBm\@#RbA%,LV2ZJ$J0F86LE5K%6\[A6Mh:?Y^:4FI:!3$K`+Wk0#%p+F5ob),d`$/6(`)Y>P'VI;5qB)d`MhX-Ut[CUe9&]9J0&4hi_^%:$$m^NL[hYZ%0R=<)OadI/8T%S\fUUE:b\"<e9jC(fqepDk)%WZS@CjjB&H_>$X90[3C$Bn#crr9TL?ftYbWragQPchX7>mkm>;I*PMNHdc]ZCnLCb3C(g6JRWX>3^#]G%\tM"I%HhC@W"H?clmg,%e7bgqeEr![VP\O5"A+T-W*ALT3/Ck-Htj-,;c>9OF6Yk_q)3[E5$=r@E$is]2l!Vkp:M*uF#D&Pn#$"$":5(]3Zr1Dg=*F*G7>sQ%#\crp;oNo,"16:@h_*OcCQ+USkKSVq9NZ7O;krb12&%s=Ad6s!_Zf+Ra[G,W0\VpqDa/tXg52mX?0PPRogR.0//c2I9sM/?VT6D\%pZ/O8lNK#DYO/5Kq$]mM2p0'+]D^CC^OFl2o,SZsr:W$q"7%P.]ntOtm%'5JAk\S[]ka[GK=FLb[S)a;amNHNPMqOB=s5hV/%RQb%-c?JO#r9CW?GoeXEA_ErFX^T=&CnJ"iB)2;XEH88%,W^sL2S3:B>ZZi3aRPZNps`31qH-c_`*/;2LM9d9o#lYO.&L4^CY"N:584@%\#MPYX*U[Z$OkoX)!R1lhnUid9heq:B)$fuISKfD5j);cXcMG1;r-[e28_BL4+"]lEf#a&n^V;d+,a1ML"Is60B?rP5Psq7+]IDJ%_s2/PC;^2K:ScHh.T<+pFmq"A.tEg#WX_$V'h6)qh6YYM:dm!i<d/#O,1q>sn_BY.$D(@J0iTqQL8lJdU$A"$<1CHka&ZfN2OK,*%MiJ<7Ng4r=Unc:nr&]He1W,*DqXgh4)'FR,l:<8$SlUWdfUENP,Qu4tjC\qg@Q^2`WmCr+5aJDNc;K?_j)#8,Q%A!AWZ@lhmQ\$W%HW:t$YuLP('tIq"@];EJ/Cbi%3o'^QKO3R1@q)*S,X*a7=K;;0/j!mR<#s(3eS*LX45!IinQm*LbU&Q)0Ef[R2'J88hVOXqFsNM+%&nf]91t?d?NlJ.WX'kNg7\8Ik'TBa(jXaDjY[cS*aO(5c'eBQjdRh\=0SJZY_c"JHMhqNG96L)e1bn0`V:t/cl+p7\9CgG/e&!D,%otA#/W/C*ElU=cA/q[aMF!mu27YZsl9KaC\Ljra.WZk;33E0"=cuVjjatfu3Z-AsoXa/991pefH(0&gbPpe)kK8qok(#fq0S>qH<%63pOe<?(.!5H(SXVs]T$.->7nGkuLT^4)Kt2c\CX[jJ-?W.Bf*$?JA]fr?i*<Uo@FW2a+g/DJbU8dJ],G=I\F9tSZd0L[\J-Nr3h%^'ROj*4R$2YC9;J+d8`@;ftWq=]$M0c]QFNNE3^6BEa\f/fs(fo%2TY5Oo@Z+l2HQ<COZbW\]b/Fb)-T58#^`dq29RI,$NF1som7%.O5;>1/V&`:CB9#n&ZO9YHM:[oJ`f8&)f_)OcdPP4Mjgml4;i;<7N5K:/sGdHap(Y\G&eX5&AaogkW##K_quRO)Q0fC@"Ra;n)pN%i?hq)-/@R^rX`u<<F<VVIgYon&16AuRXGM:iN"$Y5((m+gh4ilE5u4oE.?*gf.SrVk,\Iqmep(oa]ElspYi/"i?lb?-/=']E!MPl%s8"2"J[fZ_YPLVr%q"u8p\lVskOXjU+1c3oW]u3,FOdj>+-u.'mQb$e&!FXZ0Gj.B9XmYqr?9sOYBkkkI+=R&^F)gor@t!!^++W?%lTLZ>g>G@]I+>LNglnoK]uuP^o?46EBaUee+Y7a0H>]a[<osWF$`XqKPuheFRMFUW7l"G:CQ#'qi2Zpk?@5`u-!N%:W[#ejKl?jq%EkZ8gi25';5NdFERQ?o5WX1b7ebGdM@`r0!KNO&-o2UVVGF0\X.8QW3Wr,6hYHGfFFX6QYUQohFJV]U.#aE-C<s8eBBeR287mn\A%d>+pj8EQtE<og<umK<tfbdF4,+9]D>n+4)@l_#E#k_1_:6P*9=a\+.n3llTq6-/>:4nm$(kLTFFT'\G"?2IIH+]2;/!1^>%``I%'%b%aC6=[gmi$htrX[:r"f:cW+[elF\+X$i3&4mZIE5YtL,PT#]6X3mro"+O(f")sD:@9)Wp@G;E%oe,KZ3dfJ"N#fXtBm'3NfGMCh%rjhD!?Suaj++2W'U658O2)(.MU!!=koHj?#?lNOQc<'C:!dfL)!]jfe44.''$(.YY6h[I-1F(*tWD2G]h71;ZX5Y,;BS\f;^?W31%3IKAC>",o';7C*>roa1!a"_)fm<mG2A@69%<LsDL*5ZI:XbqgXkkm0PWYn<on^n/K7:ueAj[E9WpDX]QeWEO-NE.U\VWVWa&&KeR%)MQt0gZb275D3%o,3pDRSo%HNLl_6#-ELBdY)l=ZI3tF"$kZOLDBm@_&;4%R&n1Gi3qQD,<+*m@81_iC/nDgK!bJl%euKn0WYl\W%)jaqE<gW1\_tg=d3bIc9Yc:EQ?K4CTeTSoF#U?DXW52P0M"=VJafWWc2.R]@C2*3Zc<%EFZWi3h\ukF"`)H'_h>;;UV@!sU=*4rF%+RrHu*@!*0WW_&"FO_U%M6<kF@k=.Pg3'o2mBBS2R0]q<8.h[M6i9'O<UC!9&73KLbQJ\;,JNH6L0/iROceU4&6#pH'V*[1SCKGP%ihqggbQJ\;,M)/$SVOMZq]!'`3)(.Kg4),&eZYDf1KV!GZ&FmFX32"`DE"5k_SbQXTs"*5X0kZ?RRfUcmV4InCBf"U,rZA`Yc8s.%QY<CK#h`)A\Vku;'E'i`&#@f(;GY=%iBX!Vf:-I3"L>V0(q2g>6$#k8@7?_47tXerk*--*.3VTmc`(Kn+FS9d\/"aU3Q+L:JFA4(%9<DJ@][p9lj9K,t^Cl8Wit?_"P'2cf6!hqo)knSR4[gd\<nBLHY;O^p84,Fopa]Dp27FM(DPcJ3TtbZ]Ih#$SYOQM\l<(eFY`A2,%SibT[7^M?u`NgF)ake&5M&`._KL(4^PASn,^=R`W,aoY+A_Zp`Yr;AthN>#u0d.Z#^kL%P=@<R&aM]o[/j,Ke67O8USQ/HLZJV1<%b@j<9!]Nd"8<4;l&Wb[Q3tP8ADe@^Z<^ka+n&T\+Tcld3.!uQcX^]Z9Z<?QX=dKhbK99D#]<;Zsnpm0"A]bUE!r9C+eHGbgj>TfB%kFCE3G1F0FX7;^QHiAnQ].'R<@iPU!3/8BG%"\,#PrtMNBQ/I/]&u(o8[!h)>gla#p0$P*6]<XTD$R_qqKO6GbW-")@#1sLWs+:'%RYG'Ak9"hGI@ZOLd%%86N"o77?8.;bXR30AK5ujKgYdfGLj64l.?E&Y\mG=S_D5VGlsNgJ(js^O`X!`aNV7kpFtThYjAlunK)6'9%WF8/IUsNUb6Q6FCp:t`JUl2\?<k#%d2ZA'dhWLl^1_dt%nF!?5<(K&rSY`)X%*KY;Vh.;'O<$-nQg]j8Z\4F@e'iDI0IYknH.Eu6%=JeW+1<`?_2/IkZHRK/X>'a)B<d5#uV4'.AH_j]P?U:>if,CA6Z/)1]fT_9rYUQ$eF)K;Q62FbnjF;I#27dX,$H7CT\DWRnR'J38%QUm_.d=(jTBoGE>h/cet8F%knOq!OsBW3PV"0`+VAM"-*>-6edCdQtK5&sdeN/FQb8!+>_grSi;i19VM935IN(BqFfCQ5Z@eFN)K%S4;F5N`.m(XgrKAQ`p!]/spd\3Rsh`^e7+/=\1uo,KLbZ`!-(9bT;B6gnN1cU7qae[,=T=hI0.$L?se2d5b'f7=0@.ARCUL%\E!m%m&?G_r!0&*oe+S$-;hkqA^35'`][7Bkj>f;\Wi`:Bcf5G]+E0W)U]7VS5Xj)Q>s&3e>VVnK$+kB;!M'DaU@.mY-?bMl#s'(VXZWn%+bu#*ii_bdF`:K9P:7+)WUhT\961e?",B>hpS4qNMe.2\B8Z@[YBNV5F[(nT@Ja+Q>Tk*MK>OCp\,A#cG_8>U$&W!`!%`aY),h5T%Vh743WWfL5DiuR,;?JMrm62:FCS@90hmm:7s+QgY@:7]?hp\/oURso9Zd.4q?\AblBn"8LCBL/h:#W?]^:PH7)LJFb]i?:&oEmb>%K!rK@f+B0qF3IJA1"'&N<O9p_"=-90riG>.'q<2V+hMcW*^Wf/dco%EC(NcT2_sV,6-.hXE"/qdQ`fg7nFkY!;")=+:[UVH3NE9O%a2d;*^2hn=S8.Mg`X6m/?%^!J;bmH^W!JrdUs<*b/cq3$Cf4$_2=3F8/;LcG<"i#,c6<(KVpB'_RC`>$=,fUc"coSlJ0k.H'KP>^%EADD(?+CJ6p0;:`*Sck]I54r5.0ET2\[s`C4V]/;;cp7BA8)b&5im_YZ;-U@i]MJkaFgeP)LGa=G.,qd:#n%A@`;/+>T,Q_L(mW0%3]"AafkG`170YjMiH>AtcV<BOO6nr$gQjtBKp5[F>.Re$.0>Rq(T(/0ah09<j\H)`VVEC+<Z]/[I=0Z^?3F>Wk&:@QPudS)$2s-4%(ZAl<:LV!ej<>)ib[2s_@[E#<)94%R2O>''#42O*m6DVc[]U<aOb$f'j"d3cJSP9V3R>,_jOmd04I^,CB5>.<mCY4#L:a:ml:Klc%BZ2J0?!+I<rohI02lG=IcEo>@NR;RF,ap;_)=GE^_XYXAFCDNic%au[3EpKnD-'b0BbJc.W=2g[_AH'?!Ua7\3S3IKEMO'>4>ANN%dcO.ED-J2.D7bC*Q\WV;X._?r!/_q:]V\saq2@.:abmI%<!o\rMXdu1V7ULe1b>C.""D[LGWg*5J[FrVqBbY[%;B>EjX0t8Y8U^K%=)nI2_.IdeL((#;Bli\?Kdj]Eg=T<^T)+U-`3gq%TR7J<pV)`X_6cdr1^cLf<=.C<rDh[A[V2&J[,pFc9Nu8mb-XGpqOGC/iTD3[%<2PYCl=V<n,3,B\k9[!bJX57\18G?_F<?]Z+DnLW[=hWrUl?ZNEV'rZCXZI\+`4A!dPbl9V+;Q_e4U?i%%5q,4Q[r=gark13hfYM%NIgY"GIJC]q*_T8dmulrCJM7AR8qtL&oG]1GH2CFk'^Q6MB%7A8sT@rm5Z.L*'"U_&Ka/d2Uj3>FpVhtEd,_F6lT;8k@sI3VBhlf%V,F#sDjk<YTFL;RYkG"4)JpE,LnnE5^KO[tj$G9j#2NldL$;DuK4mV\c8+b\#e`bcG%+fNZphAb<Sm+3L&Mm_/XposAg'WFKkVLR%Q;-+i[P2PEg;7N_B\Q4-4drekD.2-fZt7]EU+K'n=LHX+ok2_`9hjAm[P2P#g9PECd$@@P4dre[D:u9J!+SW$*_b=5[VXYpib$nA%.q[L2Fa&10T2.T(B%lRu[#J]+e$_,%2Jo59_R)Zbdgd\3rpaCM+dcs_cB_2ZE40<2ld<*<o9*f,c^%Io#Lc_D/Xs17BOTVgQt_<g%*uCB6FsptV`j97*2P)KogN^0*QD_m;]r9:JSdd@6'IrWhcq)_*c5+0'3*Z@kUO0FKY)JhLShf9J:G!%;otG2CBH#+7#$o?$.(JD3%K%Zr.Bk0Pafr,3QU+dN$&s!7'\WU@/8>S"E&i@t0s4lunBpu.,ZXqBh[e)jufW62b=n,UZVTgD;Nq]UaNEp!IRhS!OhdA?D'$QY>%.Ak+Rmhp%2iuP%f,RJ>0SC:oT`iqf))M?^J8MFAE17/LtG+V=.JD">kl9'63%@Vs0h\9>clnFnZ>LQ3D6ErJ[E_24bUhSc<%'q*B%d!9H471\),EgY+)%(#%`i^(nJm"HYce%)`".$m+f7bKb/,$&*ED#PbOfhr;"AW'N>WVQ$#!ml]i@Q'ZsaG-[hCb[aab*E8d6eNZK%TkmR%<Tf-m*iIU#[hla)/!Na:K6IM]b3#.6>d'CO]mOKnHjbt?T`K,e>>[<Y4&EAM6m4E'fd*6Rb3>*)f5.4t;)XY.jYGOd2HLO6%(9'FN]X)gj?*R#FRe-]:ZE^m;$H:+bgQ[AsV,W>Xq9\.Q)fO&jeXe#/`dS/>rm%fd$=/@g,aL$YdLM*3%O,.;bJsF$FO2l2MtpoF%\Ukk8:?5-SIdX094gAh[6k[\_M'2sG)9^%eM5l4M=Z0?5AW&rGY2SItn]?ZraJUROZ>AkH-a,P\i/==h#)=O.[\iY0bQf.nUG<Sa%9%oM[/crAq<nYZ)F%B^t#h#X\Aof97CakXdCjaWeAg`-FC]'^=CoT3o#.)jF1LI7'T9cIPe2[t>EfGE3NjE`#MmG@]fiWPh*50;D%7^Ac(fbu)$*@p/dm!Q(jfG),0]?o)c>gj4*S8D3gpWdoF26.\6fqOQ;B1pBYKb0MZ3*T!$3*XmlTkh2VZ=\5h3*XP<Jf:+FS;eh;%-rIITKAgr>h/TkPh-R'r"O7bbL#Hin3&-q?91>?2Rh-0:6SV1O#(F8!0V'esf-NN_qX32n3pAukp$(Ho-O:O+k#sK5S';%jTjp/^%<QQ]I`:[OeqKo]\d*Rtr8!%+QaU:N6]i6,G/([\EFejKc^>"Qap)]<^mS54XY!!n8R9!@%)P'c-SX9S8_LZf2X?kA`4[F<i^ZNo*%a=qu7;5OU>0[AB=K@cUI^jOP7C0(8q6K85b?/Vc(cCF@DYIhLCin3@c0A(`N2i70[hQb3e4"j]!%pLSi10$ak%Q+YpDJp.%WT?N*%/THi_.At+iQXCf-nZk7U>_u0X.32[lE9^b]Pp%o:]p=mT_cUoTW+"FkJN9tQ>,qD4XU#:m6$<FL_kuo)V;$&O1"7Y3b7ipkIFA6C%Tu"")ECCI?U5Uo:i[;u.ngk&8_+jB_lI&sa<]I77FTk2^=)B5MhXt/Xd%fk'NCCY@.H[S%,"5TG7Q45=`.4e+-6O!&!>568AO2nE%I7aK>dTOr\n_(8r&ILC'fWdnZ6q_t"5k%'@C=J\d'*i=L<+nV+-EW^FC`P)XQ3U?+DjtoD&,!po3F5gc`%,?C;\75oZJJlKP*!52%-UJJ_Xi5X#3i0fVC!/A.c*:C3Z]t,o;s@p`:D[0?]O^gfOcgd?A(WhPOIRhe")@95GgG5;m2\qKfjlj:/uS'rA:"Q)d9>rQ5TEbj%pVl&X$%mHH%A$+GDQS^D,?-3aqIK*:<U8>pQS$8-hVG)pm+oG.m<qoHmo_AlIk2tVpIOZEN^-gWQ4nV#HZ+jZa`LC`c.i>>N-",L%nBU`<m3X)gGKF\"rgJiI;.7ELTEWCkgH$>=F70^f4*!5*[Ve%RAQoZsC`W8eadtuSH>$aQ%&uEkZLp$BD[P'XG!Wg]9M;f8RMj#B%XWT'YLLf^R1Kt+N+TmMQk`kE0Or8%olYPq'*6.8(e\1p`Q9#K/:$J.PB?cCk4fsijDcG%T(jg.H)RAe)0rBMm?7]@`2Va>h-#58+%AooA)b2M[a;K_"OD$D+pcic'FWQMG.X(nl"/,F=3c8;n@ll\%R&n(!<o(]oaXIEW0&Lf$(ZAdPVkNV;M0>?'@0DS+Xq9@04"BDIW%r\-24?FnETjq%1e:)%ScF%K]9"]2dLVEm*IJAesLII+hfE9.cIcd1RU>!s\FTun"!5K=0`\1%oG?H'5Scm2(@11&N1=SYjLV<#%0%U#0``<@%KVP>K4:G&(b%^b\V]p:gFG?+ZmHfqM,3HsUJe#d.RTIl3)JFTP*C/a>G=J.N^od<AUobq:UA8fk!.i6/#J[A]ZVYrQ@5%iL,raPdgjhL6YqVN1MS9#k#E\K$05:#Y*7>GaSn6m2`coP<fKB\RVJX.e5KBa=\b?:Tbd"&XOS35H"9?#T_q[/Bfbe)dR:Q3)hT-%@?LD:_W(^#aCG3$T#qd[G>i<hjVgb\jDC'LG2Z-?VPl(i5s[Dem8@V%.N@i$$j"5LNDaZTaCA/@in?O'>e?aZ:\14B24Mt6`i"#j%P@EW\k68P'(/^LubX6D4AL5La`R6%]]#9ot7&)QA9&nm?K]Y\K,S\8;Ud7[gTKj;4M4u1YN(bfU13$s5KPU`,TO'qOj69>R@jCr/%VDE?fQ]WGS!l/k7/P+E\m-,;g"<B25S!WoB*CE.?e`C;?Re=^+2\5^hojLh1PXl2R&2t/]R'?ejFm]UA/Q_!fpAoRipCsogh38h#%T\:]pXnQ+b'm!Dd&4IYA'=91hE[n[`.2BJlUqg"'5o_YXe`J?i^qoFkPeeXJ*%Q),+EpDnC_K_M9dHpFlH;^*lK.;8-I!#EOW/8'%\O08pm%&'#6'3Zr_D#&rm_"I-S=W2Y"kZq30$D(3d_rMDA)Mk%<,^+]Cu0,G^A3)s(i\qsEL[V2f(-1&ZmIp^ZmI:,f:[6_G+!0"%;C.FEm4C.[#s)qIg*no6`1n1Ojr-%/gKR39N*.nsD6gseVQKC("om^q&?![:Y33Dl),Uf2<rnbi97Y93%h?sn'gIGn>ar/dN`SfS%7E2Hg0j>f1S!BgkU8OG&[,2KAWEWb%6SM_tb&,.U/obdhUNJH'bQSKYb/U3SWn%t<\XtT*1X%OepGpRrOPVh4=.4SVQq'"hjb_Ep%**+cJa5('LYg+"D41l&KQ++8MBjB25M.i<N?#o8[H[b[Rk!''Pe39K]Z7c21V5o<J8[haq;eQQM<IW&EKX;9?P1<r3OhW&T(sR/Q%%h0!;DFt^knt*nIl]c_toAFmoR?4:FH6"/1*ZX$'=bK<+0p+G=C?\]%.(mpr-k<(kg3n'4qm_LlD)#J6kEP^L]5lB;ml?L:92>+i%@8*)"5IH$sR=PgPah0ZETriTp<8b]]Z0,80cWAQE(Q0(Mh)]k(D3shdH2Vl.3>%TU?*XBlR8YO%N=F.FZ$=_97p]>(bBD:-[c*-7%NtSESj5rkc'_TI`)SND#'+ZY+T9[Q]rNl'A10)JrqN3`[<W]H#:!VAmTEGb+===/2Yn#BN'6dsJV$"PqD1Q\dfI3UQ(((T<,\JY8%n$:r;g2k6'Z(%K5f]NJ"ldA>kc<+aPMlSWLq7X7nOd:$$,f_sT"WqE7l^B8&5HO<TDsX?'Rs`Ars!o3GK-YqN5[]*glPfp-[j@Ah%IG=Q(oI'Z;5i<`5qtBP=^VBdGrD.q=iR>P+J,SfI[uVX2q!#iFJ,9$+Dss=5^A[iMVgj0pnEHjCnC=02IfI`L+2<:(jW?^:rVYW@%^]+-a./-4_q8\QRs5A0?rrKW9;d9~>%AI9_PrivateDataEnd