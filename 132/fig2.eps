%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: sigmadyn_5.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Gary Westfall
%%CreationDate: 1/2/09
%%BoundingBox: 0 0 536 366
%%HiResBoundingBox: 0 0 535.1832 365.1148
%%CropBox: 0 0 535.1832 365.1148
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">sigmadyn_5</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-01-02T22:54:01-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2009-01-02T22:54:01-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2009-01-02T22:54:01-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>176</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq8V81W8+mR/n&#xA;K+hILW7/AEPa3POL4W5ta3LSyAjfnxqQetcVTKTVv8JecvMa+XNOhm09rTy3DBpwcWln9e1LUJbB&#xA;X9SKOfj+6eJnYRsSFHtirLv0l+af/UvaH/3G7z/vE4q79Jfmn/1L2h/9xu8/7xOKu/SX5p/9S9of&#xA;/cbvP+8Tirv0l+af/UvaH/3G7z/vE4q79Jfmn/1L2h/9xu8/7xOKu/SX5p/9S9of/cbvP+8Tirv0&#xA;l+af/UvaH/3G7z/vE4q79Jfmn/1L2h/9xu8/7xOKu/SX5p/9S9of/cbvP+8Tirv0l+af/UvaH/3G&#xA;7z/vE4q79Jfmn/1L2h/9xu8/7xOKu/SX5p/9S9of/cbvP+8Tirv0l+af/UvaH/3G7z/vE4q79Jfm&#xA;n/1L2h/9xu8/7xOKu/SX5p/9S9of/cbvP+8Tirv0l+af/UvaH/3G7z/vE4q79Jfmn/1L2h/9xu8/&#xA;7xOKu/SX5p/9S9of/cbvP+8Tirv0l+af/UvaH/3G7z/vE4q79Jfmn/1L2h/9xu8/7xOKu/SX5p/9&#xA;S9of/cbvP+8Tirv0l+af/UvaH/3G7z/vE4q79Jfmn/1L2h/9xu8/7xOKu/SX5p/9S9of/cbvP+8T&#xA;irv0l+af/UvaH/3G7z/vE4q79Jfmn/1L2h/9xu8/7xOKpf5h82fmToOganrl55b0aS00q0nvbhId&#xA;aujI0dvG0rhA2lKpYqu1SPnirOsVdirsVS228teXLa/m1C20qzgv7nn9Yu47eJJpPVPKTnIqhm5n&#xA;dqnfFWMeftF03S/KMFvotna6bz1vy+VWCBUi5jWrJVZo4/T5UoNqjbaoxVmlqt0sCrdyRy3Arzki&#xA;QxIdzSiM8pG3+UcVVcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYn+YH5h6T5P0x5rkl791DW&#xA;dsUk4ynmFYLIBwqoPIjlXMbU6mOIb83d9i9iZddkAj9H8Rsbbd3PflyTzQvMGk67Yrf6VMbi0Y0W&#xA;YxyRqxHXj6iry+Yy7HkjMXHk67WaLLpp8GUcMu6wfuLyXQvNHm+81S20TUbzUdB863LaiFgvog2k&#xA;3zR29x9XewnWKWLjCTFJw/lB5CQgEzcVkkI853Hm/wAz6FaeZbpjpem6Zc6b68WnhWuLprsOJmSz&#xA;rwf6qgPFagFqdqKoWL8x5v8AldMegtqVvJot7FcaZb6ejxmaPULJI7pppBX1FEqyywgHasXvuqkP&#xA;mfzf5k0rX/zAgi13UBNpf6P/AMNwCC3e0S61CEskNzM0HpRwNMypymkWi9G5UOKvaLI3bWcDXiol&#xA;4Y0NysRJQS8RzCE78eXTFVbFXYq7FWK/mx/5Kzzl/wBsPUv+oOTFWVYq7FXYq7FWJfmijSeV7dEk&#xA;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&#xA;ztKQECDW7MsXLbcada4qyawm0+a0jk094pLNq+k9uVaM0YhuJT4ftVr74qgraeA+aL+ISKZRZ2lY&#xA;wRyFJLgnbrsHX7xmVOJ8CJrbil90VYx+Yn5keQvLmo6bpvmC/W2vVlhv0ia3nmpEGdBIGjjkUHkj&#xA;DrXNn2T2Rq9RCU8MbjRj9URvsa3I/UrM9M1Gz1PTrXUrGT1rK9hjubWWjLzilUOjcWCsKqwNCK5p&#xA;s2GWOZhIVKJIPvGxVE5WrsVdirsVdirsVdirsVdirsVdirsVYv8AmB5CtPOumwabe31xaWkMvrOl&#xA;twHqOBxXlzVtlqdsoz4BkFE042p0wzCiSAnHl7R/0NolnpQuZbtbKIQx3E/H1GRNkDcQB8K0GWY4&#xA;cMQO5txQ4IiN3TC7Tyhq5vdEn1TzBp17qXlZZ/qV+bVhdNLLZyW6i7JuCzRqsrO6hlLlQarQ1m2J&#xA;PbflnqVr5P8ALOgx+b9N4+XNW/SkF49gxEzRSGZIWQXwpxad+RDbgr9mhLKvWXhheSOR41aSIkxO&#xA;QCVJFCVPaoNMVePeZU81eWtBtptLnk0j9P6ldPK8f1f6wuoarfJHY+stzyX0YLV29RY15fAvRQ2K&#xA;vRPP3li880eVL7QbW9j0974Kj3UsDXIVFcMaRrLb7nj15fRirHJvy18yzS65dSa/afXtV1TTtYt3&#xA;j0+RI4ZtNWCNY3RruQyJJHaqDRlIJJ8AFUTrX5ZS6vc6tFeazKdK1vSYtLvrcRqLh5II541nM1eJ&#xA;BF0zlPT+2qmtKqVUHB+VeoRX2l6zFe6bba/pEqNDcWumCGCeMQTW0v1hFm9V3kS4JU+rSMjYGrcl&#xA;VPzF5e1PQPyV89WOoX0WoSTWXmC+jmhga2CrfrcXbIytLNyKyTP8QI2oKbVKqnP52826dourWWv+&#xA;jbPG1zZab5wtxSyEqEpE1/HSQ2bH4ayUeIGteOylVFeUYfN02u2k7aNe6LpsXM3k99rTatHdxNEw&#xA;jSCIy3AU+q6v6h4HivHcNTFXomKuxViX5oyrD5Xt5XDFY9a0BmCKzsQut2ZPFEDMx9gKnFWUWtzH&#xA;dQLPGJFR60EsbwvsSN0kVHHTuMVQUGkRxeYbzVRBCrXNvBB66gesTE0hbkePQhkH2v2flmTLOThj&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:F77F11740720681197A5F4B282787F69</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F11740720681197A5F4B282787F69</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:B1C38A2A1E8BDD118BBDEA822DC4DB38</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a0a70ac4-b5c2-ff41-9430-c8adfd5eeee5</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F11740720681195FEE26D7CA645F0</stRef:documentID>
            <stRef:originalDocumentID>uuid:B1C38A2A1E8BDD118BBDEA822DC4DB38</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681195FEE26D7CA645F0</stEvt:instanceID>
                  <stEvt:when>2009-01-02T10:34:51-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681197A5F4B282787F69</stEvt:instanceID>
                  <stEvt:when>2009-01-02T22:54:01-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>792.000000</stDim:w>
            <stDim:h>612.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -365.115 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 365.115 li
535.183 365.115 li
535.183 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
80.6831 143.563 mo
101.933 152.563 li
119.933 158.563 li
135.683 162.813 li
149.433 166.313 li
161.933 169.063 li
172.933 171.313 li
183.183 173.063 li
192.683 174.813 li
201.183 176.063 li
209.433 177.313 li
216.933 178.563 li
223.933 179.563 li
230.683 180.313 li
236.933 181.063 li
242.933 181.813 li
248.683 182.563 li
254.183 183.063 li
259.433 183.813 li
264.433 184.313 li
269.183 184.813 li
273.683 185.313 li
278.183 185.813 li
282.433 186.063 li
286.683 186.563 li
290.433 186.813 li
294.433 187.313 li
298.183 187.563 li
301.683 187.813 li
305.183 188.313 li
308.683 188.563 li
311.933 188.813 li
315.183 189.063 li
318.183 189.313 li
321.183 189.563 li
324.183 189.813 li
327.183 190.063 li
329.933 190.313 li
332.683 190.313 li
335.433 190.563 li
337.933 190.813 li
340.683 191.063 li
343.183 191.313 li
345.683 191.313 li
347.933 191.563 li
350.433 191.813 li
352.683 191.813 li
354.933 192.063 li
357.183 192.313 li
359.433 192.313 li
361.683 192.563 li
363.683 192.563 li
365.683 192.813 li
367.683 192.813 li
369.683 193.063 li
371.683 193.063 li
373.683 193.313 li
375.683 193.313 li
377.433 193.563 li
379.433 193.563 li
381.183 193.813 li
382.933 193.813 li
384.683 194.063 li
388.183 194.063 li
389.933 194.313 li
391.433 194.313 li
393.183 194.563 li
396.433 194.563 li
397.933 194.813 li
400.933 194.813 li
402.433 195.063 li
405.433 195.063 li
406.933 195.313 li
409.683 195.313 li
411.183 195.563 li
415.183 195.563 li
416.683 195.813 li
419.183 195.813 li
420.433 196.063 li
424.433 196.063 li
425.683 196.313 li
429.183 196.313 li
430.433 196.563 li
433.933 196.563 li
435.183 196.813 li
439.433 196.813 li
440.683 197.063 li
444.933 197.063 li
445.933 197.313 li
449.933 197.313 li
450.933 197.563 li
454.933 197.563 li
455.933 197.813 li
460.433 197.813 li
461.433 198.063 li
465.933 198.063 li
466.683 198.313 li
471.933 198.313 li
472.683 198.563 li
477.433 198.563 li
478.433 198.813 li
483.683 198.813 li
484.433 199.063 li
489.683 199.063 li
490.183 199.313 li
495.933 199.313 li
496.433 199.563 li
502.433 199.563 li
502.933 199.813 li
508.683 199.813 li
509.183 200.063 li
515.183 200.063 li
515.683 200.313 li
521.933 200.313 li
522.433 200.563 li
528.683 200.563 li
529.183 200.813 li
534.183 200.813 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
225.433 220.813 mo
219.433 232.813 li
231.433 232.813 li
225.433 220.813 li
cp
0 .501961 0 rgb
ef
80.6831 336.563 mo
81.6831 335.563 li
81.6831 10.563 li
533.183 10.563 li
534.183 9.56299 li
80.6831 9.56299 li
80.6831 336.563 li
1 1 1 rgb
ef
2 lw
80.6831 306.813 mo
80.6831 9.56299 li
534.183 9.56299 li
534.183 306.813 li
0 0 0 rgb
@
80.6831 306.563 mo
534.183 306.563 li
@
1 lw
161.933 296.813 mo
161.933 306.563 li
149.433 301.813 mo
149.433 306.563 li
135.683 301.813 mo
135.683 306.563 li
119.933 301.813 mo
119.933 306.563 li
101.933 301.813 mo
101.933 306.563 li
@
431.683 296.813 mo
431.683 306.563 li
419.183 301.813 mo
419.183 306.563 li
405.433 301.813 mo
405.433 306.563 li
389.933 301.813 mo
389.933 306.563 li
371.683 301.813 mo
371.683 306.563 li
350.433 301.813 mo
350.433 306.563 li
324.183 301.813 mo
324.183 306.563 li
290.433 301.813 mo
290.433 306.563 li
242.933 301.813 mo
242.933 306.563 li
@
94.1831 306.813 mo
80.6831 306.813 li
@
87.4331 292.063 mo
80.6831 292.063 li
@
87.4331 277.313 mo
80.6831 277.313 li
@
87.4331 262.313 mo
80.6831 262.313 li
@
94.1831 247.563 mo
80.6831 247.563 li
@
87.4331 232.563 mo
80.6831 232.563 li
@
87.4331 217.813 mo
80.6831 217.813 li
@
87.4331 202.813 mo
80.6831 202.813 li
@
94.1831 188.063 mo
80.6831 188.063 li
@
87.4331 173.063 mo
80.6831 173.063 li
@
87.4331 158.313 mo
80.6831 158.313 li
@
87.4331 143.313 mo
80.6831 143.313 li
@
94.1831 128.563 mo
80.6831 128.563 li
@
87.4331 113.563 mo
80.6831 113.563 li
@
87.4331 98.813 mo
80.6831 98.813 li
@
87.4331 83.813 mo
80.6831 83.813 li
@
94.1831 69.063 mo
80.6831 69.063 li
@
87.4331 54.063 mo
80.6831 54.063 li
@
87.4331 39.313 mo
80.6831 39.313 li
@
87.4331 24.313 mo
80.6831 24.313 li
@
94.1831 9.56299 mo
80.6831 9.56299 li
@
94.1831 306.813 mo
80.6831 306.813 li
@
225.933 206.313 mo
219.933 206.313 li
219.933 218.313 li
231.933 218.313 li
231.933 206.313 li
225.933 206.313 li
cp
0 0 1 rgb
ef
186.183 190.563 mo
180.183 190.563 li
180.183 202.563 li
192.183 202.563 li
192.183 190.563 li
186.183 190.563 li
cp
ef
145.433 138.063 mo
139.433 138.063 li
139.433 150.063 li
151.433 150.063 li
151.433 138.063 li
145.433 138.063 li
cp
ef
129.683 96.313 mo
123.683 96.313 li
123.683 108.313 li
135.683 108.313 li
135.683 96.313 li
129.683 96.313 li
cp
ef
107.683 66.063 mo
101.683 66.063 li
101.683 78.063 li
113.683 78.063 li
113.683 66.063 li
107.683 66.063 li
cp
ef
107.683 66.813 mo
107.683 34.813 li
@
106.433 34.813 mo
108.933 34.813 li
@
107.683 77.063 mo
107.683 109.063 li
@
106.433 109.063 mo
108.933 109.063 li
@
129.683 97.313 mo
129.683 84.063 li
@
128.433 84.063 mo
130.933 84.063 li
@
129.683 107.313 mo
129.683 120.563 li
@
128.433 120.563 mo
130.933 120.563 li
@
145.433 138.813 mo
145.433 127.813 li
@
144.183 127.813 mo
146.683 127.813 li
@
145.433 149.063 mo
145.433 160.063 li
@
144.183 160.063 mo
146.683 160.063 li
@
186.183 191.563 mo
186.183 180.063 li
@
184.933 180.063 mo
187.433 180.063 li
@
186.183 201.563 mo
186.183 213.313 li
@
184.933 213.313 mo
187.433 213.313 li
@
225.933 207.313 mo
225.933 200.063 li
@
224.683 200.063 mo
227.433 200.063 li
@
225.933 217.313 mo
225.933 224.563 li
@
224.683 224.563 mo
227.433 224.563 li
@
507.933 190.563 mo
501.933 202.563 li
513.933 202.563 li
507.933 190.563 li
cp
0 .501961 0 rgb
ef
461.183 193.563 mo
455.183 205.563 li
467.183 205.563 li
461.183 193.563 li
cp
ef
186.933 219.063 mo
180.933 231.063 li
192.933 231.063 li
186.933 219.063 li
cp
ef
146.683 221.063 mo
140.683 233.063 li
152.683 233.063 li
146.683 221.063 li
cp
ef
130.433 217.313 mo
124.433 229.313 li
136.433 229.313 li
130.433 217.313 li
cp
ef
512.933 251.563 mo
518.933 239.563 li
506.933 239.563 li
512.933 251.563 li
cp
1 0 1 rgb
ef
462.183 254.063 mo
468.183 242.063 li
456.183 242.063 li
462.183 254.063 li
cp
ef
226.183 289.813 mo
232.183 277.813 li
220.183 277.813 li
226.183 289.813 li
cp
ef
186.183 276.063 mo
192.183 264.063 li
180.183 264.063 li
186.183 276.063 li
cp
ef
145.933 273.563 mo
151.933 261.563 li
139.933 261.563 li
145.933 273.563 li
cp
ef
129.683 276.063 mo
135.683 264.063 li
123.683 264.063 li
129.683 276.063 li
cp
ef
107.683 271.313 mo
113.683 259.313 li
101.683 259.313 li
107.683 271.313 li
cp
ef
461.183 221.813 mo
463.683 221.813 li
462.433 198.313 mo
462.433 221.813 li
461.183 167.563 mo
463.683 167.563 li
462.433 190.813 mo
462.433 167.563 li
241.683 263.313 mo
244.183 263.313 li
242.933 190.563 mo
242.933 263.313 li
241.683 110.563 mo
244.183 110.563 li
242.933 183.063 mo
242.933 110.563 li
375.183 207.063 mo
377.683 207.063 li
376.433 203.313 mo
376.433 207.063 li
375.183 192.063 mo
377.683 192.063 li
376.433 195.563 mo
376.433 192.063 li
511.433 199.313 mo
514.183 199.313 li
512.933 198.563 mo
512.933 199.313 li
511.433 190.313 mo
514.183 190.313 li
512.933 191.063 mo
512.933 190.313 li
1 0 0 rgb
@
453.433 191.563 mo
471.433 191.563 li
456.871 202.143 li
462.433 185.024 li
467.996 202.143 li
453.433 191.563 li
cp
f
233.933 183.813 mo
251.933 183.813 li
237.371 194.393 li
242.933 177.274 li
248.496 194.393 li
233.933 183.813 li
cp
f
367.433 196.563 mo
385.433 196.563 li
370.871 207.143 li
376.433 190.024 li
381.996 207.143 li
367.433 196.563 li
cp
f
503.933 191.813 mo
521.933 191.813 li
507.371 202.393 li
512.933 185.274 li
518.496 202.393 li
503.933 191.813 li
cp
f
366.016 52.082 mo
360.016 52.082 li
360.016 64.082 li
372.016 64.082 li
372.016 52.082 li
366.016 52.082 li
cp
0 0 1 rgb
ef
357.016 29.813 mo
375.016 29.813 li
360.454 40.3931 li
366.016 23.2739 li
371.579 40.3931 li
357.016 29.813 li
cp
1 0 0 rgb
f
366.016 78.3311 mo
360.016 90.3311 li
372.016 90.3311 li
366.016 78.3311 li
cp
0 .501961 0 rgb
ef
366.016 116.58 mo
372.016 104.58 li
360.016 104.58 li
366.016 116.58 li
cp
1 0 1 rgb
ef
515.037 186.989 mo
515.037 184.985 li
1 0 0 rgb
@
510.535 184.985 mo
515.535 184.985 li
@
511.033 186.989 mo
511.033 184.985 li
@
511.039 202.58 mo
511.039 204.58 li
@
515.541 204.58 mo
510.541 204.58 li
@
515.042 202.58 mo
515.042 204.58 li
@
464.527 186.737 mo
464.527 184.733 li
@
460.025 184.733 mo
465.025 184.733 li
@
460.523 186.737 mo
460.523 184.733 li
@
460.525 202.304 mo
460.525 204.304 li
@
465.027 204.304 mo
460.027 204.304 li
@
464.529 202.304 mo
464.529 204.304 li
@
378.503 191.989 mo
378.503 189.985 li
@
374.001 189.985 mo
379.001 189.985 li
@
374.5 191.989 mo
374.5 189.985 li
@
374.482 206.781 mo
374.482 208.781 li
@
378.984 208.781 mo
373.984 208.781 li
@
378.486 206.781 mo
378.486 208.781 li
@
244.947 178.338 mo
244.947 176.334 li
@
240.445 176.334 mo
245.445 176.334 li
@
240.943 178.338 mo
240.943 176.334 li
@
240.942 195.357 mo
240.942 197.357 li
@
245.444 197.357 mo
240.444 197.357 li
@
244.946 195.357 mo
244.946 197.357 li
@
228.159 198.338 mo
228.159 196.334 li
0 0 1 rgb
@
223.657 196.334 mo
228.657 196.334 li
@
224.155 198.338 mo
224.155 196.334 li
@
224.155 226.505 mo
224.155 228.505 li
@
228.657 228.505 mo
223.657 228.505 li
@
228.159 226.505 mo
228.159 228.505 li
@
188.479 185.864 mo
188.479 183.86 li
@
183.978 183.86 mo
188.978 183.86 li
@
184.476 185.864 mo
184.476 183.86 li
@
183.976 207.406 mo
183.976 209.406 li
@
188.478 209.406 mo
183.478 209.406 li
@
187.979 207.406 mo
187.979 209.406 li
@
147.413 124.789 mo
147.413 122.785 li
@
142.911 122.785 mo
147.911 122.785 li
@
143.409 124.789 mo
143.409 122.785 li
@
143.409 163.105 mo
143.409 165.105 li
@
147.911 165.105 mo
142.911 165.105 li
@
147.413 163.105 mo
147.413 165.105 li
@
131.703 75.6382 mo
131.703 73.6343 li
@
127.201 73.6343 mo
132.201 73.6343 li
@
127.699 75.6382 mo
127.699 73.6343 li
@
127.703 129.032 mo
127.703 131.032 li
@
132.205 131.032 mo
127.205 131.032 li
@
131.707 129.032 mo
131.707 131.032 li
@
109.68 45.0884 mo
109.68 43.0845 li
@
105.178 43.0845 mo
110.178 43.0845 li
@
105.676 45.0884 mo
105.676 43.0845 li
@
105.675 98.8804 mo
105.675 100.88 li
@
110.177 100.88 mo
105.177 100.88 li
@
109.679 98.8804 mo
109.679 100.88 li
@
gsave
385.178 100.533 mo
524.604 100.533 li
524.604 72.8574 li
385.178 72.8574 li
clp
393.141 81.3164 mo
389.696 80.4805 li
388.028 80.0762 386.979 78.623 386.979 77.0605 cv
386.979 75.1748 388.428 73.5322 390.52 73.5322 cv
395.002 73.5322 395.592 77.9541 395.754 79.168 cv
395.781 79.3301 395.781 79.4902 396.079 79.4902 cv
396.428 79.4902 396.428 79.3555 396.428 78.8438 cv
396.428 73.4287 li
396.428 72.9707 396.428 72.7813 396.143 72.7813 cv
395.961 72.7813 395.936 72.8086 395.754 73.1338 cv
394.809 74.6768 li
394.002 73.8926 392.899 72.7822 390.502 72.7822 cv
387.514 72.7822 385.253 75.1543 385.253 78.0098 cv
385.253 80.2461 386.678 82.2129 388.778 82.9395 cv
389.074 83.0469 390.446 83.3711 392.33 83.8281 cv
393.056 84.0176 393.864 84.2051 394.616 85.2021 cv
395.182 85.9023 395.453 86.791 395.453 87.6797 cv
395.453 89.5918 394.106 91.5322 391.846 91.5322 cv
391.067 91.5322 389.022 91.3965 387.596 90.0762 cv
386.036 88.6191 385.956 86.8936 385.928 85.9219 cv
385.901 85.6523 385.685 85.6523 385.604 85.6523 cv
385.253 85.6523 385.253 85.8408 385.253 86.3252 cv
385.253 91.7109 li
385.253 92.1689 385.253 92.3574 385.54 92.3574 cv
385.721 92.3574 385.747 92.3037 385.928 92.0068 cv
385.928 91.9805 386.009 91.8984 386.899 90.4668 cv
387.736 91.3848 389.461 92.3574 391.862 92.3574 cv
395.018 92.3574 397.178 89.7188 397.178 86.7559 cv
397.178 84.0625 395.401 81.8545 393.141 81.3164 cv
393.141 81.3164 li
cp
0 0 0 rgb
f
grestore
415.178 75.4736 mo
415.178 74.5039 415.231 74.208 417.295 74.208 cv
417.939 74.208 li
417.939 73.3828 li
416.998 73.4629 415.007 73.4629 413.985 73.4629 cv
412.963 73.4629 410.946 73.4629 410.004 73.3828 cv
410.004 74.208 li
410.651 74.208 li
412.723 74.208 412.778 74.5049 412.778 75.4746 cv
412.778 81.7832 li
404.754 81.7832 li
404.754 75.4746 li
404.754 74.5049 404.807 74.208 406.862 74.208 cv
407.502 74.208 li
407.502 73.3828 li
406.561 73.4629 404.571 73.4629 403.549 73.4629 cv
402.526 73.4629 400.508 73.4629 399.568 73.3828 cv
399.568 74.208 li
400.216 74.208 li
402.299 74.208 402.353 74.5049 402.353 75.4736 cv
402.353 89.667 li
402.353 90.6367 402.299 90.9316 400.216 90.9316 cv
399.568 90.9316 li
399.568 91.7578 li
400.508 91.6768 402.499 91.6768 403.522 91.6768 cv
404.543 91.6768 406.561 91.6768 407.502 91.7578 cv
407.502 90.9316 li
406.862 90.9316 li
404.807 90.9316 404.754 90.6357 404.754 89.666 cv
404.754 82.6074 li
412.778 82.6074 li
412.778 89.666 li
412.778 90.6357 412.723 90.9316 410.651 90.9316 cv
410.004 90.9316 li
410.004 91.7578 li
410.946 91.6768 412.936 91.6768 413.958 91.6768 cv
414.98 91.6768 416.998 91.6768 417.939 91.7578 cv
417.939 90.9316 li
417.295 90.9316 li
415.231 90.9316 415.178 90.6357 415.178 89.666 cv
415.178 75.4736 li
cp
0 0 0 rgb
f
428.958 84.9248 mo
430.007 81.8105 432.943 81.7832 433.239 81.7832 cv
437.306 81.7832 437.602 86.4961 437.602 88.6221 cv
437.602 90.2646 437.467 90.7227 437.278 91.2607 cv
436.682 93.2256 435.87 96.3486 435.87 97.0488 cv
435.87 97.3447 436.003 97.5332 436.217 97.5332 cv
436.565 97.5332 436.78 96.9404 437.074 95.917 cv
437.69 93.6533 437.958 92.1182 438.064 91.2832 cv
438.118 90.9326 438.17 90.582 438.278 90.2324 cv
439.141 87.5654 440.868 83.5518 441.948 81.4238 cv
442.136 81.1006 442.459 80.5078 442.459 80.4004 cv
442.459 80.1309 442.191 80.1309 442.137 80.1309 cv
442.057 80.1309 441.897 80.1309 441.816 80.3203 cv
440.422 82.8789 439.35 85.5723 438.278 88.2939 cv
438.249 87.458 438.222 85.4121 437.172 82.7988 cv
436.526 81.1543 435.448 79.834 433.59 79.834 cv
430.223 79.834 428.338 83.9512 428.338 84.791 cv
428.338 85.0615 428.581 85.0615 428.85 85.0615 cv
428.958 84.9248 li
cp
f
448.536 93.457 mo
448.44 93.7793 448.44 93.8184 448.194 94.1211 cv
447.452 94.9941 446.559 95.5078 445.817 95.5078 cv
445.114 95.5078 444.43 95.0146 444.43 93.667 cv
444.43 92.6602 444.981 90.5723 445.418 89.8125 cv
446.292 88.2939 447.262 88.0088 447.793 88.0088 cv
449.125 88.0088 449.487 89.4707 449.487 89.6602 cv
449.487 89.7559 449.448 89.8691 449.428 89.9453 cv
448.536 93.457 li
cp
451.387 88.0078 mo
451.407 87.9355 451.426 87.8271 451.426 87.7363 cv
451.426 87.6279 451.349 87.4824 451.18 87.4824 cv
450.991 87.4824 450.198 88.1338 449.821 88.7471 cv
449.631 88.3643 449.009 87.4824 447.8 87.4824 cv
445.383 87.4824 442.928 90.1582 442.928 92.8867 cv
442.928 94.7246 444.157 96.0332 445.78 96.0332 cv
446.856 96.0332 447.743 95.3311 448.159 94.9609 cv
448.14 95.0186 447.555 97.4063 447.479 97.7285 cv
447.215 98.7705 447.196 98.79 446.026 98.8086 cv
445.799 98.8086 445.535 98.8086 445.535 99.2217 cv
445.535 99.334 445.629 99.4834 445.818 99.4834 cv
446.44 99.4834 447.139 99.4092 447.782 99.4092 cv
448.424 99.4092 449.215 99.4834 449.801 99.4834 cv
449.971 99.4834 450.179 99.4277 450.179 99.0713 cv
450.179 98.8086 449.915 98.8086 449.689 98.8086 cv
449.274 98.8086 448.763 98.8086 448.763 98.5811 cv
448.763 98.5244 448.763 98.4863 448.858 98.165 cv
451.387 88.0078 li
cp
f
gsave
385.178 100.533 mo
524.604 100.533 li
524.604 72.8574 li
385.178 72.8574 li
clp
471.516 80.958 mo
472.743 80.958 472.93 81.3105 472.93 82.418 cv
472.93 89.7158 li
472.93 90.9326 472.638 90.9326 470.86 90.9326 cv
470.86 91.7578 li
471.747 91.7305 473.172 91.6777 473.844 91.6777 cv
474.518 91.6777 475.834 91.7305 476.831 91.7578 cv
476.831 90.9326 li
475.026 90.9326 474.731 90.9326 474.731 89.7207 cv
474.731 79.834 li
471.342 80.0586 li
470.911 80.083 470.885 80.1084 470.858 80.1084 cv
470.804 80.1328 470.75 80.1328 470.374 80.1328 cv
467.201 80.1328 li
467.201 77.1064 li
467.201 74.4551 469.514 73.3828 471.182 73.3828 cv
471.989 73.3828 472.958 73.6523 473.495 74.2734 cv
472.413 74.3281 472.254 75.084 472.254 75.5156 cv
472.254 76.4063 472.961 76.7578 473.479 76.7578 cv
474.104 76.7578 474.731 76.3252 474.731 75.5137 cv
474.731 73.918 473.241 72.7813 471.239 72.7813 cv
468.723 72.7813 465.504 74.1504 465.504 77.0742 cv
465.504 80.1309 li
463.381 80.1309 li
463.381 80.9561 li
465.504 80.9561 li
465.504 89.7148 li
465.504 90.9316 465.208 90.9316 463.409 90.9316 cv
463.409 91.7568 li
464.297 91.7295 465.721 91.6758 466.395 91.6758 cv
467.067 91.6758 468.385 91.7295 469.379 91.7568 cv
469.379 90.9316 li
467.598 90.9316 467.305 90.9316 467.305 89.7148 cv
467.305 80.9561 li
471.516 80.958 li
cp
f
grestore
482.229 80.958 mo
486.079 80.958 li
486.079 80.1328 li
482.229 80.1328 li
482.229 75.1836 li
481.556 75.1836 li
481.53 77.3867 480.723 80.2598 478.09 80.3672 cv
478.09 80.957 li
480.354 80.957 li
480.354 88.4121 li
480.354 91.7334 482.862 92.0566 483.833 92.0566 cv
485.749 92.0566 486.504 90.1436 486.504 88.4189 cv
486.504 86.8828 li
485.831 86.8828 li
485.831 88.3652 li
485.831 90.3594 485.022 91.3828 484.029 91.3828 cv
482.23 91.3828 482.23 88.9248 482.23 88.4658 cv
482.229 80.958 li
cp
f
492.654 80.958 mo
496.503 80.958 li
496.503 80.1328 li
492.654 80.1328 li
492.654 75.1836 li
491.981 75.1836 li
491.954 77.3867 491.148 80.2598 488.514 80.3672 cv
488.514 80.957 li
490.778 80.957 li
490.778 88.4121 li
490.778 91.7334 493.286 92.0566 494.256 92.0566 cv
496.172 92.0566 496.93 90.1436 496.93 88.4189 cv
496.93 86.8828 li
496.254 86.8828 li
496.254 88.3652 li
496.254 90.3594 495.448 91.3828 494.454 91.3828 cv
492.655 91.3828 492.655 88.9248 492.655 88.4658 cv
492.654 80.958 li
cp
f
gsave
385.178 100.533 mo
524.604 100.533 li
524.604 72.8574 li
385.178 72.8574 li
clp
501.504 84.9326 mo
501.667 80.9521 503.924 80.2832 504.838 80.2832 cv
507.61 80.2832 507.877 83.8906 507.877 84.9326 cv
501.504 84.9326 li
cp
509.004 85.5313 mo
509.596 85.5313 509.678 85.5313 509.678 84.9326 cv
509.678 82.2813 508.221 79.6836 504.856 79.6836 cv
501.731 79.6836 499.254 82.4629 499.254 85.8311 cv
499.254 89.4434 502.082 92.0566 505.178 92.0566 cv
508.465 92.0566 509.678 89.0693 509.678 88.5576 cv
509.678 88.2891 509.463 88.2334 509.329 88.2334 cv
509.086 88.2334 509.032 88.3955 508.979 88.6113 cv
508.038 91.3818 505.618 91.3818 505.348 91.3818 cv
504.004 91.3818 502.928 90.5732 502.311 89.5752 cv
501.504 88.2822 501.504 86.5029 501.504 85.5313 cv
509.004 85.5313 li
cp
f
520.651 83.0479 mo
520.651 88.5732 li
520.651 89.0576 520.651 89.1113 520.354 89.5703 cv
519.547 90.8633 518.338 91.457 517.182 91.457 cv
515.971 91.457 515.004 90.7568 514.36 89.7324 cv
513.659 88.6279 513.581 87.0908 513.581 85.9863 cv
513.581 84.9883 513.633 83.3711 514.413 82.1582 cv
514.977 81.3232 515.999 80.4336 517.452 80.4336 cv
518.393 80.4336 519.522 80.8379 520.354 82.0508 cv
520.651 82.5098 520.651 82.5645 520.651 83.0479 cv
520.651 83.0479 li
cp
520.645 90.2773 mo
520.645 92.0566 li
524.604 91.7617 li
524.604 90.9316 li
522.719 90.9316 522.504 90.7432 522.504 89.4238 cv
522.504 73.083 li
518.633 73.377 li
518.633 74.208 li
520.491 74.208 520.704 74.3965 520.704 75.7168 cv
520.704 81.5352 li
519.922 80.5469 518.768 79.832 517.319 79.832 cv
514.149 79.832 511.329 82.4785 511.329 85.959 cv
511.329 89.3857 513.967 92.0566 517.038 92.0566 cv
518.76 92.0566 519.971 91.1406 520.645 90.2773 cv
520.645 90.2773 li
cp
f
grestore
gsave
385.178 127.012 mo
500.829 127.012 li
500.829 99.3369 li
385.178 99.3369 li
clp
393.139 107.795 mo
389.696 106.96 li
388.028 106.556 386.979 105.102 386.979 103.539 cv
386.979 101.653 388.428 100.012 390.52 100.012 cv
395 100.012 395.592 104.434 395.754 105.646 cv
395.78 105.809 395.78 105.97 396.079 105.97 cv
396.428 105.97 396.428 105.835 396.428 105.323 cv
396.428 99.9072 li
396.428 99.4492 396.428 99.2598 396.143 99.2598 cv
395.961 99.2598 395.936 99.2881 395.754 99.6133 cv
394.809 101.155 li
394.002 100.371 392.899 99.2617 390.502 99.2617 cv
387.514 99.2617 385.252 101.633 385.252 104.488 cv
385.252 106.725 386.678 108.691 388.778 109.418 cv
389.073 109.526 390.446 109.85 392.329 110.307 cv
393.055 110.496 393.864 110.685 394.616 111.682 cv
395.182 112.381 395.452 113.271 395.452 114.159 cv
395.452 116.071 394.104 118.012 391.846 118.012 cv
391.067 118.012 389.022 117.876 387.596 116.555 cv
386.036 115.098 385.956 113.372 385.928 112.401 cv
385.901 112.131 385.684 112.131 385.604 112.131 cv
385.252 112.131 385.252 112.32 385.252 112.804 cv
385.252 118.19 li
385.252 118.648 385.252 118.837 385.538 118.837 cv
385.719 118.837 385.747 118.783 385.928 118.486 cv
385.928 118.459 386.008 118.378 386.899 116.945 cv
387.735 117.864 389.461 118.837 391.862 118.837 cv
395.018 118.837 397.178 116.198 397.178 113.235 cv
397.178 110.541 395.401 108.333 393.139 107.795 cv
393.139 107.795 li
cp
f
grestore
415.178 101.953 mo
415.178 100.982 415.231 100.687 417.295 100.687 cv
417.938 100.687 li
417.938 99.8623 li
416.997 99.9424 415.006 99.9424 413.985 99.9424 cv
412.961 99.9424 410.944 99.9424 410.004 99.8623 cv
410.004 100.687 li
410.651 100.687 li
412.723 100.687 412.778 100.984 412.778 101.954 cv
412.778 108.262 li
404.754 108.262 li
404.754 101.954 li
404.754 100.984 404.807 100.687 406.862 100.687 cv
407.502 100.687 li
407.502 99.8623 li
406.561 99.9424 404.571 99.9424 403.549 99.9424 cv
402.526 99.9424 400.508 99.9424 399.567 99.8623 cv
399.567 100.687 li
400.215 100.687 li
402.299 100.687 402.352 100.984 402.352 101.953 cv
402.352 116.146 li
402.352 117.115 402.297 117.411 400.215 117.411 cv
399.567 117.411 li
399.567 118.236 li
400.508 118.156 402.499 118.156 403.522 118.156 cv
404.543 118.156 406.561 118.156 407.502 118.236 cv
407.502 117.411 li
406.862 117.411 li
404.807 117.411 404.754 117.115 404.754 116.146 cv
404.754 109.087 li
412.778 109.087 li
412.778 116.146 li
412.778 117.115 412.723 117.411 410.651 117.411 cv
410.004 117.411 li
410.004 118.236 li
410.944 118.156 412.936 118.156 413.958 118.156 cv
414.979 118.156 416.997 118.156 417.938 118.236 cv
417.938 117.411 li
417.295 117.411 li
415.231 117.411 415.178 117.115 415.178 116.146 cv
415.178 101.953 li
cp
f
428.958 111.403 mo
430.006 108.29 432.942 108.262 433.239 108.262 cv
437.305 108.262 437.602 112.975 437.602 115.101 cv
437.602 116.744 437.467 117.201 437.278 117.74 cv
436.68 119.705 435.87 122.828 435.87 123.527 cv
435.87 123.824 436.002 124.012 436.217 124.012 cv
436.565 124.012 436.78 123.42 437.073 122.396 cv
437.69 120.133 437.958 118.598 438.063 117.763 cv
438.116 117.412 438.17 117.062 438.278 116.711 cv
439.141 114.045 440.868 110.031 441.946 107.902 cv
442.135 107.58 442.459 106.987 442.459 106.879 cv
442.459 106.609 442.19 106.609 442.137 106.609 cv
442.057 106.609 441.897 106.609 441.815 106.799 cv
440.422 109.357 439.35 112.052 438.278 114.772 cv
438.249 113.938 438.221 111.891 437.172 109.277 cv
436.526 107.634 435.448 106.313 433.59 106.313 cv
430.223 106.313 428.338 110.43 428.338 111.27 cv
428.338 111.541 428.581 111.541 428.85 111.541 cv
428.958 111.403 li
cp
f
448.534 119.937 mo
448.44 120.259 448.44 120.297 448.194 120.601 cv
447.452 121.474 446.559 121.987 445.817 121.987 cv
445.112 121.987 444.43 121.493 444.43 120.146 cv
444.43 119.14 444.981 117.051 445.417 116.292 cv
446.292 114.772 447.262 114.488 447.793 114.488 cv
449.125 114.488 449.485 115.949 449.485 116.14 cv
449.485 116.234 449.448 116.348 449.428 116.424 cv
448.534 119.937 li
cp
451.387 114.487 mo
451.405 114.414 451.424 114.307 451.424 114.215 cv
451.424 114.107 451.348 113.962 451.18 113.962 cv
450.991 113.962 450.198 114.613 449.821 115.227 cv
449.631 114.843 449.008 113.962 447.799 113.962 cv
445.383 113.962 442.928 116.637 442.928 119.365 cv
442.928 121.204 444.155 122.512 445.78 122.512 cv
446.856 122.512 447.743 121.81 448.159 121.439 cv
448.139 121.498 447.555 123.886 447.479 124.208 cv
447.215 125.249 447.196 125.27 446.026 125.287 cv
445.797 125.287 445.534 125.287 445.534 125.7 cv
445.534 125.813 445.627 125.963 445.817 125.963 cv
446.44 125.963 447.139 125.888 447.782 125.888 cv
448.422 125.888 449.215 125.963 449.799 125.963 cv
449.971 125.963 450.18 125.906 450.18 125.551 cv
450.18 125.287 449.915 125.287 449.688 125.287 cv
449.272 125.287 448.762 125.287 448.762 125.061 cv
448.762 125.003 448.762 124.966 448.856 124.645 cv
451.387 114.487 li
cp
f
479.62 114.638 mo
479.997 114.638 480.508 114.638 480.508 114.113 cv
480.508 113.588 479.997 113.588 479.594 113.588 cv
463.565 113.588 li
463.163 113.588 462.653 113.588 462.653 114.113 cv
462.653 114.638 463.163 114.638 463.54 114.638 cv
479.62 114.638 li
cp
479.594 109.463 mo
479.997 109.463 480.508 109.463 480.508 108.938 cv
480.508 108.413 479.997 108.413 479.62 108.413 cv
463.54 108.413 li
463.165 108.413 462.655 108.413 462.655 108.938 cv
462.655 109.463 463.165 109.463 463.567 109.463 cv
479.594 109.463 li
cp
f
497.454 101.014 mo
497.454 100.367 497.454 100.312 496.831 100.312 cv
495.151 102.037 492.766 102.037 491.899 102.037 cv
491.899 102.862 li
492.436 102.862 494.026 102.862 495.428 102.178 cv
495.428 116.119 li
495.428 117.089 495.346 117.411 492.92 117.411 cv
492.059 117.411 li
492.059 118.236 li
493 118.156 495.34 118.156 496.417 118.156 cv
497.493 118.156 499.833 118.156 500.776 118.236 cv
500.776 117.411 li
499.924 117.411 li
497.534 117.411 497.454 117.115 497.454 116.119 cv
497.454 101.014 li
cp
f
393.215 28.7324 mo
389.77 27.8975 li
388.103 27.4932 387.053 26.0396 387.053 24.4771 cv
387.053 22.5918 388.502 20.9492 390.594 20.9492 cv
395.077 20.9492 395.667 25.3706 395.829 26.585 cv
395.856 26.7461 395.856 26.9082 396.153 26.9082 cv
396.504 26.9082 396.504 26.7725 396.504 26.2612 cv
396.504 20.8457 li
396.504 20.3872 396.504 20.1982 396.218 20.1982 cv
396.037 20.1982 396.01 20.2261 395.829 20.5513 cv
394.883 22.0938 li
394.077 21.3086 392.973 20.1992 390.577 20.1992 cv
387.588 20.1992 385.329 22.5708 385.329 25.4263 cv
385.329 27.6626 386.754 29.6289 388.852 30.3564 cv
389.149 30.4639 390.52 30.7876 392.404 31.2456 cv
393.13 31.4346 393.938 31.6226 394.69 32.6196 cv
395.256 33.3198 395.527 34.208 395.527 35.0972 cv
395.527 37.0098 394.18 38.9492 391.92 38.9492 cv
391.141 38.9492 389.096 38.8145 387.67 37.4932 cv
386.111 36.0361 386.03 34.3105 386.002 33.3394 cv
385.976 33.0684 385.759 33.0684 385.678 33.0684 cv
385.329 33.0684 385.329 33.2573 385.329 33.7422 cv
385.329 39.1284 li
385.329 39.5864 385.329 39.7754 385.614 39.7754 cv
385.795 39.7754 385.821 39.7212 386.002 39.4238 cv
386.002 39.3975 386.084 39.3159 386.973 37.8833 cv
387.81 38.8018 389.538 39.7754 391.936 39.7754 cv
395.092 39.7754 397.252 37.1357 397.252 34.1729 cv
397.252 31.48 395.475 29.2715 393.215 28.7324 cv
393.215 28.7324 li
cp
f
416.691 20.9644 mo
400.241 20.9644 li
399.728 27.0244 li
400.403 27.0244 li
400.778 22.668 401.18 21.7744 405.221 21.7744 cv
405.702 21.7744 406.399 21.7744 406.666 21.833 cv
407.228 21.9409 407.228 22.2373 407.228 22.8564 cv
407.228 37.0566 li
407.228 37.9727 407.228 38.3501 404.422 38.3501 cv
403.354 38.3501 li
403.354 39.1748 li
404.457 39.0947 407.2 39.0947 408.438 39.0947 cv
409.674 39.0947 412.446 39.0947 413.547 39.1748 cv
413.547 38.3501 li
412.466 38.3501 li
409.629 38.3501 409.629 37.9727 409.629 37.0566 cv
409.629 22.8564 li
409.629 22.3179 409.629 21.9409 410.116 21.833 cv
410.415 21.7744 411.145 21.7744 411.658 21.7744 cv
415.745 21.7744 416.149 22.668 416.528 27.0244 cv
417.204 27.0244 li
416.691 20.9644 li
cp
f
gsave
385.178 40.8247 mo
455.678 40.8247 li
455.678 19.8247 li
385.178 19.8247 li
385.178 40.8247 li
cp
clp
425.284 23.4663 mo
428.323 32.1997 li
422.272 32.1997 li
425.284 23.4663 li
cp
426.688 20.4399 mo
426.553 20.0898 426.499 19.8994 426.069 19.8994 cv
425.635 19.8994 425.557 20.063 425.42 20.4399 cv
419.844 36.5444 li
419.36 37.918 418.282 38.3223 416.829 38.3491 cv
416.829 39.1738 li
417.447 39.147 418.606 39.0942 419.577 39.0942 cv
420.411 39.0942 421.812 39.147 422.672 39.1738 cv
422.672 38.3491 li
421.326 38.3491 420.653 37.6733 420.653 36.9707 cv
420.653 36.8896 420.68 36.6201 420.708 36.5649 cv
421.946 33.0244 li
428.6 33.0244 li
430.028 37.1597 li
430.053 37.2676 430.108 37.4302 430.108 37.5376 cv
430.108 38.3486 428.6 38.3486 427.874 38.3486 cv
427.874 39.1733 li
428.842 39.0933 430.727 39.0933 431.752 39.0933 cv
432.911 39.0933 434.149 39.1206 435.284 39.1733 cv
435.284 38.3486 li
434.795 38.3486 li
433.18 38.3486 432.801 38.1602 432.506 37.271 cv
426.688 20.4399 li
cp
f
447.879 30.0288 mo
450.499 29.3838 452.604 27.7422 452.604 25.6445 cv
452.604 23.063 449.534 20.8003 445.575 20.8003 cv
437.12 20.8003 li
437.12 21.625 li
437.756 21.625 li
439.799 21.625 439.852 21.9224 439.852 22.8906 cv
439.852 37.0845 li
439.852 38.0542 439.799 38.3491 437.756 38.3491 cv
437.12 38.3491 li
437.12 39.1738 li
438.088 39.0942 439.999 39.0942 441.045 39.0942 cv
442.094 39.0942 444.004 39.0942 444.973 39.1738 cv
444.973 38.3491 li
444.321 38.3491 li
442.233 38.3491 442.178 38.0518 442.178 37.0801 cv
442.178 30.2485 li
445.297 30.2485 li
445.731 30.2485 446.87 30.2485 447.819 31.1665 cv
448.85 32.1377 448.85 32.9746 448.85 34.7822 cv
448.85 36.5366 448.85 37.6162 449.942 38.6406 cv
451.034 39.6118 452.499 39.7744 453.295 39.7744 cv
455.372 39.7744 455.827 37.5635 455.827 36.8081 cv
455.827 36.6455 455.827 36.3491 455.475 36.3491 cv
455.178 36.3491 455.178 36.5913 455.151 36.7798 cv
454.989 38.689 454.053 39.1733 453.385 39.1733 cv
452.075 39.1733 451.862 37.8013 451.487 35.3003 cv
451.139 33.1484 li
450.659 31.4263 449.348 30.5386 447.877 30.0273 cv
447.879 30.0288 li
cp
442.178 29.6494 mo
442.178 22.6997 li
442.178 22.082 442.178 21.7607 442.774 21.6792 cv
443.043 21.625 443.827 21.625 444.368 21.625 cv
446.799 21.625 449.829 21.7334 449.829 25.625 cv
449.829 27.4766 449.178 29.6494 445.178 29.6494 cv
442.178 29.6494 li
cp
f
grestore
390.823 47.6304 mo
390.58 47.3081 390.553 47.2778 390.042 47.2778 cv
385.465 47.2778 li
385.465 48.103 li
386.25 48.103 li
386.656 48.103 387.197 48.1294 387.603 48.1567 cv
388.226 48.2378 388.252 48.2642 388.252 48.7759 cv
388.252 62.8345 li
388.252 63.562 388.252 64.8276 385.465 64.8276 cv
385.465 65.6528 li
386.407 65.6255 387.725 65.5728 388.613 65.5728 cv
389.5 65.5728 390.818 65.6255 391.759 65.6528 cv
391.759 64.8276 li
389.002 64.8276 389.002 63.563 389.002 62.8364 cv
389.002 48.8403 li
389.136 48.9751 389.164 49.0015 389.271 49.1626 cv
400.241 65.3022 li
400.482 65.6245 400.509 65.6519 400.698 65.6519 cv
401.077 65.6519 401.077 65.4634 401.077 64.9517 cv
401.077 50.0972 li
401.077 49.3706 401.077 48.1021 403.837 48.1021 cv
403.837 47.2778 li
402.896 47.3032 401.578 47.3569 400.691 47.3569 cv
399.803 47.3569 398.484 47.3032 397.543 47.2778 cv
397.543 48.1021 li
400.328 48.1021 400.328 49.3696 400.328 50.0962 cv
400.328 61.5903 li
390.823 47.6304 li
cp
f
414.033 49.9448 mo
417.073 58.6782 li
411.02 58.6782 li
414.033 49.9448 li
cp
415.437 46.9185 mo
415.302 46.5688 415.248 46.3774 414.818 46.3774 cv
414.386 46.3774 414.306 46.5415 414.171 46.9185 cv
408.594 63.0229 li
408.109 64.396 407.032 64.8003 405.578 64.8276 cv
405.578 65.6528 li
406.197 65.6255 407.355 65.5728 408.326 65.5728 cv
409.16 65.5728 410.561 65.6255 411.423 65.6528 cv
411.423 64.8276 li
410.076 64.8276 409.402 64.1519 409.402 63.4497 cv
409.402 63.3677 409.429 63.0981 409.457 63.0435 cv
410.695 59.5024 li
417.349 59.5024 li
418.777 63.6382 li
418.803 63.7456 418.857 63.9087 418.857 64.0161 cv
418.857 64.8267 417.349 64.8267 416.622 64.8267 cv
416.622 65.6519 li
417.591 65.5718 419.478 65.5718 420.501 65.5718 cv
421.66 65.5718 422.898 65.5991 424.033 65.6519 cv
424.033 64.8267 li
423.545 64.8267 li
421.928 64.8267 421.552 64.6392 421.255 63.7495 cv
415.437 46.9185 li
cp
f
gsave
385.178 67.3032 mo
450.428 67.3032 li
450.428 46.3032 li
385.178 46.3032 li
385.178 67.3032 li
cp
clp
433.029 60.4028 mo
426.435 60.4028 li
433.029 50.3481 li
433.029 60.4028 li
cp
425.681 61.229 mo
432.803 61.229 li
432.803 63.5659 li
432.803 64.5317 432.75 64.8276 430.785 64.8276 cv
430.226 64.8276 li
430.226 65.6528 li
431.33 65.5728 432.728 65.5728 433.858 65.5728 cv
434.988 65.5728 436.414 65.5728 437.517 65.6528 cv
437.517 64.8276 li
436.951 64.8276 li
434.958 64.8276 434.904 64.5317 434.904 63.5659 cv
434.904 61.229 li
437.597 61.229 li
437.597 60.4028 li
434.904 60.4028 li
434.904 48.1313 li
434.904 47.5923 434.904 47.4302 434.473 47.4302 cv
434.23 47.4302 434.15 47.4302 433.935 47.7544 cv
425.681 60.4038 li
425.681 61.229 li
cp
f
444.876 59.2026 mo
444.445 59.2026 443.203 59.2026 442.365 57.5024 cv
441.879 56.5024 441.879 55.1538 441.879 53.8306 cv
441.879 52.3735 441.879 51.105 442.447 50.1069 cv
443.174 48.7563 444.201 48.4038 445.146 48.4038 cv
446.388 48.4038 447.281 49.3237 447.739 50.5376 cv
448.062 51.4028 448.171 53.1021 448.171 54.3442 cv
448.171 56.5835 447.252 59.2017 444.876 59.2017 cv
444.876 59.2026 li
cp
448.251 57.1001 mo
448.251 57.9614 li
448.251 64.2642 445.443 65.5034 443.877 65.5034 cv
443.417 65.5034 441.96 65.4497 441.23 64.5278 cv
442.413 64.5278 442.628 63.7485 442.628 63.2915 cv
442.628 62.4565 441.982 62.0522 441.39 62.0522 cv
440.959 62.0522 440.152 62.2954 440.152 63.3462 cv
440.152 65.1489 441.605 66.2534 443.894 66.2534 cv
447.367 66.2534 450.652 62.5913 450.652 56.8022 cv
450.652 49.5591 447.554 47.729 445.16 47.729 cv
443.677 47.729 442.359 48.2134 441.201 49.4263 cv
440.097 50.6392 439.477 51.772 439.477 53.7925 cv
439.477 57.1616 441.853 59.8022 444.876 59.8022 cv
446.521 59.8022 447.628 58.6675 448.251 57.1001 cv
448.251 57.1001 li
cp
f
grestore
157.345 313.035 mo
157.345 312.389 157.345 312.333 156.721 312.333 cv
155.042 314.058 152.657 314.058 151.789 314.058 cv
151.789 314.884 li
152.327 314.884 153.917 314.884 155.319 314.2 cv
155.319 328.14 li
155.319 329.111 155.238 329.433 152.813 329.433 cv
151.95 329.433 li
151.95 330.257 li
152.891 330.177 155.232 330.177 156.308 330.177 cv
157.383 330.177 159.724 330.177 160.666 330.257 cv
160.666 329.433 li
159.815 329.433 li
157.424 329.433 157.345 329.136 157.345 328.14 cv
157.345 313.035 li
cp
f
169.518 330.259 mo
168.474 330.259 166.896 329.586 166.414 327.003 cv
166.119 325.39 166.119 322.914 166.119 321.328 cv
166.119 319.607 166.119 317.831 166.333 316.378 cv
166.842 313.177 168.849 312.933 169.518 312.933 cv
170.401 312.933 172.167 313.419 172.676 316.082 cv
172.944 317.588 172.944 319.632 172.944 321.328 cv
172.944 323.345 172.944 325.174 172.649 326.896 cv
172.248 329.451 170.722 330.257 169.518 330.257 cv
169.518 330.259 li
cp
175.195 321.65 mo
175.195 319.496 175.058 317.341 174.117 315.349 cv
172.879 312.764 170.674 312.333 169.544 312.333 cv
167.93 312.333 165.967 313.034 164.864 315.539 cv
164.002 317.396 163.868 319.496 163.868 321.65 cv
163.868 323.669 163.975 326.093 165.079 328.139 cv
166.236 330.32 168.199 330.858 169.517 330.858 cv
170.97 330.858 173.014 330.292 174.198 327.735 cv
175.059 325.877 175.195 323.779 175.195 321.65 cv
175.195 321.65 li
cp
f
420.675 314.232 mo
420.675 313.585 420.675 313.53 420.052 313.53 cv
418.373 315.255 415.988 315.255 415.119 315.255 cv
415.119 316.08 li
415.658 316.08 417.248 316.08 418.65 315.396 cv
418.65 329.337 li
418.65 330.307 418.568 330.629 416.142 330.629 cv
415.281 330.629 li
415.281 331.454 li
416.222 331.374 418.562 331.374 419.638 331.374 cv
420.714 331.374 423.054 331.374 423.996 331.454 cv
423.996 330.629 li
423.146 330.629 li
420.755 330.629 420.675 330.333 420.675 329.337 cv
420.675 314.232 li
cp
f
432.849 331.456 mo
431.804 331.456 430.226 330.783 429.744 328.201 cv
429.449 326.586 429.449 324.111 429.449 322.524 cv
429.449 320.803 429.449 319.027 429.664 317.575 cv
430.173 314.374 432.179 314.13 432.849 314.13 cv
433.73 314.13 435.498 314.617 436.007 317.279 cv
436.275 318.785 436.275 320.83 436.275 322.524 cv
436.275 324.542 436.275 326.371 435.98 328.092 cv
435.58 330.647 434.052 331.454 432.849 331.454 cv
432.849 331.456 li
cp
438.525 322.846 mo
438.525 320.693 438.388 318.539 437.449 316.545 cv
436.21 313.961 434.003 313.53 432.875 313.53 cv
431.261 313.53 429.296 314.231 428.193 316.734 cv
427.332 318.592 427.199 320.693 427.199 322.846 cv
427.199 324.867 427.306 327.29 428.41 329.335 cv
429.566 331.517 431.531 332.054 432.847 332.054 cv
434.3 332.054 436.345 331.489 437.529 328.931 cv
438.39 327.074 438.525 324.975 438.525 322.846 cv
438.525 322.846 li
cp
f
446.273 331.456 mo
445.23 331.456 443.65 330.783 443.169 328.201 cv
442.875 326.586 442.875 324.111 442.875 322.524 cv
442.875 320.803 442.875 319.027 443.089 317.575 cv
443.597 314.374 445.605 314.13 446.273 314.13 cv
447.158 314.13 448.921 314.617 449.431 317.279 cv
449.701 318.785 449.701 320.83 449.701 322.524 cv
449.701 324.542 449.701 326.371 449.406 328.092 cv
449.003 330.647 447.478 331.454 446.273 331.454 cv
446.273 331.456 li
cp
451.951 322.846 mo
451.951 320.693 451.814 318.539 450.873 316.545 cv
449.636 313.961 447.429 313.53 446.3 313.53 cv
444.685 313.53 442.722 314.231 441.619 316.734 cv
440.759 318.592 440.625 320.693 440.625 322.846 cv
440.625 324.867 440.73 327.29 441.833 329.335 cv
442.992 331.517 444.955 332.054 446.273 332.054 cv
447.726 332.054 449.771 331.489 450.955 328.931 cv
451.816 327.074 451.951 324.975 451.951 322.846 cv
451.951 322.846 li
cp
f
gsave
64.1499 316.74 mo
75.5503 316.74 li
75.5503 297.165 li
64.1499 297.165 li
clp
69.7983 315.089 mo
68.7544 315.089 67.1753 314.417 66.6938 311.835 cv
66.3994 310.22 66.3994 307.746 66.3994 306.159 cv
66.3994 304.437 66.3994 302.662 66.6138 301.208 cv
67.1226 298.008 69.1294 297.765 69.7983 297.765 cv
70.6812 297.765 72.4468 298.25 72.9561 300.914 cv
73.2241 302.42 73.2241 304.464 73.2241 306.159 cv
73.2241 308.175 73.2241 310.005 72.9297 311.726 cv
72.5283 314.281 71.0024 315.088 69.7983 315.088 cv
69.7983 315.089 li
cp
75.4751 306.481 mo
75.4751 304.328 75.3384 302.173 74.3975 300.181 cv
73.1597 297.596 70.9536 297.165 69.8247 297.165 cv
68.2104 297.165 66.2471 297.865 65.1436 300.37 cv
64.2827 302.227 64.1484 304.328 64.1484 306.481 cv
64.1484 308.501 64.2554 310.923 65.3589 312.97 cv
66.5161 315.152 68.48 315.689 69.7974 315.689 cv
71.2505 315.689 73.2944 315.124 74.478 312.566 cv
75.3394 310.708 75.4751 308.609 75.4751 306.481 cv
75.4751 306.481 li
cp
f
grestore
gsave
64.5244 256.902 mo
75.5498 256.902 li
75.5498 237.927 li
64.5244 237.927 li
clp
75.5503 251.171 mo
74.8774 251.171 li
74.7432 251.97 74.5552 253.14 74.2856 253.539 cv
74.0972 253.751 72.3228 253.751 71.731 253.751 cv
66.8906 253.751 li
69.7407 250.985 li
73.936 247.277 75.5503 245.827 75.5503 243.14 cv
75.5503 240.077 73.1299 237.927 69.8501 237.927 cv
66.812 237.927 64.8223 240.403 64.8223 242.796 cv
64.8223 244.303 66.1797 244.303 66.2607 244.303 cv
66.7227 244.303 67.6729 243.978 67.6729 242.865 cv
67.6729 242.16 67.1802 241.453 66.2231 241.453 cv
66.0039 241.453 65.9497 241.453 65.8677 241.453 cv
66.4834 239.733 67.9302 238.753 69.4834 238.753 cv
71.9214 238.753 73.0732 240.936 73.0732 243.144 cv
73.0732 245.298 71.7324 247.425 70.2598 249.095 cv
65.1172 254.857 li
64.8223 255.153 64.8223 255.207 64.8223 255.853 cv
74.7974 255.853 li
75.5503 251.171 li
cp
f
grestore
70.9819 191.739 mo
64.3882 191.739 li
70.9819 181.683 li
70.9819 191.739 li
cp
63.6343 192.564 mo
70.7563 192.564 li
70.7563 194.901 li
70.7563 195.868 70.7026 196.164 68.7368 196.164 cv
68.1802 196.164 li
68.1802 196.988 li
69.2822 196.908 70.6812 196.908 71.812 196.908 cv
72.9409 196.908 74.3667 196.908 75.4702 196.988 cv
75.4702 196.164 li
74.9038 196.164 li
72.9111 196.164 72.8569 195.868 72.8569 194.901 cv
72.8569 192.564 li
75.5503 192.564 li
75.5503 191.739 li
72.8569 191.739 li
72.8569 179.467 li
72.8569 178.927 72.8569 178.765 72.4253 178.765 cv
72.1831 178.765 72.103 178.765 71.8882 179.089 cv
63.6343 191.74 li
63.6343 192.564 li
cp
f
70.0151 136.851 mo
68.3135 136.851 67.5034 135.235 67.3413 134.831 cv
66.8555 133.563 66.8555 131.407 66.8555 130.922 cv
66.8555 128.822 67.7202 126.125 70.1509 126.125 cv
70.583 126.125 71.8252 126.125 72.6631 127.797 cv
73.1494 128.794 73.1494 130.168 73.1494 131.489 cv
73.1494 132.783 73.1494 134.129 72.6909 135.099 cv
71.8809 136.716 70.6377 136.851 70.0156 136.851 cv
70.0151 136.851 li
cp
66.7759 128.178 mo
66.7759 127.533 li
66.7759 120.722 70.1226 119.751 71.5 119.751 cv
72.1475 119.751 73.2813 119.909 73.876 120.801 cv
73.4731 120.801 72.3994 120.801 72.3994 122.026 cv
72.3994 122.869 73.0454 123.277 73.6372 123.277 cv
74.0679 123.277 74.875 123.034 74.875 121.984 cv
74.875 120.369 73.6885 119.076 71.4546 119.076 cv
68.0088 119.076 64.375 122.55 64.375 128.501 cv
64.375 135.69 67.498 137.601 70.0024 137.601 cv
72.9912 137.601 75.5503 135.072 75.5503 131.523 cv
75.5503 128.107 73.145 125.524 70.1504 125.524 cv
68.3149 125.524 67.3159 126.892 66.7769 128.177 cv
66.7759 128.178 li
cp
f
68.8726 68.855 mo
69.6255 69.3145 70.8901 70.1216 72.1812 70.9565 cv
72.9341 71.4678 74.2012 72.2764 74.2012 73.9199 cv
74.2012 75.9121 72.1812 77.3125 69.9761 77.3125 cv
67.6631 77.3125 65.7261 75.6426 65.7261 73.4072 cv
65.7261 71.8457 66.5869 70.1216 68.8726 68.855 cv
68.8726 68.855 li
cp
71.563 67.7236 mo
73.4878 66.7275 74.8003 65.3271 74.8003 63.5503 cv
74.8003 61.0732 72.4155 59.5381 69.9761 59.5381 cv
67.2964 59.5381 65.125 61.5308 65.125 64.0352 cv
65.125 64.52 65.1802 65.7314 66.3257 66.9971 cv
66.6162 67.3198 67.5933 67.9932 68.2539 68.4507 cv
66.6909 69.2319 64.375 70.7397 64.375 73.4043 cv
64.375 76.2578 67.1216 78.0625 69.9482 78.0625 cv
72.9912 78.0625 75.5503 75.8286 75.5503 72.9473 cv
75.5503 71.9775 75.2471 70.7661 74.2012 69.6353 cv
73.6943 69.0698 73.2681 68.8003 71.563 67.7236 cv
71.563 67.7236 li
cp
67.6577 65.1685 mo
66.4321 64.3604 66.3257 63.4448 66.3257 62.9873 cv
66.3257 61.3447 68.0576 60.2139 69.9492 60.2139 cv
71.894 60.2139 73.6006 61.6147 73.6006 63.5532 cv
73.6006 65.0869 72.5591 66.3804 70.9614 67.3223 cv
67.6577 65.1685 li
cp
f
236.538 361.171 mo
231.745 350.646 li
231.638 350.431 231.583 350.271 231.396 350.271 cv
231.314 350.271 231.26 350.271 231.018 350.486 cv
228.353 352.498 li
228.056 352.74 228.03 352.767 228.03 352.875 cv
228.03 353.062 228.137 353.17 228.299 353.17 cv
228.38 353.17 228.434 353.17 228.677 352.955 cv
230.077 351.908 li
235.408 363.587 li
235.57 363.962 235.624 363.99 235.919 363.99 cv
236.35 363.99 236.404 363.881 236.592 363.478 cv
248.87 338.136 li
249.005 337.841 249.037 337.813 249.037 337.679 cv
249.037 337.384 248.816 337.138 248.493 337.138 cv
248.17 337.138 248.089 337.331 247.928 337.654 cv
236.538 361.171 li
cp
f
gsave
227.954 365.115 mo
381.029 365.115 li
381.029 335.416 li
227.954 335.416 li
clp
1.0746 lw
248.466 337.684 mo
300.535 337.684 li
@
grestore
258.948 345.541 mo
258.196 345.567 257.66 346.146 257.66 346.726 cv
257.66 347.095 257.902 347.492 258.492 347.492 cv
259.081 347.492 259.727 347.033 259.727 345.982 cv
259.727 344.771 258.576 343.666 256.545 343.666 cv
253.018 343.666 252.029 346.418 252.029 347.605 cv
252.029 349.708 254.013 350.112 254.79 350.275 cv
256.184 350.544 257.578 350.839 257.578 352.322 cv
257.578 353.024 256.956 355.289 253.716 355.289 cv
253.338 355.289 251.259 355.289 250.638 353.865 cv
251.664 354.002 252.339 353.183 252.339 352.42 cv
252.339 351.792 251.907 351.464 251.34 351.464 cv
250.638 351.464 249.828 352.035 249.828 353.255 cv
249.828 354.804 251.361 355.889 253.674 355.889 cv
258.031 355.889 259.08 352.625 259.08 351.413 cv
259.08 350.441 258.57 349.767 258.248 349.444 cv
257.524 348.688 256.747 348.554 255.567 348.312 cv
254.603 348.095 253.53 347.908 253.53 346.694 cv
253.53 345.912 254.173 344.265 256.534 344.265 cv
257.204 344.265 258.545 344.458 258.947 345.54 cv
258.948 345.541 li
cp
f
276.808 348.861 mo
276.996 348.148 277.297 347.528 278.804 347.49 cv
278.898 347.49 279.18 347.47 279.18 347.078 cv
279.18 346.965 279.086 346.814 278.897 346.814 cv
278.275 346.814 277.579 346.89 276.939 346.89 cv
276.487 346.89 275.395 346.814 274.943 346.814 cv
274.849 346.814 274.566 346.814 274.566 347.228 cv
274.566 347.47 274.813 347.49 274.98 347.49 cv
275.865 347.511 276.186 347.792 276.186 348.261 cv
276.186 348.412 276.167 348.505 276.111 348.711 cv
274.059 356.891 li
269.275 347.136 li
269.125 346.816 269.087 346.816 268.635 346.816 cv
266.056 346.816 li
265.698 346.816 265.453 346.816 265.453 347.228 cv
265.453 347.492 265.679 347.492 266.074 347.492 cv
266.47 347.492 266.885 347.511 267.28 347.586 cv
264.757 357.632 li
264.587 358.345 264.267 358.91 262.798 358.965 cv
262.667 358.965 262.403 358.984 262.403 359.359 cv
262.403 359.566 262.554 359.64 262.686 359.64 cv
263.308 359.64 264.004 359.566 264.644 359.566 cv
265.096 359.566 266.188 359.64 266.64 359.64 cv
266.828 359.64 267.017 359.546 267.017 359.247 cv
267.017 358.984 266.791 358.965 266.584 358.965 cv
265.397 358.929 265.397 358.438 265.397 358.175 cv
265.397 358.099 265.397 358.005 265.472 357.705 cv
267.882 348.061 li
273.381 359.322 li
273.531 359.623 273.606 359.642 273.794 359.642 cv
274.096 359.642 274.096 359.585 274.189 359.247 cv
276.808 348.861 li
cp
f
295.857 348.861 mo
296.046 348.148 296.348 347.528 297.854 347.49 cv
297.948 347.49 298.23 347.47 298.23 347.078 cv
298.23 346.965 298.136 346.814 297.947 346.814 cv
297.325 346.814 296.63 346.89 295.989 346.89 cv
295.537 346.89 294.445 346.814 293.993 346.814 cv
293.898 346.814 293.617 346.814 293.617 347.228 cv
293.617 347.47 293.861 347.49 294.031 347.49 cv
294.916 347.511 295.236 347.792 295.236 348.261 cv
295.236 348.412 295.217 348.505 295.161 348.711 cv
293.108 356.891 li
288.325 347.136 li
288.175 346.816 288.137 346.816 287.686 346.816 cv
285.105 346.816 li
284.748 346.816 284.503 346.816 284.503 347.228 cv
284.503 347.492 284.729 347.492 285.125 347.492 cv
285.52 347.492 285.935 347.511 286.33 347.586 cv
283.807 357.632 li
283.637 358.345 283.317 358.91 281.849 358.965 cv
281.717 358.965 281.453 358.984 281.453 359.359 cv
281.453 359.566 281.604 359.64 281.736 359.64 cv
282.357 359.64 283.054 359.566 283.694 359.566 cv
284.146 359.566 285.238 359.64 285.69 359.64 cv
285.879 359.64 286.066 359.546 286.066 359.247 cv
286.066 358.984 285.841 358.965 285.634 358.965 cv
284.447 358.929 284.447 358.438 284.447 358.175 cv
284.447 358.099 284.447 358.005 284.522 357.705 cv
286.932 348.061 li
292.43 359.322 li
292.581 359.623 292.656 359.642 292.844 359.642 cv
293.146 359.642 293.146 359.585 293.24 359.247 cv
295.857 348.861 li
cp
f
318.382 362.071 mo
318.382 361.99 318.382 361.936 317.921 361.479 cv
314.542 358.087 313.677 353 313.677 348.881 cv
313.677 344.198 314.707 339.513 318.031 336.149 cv
318.382 335.826 318.382 335.773 318.382 335.691 cv
318.382 335.503 318.273 335.417 318.111 335.417 cv
317.841 335.417 315.406 337.251 313.808 340.671 cv
312.427 343.632 312.103 346.621 312.103 348.882 cv
312.103 350.98 312.4 354.238 313.89 357.281 cv
315.513 360.591 317.841 362.341 318.111 362.341 cv
318.275 362.341 318.382 362.259 318.382 362.072 cv
318.382 362.071 li
cp
f
335.937 353.896 mo
336.289 354.498 337.365 355.59 337.662 355.59 cv
337.906 355.59 337.906 355.374 337.906 354.968 cv
337.906 350.257 li
337.906 349.202 338.011 349.064 339.751 349.064 cv
339.751 348.24 li
338.755 348.267 337.275 348.321 336.47 348.321 cv
335.392 348.321 333.107 348.321 332.138 348.24 cv
332.138 349.064 li
333.001 349.064 li
335.423 349.064 335.505 349.363 335.505 350.364 cv
335.505 352.093 li
335.505 355.122 332.085 355.365 331.332 355.365 cv
329.583 355.365 324.255 354.421 324.255 346.39 cv
324.255 338.332 329.574 337.439 331.195 337.439 cv
334.083 337.439 336.539 339.869 337.08 343.833 cv
337.13 344.211 337.13 344.292 337.492 344.292 cv
337.906 344.292 337.906 344.211 337.906 343.646 cv
337.906 337.261 li
337.906 336.804 337.906 336.615 337.607 336.615 cv
337.5 336.615 337.392 336.615 337.177 336.939 cv
335.83 338.939 li
334.968 338.075 333.515 336.615 330.849 336.615 cv
325.841 336.615 321.48 340.871 321.48 346.389 cv
321.48 351.91 325.789 356.189 330.904 356.189 cv
332.869 356.189 335.023 355.488 335.939 353.896 cv
335.937 353.896 li
cp
f
344.054 348.764 mo
344.216 344.785 346.476 344.117 347.39 344.117 cv
350.16 344.117 350.427 347.722 350.427 348.764 cv
344.054 348.764 li
cp
351.556 349.365 mo
352.148 349.365 352.23 349.365 352.23 348.764 cv
352.23 346.115 350.771 343.515 347.406 343.515 cv
344.281 343.515 341.804 346.294 341.804 349.664 cv
341.804 353.275 344.632 355.889 347.73 355.889 cv
351.015 355.889 352.23 352.901 352.23 352.39 cv
352.23 352.121 352.013 352.066 351.878 352.066 cv
351.636 352.066 351.582 352.227 351.529 352.443 cv
350.587 355.214 348.167 355.214 347.9 355.214 cv
346.554 355.214 345.48 354.406 344.861 353.408 cv
344.054 352.115 344.054 350.335 344.054 349.363 cv
351.556 349.365 li
cp
f
369.771 339.846 mo
370.148 338.85 370.875 338.07 372.705 338.041 cv
372.705 337.215 li
371.871 337.268 370.794 337.295 370.095 337.295 cv
369.287 337.295 367.726 337.242 367.027 337.215 cv
367.027 338.041 li
368.425 338.068 368.992 338.768 368.992 339.387 cv
368.992 339.602 368.912 339.764 368.857 339.925 cv
363.933 352.901 li
358.794 339.307 li
358.632 338.929 358.632 338.876 358.632 338.822 cv
358.632 338.041 360.166 338.041 360.839 338.041 cv
360.839 337.215 li
359.871 337.295 358.013 337.295 356.992 337.295 cv
355.701 337.295 354.544 337.242 353.574 337.215 cv
353.574 338.041 li
355.324 338.041 355.833 338.041 356.21 339.066 cv
362.455 355.597 li
362.642 356.111 362.777 356.191 363.126 356.191 cv
363.583 356.191 363.638 356.056 363.773 355.679 cv
369.771 339.846 li
cp
f
381.029 348.88 mo
381.029 346.781 380.73 343.523 379.246 340.482 cv
377.625 337.171 375.302 335.416 375.033 335.416 cv
374.871 335.416 374.761 335.529 374.761 335.691 cv
374.761 335.771 374.761 335.826 375.275 336.308 cv
377.916 338.974 379.453 343.253 379.453 348.88 cv
379.453 353.484 378.455 358.221 375.113 361.614 cv
374.761 361.936 374.761 361.99 374.761 362.071 cv
374.761 362.234 374.871 362.34 375.033 362.34 cv
375.302 362.34 377.732 360.509 379.326 357.09 cv
380.703 354.13 381.029 351.142 381.029 348.88 cv
381.029 348.88 li
cp
f
26.498 206.598 mo
26.498 208.343 25.207 209.769 22.6211 209.769 cv
21.5449 209.769 18.6011 209.341 16.4829 208.093 cv
14.0059 206.598 13.502 204.46 13.502 203.248 cv
13.502 200.255 15.873 199.968 16.9858 199.968 cv
18.6729 199.968 21.6172 200.683 23.4473 201.894 cv
25.5664 203.285 26.5 205.208 26.5 206.598 cv
26.498 206.598 li
cp
13.501 194.791 mo
13.501 194.324 13.501 193.033 12.27 193.033 cv
11.4009 193.033 11.4009 193.789 11.4009 194.433 cv
11.4009 202.593 li
11.4009 207.998 17.3369 211.97 21.6172 211.97 cv
24.7813 211.97 27.2988 209.867 27.2988 206.623 cv
27.2988 202.414 22.9512 197.669 17.4189 197.669 cv
16.8081 197.669 15.084 197.669 13.501 198.737 cv
13.501 194.791 li
cp
f
29.6406 182.149 mo
30.8203 182.804 31.8262 184.093 31.8262 185.733 cv
31.8262 187.146 30.9961 188.156 30.2695 188.662 cv
29.5156 189.166 28.5098 189.468 26.9023 189.468 cv
26.3242 189.468 24.4395 189.468 23.2598 188.434 cv
22.127 187.423 21.9004 186.188 21.9004 185.455 cv
21.9004 184.244 22.4531 183.158 23.3594 182.451 cv
23.7617 182.148 23.7852 182.148 24.2637 182.148 cv
29.6406 182.149 li
cp
15.1431 183.931 mo
16.062 183.931 li
16.062 182.267 16.2378 182.068 17.4668 182.068 cv
22.6582 182.068 li
21.7383 183.001 21.1992 184.21 21.1992 185.597 cv
21.1992 188.947 23.7109 191.769 26.875 191.769 cv
30.0156 191.769 32.5254 189.098 32.5254 185.896 cv
32.5254 183.83 31.4395 182.593 30.9941 182.166 cv
32.5254 182.166 li
32.2754 178.283 li
31.3711 178.283 li
31.3711 179.966 31.1973 180.167 29.9668 180.167 cv
14.8618 180.167 li
15.1431 183.931 li
cp
f
23.9531 165.204 mo
22.4277 164.498 22.4004 163.213 22.4004 162.809 cv
21.5 162.809 li
21.5508 163.519 21.5996 163.998 21.5996 164.731 cv
21.5996 165.413 21.5742 166.347 21.5 167.029 cv
22.4004 167.029 li
22.4492 166.195 22.9512 165.994 23.3516 165.994 cv
23.6523 165.994 23.877 166.12 24.1289 166.221 cv
30.0664 169.023 li
23.4512 172.128 li
23.3027 172.205 23.1523 172.28 22.9766 172.28 cv
22.3984 172.28 22.3984 171.421 22.3984 170.992 cv
21.498 170.992 li
21.5234 171.371 21.5996 173.188 21.5996 173.896 cv
21.5996 174.653 21.5742 175.638 21.498 176.371 cv
22.3984 176.371 li
22.3984 174.947 22.4766 174.667 23.2773 174.287 cv
32.291 170.015 li
32.793 170.241 33.2695 170.492 33.7695 170.718 cv
34.9707 171.27 36.6973 172.074 36.6973 173.781 cv
36.6973 174.41 36.5723 174.61 36.3984 174.861 cv
36.3984 174.837 36.1426 174.171 35.2988 174.171 cv
34.6582 174.171 34.1973 174.626 34.1973 175.257 cv
34.1973 175.916 34.6563 176.371 35.3164 176.371 cv
36.5098 176.371 37.3984 175.185 37.3984 173.824 cv
37.3984 171.681 35.1699 170.447 34.418 170.094 cv
23.9531 165.204 li
cp
f
24.7188 149.069 mo
22.541 149.069 21.2637 150.147 21.2637 152.826 cv
21.2637 154.88 22.377 156.206 23.6641 156.908 cv
23.6641 156.933 li
21.2637 156.933 li
21.5391 160.613 li
22.4414 160.613 li
22.4414 158.965 22.6152 158.769 23.8438 158.769 cv
30.3242 158.769 li
31.4004 158.769 31.4004 159.015 31.4004 160.613 cv
32.3008 160.613 li
32.3008 160.563 32.2012 158.806 32.2012 157.751 cv
32.2012 156.822 32.2754 155.09 32.3008 154.864 cv
31.4004 154.864 li
31.4004 156.515 31.4004 156.769 30.3242 156.769 cv
25.8203 156.769 li
23.1914 156.769 21.9629 154.694 21.9629 153.044 cv
21.9629 151.294 23.3418 151.069 24.6172 151.069 cv
30.3242 151.069 li
31.4004 151.069 31.4004 151.314 31.4004 152.906 cv
32.3008 152.906 li
32.3008 152.856 32.1992 151.098 32.1992 150.044 cv
32.1992 149.115 32.2754 147.383 32.3008 147.156 cv
31.4004 147.156 li
31.4004 148.813 31.4004 149.069 30.3242 149.069 cv
24.7188 149.069 li
cp
f
35.541 132.497 mo
35.4336 132.497 35.3613 132.497 34.75 133.111 cv
30.2285 137.616 23.4453 138.77 17.9531 138.77 cv
11.708 138.77 5.46191 137.4 .976074 132.967 cv
.544922 132.497 .473145 132.497 .365723 132.497 cv
.114746 132.497 0 132.642 0 132.858 cv
0 133.219 2.44775 136.467 7.00684 138.595 cv
10.9551 140.436 14.939 140.868 17.9541 140.868 cv
20.7539 140.868 25.0977 140.471 29.1523 138.486 cv
33.5664 136.321 35.9004 133.217 35.9004 132.857 cv
35.9004 132.64 35.791 132.496 35.541 132.496 cv
35.541 132.497 li
cp
f
21.7188 102.57 mo
17.6089 102.57 14.501 104.679 14.501 107.216 cv
14.501 109.932 17.5029 112.469 21.6836 112.469 cv
26.0059 112.469 28.9004 109.896 28.9004 107.216 cv
28.9004 104.607 25.7207 102.57 21.7188 102.57 cv
21.7188 102.57 li
cp
28.0996 107.192 mo
28.0996 107.908 27.6328 110.269 21.668 110.269 cv
15.6689 110.269 15.2007 107.944 15.2007 107.192 cv
15.2007 105.296 17.8599 103.47 21.6328 103.47 cv
25.5137 103.47 28.0996 105.332 28.0996 107.192 cv
28.0996 107.192 li
cp
13.7007 123.091 mo
13.7007 123.807 13.2339 126.17 7.27002 126.17 cv
1.27002 126.17 .799805 123.843 .799805 123.091 cv
.799805 121.194 3.46191 119.368 7.23389 119.368 cv
11.1138 119.368 13.7007 121.229 13.7007 123.091 cv
13.7007 123.091 li
cp
1.3667 105.8 mo
1.04492 105.585 .937012 105.513 .722168 105.513 cv
.32666 105.513 0 105.84 0 106.234 cv
0 106.593 .250977 106.772 .501953 106.988 cv
2.93506 108.782 3.90088 111.185 3.90088 113.804 cv
3.90088 116.315 3.00586 118.54 1.146 120.513 cv
.537109 121.195 0 121.948 0 123.096 cv
0 125.823 3.02295 128.37 7.23291 128.37 cv
11.5869 128.37 14.501 125.797 14.501 123.116 cv
14.501 120.507 11.2959 118.469 7.26172 118.469 cv
6.75781 118.469 5.06494 118.469 3.19189 119.18 cv
4.521 116.849 4.69971 115.055 4.69971 113.764 cv
4.69971 111.038 3.58691 109.209 3.44287 108.994 cv
3.48193 108.958 li
27.4648 125.062 li
27.9316 125.385 28.1094 125.385 28.1816 125.385 cv
28.5762 125.385 28.8984 125.026 28.8984 124.668 cv
28.8984 124.309 28.7559 124.238 28.3613 123.95 cv
1.3667 105.8 li
cp
f
17.9541 90.0684 mo
15.1538 90.0684 10.811 90.4648 6.75488 92.4463 cv
2.33984 94.6074 0 97.7041 0 98.0654 cv
0 98.2813 .150879 98.4248 .365723 98.4248 cv
.473145 98.4248 .544922 98.4248 1.19092 97.7422 cv
4.74512 94.2178 10.4517 92.1689 17.9531 92.1689 cv
24.0898 92.1689 30.4082 93.5 34.9297 97.958 cv
35.3613 98.4248 35.4316 98.4248 35.5391 98.4248 cv
35.7559 98.4248 35.8984 98.2813 35.8984 98.0654 cv
35.8984 97.7041 33.457 94.4629 28.9004 92.3379 cv
24.9512 90.501 20.9688 90.0684 17.9531 90.0684 cv
17.9541 90.0684 li
cp
f
57.7002 .701172 mo
57.7002 .0556641 57.7002 0 57.0767 0 cv
55.397 1.72461 53.0122 1.72461 52.144 1.72461 cv
52.144 2.55078 li
52.6826 2.55078 54.2729 2.55078 55.6743 1.86621 cv
55.6743 15.8066 li
55.6743 16.7773 55.5933 17.0996 53.168 17.0996 cv
52.3057 17.0996 li
52.3057 17.9238 li
53.2466 17.8438 55.5874 17.8438 56.6636 17.8438 cv
57.7388 17.8438 60.0796 17.8438 61.0215 17.9238 cv
61.0215 17.0996 li
60.1704 17.0996 li
57.7798 17.0996 57.7002 16.8027 57.7002 15.8066 cv
57.7002 .701172 li
cp
f
69.8735 17.9258 mo
68.8296 17.9258 67.251 17.2529 66.769 14.6699 cv
66.4746 13.0566 66.4746 10.5801 66.4746 8.99414 cv
66.4746 7.27344 66.4746 5.49707 66.689 4.04492 cv
67.1978 .84375 69.2046 .599609 69.8735 .599609 cv
70.7563 .599609 72.522 1.08594 73.0313 3.74805 cv
73.2993 5.25488 73.2993 7.29883 73.2993 8.99414 cv
73.2993 11.0117 73.2993 12.8408 73.0049 14.5625 cv
72.6035 17.1172 71.0776 17.9238 69.8735 17.9238 cv
69.8735 17.9258 li
cp
75.5503 9.31641 mo
75.5503 7.16211 75.4136 5.00781 74.4727 3.01563 cv
73.2349 .430664 71.0298 0 69.8994 0 cv
68.2856 0 66.3223 .700195 65.2192 3.20508 cv
64.3579 5.0625 64.2236 7.16211 64.2236 9.31641 cv
64.2236 11.3359 64.3306 13.7598 65.4341 15.8057 cv
66.5913 17.9863 68.5547 18.5244 69.8726 18.5244 cv
71.3257 18.5244 73.3696 17.959 74.5532 15.4014 cv
75.4146 13.5439 75.5503 11.4453 75.5503 9.31641 cv
75.5503 9.31641 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Gary Westfall) ()%%Title: (sigmadyn_5.eps)%%CreationDate: 1/2/09 10:54 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&H!C,9ZS;<+!PSZ7-p-*Q!"mmM76qN075b`\AXU)YkE#5fhqjN<65%-jfA,PW\]1>0<-;8D=&i=GFh?Ita`?2$O*d;:J)\ae%eB,#/;re(Z+N5=<GH$)DSa3;/(f?7.H6GS1EhG00iZb%E1_^OIn4dfK?B2VW7<LM&GN\SaA2p"%j3I"`k1Ft8m"(=so=6q&:B#EK%L<]G-iD*`J)MS0p>F<W(c%V?m64D(K\OL2a+*MOfUK2RSGOhI2ZhXe,=e>du!%e&-ZS0>ciNgq7!heAp`<[1(@=con^MDZE!d"LN%KE[@J.q\#=`LRG6fCO=?mIfY#=`_u_N8M;OheY%g2.qP%XsV+QY?;@%h02B<@<9gb`8P38.,s<U#lLb&-8e(";6:\q%"eL)L4fNb%6Bu6?^\Zd$j3CQ3g$-d9D:5aZXoCVYZ`G9'%/u/XmZtcYX?Q&*5gp:?(adQ$Usg?YSs&OM_e*g>pQAPViX5G)=g,F;6Tl;>@E62<%b8:6LbKW9-fpk<c2(I)CpjVda=t)5"Nrgtb^DpVf1$THAf#^B9SH'-PVVl"H^DJX-"+eP?_:Z?"@%8^QI]ktrPI=&BiiM$7a%kWa%;>^YV589snMol"XG(M>"(>U]Z2diNL[0h[t6J")F0gG):-R20-^ang])#Q,HMrCIebEUn_"FRqRimslHj(8@-pW!iBis(c:)qEm[%'GY8Ejn*$[20!lhSOomJ]Uq(9TUN48qWYF)?DiQhW5!)jrh:?Hp8;4i5bM>fXqMV'O&8gSs8&p?h(LJ(eB`,PIf*8k313ZPQ(7!H%j*Y[gVX$O#GrKWdS1%`q>jhUq8t(9".Vpug#12Ml)i0@=\2.2oihR>2c<Cg_eqQjQF(T%-q7#sE1)VQL[7(FEP)XKjrVm?I<V4,;%1<'H#`C)3>0`b/@?\\g72TGe)s-o]pS&8[L2eu1'qe[P\#3?1=>darKr>E!i_u>%Zne79eD9`pqp97cu1LG5o<mVsH^A;?4?^s[N%W3)VLVGPr-CZ!BN(Vs@((JrAF!\i%&Jrpgs_4\20h"ZL=/qIbUnRi-7Gkc#9q0S&5cFCd`$D^dF3F'4DS`-(#W9XjO_R2SS_d0e[%j/b4j'`n<mJY"RqJcC.5Je.:b#?$66@&YQn`$g[q0HA,!S\hV*5ZHE8g*,cYOSAnjQf,mpaSOX?33SmVmu4RTEhDb>#^XN'`Y.dj%i=(@9KE%]A!ii2)>YCu0EsT-Sf)_"7>IGKO[qLj9Iek/,MPX6g4/s0p))AWp`i0B^d=\dR92o==L0tm(K\7Atq>WuD!2Rdp!D_>u%gKD)LU?QVU_K$Ra$r$?KO;cBs+-cK3??\L0jiFE)7Zc_^^"!>\<GaIC$Jbg<_)`;ja@:+]gB1,'@*m01$R]I`0At;Z,`FO,!P\04%-c6h)!HKq\*]Q=Sl"#@OGXejeRJ'!-O-Qb'JH4&F3GQhEj@dl<^?[[ChR(u#i4N"@BP2Y%QoOQ'5Zl6\EN'$?#j.WY))--WqkN6a%0o:Jt2$DJ1&uRU$c8s6/1ce5.T!$6qJ38Q#"do<G)NI+'&.iO+D_2c2de7X+2J_;Us"oNp^o(qT^VLh"eg9D9#^PK/ph0,09'GS$%*mYdT2.uMZ^dg-^d8g3]%[V3AQp3O/2cf^1Zt-=2r?%l]GV\^@+O"fQ*csJe-mR@!'4Yq7Y>u_sTNN4^"3^d6#Sn6Bqa]8pe*ufs%$.b7P[eem"[YA'LN5'O8s"@+=pg:J-3ir02F#<5iHT>G,7fTV:qrd`.5&WcG&fM*bMV2R]IsbRQ[epq!jo:$;3rf'R^K;HTbL9i_%m'm"ub@9.9:$c9:!Oakqs0gugr9e?Ho>aUErqtNaiPe?DAHcdRDn`j^hR=NAVptWgq\A'U^S3j&Y$Z\Q4,\#=h'*U6A_rVPLM#@V%9btMg.!NEAfSa[GB<0qf(MJ:Dp1ffQXPH=W?iR_6#>4:=DSi?aBQen`Ztha441=1R6[UJ/\;R?qF2S?ORALH&-gPRtGUQW!b;s2g%cG:>K.4<;mZ\S98/?8F,'=]h(@!9rgNsnC/Oei+q_0'u$Xa"99Rt^Dk&RiN_>h$F6*,%sRCU`_*?4J3HP1kr=E\Ra2Z>Kt=6!hd(%j8$%gL:-sb[%Q;rc4r:dg/b._?99?1kLS3a3lbu)"SptfIs%=Vh>]$rq+cFeD"WS^`?/[d#fp"9?F`)a/XsGVZT=LP_i<s!D;k,g%gIq\Ur)\)23-c@=r%F!+bmZrZcesT"Eq3!TVYp(\cU^Z>Do0[)5)=g_;rj^ddX8Umg#i(5k.IQ"#>GZIq5*j5gVa")cjh[LrW?ic%"62MQraI?UEq3:U2MDWA^#r8e!LP=Rrj_9!!6X&s3FBuW"'O3]$oL"dm2=p4i*Y=6!fVN-3Ga`1Z@H>:&>10m*<tbd_K%W#an*lM%bs>Ds.2aqTV5dBH[I19K>_$b9PBM!Q>qL,4!)2[0-?j)=3P$PCHk2Q>&?B%=-=V<WlZ>4h%<@2A-4<O&9Clr5>'!_dK0bP>k=f6u%ac0t<UM7o=e[ei%C/%(VYmIH\3rCdJKtqe`JkrFjoT`7*S&:q+m'"n@ZO_k\hAUA)6%@Si>VPYN2Jq"K[$l2I+(k6#-OUeY2:(Ol%JGr4;$`_aTMBmfN5aRZMgk^$O*'ar^*X[hi7E0^dYZTV'5G"fPeCbq==[&8JjZtWSfq>c1:bsZ20iiNM$\_0<#a7>RQq.fpn$%r]%5N'YQTdR$546"u5=gQS4&fD`Z_!4gqQ8GTMIoM00J\/P`,:*!U+0?mk-F?Jci6(1M=KQ?u.;;uEC:8tQX)CT^r7-+6D'97`doctR%#gI!#XOG!)L.'(gb0j<tO'2Y%,?Q;#kQRV,fDPb6lSr*uS@KM6dPL4B$bocf8&bg'>LsMZ8p!FZaFbrc/'>;2dBma*i,BGMJZl0o%2X?#CZX1_YnYFH;PR9=O2$XJn/&POpmk9TbUIs!Dqi<b8i&^8qgkqo#c2q*kZE7ubQ+bQf1l'i5C[(m7/Xqs$FkXVV1N2j9GS03L%2+(hTB>/3(^#G#*bsOjk[Y>Q7R>4so3&N:gN4Zd#C8mY$C/;hWZjUMDB?3D^dTilp'4&<I2a#"1<@+;H/SNXn]5tXcUhfpA)Ub!t%7`5LRTKR)IE)9suD,8_^Qs4YQ<TktconUKp#+o*q?sk_iE\,7J>64iUDN;d.)$+4\$Ir<-L"dhEE-UZA>0-NlD#m'0XLO;^bu8tj%<8Y@6^GtNp!AN!UjJsq0/^>1J0M/j(Gt"krb[UeqfT][;JMd4I"o`m(PSFN\IUk6Q%5HgSUqSlZG.sAf+Q\>fgPqYFC]h_qVL2f7%c%$Gk_t2,<7XQe(<F!U#b<jh?RPRrr=_M&F(]3aRC<jrQf=YnL:96O"eI4&%:3YR`NLR!:#t%Y*7JqCGD17@nbqS1c_7\<*N1(Lp%#?JfdAia_M9RR$-$]L;R4SU_AY,POt/U3$,=sZpUcm!;/5n>Go!<N$[RJdZdigA4^$OI`;M%'Jh3,D@AgDZlZKmeJnD0HCic1Y`[%<mGCTW2"(i)_bf\r^%KP(ti<8orop5d*R6ng4I==LMPO+=RiMm2PX%.XYW)4a/da\c)kTj@`<lNZrT;&.Ou^[7bsKPb[";>()*EV%FVJ\dD7,AGWaK%<QYNpfg2sA)QSFpm0'D'GUn*'.Mcl"@_s-N'1:EY<a<hil#r8u%$Xdmq(Kt<@4Z97F6Y:XqKU.cj21'L7(UUl[%jBBpu#`F#]bI>J*d`cr'o+>2#A;*4VORC1H_7n+dk`;"A<%C]Zhm2pJp"uS,lBDO/o$GmTIs%rGWp``=h6ba[,Y;0PaQ95ZX@sdW%k>'Q7)p\*;F`t?^]srkfEa:*$@%hOG3I^WK*m[SVRnnT.rjWTbUh7TnGJ#kX>o$ZGcUkS&%*ajOH7:Kg``)P>nle#6QetQ@;mU%>%.ce/+W1+NT6\_#lIWE+%F-J`a#l.AT^iZ0:?ZBM04*=_Mc/_K`MbL<r>>?JtDCsU-9=Ao8cq/-Z<Oq]0n4C0B4"e2\(V-14N:7Gg%UdpX>*"Z]Om8&Upb<er`HHc9q:ECPEg_Y%b1'DbG`P/.'gXiq,I5^_*Ng-[_Inq?pL%ePo*ZFiq!V`nX.<`EFDFCSCB;;cVID%j;%R:0k*'`Z='0='K`$`bGkkAdZLQ@Dhio92ZQ#;g^trTJZ'^oueUgdUDCPmKp0Nmb>ni>B&_WS(E8gp%r^^R]:5DEZZkTlHMl]D5rd%jsKT^:M!>eKkttt90QT%I\4('blRampZK<6h\\/mKU^DkJ+OWIIp@.P6hgCJE9;XSVTZC-?eBgGlLaY:GIYW@L\FbogccVOc`U']%dcg)"01k-u(S@;,03J5sc70C[\]adN+IdK$Pob4J'CTSO9ea<JopI0Ek[oQIFbG,2>^!$N(Q$&MHls2mK5nGH'b?L+G4OTf4EOoi%>jLl"JPD0\TL2;uG6iub<I>L!a,j'<beP_5$#;_Hape/rGb#4$'?:9Cs()D>Lp5e>5s\KjDPhPq+e[`lA0F6f,p)YZ\9^&ps2;^_%BC5i*mM"VV-M%6jGMYD+E$!=<Vk'HL%lBGAK)rVW-:4qe8sr>K!Ujb*=O5Y@XOIt]?Gr,N2%Za.h>+T(^5,#@oR6/JTDJt&rT9To%PG=)hWo(grm\bBBP0HsI?a]lOlM!HuF1=$Co6g]So0r#Yj;Y3#+X9+G.tud)@jBb.&]:MR,Bp>QrUR4DJB:SY]'E$hI*p[:kUKje%qlU8dDs%JV7OBtSI5(MUC$=,trm:S^*D24:B'T#;EKIoL>V&sgVP>\2#C.G`AhFs#%Et>7G2[E'?TRTrpR+"e0nm(NO'!OpR4.+r%GPD7=bTunU+"JpSl%,*)!cuZ_pO%gr"StI6l*=Pf2_J7O0a[mPoX!KO\dG:%`;L),4o._-L1n[P0(39*K'.CDc$kRpK=nr=.]AjE%-G]3U8sier"$&1A-Iq;sFR@GEm="0\dV6=BQ^1sf8,X9(9>^uDm"8b2(hgmIL*S\@?=b/Fo_ipQ%jXh(QHPMb#=bga25to@BB]dt%RQSW07H&QXEu*;X[lQW'j<?7I5?[mm3o"Jb5d/mKKmYKsA]/!<!=>8->C$PtUq-!Xe<fu6F@M\WpgK?"s*d!1+KkVLJ8%2$\`!n9%60U7Tp[rq95'oN>M#Qs(QBpC_f1AO:XdsiL.@>U0.`ikS+Lla4k6n9Gfb5(hT=L9WrKsb"gN.5Fj7M1+lS//k$mq'(;\]>KU6\S-%R7(ZFRJ%#F,3tq5qobP68^dh+&kZ949P^'jSGbXORRU?c38(X"HD#Q>g.HY_dslZurrNhFI2L)1bMd6Jp3E&PV6TZ*.T+?C5aBY#%+9fp.)>7Xp8Cs1%Jm+$]"$$Q@7]BNPIZ-dTStG!)`-EXjQDCSD+`k2=9ef_@;',Z"A=+mUPK(?iT?h!)f2E=C2,eT<gWQ6C!#E.X%PC.W:l"/reJ&!^UXGXb9?cr^/*"6Xe!;4Y+^os@MY!OU60c$U2YS%BM@2\2!+K3:1?X+(%3RSi$,hP'Z"ge;>_;.Kj@ACK')U9SC%:p1EGppH\]8sAp=b6^KS!"\baopkmTE`#DY9(d8pk;>tt&u#&IUgtr%DCH3+HG5p)aA>(K.V/Vrm6DO"mA9uZ)[6HRk:4Wm!Y$I+%?^!791uuIFe0O/m`&SD#C)]kC@V85.&+D4i+t;%f+^;a%0jtIu[WleWl!C?jZ:ZZI!3m@Q$hkB567)rfB3<iKW/*C24qduI'[udp%HpdBP+LJ8E-7SBNCJod!_S\p:P%_S.USSu29KNLl<sOsDROVi7_U%-CTU?LfqSD1nb;Ua?>(/a_J&5JiGt]*#oc$"&HeGOR&.Js1%/ts2OaUkp_XN8.QLL<&[:J]iSVOoMis)9hJUe\Mq^s`8BBS@$kO+FJ#Pma59cgcV1(BRd!l*fSK=ka1BJE;q5U`L'4]km_DOik-<%^W0HA;<C8W;)M_+ct8(5&M7Y2>"lQ$5n2*3K&1QbqGf2]DlSiHXL=M6eAI+jQMk.H^#Z?!IPZ)$16$2JDOdc'C*0btY[E6c&Z`n1%7r*nT%5VfGJtIaR^,15qI0GPULM=IC\.<5j!#MH^NGPKBbB87/P%n2e9BgI7;[GgmYd\;">.W*N"B_,0[;B_^R!`?6C^%V<!'Ucc%_Uj!MC"P%G.043Io!6Hu`5^4.>"Uk/:2DIULt/DBBFo=r0:=\5hiE?"6AZ1>ZP"..\pH^/USl9D11O<FWM'7J>$7MP[(Mt[^#cCP%iX%m.D.RT`YJ/5_qgF%>@HOl:8d9C3f-6%<PN#RjGOZn8<O.1@"XG'2IsP@_*ereRFJXEifH&12ba`E8bSCq\Sk2fO.2/AA)2c+/%AGnUFWr9]dcu(.2*4WUgHJKp@;kjeN"W#)A5q<`BT*dM\Y[s"e9&]tHQt!Wb9_lNV]jJ3rG@'6+F]XO'<:>6@5cfO@B$nr<$kBW$%Dlu'5E2+S;rd+om2[&8lAoR,B$^'_@TM1G,>Sqj!#2GV>/Pqh*M0DEV"qK+YArS?R$An[b8:_s"52L^CL&?0%AgQW#NM;fH!_;5$%W73G,Ao=ZK.d)4$h2m@DTAAbdS([sLCWcmB5<PY0jHu&6b>slW:IE%Z][EA80U#Y=_nC!4%_'<<L"'r4>o2MPO66eb.<Bt7$!2=R%jsub2TO:iuR8QLVAf*F&T=ZpinG89-SR)JbJpZH8e5)jI=?_h8*F+m;5&W[dip%,WDZZIacq\e=6Gr-cL-=WsM:T^,om#deNdpqA%IA$LI5D[W7l+H#k-j=[Y1Z'SBYuQg(jcd3O14M0sm*/j39HPJg#lQICjtEo!*N`s-eIX]e_,>7CQ0lop,4m>f?\/0;s39gOg0!H8%?uK=9F3CnVB8bHD+fZ/fUTPOipV"o'7Jc;;mGMD8]=R7f3hoeBAj4NA=JqcI\SULA/#2%@Pmh(k!;<!ISjhYpcf6XO;lL\\$q#4i%!*U<dZbtbA(iS]epO)#=r<aJ#F/==A+!*j\I4K[MUont'#*apL5b6BI\&'eHXUTn.p+'=Y'7F0S!D?"1]Um]]\f97c&q%E_s/<:C%^c"3,!p@arDu5s3[,?es!qH"%`O5b4cQB"skOmlj`Mig*M**nSd^Qr*07A'507`lX0"suH!Sa$iV@$?PBAqXbCY8rPNB:)C8EWCc%W:A:4j.feOEHqDOqZ?E4%&6=Dgni'W6,nm>pQ6cLEt87H`"#PWNb[GU8-PYSn)eo1:]-s;)]Ynm,P.%D3*IjIb[iKH4dWZ,(Vkn]%'=eVW2+8lFk2Ne9+<VBsMEJ8t5@7dfrlOOb0^/Z'6LMDF1[:F+?Gu;OT>"*-hlJ:jpnXDQBgl+b[/8f&+?s'-VK^b?#:;)TOGjc0%?&KERMkc!p"P3I4--Q]4*R93g\c0U'bdmLJbhckPc?6ccFt[I1=(!rdhLRsfrDM2i!QB]lGorpo2qe6d(kWBeT3%b3<qn6mEl2oc%21ipmIN5q>?a\3O[XW61!K8U0dc9E-`/'3,\3Qpl9\RtJoiIMT=5s%Ve7iMe>Mc/e#u>:ON%L_s:8Of]c;!^Wp)2/jF;MtYHH(DG%-hfmpIlsVVh\@6+R$LkhEsX/MeAd,1SR52uOusD',6iu6deWdI'Y?_E@jC_j3sQZAM[InddU=;gId\#WWSUqFk`!2Ga23J9EL!p"%-hVG.d4?P`$`Z'L&g&0jifDo%.QX+XOC*#C9:kbOcr^<$Wd`^i.5pe):_Lb+ouNbiMC"p&IU>jBQ%@qGTZk`US,O1Ba3SbjiTkqa%_+olSb?X86'26A`IKl$V%fY7A#DI/`CqV7Gof(-\_<?r1p=#-'A/P=6IXK;6mKtd28sNtjoJ*!$!j+dQiB;55!A?Y:Ak&%rA<gM>%%tOKp]Kf-SPk>#:-b+`,Fs#"Xh9WlGO80\k1[nlQr`O=Z>Z[oXiQ!/:249.,(cDT*B$UkZG+K&oYB+$@5%OTnN<9JJ@^1bi3-tGc%1L+J[SLZ&C?!q-[7-oPC5J52TYbqZN7HY780&N=\Gfk.B+)n3`oW&?bH'a<\H+_PGm.:ll7E(m@L!B*pR=.7i-'H_EH7m?P&GXc^%;cI;iJJU%D(\6f]nELbr$?d-lWe;;e;;gjOFj`RL4O1D\@t6QVner)*,V@QL$XaC7X6E4Pb@?J7;#VqZ#/UJD-`.]pp@CP5hB0@G%bu>/,j)He`I)Yp,/ANOF+/^"E]Pn7GlBB?!T4a9kW\j[>.gIEJTG'%)'q\DlZuJX<$ieoAb9]RtTQT*I6Rd/2Q4d^Q;hUVJP&CZg%`EbV$Q'a!`V-OYa,qkH"%]>r1"h_ufPhL$:>>4%0[bqH[&Jq6ubq@e:3/!bY9_rX)?K;0Qhi;M%%@0VeC&NXf*9Z&]i]C8a\7UGB%oWFuK2L\;CA[G8tr>H[uK4Xq@W7jQB(;Mehf_H'sCk0LAVDs"Jq^X%C5erGR<P@HNR"e[4!-9;oK\><bE'L34_h+5`_=bTYk49'X%iSWur55'gIMEa+NM5e?(85%U31XE2t)6QeR_YqAsJf(k8V*\Z/(4hDYLFMJeQVU,0o**qG%Mh0n_1sRG+3dTnn`(5Fo:;5fSGXBN%.h^"co6+1c/XP^8CYGO_!YW!r\'5Piod7oIf<RKeMr':D(T+oC2MMgm38ELH)lj!d]2g>UH@X+QbPTS2rY<hT(XW8d"0M\%4EA4Y%8R/0/JJ8rfSo7;46-Pa80+SucBJ=N.%73q4?9fNj],>&(l%flCpP5\hSh4Ng?TSL3KlrJLh!uPtX/j0iZ<=:/%+o'Dk&ES-qHaD=%Vf_6;\A3#%8GSSQd(*N4o\D4lW"HnkVpsN!FHF,Gj8n!WAu8$!<Sk-e^.A!Xjk/Mr27$r+?:6nH"I<tS1&:.YK2n$%[u`#F#ra@)%8J+\&9HnLn:)4SpA,f\(3ln#$"/$h+=fKu?,_.a94o,GacHUU3e%Ula9j]b6%'oWHVjF;9(mdZ\p#b3_2]o/5iU_Kn%8U2uTX@X9%*4Qg35gY/.^an40BRGMdO'po3T(KPCRk(d="7_!_+WX+EZ-\#L!64?F&eOQc%E-uf;D#jMp6`Rt9D9q'@Y<0+)>&=KW,Ys,.XsV`%'fBRbBdRgUV0o"n=IGAkIEpFT[hF>UX%YPm\:F(/qk,TUXssX<)<Ktr+VnB*(fQiG\oLf&gSMSr8-_o=UtZ!E*4i>Oc,[p:=M9I\%5OLj%2X0BhT"aMUhuoY]Wdfp!b3KS#0]g0@.I;Y1EB;4N7;jGmmIg1Ln\qUPY/L"ikZa_SY6u_.SW@+J_<5Jb,<YN_C@qBFJR81:%2tr0D=3^=mYVu3*`DqN?i_uNFcG4gA`<U%dp\sb-`FoSu[&aKnB4M3u^Wh5*3l0Uj0`.eIq$_KEG$+6=AYNR;W\8o0eUNQ#>Z;t9%+0IgQq:9sXU.Rlajqh\jPWHlo/UL#p@`YGKf>p)'dJ@,-q<$j9+?_o4<=>FjG7IB&\(mhGMc#rk_esjl?;sO@@f34^!e';KLkuC>%NC\t#V?]R4R!E"gi/RH\Mt+]/>=XSqZ%bJmm>lg$k7<)'F?e*\P9g4/IQTcNeaot7Z/-^-,D2;ITO0nTOhUj5045b!2lW=Be"1p0%TfWG)!F9`FCp$$4mGN!>$*L.d:8B&#>cq`]3D1IhK?sV<"qH0=J\1.2Ed2C;_Q?RfI5rimblM9*V!MXI6-#cS3WNXhX04o8]Nu#%%96AI'137=TrNK.7<r-BV<)W^W<(=?s_kX+d-*4gJ(Q`:W0i+:2Yo"KFFd[-n-EZD3?OLcIg%sq&p"u0m^`*J%foJIt@PbClCgHjE%&lWB=U'AL[bqc+G.(5j(RuGe%`SZm4+@D];hE7l2#"o#/5rkOL.[P#'RX<4Vgnp_"W<^#:fSjdIEhN8Pfi2mA0KoXlIp/@"s5YMV%O7C2..sGKB-4FDR/UEL$h4"7Q4UmZ0:"sIRh=Y;@Bn$6]FB,tTr@r`ta%"tOq^Yds$:6H8Y@%_seSDSORk[?7#p6Am>/V01Nih_Z%I:pM.\5DXkaj:Ca.lk+i1bN6k!O<5`GsZQkLj<hces_NbrV(?^)E7O\MnfI,h?-@AfPSI6*,JA7,DJ%kJ2GFIX>uhp46t"fRk&9R%8Xb;s!%bI=@O:b]s4LL!!u#Lua)PlRQLUVg$h%a,d5;>$=g*3%fX0Wq$Y7[qGbeg"NC&bARK4['\*+[:W]omGaGG6n2VVt;Pj:!$%cuRUX[:K_@qT3u%#Q%5Mir0n\+=DOdA+AAtP2K!rS3-f2r;4)fG0ZS,_*MgrS[:fiN?2_R%^T/^<5-j2j90m^+MhD:YWn>JEs`<U%-W%ihB__\M&2a[DC\Gg<*Y&NS^^6)OT8pa8FtP*Q7(_dOUJ!\;c=-;T]P@kY58[%plK?@a2f.?i3/?K8<A59E(l[ttZu5H2U@6F!%bOGShTc^SbU?u*5C)uuBRF<$"(2Z,`Gs,(KO]UsL2nYOL1TjA@]\,.b2&@!qb<5^Y4`q"\qRKa51rl0LbZ`r07'oe^I=4n.g-/[b%7$We`)?^MQ<eXY`]o&S`@JfMY>M[kSiI55J8?9N1Re;8mUKdmXZR0Ka^\4=4B-'k-CibL&$L>ln$F#0eT3r<kX";HTZBZ`6qUU;m%klHSY5=kjY>ER)KW(D)k@1\ej)>TNpk7=[K'D>f1rTE&G*rb/P`,2#G$>u,9W8Nn)^L(Ml?a8U`FEi#\KR6QfV3LSDh21#A04-b]%"iD^3%_'WR*$eeGS!TKmnD+=<T3ib.Ii5H#!nU4.=-0uTR./e8#GI3gZJJeocHWOYj)P7\]^hKO1Jp=c^5/O#F:\O737Lj'eECKb%mb'.:ek-1E2j^MEfK:$',p#F-ac#YMT=qol\X12)IGl`*en0>EBhYc#8%8J6d!#`aPsr%IiXU\;EpO'.Co($T5+A+gmfATe"VVYd%\/T2+k0_'*JbtfCNg\0IM_J43Yd8OcScH!i97O823^t,[j,t@7_XhG<M#O"FJ7NX*^4+@AOhT)sYMX5WOVXdS8GqHlA;Km<kbd]c%ld2Y&`VrlbD2^=1o$$6tHY/5Db.\/e>hl5$FgtGYo96t4cie(DgXA91c5RuCStDAOj1@3;H;Ng]%el*-kIiV8.oWs-baBRg&)Gc>%3c0WDP:7Qee5`:mBMq-#%&QcP>+m<2!l+[j7=qmmEhXd3J%?J?&5p<%Xh8gNT)g=SF-efsX`nne6a+A[Fk.(b$Bl3*qFD;oO[b(j%K8#1^j^a=Y3VtdZ5F<QF[)MQla;Z=oVr)bUUa8:2am8Q:\?C_kchp0lSf&]B/O*CIf5prfDM46'`:?J7.DVYueYCj9m*llOnGLQG%hFi'I4Zt4;:YgZm6d5n9_p&ktb8ZYZMMES8?E.J_;ce3%T2q!q;Vqh,D[X:#.HS,F8>W<'Xm^%.aug?5cU!U%WE:Y]*\c%?gRt5(%kt?m_^ZHb180.-o60WSG%1[;FKN=0+g,J>e,#&LbfsD(6="dL1GNT5\j=q[+YC^[oSShhDLpY_m5;blUo2`HH(a4Tr?[0gN%jt.M%6NS?o&!s\1WtR?YqG:cOVF^$lE,g\q3nspf]j`%[I*)TV\bG(CnM>$<o^TTU1I;FZ1.9l1U_f(="F_#OpWC2$)!Obkp[aVBp^E;!%01*,R.F^#OI2u>da%p;<$V]US2dqZPP4Hn)e+9XN.6JLKdH5q1U'ZCG-.h/d;oV@t#E,="d[\XLO08UQl<fr9Q,?Pha)]Z0Za+Y"%2UhEnds$"(O:G_`SYeDZY&>Ki.<gsIPdEtKZ[)$1&0_R`8-'JM+NbkZgS%^L85o*p;><&+@AN(XHpC2.=1V3g_+<H"nOj=:]lj?h%l0K$j!GKBOU9MoIV=O-e5[%:TOj<gd?@k"_)q+Ge<6r(8'*p%:?8%WW;MYMNp$d)FBt[Oj;J(Wu2mMCqVoA$,5g$3"k?5ARY5@%&%_RME9"Z#na?@KLC/71;@$0L6l^G%*"8[?Tdp!BWON'JQEEbCDQYgc4\PZhQo.NG^tI"cDI9&EQMPo5jIB2[j)'[`0qUL.1UU29Bh%1B..0fTiI!k&3sd(T1=NQ\TYBdOXJ9i@b$+OekX[fXOL!QR=,V='sLfoFNi1NS_=PZ6nZ7"r&RD8'4p<=%gNmHLj"d1au.D*jUXC%PcduZ=?5Dg4IYq!-=<)@NN@C)AmBYQ0)V5bH*;5PboP0P5P%A$Dc6T,1ZIS+cD5RS3scD.;<-*fpSrJi%,u17./*(U<OdDKlc/CG%/.W1^Rnqhm5sQoe;69Y:;ck#=]#J*,1%4!I58OQZV=)CYc@a/[F)Fr<S"2ES*H"&`lg_d]ctYS-\Z":q7^-u'#gLeWdG4DDOu"Xp%I`=N7GJa$08lmDFb0R`7e>'4HI\!!T'2rJ]2ap%_)(Qa++R-k05-%gtBdO]Lc01FHbBJ*O\cTFS7p"X-"0=!lSU6^de[pLLWc7p)%FTnre^_V578GKOPfjk(d;bJ9].d$5CFF4.UUJFOifKlR6YCqN$0\em.H%CZnO9`t"YZ>Ye%_._/C60uiN[D+?:*/t&r*PKR@]+?j%2k]h-NE5P_R3OjCHj!0+151Zh0gR91JlU6d5Ad?42+X?(/<CWQ&Tabeip9f6b!YKH65qKsreelX)/4)h-1F!U<2^hbjLn:D;+Ndh%a+l-BJE:lT^JWDD#Rn7\C5c,:IPs]B;!9X&=fFiJeda#t_.jUa*Em&GS#/`M2-shQVL:lKM()>9O4;Fq)c2Z+lU'@XMdtSAZ2n?K%+S=k6)2Obna&]mr@95D^9kk_Kc<N9mc'F??S!"Pkc\f+-]KFe??1<!Pj3LE]2jjKYY:R'\/eDH%aso3]=LeMj^(-5hk7$Id62i%;%XqUq]oR*Y["7^X,RO.?=hISr>j-/QRe%+(WN<&fKpq*#:_`rn`!h[c_7D(dV4g-lsQh`)G8j!<OMS3OUn#$'aaf*qJ`0!JgXrdVc%<Ch<KhZ[[KEuAu0d3$F<RY:r[=[hR@cC\qC-&R3eh2CqU801.C[IbViBYKimC9D?:Y"A-TBE8"IoYg_I"@Zl::`6@RI-L3B4jhZL%4*jV=d(aYqWbg0LLR[]TqU9i7)3(:MIf0#ZrUmbl$X=?oJa4K#A#h`qXZc>['?gCM'l.=+Q]6f4!URXmfc=rLm&gtZq)\>"ZHHB#%?RZ\a3GZJiO%r:d;;R9"@?m%#VL3/s9m;@-Z#l`'3AB$BT);f98g@/YY8'21pY+$iaKt^:Gu4UY)\]H#F\I`L_c`CWX"5gVK4K</%rct?2Xt-m&_\Mg/Ok;RaQ!VqBnOKKYjc-jKeRFoqDhmXMI>m?N=[SQoZVaeN7IunD=5IH:.q:=1*11Kk`0q1(8=9<Z/u4U`au%W;%3Rb*bNjZ;V4\WuWgFjb/i_SEk0OJhGMj]mF<L>*uEO+I'=>oed".1ek0^CPZfOTo0kiZ7CT_rS8hHA/c`6$8U;TWH#"8Mrr6cP!(%)m_tk5;4!NBIRX#'`K7R&37!)Gb]P'c'n2mpj;!be$TR'Er=ObA_\r*H&5fFG;>9M(g(5C+joX&,mVhsDFhRpopMYX[4?Q\clT6Z%'MK4i3h'!aMk-SCW`!TRiSJO$#LVYqes#XZ#E<Z4XGI,X(LGjlfR\aZ<81p#U]^D+&'^Q-,'2Z0#b%3(7*%9P-^H[*Ad$_RFS<an%VPktNk2]fuF\\BNlZP;DG(Hc"G?D7GZR:c`RIU4;SQ)`&4]"g&Bm6A?<haG)1#gk1N5fG#SqGaNCC*b$r8uS8g/d:tL[A4if16Co%TJ`$F]oo@?m;T6GfZ(?d8\Ynq@93(oh"rjJ[D>0In)gd5jPnssdY=jA2lD]7AKRQSYq9%U;ll#G\e.X4P+8R>_/-j<(ac:0Sus6h%;DN(23[nI7+aVm`/"3Q/p2WO]2);D3]S7mco@+=0>Ee)!9uY)R3CE?T8"8R`ZtnE[>AT&0`2Ra-GBf#bL_#[U!g[7"VG2*@2epj.%!^P^!C<HK[lq%2-rZ,pghDaiZH2RBiRcFsJ7*dGa>JZUi6Y"6e^-:t5rlskdWPF17VVDV_^KC@oc.:r?(X*\Bn8*_A*U?3L\$.s5%9p\"RPlupYfn!7(>%E#P/T_XGat`U1Bk,],hRdm/TAX<&&h@;jY`k-L>@VE_YBWV5UH!?0XBQCnE62Fdp:JPjS%D5l#`i9c#*f&*%9'C:a/T9V)(gSoQq;BZZ2XsAkmEjtCL6'Wb`_4>o`I8!&KJ=b\_U=fgiWCq,f)Y*'q.m@-9Z^"gVa5)j_kY>4es*nsS'kL"45;`Q%Befn_gVYUW-ei.@4m%)hlRZHRmA<rg299Rb@N-c5q!B-bbEZB=DSbN+>8Jd.qj#o^U\XMmS%$cgLGbu:l'1%*!ap<XYit`8G(d,D%(-5JrSV\p+W?Z8WLD3r.gLFDekOnVXk;PZ0SncjJc?e&U3>i+]SbFM)o0'&<o?+57?%3Rl(:H#+0TTB6>9P\4=.,RIE\+WRO]Tr/%=f=GtO)I0$m6YiGeu3rT#gU^O&4(Tjqs5c"]Et);ocCNt2ZT`2+l#VFCA%mp7]qaD91kS\Y8mhSO/u8>><?/!>Ko'SbkLnVN/4BY%S"uk(:P[\<IBH*tT7KD2D_BG]4="<Plp7Aj#Q!7kq\HgF0_8!\=]a>46%Zn^h(>HS=<c6)G+JMQ,DikJgokWKd>WGh#gViNXhLF@%<s5F0\oj<J\r1kOZ&cfPZW5B]fI:=AK%=`Y)VZZtD+U1:!Z&RCTC,OBh1H4rc<NLqQnG3%DomXj1_R*O#C\H`$\3(<AC90k'sl68%btgRf-hGs3YMaBgCnSQg#C_"4Ah>"9+h(<ad'^A#cH\p&&/7K)E-:>l/KFAM@qq/GmNs&a)g_IaFCB^p0!s@%E>SLY_k_4c8/L^&%ie&b_2%!$>A*^NG!+om>BW;Ft.gl>nB:hg4N)97^G:iNu\P(+BM`pK;heSkr?+?(6HSi%sNM&8dCZ3poL=Wq4Q8$R9CMjr*W7-Ii%89dDMK`oTAfpAh$,Ji5$)<jIf=42l%e70>m[K(!mLZrhY6V90cXZ[G=Z*;6BZsi4A1)U(u2'Hg=\c>]?SQEX*enQWlG2"$//1jRt%6r,`(\^g*sQjV2)2BP&M8GVr!l1@\*Stqa;D+lUR@L=!OV.W`7AElrK<D9O*`?NRfjI5mjs&ji;hMd[W-5Td@B:]=YCEpG]hQd.2%Y?nV5j0I)#%0X,Dc,=BHB#gN[[POQs8]]#Bj0t>i9MCC]-u<nu(2sC=Th9PRCnjj.DIJIFV.aE!"&]R4HmmbM++6)+kO(l]"hoJ$%0J]ft$:]XWUBio9HTs6,ee*!S&OTdBcrilciRR8^0m(tYFB6e@S&EZV8'ktF"h0PdZ]:]"\G$Y(B,s:9M\b)/L<_i3cJdVU%%VMD%*BN#]LDW)<H78W(%l&1W&TkArDO22$lNfO\O0+J:diM%<O"d%A=kf6Ti6<Kt;SO/.air4<4eAc;\:)s!fSGlgXM,]NelIj`S-ZOk%kll1/DK;&uI#kIW@XcaA,<DqrfrUc%o@XNVo@n5YB_V9QJ-C,a+0o;+8']fV?YJ8CYt]>rB$U6"R7BHDEJ%CNBf0E2H:Kn&R^4AW%ScdKLesu-\/:_JfUEFgLRiM_/aR<b[%\Fb!$ms]0CR1j0Ep@7RYab>3jCXE<=hj=g0p[IJN43ZrX/*/>DHe+bd7R%s(lNfJH>0s6%)$3)Qd0s.GD[9$`":M;6Mgk&R9gQ682i)jg.C5HJ:Y&#UW(!mWF,/_sJ/1h29K*;5-#n<U6Q"FYm0cC1fp"XsGFbj[*;Wam,b:Z,%!7>sO<eI>r@)#PQ(cn^*)@,uIYVmjeM;tqV]"n#"]2$cGKJ@o;8p+=*LSc@6kEdMiZ7r,74Rf"@k%EV;TsHV*Z(lGSi&?JP)dD2W%E4A1RhqFG7F(We;n.K-:nU<Gjh>&ac9\BQ9<ibRXZ*uTkQAm;)^(mqn-](7GQ==%<Y;BHDkd3n+FnXIR$]&,'D#bfKlDB#'Mg.7q%ZnMTT$67O9a*SU%=YmZ+k=7EG0b-:']bT/%`F@0SNX.9/HuQ_+#T/;-\8%^=YNeZJd"DmogN%sJG=Kg.4Q[f)lf\7nEgUc"lIasX%(t?5+lc<LG\Wj2!4AfuXZ"HRIn+0RNCI_^4Mi,Ic6^Fu@Ehq$+'=Ys';G"<]/-FrAUlK^gPgKbQAWMBh\a?s['RS&g:(*-=l"V5N%GN)`R.(aTLn)A"`5`W(T`<,?Lj%Pr<MarN\C`@Y1/=OLqVT#V\m-K".et#RF&JSm*,lQO>kNq;8kE4_a@ad2M3]eCNF8"m,pJYgn%2EWb;*oEDt_ru+WO,We7!VYehpT>BYACT'Kp;>68pW+1>$c[Y)4WmFZeOi6pG4BjIG[sMGr/`Vu:>4G2c2k9aD/lkp;\H(k8t^J-%f!YM4\/f()HF8g$`:H$*I:C";63DSnY4go*6!Z9-3NL]OG/DVO]UL"+e*34`Q*$ehCW"277i0CD"kU`DD0D5mn:^(lh=GsDEHS:A%Z]#T)Im=,?f9ouD7<>cJUNuq3iJI!T3lpnpT?+m,cE[(lc[EaLiU\a=gu:E9_ejJpf]M^C`i#L(*=oX.$!#aME,/4ImO91ealK"*%i4=.m_](m9cNe>,&#VW$-#`hN2]g9&hGFPpcgbs4D@+r_4<-42oT?jNa28dr`D!^_TI4=*%6@e-=M^GWCnHR6>qp/5>M;(N\T1;O%]=D;+4hMgC+e'i&f>=dR)/OYT(W+QOSi:AC@ZMZl]>iK5.')ZGj"p2j-!K-Q+f7Km9]j(N1c3k-K->'^JN0)iW4`+>*9jktLoAJ5%Z+E:T"+)_o3@8djF;j<!T!ntQeQLp_hKtWEcdTS_#)qJB9ga9.<s3/kBh1SlPAnRSDD3(%rH.)SZqQN`6X\UuB%Gdm7Y=mTXV(9R%YOc2=]X=WDeUj6I8:B8`7-`Oq*[=P`Yl."d^A[IC,*b<Ilm!^^H#Oe.L12e['u8KoDGp"6[Vcg_gD[uke#!_Vp90%EQc-o,qToAM%\28?W6UpQ7S[^&O1(E982$7:5Y=1e:9]ao56fF\$[e<+M[ZapK_O6D,IRE(;nlsfXL"gEL\SWabmLGu2llQOf1\<0`4VZ2c5A"tb%#5"f6;4tNcfcooWHU)&H)r^J`f^mrP<.b3aZMW;NmQhd%A-bkU&bunp9P^fEA9bH*"`6)B2AEU-Kk#+E!ClmepulBB2M.E@9sVkQ%P]tVB4V/.N/UfS&OI]t3%m?"'ID()$\X10#/JVT&b5'`2=l\j42ddZoCaOQ*QojY@eoKsQgAT^cdk?;[`@@g3OtAf0'ft,AnfW^)%6KIR2r5fHR_/;3pF=\19fKhTUEj4<W_fM)d?YMjBP4@o)ZWXNePA/MaI$p&'Lp07mC7?=\&)j;;mq0CRCEi,B]K&mbXL9QUpo&A^%//HF0NNgk8]2^'qKiAumL7Xi7OQqJShufB7ZNrY/CCt!!:hYSWOYVWk7+DDhI#lT*guLZDK&%>G_/;c;3RZpSiJWS8jZPeOV17;X%6[EB2hOCPN;ku[=jn&.sG#XOlKa%$#ns\C_G8@VeO3]SmH?d0fCGMNrGhN?iIseQCX/Zj*q,u&`U?X5m`'C#.Xj5_*4`[U4?iaCT%?L8e2cGfl4H_ET8\m%%8H1];V.e/c[=6>LbXuT9mIEk2_^$b863MUfZ%.@0Kkp<kL]l5KgSo#JW3H;Qs2>;oBch1F),.H]>hjtmO%1[UgV]5KURlE5!Pg:%9&'A^Z*9$LXVgV4hCJ%eV-h3W&%gst6`FR)'&Rn(qEl\F.ERa,ReTR,Sj'hr<T94rW:bV%:b7Qs+jq6FKe%SP^ro%ZuekCh&s+[,3p5:.H(JD"XBol&7m0]cgqHBKDnW]fh@f8Mm!c4q4>=pCp>7'MG@Y);.A6SWTO5HS=/<U?RVamHWtZ?dWs2%pK[)?Ra*=I:4%/++451"8fNch?DHbDR\[^OGkYl4U[`E82_n0G7+3$5TAaL_SYG@L6*5Q6G`-5rF5(`-d<$=)D!PcG<D`0;[=(Qo%D+h.YU?RV;=H:'bdhr0OZ.42\VDA;3fR#HGd;I(K)>Kbtl&9*9oW-U"UZm`Sa0[oQqhV+*MP\efQeeG$N/40Q/Sd#eF>b>Rp(0r2%'ME*/*oHAn^iN:hL),<NpVhGo9FRBk@P/\W%Gp6O(\hNF>%$Z*hs])529F:Xf]p.29C'G9S^tMkX'nn[9):O;$QFhS4Vl*je,T[$%W+Y-[XZ":e.'WBUgd_3Pe0KFQj2+8J]j3Z:*Mfp&0G\cqg7>pG81s:eaC+I^FK&7H#03es4EH`&1OnV+K:"OVBC</$>hLpT2h0u8%>f'b"fH7R!bah0JQb>XF>Bb['T2-dEh<ijgb9`h6Y/)\JT"22f;7t]^\K=b2U;]KDG%-`B<mTRCZ#?,%"#ffZn`P&pTi%F@]'!gS%[C8,RoD#Gii7IWlPX*j[St0A:VH:4O@K?C,cAieJd]Iet?p0!GOn8Kt#c([Op=E_'_U/2lLY\mc8/Q>"LWHVl?%7/q[e%?OP*)g8%7+IF!U,0M&b&"ftL9$$:GYg\U)QL6\dnmH#Sqa8u4:S^\?upI$GOhkmI.Zj>'nW*G?3fn;D['i9Q)@b2+ZR*Z5QjM']?MORf:VCr%^t&bA>.hYR&$/d6.&LTOkP38)9A@2r&-C$-2R;hrD12bLZZS$ndTr`Gr9='"UpT[KX+_,dXYm<]"?"9L5LQoN-#S$`]"X<kDXgW]%hHhmh\oM^$Rh$1]5_`"qrd8,>TqV.AO/K]tc&(fP/]Cr]<[0Sn`H.K\A$p>Gn[?-Z^QZ1d6Thpd@NEOoi=7NJ]mM>]$n&f*,?&DR%_jt,D;r]BfhmhEU)Qp_l\,EqhS%N]Q@?%$@me.7gR.Ke2V7\\7a7`/OH\kBNHfK#(?5[):]b6ZBkFp"W?as>3hJ6NLLUI,841htj%_a>o#$1&kV29].*p&f*"#E:UGYR^P][EX>iU!(6k,#f6O\;.lR[pPoop.b"d_JhF+Af9D:!T<;fYSKQf%m!js`R_p]^DDno>!q*P%Bc>"`\5@Xc_2Ot#G==a06%`nH['O+tHM>\^@Mt.C?mCK,1"384Zs%9_(t2)FR([&m2(ka6pSXPm@o9T'ad/FM:(U?6VH^ZN^TN6@%Sp#aRPW+:t"W*iqK=PCHa=tOEW?Jl^9XYAICac5<$mCpQBT4XLBc'%')M[J2`MPAmRAXuPRi2_(XN*9,Rmr(5=Vf]HZ,%.'^X9Qf%!uZ\GFA?^`_lTBc=M)+Oq6o5LcTS`!8EJN^H<r8PSh4lJdR?<'`OMqSQO+HH5pLbtQru@0S"6m'*27Y,/j2;O\X12)II8CG9;P;@%rFIl#C1jl@n.e(*=e!Qka$%p1O*I"5n$(??_cNUX3/8FWVnH7rFE\\-d]B7$L\%.H.qV(lO`-jRiL8+K=W=SV*r@l\.!3>'8=@>C%k10g;_i<P^USGd"83a5J\I6D*UtR6%ff\\p;n`Y<6[-DrGPT`6p@#e,)O`QgI^4\oG^s7Z^kpMPp#_bs$r?W/T!kQ#<fqkV:?-uW%a8Sg$mnJocQb2,q1Se;$V"2-9d@8l<;Z\cNS(FA@dV)5DGbH2C/OE'Dj?ka]8H[<m&qh-0)1COkVl'..=_eoL>M0c[_-=nOLmflQ%#"GLQE=9tKb1f^XIc?TS[^/"Ql,U9Vl!?)+T%H1jAu1u(F4u$GcA%+m4='1CDNf#BKLMXo3XT@4fEC<gSrQjbk"H:dBmm3D4A"':%r=Lk*6YH$HbA2"%UK&'1@/???[uX-cG=%L`K=/Zo'-2.3HaY<2acXhj:"$>E_0iL^FShuCO?_DJ'[YW2]]"7C32`%Ym9)RkWte^0%ai`c=F+AQidl<N6T"+X<gYKTNnA1iGj7[M/>TSq)St_?2npB$N!F:',h*:Uqho!-e@*FV=X>dfDH:uSirp4<I+.(?k(dP_'@V]$s%&=E8B/N`qdh4]rH2pk.?2@ms]IC:Y7>24.*CLeCP@%5I"K'A[`]UN<lq)StiY0AW3132%kMHN(mK5QFj*$?Z4^NDh\O-m)g4%0P=%\60qWFKthi'\e1L+8U<oeC!)3`bM(7VX_[K9j3O+3B?DohK*)B)Q0(3E_^>(:dD.q2[nfth/d-K$FnR[C#U[=c5qRa@toc#:@IWS%/8V(eg?;]J?u$kah1T6QhtOD58T(.7j7c,"_%bNo\F?M@W6U`HU&aT#!:!@%D\4+(A*GH"WaQ*@D:l+q(dL(WgID;0a3Q:@O?0)H%722D;%*-N)fToBb3`[t@@BQ2S2&i5p?IZk,gGTC81F*_jJ1E?TVW?Ck76PCF]L<O-H'>VL'&A!_DU1qYFOnp\O7I/[,2:\0nnDIS%qPPCr1\*$^s&$N'0=(!*;*MW^51pI;9HW@`4,KH?J@ELmHq%GPrBJG;q*+B+*p'a*IcV'#nnG`DYYeujc(n4%\uj=eP?7_VEAnSZ%f5E=)>^O(%C:AEcZsD,c2JmHff'ls0CTigcN7CttqWYLfpT!,ZG=1WPos=?!RBFIeI+Q\TKZL3CAp6UZqQ?GB:>YeP5O4LVPileZ%GPu>GEp_gk59.dVk0@!!bDu&f=a+`UrQ=Naos9+tDlX[>%,UZ`mZ?rFe]m"E1E7b->KsX%f?a<3RE8a]>3a`L5;E[3U9))"hY"3U%FD."R&+B?t^Zr;e%904nqH5Io9hmumr2u[>W@@L?^Ra9BgI'2srHJ4ATqKfj_n1BK)_0?om[`5-ZOWK_Le-@e>sI?Y(&:ioh<PJR%^[&@T%$#ee:Hk\`Fa+7=f?[Wf3HViJgNWT)pLt<T!j@c1J(N$C^pQ'EFo-C]2"=d#YPPBVF1(,AIb"Xd?Y%pa>sHNC<em3XO*CQ(%GDA,%O)KeX4LFSIm2l"0r2SZ:d2^0pqH7_KS"I.Fls2hk9-2-dn,BJ^orEQ=M+Uur5/Z@9cb"YWqp"t9"P^ZVBDnjf%e&q)E(In3%4hdI?dnsHEgWOqkCY-umDJrX*f5HkNpiI-\[s.dOJh8g_qC*"D421$YYa==LIbR8eD/SL'o%8]cqH94HDnf\n^R'0Cp(@&1r`qa8%ENd!gl_d"Qq)8(mn+pmEk/uUf^[6[4Pumo@mj$;n8fPf5=hX*5EQd$)n+rHn0k(?gBX'/Hos6jG[,P$<nm+Jdn2Ohs`U(W-`BEp,%jj*>kD76V&p0BnBi*(EVDjSq*oXfS'*9"-djB_M_T=&++lm2#oY+Ki%XK%D,He6U?<BgS4Co_dYXGe9<_sHDh5J&htDX[F97oKAe%T4N-3#4MCk.u,uZS@7>JZW7RS;M&,<Tb[5s(+bo5otp!N&)Fosr)%8A`d47tm@ml[e*1[sn6R'BW0:^Xi(gn2F0(f'Se:A\6@r?c%&-R[na<=AWg=`Sm5m/FL>b5$cdM31_>_i)plq"9YT$M$(4RM_4B"-`l4+>C<?:WEUd6IZF#Z$c2P>X=Xo:<W;]c=O7(1((RE#1]_%rXe*[[E$1THSDUf:V,H4TYiA4b.eC"cme]eK?p%UX)9L)]6Pq*51J6LeQ;/8[Qgi0_q3(e7a^O91pVT!cZA0F1911H^S_!se7.RC%Gtqs-rlB49kt]*5k32]lqbh;rpga;=:\+6n</,JO4jM;akOGRqpKkLUELFtrJ(bZ99S#3"155VG!`M4Ogb?^ic1c&*57c&*hoV)X%8`6HL474;TQHA$ss"&Kf$AZQR_VU[XK@H:5H^BM,<`Zed!f;jDMD%]L(V,l!\m.3fT=*2s+RqOF-^ijR@q#mMU%VbV!d=,c2&:+8%O#L-hUV>`Z/jD]n^16n9odG,Ibda^]ioS9pmG^fq*FF_R,rcSIdp#!aQ&gCp>PJTtK>L((2=&!Z:5/e>G<iQ8B%m'FV5MY;H`6J:%6?@bR>;L$G<:*'%iESE`!61FG6N/_2qiD.<HoZ[MBSA6fY*9!5f9`J?qYa.",_"VFA!++h6L<p=PC:2./>8YUR:h!j:M[><Ot8eC%i%L-U(N;#8T$kR]S,\9l*:@XX).qjcN:ZGQDi=ue%>%i[e-Rhfk&1grp`k#-+pbpf$M/'hi6U]o+Tti3m>!'&0uS_iJeo^6`DRA2%N;HHbh:cuF$SkTcc3]$R%A7)+;'PO5BR!mfR'2QM06LHAbs8nEk_9;/nY]:CUC4BqQ;R]Y%T>f=[\FOjk^q[EQVtUq"i6slDn4fG%MgEM]b6L`fc]9P;gph\#,LfbOJeXa71sWnL0Mr.=)[6KtNS'Crk$X@iYZi2e"no&?=(tB3GY?(oOO>dPJ6>#(I@/b#Y1+5n&C)k[%Y)R)KV$]g-YjIcY(+iIPn8lDf^9.oi:jO3KV4:VG.qH1$a]KDK;3^$o20V4qo7!K1R>3#U-%X.U!Yqgk=')RnncO\V,Bs^m%M0Kb%+r`_9-iEYdR@(&`2ehNij2&(DqbhJqgk:0L?b,fB;P'ei*ZmUHp>Wa.c9Ugo@mD%g/lt)dQJa"MDD([(_.'k![4;j[CKTcH0>P]?%jm*/?ls/E%Cli"/0*4F-0Sm_A$:9+HTbnNI0a(-n"K/N;,HsDG:C=SEE)^U::HLe&@\cQak9$9fYV.T)0/']0L&.!jbrqQ-.5@Sg%!@'<$,O9oR=V3G%+T[$</lUa)oGkuAgp1(b(lB3e/%pVr01U6f";HD'mu&1eBmGPGK3teRn-an=+9Yi_"-RSD=;k5OqaSk*7p$:J%bS.\%$'LG^9:4j-9gFg!)X:BAI3;rp82mn\?@`"D0Z0*J>Eoh'7"<bIYD+YH+Fi5R6RmRn!?4#o%RXsheOl4]!d^09r(<116)-%t%)j=DMjZN#tk9)QC(`1i?LX`/r:/ZBdANpFa%^8d-)'XZjEA&<%CU=j-97T'#bUdS8mYQPcm8]hS#S>D5'-N@lKZKP8iWuK+b7Vll%k-SFurPP`#+_UgX/`.^@_HC)Q9Hdu4\AE#5<11qd[flPm)3bNt!P"F]I(JtnQEBF*YU#r9CfVRkE0lgS7!YrAB.,P'(=9LiCLZ#@%F3)J?F-QqAR2#99pkr2g6qnWgN[HI;0kh',p4W$t1(r)o*['Zn%+L/BoLWrlf10id#C\YR&VUBL)Tkh[ZGdDg<Pu\?HLs(W9`[s#%..=2Moqc2F--i.k=d<b<1iF_]%Z&dqXP^gJ*l*A?D6UcF*LA/*,b2n63m9A*pnlX.0gb2?*SnC0eeO)=b8s2b/#(\EV:p5J@K(R(%RsF4Sm+A#c)NCp2#O,Y@Uj0Z:lA\T-#XVW>!c6+H+&[hbOIOi9'"k1h!*E!_Y8)`s\naA/VF46P^o)'5*^YJ@Gst)Pp`,CrnJFa]%U5*82&]b8R`;:G@PsU)NHg'CcY2]UH?aO``b?*,%-C-+`63M2JdX9EE>at6a3Eh&>c1Pu5gc&[g9+Vdj!Y@6iB\sI.+Rl/MRt/if%aM0$L](pls`U8[E_/DMTg]mVF'$ZSDFb@k"4U6tD256J?DW"WJmFjh^i'sd<?'rd'/*6Y:X?_#D^,286Q?1f54BDksD?YXSb3^I5%LZV5JKO'W-+Ke[]eCgi@.T`&LkBVG/`[c$7_WTL&T_NOH`qH?9$2UqJ#aHnl81Djn4SMoB."'.$Ej_3R$dVpZc`8fC]!+c*pTCPe%o,,l&KXNM&^%.UHLj^?9DCN(p!/NoT*nq/-`?82TWq+e72cLRG:?m((#(\nFbuF4M,]tf%ks<r5)V/bu3FY(0lr,p]HH*#W?*BB=%gT!$9?L%N3_o)e,p+3.#0:FPa+"pp8o')C?D[MJY]EG60$@2&#lA+!0Z%647M:[C4D)"!UTl7b<Ntr/a$&.n1YM3l<aKM3gMWK\Z%Yb)+@`.2X.P+O#[*b\<6Jg=J7#RI[.>K@2k$V#+L]JHDH,"A#hPe:`3]GXE161W7'(9u,Zm$V+?%B9S:k,!MZ(L2XD!rhDjQ^/"/%XA\P=:3XKhnqq'D24)<fbQb!I$?P_]"Jq:m9[,NWCkFP1B*eq5=HqmmlRn:#V?"RL&.Na<!9=oW(CkIq2hOdu\9O#Xml0fUJh!$>%AG-!gn9Y;$FTg9N#:Ec)jV8RF+T>g/&G>/3%hOE0C?rF3''<-4nd,M,HjSrPc,=V72a42W&p`GKAJ&*n\trmIj?oI&IUtMDg,RCG%#9naIq_JdGn"moB]o>I=L"&]g5'PC7EtNSFIUZmf]r-9;hI5G@p-LV?V;k:=]il03*!hY6AucF/1!KEp-\cK'0>-5p.n_uQXUd$%%])ZWFE3%+(^H)Dt6&'Q%LEHfK"qO6gKupfV=%<2^_,@&ci_IeB8^a1rLSkJC>^QXcb<E+ZYtkOKP#MW?Fn?7FfK\`d5tusZnfN#H%BKX!.R%jnsH'#Dgd*_I"8V\S1,0m+uPFUUDjfghIbkf$PfGSXu3l:+hQE?30PJXEU^$kr5Odi_EU[EBcN'"rA>5$r")Td-VP>9_d%DVKtp9$0it'+QC]+aQdYZNYLZNN>hA.omXS%e%]3\M*)*8NE#s<q>gX1UoSkkA\'2a[*f*]m5IF!oJE&o_B5Bq3UW?.rbHOEs7tI%%VcTn9kLaDk;,t!._^_6QUL>L0TdE%VISQ19V/Z?Ja(Ejl7+\f7SATY:gro=4QL-n0+>Fo'^[HF\[T-b>)o$=pu)_Yh@"ia5S&=8%>_.Zk4D=ZQPKOVU*l.b\_EXs$@%+9N?6=[,]_u9e'cc,F\bthk%'!9L'mYa+'%:-^U1bUIdTsb;c(iZ*SrY73cbp]lH"nJ$*@1!P%bU>7(9$6cWH-g,^n.Z'hMdGrdIE3HpVaq,R50Cs$+H)LOb(nL=UcC@_GUTEAnTa&66/4tE7_#cM(Sh+sjE[XL:U1P+$Jq*k.Cl*F%WFju)5rt"F>YJRs%'Ul18Du0:<9<]P#Zq=0VHB.\A$Nm9H/g9@XB=YI@\[LW2=!cDO3$VO78Q!q&!%jkWDY='Y_"ttH^]TJ*<X7]%$iY6Und0pPo4<m*)U<[Do#a$N(MG)m[&SVYKEr@3o;CCTmoT3e/6"CBk[B]b8Mmen_\!""T0#qpaIhq<7dqDcm31$uC0&p3in8GP%q"-B>/R;*"pZ_2meu"j:+0]V'p.P:^YO"CA$@@3Lj4c$g.&DbPLt5i;lc]31cAR00%j%qb"XL8p/HKbubIm<jkkol6XH^4[^W=d1%H4d5$Z&poBLS3nUJl.FMcWCao:4)I`b-W'D3D)(oUJBJo*V9Kf!-jWs^JE&sF\4sc7gH7!0?IZMDCoINKRn_E04ob(oK[,:$0>b6%b*nJDi'"h6&2Qh&0nVJ-aB,HT@!AlHk*'G*D+Z98J"c-)%(3(m@DWB_PRNP*gg)=5(<KosK):B*?9K@W#5IcmD[ph9.G$X!I4/M*%BX**m-es2TK^c8:IN\&K>8G"6c<hJ1Sc]CAF!^-qncor[M;80uF]uYD\I)#Q\]Io@OTt)%m)rC2e]Je/^!&0meeL=.I)XP2\X?e:%l"$S?DgY.fTr%=G-8P]?kVs)W#1+nk@r@&Hn5^oZE`G;<Xkt_\*&'sdg$Ui@V@SpYNX(1W'5m675m7%0*=./gkWDXXm<E*d]W.8p%hSDMK]I7^b9ROF2*J\uj:aihR&5;g@'%VVYHE*hW&:G(3^'Cnq3jaFW0E626jH!)D=[;"P!,fRWa@ju1([/hn&C,]r2gD,7AJSr1%1mFndiS/U-Pn&qi*-+pM)5lmN5S*k+aefEVh:QsN`Sn83UQBj5N:$$])!r[n.p_ZlD<&D#;^?UYnL^.3BV13E^u>!!?TK8a&OJbm%&^[(NeiQO=,DlWeg#!+LWT)%E&.&=aDmI&GD5qF3s#0L+L2H9.=`(<e4VSXiIMfVN>fTI&+M9`H2?;suL%0!i64:SI1`t)SfUWW2%^m8h6moUg\g[*:HOQj-LG=sO"&`0>n36$a,Q)Rl$!+^l4$:M[F@s2)$m=<OAhA*us&ge/D!F_<>!goei`O>)%aMr1nh.J!sNV8tH%4#%HQTX#9)fQJB>)l-GG#+GF8&=a.q4B/61r1J;"e^P!(e9^U]KrXQ0#c4,bi\@2'#]5\r[*bpnE+^4"LNXZ-E*1"f>Cg2Kc8C<r%<k>P*BWQ+SVr=mtV@$sK`iB(NO6Js_),SL7k_F5#NQg(\$?YH*F;gQW[U^kp?39HTe/UPedJ?89H-nbl`lEW(GR,/^ArViPn*psn%p*?6l)"8RW!>GL#d4sQB*WfA<H`e=jhW#be,V>":!UoOi0ZIRH%![hgJ/rOVA&*FR"ADRn)BAq:iuqgqXKVU?n@D!&>ZnAkkWs)-%jdt+Sb0bj_Mr00a#9>slVtV9ToH6('UtB:>T)&C5*N,QM(G+=^O$!!ZMo4od3OS9a3JA1lND-h5+.&IH\haTW`;_UN?hd][3E\!"%j<>1tLqqedbMba0SZLFG"qn?V:<s]dIXBJ7N17.<c8a$o\h;SfEmD0.f56&LVbRb9%FY<b6'2t$pG>,C)\0lU#6-jbmI2^Ds6maQ%70c36!:p/?`$P3Kj((LhkMK%#EF(_6h\g&3IWag]`Fqf"3-d^I*'%c,#<?W:)e5C#-T["mNer?p%/e*7VudohrrZtA$Gdu(i_U9[%P\4GKoNPkBDi#0!/H!=?&R6)_&/^-L@%oA\bi.OuK$(=mA+14(5kG&=PDdE,0@WlP(+")_R#o\X4O8W:+pQ<`,-D25_@*<9>RWQD%(Z5O'9H[=[*(aV$&IDMcNT<MD6fL\J.,o9-PY4[U-ZMbo[5jJ-U*>oQN,g2#!C[;;(+!Gb4,28(k[5<1Nfj<+H3f$N*<#pbE6Tf.%^VGYGP/HN$8](ZP0eO@jhgtkTBq1-VhtTPK22+Zo+d>C07IWqo5WCkQ;*56gcXN8p#6^WbMb+h8Mgci?7*1Ms!^Wc\H'H+Z8OGoJ%":q2pN0-nE,/Vb7Jt6k`&;fW!P+9P6QmPDE4rPSh6sc4?TP!->'(q_*SZnJ(Z#kT85Qm$5''6\a)+D:pHmohg:rt+/Xah$N8Gs!3%8f1S/6`h\ELc_@o"s2e^.Jt.&NY+T+C!m/+,U,")i<3c_.%(&I4PQhl*`bBH+tTW`naa./:+P4b2#.pdjuDH=5u/h*KYsTdP(Wj=%N.^;mhZEY6Jb)`"!N?4"?3Kd9rWR)$)&Ns);j:gO,Z-$8d(_;]10#PCUIgP6PecX;Im_ND,Vk9&'';#.c&lJ*P2oN26urtf0bV8)%F96puJ)ep(^B"j;AE$+83)S.L*$d'@6o*UuP12rL7%dKB"Mta>^LaVt6!t<c+`a)"?$#f+5UGO-Ih`2%MFouU!4<^("HF4Z;@Tlr%Ne/tdH7]h>fU)r0gf"mMXM:<Xo,@NKkVJf!4H8Ooa8pDo8.&mVo5%*iUaclq?N;_]ro#"Udi\?lL_oAK<oBXB'Os*'k6+?^,3h.C%GYCkO3"\O.U:;,,JC'%2JtgCJU9c`2R`4VJdR)<r-4*Q`P#qGp2HM?i0^4pcMFcF,P"8uU">5J@?R`bs;LhIB[7j>Z@Up@TV'JV>%JXsSG8P`/LDG;-0#V'fT9:Wf:=HBIN,`)nc:/acM1b%QEho\MgLrI&2.]5kC6kKGI8-+mKC(X%s66Zr*;C,%p=c>_FK:Gt6_+*[O%*9h\JNN<6d$&b%C>#'19>g-VD8h&q6_b-oDMV8E=W)UQ,i4pJ6`B6eC/;R8f+OW\\k,G1$UMVt<7C3f*Lf/dH7Y4:8&7[P&_Zlr8%/DHL`0umrg7ab6>5,,0p7s$oW!I(Q_&Vg9eUq[U$E3]1=94`+G<5:u$>!Y&5'uU0ZUXb2rb\A#G^^6H=:='dJ0ho\ZR]6o2ZkXd:%Y3/WMki>F^#"oRP*X1[\']P8mK0n?YWhPak&>kZlLY@[(c/O;Q+c.@;Lp@0m<[-7N;G@;p762e&`2JAf7Z>KHTotMal3=;&D$!d;%!?cVLSDCi.3Kcb<#>P`i'Sl?,a2_4ZE_QlJK$#8X`(*D>3L6Mi6R==H*m721I9Na+C!p?RS>045+9N#\).##TjA8E'Uj3AaPa!]I%TTIl\b0']sV]D!kP@;S77+).?b_-gDC6ATJ8D6sHT4(+:kIdb;'D+.Wj,__GKh/:=F@i'XEWn0CVdXR=;hceq\rS(5qU7u7r_Un\%"4,"uNJN`073lod/9'YW!g,KX%J0s^HULbJ1o1'kAZ26%jYAbfY`pDBC+2qVYRh-(R/Ta8r_c]@-2LRdJs:Y`QJtJ-8;.^4>j+,.%AEsjD@\'/-K?>D:AOOmm#Em52UhF6O;NX/Y&gj=S(s>;cL^Ze&aeb*^i<k+Q/%cI!1go%1'i?5C-.H[3)SoI;T```-'C[apXuM['%8f]I$n9Q9&&V3;K/FfEq<O/-j.q?,AQ7\iJUhCbl`+5hjBTdIKC^u(U`^'8!0j.@]GXHP>88s[l?/QiHLl;J\"2)d4OC*#W,$b>0%=/*>O&\R2dZ,$L-?(*$E)1E$>!%B#V[2:o[3p.@5=2IA5Bha"Z,qrF8b0lm#(hC#s-gAca5X5[)-ib#k,t,hQr/6e;6=%E[A[DLU%M``jg<MfmWL[E'C/;/R._8AW.[[PdsLCe!WTK6\i(`rkXWuF5l/!A:V75;F5hbeY;7q-_r)oYMQ1IH=&OUAT^,C_/]FC.Wpm?_Pk%6,X6A*a6qO[qrlI7gg\WN0'Z#dZt9ZNoVDLk7Xim>[fR_/*5D`Li#]XRhr?2L,'MnP:.orJlOG`=X#9@034?[*#TO?)"J\I"*/KO%G*n7[P%V$[:#lIO_BQ)SjYHBM0kX'5,0H??Q8K8"WBjcrC(7PgY1V_>//0<1)j7Tt,SD?:nKa+aLl,Y4@$*C6Zj3a_GiZhs':TRo%D']?.R`j'W,9+H]S5+q\QA^D!KHMat^j6p0Hf<VmAP3_!8YLeK3GfKG+G::(He<lP=)<7TFs[NXW8)c$DOJ^j;7ZK(0Wmt<eOg06%,fjGbm%>>,2i-h&"G2[k+*='\%F#1BaMlC?)7fQX'ac(L^Dg;%8:No-ScNn'huL`kOG<r^WlZ-Y3C*.s*+2=,jJZGM+R@f/(4:dg%$?XsqcNPN$iM<8)E3g`bFM^I,Tne46W`2YM\0r.Z>#S-'S<.V%%h_StTK'aH2Fc)SLB7rtWJ$tOoH.tP3b8S9F!2=\"[jD`#B29;%;TFdBdXMO"D_(MV&BjPTZm-0FOAh(["*6s6UL$Ea4;n:6/?67jVDbVOKK^'%7["1Cb+i_&*AOJ4l[4!]XbSc9-@uC^+U=9&3Y/t\%gcb7Z2@F=H`d=98g1&VTpRIgK-J`Pm7sC.c'3:s<cZ$cJ5m9@p*Mi<#Ll>nS!o5X^Dnj@M,__^k1$J*2!tjW_1_=CC+,U-1MMDTq%=cB1t@81'p-eF;F@p577*`Z.f&m,7P65prte5l/DS@9jYi.gh;i">2rs%abioSc>0SuI#477NJ?J9qM66ak&)/>Md1l7<T:%VR]/%4WrpJcpj9Y:TbQI76q;[abq(`>Z=(H7Zk]TU7Cchb(EH/R("FUTS>rR$8=rHc.a0m5_]OlBmV2im26d9;BDq.)4$WIhKOdnDH84t%fTpJj=[n,n(_r@5EcFfj?C@1Z$j1)j%9(NHC2-q(C;>CRRt?U?.UPWd7N0M*'+&WqiAsj@4<bfAoCe!!@GsIL4]CtGMi9"I7QrUL%qW$O[$FBdUUSd2$isSqSS3Z2qRbGD0nY'nAg0(7[.X>WrT[\e5kpC,Z!il<c\$*VF)D2+5;'#Q>OC<I`4]CqFMi8u3e/8i!b17CG%!eqqTS7kM9=O9<>-mLqqBUKu>\Zhs,bEH^2"Q\I8?n-G$9l3NGI'W$G,Ehs>c3'4>jm@m-\;RTM1>ia*-)Af?,;KJNPO=j/[qB4i%P4E!8#UCo_Hm/juEm'W9#fm&?3uT^m=R$NaM5t?rE':EDQ/K2&)P3*^e^V#nY/(1h&`R"qnp$\601sFTQJmkRhYdPT+=68YOdu@o%dL[(0dRmo`a+_<TP.::,NW=*o&frIbne$G@UuXia+J[,DCJ(>BC*>'P<)%3[i)i'dGSC>R<rN<c82t6h1kpto;aZ+o0kmreKaQ4i%O(is;jR!a$9hZ<DGQJYO'-9s`,eT\MjoLd2LaHZ+$V(c,>Z`e^bEH]Cdok,9<:ZuVg6TMmct8JN+V?9,PcmoTK_+n*!o.ad!^%YI%jSoNsOId%]gG:-o^W:)OraN(/Z\NpskhI.?bR.-+_;U*^6-orNN!^YZ4r34XKdZE+\fBl>;).>M^oEq;,&e>P(5dZ-C(AsIA2qEY%G#3I3LlY"c-\Nb`,&f#a,.NUa_!S8&(fPLkGJNua`#);#!]_HH#sut$a@'Md-d$uX!*d7Z,36)/!,"GWU'D*IV^@1]3!`%TUl.Xj%S2ND^L`3+hV;uS(gf:1l,Smb?q@5EIjjA?$9cdt%n'pEKV4rW`3%Bn20jKspemTC*P=:)dn!"="*.]=di'L:KL-bZ*UE]9l7QHl[%6:d=Xp`\!C@O+Qrb;>RMMfS;h7A;>+f)gTE0g(%?0L4u&3=K$YnYcb7*omc<+@8g7+<NsKM'5("Y\;O]!ofhC8-E*&I4'Ss?pp4q%JHe>R(!GQ>s*oB6\"d/fA;<=aH&'%H5W:1as6!8^bI2rkhcPI_NQ.meN.=%HURnn!IX?.<'dR:%AlTq4b(^,i7ADBbiSGY8)%6]o%<WqHAP<E8+0fI,$KDaeAZ)"JjF/erI\0NbM,.VkZQF)+V(!c3&<%=!]ol"^G/:\WdhRtK(V8"%d_aq56KWT=plnS%dZ*/GpUMg0>%.j2\N^QB>sWA3Sp>HRoB6dJ1@F>2XTnMsfQG]$)c5gX#BQ^0`nQm!buZaEpq#ud"s5,G=udj3-ARpoe^iq#2TD!;6WEL7PfbaiNl%OH)]P"%g%aa)b`bCeY6K3%S8u&!0,c/qdeE*^m3sA&N#\&T\[b+f4@[iIRtFMqu@FVDqIHEtN*q44$;Bp__sDmCE)B#S8c86`3O[%>A5":ISQ:K^7S4nUUipf3`F2QbEm/qLVO973[a'!93_R(qWgR=;mfAAGi^;!r;*L])8YRjhR+-A;@S8@Q=R>5Z1j/r-)7[4pK<:M%&)[Bb\,Y^Is*?SY]ePVtXL@od8O)^`egQ/*94VM>"Y@9sJ@ZM#ap30nVq/Qol>?.\Ts_tn9FtE3^6L0!"MHq5e`IF56K>Q]?6?G^%o#8DhVQ7QWCL"Gb:&`ufh2CZ<!U<;t*^'rs4[(MiLM6l\oE`HN'QtpA9t+`DF$@`M34;b6`m1n$b^P+60;f=lRf.Sg\3PCYFhb\f%?L;VtN$hipdgsZcP2%-H[5:QnaU^+/nh[gb0D'M?jH4#Vj>%cDI'M-PKS`/nO.J!&hHFqA(_g:u6Z<SM7WjS*QQ?fC*7WRO[JY4)%S_4_dlgDPS>X&bmm]iVE6;?$VIPikHZlGK7Mas)l,8G.<Mf[T]GdOcEE/;cjq)p[=^0c6\+.+>7IcM)!%KuL5MdWp'ou\P#SPC]C%JWnkB0RNEmg&#WW\/s:#o#&+AgnX0?]>M;5mhm+JnW9V<Q6nl\dLA#*"XoeAQ0B!<R-&D+m'+sBUW4FC.D(3QL$6N"]+'>Or)o4=%<$&Z"^bS\hAjd^)*E78UB3NmXg/ZB*]sS'+*3.I>lPJ"7CsTg-XGW]g4tM?&+g`]8[)WSZCLXHk%nOr6Mdml#b?+/#cH?FNF"m"N%f_W)4dEAp,KBc*UALn@&/I-7i?f)o,MYoJNehdl2p+7D$YQKXDkLO=-B</;G:EhAB)\:bh*=8dM2#Fjj)]i36-EO2FWEko@V$nP&%#L-r9K=S5ZG+7SifIClg1!@r>$cmZ`j;df5h)9&eQTMb]8k"kV)re.ACC]YpLb,SOdrkt^i-#6()Q%m*lN`<-?F?XXZ;bnOk71P`%1;<O\8s@+:Tu;lQ\X<;)Bur_p1Vk=%Pbo6C*6hj7+Y$to=0tiOC@rAJE#=QjF>kV3Z$mY7*2+C>;N/fciCJR/!25H281miL(\^t=%HuZdWR,H$ddA\%pV,l%*.VS<HDW&LQPNH]of,TRG,=7;]HlS;`lf/if/L=?KW"kJ%*A[Ga#/%ZP]>cHj[V3qWVfa2?*/BFIq_"u5%7Vq=;bjn(I[NVG'JdhNAf"$LPm]i0q<3+Y2U1#Up"-AU0G7Zo,a1Q2q#,`2YJB,Zuf*WTZ'JG.o@c\.RXNdH2M\?3-&=M#A:!7Wr%4["9*Y/TmD't.Pb"=ITV?"?N'DqTfk0LWqdL':G<XE@dYeoT\`h%2](4cnF7Ba'-<2SP$<PF<)[W'XZAiJ6+C$.5N.a-Q^\<$\`W%:8H=7Ytgi7(JZp;*tZ_.^;=-Q$mKeS!26p)/d9BKEuIZU@2Umc2?ni9OKXdO@^bG0QMC"SX@5`(o[u&NUPt+E<7Y).I&j8D*KZ*T%5)p<)+V1;E=]S2dXnr!(Hde.D2U_3kQ@?t$qGpE0qtKYb<tD+Nf^65%fcX+pQ7(*2VSNf+g4;j5^/YiGibN)<En^6o>>r*ogtnVn%kHm2DR5:BCII>)K=NI61s0mAcdfCK?DrV1C2Yb@'*EfSY#^i<[^IJ#LC]CZb_='*(VJEXZPU,I;!2f`Mf5r5S+q[sIG5&,e)W2Z2%\?WYPUsMBH@g?3">tA.*TpSP!4c[KDB[VJp(933lY-T,(Nc+#:pXk^@H6JN2BZB%j`OG,O)+j,s35upne0R8%0V4tpE!'35RjOnA%CR>la\!_]h$e=g_qt?XMe\p^$m3ms!ARqB)@i,>VEbq-0M4ODc%IQR\_LZsgB2Y29[_[KQY#%7_IV!9S,3rMN4/O\-H/'GCl2)4^%o=WBQ")A8![M\$nd''8O8+hk-Yn^a<07jo1qQP?#B&1>eACG)`F4*s5a6n@"(l#E0+O#":IEaN)[7f+Jpj.=1k6;<X66cTq&c]"9%-6/@-/u#Th4`421D)F^j02JC.i/j:'%pElfHbUDFe>9VM`8GuH?Vuq@YW\[Bcf/`u4ELg59_;M:h)/qEV?*GkO?k#TJ!ER1Fh""n%W,bWA/kmI6])o2X+2D'R`?$fdflk?,UWYW3;YbCg"+R0cm`I53/"8*&M>fVmi:lAD9'Jbs'#knN9]i%gT^Xr#r7IZ&S!1\BJCnNf%N=o[&?XumI(gQ\P4,2r\$/<Wu:VVEgiAM"rH1hW)19(cVMsV256;k#+,7"A&p?#,Q%`@"7&u2g/LrC,VMM'hma,@KE.u;FGi"kKE%,a.:)5-<B?bU%5c[$4d/q>MG,44l]Y<h/*JmlX?s.=R-+0W5Arr,=eVjSu-l7V(m\`fZ:-mO(?-qr=?]QLC$00uf^ZPZ!u8aXd1;%l>3"H(h&M,A8UU33Fj\(-40n%?*dF$0?0^GMq1\%0Y`?oc8cr`S>,Q]3dNp4b>_S,k\GUl=Y@"/Oe2&GI&h96H^PJb+o"3'9,Cc%%-$-?N<E/^"@^,Z2Rc%Xo%"sSBAf%tMU&tQ'9[8:'Cuj?GeNp'-8f(XF[nc&Z3B-t[OJ&r`Xn=1YW80^g_%hh8>lhH2I`B#'_"oR0%I_nXe5>hM,4PFs(\H#36fOhMPiaPC`qUiNh0;'g3#<Qt2%O8N]l=PF7F)oFf+W#qVDSs7nQ"um\/e2p`i^-]N(7*DS=h31MMh<%\%)#I]iAt2As:`j_o_2mE]3lmVFK/gF:-j#Kgs)\b)Z^^9"S\daS9Z]RfL=8%]'i4iUAD:Q0K85&\n/k#]4<PUYSrR>6"sW9i]LIrc%_,%N<r!HV4A8S5IB)f]u$Y%&MF,#EVk4?(qn"d.R<oin_<kIOI^4OE"JM^LoHlo:;H*UGp61^QpFplEuer/b&Ll*pJ<acJ`&n5';%Jr#H2lc`@?!q>6nQ3'%\0\GDVMBO:W-?q(I&$[uQ/cqOTiPe/[]%NZr0GK@X3;P9OD!_dY5WK8Y0gU&4+[Y@Jk?CkU^2(#q/eZ3\%?Wl]+o&pK`)*P/7&p]_]nL..Y4GId^NaF3m7-@Oi=lU]--pRC@c82m/>(DYsRf@Q\`pAP7R=Mg7=k6"=J/rD,V/#j?c?NaeRQVbY%1d*rV[h&(<j<P.,jm"!kG\FH3Zi`PVCTV2j"(LG?OBKfs\3gna5lA0P@2a_4dg;6K%=8)9!5CIuN.n\'f&+[5)7:REV4>_2a+:6]%,aE.($lHVn=lX(n@RCt5p_!%f+Kr>8H"0gT<53P.U"#iU[2gZ2FA#e8n9IK1?d/),;>gkc^2P:GGikW<Q`9ZKrkp9#_?25hZ9ZVp%=fZ;cl&.iEZ'`M@2@U.rr2!MfCJ2R#P#,S:j.UKX8knk^e$N[@?:>+V!C)Ma",!!Wp6;HgLj<H<I&H%f[E%pjmCDPdmA7-("mljl%pj7F(>3Uun1!:u0/<aR\UNg[!S=r(3l=h#_S:!+3d4CUGgN3ht6,P&Cqq-?,9U6p/dDGh_PaTSIbrP(DkLk620uKjhrnk0.s4u:c%1OSnDqeuJrkMO%Lr8N,$2rFZ7O+7#tgL'pLs89capkQ>nq2^%&GCLCiD!c((`F!NYf0B9Wf!)+6fe9f3[t"=&2>e95!!qO:Z/)]X%DuJZ7s6>Yprpq5H4(d97]XXNoJ;PPa.5U1Lig-"H"R*[YK/jotG+?&PMFT3==oX'>J&dDhlNI\l*DRTt2cXP?c&"O'k/>+%EE[3S%*(h_Z,VLOJK?r"!.B]YBQUnQI[2!=EMVEq7`VEO>H*ZKR=*aN&@q51lV*5k'P:&SdS?f5U'6jG!S@D'.`I_Nc,7`s%G_p(<*f(I7%(1dfcHVPQL*G1_<6%&JLF1!a@ET16(F^Bl?e\F4=*^N?'oZ`F0()>Z8S@E_8*'H4#M$)SJ*(jIj@ralY`bpeLLBD;8`@,_kg%S.j%>CP=k\AW33`I'<dXt@oQd=K2lC[aJ,OeN3'a``2s8=LZ8&*6CpmVp79Z&go0cEJS?^.<7j5:p[XhP@Z@GZ*=6[7P?GBd=O5:)pRk%OO!/PE=L*kB#faDd.>V(LCJu6BlPrP`/.\84\4SN`?ueA\Ih&M^=>Ld'm0d+bqhSVK9_n6^(j['*2U>3OIhp6JHj"]2CXYH%'Gl.%_a%U#\kfb*L*sql%'1+^i]p]K0VJ4P-a(GU4;T@tC1>oX4D[dJmD.l&\Sc:[ghCl_DN,^CmLb*]]#\^n_et_Z,nAd^r:X7q^V8(;%:H):5&h2JuTO2)\D!]tdN2sAM2a`B!77nPcI1(+B8fSO>Aa&`i6on@SF.BamCsGUlXkl3!@)DQRMSkZGP9tYVg1ZX>N"pOJA&V#X%)CAJo[)#0hpLaGskNL]M>qV3,X8"mQ)`JuIj3SBK]1<T<gCrVur8hn>9@D[(@J9$iZX5]!Vqm3QNOf4?3E6!1%X&'Q1:$?;(cT_`%`f5$AICO:+eR=;?"QuaH*WphqgFlb*N4Z[8D?eko9!I*joE0(E'?j13UK1)s%.&0U"s5m^NdQ1N_1ZB,cF;P`NVL5*m+l1@%(-#l%a!&//i*/AB\;P0PgdXCjm^CiUEKNCsqtL$D\pbY;n<aO)q8adRG9@BIiTg*\'BIkH?C5B>I>QX`&'TK2YF+("]rKjQT@N*dJ$;#]%B.`T2\I?$,Ckg^cBJJT5UXdpK(YN!U%^a,K^TLW/f[bHi]DD&X6b_<-NV$l.qP;1iGbJ_6'KKnmk$UoYaGk34a/-joA5hPeoW:%K%%:t;\^3)s^(X$m\<rYZ0_f=`K$u9iBNZ;NN.;dL:-S5RC9&q4%qAW<F)>!GjaAk(&K-AoVM!QIpFWoP^/kKq*Sg<K'ahUE^WPH1J%OrQ'sg>oj:/@i@0W.uZ(Es7jF)0%&YcgM6-^IN(Efh@UO[97O+5a"-M(h"8n.LOIuae?4@,aWDtj;J@7_=L9f>gi7!94QH3D#39:%-Y=%MO<3.lIj3sPH(*O*B$JS6Eb*::KJ^6!31AW:FD,\9=XLL^FI6j5-AMrk3*IDm*,6^["F(/_R<MU%MSkWn:j[<ujbBj93=$-m%%^-p#/=S'.8.o$1LF@q0T;Z.HR;s7W<4UK?d,<Ip/E8j>ABi`MHHK[#fIg7N!Mmlkhle]!n<ZhZ7K^%?VB"KEe**1=Mh@(u'qKIg%8@FVW`sRXG@`h]1Bo(.kjYl+dEjsS2b(2j0_rPCO/L7NSDk8D5=\KtV;m%JIVJ>`Vs*L4aG?\nh2eX4gT=9rj!#^(P9Y&l,>"`uV%;[rn`U1.BsLFK\Ec]l&D2H,W9cuO,"\b5Bh]IYf!RXQos1*'At_I_PeUWV,Nl>`23'doO2LiS<X6]Ncr:6G;H[Y]%/68g.t*;I0R%+DY%r`Y3A0WCgXBnP/N)_X2j*;]G7#\_CjTjacul*E-i#`g#NS^9':lm_5[TXS^o0No&N*Qn/:NnaIYP[#s3';pI'9L!>kR8?^[7%rHKq<a^b0JN%N%V5V,k*M(r]75UL-WD2DH^A"=t@id36;-W?$]"C%7iTeA.',+r,fgB1$gn\.u5-%FCPi^8u`9S,caW,f<5/`9=2%+\%a_U\e)]"\7MuIInZBfH_8;?^GeV>WM.iQm-P3&.r*S9^5ij12\'kqYbHrRe_[j=0<Q^OgoG2pf:e=nN[TUfJmdS@@&lRcENg.%F'Q8qpdTF33=pa"nbhFk4G-:"-J.B!jf;i1o/eB0Ah4i)`%:nk&FO,5D\q^FEmFK(hfKI+4#_qNG,&$QNJ[XuEc`/@/1P]<)0()o%R!O)8j:OK&b`cB,BcLfTT&*qC82WV%a"TFfT+OmbPoo"j$.kDgdm6_^%'e3RagWuDSM^;/phl@BrX.>,\Cg66I?R#T)]O'N0b,O!%MP4(G!oT^Y9%eEL)0b(kU^F_RCf]Ob&.;ci90S0>MA$[@$/4&5I;Wu++eWBdX<*]8/gc\_fe@@\N4aS#]Nrtq@Dcne33/u#/be(2%#Z;g!!f25qqZm<XoB>V8,\BD+f!EXs#<Kmf&4,CE5DM&-4nRftZ;o77k$^gHCq`n.@aRWcgiV`Rf/JJqDKQ>,H`W\(\DOeDnJq-Q%@\`Vm66IC&^D(H%<n-Gj_G*!YN+G-MF,N$*UBq#(G;M#iW]8JKE8Xe;JEec$^uCrq^571Pr3\7&o+EqR:hJB(W.J/rTZOEQ\a*?<%9FS%/gBupJ<%\E<=#]+kWnRl)-@u,G4/9;a1%#*m.f(DP'bIJL5_F1Z4ORs^(?@d&CEj2XLdL$(*JF<g6P>FK+.hffVX3:ML+O.h%lf28\H_bY77fM[BoI^pRI'a6o7j6R"`]b8&K=F9C'/k7>O0d):J)LfC;S6kk>HrD@6!"F]1g+V*ZYu*Dki)0YSV]"19g_)cJ&@SP%$0Le[(3/='>1FE9I"+DIWOkMl,XASsl<<;P%S'[^frIG6V1Ub:O;uA0AuKDffNE0&YeUkl7&;`9(CHjG!OZU-7:&YK87U\.AL1Qk%"jm'<Z/"4E0[=`+9u<V3:>k4jN,aE(ambOX4buF!n27^FW4J)`=>*&'(OG51fWqeZ;b'T)_8<K](4fF^Q=<W*;W/h:Q_`F'\PNEo%Bji(6!IZ(!!$9'SSo8`_OfL-eGn&g(*3AU6:8hl1/`><OJ(I"JX+VVFK[c-:kZri==Po!k?6B>/hq_)RL\^P[TW'nq'iFFJg/b0L%%G04>5#7u2Y?nQ^U5CTXqK79/1e\ZKELhbT@eH)BW[a$`fdfa;^;uJ8)0YZV_n,+G1IFV]GM2(YHf:ZO?XG3ng3pWh%K9h4#Cm$Q%SR-5si\r4QGb7E.Y@bZVe3j7lWHu?`hZF/c@h0N=kC_(Y/6C1a?G'.72uM]Q<O?!P8C*At+PGQ38Y'TWb<M)YCA/!-TbBa)L@loh%RDTU95ktSEUmU4SkAg;?GZPS@k$[Wf>6;VB6#tXo;hK2$@IJ+c5'7DV)p>n89DA&naOJ5fGA$R'+]5nLo6Z@]$+p/qPF:^YosH:b%c[DWWCa9K'2uDoMHX-N]E8^oLJk'X3LA\,j(?&b^`Qp@Xb&KV-Np;m)B&I/@&^nBJ#d`$q#p4[YMj)L(h>E*<]IUC^=2C)f)iIr6%gjg'_reQbacq[cc[DOj4L^X;u%1^pB`!dO=a@d<n_XHeo/bPD$=QNnDC>XL*`V[T@*X23WU33u(ECMM_?=/4!(*eNI/?nn:Z(7F!%Rh`*](^4L=1*mZIBsC?:]W1XHU_",uDHm!-?G,s9FLuS9>(Hc2k'[j*Q[.`jC\[mgm9ZIk+<[P)YtCH%mf>c&,-Z/B&ljHS>rYsP%E+f6FZ<>7"akh[`MF>BhNTQ8ADR9QIT&95B)Ic$1(PeLiPOZ2fFd=Rs7!d6]*]"E?4VEq1aqkFd:Z20/!NOfj)o6#'dfAg-c7l^k%J3+QkjN]kNJttIIGTq+/#GnEU<ls!g6qU@>K3UdU^SgjdYh^the7lOqa.hhoo0qs]R:6Q"0K1e==%iLEiKHBO=B`bm(AI8AQ3:FR%427?BJl/u#8PMd<C[cn'I.k.'(`\[W1;N!KY3X*#2s_P$drbp,?naX'&J>Q,U?JG+(M\d-3@Yb;._*!M!L&uTP,t,^aMgUblYY+[%<PDB[/s=LYrLR',BM(%/IN/31:ZV2f#k0Sf3]A4#9h%$.K&>guQ!,\G#9tK]_^FY)8))93l*sPCL'ojU?O/qU"Z_A1CdUo:7)?J@%n&rQ(4f6%-1h_%oW.,Z$eEqL2SHkE:*)[N';Y86E&Q-Lch`V1Yb0[cmntVjQ&"IZ'*HeCL?r#Z)d`=f'd@=p,WTt*l$<)Ce>_MTk%W]dJiAJ[<Os)dqQ:96W_7=A?8AX]Y@6c.7kmL-4_":Oj-"?DLB;;l(8KC?kXGX]IDJ1:#/@gqF/Nn-KG;LRq?2VS_rOG^L_GG3@N%!'A2KJ@o[s>mQ+7k1^$[pL%fh+a+:D9]h>441+7N;548"U/1Y+#"FGM$u@.Ah@-jlXM.]C-'-rQYX:#UV=+!2_'WFZ%S8PbAK1@-%86Ir'g,1q_1(e7H_QmPD\O#($0P0t?8aaZGYO,n*g#MCc[cu=lJI=NM/YQdObjk]#`q]7,G!"h/fh07u$1TAa![A4s(j/a9H-4E,%&HRPAH!F-G^OfT5dQe-HJ'ps7-%!2[#TI=j<Q:s1#PRSi3];/Rr<g0_rnY&5s6U>HR7iPHq(XK^9&KUZQQ3IPVfaKa/U_uWaF:+A%Iu8I=YfW$fa.4&egmmHeK*-q@%en.T:D[@h$DDYN:3,-DEY+elR0%Q9GE7HMbS*fLLU0+*Sp1_hJl?o/g&B:-)=J>)`_7bb#d"PU%>=.Y+./0E1e'rqF$4"CA?UGP=%u(G8G3cc\Je\DG!3X;@C6A@QNVMt%/5M]#>?F[V(p9-u,A12T):VIY)\+'A=+rlp[2Q'?ia+Id%BsW:aN[2ND>OQs+>T^HH#H<bK5`9LQo>31X])7UA37NEZ<X2SfOGj8XOCmt()?5pt:EdfE[[dm_.oL-S45;B]O'tmWKU0p(6l#.U%/;q%N]PEtBo!USMf&]:1AF6DmnJl3qbujrMS(gTK&]u+f*+[=A;mm;6"Ur"@NSM:gP8.+([Td:#Q==WaqN=9>TY!-,]&Mq#*N9cG%L5+[E<(/h>/*gZq09'\;r5ILhKCB8j`]jaK5rDmXL''uU\c/N24;fIg%%m3tr'lg,F.<#f3K$L=Eq_61.Tr'I--]3u]Fg\+QH`\!%kB*iik(F&*U4<ApI=;ZIcn#ZWb<o9gZC(q<B6.Qk1Ad85O1bq(-r#P&Z5:,GFr""8B;OQZ3*ZW6=!L<@o471</Fp-OIU&p^<@mU.%5lM)921)U?B&QE4WOXn0WbXsD==F"^WCTt@cC9a:.MkmsF_O*5_senCQ4>DR?;r@g:cu#EQaJOO93=]E,Raed+UKEp'<HRj(hIr#%XE+GR*TYacR9B?Be=r+A(W.VP:3:sS!:0G8l:'du0[*LHHFambeu>nCOR-#joE^I=UKlkKs$XUXL/nloH#$Qeka&nqHKD.MLKVB2%1kf-djTi6N:G.n/+uo@q&:Qcj,Um:D^:[%7cP:U5cXHio67jA2@LP_l`'eTr)=<a;Oc+X:p(SN.mP*9kpir`W-5,@;YK7OOmNKd"%s*t7go)KE6JXHMURk\Z",/*5hDJ+9>crlJ"HLTR+()GaZVtEKQ"O\kmGW8#Ah7#]V3]u8Pj$rS)nNs]`$&&t<HX^,aT_jFW]n6?a%3slJV=M;F/ljbJgR1d8h:e=OEE1d%0UMU_"7u[K,OR:7a\4u,bXa[P1`M6.bD*/DB7`.M)`pnCrgkT>[n"7P^#VYu!.)^-%06\ok%P5^YgZR)NNBCYu?UE;H\)$V!+D)ElsM8+BgW(PmX_f3$Q["EKih,5.&Q04fR8!T(Tqbos5^(ne/FL@k:`R.uoaQ]n?BVrp"D%&t1%@ci""nb=5G@#IEn0pF&!.^g4*1,[maL#4C#&d'hC;[6ga#\.P/Z#5dnWhrj6@)Kbd.4VIQ\nu^QlsZSjYn<PbA<>\LE8B7&F_3d-%!rFtD_Kpsq(:(SES+M99R\:^+eBJ22&pc"@%8'%:dCF(B*2bb$XH!IJ7knY(>i\e7s!O3BW?S/W2kp!`4]%BJ0+X4SE"djJ$>)/2%42Wf-K(sVM(a$[ERl$1EX1B["b-C\D>[Lion>.J'?^\DGJ;SV\]H6KK(nK/)C'QJYJ2_KRQ\=SHSWY[^ACWqdL]uo^c[ehU+3uMH%UT/4/iXIRoCPt)^M*Wb5cpMSX"*94Tor:s?7)c&^U-U?<7c+QP$ZKulM@jM55M5VHp;^ek!5QR?](?.$R5?"*/MZ><+[o:I/7N%,%[7oUIlH"b>N;;kY1`1$(j4&HMHXEY=m!*e\FgK*-hAsVZVH%I2\gkG0m^#.C^4:iKSLAs.JH:r&)XW%"/rW3=e.VY7F;\@WmP(.E%E/1A^80:O%W$p@c?L'UVn[]KI6l$%P\-^G8cmULJ^KY!EqB5+7M]lYuG@ol,>VpGn"LfF1'o-=brkPQOo2$6V<G4JZKo;3FcQ83F%KJ3Q65K>fL#C3Q^bDqDqHhZ/(LI2mqO+d!aGWiN/LTDQ"'?pPa)J![HY#2*GFT<D%lPn-1iN\$G:3ED74Ktj($29:'%P\BJRU0M8%f'<]hE/3,"$g)HuM$Pb&h8slG.97[TQnY",W=0+*A0gSNlHFgK>*)(hmrSt=K)6/6n&eb?H9>NR8=8\i[t:lH]CgCtTu>kckkmS)%<:QJY#sb\5j@pc+TchJEpI4H7nCYR7][D1)=hS)?cN%DU@12`C1l;]6ThcOBO^R=mLr/9GUqfLE15^l7<h_,]^gec%d![,QJjb_&%^'K';#*XlpO`;a\a_8U3qpaO?E0Glb]"7cal<[gkkMAVW2j;kD,KqrWp*F#Nhae)=&<`3,nA#U'S5#a`(kVDmUP*U_"kGkEE$+]Q%i#o)^nIT.@]TU\C<+*ZdbFaC0/5!AE:GF1)6-o\mG=e)>f>.Bg%H+4Zr:JaB+]1B=,'7f*iFQWr23KdMGYu#?kgRJHB,<kC+b(!4%hfc9)n:X/RO]L*&74\qq->AeIb%p*R4lbbMoeNCC7F,,#](e7I[c@?"3B+2Eaq'YV-SKH80lh.KYW72E?i;A!F'0\5r6#$9/,Pqu%&h.PdaH:`Z*[==n+\:_=nr-!3,Ru$]9Yi;lco:UR<o.dn\js&2FpF/m_QY;k[o.'7nMqF"EcL_k8:u-q^+5dK?9o^K-+i*q@,Nbl%8e4Z)/jFo9R5g(c.hq+Le1975#CCr0N*M/jPU(b7N*O":p7t&LNuc16.]?3b>=Fc9M>g6=))^b(qtJ<q['AF?fQT'pB3tnLFgM+h%4c:/52#Y)TiHfnq&`/MZ%!c18N`F7grU)C]9EUt3%\97`?=JI59dcJU9(,HeBDrI'g@Q)Pg>s&*n5Rulnf_VLRaZ5MLGV[C53fF/%2/2MgQXbW6kVIKnUI!lm*?;_rZSpG*MqI4W3Q%pl4l=bcQ.BAMoUQ'.Y@6ep&qpPa#DSjBl0*>^'V;b$"9B69i^Mp*agcl:[:39I%M$<?DiFkumjHq0e,hkY<08c%YVBtPEq0DO;?VK[+]EE'i'YVf`A"5#IIB`*`j$l1NTh7^!]c\hU_/Tp<-D*\PSEDM&A;WFDX\#o<%3uF+\OiV\X>Sl,d>Xpc1gWp^^3s\K@"P^1;W$X`jP'Ng[IGG*6F;K)0@U(/=#o4s?>%tRr"_J:(\oI00aFuu@FW%AM\rmC?E^0#%%`M++a8W#.jpYbnF;:WouP8.6^_R=##?+dS`F7,h^5#18G?^M8up/or`gZnqhPQ<pm(,k@gdeS)q,?Tu!hd+lRq97uf/Fj&qk&+Vj%`9[>+UL7='?Is-MBrAK,3XnM2n%+7S)KkkH699pdr.FBZSV@Hd=kI[pd(FB,4%J)[e_J"GW<Vs<QRoj'6iXZMSRLGhh["K]ICaQ\%FD\_TY3ToUe_Gk,Ve%OJ:QtPL@R@82k]H6qCq*F=l"=SFDl-f]05\4119Ign[.DkpB5(^`0C=[&ftZ0Gg)&F847gm`r)h[/D6sr3%dKX\"50(9MchFuXN<Ep_';njZ9CLSH)X2JtD+J^5bq8=@m%o+BpN["u9D]o[C#e@f3V?%7=nX#rV9L:X1>UB-cCWV\V]#F@k%tU&%kkpNf4/*(gs)U#8:Qu3m%.7(_+[\`7/lHd<!PeaJYoBs4Q=bcQV8F%aor->%p3KckCJt&2W?"jg=r%=PQr(41=jQ'b95E_!.P)co%(U;ToeoO0.4u.C?l`h]_2*7)hU]<.:q0)Z[qD^WMcl-Q$/GLEXK?.aqj:=IF7lVLnPOTXbWS4(S]K#Jlb=ti&LA5WDo5+I<9r1UU%2C]_WYM$O?jLE_\e'`J"ok7=ZAiV.HQ'TZlib.ZOBca`];n'8^A8u7rF3'aqFtfLF[r#p+MB[O3r$YhhSsl^b@h@h!*El"C#c0m$%MQZ*^F0&BpI&!_-8q8TW.>%1iMghg$PsGs2:J7WcJK5%&M3@W)2M1)r,A+D^1LE2)]Nn;6%P@Su]aQ7'fMdoQ$+@VQMT?;E\=[r;%+L^J7RM@i[P+GCN;5SQs.AVo%%6(VQjCF^+8kOI-0QH_mI%F$\B+jO=mJ=KIEJltcm+l)sZ+[b^0D;/`@H/!3?V,cr3!0`3pgIJ(%gZI`u;uRS6L-7o5bagUbOUJ-7"ZHtc:2CgEEFDSq!sk*:&qVHp3n.t2V10WMJ>AqI4*X'm-RA%D8uQV\;Q]<`6+"/QOf)OP?#fug%!r>nYlQssh7;?*Po;P<<k_ihUdX\l!h%!eInYU'mOA>Y-Q\*L_lOqG#"/oEtF)d2T=IOOJUIbs3-%N+cJi9^_;0BR/f-!9hQBOFe%I]mgsDCadm_?%gs@eE":`ZcF5=B#'R<8g`n$'dN\l_"@OriI8Hk/_eU=U'<G861;B&'re;bSU`hD^(+o?-O3VQs078`Xlu4[)m29%bWuR#AP:h]<Q4s5S.*Tq-O^$-$_/Jq/mfmI!$h]_>Luthq;^)8LnqFl>!hh4^h.u<*ck[ln]2?ABL9s<d?+)UQ4_RqONTg4g-p#/%[f0a^%"!3NQE#0'm)Ar[oN1s1rAB%#J$$]Z)s]/%$i`fpbH/@O`/mq?iYm5M"NO-3&-2,.)g_8*)X`pN'2+4tF.5US*(WP]$/-,9%rGTWu4"dFj]mD<1"H$10ZKHlq)1HMa%^=0fK1NpJke7dJ;g@sT![b2P3A[#mLMf!0ofTIo&dS.M!?d2>a5J4#>2%mD4+hh^s!n?Z%=\8Jqp#Ho+LhK^bmkO'.NuYd0TQn7<e2(o'^'tHD>Qi1R:.cWc11":)g9Dqfb0i.-VoUaY'>AOMddu]fla3-(4dtS_I.f4`fYICe%L[mseE2`/Z!qNQ^&5N%\bn*i_r\%Bogf7LV"g3TrqEk`sCE^#J]u+f_F4=s!1!RS";&3e5\aU&qCdaS>Zo0nIPbIqUjIQE]`b8E<%=gBo@,).&1fYP0!$>E[eqD#mfC:A2p6KAIZ9-")u/CCs>Z]fW"qeZKe$o_`sL89SpRS)\U^,_.-8D2/!<`Qe;QAnY@'jc`L8:e%S%R;8(0N@0YM`LK&B;rp2V$7\%4-(V:j9'YLN/22rj+tW8p&Q<?X6[i3U/Wl/^2(`W]#Wut\84*Va#*J'[?6=d1EnQ&@$)LN0U6"@1%h6fRce>0'd4.;;/Cbg49]8%B_`BSVHbfHbM.F%>T,:IoI0b+A*mfLmg+cD$g4dS*#MO#j"c>k@+&9A-"9%NN#R(rE@DAm!b<o1'd%Hh\9oMfA`f)B5]4h)=2X-2.t'bP^GX>26#?`*rI7F9W]bGlZ@sn6kAWI&b>AkR`!tM?62iDr@G#ZJ>hn&<",QPZqZ`agX@;*<(8H%fB4UYb:9pt.M_3#9!,kN1&A*+#mR45a^E'j,XYA)?dLkh`B6l2g_H-IJD:-NU`<hI#9DB<cTMD\NHZ[oOi@j.,.;_.RoWBPGH8`^%^*Sp"c:`p8LMC^^RpfGGW?F+CdO83[668)tnIPpWU$iZ@j,8+f1Kp"#Yfuue3gj6bd-Y:jj"cO-^+9C8R":Lfn46R$J8P&plgW3C%4B\:#EaQW,'-)so0;-TF@-JS@]<hYdATLHb=f86@:FmI&46\M2T)BRcO^n&_L5T4#Zmfc8)\9/`Bo:J4Tgi)K<+%2^SBsTsC/+3%%am:85)e?M^:#3_`Vh*oj,rBad^FA)EX,IEhjl8Z/#)\ED`WmY2]V`^\[jg*5>N+U:4dY.?UbbRf08=6Lc'Jgq._9=K4j\oXC0\O.%[t7M/Sm_<>dh"d$/ED'F\G8]s?=1e"h%Z<0@=16I/i&YRJN*cd+,<%MUi_jF:hUfaahb]s!9#j1,G?4bg?CdN-b&4M>[Eoo1"7nA%?*uY_h@0PM*qkaMY^HVf8S4V&0:BqBp]@I=,71*;VRg:P0jLl15O7?;]KVD&%qt/K5IUQ[L[Modm@7&-*5`hY^Fcd$#8VBD_s*^'%\%i8Y3m1tbUgZmtK(9cZ=Oqm&00YX=YB=\;._0kU=2=oF0fV;GFMDEUXn9WO'jsiFEL/]d^g\3I3c?tM#d^Z*We4;V8IoD;9O.YJ%;a>B(r?BgFddsd[SppaRAG`dM(e[>i#Dd-Y37#ODj(UTD,7B/__]!e!^f9P1aM_IQfs1TB.b,'.rJeHL<P3+a[47'inP(5d+q89@%@[GFa+Ol4=U@Llb,W7I*8#kjWgC!Zm,L*HK*e.?JOUFUYpmYE",SMW>;B1sV;:tXdqK3RVJ$`*]'no^sKOuL[UGa'?NnhJ&B=UtR%V""(:l[Ss5[tp,gHi(jm(uG6^r^b:*halqLP%*3O+37Y@m/>]=[W^SYHn0FCP(A+Y)9.J;Bm/i-fXo$dW\1r3i]MO\?b4^@jsYD@%a;B>Wh3/3pW6k7riIdC\"-oo2-^D$Q5hs27#H!u<;#1]JP<a5F"_.@O`f%L^Ko!%WXq`jk[ES^!-)DDL\r9;.)4$]fNL*Ska1Mf$%/i1(-8C9or=L86[>N*TTVXKL8%!7:RgN[O%TMpAoNWWSN;];R,!X=^1[@&oj6bS-l>5Ep&W%]WqbbQl6qZWFo3]*(Q:g[pO!YhP)%W8CnI$oK/()ptSRI`'nI=UM-OO,U1gbBA?0'l%aiWY"F=&k#jV]Ja7pO'#@T6ZOm:aGF@BN$G3J9.W];"R7p5n8kK8V\O"=n3sp.%l2Ysj+>8E=Xgmg%YD/_`'<8<MSVK8-gOm-eb[E\>;;V(cV@R#6LWNAq9PQ@leU,A<m[AT=EthFpd?_aaB!ciY$Q@YO!G)$U"A-(e%PcPePOV^mYWJ%hjKodmVW4U0&:es/`/\#E-Ftd#SW+:l3-R<jYpq_kjMCJ%IW0^\cVbt(L7/*!F/Kg!G[?1-M4B2P!*f<LL:0F,;%e[?/_j/"O-Su<U^=O*-]4L<Npe!li/H#4T1j*`-Wj5gr1p^gkbAri0BU@\O4Io)J+,lM&Y]Bpqj$3o_Geo53P#&?tP@6HPuKg*D9%(VdC6]RF)<237JpW*:84j0t*S>H;OlX/0k9)TYTRIR*Vsa`:2F!3m_rGn)(Y:!$@N[JJg_>)N.&3q\;odX>LSiCRR^1(!E`-"H>D%8b-/4_]EU9UW.UR;+.1e!RZaBK=c>L`pD#:=o&"eBAu@!8T=#4=mlTl5G`NX]F36pC@k;6A_hiqfT:DM3t5LahW%$iI#-)h$K8S/%j`%]g<S)GVEFLN.A4cF1F1=Jm-<Li,s8AE>I)&7)Ek,IO)'+Ym=L1+_$L_n&/D_+0V`Ioq/]q7>?IIaC)Nf?kY[J?_UT-.Re3J,@%"&(32/fVWJCXfksDl][AVgB)/H!t#I@iXHTE316b3-3q8("L*Ir*GM3^PuVBg9<9,qES0<#*1dg#,17t,r\Z>%XWXac(2j?B?gI/%Uqj@5#=)%>Ik3lckP8p_U'IM'Rl6@*a6r(@6dei"BRMA,F0`%=$`e@$e<HUVb?1fBitC]&Wj\fKKrnbNTW=>JH<2,1?D$7Jn!!=>%8nZ96Orl.o`N`nk=/Vh]Ho-7#SW<1MO2F^1NOJS?Xg/-<$>l%s[H<URdljR"";6_5ct2@J73+NQGkQus%;_OmS@W;<[5eEiiqG@s%[l$dhhrDGk/s5nC(%6%:2KnE9Q[gM-&)#!u_SSimJ5B'O`9/g$h0O4o%8(>iS=E@KaO]SsP>9.]$6sbmdt(n9SOuD#Dd75@<I/S-%Cq!%*Zrim1-5(@j#VHre:@57ZGNO-1%.=7'VG.##1=+^ALlJ?gm,H.jO&ke,3<d)g7ocPYCk[4i@s):?)Hua3d;bFiLUqID*VY'R%Ru^$Ga:blH1cbnhZiHU'C+,F&WAod8+me8hg&685o8RSBM@31*n@B?9$ZjI]DXBDbQg@muAC:UaV7ZR"]IrZSR9+d:D#VTS-CEgV%5CX3[fK+D\U5R!n1AAjj7ip+bi(^_qq2Q&9080<A8I,>s_,9>"fui(P>FBh3b1n4>k!6p;%qUdUF)bd';s($A:NE(+k+JjI>^M_2%@$YkUC)S)F(tq?FU[n0tFg^cGPrU7=!B.S0]h`C4QfB:QX<?1./gHGX^-=>PR.Ua.3e_>8Dn+Qtg%:[:)i=\e&Nld=*Plf3UL3d=%;sk\h[kXa:<:a*7I3=-f%ppQ1?`18o<%?qiH<HCGl$jiIq=j+;_c'T7"Gi2Ti=8/mS'Y-nrucOr%+LDeX).]TPd+c\lk"HBMqR=;%GRP7(+%M"bKLC^=MC8%4DhNb;lX)<r8LW_ZaHf;U$S1Uu83](u0Y*m%$<di7d$b^#!P.$@h_5Yq+1DgkMXkA,X#&^.q"u6_0g,_^%$P,Z53B&?>65K\r%0Obsbi`i.W.>&2,KaOb<lon`,qB.DOS&]8K6*!".mpUu$4hgOaWJj"oQl9q,mdQ$#[fds@3cAKBi,=M"*i:L%=Q,@#(-JM=5h7orPC:dXZ@XU,&].Vd'^Uh;?1>m1h^GKWJjXM1A<$?HnCYa^=6K["Mn"e]lfBOtF?a@H7o*=WM$8Pb!c#X.I57lQ%&,k<o=g86S@@`d>`6"`\docAa=mn]"Sil;9eL&P=@YISg!b[r1XG`cW0#LH3U@e*.=tic%jp%LA8a_tp7LiM$^EKH[VM/e#X04&D%T,91.Tt4ZH/<?`q4nKIfPW%Mib-sFQH.,&kHqGTi"O+%C-UqIn"(<Gk#i/>_dCX./jk5M(jafg2MB_IH:8ifg6(!<^_6h>K;'/hi%V,Fqm(L\hNmIBf+:k_E70J0gY]-s3n8YQYGYq\]_ZDoj_:^<.@].3W<;RZZurQMtb3^'@QQb5phMPa]KoD5P8>ja34H*R$-l!/O+%e^_^ZLbRc_-,L!&YAY50_ja"ZVCoR3<OVrD&8WX$L90Q7/=QC\VcDG"Te+SIRR?")(-BrQeSb87:Cg+npalmFj4M]<h8C[^`_N<+%0i]JeLU=B14iU\!5QZ-F+OdLE=[lZ1Lji*UMnW1A6_Q32hZ-OA/[#W7'eFXZ`]t-u]aG7[Pi@g?ks??*F2_B![oM:jL5TXTdRK<b%DW%N]iL0rsMY$_"=rB)[W9=dkT<HQRZiep@`fuVS`6u`tOYZY?h3C4*-mOZp;YpVS'M=FtNQ*k"G(KRD3/RR_K3].imOUqqs'fGP%WE/$g.\X0U'S>V/3^Y,7P[D3WlHH*C*Qa.!n7#78]Q=Hn.B5rQpXLrjDOJ0@KN4p8V/%MdjMcT0R]CA7'0OmiGrZW.)_`;RT>P.D%ZYlHEAppWL<B$0l`tTVo:-!tb9@X3`L/D^t@.-He#Y1"JiYF]8iE%,L>sIZ<9=+(UQ#>)A&>nQWmE"fc<7p%N?'1\9mEag@>WJ&s%1?j%,1NTf_1TXg-r<OY#0gbM'h9!0NAjEJ.Wo\)_<7LY;%CVV:61:e`fUWolpSPu]=A&'KFr^ZkdO\*jK,Bn2r2b&qglOhu9nh-V%#:8Dj>6L(e`4pr_<H24hY*H"YTH5=1QK<7249OLo%Y]g*0,tn>-_<q??)>+CQ5Oe^in9aH=gqVCD@'l&Q*9sn5sTu2D[[f_g=!'o%mg72>@J/!"i464mos@>ki57>[9"I+FSpWZ?>1a@9#:O\EAh4!P.]e\KcB32c>IM]8a-`@/WrCpFp7U?SK2oiUf<F:qF3SFGcf"OA%MJu&ufOU)8?L=Mb#BUmW#T*Jqa*=0C*@DnCpng3C)o6TBb\o!^,_a]h?m1!C*]OfmC)&gu1s9XL7`0mm-Q1b.X84(lY:nu"=73S/%MTG]mMC!#VKHI!lJm3eJ`o$ESbD(?RJ#0J9^fq?-g`^YH[n1bk%3/DJK?tcAnc'GX/mpf_leAd/V#t"rkRo*N=KT"6+lQCuTaTQP%'bM1E!tm$9cJ1d<@4"<XjRk*V:^BhoD2#8C+R1L6:B_Cad\C&4Gj\sqUr/f;;:c+m_NhR.*QB.N>B>o!*%n!QHJ`RmUnob.ZH$eu%XFGXQifM26V=@n8.gCre^Ea,U>OqT7M&32biVQI1q7F\!meHui-1sA\0"cKZ`W-(i"jkSp)"_Zu.RD-.Cf<M*N'N*+#]I.uRNfm-%pG?auoYGc4]SQYMq')c!_uPG-XH5W#F8bGN68o!Y+k5!pK'/Ta$/S]e2K3L`\.Y0)H4_mLlO3K50e8]N5,:ro>#F-FJkqZbh&!>7%H$qEa^X;]0asQn&,c/e\OrE4,C97/TY]l-cq*]b;3$Jo;AJhY/$@<#o#JfNE/0`!g3S+@>jRjR"E<(Yln*l7ZLinLk#a,d.\-F-#%MR/&KpT?=r'<S#$Ne<u87Y\[[i8;M]BQt3V[pNYm4)6mU\C`=50Q`iMKDt57YKJ+,\]5,*s/$eK.4n2TV4lZack56;rX=pk8S/4`%+qUS2FH7fa7:U.i('3lk3S=5,=oD&r4j)AA'k'_nXSpEf*i!LCl10W]bF@%9ZH(+LUo`2"2hsgWb;>k/]V(asn`H\E$`Ak>!ab4Z%eV$[,Z"sXjKT<$YkU6_8\p=piVIbTQh^[<<?6i\uljT&%#r,A4cq@DnLFB;3P.8jE\UYDRQ+S#9<;%(\1:^I4NQ>LrA7^tI_6@:0%C;X9/BWrK@!PfNX\&IZk3Vi(7"F_tRcjDp)js!!A=4Lp0m%L#,i);G?2\JtNdd'd$au.r+].&1sG%e3YnLp]s;YdHm*0Pg""\fLU%_B2AQb`-1il_Zl?F&?!^Be$5hEF4dF=[=qMT$2&I]-RR<5/EZ(?#9ho9_Cr>Y\V376m/=f;NZ(I4l9O]L54bnR@Z5.!*]YVO!OjQ%@1NOHi>-W^mo][U<UB4%,e7RRB3C#VKBt5oBC*&f8=,\:JQ.=k2-L8jDbQA44&,Mr*.W7g;/X_`hgk*iF&5p9s#W/=<FsJcJ'I9W%4F1nt]>sKnq#Oe;]mWF!if%%R]<F3L@TkaD#*Nsp"[$eQ_P9k7k-g:J/jMgB8L1YYIdngY&uI`*dD1I@RN"kD\"\^ebpeD^*>.h/%_]o#QFBW9Oi#7ttPfrZD%,0sVMkT>WOEKL.)"T.ILD[,6KAa;9Xk'mPg-5:Y\3B>3=RAn>,t'<7MLio+&cB>)o4,?C!eJX>Xm5;!%mX9DWkU'4j=0I.S*\l<HCZ07O+t"6lJ5J.']N"k&8Itbh)@it<a</Y8XK[L4%FbCBfiVd>&"2p>pSg+Pkojm_.#):Z'N'7W&E''$%2],-h6_!G>Hda2Y;H[W+V?bZP+o%tF1Y2]r[/Lu5RnX$,)_>#88]XM]ME;nJ>)Aa/_9=$a[QI>HUmD!FX:Mc9)O:0df>V9<0b]<q%Y0A3(jCH$ETP+Y%a,XW[65I[8De4ZT$-M\``r)0rL?>i"XD=1<W7M;k7#!c4RtF9g-Nn;BP:6/a#Cga7h/Eq^#A!,ETT2YK[&4$P%._qfELMojI9H;!sbJkT1F.RIZ'BUotH[P[2=uQ*R`"\pPZEj;oD&XELp:":?)NF,X%8)M:OPJ?91).)QS6g(!nM0NscMI6"[/B>7%)"RN4iVljr!Fc_$(`e\^pmi6XmLI7pBc>)<i%W"(@*SDtD>&5IESe0=C9Lu+"DRU(?i^)?rCo4>-\lM*bG\r@4#l-Yotalb8fb'u%-[fNhhuJ2:_s?5%J'sC#!'V$`PN1AMAfi_UZF)h\c9<=2&9lq:l\Wa(8LY:^,Rc-I9F&qXlmPuP:BmF4]Y:d>0XR/a=en?VUm2$I%SIXJCHQ0fR"%sRd$92Qb-J:0OA$)nO#IgYL[eT>he,`b4l81F:L\.7&!ZkQ!=1jE$;N4N%X?5*3)6Zj,nlm!h3hbSmMFo4k[P\in%_PMRKm%.=GACukpTLT/b%2r:>qZ*.r4SbH#7Pi_7]D"Qcj"]<X5Cc7_\&9nlca=n8OR3FKG+Q$PjFp'4\?5SEjaPEhJ>9M*9D/EX%TVYY-+jAUp[d]GTg3ZZabF#<gN5?%uPJGs!h]/*IoG4nQ,D"kV<>ri)&_P9Gjktn*G6SM&8^`:inoimm:k"hGGp&WfkuZn\=KqfL%'p61<-Zd2,jN%H_AUi5]>V$l["0<Rp.!a6HRqsO5#N,eC=GqcCfm5'Geg^C1*Q:*P;CsIG"OJ4"5Z.&!5%G4BY?M?H7f1IgFia,[%J+F^/&eB-M!JJTHj<!jn41I,61##-F%WPu(acR.kNM.&5b>3d?^B]>(Zm;eE.l(s1XD[E^W*$Q^^c!RFRj=Rk,c@@ZKG6<MiK7I%%:J:#_oTOh#f"-\'V3?5g0M$YVZTEqMGlVf;5U*K?-inM_#n;PqS%.iKBiu?^^I:FI#chH3d'\^0KX[:/`@pJR%A9@a:t-!9HJC)J%iR<"a^A-::bW9*/_m:UZ[7D23m]dlR)Uc&&4Y.Ie[mfK0Ss`blaGW6eN_0JX<E96eDi,\$?c7ChcPab&OJd/O":]ZuR+NiqS?iG>%OmQ6UXR+F$p)GHOq"FOT?=/*ND`*gpb%X<Y+s8]3["CsO#ale$lE(Qf(S$5<0Hcl,g'n&n>g5bLE21-\dT$.Xb+,68oc)\*VV65E%/mmtXGZ-DRSe1XC(W5b\#@h"r2gY'Ys7h#G0>@7kF,jt.S*;\_gg].e1(!8[A#L?%'/9LXql/\PnfOTDB;!Qa.sBS>S\8d"I68T:%RJjBX&,;83pH6jM(D-1/fCIYr+0+GM6FPnT^iZf)ciiB8JR]QQ-o1]En52!8FYqpiA6,f1.Jl6Yeo-IX$^V>.`NTK]PZ/<]>\OpW%3*,_?$5)\O*oTE[ILclFC4"i/42N&*#@`>[^c91b*c&nj'o=)%-]5u28J]mujriaS9?mWW?p><R`l%e)I?p)S8.9ts\dW>sO-PJc%If$<K(3C@W0l?]pN@_!TYn-f^,0LSl4*36\aW=.WXG\YR%F"568/%Y3W=;tY_\,VPS$8YSmgsP-e:rl(W#8hZ4Qip[\bE@$!KOGj%"6G+kFGFCP20`3uPehUKQ=M)MHRqdM!E!tX,a#K>XAT(D:`E9HE[PqEY]l-3\KZTUh[]?DY7i\Z4Sa:5.Cr".+>8b\XpVhDL2lB0%!eMWa?eiDOk76YN2,o7fJZ\YkV:'eRSjc\W$%?4TGeLhQ#Y,N@V/QuH7bY)IOBai:&hFESm7LUD#urK0;gBI(8&b;<X3ct!$Q4g^%WAGpEGoSP+79ig$F(0kj63qSf2?ic%PP$m!7M;$L`K/E)D)HrJWi"rb+UE;8ZBMoT#MC2sk7#7&g0HRn(c3a6s'r3nluj>d^.TF0%p1MmR`jm#dDCJ2"X@?I(E]"e5nK4#t3it)_fn?*Q<Eq-GkAZlVn!X=gAiR*!j)ejkON\_lJ,;?LY:jM:f/kA?6A!h<Y'3'R:RKCf%XBh?.+](0']>'=fes7&=e6#\gg!D`K$Q[YI1[cONUi`l%'TUjO/"FH?1ZCCp^XnB15Unb31;+5)/L0$Yf(g<H.BC\*^2G7">FY;o%_W6j.eT%!D=%tE<+8@uGgmK.kQIr5X7XT8J<,CJ:me\Vk>/`5n<_2pTHB*\a+DbJQYmSWWj2,E&(eu$_0n-0[&+_0fnS(bus'*XM%$3'U)IJ_j8qD\(ss4;bq%tFQTs81tDrQB]dm<?>B?[i$a5QBJ&rVf$qs88d5J,9bks1a#3qu%W9J7&6Mn(5=erU$5+reE`<nP;Ba%rPROknK3=`7s=L]rU+%mci;h1rs)T%n.>~>%AI9_PrivateDataEnd