%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Cum19_netk_HJ_Geant.pdf
%%Creator: (Adobe Acrobat 20.9.0)
%%For: yons
%%CreationDate: 2020/10/27, 23:49
%%BoundingBox: -259 259 308 567
%%HiResBoundingBox: -259 259 308 567
%%CropBox: -259 259 308 567
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 919 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164374, 2020/03/05-20:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-04-04T21:46:23"
   xmp:CreatorTool="ROOT Version 5.32/04"
   xmp:ModifyDate="2018-08-24T13:47:21+08:00"
   xmp:MetadataDate="2018-08-24T13:47:21+08:00"
   pdf:Keywords="ROOT"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:c6f58bdd-0d3a-594f-b659-ef19960b7884"
   xmpMM:InstanceID="uuid:8b7c2cb5-ffc0-d34f-9204-aceb6b7a7a5f">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -567 translate
pgsv
[0 1 -1 0 308 0 ]ct
gsave
np
gsave
0 0 mo
0 567 li
308 567 li
308 0 li
cp
clp
308 567 mo
308 .0709839 li
-.480011 .0709839 li
-.480011 567 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
289.491 532.984 mo
289.491 34.086 li
18.028 34.086 li
18.028 532.984 li
cp
ef
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
ef
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
138.015 510.783 mo
138.015 413.248 li
27.258 413.248 li
27.258 510.783 li
cp
.92929 .879301 .889677 .799283 cmyk
@
138.015 510.783 mo
138.015 413.248 li
27.258 413.248 li
27.258 510.783 li
cp
@
.75 lw
138.015 510.783 mo
138.015 413.249 li
@
134.692 508.282 mo
138.015 508.282 li
@
136.354 503.281 mo
138.015 503.281 li
@
136.354 498.279 mo
138.015 498.279 li
@
136.354 493.277 mo
138.015 493.277 li
@
136.354 488.275 mo
138.015 488.275 li
@
134.692 483.274 mo
138.015 483.274 li
@
136.354 478.272 mo
138.015 478.272 li
@
136.354 473.27 mo
138.015 473.27 li
@
136.354 468.268 mo
138.015 468.268 li
@
136.354 463.267 mo
138.015 463.267 li
@
134.692 458.265 mo
138.015 458.265 li
@
136.354 453.263 mo
138.015 453.263 li
@
136.354 448.261 mo
138.015 448.261 li
@
136.354 443.259 mo
138.015 443.259 li
@
136.354 438.258 mo
138.015 438.258 li
@
134.692 433.256 mo
138.015 433.256 li
@
134.692 508.282 mo
138.015 508.282 li
@
134.692 433.256 mo
138.015 433.256 li
@
136.354 428.254 mo
138.015 428.254 li
@
136.354 423.252 mo
138.015 423.252 li
@
136.354 418.251 mo
138.015 418.251 li
@
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
%ADOBeginSubsetFont: Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c0000038c6670676d00000000000004b800000b90
676c796600000000000062a4000414b06865616400000000000010480000
003668686561000000000000108000000024686d747800000000000010a4
000023306c6f636100000000000033d4000023346d617870000000000000
5708000000206e616d6500000000000057280000070c7072657000000000
00005e340000046e67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a002a0093007600a000ac00b800ab00c50000002bfe55001a
042f002105be002740292a292827262524232221201f1e1d1c1b1a191817
161514131211100d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b000
43617d6818b0004360442d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2c20b0032552582359212d2c69b04061b0
008b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0
112bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb01745
8cb0172344b0177ae5182d2cb002254661658a46b040608b482d2cb00225
46608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b003
2545b019236a4445b01a23444565234520b00325606a20b009234223688a
6a606120b0005258b21a401a4523614459b0005058b21940194523614459
2d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7
830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c456920b00943b0022660b00325b00525
4961b0805358b21940194523616844b21a401a4523606a44b209191a4565
2345604259b00943608a103a2d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c764520b003
254523616818236860442d2c7645b00325452361682318456860442d2c76
45b0032545616823452361442d2c4569b014b0324b505821b0205961442d
b8002b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db8002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db8002f2c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db800302c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db800312c2020456944
b001602020457d691844b001602db800322cb800312a2db800332c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db800342c4b535845441b2121592db800352c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800362c20
20456944b001602db800372cb800362a212db800382c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800392c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db8003b2c2020456944b00160202045
7d691844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db800402c2020456944b001
602db800412cb800402a212db800422c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db800432c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db800442c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db800452c2020456944b001602020457d691844b001
602db800462cb800452a2db800472c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
482c4b535845441b2121592db800492c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db8004a2c2020456944b001602db8004b2c
b8004a2a212db8004c2c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db8004d2c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db8004f2c2020456944b001602020457d691844b001602db800502c
b8004f2a2db800512c4b20b003265358b0801bb040598a8a20b003265358
2321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b003
2653582321b801408a8a1b8a235920b80003265358b0032545b801805058
2321b8018023211bb003254523212321591b2159442db800522c4b535845
441b2121592db800532c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db800542c2020456944b001602db800552cb800542a212d
b800562c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800572c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800582c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80059
2c2020456944b001602020457d691844b001602db8005a2cb800592a2db8
005b2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a
1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db8005c2c4b535845441b2121592db8005d2c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db8005e2c2020456944b00160
2db8005f2cb8005e2a212db800602c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800612c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800622c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800632c2020456944b001602020457d691844b00160
2db800642cb800632a2db800652c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800662c4b535845441b2121592d0001
00000000000067a8ffcc5f0f3cf500110800000000005f4d8f0000000000
d8b9a29bf865fc270b9108f9000000090001000100000000000100000629
fe2900000c01f865fced0b910001000000000000000000000000000008cc
05120042000000000239000002390000023900ed02d70052047300000473
0040071d0042055600590187009c02aa008e02aa0044031d004e04ac005c
023900aa02aa0055023900af0239000004730040047300c4047300400473
003104730034047300420473004d0473004b0473004204730049023900e3
023900e304ac001c04ac005c04ac001c0473009c081f00e10556001e0556
009705c7005a05c700a5055600af04e300af0639006305c700a1023900c9
040000230556009c0473009c06aa009705c7009c06390050055600af0639
005005c700b40556006004e3002105c700aa05560034078d00250556002a
0556002a04e3002f023900800239ffbb0239002f03c100780473000002aa
002604730052047300760400003b04730038047300480239001c0473003d
0473008401c7008401c7ffda0400008001c7008906aa0084047300840473
003b047300760473003c02aa00890400004202390017047300800400000b
05c700120400000b040000150400003402acffd50214009002ac002a04ac
00120556001e0556001e05c7005a055600af05c7009c0639005005c700aa
0473005204730052047300520473005204730052047300520400003b0473
004804730048047300480473004802390067023900080239000002390025
047300840473003b0473003b0473003b0473003b0473003b047300800473
00800473008004730080047300500333006f04730068047300380473004b
02cd0095044cfff504e300c705e5001505e50012080000ed02aa008a02aa
00520464005c080000100639004205b4002a0464005c0464005a0464005c
0473ffe1049cffb403f4006a05b400280696001c0464002f0231ff7902f6
003b02ec00310625005e071d004904e3005c04e300ba02aa00e804ac005c
0464ffef047300280464005c04e50071047300c2047300c2080000ed0239
00000556001e0556001e0639005008000049078d00470473fffb080000f1
02aa004e02aa004e01c7008401c700aa0464005c03f40042040000150556
002a0156feaa05f4006002aa00b402aa00aa0400001c0400001c04730050
0239009701c700aa02aa004e0800000e0556001e055600af0556001e0556
00af055600af0239006b0239fff902390020023900020639005006390050
065200690639005005c700aa05c700aa05c700aa023900bd02aa002a02aa
fff702aa001502aa001902aa00f702aa008402aa007902aaffff02aa00a1
02aa002a0473ffe801c7ffd7055600600400004204e3002f040000340214
009005c700210473003d0556002a04000015055600800473008004ac005c
04ac007402aa005702aa000b02aa000706ac005a06ac00a306ac004b0473
0000063900630473003d023900c9055600600400004205c7005a0400003b
05c7005a0400003b047300380556001e047300520556001e047300520556
001e0473005205c7005a0400003b05c7005a0400003b05c700a505480038
055600af04730048055600af04730048055600af04730048055600af0473
0048055600af04730048063900630473003d063900630473003d06390063
0473003d0473003d05c700a10473008405c700350473003e038f00690371
004403330059031f00650239003501c7ffdf063900c9038e008404000023
01c7ffa3055600320400fff10473009c021f00830473009c01c7000c0473
009c021a004e0473009c027b008905c7009c0473008405c7002a0473000a
05c7009c047300840473000e063900500473003b063900500473003b0639
00500473003b05c700b402aa008905c7004902aa001705c700b402aa0042
0556006004000042055600600400004204e300210239001704e3002102e1
001704e30021028fffe205c700aa0473008005c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa04730080078d
002505c700120556002a0400001504e3002f0400003404e3002f04000034
055600600400004204e30021023900170473004b0000fcfc0000fcfc0000
fc9c0000fc680000fc860000fc8a0000fd690000fcc40000fcf60000fc70
0000fc9c0000fd5b0000fcea0000fd120000fc9105c70021063900630473
003d0473009c01c700890556009c0400008005c7009c0473008405c700b4
02aa008901aaffdb023700e102aa005501c7ffda040000800239001c0473
0048047300480400003a047300510000fd3c0000fc660000fc8a0239fffb
0239fffb05c7009c047300840000fcc4056d0024054c0098055600980427
0098059c00250556009807f0000a0554004505c7009805c7009805560098
057e002506aa009805c700980639005005c700980556009805c7005004e3
001d0556002f06d800410556002505db009805360060078d009807a10098
06aa001d070900980536009805c700640800009805b7006a047300560473
0048046200870339008704d9001c04730050063d00170400003304ab0087
04ab0087046200870498001b055400870473008704730048047300870473
007d04000048040000330400001706a800460400001404910087044e005c
063900870657008704e3001b05c7008703ff00870414002f063900870477
005005560098047300500427009803390087023900ba01c7008704000023
05c70050040000480239001d020300290800002506c3001b07e10098067c
008701c7ffdd055600620639004e0473001b055600980462008704000048
0617001b0473001b0556002f0400001705c700980473008704730098031d
00870000fd5b0000fd5b0000fd5b0000fd5b0000fc700000fd930000fd2a
0000fc8a0000fcfc0000fcfc0000fc860000fd690000fcc40000fcf60000
fd930000fc9c0000fc9c0000fc8a0000fc8a0000fc680000fc860000fc66
0000fc680000fc860000fc660000fc660000fd500000fc660000fd5b0000
fc8a0000fc8d0000fd2a000000000239001b0473008306aa008302aa0088
06aa008302aa008902aa0088042b0052042b005302020087033afffd0239
0017023900170400000a05c70011040000140473009c0473009d0473009c
0400008004b2003904b2003905c7005905c7002104890049055600af0556
0060040000420498003906e600aa05950080060a0052021400b6037300b6
023900c3048c002b0400003b0134005102aa00c102aa00c20b06000e0556
00ed029600ed02aa004e01c700aa02aa0055044cfff5042f00c1042f00c2
056500c1056500c202aa0055029600ed02aa0055080000f102d500a4011d
000000000000000000000000000000000000000000000000000000000000
023900000239000002390000023900000239000002390000023900000239
0000023900000000000000000000000000000000000000000000011d0000
008f000002aafff7037000b60473009c02aa005502aa0006044c0072044c
00730556001e04e300ae04730048071c00500568003b0000fd5e0000fd5e
0000fd5e0000fd5e0000fcc90000fcd20000fd980000fccd0000fcef0000
fce10000fcd90000fcec0000fc5e0000fd440000fd4a0000fccf0000fcd1
0000fc860000fc910000fcc10000fcc10000fcc10000fcc20000fcc20000
fc8a01550061027b00610155006101550061046400320464002b03f4002d
03f4002f05b4011305b400280231006b0231fe830464ff330464ffef0464
002b0464002d08fa006f0816006f0556009c023900c9047200c906ab00c9
078f00c905560034078f003409c800340c010034078f00c90556002a078f
002a09c8002a0473009c05c7005a05c700a506aa009701c70084038e0084
0555008405c700840400000b05c7000b078e000b0955000b05c700840400
000b05c7000b078e000b01c700890400003b0473003806aa008409e20074
08c1004f07db003807da006b05a7007102f7005808e7007106f0006b05a1
00530556001e047300520239001e0239ffff063900500473003b05c700aa
0473008005c700aa0473008005c700aa0473008005c700aa0473008005c7
00aa047300800556001e047300520556001e0473005208000010071d0049
063900630473003d0556009c04000080063900500473003b063900500473
003b01c7ffbe09cd005408fc006f07fb00380639006305c7009c04730084
0556001e0473005208000010071d00490639004204e3005c0556001e0473
00520556001e04730052055600af04730048055600af047300480239ff71
01c7ff350239fff801c7ffaa063900500473003b063900500473003b05c7
00b402aaffd605c700b402aa004f05c700aa0473008005c700aa04730080
05c700a1047300840556001e04730052055600af04730048063900500473
003b063900500473003b063900500473003b063900500473003b0556002a
0400001502aa004e023900c90556001e0473005205560097047300760556
009704730076055600970473007605c7005a0400003b05c700a504730038
05c700a50473003805c700a50473003805c700a50473003805c700a50473
0038055600af04730048055600af04730048055600af04730048055600af
04730048055600af0473004804e300af0239001c063900630473003d05c7
00a10473008405c700a10473008405c700a10473008405c700390473001b
05c700a1047300840239ffec01c7ff9e02390027023900160556009c0400
00800556009c040000800556009c040000800473009c01c700890473009c
01c7ff9d0473009c01c7ffb50473009c01c7ffc006aa009706aa008406aa
009706aa008406aa009706aa008405c7009c0473008405c7009c04730084
05c7009c0473008405c7009c04730084063900500473003b063900500473
003b063900500473003b063900500473003b055600af04730076055600af
0473007605c700b402aa008905c700b402aa008305c700b402aa004a05c7
00b402aa0018055600600400004205560060040000420556006004000042
0556006004000042055600600400004204e300210239001704e300210239
001704e300210239ffe204e300210239ffe705c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa047300800556
00340400000b055600340400000b078d002505c70012078d002505c70012
078d002505c70012078d002505c70012078d002505c700120556002a0400
000b0556002a0400000b0556002a0400001504e3002f0400003404e3002f
0400003404e3002f04000034047300840239001005c70012040000150239
001c0556001e047300520556001e047300520556001e047300520556001e
0473ffcb0556001e047300520556001e047300520556001e047300520556
001e047300520556001e047300520556001e047300520556001e04730052
0556001e04730052055600af04730048055600af04730048055600af0473
0048055600af047300480556008c0473fff0055600af04730048055600af
04730048055600af04730048023900ae02390099023900c701c700840639
00500473003b063900500473003b063900500473003b063900500473ffd8
063900500473003b063900500473003b063900500473003b071c00500568
003b071c00500568003b071c00500568003b071c00500568003b071c0050
0568003b05c700aa0473008005c700aa0473008006e600aa0595008006e6
00aa0595008006e600aa0595008006e600aa0595008006e600aa05950080
0556002a040000150556002a040000150556002a040000150556002a0400
0015055600af04730048055600af04730048056d007505df009604860052
048600870723000a05890017056d002404860043056d002404860043056d
00750486005208d9001006dd0012054f0043040a003005df009604860087
05df009604860087065500500486005205df006004120037056d00100412
0019056d001004120019056d00100412001905ac005e047a006907480098
0600008d08000010071d004906aa009706aa008405c700b402aa004c0222
ffc50556001b05c700c504e300d505c70029055600c504e3004805c700b0
06390071023900ba055600b00556002f071d00be05c700b004e300620639
007105c700b0055600c504e3005804e1002f0556002905c700500558003d
06a8007f063900640239000a0556002904e3005a04e300b40473001204e3
006804730077038d004a04e3003b04e5008f023900b0047300b004730025
04e300b8047300420400007104e3006f04e300aa0473004c04e3006f0400
003b04e300b805c700770473000e05c7008f0610006a0239000a04e300b8
0239009a0222000b0000fd19023900b0016c0088016c00880000fcfc0000
fcfc016c008802ca001a02b5001a03050088031200880222002e0222002f
031e00880362006f033300880362006f0735007f0625005e0639ffef01c7
008401c700aa047200ed06ac009c06ac00ed04730048047300480556001e
0473005204730052055600af04730048055600af04730048055600af0473
00480239fff00239ffdb01c70079063900500473003b063900500473003b
063900500473003b055600600400004205c700aa047300800400000b06e6
00aa05950080060200610473ffd605c7fff20473008406aa008403f0009c
0460009a03a6005a03e9000c02cf00020448005c06020061047300500655
004e0486004c0639005002aa001e07c6002407c6002408e6ffca0000f920
0000fa0b0000fa0b0000fa060000fa0606020061047300500655004e0486
004c0222002f02b5001a0473002504e3002f040000340473003b04d20084
04dc00380473007204bd003804d7003d0473008204d7008202220086078d
00470387008802aa008604d2003c04b80032052b00320772003805600017
043a001705ce001c04c2008904b8008901a9008a01a9008a01c700aa0187
007802aa000802aa00c102aa003a0187007802aa000802aa00c102aa003a
01a9008a01a9008a02aa001e02aafff7023a0042023a004100e4ffed0155
00450155004401c4004402e400090200000b023a004e023a004f0256000e
0256000e025600240256002402aa00550256002e0256002e0256002e0200
00210200000600e300440256003a023a000902560024025600240256000e
0256000e02aa0078023a004f0000fccd0000fca20000fca20000fd6f0000
fd6f0000fc490000fc490000fb9e0000fca20000fc490000fccd0000fcc2
0000fcc20000000002390000000000000000000000000000031d004e031d
004e06da00c107c60024023900e308e6009c07c60024071d00d00703001b
023900800239008000000000000000000000000000000000000000000000
0000067b003a023a00200239001a02390021023a002702390025023a0021
023900240256002e0155002b0256002e0155004701550022023a0042023a
0020023a006202390020023900180239001a02390021023a002702390025
023a0021023900240256002e0155002b0256002e0155004701550022063c
0011063900630473009c0473009c0556002a06ab00280600003007560011
0473007207c8005806ac005a05c7005a0556005904e500710696001c06ab
003406ab0028055600af04730076055600af0473007604e3000206390050
04c400a1024100230369001105c7005002bb0023033afffd0473009c0473
009c01c7002a01c7002a0473003d04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a05c1005b05b3005b076c00880776
008807760088078d008807ca006f07a0006f047300770473007704730077
04730077047300770473007706c2008806c200880874008808890088085b
00880868008804e3003b04e3003b04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b073300880733008808e5008808fa008808cc008808d9
00880929006f0929006f023900b0023900b002390041023900390239003d
0239003d023900230239002303a5008803a5008805570088056c0088053e
0088054b0088059b006f059b006f04e3006f04e3006f04e3006f04e3006f
04e3006f04e3006f07a5008807a5008809570088096c0088093e0088094b
008804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b806c20088088900880868008808b8006f0610006a0610006a0610
006a0610006a0610006a0610006a0610006a0610006a0791008807910088
0943008809580088092a0088093700880987006f0987006f04e3005a04e3
005a047300770473007704e3003b04e3003b023900b0023900b004e3006f
04e3006f04e300b804e300b80610006a0610006a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a0811005b080c005b
0991008809d80088097f0088099b008809d3006f09ce006f04e3003b04e3
003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b096c0088
096c00880b1e00880b3300880b0500880b1200880b62006f0b62006f0610
006a0610006a0610006a0610006a0610006a0610006a0610006a0610006a
09ca008809ca00880b7c00880b9100880b6300880b7000880bc0006f0bc0
006f04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
0556001b0556001b0666002e0661002f07a9001b04e3003b04e3003b04e3
003b04e3003b04e3003b06ac002e06a7002f06d2002e06ba002f083100b0
0239ffcf0239ffce0239ffcc0239ffda0239ffdc0239ffc50239ffe10239
ffee0343002e0348002f04e300b804e300b804e300b804e300b804e300aa
04e300aa04e300b804e300b8055600290556002906b1002e0713002f06c2
00880610006a0610006a0610006a0610006a0610006a075a002e0789002f
0792002e07a9002f0878005e04e3005a0473007704e3003b023900b004e3
006f04e300b80610006a05d5007206a7002f06ba002f0348002f0789002f
0713002f07a9002f0239ffcb04e300b804ac002504ea011704f700a102f3
001b02bb00230473002504e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a0239ffd70239ffe40239ffd20239ffd7
0239ffdb0239ffdb0239ffcd0239ffe00239ffc80239ffc30239ffdc0239
ffdc0239ffd70239ffd70239ffd20239ffcd0239ffd20239ffd704e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b80666002e0661002f05c1005b076c00880776008805b3
005b07760088078d00880666002e0661002f05c1005b076c008807760088
05b3005b07760088078d00880343002e0348002f0348002f03a500880557
0088053e008803a50088056c0088054b00880343002e0348002f0348002f
03a5008805570088053e008803a50088056c0088054b008806b1002e0713
002f0713002f06c20088088900880868008806c200880889008808680088
06b1002e0713002f0713002f06c20088088900880868008806c200880889
00880868008805c700b405c7005a0639005001c70020051d0029055600af
05c700a10000fd31055200680473003806390050047300480772005b0738
004505e5001306ac003d06ac003d06ac003a06ac003a066d001d04e3001b
082200d005e1008a06a8007f05c7008f0556001e0400000b079900d005cf
008a04da003802ca002405d900160588003805c700b404730052031f0000
04da00a103eb00a1064900a104cf00840556009c0400008004e3002f0400
003408d9001406dd0030054f0072040a0047056d00a50412007a05df00ac
0486009105df00630412003f04f8002b0412003a056d002e0412002405ac
00ac047a007705ac00ac047a00770556002a0556002a04d900bc037c0091
05ac00ac047a0077063200a504df007a075f00ac059b00910556002a0556
002a06fe0028054e00350748003a059400260748003a0594002607720048
05b3003805df00ac0486009104730052054f00ac054f00ac06a8007f04dc
005d0855004405e0002605560025040000040556003404b6000b0400003b
054f0072040a004705f10026049c0024023900bd056d002e041200240556
00340556001e05c7005a0400003b0473ffe804e3002101c7003e02bb0023
04e30021055600af0473009c0473009c055600af047300480456002301c7
ffda05c700aa01a9002101a9002102aa003302aa003302aa003a02aaffe9
023900e302aa003c02aa003c057f005b04ac002504ac0074023900e304ac
0025057c004c04ac0074023900e3023900e3063900710412003f0412003f
055600ae0473008005c7005a06aa009705dd0097059b004605c7005a05c7
005a05c7005a0400003b0400003b0400003b0473003805ca003006c6002e
063f002f031f001a062e001904e900310488004502aa00be02aa00be02aa
00be02aa00be0277003b0277003b034b0000034b0000034b0000034b0000
034b00000487001203f7001e045e0054043600830436008302fd005d034f
0012069900390655003e052900300000f86506e1002204e9002001e0004b
01e9004b015d0025015d000a0199002a0198001202fb0017030400170267
0013025700120257001202c8004b01d8000701d8000707e9003a097c004b
0931004909310002013c004b04570022058900050589000d04be00150442
001801d8000701d8000703fe003d03fe003d0404003a036f000b0467003c
0000fb760000fcc10000fc080000fc730000fc730000fa630000fce00000
fe950000fc8e0000fc510000fa0b0000fc9f046500360465002204010034
0401002407760017044c001b03ea001d051a00340653003204c8003306c2
008808890088086800880556001b0556001b0239ffdf0239ffe105560029
055600290404001505e5001405e5001405e500140800ffeb0800ffeb0800
03b40800038c080003b40800038c0800ffe90800ffe9080003b40800038c
0800ffe90800ffe9080000000404001500e40042023a0029023a0024023a
001e02000006023a002405c7005a0639006305c7005a0471002205520029
04e300210556001e04d0002805c2004e04d9004e05c7005a06aa008405d0
003106640037082d00350552006805520068039c003f0380003b039c003f
0380003b039c00530381003c039c00530381003c02eb005302e3005302e3
005302e3005302eb005302eb000802e3000002e3000002e3000002eb0008
0363005303630053036300530363005303630053027f00010330004503b2
002603c3000b050b0031069c00290390007f0000fc4f0000fc4f0000fc42
0000fc420000fc420000fc420000fc010000fc010000fd44046500220401
00240a3900500873003b0436008304360083043600830329003a0329003a
03550028050d00340329005403290028032900330329003302f6003a02f6
003a0329002b0143005e02d7005b04bb005e0329005e0329002a02d70029
032900270329002a03290054019400100329005b0373003704bb005e02d7
0008037800800329000d0378004a04dc004d0632002a04be003304730039
0473003b04e6003804e1003a04fa0039076e003e0329000a0143005e01e4
00610329005b02d70008037800800329000d037800790329000a042b0052
05c5001001c70084045e0054070a002e06cb003504d6001b04fa001a02d8
000d04e9001b0330000d02d9000a02db000c01c700aa02aa004e01c700aa
02aa004e01c700aa02aa004e01c700aa02aa004e053d007a0708003b0310
008f0574009708c000220473004002e00034047300400473003104730034
047300420473004d0430002b047300420473004903cc000903cc000903cc
0009042800580425004e048d00560437003d06a600560450004804460048
04f8001f06c70056044e0056042d003d07c7005a049c0056049e007505e3
00560446003f0475005205e9005c046a0075054e00560475003106660056
0448003b05e300560468005604a400560487007504b40058049a005604a4
007504d1003d049a007504250044043d003d04be0056043d004e0458004e
0458004e04ba005605df0056044c00aa04d500b10473005e0473002f0425
00330473007b0437003d04250056049e0050048b003d04b8005604b80056
072b005204a20048048f004804db001f074c007104c10071047d003d085c
005604dd005604dd007b06a20071046f003d04b4004e0619005604ba0085
05d5005604ee0056068b004804a80048063f005204cd005604dd005604c3
007b053b005604e7005604e70085051d005604e70085049600480493003d
0521004e04c50056049300480491004804e7005606060056049c004804c3
007b049c004804ae00560527004c02f6007b044e0056048d005604c50056
05ae005605ee006f000000000000006c0000006c0000006c0000006c0000
00cc0000011c0000028000000430000005c0000007500000079400000824
000008a80000099800000a0000000a6400000aa000000ae000000b280000
0c0400000c5000000d6800000ec000000f5c00001084000011b000001244
000013a8000014d40000152c000015a80000163c0000168c000017240000
1828000019d800001a5400001b5c00001c7c00001d4000001dc800001e2c
00001f7c00001fec0000201c000020a000002194000021e4000022fc0000
23a8000024a400002550000026c4000027d800002970000029cc00002a5c
00002b1800002cb000002da800002e6c00002f0400002f5c00002fbc0000
30200000306c00003094000030c000003254000033280000342c00003504
000036980000373000003880000039200000397c000039f000003ad00000
3b1400003c0c00003cc400003db400003e9800003f800000400c000041cc
0000426c000043200000444c000045a80000460800004734000047d40000
48b4000048f8000049f400004ab000004ac800004ae000004ca800004cc0
00004cd800004cf000004d0800004d2000004d3800004d5000004d680000
4d8000004d9800004f4400004f5c00004f7400004f8c00004fa400004fbc
00004fd400004fec000050040000501c000050340000504c000050640000
507c00005094000050ac000050c4000050dc000050f400005150000051c8
0000538c00005518000056e400005770000057e4000058fc00005a9c0000
5c0000005ce400005d1400005d7c00005e5c00005f400000611c00006270
000062f800006398000064480000656800006668000067a00000686c0000
68cc0000697c00006a0400006b6000006c3400006d5400006f7c00007124
0000721c00007280000072c400007374000074b0000075a8000076340000
76e40000779800007804000078040000781c000078340000784c00007978
00007b5800007b9000007bcc00007c6c00007cfc00007d5c00007dbc0000
7e2c00007f1400007f2c00007f4400007fa40000811000008180000081f0
000082b400008364000083e800008440000084a400008538000087600000
877800008790000087a8000087c0000087d8000088240000889400008914
00008960000089780000899000008a3800008a5000008a6800008a800000
8a9800008ae800008b2c00008bb000008bdc00008c3800008c6800008d7c
00008e6000008ea800008f7400008fb400009084000091140000912c0000
91440000915c00009174000091d0000092c0000094280000944000009458
00009510000095dc00009604000096bc00009708000097c0000098b40000
99ac00009abc00009c8800009d4000009eb40000a02c0000a0840000a2b4
0000a4f00000a5080000a5200000a5380000a5500000a6180000a6300000
a6480000a6e00000a8a40000a8bc0000a8d40000a8ec0000a9040000a91c
0000a9340000a94c0000aa840000aa9c0000aab40000ab600000ac680000
ac800000ac980000acb00000acc80000ace00000acf80000ad100000ad28
0000ad400000ad580000ad700000ad880000ada00000adb80000add00000
aeb80000aed00000af700000af880000afcc0000afe40000b0dc0000b0f4
0000b17c0000b1940000b1ac0000b1c40000b1dc0000b1f40000b20c0000
b2240000b23c0000b2540000b2e40000b3440000b35c0000b3740000b38c
0000b3a40000b3bc0000b3d40000b3ec0000b4040000b41c0000b4340000
b44c0000b5c80000b7300000b7480000b7600000b7780000b7900000b7a8
0000b7c00000b7d80000b7f00000b8080000b8200000b8380000b8500000
b8680000b8800000b8980000b9b00000b9c80000b9e00000b9f80000ba10
0000ba280000ba400000bb0c0000bbf40000bc0c0000bc240000bc3c0000
bc540000bc6c0000bc840000bc9c0000bcb40000bccc0000bce40000bcfc
0000bd140000bd2c0000bd440000bed80000c06c0000c1000000c1fc0000
c3640000c3900000c3c00000c4040000c4880000c4b40000c5140000c544
0000c5a40000c6b40000c6fc0000c73c0000c7900000c86c0000c9380000
c9640000ca500000ca680000ca840000ca9c0000cab40000cacc0000cae4
0000cafc0000cb140000cb2c0000cb440000cbc00000cc380000cc640000
ccb40000cd1c0000cd940000ce4c0000cf040000cfc80000d14c0000d20c
0000d2380000d2980000d2b00000d2c80000d3680000d42c0000d4740000
d4cc0000d5c00000d7500000d78c0000d85c0000d8bc0000d9680000dadc
0000db740000dc3c0000dca80000dd380000ddf40000de7c0000dfc80000
e0300000e1140000e2080000e2500000e2c00000e4680000e4d40000e558
0000e6000000e6740000e7200000e8140000e9100000e9fc0000eae40000
ec0c0000ed840000ef100000f0e00000f24c0000f2880000f34c0000f438
0000f4e00000f61c0000f6b40000f77c0000f7e40000f8700000f92c0000
f9b40000faf00000fb540000fca00000fd940000fddc0000fe4800010090
000100f80001017c0001021c000102900001033c000104300001052c0001
0614000106d8000107f400010934000109d400010ae000010b3800010b94
00010bc400010c1400010ca400010d7400010e3000010eb000010f300001
107c000111b4000112d8000113fc00011480000115d00001168800011774
00011800000118880001197000011ab400011bb000011c6000011d0c0001
1d8000011df400011e6000011ecc00011f2000011f7400011fc80001201c
000120680001209c0001210400012178000121a4000121d0000121fc0001
222c0001228c0001239c000123cc0001240c00012450000124ac0001250c
00012590000125bc000125e80001266c00012698000126c4000127040001
282000012860000128b400012914000129a400012a0c00012a0c00012aac
00012b4400012c1400012c8400012d8000012df000012e6000012f5c0001
30a8000130fc0001318400013224000132c800013310000133880001340c
000134f0000135d4000136b400013724000138300001393800013a100001
3b3000013c9400013cf400013e6000013f5c00013fb40001406c0001413c
000142a4000142d400014338000143940001444400014500000145540001
4584000145b400014994000149f800014a2800014ad000014b2c00014b58
00014bdc00014c2400014c6800014cc800014d2400014d5000014d800001
4dac00014dd800014e0c00014e0c00014e0c00014e0c00014e0c00014e0c
00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c0001
4e0c00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c
00014e0c00014e0c00014e0c00014e0c00014e4800014eac00014fd40001
5000000150140001506c000150cc000150e40001513c000151f400015374
000154e000015538000155d400015670000156c800015844000158ec0001
593800015a4c00015af000015ba800015ca400015d3c00015e1800015e8c
00015f3400015f7800015fd80001601800016044000160ac000160f40001
613c00016188000161d40001624800016274000162b8000162e400016310
000163280001633800016350000163600001637800016388000163a00001
63b4000163cc000163dc000163f4000164040001641c0001643400016444
000164540001646c0001648c000164a4000164b4000164cc000164ec0001
65140001652c0001653c00016554000165740001658400016594000165a4
000165b4000165c4000165dc000165fc00016614000166240001663c0001
665c000166840001669c000166ac000166c4000166e4000166f400016704
00016714000167240001674400016764000167840001679c000167b40001
67cc000167e4000167fc000168140001682c000168440001685c00016874
0001688c000168a4000168bc000168d4000168f400016914000169340001
69540001697400016994000169b4000169d4000169f400016a1400016a34
00016a5400016a6c00016a8400016a9c00016ab400016acc00016ae40001
6afc00016b1400016b3400016b5400016b6c00016b8400016b9c00016bb4
00016bcc00016be400016bfc00016c1c00016c3c00016c5400016c6c0001
6c8400016c9c00016cb400016ccc00016ce400016cfc00016d1400016d2c
00016d4400016d5c00016d7400016d8c00016da400016dbc00016dd40001
6dec00016e0400016e1c00016e3400016e4c00016e6400016e7c00016e94
00016eac00016ec400016edc00016ef400016f0c00016f2400016f3c0001
6f5400016f6c00016f8c00016fac00016fcc00016fec000170040001701c
0001703c0001705c000170740001708c0001709c000170ac000170c40001
70dc000170f40001710c000171240001713c000171540001716c00017184
0001719c000171b4000171cc000171e4000171fc000172140001722c0001
72440001725c000172740001728c000172ac000172cc000172ec0001730c
000173240001733c000173540001736c0001738c000173ac000173c40001
73dc000173f40001740c000174240001743c000174540001746c00017484
0001749c000174b4000174cc000174e4000174fc000175140001752c0001
754c0001756c000175840001759c000175b4000175cc000175e4000175fc
000176140001762c0001764c0001766c000176840001769c000176b40001
76cc000176e4000176fc000177140001772c000177440001775c00017774
0001778c000177a4000177bc000177d4000177ec000178040001781c0001
783c0001785c0001787c0001789c000178bc000178dc000178fc0001791c
000179340001794c000179640001797c00017994000179ac000179c40001
79dc000179fc00017a1c00017a3400017a4c00017a6400017a7c00017a94
00017aac00017acc00017aec00017b0c00017b2c00017b4c00017b6c0001
7b8400017b9c00017bb400017bcc00017be400017bfc00017c1400017c2c
00017c4400017c5c00017c7400017c8c00017ca400017cbc00017cdc0001
7cfc00017d1c00017d3c00017d5400017d6c00017d8400017d9c00017db4
00017dcc00017de400017dfc00017e1400017e2c00017e4400017e5c0001
7e7400017e8c00017ea400017ebc00017ed400017eec00017f0400017f1c
00017f3400017f4c00017f6400017f7c00017f9400017fac00017fc40001
7fdc00017ff40001800c000180240001803c000180540001806c00018084
000180a4000180c4000180e4000181040001812400018144000181640001
8184000181a4000181c4000181e400018204000182240001824400018264
00018284000182a4000182c4000182e4000183040001831c000183340001
834c000183640001837c00018394000183b4000183d4000183f400018414
00018434000184540001847400018494000184b4000184d4000184ec0001
85040001851c000185340001854c000185640001857c00018594000185b4
000185d4000185f400018614000186340001865400018674000186940001
86b4000186d4000186ec000187040001871c000187340001874c00018764
0001877c00018794000187ac000187c4000187dc000187f40001880c0001
88240001883c000188540001886c000188840001889c000188b4000188cc
000188e4000188fc000189140001892c000189440001895c000189740001
898c000189a4000189bc000189d4000189f400018a1400018a3400018a54
00018a6c00018a8400018a9c00018ab400018acc00018ae400018afc0001
8b1400018b2c00018b4400018b5c00018b7400018b8c00018ba400018bbc
00018bd400018bec00018c0400018c1c00018c3400018c4c00018c640001
8c7c00018c9400018cac00018cc400018cdc00018cf400018d0c00018d24
00018d3c00018d5400018d6c00018d8400018d9400018da400018dbc0001
8dd400018dec00018e0400018ebc00018f1c0001909c000190d800019114
00019174000191bc0001923c000193bc000193ec000194540001949c0001
9550000195d40001962800019790000197f4000198c80001992000019968
000199c800019b5800019bc400019d0400019e6c00019ef400019f8c0001
a0d40001a29c0001a3340001a4ac0001a6000001a7180001a7b80001a8b4
0001a9240001a9900001aa0c0001ab0c0001ab500001acc80001ae080001
af2c0001b0440001b1940001b2140001b2940001b4200001b4ec0001b5a0
0001b7380001b7e80001b8a00001b8ec0001b94c0001b9b00001ba0c0001
ba680001bac40001baf00001bb200001bb7c0001bc140001bcb80001bd28
0001bd980001bdc40001bdf00001be600001beec0001bf5c0001bff00001
c1800001c2ec0001c44c0001c4a80001c5040001c51c0001c5340001c54c
0001c56c0001c58c0001c5ac0001c5cc0001c5ec0001c6040001c61c0001
c63c0001c65c0001c67c0001c69c0001c6bc0001c6dc0001c6f40001c70c
0001c7240001c7440001c7640001c7840001c7a40001c7bc0001c7d40001
c7f40001c8140001c82c0001c8440001c85c0001c9180001ca080001cab0
0001cb440001cc500001cc8c0001cd680001ce640001ced80001cf500001
d08c0001d1480001d2380001d2e80001d37c0001d4540001d4980001d4fc
0001d5600001d7a80001d8500001d8b40001d9180001d9440001d9700001
d9880001d9a00001d9b80001d9d00001d9fc0001da940001db240001db98
0001dc0c0001dc9c0001dd640001deac0001dfe80001e10c0001e26c0001
e3500001e4680001e4dc0001e6380001e6f40001e7b00001e8f00001e9c8
0001ea800001ebc00001edac0001eeac0001f01c0001f1680001f1cc0001
f22c0001f2c80001f3240001f3540001f3800001f3b00001f3dc0001f40c
0001f4340001f4600001f48c0001f4ec0001f5880001f5c80001f6080001
f6a40001f7880001f7f40001f8680001f8e40001f9780001f9ec0001fa64
0001fb480001fc2c0001fc6c0001fcac0001fcf00001fd340001fd600001
fdc80001fe300001fe9c000200000002006800020098000200e400020180
000201c4000202080002024800020288000203980002047c000204c80002
05080002054800020598000205e800020648000206a80002072400020764
000207c800020814000208e8000209240002092400020924000209240002
092400020924000209b800020ac400020b3c00020ba000020c2800020c40
00020ce800020e2400020ec800020f3c00020fb400020fb400020fb40002
0fb400020fb400020fb400020fb4000211640002128c00021310000213f8
0002154c0002159c00021780000218e40002194c00021974000219b40002
1a6800021b1400021bc000021ce800021d2800021dd400021f0c00021f90
00022078000221cc0002221c000223fc00022560000225c8000225f00002
2630000226e400022790000227f4000229100002294c00022988000229e4
00022a6400022c5800022d3800022db000022e8800022ee000022fc00002
315800023198000232100002322800023238000233180002344400023524
00023644000236cc000238100002389000023938000239c800023b440002
3bd000023c8000023dd800023f2c00023f8000023fd8000241040002411c
000241340002414c000241640002417c00024194000241ac000241c40002
41dc000241f40002420c000242240002423c000242540002426c00024284
0002429c000242b4000242cc000242e4000242fc000243140002432c0002
43440002435c000243740002438c000243a4000243bc000243d4000243ec
000244040002441c000244340002444c000244640002447c000244940002
44ac000244c4000244dc000244f40002450c000245240002453c00024554
0002456c000245840002459c000245b4000245cc000245e4000245fc0002
46140002462c000246440002465c000246740002468c000246a4000246bc
000246d4000246ec000247040002471c000247340002474c000247640002
477c00024794000247ac000247c4000247dc000247f40002480c00024824
0002483c000248540002486c000248840002489c000248b4000248cc0002
48e4000248fc000249140002492c000249440002495c000249740002498c
000249a4000249bc000249d4000249ec00024a0400024a1c00024a340002
4a4c00024a6400024a7c00024a9400024aac00024ac400024adc00024af4
00024b0c00024b2400024b3c00024b5400024b6c00024b8400024b9c0002
4bb400024bd400024bf400024c1400024c3400024c5400024c7400024c94
00024cb400024cd400024cf400024d1400024d3400024d5400024d740002
4d9400024db400024dd400024df400024e1400024e3400024e5400024e74
00024e9400024eb400024ed400024ef400024f1400024f3400024f540002
4f7400024f9400024fb400024fd400024ff4000250140002503400025054
0002507400025094000250b4000250d4000250f400025114000251340002
51540002517400025194000251b4000251cc000251e4000252040002521c
0002523c00025254000252740002528c000252a4000252bc000252d40002
52ec0002530c00025324000253440002535c0002537c00025394000253ac
000253c4000253dc000253f40002540c000254240002543c000254540002
546c000254840002549c000254b4000254cc000254e4000254fc00025514
0002552c000255440002555c000255740002558c000255a4000255bc0002
55d4000255ec000256040002561c0002563c00025654000256740002568c
000256ac000256c4000256dc000256f40002570c000257240002573c0002
57540002576c000257840002579c000257b4000257cc000257e4000257fc
000258140002582c000258440002585c000258740002588c000258a40002
5974000259c000025a1400025acc00025b3800025b5000025b7000025b90
00025bb000025bd000025bf000025c1000025c3000025c5000025c700002
5c9000025cb000025cd000025cf000025d1000025d3000025d5000025d70
00025d9000025db000025dd000025df000025e1000025e3000025e500002
5e7000025e9000025eb000025ed000025ef000025f1000025f3000025f50
00025f7000025f9000025fb000025fd000025ff000026010000260300002
60500002607000026090000260b0000260d0000260f00002611000026130
000261500002617000026190000261b0000261d0000261e8000262000002
62180002623000026248000262600002627800026290000262a8000262c0
000262d8000262f000026308000263200002633800026350000263680002
6380000263a0000263b8000263d0000263e8000264000002641800026430
00026448000264600002648000026498000264b0000264c8000264e00002
64f8000265100002652800026540000265600002657800026590000265a8
000265c0000265d8000265f0000266080002662000026640000266580002
667000026688000266a0000266b8000266d0000267f80002692400026aa4
00026afc00026bb000026cc400026d8000026db800026e5800026e700002
6f5800026ff4000271f000027420000275f80002781400027ad000027cb8
00027e1c00027f40000280640002816000028228000283680002841c0002
849800028514000285f0000286dc0002878c000288300002891800028a30
00028b2c00028d8800028e7000028ebc00028f0800028f9c000290440002
90dc00029178000291e00002924400029318000293ec000295dc0002983c
000298cc00029950000299e000029a7000029ba000029cc400029d280002
9d9000029e2000029eb400029f4800029ff40002a0780002a10c0002a168
0002a1c40002a21c0002a2740002a3340002a3ec0002a4980002a5340002
a5f80002a6800002a7240002a7a80002a8400002a8c00002a9b80002aaa8
0002ac380002adc40002ae580002af100002afb00002b05c0002b2340002
b3500002b46c0002b5f40002b7280002b8740002b9c40002ba340002ba9c
0002bb400002bbf40002bcc40002bdf80002bf440002bfe80002c0900002
c0c00002c1600002c1f80002c2400002c2b40002c3d80002c5180002c594
0002c63c0002c68c0002c6f80002c7600002c8380002c91c0002c9e40002
cac00002cc140002ccc80002cd700002ce040002ce440002cea40002ceec
0002cf380002cf640002cfe80002d0440002d0ac0002d0f00002d1ac0002
d2480002d2c80002d3240002d3c00002d4980002d5180002d5980002d638
0002d7100002d7a40002d83c0002d92c0002da580002db300002dc000002
dcc80002de300002df100002e0140002e1200002e1f00002e2e40002e3dc
0002e5140002e6c40002e7b40002e8b80002e96c0002ea140002ead80002
ebd80002ec140002ec500002ec8c0002ecc40002ed100002ed4c0002ed90
0002edd40002ee280002ee7c0002eed40002ef100002ef6c0002eff00002
f0a80002f1600002f2b00002f3240002f4040002f5600002f6680002f6a8
0002f7e00002f91c0002f9580002fa140002fa4c0002fa840002fb3c0002
fbf80002fc400002fd080002fe240002febc0002ff540002ffc40002fff0
0003001c000300c4000300ec0003013000030174000301d40003021c0003
029c0003031c000304140003046400030490000304bc0003066c000307dc
000308ac0003098000030a9400030b4000030ba800030c2400030cd80003
0e1000030e6c00030ebc00030eec00030f800003111000031174000311c0
00031290000313640003143800031514000316fc000317f0000318f40003
19e000031af400031c6c00031c8400031c9c00031cb400031d1c00031db8
00031dfc00031e7400031ed800031f700003205800032270000324880003
26300003265c00032688000326bc000326f00003272c00032768000327a4
000327e00003281c0003285800032894000328d0000328fc000329e40003
2a3000032bb000032c5800032d7000032dd800032e8800032fac00033104
000332400003338c000334c400033560000336640003382c00033ab80003
3ccc00033e3000033fa4000340580003422c000343d8000344300003448c
00034530000345ec000346900003474c000347f8000348b8000349640003
4a2400034ae400034ba000034c5c00034d1800034dd400034e9400034f50
0003500c000350c800035188000351c4000352100003525c000352a80003
52e4000353a4000353f40003549c000354e000035608000357dc00035834
0003597800035ac000035afc00035b3800035b7400035bb000035c040003
5c5400035cc800035d9c00035e7800035e9000035ea800035f8400036044
0003610400036288000364000003651c000366dc000367e4000368e80003
699400036a4400036b3c00036c3c00036d6800036db800036e2800036f00
00036fc8000370e0000371b0000372300003730000037428000374d00003
757400037648000377180003775c0003791c000379b800037b4000037c14
00037d6400037e7800037f4c000380600003818400038260000384140003
857800038648000386980003870c000387b0000387f4000389b400038a50
00038b7400038c4400038d9c00038e3c00038e8c00038f08000390b80003
9210000393a40003953800039690000398400003994000039a1800039b7c
00039bd800039c8800039ce400039d8c00039dec00039e9800039ef40003
9fa00003a1100003a1780003a29c0003a4b00003a5200003a6500003a698
0003a7840003a91c0003a9a40003aa900003abe80003ac3c0003ae280003
af940003afd80003b0140003b0580003b12c0003b1e40003b2c80003b3cc
0003b4ec0003b5bc0003b6cc0003b7fc0003b9040003b9b40003baa40003
bbec0003bcf40003bdec0003bed00003bfbc0003c0980003c1b40003c268
0003c3700003c4580003c5c00003c6ac0003c7a00003c8b00003ca080003
cb140003cc240003cd0c0003ce480003cf680003d0480003d1380003d288
0003d3dc0003d4e40003d5c40003d6c80003d80c0003d9a40003da400003
da900003db800003dc040003dcf80003de100003df180003dfd40003e0bc
0003e1800003e2640003e37c0003e4d00003e5ac0003e6c40003e7f80003
e9200003e9fc0003eaec0003ec700003ed9c0003ee980003efac0003f0a4
0003f1840003f2b00003f3680003f44c0003f54c0003f6bc0003f7b80003
f8e40003f9e80003fb3c0003fc480003fd580003fe340003ff80000400b0
0004018800040278000403a8000404d0000405d4000406b4000407b40004
091800040a4c00040b5400040c7000040d8400040e5c00040f440004101c
00041120000411d8000412c8000413a0000414b00001000008cc006f0009
006b00070002001000100067000007e80b90000400010000003902b20001
000000000000005000000001000000000001000900500001000000000002
000700590001000000000003001f02160001000000000004000902350001
0000000000050008023e0001000000000006000902460001000000000007
0032024f0001000000000012000903f80001000000000100000904010001
0000000001010010040a0001000000000102000e041a0001000000000103
0014042800010000000001040012043c00010000000001050009044e0001
000000010007002f02810001000000020007003c02b00001000000030007
003002ec0001000000040007003a031c0001000000050007003603560001
0000000600070030038c0001000000070007003c03bc0003000104030002
000c01580003000104040002000600cc0003000104050002000e01760003
000104060002000c00e60003000104070002000c007c0003000104080002
000801920003000104090002000e006000030001040b0002001000f20003
0001040c0002000e006e00030001040d00020008019a00030001040e0002
000c01a20003000104100002001000a80003000104110002000a00880003
000104120002000600b80003000104130002001000980003000104140002
000c01020003000104150002000e010e0003000104160002000c00da0003
000104180002000c01c60003000104190002000e012a00030001041a0002
0012016400030001041b0002000e01d200030001041d0002000c01380003
0001041e00020008014400030001041f0002000c014c0003000104210002
000e01ae0003000104220002001201e000030001042a0002001801fe0003
000104390002000c01f200030001043e0002000a01bc0003000108040002
000600920003000108090002000e01840003000108160002000e011c0003
00010c010002000800d2000300010c0a0002000e00bea920313939302d32
303036204170706c6520436f6d707574657220496e632e20a92031393831
204c696e6f7479706520414720a920313939302d3931205479706520536f
6c7574696f6e7320496e632e48656c766574696361526567756c61720052
006500670075006c006100720043006f007500720061006e0074004e006f
0072006d0061006c30ec30ae30e530e930fc5e3889c44f53005200650067
0075006c006900650072005200650067006f006c006100720065c77cbc18
ccb40052006500670075006c006100726a196e969ad406390627062f064a
004e006f0072006d0061006c004e006f0072006d0061006c004e006f0072
006d00610061006c0069004e006f0072006d0061006c0052006500670075
006c006100720052006500670075006c00610072041e0431044b0447043d
044b0439004e006f0072006d0061006c0e1b0e010e150e34004e006f0072
006d0061006c004e006f0072006d0061006c0052006500670075006c0061
0072006e00690052006500670075006c006100720052006500670075006c
00610072039103c003bb03ac05e805d205d905dc004e006f0072006d00e1
006c0052006500670075006c0065007200420069006100730061004e006f
0072006d0061006c0052006500670075006c006100720417043204380447
04300439043d043804390928093f092f092e093f09240054006800f4006e
006700200074006801b01edd006e006748656c7665746963613b2031352e
30643165333b20323031392d30332d323148656c76657469636131352e30
6431653348656c76657469636148656c7665746963612069732061207265
67697374657265642074726164656d61726b206f66204c696e6f74797065
20414748656c7665746963612065737420756e65206d617271756520648e
706f738e65206465204c696e6f7479706520414748656c76657469636120
6973742065696e2065696e676574726167656e657320576172656e7a6569
6368656e20646572204c696e6f7479706520414748656c76657469636120
8f20756e206d61726368696f207265676973747261746f206469204c696e
6f7479706520414748656c7665746963612069732065656e206765726567
69737472656572642068616e64656c736d65726b2076616e204c696e6f74
79706520414748656c766574696361208a72206574742072656769737472
6572617420766172756d8a726b6520669a72204c696e6f74797065204147
48656c76657469636120657320756e61206d617263612072656769737472
616461206465204c696e6f7479706520414748656c766574696361206572
20657420726567697374726572657420766172656dbe726b652074696c68
bf72656e6465204c696e6f7479706520414748656c7665746963614c6967
617475726573436f6d6d6f6e204c69676174757265734e756d6265722053
706163696e6750726f706f7274696f6e616c204e756d626572734d6f6e6f
737061636564204e756d626572734e6f204368616e6765000000b8005d2b
01ba000501b9005f2b01bf01bb003e00340029001d0012000000652bbf01
bc004200340029001d0012000000652bbf01bd003a00340029001d001200
0000652b00bf01b7004d003d003700280012000000652bbf01b80060004f
00370028001b000000652bbf01b90047003d0029001d0012000000652bbf
01ba004200340029001d0012000000652b00ba01be000400642bb801b620
457d691844b800532bb800492bb8003f2bb800352bb8002b2b4118008001
a6009001a600a001a600030069018b0079018b0089018b0099018b000400
89018b0099018b00a9018b00b9018bb2040840ba0179001a014a400b041f
5414191f180a0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d00
09410a01a0019f0064001f01a50025017a00480028019ab3296c1f60410a
01a9007001a9008001a90003008001a9000101a9b21e321fbe012c002504
01001f0126001e0401b61fe7312d1fe531b80201b21fc227b80401b21fc1
1eb80201400f1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b804
01b61fa91d6c1f931eb8019ab21f921db80101b21f911db80101b21f751d
b80201b61f6d29961f6431b8019ab21f4c96b802abb21f391db80156400b
1f3638211f351de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802ab
b21f201eb8012540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa01
9b002a019bb2254a1fba019b0025017ab349293896b8017bb348283125b8
017a403648289629482725294c1f252946272729482756c80784075b0741
0732072b072807260721071b071408120810080e080c080a08080807b801
acb23f1f06bb01ab003f001f01abb308060805b801aeb23f1f04bb01ad00
3f001f01adb70804080208000814b8ffe0b40000010014b801abb4100000
0100b801abb606100000010006b801adb300000100b801ad401f04000001
000410000001001002000001000200000001000002010802004a00b0018d
b806008516763f183f123e113946443e113946443e113946443e11394644
3e113946443e11394660443e11394660443e11394660442b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa
1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b6542
2b2b4b5279b376706a66456523456023456560234560b08b766818b08062
2020b16a704565234520b003266062636820b003266165b070236544b06a
234420b176664565234520b003266062636820b003266165b066236544b0
762344b10066455458b166406544b27640764523614459b36242725d4565
23456023456560234560b089766818b080622020b172424565234520b003
266062636820b003266165b042236544b072234420b1625d4565234520b0
03266062636820b003266165b05d236544b0622344b1005d455458b15d40
6544b262406245236144592b2b2b2b456953427374b8019a2045694b20b0
2853b049515a58b020615944b801a62045694475000000>
[16257 16325 16277 16241 16045 16361 16349 16373 16341 15953 16333 16361 15785
16177 16241 16369 7669 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2856 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/zero 19 def
end
Helvetica /Encoding get
dup 48 /zero put
pop
end
%ADOEndSubsetFont
/IVXETS+Helvetica /Helvetica findfont ct_VMDictPut/IVXETS+Helvetica*1 [48{/.notdef}rp /zero 207{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 510.455 mo(0)shgrestore
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 3076 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/one 20 def
end
IVXETS+Helvetica /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [48{/.notdef}rp /zero /one 206{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 489.732 mo(100)[-4.12161 -4.12164 0 ]yshgrestore
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 3152 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/two 21 def
end
IVXETS+Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [48{/.notdef}rp /zero /one /two 205{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 464.568 mo(200)[-4.12161 -4.12164 0 ]yshgrestore
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 3432 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/three 22 def
end
IVXETS+Helvetica /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 439.7 mo(300)[-4.12161 -4.12164 0 ]yshgrestore
27.258 510.783 mo
27.258 413.249 li
@
30.581 508.282 mo
27.258 508.282 li
@
28.919 503.281 mo
27.258 503.281 li
@
28.919 498.279 mo
27.258 498.279 li
@
28.919 493.277 mo
27.258 493.277 li
@
28.919 488.275 mo
27.258 488.275 li
@
30.581 483.274 mo
27.258 483.274 li
@
28.919 478.272 mo
27.258 478.272 li
@
28.919 473.27 mo
27.258 473.27 li
@
28.919 468.268 mo
27.258 468.268 li
@
28.919 463.267 mo
27.258 463.267 li
@
30.581 458.265 mo
27.258 458.265 li
@
28.919 453.263 mo
27.258 453.263 li
@
28.919 448.261 mo
27.258 448.261 li
@
28.919 443.259 mo
27.258 443.259 li
@
28.919 438.258 mo
27.258 438.258 li
@
30.581 433.256 mo
27.258 433.256 li
@
30.581 508.282 mo
27.258 508.282 li
@
30.581 433.256 mo
27.258 433.256 li
@
28.919 428.254 mo
27.258 428.254 li
@
28.919 423.252 mo
27.258 423.252 li
@
28.919 418.251 mo
27.258 418.251 li
@
138.015 510.783 mo
27.258 510.783 li
@
138.015 507.857 mo
138.015 510.783 li
@
133.585 509.32 mo
133.585 510.783 li
@
129.154 509.32 mo
129.154 510.783 li
@
124.724 509.32 mo
124.724 510.783 li
@
120.294 509.32 mo
120.294 510.783 li
@
115.864 507.857 mo
115.864 510.783 li
@
111.433 509.32 mo
111.433 510.783 li
@
107.003 509.32 mo
107.003 510.783 li
@
102.573 509.32 mo
102.573 510.783 li
@
98.142 509.32 mo
98.142 510.783 li
@
93.712 507.857 mo
93.712 510.783 li
@
89.282 509.32 mo
89.282 510.783 li
@
84.852 509.32 mo
84.852 510.783 li
@
80.421 509.32 mo
80.421 510.783 li
@
75.991 509.32 mo
75.991 510.783 li
@
71.561 507.857 mo
71.561 510.783 li
@
67.131 509.32 mo
67.131 510.783 li
@
62.7 509.32 mo
62.7 510.783 li
@
58.27 509.32 mo
58.27 510.783 li
@
53.84 509.32 mo
53.84 510.783 li
@
49.409 507.857 mo
49.409 510.783 li
@
44.979 509.32 mo
44.979 510.783 li
@
40.549 509.32 mo
40.549 510.783 li
@
36.119 509.32 mo
36.119 510.783 li
@
31.688 509.32 mo
31.688 510.783 li
@
27.258 507.857 mo
27.258 510.783 li
@
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf141.03 516.968 mo(0)shgrestore
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf118.826 515.784 mo(1)shgsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf96.919 516.968 mo(2)shgrestore
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf74.715 516.968 mo(3)shgrestore
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 3776 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/four 23 def
end
IVXETS+Helvetica /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf52.512 516.968 mo(4)shgrestore
gsave
151.045 527.995 mo
151.045 413.249 li
20.743 413.249 li
20.743 527.995 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 3932 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/five 24 def
end
IVXETS+Helvetica /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf30.308 516.968 mo(5)shgrestore
138.015 413.249 mo
27.258 413.249 li
@
138.015 416.175 mo
138.015 413.249 li
@
133.585 414.712 mo
133.585 413.249 li
@
129.154 414.712 mo
129.154 413.249 li
@
124.724 414.712 mo
124.724 413.249 li
@
120.294 414.712 mo
120.294 413.249 li
@
115.864 416.175 mo
115.864 413.249 li
@
111.433 414.712 mo
111.433 413.249 li
@
107.003 414.712 mo
107.003 413.249 li
@
102.573 414.712 mo
102.573 413.249 li
@
98.142 414.712 mo
98.142 413.249 li
@
93.712 416.175 mo
93.712 413.249 li
@
89.282 414.712 mo
89.282 413.249 li
@
84.852 414.712 mo
84.852 413.249 li
@
80.421 414.712 mo
80.421 413.249 li
@
75.991 414.712 mo
75.991 413.249 li
@
71.561 416.175 mo
71.561 413.249 li
@
67.131 414.712 mo
67.131 413.249 li
@
62.7 414.712 mo
62.7 413.249 li
@
58.27 414.712 mo
58.27 413.249 li
@
53.84 414.712 mo
53.84 413.249 li
@
49.409 416.175 mo
49.409 413.249 li
@
44.979 414.712 mo
44.979 413.249 li
@
40.549 414.712 mo
40.549 413.249 li
@
36.119 414.712 mo
36.119 413.249 li
@
31.688 414.712 mo
31.688 413.249 li
@
27.258 416.175 mo
27.258 413.249 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if

1 0 3 <> IVXETS+Helvetica AddT42Char 
1 1940 11 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>IVXETS+Helvetica AddT42Char 
1 2084 12 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>IVXETS+Helvetica AddT42Char 
1 7004 38 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>IVXETS+Helvetica AddT42Char 
1 12480 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/C 38 def
/a 68 def
end
IVXETS+Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 67 /C put
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five 13{/.notdef}rp /C 29{/.notdef}rp /a 158{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf44.519 476.41 mo(1)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf38.302 503.054 mo(\(a\) C)[-4.04819 -6.75928 -4.04822 -3.37964 0 ]ysh53.858 423.712 mo
49.91 423.712 49.91 417.791 53.858 417.791 cv
57.805 417.791 57.805 423.712 53.858 423.712 cv
cp
64.492 435.716 mo
60.545 435.716 60.545 429.795 64.492 429.795 cv
68.439 429.795 68.439 435.716 64.492 435.716 cv
cp
79.209 451.972 mo
75.261 451.972 75.261 446.051 79.209 446.051 cv
83.156 446.051 83.156 451.972 79.209 451.972 cv
cp
95.192 468.978 mo
91.245 468.978 91.245 463.057 95.192 463.057 cv
99.139 463.057 99.139 468.978 95.192 468.978 cv
cp
107.952 482.233 mo
104.005 482.233 104.005 476.312 107.952 476.312 cv
111.9 476.312 111.9 482.233 107.952 482.233 cv
cp
117.773 491.986 mo
113.826 491.986 113.826 486.065 117.773 486.065 cv
121.72 486.065 121.72 491.986 117.773 491.986 cv
cp
125.372 499.239 mo
121.425 499.239 121.425 493.318 125.372 493.318 cv
129.319 493.318 129.319 499.239 125.372 499.239 cv
cp
130.803 504.49 mo
126.856 504.49 126.856 498.57 130.803 498.57 cv
134.75 498.57 134.75 504.49 130.803 504.49 cv
cp
134.296 507.742 mo
130.349 507.742 130.349 501.821 134.296 501.821 cv
138.243 501.821 138.243 507.742 134.296 507.742 cv
cp
0 .9617 .904814 0 cmyk
@
54.828 421.738 mo
56.802 421.738 li
56.802 419.765 li
54.828 419.765 li
54.828 417.791 li
52.855 417.791 li
52.855 419.765 li
50.881 419.765 li
50.881 421.738 li
52.855 421.738 li
52.855 423.712 li
54.828 423.712 li
cp
65.434 433.743 mo
67.408 433.743 li
67.408 431.769 li
65.434 431.769 li
65.434 429.795 li
63.461 429.795 li
63.461 431.769 li
61.487 431.769 li
61.487 433.743 li
63.461 433.743 li
63.461 435.716 li
65.434 435.716 li
cp
80.201 449.998 mo
82.174 449.998 li
82.174 448.025 li
80.201 448.025 li
80.201 446.051 li
78.227 446.051 li
78.227 448.025 li
76.253 448.025 li
76.253 449.998 li
78.227 449.998 li
78.227 451.972 li
80.201 451.972 li
cp
96.175 467.004 mo
98.149 467.004 li
98.149 465.031 li
96.175 465.031 li
96.175 463.057 li
94.202 463.057 li
94.202 465.031 li
92.228 465.031 li
92.228 467.004 li
94.202 467.004 li
94.202 468.978 li
96.175 468.978 li
cp
108.93 480.259 mo
110.904 480.259 li
110.904 478.285 li
108.93 478.285 li
108.93 476.312 li
106.957 476.312 li
106.957 478.285 li
104.983 478.285 li
104.983 480.259 li
106.957 480.259 li
106.957 482.233 li
108.93 482.233 li
cp
118.68 490.012 mo
120.653 490.012 li
120.653 488.039 li
118.68 488.039 li
118.68 486.065 li
116.706 486.065 li
116.706 488.039 li
114.732 488.039 li
114.732 490.012 li
116.706 490.012 li
116.706 491.986 li
118.68 491.986 li
cp
126.36 497.265 mo
128.334 497.265 li
128.334 495.291 li
126.36 495.291 li
126.36 493.318 li
124.387 493.318 li
124.387 495.291 li
122.413 495.291 li
122.413 497.265 li
124.387 497.265 li
124.387 499.239 li
126.36 499.239 li
cp
131.792 502.517 mo
133.766 502.517 li
133.766 500.543 li
131.792 500.543 li
131.792 498.57 li
129.818 498.57 li
129.818 500.543 li
127.845 500.543 li
127.845 502.517 li
129.818 502.517 li
129.818 504.49 li
131.792 504.49 li
cp
135.259 505.768 mo
137.233 505.768 li
137.233 503.794 li
135.259 503.794 li
135.259 501.821 li
133.285 501.821 li
133.285 503.794 li
131.312 503.794 li
131.312 505.768 li
133.285 505.768 li
133.285 507.742 li
135.259 507.742 li
cp
.905547 .71957 0 0 cmyk
@
89.527 420.751 mo
91.572 420.087 li
91.572 417.936 li
92.837 419.676 li
94.882 419.011 li
93.618 420.751 li
94.882 422.492 li
92.837 421.827 li
91.572 423.567 li
91.572 421.416 li
cp
94.733 432.756 mo
96.778 432.091 li
96.778 429.94 li
98.043 431.68 li
100.088 431.016 li
98.824 432.756 li
100.088 434.496 li
98.043 433.831 li
96.778 435.571 li
96.778 433.42 li
cp
102.139 449.011 mo
104.185 448.347 li
104.185 446.196 li
105.449 447.936 li
107.495 447.271 li
106.231 449.011 li
107.495 450.752 li
105.449 450.087 li
104.185 451.827 li
104.185 449.676 li
cp
110.778 466.017 mo
112.823 465.353 li
112.823 463.202 li
114.088 464.942 li
116.133 464.277 li
114.869 466.017 li
116.133 467.758 li
114.088 467.093 li
112.823 468.833 li
112.823 466.682 li
cp
117.932 479.272 mo
119.978 478.607 li
119.978 476.457 li
121.242 478.197 li
123.288 477.532 li
122.023 479.272 li
123.288 481.012 li
121.242 480.348 li
119.978 482.088 li
119.978 479.937 li
cp
123.549 489.026 mo
125.595 488.361 li
125.595 486.21 li
126.859 487.95 li
128.905 487.285 li
127.64 489.026 li
128.905 490.766 li
126.859 490.101 li
125.595 491.841 li
125.595 489.69 li
cp
127.856 496.278 mo
129.902 495.613 li
129.902 493.463 li
131.166 495.203 li
133.212 494.538 li
131.947 496.278 li
133.212 498.018 li
131.166 497.354 li
129.902 499.094 li
129.902 496.943 li
cp
131.075 501.53 mo
133.12 500.865 li
133.12 498.714 li
134.384 500.455 li
136.43 499.79 li
135.166 501.53 li
136.43 503.27 li
134.384 502.605 li
133.12 504.346 li
133.12 502.195 li
cp
133.054 504.781 mo
135.1 504.116 li
135.1 501.966 li
136.364 503.706 li
138.409 503.041 li
137.145 504.781 li
138.409 506.521 li
136.364 505.857 li
135.1 507.597 li
135.1 505.446 li
cp
.92929 .879301 .889677 .799283 cmyk
f
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
0 0 0 0 cmyk
ef
1.5 lw
138.015 386.059 mo
138.015 288.524 li
27.258 288.524 li
27.258 386.059 li
cp
.92929 .879301 .889677 .799283 cmyk
@
138.015 386.059 mo
138.015 288.524 li
27.258 288.524 li
27.258 386.059 li
cp
@
.75 lw
138.015 386.059 mo
138.015 288.524 li
@
134.692 383.558 mo
138.015 383.558 li
@
136.354 378.556 mo
138.015 378.556 li
@
136.354 373.554 mo
138.015 373.554 li
@
136.354 368.553 mo
138.015 368.553 li
@
136.354 363.551 mo
138.015 363.551 li
@
134.692 358.549 mo
138.015 358.549 li
@
136.354 353.547 mo
138.015 353.547 li
@
136.354 348.546 mo
138.015 348.546 li
@
136.354 343.544 mo
138.015 343.544 li
@
136.354 338.542 mo
138.015 338.542 li
@
134.692 333.54 mo
138.015 333.54 li
@
136.354 328.539 mo
138.015 328.539 li
@
136.354 323.537 mo
138.015 323.537 li
@
136.354 318.535 mo
138.015 318.535 li
@
136.354 313.533 mo
138.015 313.533 li
@
134.692 308.531 mo
138.015 308.531 li
@
134.692 383.558 mo
138.015 383.558 li
@
134.692 308.531 mo
138.015 308.531 li
@
136.354 303.53 mo
138.015 303.53 li
@
136.354 298.528 mo
138.015 298.528 li
@
136.354 293.526 mo
138.015 293.526 li
@
gsave
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 385.82 mo(0)shgrestore
gsave
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 364.8 mo(100)[-4.12161 -4.12164 0 ]yshgrestore
gsave
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 339.932 mo(200)[-4.12161 -4.12164 0 ]yshgrestore
gsave
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 314.768 mo(300)[-4.12161 -4.12161 0 ]yshgrestore
27.258 386.059 mo
27.258 288.524 li
@
30.581 383.558 mo
27.258 383.558 li
@
28.919 378.556 mo
27.258 378.556 li
@
28.919 373.554 mo
27.258 373.554 li
@
28.919 368.553 mo
27.258 368.553 li
@
28.919 363.551 mo
27.258 363.551 li
@
30.581 358.549 mo
27.258 358.549 li
@
28.919 353.547 mo
27.258 353.547 li
@
28.919 348.546 mo
27.258 348.546 li
@
28.919 343.544 mo
27.258 343.544 li
@
28.919 338.542 mo
27.258 338.542 li
@
30.581 333.54 mo
27.258 333.54 li
@
28.919 328.539 mo
27.258 328.539 li
@
28.919 323.537 mo
27.258 323.537 li
@
28.919 318.535 mo
27.258 318.535 li
@
28.919 313.533 mo
27.258 313.533 li
@
30.581 308.531 mo
27.258 308.531 li
@
30.581 383.558 mo
27.258 383.558 li
@
30.581 308.531 mo
27.258 308.531 li
@
28.919 303.53 mo
27.258 303.53 li
@
28.919 298.528 mo
27.258 298.528 li
@
28.919 293.526 mo
27.258 293.526 li
@
138.015 386.059 mo
27.258 386.059 li
@
138.015 383.133 mo
138.015 386.059 li
@
130.104 384.596 mo
130.104 386.059 li
@
122.193 384.596 mo
122.193 386.059 li
@
114.281 384.596 mo
114.281 386.059 li
@
106.37 384.596 mo
106.37 386.059 li
@
98.459 383.133 mo
98.459 386.059 li
@
90.548 384.596 mo
90.548 386.059 li
@
82.636 384.596 mo
82.636 386.059 li
@
74.725 384.596 mo
74.725 386.059 li
@
66.814 384.596 mo
66.814 386.059 li
@
58.903 383.133 mo
58.903 386.059 li
@
58.903 383.133 mo
58.903 386.059 li
@
50.992 384.596 mo
50.992 386.059 li
@
43.08 384.596 mo
43.08 386.059 li
@
35.169 384.596 mo
35.169 386.059 li
@
27.258 384.596 mo
27.258 386.059 li
@
gsave
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf141.03 392.333 mo(0)shgrestore
gsave
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf101.656 397.069 mo(10)[-4.78104 0 ]yshgrestore
gsave
151.045 403.271 mo
151.045 288.525 li
20.743 288.525 li
20.743 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf61.985 397.069 mo(20)[-4.78104 0 ]yshgrestore
138.015 288.524 mo
27.258 288.524 li
@
138.015 291.45 mo
138.015 288.524 li
@
130.104 289.987 mo
130.104 288.524 li
@
122.193 289.987 mo
122.193 288.524 li
@
114.281 289.987 mo
114.281 288.524 li
@
106.37 289.987 mo
106.37 288.524 li
@
98.459 291.45 mo
98.459 288.524 li
@
90.548 289.987 mo
90.548 288.524 li
@
82.636 289.987 mo
82.636 288.524 li
@
74.725 289.987 mo
74.725 288.524 li
@
66.814 289.987 mo
66.814 288.524 li
@
58.903 291.45 mo
58.903 288.524 li
@
58.903 291.45 mo
58.903 288.524 li
@
50.992 289.987 mo
50.992 288.524 li
@
43.08 289.987 mo
43.08 288.524 li
@
35.169 289.987 mo
35.169 288.524 li
@
27.258 289.987 mo
27.258 288.524 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 12884 69 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/b 69 def
end
IVXETS+Helvetica /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five 13{/.notdef}rp /C 29{/.notdef}rp /a /b 157{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf44.519 351.774 mo(2)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf38.302 378.418 mo(\(b\) C)[-4.04819 -6.75928 -4.04822 -3.37964 0 ]ysh50.861 298.988 mo
46.913 298.988 46.913 293.067 50.861 293.067 cv
54.808 293.067 54.808 298.988 50.861 298.988 cv
cp
64.836 310.992 mo
60.889 310.992 60.889 305.071 64.836 305.071 cv
68.783 305.071 68.783 310.992 64.836 310.992 cv
cp
81.38 327.248 mo
77.433 327.248 77.433 321.327 81.38 321.327 cv
85.327 321.327 85.327 327.248 81.38 327.248 cv
cp
98.276 344.254 mo
94.329 344.254 94.329 338.333 98.276 338.333 cv
102.223 338.333 102.223 344.254 98.276 344.254 cv
cp
110.966 357.508 mo
107.019 357.508 107.019 351.587 110.966 351.587 cv
114.913 351.587 114.913 357.508 110.966 357.508 cv
cp
120.195 367.262 mo
116.247 367.262 116.247 361.341 120.195 361.341 cv
124.142 361.341 124.142 367.262 120.195 367.262 cv
cp
127.036 374.514 mo
123.089 374.514 123.089 368.593 127.036 368.593 cv
130.983 368.593 130.983 374.514 127.036 374.514 cv
cp
131.833 379.766 mo
127.885 379.766 127.885 373.845 131.833 373.845 cv
135.78 373.845 135.78 379.766 131.833 379.766 cv
cp
134.868 383.017 mo
130.921 383.017 130.921 377.096 134.868 377.096 cv
138.816 377.096 138.816 383.017 134.868 383.017 cv
cp
0 .9617 .904814 0 cmyk
@
52.293 297.014 mo
54.267 297.014 li
54.267 295.04 li
52.293 295.04 li
52.293 293.067 li
50.32 293.067 li
50.32 295.04 li
48.346 295.04 li
48.346 297.014 li
50.32 297.014 li
50.32 298.988 li
52.293 298.988 li
cp
65.546 309.018 mo
67.52 309.018 li
67.52 307.044 li
65.546 307.044 li
65.546 305.071 li
63.573 305.071 li
63.573 307.044 li
61.599 307.044 li
61.599 309.018 li
63.573 309.018 li
63.573 310.992 li
65.546 310.992 li
cp
82.347 325.274 mo
84.321 325.274 li
84.321 323.3 li
82.347 323.3 li
82.347 321.327 li
80.374 321.327 li
80.374 323.3 li
78.4 323.3 li
78.4 325.274 li
80.374 325.274 li
80.374 327.248 li
82.347 327.248 li
cp
99.478 342.28 mo
101.451 342.28 li
101.451 340.306 li
99.478 340.306 li
99.478 338.333 li
97.504 338.333 li
97.504 340.306 li
95.53 340.306 li
95.53 342.28 li
97.504 342.28 li
97.504 344.254 li
99.478 344.254 li
cp
112.057 355.535 mo
114.03 355.535 li
114.03 353.561 li
112.057 353.561 li
112.057 351.587 li
110.083 351.587 li
110.083 353.561 li
108.109 353.561 li
108.109 355.535 li
110.083 355.535 li
110.083 357.508 li
112.057 357.508 li
cp
121.185 365.288 mo
123.159 365.288 li
123.159 363.314 li
121.185 363.314 li
121.185 361.341 li
119.212 361.341 li
119.212 363.314 li
117.238 363.314 li
117.238 365.288 li
119.212 365.288 li
119.212 367.262 li
121.185 367.262 li
cp
128.043 372.541 mo
130.017 372.541 li
130.017 370.567 li
128.043 370.567 li
128.043 368.593 li
126.07 368.593 li
126.07 370.567 li
124.096 370.567 li
124.096 372.541 li
126.07 372.541 li
126.07 374.514 li
128.043 374.514 li
cp
132.849 377.792 mo
134.823 377.792 li
134.823 375.819 li
132.849 375.819 li
132.849 373.845 li
130.876 373.845 li
130.876 375.819 li
128.902 375.819 li
128.902 377.792 li
130.876 377.792 li
130.876 379.766 li
132.849 379.766 li
cp
135.847 381.044 mo
137.82 381.044 li
137.82 379.07 li
135.847 379.07 li
135.847 377.096 li
133.873 377.096 li
133.873 379.07 li
131.899 379.07 li
131.899 381.044 li
133.873 381.044 li
133.873 383.017 li
135.847 383.017 li
cp
.905547 .71957 0 0 cmyk
@
87.106 296.027 mo
89.151 295.362 li
89.151 293.212 li
90.416 294.952 li
92.461 294.287 li
91.197 296.027 li
92.461 297.767 li
90.416 297.103 li
89.151 298.843 li
89.151 296.692 li
cp
93.842 308.031 mo
95.887 307.367 li
95.887 305.216 li
97.152 306.956 li
99.197 306.291 li
97.933 308.031 li
99.197 309.771 li
97.152 309.107 li
95.887 310.847 li
95.887 308.696 li
cp
102.635 324.287 mo
104.68 323.622 li
104.68 321.472 li
105.945 323.212 li
107.99 322.547 li
106.726 324.287 li
107.99 326.027 li
105.945 325.363 li
104.68 327.103 li
104.68 324.952 li
cp
111.982 341.293 mo
114.028 340.628 li
114.028 338.478 li
115.292 340.218 li
117.337 339.553 li
116.073 341.293 li
117.337 343.033 li
115.292 342.369 li
114.028 344.109 li
114.028 341.958 li
cp
119.149 354.548 mo
121.195 353.883 li
121.195 351.732 li
122.459 353.472 li
124.505 352.808 li
123.24 354.548 li
124.505 356.288 li
122.459 355.623 li
121.195 357.363 li
121.195 355.212 li
cp
124.499 364.301 mo
126.544 363.637 li
126.544 361.486 li
127.808 363.226 li
129.854 362.561 li
128.59 364.301 li
129.854 366.041 li
127.808 365.377 li
126.544 367.117 li
126.544 364.966 li
cp
128.562 371.554 mo
130.608 370.889 li
130.608 368.738 li
131.872 370.478 li
133.918 369.814 li
132.654 371.554 li
133.918 373.294 li
131.872 372.629 li
130.608 374.369 li
130.608 372.218 li
cp
131.434 376.806 mo
133.48 376.141 li
133.48 373.99 li
134.744 375.73 li
136.79 375.066 li
135.526 376.806 li
136.79 378.546 li
134.744 377.881 li
133.48 379.621 li
133.48 377.47 li
cp
133.253 380.057 mo
135.298 379.392 li
135.298 377.241 li
136.562 378.981 li
138.608 378.317 li
137.344 380.057 li
138.608 381.797 li
136.562 381.132 li
135.298 382.872 li
135.298 380.721 li
cp
.92929 .879301 .889677 .799283 cmyk
f
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
0 0 0 0 cmyk
ef
1.5 lw
138.015 261.335 mo
138.015 163.8 li
27.258 163.8 li
27.258 261.335 li
cp
.92929 .879301 .889677 .799283 cmyk
@
138.015 261.335 mo
138.015 163.8 li
27.258 163.8 li
27.258 261.335 li
cp
@
.75 lw
138.015 261.335 mo
138.015 163.8 li
@
134.692 258.834 mo
138.015 258.834 li
@
136.354 253.832 mo
138.015 253.832 li
@
136.354 248.83 mo
138.015 248.83 li
@
136.354 243.828 mo
138.015 243.828 li
@
136.354 238.827 mo
138.015 238.827 li
@
134.692 233.825 mo
138.015 233.825 li
@
136.354 228.823 mo
138.015 228.823 li
@
136.354 223.821 mo
138.015 223.821 li
@
136.354 218.819 mo
138.015 218.819 li
@
136.354 213.818 mo
138.015 213.818 li
@
134.692 208.816 mo
138.015 208.816 li
@
136.354 203.814 mo
138.015 203.814 li
@
136.354 198.812 mo
138.015 198.812 li
@
136.354 193.811 mo
138.015 193.811 li
@
136.354 188.809 mo
138.015 188.809 li
@
134.692 183.807 mo
138.015 183.807 li
@
134.692 258.834 mo
138.015 258.834 li
@
134.692 183.807 mo
138.015 183.807 li
@
136.354 178.805 mo
138.015 178.805 li
@
136.354 173.804 mo
138.015 173.804 li
@
136.354 168.802 mo
138.015 168.802 li
@
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 261.184 mo(0)shgrestore
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 240.165 mo(100)[-4.12164 -4.12158 0 ]yshgrestore
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 215.297 mo(200)[-4.12164 -4.12158 0 ]yshgrestore
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 190.133 mo(300)[-4.12164 -4.12158 0 ]yshgrestore
27.258 261.335 mo
27.258 163.8 li
@
30.581 258.834 mo
27.258 258.834 li
@
28.919 253.832 mo
27.258 253.832 li
@
28.919 248.83 mo
27.258 248.83 li
@
28.919 243.828 mo
27.258 243.828 li
@
28.919 238.827 mo
27.258 238.827 li
@
30.581 233.825 mo
27.258 233.825 li
@
28.919 228.823 mo
27.258 228.823 li
@
28.919 223.821 mo
27.258 223.821 li
@
28.919 218.819 mo
27.258 218.819 li
@
28.919 213.818 mo
27.258 213.818 li
@
30.581 208.816 mo
27.258 208.816 li
@
28.919 203.814 mo
27.258 203.814 li
@
28.919 198.812 mo
27.258 198.812 li
@
28.919 193.811 mo
27.258 193.811 li
@
28.919 188.809 mo
27.258 188.809 li
@
30.581 183.807 mo
27.258 183.807 li
@
30.581 258.834 mo
27.258 258.834 li
@
30.581 183.807 mo
27.258 183.807 li
@
28.919 178.805 mo
27.258 178.805 li
@
28.919 173.804 mo
27.258 173.804 li
@
28.919 168.802 mo
27.258 168.802 li
@
138.015 261.335 mo
27.258 261.335 li
@
138.015 258.408 mo
138.015 261.335 li
@
128.785 259.871 mo
128.785 261.335 li
@
119.555 259.871 mo
119.555 261.335 li
@
110.326 259.871 mo
110.326 261.335 li
@
101.096 258.408 mo
101.096 261.335 li
@
91.866 259.871 mo
91.866 261.335 li
@
82.636 259.871 mo
82.636 261.335 li
@
73.407 259.871 mo
73.407 261.335 li
@
64.177 258.408 mo
64.177 261.335 li
@
54.947 259.871 mo
54.947 261.335 li
@
45.718 259.871 mo
45.718 261.335 li
@
36.488 259.871 mo
36.488 261.335 li
@
27.258 258.408 mo
27.258 261.335 li
@
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf141.03 267.697 mo(0)shgrestore
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf104.32 267.697 mo(2)shgrestore
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf67.314 267.697 mo(4)shgrestore
gsave
151.045 278.546 mo
151.045 163.8 li
20.743 163.8 li
20.743 278.546 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 4228 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/six 25 def
end
IVXETS+Helvetica /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 12{/.notdef}rp /C 29{/.notdef}rp /a /b 157{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf30.308 267.697 mo(6)shgrestore
138.015 163.8 mo
27.258 163.8 li
@
138.015 166.726 mo
138.015 163.8 li
@
128.785 165.263 mo
128.785 163.8 li
@
119.555 165.263 mo
119.555 163.8 li
@
110.326 165.263 mo
110.326 163.8 li
@
101.096 166.726 mo
101.096 163.8 li
@
91.866 165.263 mo
91.866 163.8 li
@
82.636 165.263 mo
82.636 163.8 li
@
73.407 165.263 mo
73.407 163.8 li
@
64.177 166.726 mo
64.177 163.8 li
@
54.947 165.263 mo
54.947 163.8 li
@
45.718 165.263 mo
45.718 163.8 li
@
36.488 165.263 mo
36.488 163.8 li
@
27.258 166.726 mo
27.258 163.8 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 13096 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/c 70 def
end
IVXETS+Helvetica /Encoding get
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 12{/.notdef}rp /C 29{/.notdef}rp /a /b /c 156{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf44.519 227.731 mo(3)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf38.302 253.783 mo(\(c\) C)[-4.04822 -6.07849 -4.04816 -3.37964 0 ]ysh71.066 171.303 mo
64.216 171.303 li
64.216 171.303 mo
64.216 171.303 li
cp
0 .9617 .904814 0 cmyk
@
76.987 171.303 mo
83.836 171.303 li
83.836 171.303 mo
83.836 171.303 li
cp
@
66.453 183.307 mo
61.802 183.307 li
61.802 183.307 mo
61.802 183.307 li
cp
@
72.374 183.307 mo
77.024 183.307 li
77.024 183.307 mo
77.024 183.307 li
cp
@
85.676 199.563 mo
84.788 199.563 li
84.788 199.563 mo
84.788 199.563 li
cp
@
91.597 199.563 mo
92.485 199.563 li
92.485 199.563 mo
92.485 199.563 li
cp
@
74.026 174.263 mo
70.079 174.263 70.079 168.342 74.026 168.342 cv
77.973 168.342 77.973 174.263 74.026 174.263 cv
cp
69.413 186.267 mo
65.466 186.267 65.466 180.346 69.413 180.346 cv
73.36 180.346 73.36 186.267 69.413 186.267 cv
cp
88.636 202.523 mo
84.689 202.523 84.689 196.602 88.636 196.602 cv
92.584 196.602 92.584 202.523 88.636 202.523 cv
cp
98.606 219.529 mo
94.659 219.529 94.659 213.608 98.606 213.608 cv
102.553 213.608 102.553 219.529 98.606 219.529 cv
cp
113.617 232.784 mo
109.669 232.784 109.669 226.863 113.617 226.863 cv
117.564 226.863 117.564 232.784 113.617 232.784 cv
cp
118.006 242.537 mo
114.058 242.537 114.058 236.616 118.006 236.616 cv
121.953 236.616 121.953 242.537 118.006 242.537 cv
cp
127.227 249.79 mo
123.28 249.79 123.28 243.869 127.227 243.869 cv
131.175 243.869 131.175 249.79 127.227 249.79 cv
cp
131.631 255.042 mo
127.684 255.042 127.684 249.121 131.631 249.121 cv
135.579 249.121 135.579 255.042 131.631 255.042 cv
cp
134.544 258.293 mo
130.596 258.293 130.596 252.372 134.544 252.372 cv
138.491 252.372 138.491 258.293 134.544 258.293 cv
cp
@
78.397 171.303 mo
51.937 171.303 li
51.937 171.303 mo
51.937 171.303 li
cp
.905547 .71957 0 0 cmyk
@
84.318 171.303 mo
110.779 171.303 li
110.779 171.303 mo
110.779 171.303 li
cp
@
53.895 183.307 mo
34.585 183.307 li
34.585 183.307 mo
34.585 183.307 li
cp
@
59.816 183.307 mo
79.126 183.307 li
79.126 183.307 mo
79.126 183.307 li
cp
@
75.022 199.563 mo
67.212 199.563 li
67.212 199.563 mo
67.212 199.563 li
cp
@
80.943 199.563 mo
88.754 199.563 li
88.754 199.563 mo
88.754 199.563 li
cp
@
92.418 216.569 mo
89.328 216.569 li
89.328 216.569 mo
89.328 216.569 li
cp
@
98.339 216.569 mo
101.428 216.569 li
101.428 216.569 mo
101.428 216.569 li
cp
@
114.031 229.823 mo
113.566 229.823 li
113.566 229.823 mo
113.566 229.823 li
cp
@
119.952 229.823 mo
120.417 229.823 li
120.417 229.823 mo
120.417 229.823 li
cp
@
82.345 172.289 mo
84.318 172.289 li
84.318 170.316 li
82.345 170.316 li
82.345 168.342 li
80.371 168.342 li
80.371 170.316 li
78.397 170.316 li
78.397 172.289 li
80.371 172.289 li
80.371 174.263 li
82.345 174.263 li
cp
57.842 184.294 mo
59.816 184.294 li
59.816 182.32 li
57.842 182.32 li
57.842 180.346 li
55.869 180.346 li
55.869 182.32 li
53.895 182.32 li
53.895 184.294 li
55.869 184.294 li
55.869 186.267 li
57.842 186.267 li
cp
78.97 200.549 mo
80.943 200.549 li
80.943 198.576 li
78.97 198.576 li
78.97 196.602 li
76.996 196.602 li
76.996 198.576 li
75.022 198.576 li
75.022 200.549 li
76.996 200.549 li
76.996 202.523 li
78.97 202.523 li
cp
96.365 217.555 mo
98.339 217.555 li
98.339 215.582 li
96.365 215.582 li
96.365 213.608 li
94.391 213.608 li
94.391 215.582 li
92.418 215.582 li
92.418 217.555 li
94.391 217.555 li
94.391 219.529 li
96.365 219.529 li
cp
117.978 230.81 mo
119.952 230.81 li
119.952 228.837 li
117.978 228.837 li
117.978 226.863 li
116.005 226.863 li
116.005 228.837 li
114.031 228.837 li
114.031 230.81 li
116.005 230.81 li
116.005 232.784 li
117.978 232.784 li
cp
119.434 240.564 mo
121.408 240.564 li
121.408 238.59 li
119.434 238.59 li
119.434 236.616 li
117.461 236.616 li
117.461 238.59 li
115.487 238.59 li
115.487 240.564 li
117.461 240.564 li
117.461 242.537 li
119.434 242.537 li
cp
127.92 247.816 mo
129.893 247.816 li
129.893 245.843 li
127.92 245.843 li
127.92 243.869 li
125.946 243.869 li
125.946 245.843 li
123.972 245.843 li
123.972 247.816 li
125.946 247.816 li
125.946 249.79 li
127.92 249.79 li
cp
132.361 253.068 mo
134.335 253.068 li
134.335 251.094 li
132.361 251.094 li
132.361 249.121 li
130.388 249.121 li
130.388 251.094 li
128.414 251.094 li
128.414 253.068 li
130.388 253.068 li
130.388 255.042 li
132.361 255.042 li
cp
135.273 256.319 mo
137.247 256.319 li
137.247 254.346 li
135.273 254.346 li
135.273 252.372 li
133.299 252.372 li
133.299 254.346 li
131.326 254.346 li
131.326 256.319 li
133.299 256.319 li
133.299 258.293 li
135.273 258.293 li
cp
@
100.268 171.303 mo
97.653 171.303 li
97.653 171.303 mo
97.653 171.303 li
cp
.92929 .879301 .889677 .799283 cmyk
@
103.229 171.303 mo
105.844 171.303 li
105.844 171.303 mo
105.844 171.303 li
cp
@
100.106 183.307 mo
98.275 183.307 li
98.275 183.307 mo
98.275 183.307 li
cp
@
103.067 183.307 mo
104.899 183.307 li
104.899 183.307 mo
104.899 183.307 li
cp
@
106.863 199.563 mo
106.613 199.563 li
106.613 199.563 mo
106.613 199.563 li
cp
@
109.824 199.563 mo
110.074 199.563 li
110.074 199.563 mo
110.074 199.563 li
cp
@
98.788 171.303 mo
100.834 170.638 li
100.834 168.487 li
102.098 170.227 li
104.143 169.563 li
102.879 171.303 li
104.143 173.043 li
102.098 172.378 li
100.834 174.118 li
100.834 171.967 li
cp
98.626 183.307 mo
100.672 182.642 li
100.672 180.491 li
101.936 182.231 li
103.982 181.567 li
102.717 183.307 li
103.982 185.047 li
101.936 184.382 li
100.672 186.122 li
100.672 183.972 li
cp
105.383 199.563 mo
107.429 198.898 li
107.429 196.747 li
108.693 198.487 li
110.739 197.823 li
109.474 199.563 li
110.739 201.303 li
108.693 200.638 li
107.429 202.378 li
107.429 200.227 li
cp
113.176 216.569 mo
115.222 215.904 li
115.222 213.753 li
116.486 215.493 li
118.532 214.829 li
117.267 216.569 li
118.532 218.309 li
116.486 217.644 li
115.222 219.384 li
115.222 217.233 li
cp
121.176 229.823 mo
123.221 229.159 li
123.221 227.008 li
124.486 228.748 li
126.531 228.083 li
125.267 229.823 li
126.531 231.563 li
124.486 230.899 li
123.221 232.639 li
123.221 230.488 li
cp
124.745 239.577 mo
126.791 238.912 li
126.791 236.761 li
128.055 238.501 li
130.101 237.837 li
128.836 239.577 li
130.101 241.317 li
128.055 240.652 li
126.791 242.392 li
126.791 240.241 li
cp
128.852 246.829 mo
130.897 246.165 li
130.897 244.014 li
132.162 245.754 li
134.207 245.089 li
132.943 246.829 li
134.207 248.569 li
132.162 247.905 li
130.897 249.645 li
130.897 247.494 li
cp
131.57 252.081 mo
133.616 251.417 li
133.616 249.266 li
134.88 251.006 li
136.926 250.341 li
135.661 252.081 li
136.926 253.821 li
134.88 253.157 li
133.616 254.897 li
133.616 252.746 li
cp
133.207 255.332 mo
135.253 254.668 li
135.253 252.517 li
136.517 254.257 li
138.563 253.592 li
137.299 255.332 li
138.563 257.072 li
136.517 256.408 li
135.253 258.148 li
135.253 255.997 li
cp
f
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
0 0 0 0 cmyk
ef
1.5 lw
138.015 136.61 mo
138.015 39.075 li
27.258 39.075 li
27.258 136.61 li
cp
.92929 .879301 .889677 .799283 cmyk
@
138.015 136.61 mo
138.015 39.075 li
27.258 39.075 li
27.258 136.61 li
cp
@
.75 lw
138.015 136.61 mo
138.015 39.076 li
@
134.692 134.109 mo
138.015 134.109 li
@
136.354 129.107 mo
138.015 129.107 li
@
136.354 124.106 mo
138.015 124.106 li
@
136.354 119.104 mo
138.015 119.104 li
@
136.354 114.102 mo
138.015 114.102 li
@
134.692 109.1 mo
138.015 109.1 li
@
136.354 104.099 mo
138.015 104.099 li
@
136.354 99.097 mo
138.015 99.097 li
@
136.354 94.095 mo
138.015 94.095 li
@
136.354 89.093 mo
138.015 89.093 li
@
134.692 84.092 mo
138.015 84.092 li
@
136.354 79.09 mo
138.015 79.09 li
@
136.354 74.088 mo
138.015 74.088 li
@
136.354 69.086 mo
138.015 69.086 li
@
136.354 64.084 mo
138.015 64.084 li
@
134.692 59.083 mo
138.015 59.083 li
@
134.692 134.109 mo
138.015 134.109 li
@
134.692 59.083 mo
138.015 59.083 li
@
136.354 54.081 mo
138.015 54.081 li
@
136.354 49.079 mo
138.015 49.079 li
@
136.354 44.077 mo
138.015 44.077 li
@
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 136.252 mo(0)shgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 115.529 mo(100)[-4.12164 -4.12158 0 ]yshgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 90.365 mo(200)[-4.12164 -4.12158 0 ]yshgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf147.247 65.497 mo(300)[-4.12164 -4.12158 0 ]yshgrestore
27.258 136.61 mo
27.258 39.076 li
@
30.581 134.109 mo
27.258 134.109 li
@
28.919 129.107 mo
27.258 129.107 li
@
28.919 124.106 mo
27.258 124.106 li
@
28.919 119.104 mo
27.258 119.104 li
@
28.919 114.102 mo
27.258 114.102 li
@
30.581 109.1 mo
27.258 109.1 li
@
28.919 104.099 mo
27.258 104.099 li
@
28.919 99.097 mo
27.258 99.097 li
@
28.919 94.095 mo
27.258 94.095 li
@
28.919 89.093 mo
27.258 89.093 li
@
30.581 84.092 mo
27.258 84.092 li
@
28.919 79.09 mo
27.258 79.09 li
@
28.919 74.088 mo
27.258 74.088 li
@
28.919 69.086 mo
27.258 69.086 li
@
28.919 64.084 mo
27.258 64.084 li
@
30.581 59.083 mo
27.258 59.083 li
@
30.581 134.109 mo
27.258 134.109 li
@
30.581 59.083 mo
27.258 59.083 li
@
28.919 54.081 mo
27.258 54.081 li
@
28.919 49.079 mo
27.258 49.079 li
@
28.919 44.077 mo
27.258 44.077 li
@
138.015 136.61 mo
27.258 136.61 li
@
138.015 133.684 mo
138.015 136.61 li
@
133.585 135.147 mo
133.585 136.61 li
@
129.154 135.147 mo
129.154 136.61 li
@
124.724 135.147 mo
124.724 136.61 li
@
120.294 135.147 mo
120.294 136.61 li
@
115.864 133.684 mo
115.864 136.61 li
@
111.433 135.147 mo
111.433 136.61 li
@
107.003 135.147 mo
107.003 136.61 li
@
102.573 135.147 mo
102.573 136.61 li
@
98.142 135.147 mo
98.142 136.61 li
@
93.712 133.684 mo
93.712 136.61 li
@
89.282 135.147 mo
89.282 136.61 li
@
84.852 135.147 mo
84.852 136.61 li
@
80.421 135.147 mo
80.421 136.61 li
@
75.991 135.147 mo
75.991 136.61 li
@
71.561 133.684 mo
71.561 136.61 li
@
67.131 135.147 mo
67.131 136.61 li
@
62.7 135.147 mo
62.7 136.61 li
@
58.27 135.147 mo
58.27 136.61 li
@
53.84 135.147 mo
53.84 136.61 li
@
49.409 133.684 mo
49.409 136.61 li
@
44.979 135.147 mo
44.979 136.61 li
@
40.549 135.147 mo
40.549 136.61 li
@
36.119 135.147 mo
36.119 136.61 li
@
31.688 135.147 mo
31.688 136.61 li
@
27.258 133.684 mo
27.258 136.61 li
@
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 2660 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/hyphen 16 def
end
IVXETS+Helvetica /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six 12{/.notdef}rp /C 29{/.notdef}rp /a /b /c 156{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf141.03 150.759 mo(-20)[-2.8634 -4.78107 0 ]yshgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf118.826 150.759 mo(-10)[-2.8634 -4.78107 0 ]yshgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf96.919 143.061 mo(0)shgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf74.715 147.798 mo(10)[-4.78107 0 ]yshgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf52.512 147.798 mo(20)[-4.78107 0 ]yshgrestore
gsave
151.045 153.822 mo
151.045 39.076 li
20.743 39.076 li
20.743 153.822 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf30.308 147.798 mo(30)[-4.78107 0 ]yshgrestore
138.015 39.076 mo
27.258 39.076 li
@
138.015 42.002 mo
138.015 39.076 li
@
133.585 40.539 mo
133.585 39.076 li
@
129.154 40.539 mo
129.154 39.076 li
@
124.724 40.539 mo
124.724 39.076 li
@
120.294 40.539 mo
120.294 39.076 li
@
115.864 42.002 mo
115.864 39.076 li
@
111.433 40.539 mo
111.433 39.076 li
@
107.003 40.539 mo
107.003 39.076 li
@
102.573 40.539 mo
102.573 39.076 li
@
98.142 40.539 mo
98.142 39.076 li
@
93.712 42.002 mo
93.712 39.076 li
@
89.282 40.539 mo
89.282 39.076 li
@
84.852 40.539 mo
84.852 39.076 li
@
80.421 40.539 mo
80.421 39.076 li
@
75.991 40.539 mo
75.991 39.076 li
@
71.561 42.002 mo
71.561 39.076 li
@
67.131 40.539 mo
67.131 39.076 li
@
62.7 40.539 mo
62.7 39.076 li
@
58.27 40.539 mo
58.27 39.076 li
@
53.84 40.539 mo
53.84 39.076 li
@
49.409 42.002 mo
49.409 39.076 li
@
44.979 40.539 mo
44.979 39.076 li
@
40.549 40.539 mo
40.549 39.076 li
@
36.119 40.539 mo
36.119 39.076 li
@
31.688 40.539 mo
31.688 39.076 li
@
27.258 42.002 mo
27.258 39.076 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 13356 71 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/d 71 def
end
IVXETS+Helvetica /Encoding get
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six 12{/.notdef}rp /C 29{/.notdef}rp /a /b /c /d 155{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf44.519 102.503 mo(4)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf38.302 129.147 mo(\(d\) C)[-4.04822 -6.75928 -4.04816 -3.37964 0 ]ysh62.837 46.578 mo
54.51 46.578 li
54.51 46.578 mo
54.51 46.578 li
cp
0 .9617 .904814 0 cmyk
@
68.758 46.578 mo
77.085 46.578 li
77.085 46.578 mo
77.085 46.578 li
cp
@
55.881 58.582 mo
50.771 58.582 li
50.771 58.582 mo
50.771 58.582 li
cp
@
61.802 58.582 mo
66.912 58.582 li
66.912 58.582 mo
66.912 58.582 li
cp
@
49.402 74.838 mo
48.607 74.838 li
48.607 74.838 mo
48.607 74.838 li
cp
@
55.323 74.838 mo
56.118 74.838 li
56.118 74.838 mo
56.118 74.838 li
cp
@
65.797 49.539 mo
61.85 49.539 61.85 43.618 65.797 43.618 cv
69.745 43.618 69.745 49.539 65.797 49.539 cv
cp
58.842 61.543 mo
54.894 61.543 54.894 55.622 58.842 55.622 cv
62.789 55.622 62.789 61.543 58.842 61.543 cv
cp
52.362 77.799 mo
48.415 77.799 48.415 71.8781 52.362 71.8781 cv
56.31 71.8781 56.31 77.799 52.362 77.799 cv
cp
71.589 94.8051 mo
67.642 94.8051 67.642 88.884 71.589 88.884 cv
75.536 88.884 75.536 94.8051 71.589 94.8051 cv
cp
78.349 108.059 mo
74.402 108.059 74.402 102.138 78.349 102.138 cv
82.297 102.138 82.297 108.059 78.349 108.059 cv
cp
82.933 117.813 mo
78.985 117.813 78.985 111.892 82.933 111.892 cv
86.88 111.892 86.88 117.813 82.933 117.813 cv
cp
87.276 125.065 mo
83.328 125.065 83.328 119.144 87.276 119.144 cv
91.223 119.144 91.223 125.065 87.276 125.065 cv
cp
90.125 130.317 mo
86.178 130.317 86.178 124.396 90.125 124.396 cv
94.072 124.396 94.072 130.317 90.125 130.317 cv
cp
91.834 133.568 mo
87.887 133.568 87.887 127.647 91.834 127.647 cv
95.781 127.647 95.781 133.568 91.834 133.568 cv
cp
@
105.918 46.578 mo
61.226 46.578 li
61.226 46.578 mo
61.226 46.578 li
cp
.905547 .71957 0 0 cmyk
@
111.839 46.578 mo
138.015 46.578 li
138.015 46.578 mo
138.015 46.578 li
cp
@
71.138 58.582 mo
41.064 58.582 li
41.064 58.582 mo
41.064 58.582 li
cp
@
77.059 58.582 mo
107.133 58.582 li
107.133 58.582 mo
107.133 58.582 li
cp
@
38.302 74.838 mo
27.258 74.838 li
27.258 74.838 mo
27.258 74.838 li
cp
@
44.223 74.838 mo
56.402 74.838 li
56.402 74.838 mo
56.402 74.838 li
cp
@
74.491 91.844 mo
70.469 91.844 li
70.469 91.844 mo
70.469 91.844 li
cp
@
80.412 91.844 mo
84.433 91.844 li
84.433 91.844 mo
84.433 91.844 li
cp
@
76.922 105.099 mo
76.642 105.099 li
76.642 105.099 mo
76.642 105.099 li
cp
@
82.843 105.099 mo
83.124 105.099 li
83.124 105.099 mo
83.124 105.099 li
cp
@
109.865 47.565 mo
111.839 47.565 li
111.839 45.591 li
109.865 45.591 li
109.865 43.618 li
107.891 43.618 li
107.891 45.591 li
105.918 45.591 li
105.918 47.565 li
107.891 47.565 li
107.891 49.5391 li
109.865 49.5391 li
cp
75.085 59.569 mo
77.059 59.569 li
77.059 57.596 li
75.085 57.596 li
75.085 55.622 li
73.112 55.622 li
73.112 57.596 li
71.138 57.596 li
71.138 59.569 li
73.112 59.569 li
73.112 61.543 li
75.085 61.543 li
cp
42.25 75.825 mo
44.223 75.825 li
44.223 73.851 li
42.25 73.851 li
42.25 71.8781 li
40.276 71.8781 li
40.276 73.851 li
38.302 73.851 li
38.302 75.825 li
40.276 75.825 li
40.276 77.799 li
42.25 77.799 li
cp
78.438 92.8311 mo
80.412 92.8311 li
80.412 90.8571 li
78.438 90.8571 li
78.438 88.884 li
76.464 88.884 li
76.464 90.8571 li
74.491 90.8571 li
74.491 92.8311 li
76.464 92.8311 li
76.464 94.8051 li
78.438 94.8051 li
cp
80.869 106.086 mo
82.843 106.086 li
82.843 104.112 li
80.869 104.112 li
80.869 102.138 li
78.896 102.138 li
78.896 104.112 li
76.922 104.112 li
76.922 106.086 li
78.896 106.086 li
78.896 108.059 li
80.869 108.059 li
cp
83.653 115.839 mo
85.627 115.839 li
85.627 113.866 li
83.653 113.866 li
83.653 111.892 li
81.679 111.892 li
81.679 113.866 li
79.706 113.866 li
79.706 115.839 li
81.679 115.839 li
81.679 117.813 li
83.653 117.813 li
cp
88.596 123.092 mo
90.569 123.092 li
90.569 121.118 li
88.596 121.118 li
88.596 119.144 li
86.622 119.144 li
86.622 121.118 li
84.648 121.118 li
84.648 123.092 li
86.622 123.092 li
86.622 125.065 li
88.596 125.065 li
cp
91.315 128.344 mo
93.289 128.344 li
93.289 126.37 li
91.315 126.37 li
91.315 124.396 li
89.342 124.396 li
89.342 126.37 li
87.368 126.37 li
87.368 128.344 li
89.342 128.344 li
89.342 130.317 li
91.315 130.317 li
cp
92.729 131.595 mo
94.703 131.595 li
94.703 129.621 li
92.729 129.621 li
92.729 127.647 li
90.755 127.647 li
90.755 129.621 li
88.782 129.621 li
88.782 131.595 li
90.755 131.595 li
90.755 133.568 li
92.729 133.568 li
cp
@
69.934 46.578 mo
67.892 46.578 li
67.892 46.578 mo
67.892 46.578 li
cp
.92929 .879301 .889677 .799283 cmyk
@
72.895 46.578 mo
74.937 46.578 li
74.937 46.578 mo
74.937 46.578 li
cp
@
70.658 58.582 mo
69.448 58.582 li
69.448 58.582 mo
69.448 58.582 li
cp
@
73.619 58.582 mo
74.828 58.582 li
74.828 58.582 mo
74.828 58.582 li
cp
@
68.454 46.578 mo
70.499 45.9141 li
70.499 43.7631 li
71.764 45.5031 li
73.809 44.838 li
72.545 46.578 li
73.809 48.3181 li
71.764 47.6541 li
70.499 49.394 li
70.499 47.243 li
cp
69.178 58.582 mo
71.224 57.918 li
71.224 55.767 li
72.488 57.507 li
74.533 56.842 li
73.269 58.582 li
74.533 60.3231 li
72.488 59.658 li
71.224 61.398 li
71.224 59.247 li
cp
69.956 74.838 mo
72.002 74.174 li
72.002 72.023 li
73.266 73.7631 li
75.312 73.098 li
74.048 74.838 li
75.312 76.578 li
73.266 75.9141 li
72.002 77.6541 li
72.002 75.5031 li
cp
77.716 91.8441 mo
79.762 91.1801 li
79.762 89.0291 li
81.026 90.769 li
83.072 90.104 li
81.808 91.8441 li
83.072 93.584 li
81.026 92.92 li
79.762 94.66 li
79.762 92.509 li
cp
81.734 105.099 mo
83.78 104.434 li
83.78 102.283 li
85.044 104.023 li
87.09 103.359 li
85.826 105.099 li
87.09 106.839 li
85.044 106.174 li
83.78 107.914 li
83.78 105.764 li
cp
84.524 114.852 mo
86.57 114.188 li
86.57 112.037 li
87.834 113.777 li
89.88 113.112 li
88.615 114.852 li
89.88 116.592 li
87.834 115.928 li
86.57 117.668 li
86.57 115.517 li
cp
87.04 122.105 mo
89.086 121.44 li
89.086 119.289 li
90.35 121.03 li
92.396 120.365 li
91.131 122.105 li
92.396 123.845 li
90.35 123.18 li
89.086 124.92 li
89.086 122.77 li
cp
88.681 127.357 mo
90.727 126.692 li
90.727 124.541 li
91.991 126.281 li
94.037 125.617 li
92.773 127.357 li
94.037 129.097 li
91.991 128.432 li
90.727 130.172 li
90.727 128.021 li
cp
89.678 130.608 mo
91.724 129.943 li
91.724 127.792 li
92.988 129.533 li
95.034 128.868 li
93.769 130.608 li
95.034 132.348 li
92.988 131.683 li
91.724 133.423 li
91.724 131.273 li
cp
f
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
0 0 0 0 cmyk
ef
1.5 lw
273.746 510.783 mo
273.746 413.248 li
162.989 413.248 li
162.989 510.783 li
cp
.92929 .879301 .889677 .799283 cmyk
@
273.746 510.783 mo
273.746 413.248 li
162.989 413.248 li
162.989 510.783 li
cp
@
.75 lw
273.746 510.783 mo
273.746 413.249 li
@
270.424 508.282 mo
273.747 508.282 li
@
272.085 503.281 mo
273.746 503.281 li
@
272.085 498.279 mo
273.746 498.279 li
@
272.085 493.277 mo
273.746 493.277 li
@
272.085 488.275 mo
273.746 488.275 li
@
270.424 483.274 mo
273.747 483.274 li
@
272.085 478.272 mo
273.746 478.272 li
@
272.085 473.27 mo
273.746 473.27 li
@
272.085 468.268 mo
273.746 468.268 li
@
272.085 463.267 mo
273.746 463.267 li
@
270.424 458.265 mo
273.747 458.265 li
@
272.085 453.263 mo
273.746 453.263 li
@
272.085 448.261 mo
273.746 448.261 li
@
272.085 443.259 mo
273.746 443.259 li
@
272.085 438.258 mo
273.746 438.258 li
@
270.424 433.256 mo
273.747 433.256 li
@
270.424 508.282 mo
273.747 508.282 li
@
270.424 433.256 mo
273.747 433.256 li
@
272.085 428.254 mo
273.746 428.254 li
@
272.085 423.252 mo
273.746 423.252 li
@
272.085 418.251 mo
273.746 418.251 li
@
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 510.455 mo(0)shgrestore
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 489.732 mo(100)[-4.12161 -4.12164 0 ]yshgrestore
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 464.568 mo(200)[-4.12161 -4.12164 0 ]yshgrestore
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 439.7 mo(300)[-4.12161 -4.12164 0 ]yshgrestore
162.989 510.783 mo
162.989 413.249 li
@
166.312 508.282 mo
162.989 508.282 li
@
164.651 503.281 mo
162.989 503.281 li
@
164.651 498.279 mo
162.989 498.279 li
@
164.651 493.277 mo
162.989 493.277 li
@
164.651 488.275 mo
162.989 488.275 li
@
166.312 483.274 mo
162.989 483.274 li
@
164.651 478.272 mo
162.989 478.272 li
@
164.651 473.27 mo
162.989 473.27 li
@
164.651 468.268 mo
162.989 468.268 li
@
164.651 463.267 mo
162.989 463.267 li
@
166.312 458.265 mo
162.989 458.265 li
@
164.651 453.263 mo
162.989 453.263 li
@
164.651 448.261 mo
162.989 448.261 li
@
164.651 443.259 mo
162.989 443.259 li
@
164.651 438.258 mo
162.989 438.258 li
@
166.312 433.256 mo
162.989 433.256 li
@
166.312 508.282 mo
162.989 508.282 li
@
166.312 433.256 mo
162.989 433.256 li
@
164.651 428.254 mo
162.989 428.254 li
@
164.651 423.252 mo
162.989 423.252 li
@
164.651 418.251 mo
162.989 418.251 li
@
273.746 510.783 mo
162.989 510.783 li
@
273.746 507.857 mo
273.746 510.783 li
@
266.362 509.32 mo
266.362 510.783 li
@
258.979 509.32 mo
258.979 510.783 li
@
251.595 509.32 mo
251.595 510.783 li
@
244.211 509.32 mo
244.211 510.783 li
@
236.827 507.857 mo
236.827 510.783 li
@
229.444 509.32 mo
229.444 510.783 li
@
222.06 509.32 mo
222.06 510.783 li
@
214.676 509.32 mo
214.676 510.783 li
@
207.292 509.32 mo
207.292 510.783 li
@
199.908 507.857 mo
199.908 510.783 li
@
192.525 509.32 mo
192.525 510.783 li
@
185.141 509.32 mo
185.141 510.783 li
@
177.757 509.32 mo
177.757 510.783 li
@
170.373 509.32 mo
170.373 510.783 li
@
162.989 507.857 mo
162.989 510.783 li
@
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf276.915 516.968 mo(4)shgrestore
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf239.909 516.968 mo(5)shgrestore
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf202.903 516.968 mo(6)shgrestore
gsave
286.777 527.995 mo
286.777 413.249 li
156.475 413.249 li
156.475 527.995 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 4528 26 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d5502
56046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d080000
6f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c39
1239015d31305d01150602070607060723121336372135042f45e558572d
1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/seven 26 def
end
IVXETS+Helvetica /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /seven 11{/.notdef}rp /C 29{/.notdef}rp /a /b /c /d 155{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf166.194 516.968 mo(7)shgrestore
273.746 413.249 mo
162.989 413.249 li
@
273.746 416.175 mo
273.746 413.249 li
@
266.362 414.712 mo
266.362 413.249 li
@
258.979 414.712 mo
258.979 413.249 li
@
251.595 414.712 mo
251.595 413.249 li
@
244.211 414.712 mo
244.211 413.249 li
@
236.827 416.175 mo
236.827 413.249 li
@
229.444 414.712 mo
229.444 413.249 li
@
222.06 414.712 mo
222.06 413.249 li
@
214.676 414.712 mo
214.676 413.249 li
@
207.292 414.712 mo
207.292 413.249 li
@
199.908 416.175 mo
199.908 413.249 li
@
192.525 414.712 mo
192.525 413.249 li
@
185.141 414.712 mo
185.141 413.249 li
@
177.757 414.712 mo
177.757 413.249 li
@
170.373 414.712 mo
170.373 413.249 li
@
162.989 416.175 mo
162.989 413.249 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 2784 18 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>IVXETS+Helvetica AddT42Char 
1 13572 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/slash 18 def
/e 72 def
end
IVXETS+Helvetica /Encoding get
dup 47 /slash put
dup 101 /e put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven 11{/.notdef}rp /C 29{/.notdef}rp /a /b /c /d /e 154{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf177.74 460.423 mo(1)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 472.265 mo(/C)[-3.37964 0 ]yshIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf180.108 476.41 mo(2)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 503.054 mo(\(e\) C)[-4.04819 -6.75928 -4.04822 -3.37964 0 ]ysh207.313 423.712 mo
203.366 423.712 203.366 417.791 207.313 417.791 cv
211.261 417.791 211.261 423.712 207.313 423.712 cv
cp
215.643 435.716 mo
211.695 435.716 211.695 429.795 215.643 429.795 cv
219.59 429.795 219.59 435.716 215.643 435.716 cv
cp
222.309 451.972 mo
218.362 451.972 218.362 446.051 222.309 446.051 cv
226.256 446.051 226.256 451.972 222.309 451.972 cv
cp
229.566 468.978 mo
225.618 468.978 225.618 463.057 229.566 463.057 cv
233.513 463.057 233.513 468.978 229.566 468.978 cv
cp
235.402 482.233 mo
231.454 482.233 231.454 476.312 235.402 476.312 cv
239.349 476.312 239.349 482.233 235.402 482.233 cv
cp
239.408 491.986 mo
235.461 491.986 235.461 486.065 239.408 486.065 cv
243.355 486.065 243.355 491.986 239.408 491.986 cv
cp
241.882 499.239 mo
237.935 499.239 237.935 493.318 241.882 493.318 cv
245.829 493.318 245.829 499.239 241.882 499.239 cv
cp
244.196 504.49 mo
240.248 504.49 240.248 498.57 244.196 498.57 cv
248.143 498.57 248.143 504.49 244.196 504.49 cv
cp
246.503 507.742 mo
242.556 507.742 242.556 501.821 246.503 501.821 cv
250.45 501.821 250.45 507.742 246.503 507.742 cv
cp
0 .9617 .904814 0 cmyk
@
209.436 421.738 mo
211.41 421.738 li
211.41 419.765 li
209.436 419.765 li
209.436 417.791 li
207.463 417.791 li
207.463 419.765 li
205.489 419.765 li
205.489 421.738 li
207.463 421.738 li
207.463 423.712 li
209.436 423.712 li
cp
215.978 433.743 mo
217.951 433.743 li
217.951 431.769 li
215.978 431.769 li
215.978 429.795 li
214.004 429.795 li
214.004 431.769 li
212.03 431.769 li
212.03 433.743 li
214.004 433.743 li
214.004 435.716 li
215.978 435.716 li
cp
223.211 449.998 mo
225.185 449.998 li
225.185 448.025 li
223.211 448.025 li
223.211 446.051 li
221.237 446.051 li
221.237 448.025 li
219.264 448.025 li
219.264 449.998 li
221.237 449.998 li
221.237 451.972 li
223.211 451.972 li
cp
231.604 467.004 mo
233.578 467.004 li
233.578 465.031 li
231.604 465.031 li
231.604 463.057 li
229.631 463.057 li
229.631 465.031 li
227.657 465.031 li
227.657 467.004 li
229.631 467.004 li
229.631 468.978 li
231.604 468.978 li
cp
237.155 480.259 mo
239.128 480.259 li
239.128 478.285 li
237.155 478.285 li
237.155 476.312 li
235.181 476.312 li
235.181 478.285 li
233.207 478.285 li
233.207 480.259 li
235.181 480.259 li
235.181 482.233 li
237.155 482.233 li
cp
241.154 490.012 mo
243.127 490.012 li
243.127 488.039 li
241.154 488.039 li
241.154 486.065 li
239.18 486.065 li
239.18 488.039 li
237.207 488.039 li
237.207 490.012 li
239.18 490.012 li
239.18 491.986 li
241.154 491.986 li
cp
243.187 497.265 mo
245.161 497.265 li
245.161 495.291 li
243.187 495.291 li
243.187 493.318 li
241.214 493.318 li
241.214 495.291 li
239.24 495.291 li
239.24 497.265 li
241.214 497.265 li
241.214 499.239 li
243.187 499.239 li
cp
245.975 502.517 mo
247.949 502.517 li
247.949 500.543 li
245.975 500.543 li
245.975 498.57 li
244.001 498.57 li
244.001 500.543 li
242.028 500.543 li
242.028 502.517 li
244.001 502.517 li
244.001 504.49 li
245.975 504.49 li
cp
248.122 505.768 mo
250.096 505.768 li
250.096 503.794 li
248.122 503.794 li
248.122 501.821 li
246.149 501.821 li
246.149 503.794 li
244.175 503.794 li
244.175 505.768 li
246.149 505.768 li
246.149 507.742 li
248.122 507.742 li
cp
.905547 .71957 0 0 cmyk
@
231.89 501.53 mo
231.889 501.53 li
231.889 501.53 mo
231.889 501.53 li
cp
.92929 .879301 .889677 .799283 cmyk
@
234.851 501.53 mo
234.852 501.53 li
234.852 501.53 mo
234.852 501.53 li
cp
@
233.723 504.781 mo
233.176 504.781 li
233.176 504.781 mo
233.176 504.781 li
cp
@
236.683 504.781 mo
237.23 504.781 li
237.23 504.781 mo
237.23 504.781 li
cp
@
200.722 420.751 mo
202.767 420.087 li
202.767 417.936 li
204.031 419.676 li
206.077 419.011 li
204.813 420.751 li
206.077 422.492 li
204.031 421.827 li
202.767 423.567 li
202.767 421.416 li
cp
207.147 432.756 mo
209.192 432.091 li
209.192 429.94 li
210.456 431.68 li
212.502 431.016 li
211.238 432.756 li
212.502 434.496 li
210.456 433.831 li
209.192 435.571 li
209.192 433.42 li
cp
214.826 449.011 mo
216.872 448.347 li
216.872 446.196 li
218.136 447.936 li
220.182 447.271 li
218.918 449.011 li
220.182 450.752 li
218.136 450.087 li
216.872 451.827 li
216.872 449.676 li
cp
221.97 466.017 mo
224.016 465.353 li
224.016 463.202 li
225.28 464.942 li
227.325 464.277 li
226.061 466.017 li
227.325 467.758 li
225.28 467.093 li
224.016 468.833 li
224.016 466.682 li
cp
226.411 479.272 mo
228.457 478.607 li
228.457 476.457 li
229.721 478.197 li
231.767 477.532 li
230.502 479.272 li
231.767 481.012 li
229.721 480.348 li
228.457 482.088 li
228.457 479.937 li
cp
228.774 489.026 mo
230.819 488.361 li
230.819 486.21 li
232.084 487.95 li
234.129 487.285 li
232.865 489.026 li
234.129 490.766 li
232.084 490.101 li
230.819 491.841 li
230.819 489.69 li
cp
232.002 496.278 mo
234.048 495.613 li
234.048 493.463 li
235.312 495.203 li
237.358 494.538 li
236.093 496.278 li
237.358 498.018 li
235.312 497.354 li
234.048 499.094 li
234.048 496.943 li
cp
230.41 501.53 mo
232.455 500.865 li
232.455 498.714 li
233.72 500.455 li
235.765 499.79 li
234.501 501.53 li
235.765 503.27 li
233.72 502.605 li
232.455 504.346 li
232.455 502.195 li
cp
232.242 504.781 mo
234.288 504.116 li
234.288 501.966 li
235.552 503.706 li
237.598 503.041 li
236.334 504.781 li
237.598 506.521 li
235.552 505.857 li
234.288 507.597 li
234.288 505.446 li
cp
f
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
0 0 0 0 cmyk
ef
1.5 lw
273.746 386.059 mo
273.746 288.524 li
162.989 288.524 li
162.989 386.059 li
cp
.92929 .879301 .889677 .799283 cmyk
@
273.746 386.059 mo
273.746 288.524 li
162.989 288.524 li
162.989 386.059 li
cp
@
.75 lw
273.746 386.059 mo
273.746 288.524 li
@
270.424 383.558 mo
273.747 383.558 li
@
272.085 378.556 mo
273.746 378.556 li
@
272.085 373.554 mo
273.746 373.554 li
@
272.085 368.553 mo
273.746 368.553 li
@
272.085 363.551 mo
273.746 363.551 li
@
270.424 358.549 mo
273.747 358.549 li
@
272.085 353.547 mo
273.746 353.547 li
@
272.085 348.546 mo
273.746 348.546 li
@
272.085 343.544 mo
273.746 343.544 li
@
272.085 338.542 mo
273.746 338.542 li
@
270.424 333.54 mo
273.747 333.54 li
@
272.085 328.539 mo
273.746 328.539 li
@
272.085 323.537 mo
273.746 323.537 li
@
272.085 318.535 mo
273.746 318.535 li
@
272.085 313.533 mo
273.746 313.533 li
@
270.424 308.531 mo
273.747 308.531 li
@
270.424 383.558 mo
273.747 383.558 li
@
270.424 308.531 mo
273.747 308.531 li
@
272.085 303.53 mo
273.746 303.53 li
@
272.085 298.528 mo
273.746 298.528 li
@
272.085 293.526 mo
273.746 293.526 li
@
gsave
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 385.82 mo(0)shgrestore
gsave
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 364.8 mo(100)[-4.12161 -4.12164 0 ]yshgrestore
gsave
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 339.932 mo(200)[-4.12161 -4.12164 0 ]yshgrestore
gsave
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 314.768 mo(300)[-4.12161 -4.12161 0 ]yshgrestore
162.989 386.059 mo
162.989 288.524 li
@
166.312 383.558 mo
162.989 383.558 li
@
164.651 378.556 mo
162.989 378.556 li
@
164.651 373.554 mo
162.989 373.554 li
@
164.651 368.553 mo
162.989 368.553 li
@
164.651 363.551 mo
162.989 363.551 li
@
166.312 358.549 mo
162.989 358.549 li
@
164.651 353.547 mo
162.989 353.547 li
@
164.651 348.546 mo
162.989 348.546 li
@
164.651 343.544 mo
162.989 343.544 li
@
164.651 338.542 mo
162.989 338.542 li
@
166.312 333.54 mo
162.989 333.54 li
@
164.651 328.539 mo
162.989 328.539 li
@
164.651 323.537 mo
162.989 323.537 li
@
164.651 318.535 mo
162.989 318.535 li
@
164.651 313.533 mo
162.989 313.533 li
@
166.312 308.531 mo
162.989 308.531 li
@
166.312 383.558 mo
162.989 383.558 li
@
166.312 308.531 mo
162.989 308.531 li
@
164.651 303.53 mo
162.989 303.53 li
@
164.651 298.528 mo
162.989 298.528 li
@
164.651 293.526 mo
162.989 293.526 li
@
273.746 386.059 mo
162.989 386.059 li
@
255.287 383.133 mo
255.287 386.059 li
@
247.903 384.596 mo
247.903 386.059 li
@
240.519 384.596 mo
240.519 386.059 li
@
233.135 384.596 mo
233.135 386.059 li
@
225.752 384.596 mo
225.752 386.059 li
@
218.368 383.133 mo
218.368 386.059 li
@
210.984 384.596 mo
210.984 386.059 li
@
203.6 384.596 mo
203.6 386.059 li
@
196.217 384.596 mo
196.217 386.059 li
@
188.833 384.596 mo
188.833 386.059 li
@
181.449 383.133 mo
181.449 386.059 li
@
255.287 383.133 mo
255.287 386.059 li
@
262.671 384.596 mo
262.671 386.059 li
@
270.054 384.596 mo
270.054 386.059 li
@
181.449 383.133 mo
181.449 386.059 li
@
174.065 384.596 mo
174.065 386.059 li
@
166.681 384.596 mo
166.681 386.059 li
@
gsave
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 2720 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/period 17 def
end
IVXETS+Helvetica /Encoding get
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five /six /seven 11{/.notdef}rp /C 29{/.notdef}rp /a /b /c /d /e 154{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf258.264 398.253 mo(0.1)[-4.78104 -2.39053 0 ]yshgrestore
gsave
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf221.554 399.438 mo(0.2)[-4.78104 -2.39053 0 ]yshgrestore
gsave
286.777 403.271 mo
286.777 288.525 li
156.475 288.525 li
156.475 403.271 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf184.549 399.438 mo(0.3)[-4.78104 -2.39053 0 ]yshgrestore
273.746 288.524 mo
162.989 288.524 li
@
255.287 291.45 mo
255.287 288.524 li
@
247.903 289.987 mo
247.903 288.524 li
@
240.519 289.987 mo
240.519 288.524 li
@
233.135 289.987 mo
233.135 288.524 li
@
225.752 289.987 mo
225.752 288.524 li
@
218.368 291.45 mo
218.368 288.524 li
@
210.984 289.987 mo
210.984 288.524 li
@
203.6 289.987 mo
203.6 288.524 li
@
196.217 289.987 mo
196.217 288.524 li
@
188.833 289.987 mo
188.833 288.524 li
@
181.449 291.45 mo
181.449 288.524 li
@
255.287 291.45 mo
255.287 288.524 li
@
262.671 289.987 mo
262.671 288.524 li
@
270.054 289.987 mo
270.054 288.524 li
@
181.449 291.45 mo
181.449 288.524 li
@
174.065 289.987 mo
174.065 288.524 li
@
166.681 289.987 mo
166.681 288.524 li
@
IVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf177.74 339.044 mo(2)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 350.886 mo(/C)[-3.37964 0 ]yshIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf180.108 355.031 mo(3)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 378.418 mo(\()sh%ADOBeginSubsetFont: CCAAAA+Helvetica-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (CCAAAA+Helvetica)%%Title: (CCAAAA+Helvetica Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /CCAAAA+Helvetica def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-951 -481 1446 1122} def/FontInfo 4 dict dup begin/FSType 0 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 2197 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 2 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |73 <001C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58ED82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /CCAAAA+Helvetica-Identity-H /Identity-H 0 [/CCAAAA+Helvetica] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IVXETT+Helvetica /CCAAAA+Helvetica-Identity-H findfont ct_VMDictPutIVXETT+Helvetica [0 -12.157 -12.157 0 0 0 ]msf173.891 374.37 mo(\000I)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 370.99 mo(\)C)[-4.04819 0 ]ysh231.161 296.027 mo
225.289 296.027 li
225.289 296.027 mo
225.289 296.027 li
cp
0 .9617 .904814 0 cmyk
@
237.082 296.027 mo
242.954 296.027 li
242.954 296.027 mo
242.954 296.027 li
cp
@
215.082 308.031 mo
209.87 308.031 li
209.87 308.031 mo
209.87 308.031 li
cp
@
221.003 308.031 mo
226.215 308.031 li
226.215 308.031 mo
226.215 308.031 li
cp
@
220.27 324.287 mo
217.95 324.287 li
217.95 324.287 mo
217.95 324.287 li
cp
@
226.191 324.287 mo
228.511 324.287 li
228.511 324.287 mo
228.511 324.287 li
cp
@
210.79 341.293 mo
209.343 341.293 li
209.343 341.293 mo
209.343 341.293 li
cp
@
216.711 341.293 mo
218.158 341.293 li
218.158 341.293 mo
218.158 341.293 li
cp
@
217.886 354.548 mo
217.035 354.548 li
217.035 354.548 mo
217.035 354.548 li
cp
@
223.807 354.548 mo
224.658 354.548 li
224.658 354.548 mo
224.658 354.548 li
cp
@
200.416 364.301 mo
200.13 364.301 li
200.13 364.301 mo
200.13 364.301 li
cp
@
206.337 364.301 mo
206.623 364.301 li
206.623 364.301 mo
206.623 364.301 li
cp
@
234.122 298.988 mo
230.175 298.988 230.175 293.067 234.122 293.067 cv
238.069 293.067 238.069 298.988 234.122 298.988 cv
cp
218.043 310.992 mo
214.095 310.992 214.095 305.071 218.043 305.071 cv
221.99 305.071 221.99 310.992 218.043 310.992 cv
cp
223.231 327.248 mo
219.283 327.248 219.283 321.327 223.231 321.327 cv
227.178 321.327 227.178 327.248 223.231 327.248 cv
cp
213.751 344.254 mo
209.804 344.254 209.804 338.333 213.751 338.333 cv
217.698 338.333 217.698 344.254 213.751 344.254 cv
cp
220.847 357.508 mo
216.9 357.508 216.9 351.587 220.847 351.587 cv
224.795 351.587 224.795 357.508 220.847 357.508 cv
cp
203.376 367.262 mo
199.429 367.262 199.429 361.341 203.376 361.341 cv
207.324 361.341 207.324 367.262 203.376 367.262 cv
cp
214.475 374.514 mo
210.528 374.514 210.528 368.593 214.475 368.593 cv
218.422 368.593 218.422 374.514 214.475 374.514 cv
cp
210.517 379.766 mo
206.569 379.766 206.569 373.845 210.517 373.845 cv
214.464 373.845 214.464 379.766 210.517 379.766 cv
cp
204.932 383.017 mo
200.984 383.017 200.984 377.096 204.932 377.096 cv
208.879 377.096 208.879 383.017 204.932 383.017 cv
cp
@
237.552 296.027 mo
213.63 296.027 li
213.63 296.027 mo
213.63 296.027 li
cp
.905547 .71957 0 0 cmyk
@
243.473 296.027 mo
267.395 296.027 li
267.395 296.027 mo
267.395 296.027 li
cp
@
201.836 308.031 mo
180.958 308.031 li
180.958 308.031 mo
180.958 308.031 li
cp
@
207.757 308.031 mo
228.635 308.031 li
228.635 308.031 mo
228.635 308.031 li
cp
@
205.417 324.287 mo
193.568 324.287 li
193.568 324.287 mo
193.568 324.287 li
cp
@
211.337 324.287 mo
223.185 324.287 li
223.185 324.287 mo
223.185 324.287 li
cp
@
203.903 341.293 mo
194.953 341.293 li
194.953 341.293 mo
194.953 341.293 li
cp
@
209.824 341.293 mo
218.774 341.293 li
218.774 341.293 mo
218.774 341.293 li
cp
@
227.52 354.548 mo
220.594 354.548 li
220.594 354.548 mo
220.594 354.548 li
cp
@
233.441 354.548 mo
240.367 354.548 li
240.367 354.548 mo
240.367 354.548 li
cp
@
202.358 364.301 mo
197.168 364.301 li
197.168 364.301 mo
197.168 364.301 li
cp
@
208.279 364.301 mo
213.469 364.301 li
213.469 364.301 mo
213.469 364.301 li
cp
@
209.241 371.554 mo
205.599 371.554 li
205.599 371.554 mo
205.599 371.554 li
cp
@
215.162 371.554 mo
218.804 371.554 li
218.804 371.554 mo
218.804 371.554 li
cp
@
203.858 376.806 mo
201.308 376.806 li
201.308 376.806 mo
201.308 376.806 li
cp
@
209.779 376.806 mo
212.329 376.806 li
212.329 376.806 mo
212.329 376.806 li
cp
@
195.745 380.057 mo
193.898 380.057 li
193.898 380.057 mo
193.898 380.057 li
cp
@
201.666 380.057 mo
203.513 380.057 li
203.513 380.057 mo
203.513 380.057 li
cp
@
241.499 297.014 mo
243.473 297.014 li
243.473 295.04 li
241.499 295.04 li
241.499 293.067 li
239.525 293.067 li
239.525 295.04 li
237.552 295.04 li
237.552 297.014 li
239.525 297.014 li
239.525 298.988 li
241.499 298.988 li
cp
205.783 309.018 mo
207.757 309.018 li
207.757 307.044 li
205.783 307.044 li
205.783 305.071 li
203.81 305.071 li
203.81 307.044 li
201.836 307.044 li
201.836 309.018 li
203.81 309.018 li
203.81 310.992 li
205.783 310.992 li
cp
209.364 325.274 mo
211.337 325.274 li
211.337 323.3 li
209.364 323.3 li
209.364 321.327 li
207.39 321.327 li
207.39 323.3 li
205.417 323.3 li
205.417 325.274 li
207.39 325.274 li
207.39 327.248 li
209.364 327.248 li
cp
207.85 342.28 mo
209.824 342.28 li
209.824 340.306 li
207.85 340.306 li
207.85 338.333 li
205.877 338.333 li
205.877 340.306 li
203.903 340.306 li
203.903 342.28 li
205.877 342.28 li
205.877 344.254 li
207.85 344.254 li
cp
231.467 355.535 mo
233.441 355.535 li
233.441 353.561 li
231.467 353.561 li
231.467 351.587 li
229.494 351.587 li
229.494 353.561 li
227.52 353.561 li
227.52 355.535 li
229.494 355.535 li
229.494 357.508 li
231.467 357.508 li
cp
206.305 365.288 mo
208.279 365.288 li
208.279 363.314 li
206.305 363.314 li
206.305 361.341 li
204.332 361.341 li
204.332 363.314 li
202.358 363.314 li
202.358 365.288 li
204.332 365.288 li
204.332 367.262 li
206.305 367.262 li
cp
213.188 372.541 mo
215.161 372.541 li
215.161 370.567 li
213.188 370.567 li
213.188 368.593 li
211.214 368.593 li
211.214 370.567 li
209.241 370.567 li
209.241 372.541 li
211.214 372.541 li
211.214 374.514 li
213.188 374.514 li
cp
207.806 377.792 mo
209.779 377.792 li
209.779 375.819 li
207.806 375.819 li
207.806 373.845 li
205.832 373.845 li
205.832 375.819 li
203.858 375.819 li
203.858 377.792 li
205.832 377.792 li
205.832 379.766 li
207.806 379.766 li
cp
199.692 381.044 mo
201.666 381.044 li
201.666 379.07 li
199.692 379.07 li
199.692 377.096 li
197.719 377.096 li
197.719 379.07 li
195.745 379.07 li
195.745 381.044 li
197.719 381.044 li
197.719 383.017 li
199.692 383.017 li
cp
@
230.888 296.027 mo
225.662 296.027 li
225.662 296.027 mo
225.662 296.027 li
cp
.92929 .879301 .889677 .799283 cmyk
@
233.849 296.027 mo
239.075 296.027 li
239.075 296.027 mo
239.075 296.027 li
cp
@
220.798 308.031 mo
215.965 308.031 li
215.965 308.031 mo
215.965 308.031 li
cp
@
223.759 308.031 mo
228.592 308.031 li
228.592 308.031 mo
228.592 308.031 li
cp
@
218.32 324.287 mo
215.646 324.287 li
215.646 324.287 mo
215.646 324.287 li
cp
@
221.281 324.287 mo
223.955 324.287 li
223.955 324.287 mo
223.955 324.287 li
cp
@
215.709 341.293 mo
213.636 341.293 li
213.636 341.293 mo
213.636 341.293 li
cp
@
218.669 341.293 mo
220.741 341.293 li
220.741 341.293 mo
220.741 341.293 li
cp
@
221.694 354.548 mo
220.071 354.548 li
220.071 354.548 mo
220.071 354.548 li
cp
@
224.654 354.548 mo
226.277 354.548 li
226.277 354.548 mo
226.277 354.548 li
cp
@
213.462 364.301 mo
212.228 364.301 li
212.228 364.301 mo
212.228 364.301 li
cp
@
216.422 364.301 mo
217.656 364.301 li
217.656 364.301 mo
217.656 364.301 li
cp
@
215.14 371.554 mo
214.296 371.554 li
214.296 371.554 mo
214.296 371.554 li
cp
@
218.1 371.554 mo
218.944 371.554 li
218.944 371.554 mo
218.944 371.554 li
cp
@
214.577 376.806 mo
213.974 376.806 li
213.974 376.806 mo
213.974 376.806 li
cp
@
217.538 376.806 mo
218.141 376.806 li
218.141 376.806 mo
218.141 376.806 li
cp
@
209.632 380.057 mo
209.119 380.057 li
209.119 380.057 mo
209.119 380.057 li
cp
@
212.592 380.057 mo
213.105 380.057 li
213.105 380.057 mo
213.105 380.057 li
cp
@
229.408 296.027 mo
231.454 295.362 li
231.454 293.212 li
232.718 294.952 li
234.764 294.287 li
233.499 296.027 li
234.764 297.767 li
232.718 297.103 li
231.454 298.843 li
231.454 296.692 li
cp
219.318 308.031 mo
221.363 307.367 li
221.363 305.216 li
222.628 306.956 li
224.673 306.291 li
223.409 308.031 li
224.673 309.771 li
222.628 309.107 li
221.363 310.847 li
221.363 308.696 li
cp
216.84 324.287 mo
218.886 323.622 li
218.886 321.472 li
220.15 323.212 li
222.196 322.547 li
220.931 324.287 li
222.196 326.027 li
220.15 325.363 li
218.886 327.103 li
218.886 324.952 li
cp
214.228 341.293 mo
216.274 340.628 li
216.274 338.478 li
217.538 340.218 li
219.584 339.553 li
218.319 341.293 li
219.584 343.033 li
217.538 342.369 li
216.274 344.109 li
216.274 341.958 li
cp
220.213 354.548 mo
222.259 353.883 li
222.259 351.732 li
223.523 353.472 li
225.569 352.808 li
224.305 354.548 li
225.569 356.288 li
223.523 355.623 li
222.259 357.363 li
222.259 355.212 li
cp
211.981 364.301 mo
214.027 363.637 li
214.027 361.486 li
215.291 363.226 li
217.337 362.561 li
216.073 364.301 li
217.337 366.041 li
215.291 365.377 li
214.027 367.117 li
214.027 364.966 li
cp
213.659 371.554 mo
215.705 370.889 li
215.705 368.738 li
216.969 370.478 li
219.015 369.814 li
217.751 371.554 li
219.015 373.294 li
216.969 372.629 li
215.705 374.369 li
215.705 372.218 li
cp
213.097 376.806 mo
215.143 376.141 li
215.143 373.99 li
216.407 375.73 li
218.452 375.066 li
217.188 376.806 li
218.452 378.546 li
216.407 377.881 li
215.143 379.621 li
215.143 377.47 li
cp
208.151 380.057 mo
210.197 379.392 li
210.197 377.241 li
211.461 378.981 li
213.507 378.317 li
212.242 380.057 li
213.507 381.797 li
211.461 381.132 li
210.197 382.872 li
210.197 380.721 li
cp
f
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
0 0 0 0 cmyk
ef
1.5 lw
273.746 261.335 mo
273.746 163.8 li
162.989 163.8 li
162.989 261.335 li
cp
.92929 .879301 .889677 .799283 cmyk
@
273.746 261.335 mo
273.746 163.8 li
162.989 163.8 li
162.989 261.335 li
cp
@
.75 lw
273.746 261.335 mo
273.746 163.8 li
@
270.424 258.834 mo
273.747 258.834 li
@
272.085 253.832 mo
273.746 253.832 li
@
272.085 248.83 mo
273.746 248.83 li
@
272.085 243.828 mo
273.746 243.828 li
@
272.085 238.827 mo
273.746 238.827 li
@
270.424 233.825 mo
273.747 233.825 li
@
272.085 228.823 mo
273.746 228.823 li
@
272.085 223.821 mo
273.746 223.821 li
@
272.085 218.819 mo
273.746 218.819 li
@
272.085 213.818 mo
273.746 213.818 li
@
270.424 208.816 mo
273.747 208.816 li
@
272.085 203.814 mo
273.746 203.814 li
@
272.085 198.812 mo
273.746 198.812 li
@
272.085 193.811 mo
273.746 193.811 li
@
272.085 188.809 mo
273.746 188.809 li
@
270.424 183.807 mo
273.747 183.807 li
@
270.424 258.834 mo
273.747 258.834 li
@
270.424 183.807 mo
273.747 183.807 li
@
272.085 178.805 mo
273.746 178.805 li
@
272.085 173.804 mo
273.746 173.804 li
@
272.085 168.802 mo
273.746 168.802 li
@
gsave
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 261.184 mo(0)shgrestore
gsave
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 240.165 mo(100)[-4.12164 -4.12158 0 ]yshgrestore
gsave
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 215.297 mo(200)[-4.12164 -4.12158 0 ]yshgrestore
gsave
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf282.836 190.133 mo(300)[-4.12164 -4.12158 0 ]yshgrestore
162.989 261.335 mo
162.989 163.8 li
@
166.312 258.834 mo
162.989 258.834 li
@
164.651 253.832 mo
162.989 253.832 li
@
164.651 248.83 mo
162.989 248.83 li
@
164.651 243.828 mo
162.989 243.828 li
@
164.651 238.827 mo
162.989 238.827 li
@
166.312 233.825 mo
162.989 233.825 li
@
164.651 228.823 mo
162.989 228.823 li
@
164.651 223.821 mo
162.989 223.821 li
@
164.651 218.819 mo
162.989 218.819 li
@
164.651 213.818 mo
162.989 213.818 li
@
166.312 208.816 mo
162.989 208.816 li
@
164.651 203.814 mo
162.989 203.814 li
@
164.651 198.812 mo
162.989 198.812 li
@
164.651 193.811 mo
162.989 193.811 li
@
164.651 188.809 mo
162.989 188.809 li
@
166.312 183.807 mo
162.989 183.807 li
@
166.312 258.834 mo
162.989 258.834 li
@
166.312 183.807 mo
162.989 183.807 li
@
164.651 178.805 mo
162.989 178.805 li
@
164.651 173.804 mo
162.989 173.804 li
@
164.651 168.802 mo
162.989 168.802 li
@
273.746 261.335 mo
162.989 261.335 li
@
273.746 258.408 mo
273.746 261.335 li
@
266.362 259.871 mo
266.362 261.335 li
@
258.979 259.871 mo
258.979 261.335 li
@
251.595 259.871 mo
251.595 261.335 li
@
244.211 259.871 mo
244.211 261.335 li
@
236.827 258.408 mo
236.827 261.335 li
@
229.444 259.871 mo
229.444 261.335 li
@
222.06 259.871 mo
222.06 261.335 li
@
214.676 259.871 mo
214.676 261.335 li
@
207.292 259.871 mo
207.292 261.335 li
@
199.908 258.408 mo
199.908 261.335 li
@
192.525 259.871 mo
192.525 261.335 li
@
185.141 259.871 mo
185.141 261.335 li
@
177.757 259.871 mo
177.757 261.335 li
@
170.373 259.871 mo
170.373 261.335 li
@
162.989 258.408 mo
162.989 261.335 li
@
gsave
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf276.915 269.473 mo(-1)[-2.8634 0 ]yshgrestore
gsave
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf239.909 267.697 mo(0)shgrestore
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf202.903 266.513 mo(1)shgsave
286.777 278.546 mo
286.777 163.8 li
156.475 163.8 li
156.475 278.546 li
cp
clp
IVXETS+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf166.194 267.697 mo(2)shgrestore
273.746 163.8 mo
162.989 163.8 li
@
273.746 166.726 mo
273.746 163.8 li
@
266.362 165.263 mo
266.362 163.8 li
@
258.979 165.263 mo
258.979 163.8 li
@
251.595 165.263 mo
251.595 163.8 li
@
244.211 165.263 mo
244.211 163.8 li
@
236.827 166.726 mo
236.827 163.8 li
@
229.444 165.263 mo
229.444 163.8 li
@
222.06 165.263 mo
222.06 163.8 li
@
214.676 165.263 mo
214.676 163.8 li
@
207.292 165.263 mo
207.292 163.8 li
@
199.908 166.726 mo
199.908 163.8 li
@
192.525 165.263 mo
192.525 163.8 li
@
185.141 165.263 mo
185.141 163.8 li
@
177.757 165.263 mo
177.757 163.8 li
@
170.373 165.263 mo
170.373 163.8 li
@
162.989 166.726 mo
162.989 163.8 li
@
IVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf177.74 211.152 mo(2)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 222.994 mo(/C)[-3.37964 0 ]yshIVXETS+Helvetica*1 [0 -8.006 -8.006 0 0 0 ]msf180.108 227.139 mo(4)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 253.783 mo(\()sh%ADOBeginSubsetFont: CCAAAA+Helvetica-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/CCAAAA+Helvetica 1 GetGlyphDirectory74 <001C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |!endend end
%ADOEndSubsetFont
IVXETT+Helvetica [0 -12.157 -12.157 0 0 0 ]msf173.891 249.735 mo(\000J)shIVXETS+Helvetica*1 [0 -12.157 -12.157 0 0 0 ]msf173.891 242.976 mo(\) C)[-4.04822 -3.37964 0 ]ysh199.908 261.335 mo
199.908 163.8 li
@
212.751 171.303 mo
207.27 171.303 li
207.27 171.303 mo
207.27 171.303 li
cp
0 .9617 .904814 0 cmyk
@
218.672 171.303 mo
224.153 171.303 li
224.153 171.303 mo
224.153 171.303 li
cp
@
202.452 183.307 mo
198.207 183.307 li
198.207 183.307 mo
198.207 183.307 li
cp
@
208.373 183.307 mo
212.618 183.307 li
212.618 183.307 mo
212.618 183.307 li
cp
@
185.733 199.563 mo
184.444 199.563 li
184.444 199.563 mo
184.444 199.563 li
cp
@
191.654 199.563 mo
192.943 199.563 li
192.943 199.563 mo
192.943 199.563 li
cp
@
197.164 216.569 mo
197.1 216.569 li
197.1 216.569 mo
197.1 216.569 li
cp
@
203.085 216.569 mo
203.149 216.569 li
203.149 216.569 mo
203.149 216.569 li
cp
@
215.712 174.263 mo
211.765 174.263 211.765 168.342 215.712 168.342 cv
219.659 168.342 219.659 174.263 215.712 174.263 cv
cp
205.413 186.267 mo
201.465 186.267 201.465 180.346 205.413 180.346 cv
209.36 180.346 209.36 186.267 205.413 186.267 cv
cp
188.694 202.523 mo
184.746 202.523 184.746 196.602 188.694 196.602 cv
192.641 196.602 192.641 202.523 188.694 202.523 cv
cp
200.125 219.529 mo
196.178 219.529 196.178 213.608 200.125 213.608 cv
204.072 213.608 204.072 219.529 200.125 219.529 cv
cp
199.383 232.784 mo
195.436 232.784 195.436 226.863 199.383 226.863 cv
203.33 226.863 203.33 232.784 199.383 232.784 cv
cp
196.948 242.537 mo
193.001 242.537 193.001 236.616 196.948 236.616 cv
200.896 236.616 200.896 242.537 196.948 242.537 cv
cp
198.177 249.79 mo
194.23 249.79 194.23 243.869 198.177 243.869 cv
202.124 243.869 202.124 249.79 198.177 249.79 cv
cp
198.572 255.042 mo
194.625 255.042 194.625 249.121 198.572 249.121 cv
202.52 249.121 202.52 255.042 198.572 255.042 cv
cp
197.472 258.293 mo
193.525 258.293 193.525 252.372 197.472 252.372 cv
201.42 252.372 201.42 258.293 197.472 258.293 cv
cp
@
245.398 171.303 mo
212.425 171.303 li
212.425 171.303 mo
212.425 171.303 li
cp
.905547 .71957 0 0 cmyk
@
251.319 171.303 mo
273.746 171.303 li
273.746 171.303 mo
273.746 171.303 li
cp
@
216.264 183.307 mo
189.818 183.307 li
189.818 183.307 mo
189.818 183.307 li
cp
@
222.185 183.307 mo
248.63 183.307 li
248.63 183.307 mo
248.63 183.307 li
cp
@
172.833 199.563 mo
162.989 199.563 li
162.989 199.563 mo
162.989 199.563 li
cp
@
178.754 199.563 mo
193.106 199.563 li
193.106 199.563 mo
193.106 199.563 li
cp
@
206.744 216.569 mo
198.312 216.569 li
198.312 216.569 mo
198.312 216.569 li
cp
@
212.664 216.569 mo
221.096 216.569 li
221.096 216.569 mo
221.096 216.569 li
cp
@
200.03 229.823 mo
195.255 229.823 li
195.255 229.823 mo
195.255 229.823 li
cp
@
205.951 229.823 mo
210.727 229.823 li
210.727 229.823 mo
210.727 229.823 li
cp
@
192.993 239.577 mo
190.664 239.577 li
190.664 239.577 mo
190.664 239.577 li
cp
@
198.914 239.577 mo
201.244 239.577 li
201.244 239.577 mo
201.244 239.577 li
cp
@
197.15 246.829 mo
196.559 246.829 li
196.559 246.829 mo
196.559 246.829 li
cp
@
203.07 246.829 mo
203.661 246.829 li
203.661 246.829 mo
203.661 246.829 li
cp
@
249.345 172.289 mo
251.319 172.289 li
251.319 170.316 li
249.345 170.316 li
249.345 168.342 li
247.371 168.342 li
247.371 170.316 li
245.398 170.316 li
245.398 172.289 li
247.371 172.289 li
247.371 174.263 li
249.345 174.263 li
cp
220.211 184.294 mo
222.184 184.294 li
222.184 182.32 li
220.211 182.32 li
220.211 180.346 li
218.237 180.346 li
218.237 182.32 li
216.263 182.32 li
216.263 184.294 li
218.237 184.294 li
218.237 186.267 li
220.211 186.267 li
cp
176.781 200.549 mo
178.754 200.549 li
178.754 198.576 li
176.781 198.576 li
176.781 196.602 li
174.807 196.602 li
174.807 198.576 li
172.833 198.576 li
172.833 200.549 li
174.807 200.549 li
174.807 202.523 li
176.781 202.523 li
cp
210.691 217.555 mo
212.664 217.555 li
212.664 215.582 li
210.691 215.582 li
210.691 213.608 li
208.717 213.608 li
208.717 215.582 li
206.744 215.582 li
206.744 217.555 li
208.717 217.555 li
208.717 219.529 li
210.691 219.529 li
cp
203.977 230.81 mo
205.951 230.81 li
205.951 228.837 li
203.977 228.837 li
203.977 226.863 li
202.004 226.863 li
202.004 228.837 li
200.03 228.837 li
200.03 230.81 li
202.004 230.81 li
202.004 232.784 li
203.977 232.784 li
cp
196.941 240.564 mo
198.914 240.564 li
198.914 238.59 li
196.941 238.59 li
196.941 236.616 li
194.967 236.616 li
194.967 238.59 li
192.993 238.59 li
192.993 240.564 li
194.967 240.564 li
194.967 242.537 li
196.941 242.537 li
cp
201.097 247.816 mo
203.07 247.816 li
203.07 245.843 li
201.097 245.843 li
201.097 243.869 li
199.123 243.869 li
199.123 245.843 li
197.15 245.843 li
197.15 247.816 li
199.123 247.816 li
199.123 249.79 li
201.097 249.79 li
cp
201.555 253.068 mo
203.529 253.068 li
203.529 251.094 li
201.555 251.094 li
201.555 249.121 li
199.582 249.121 li
199.582 251.094 li
197.608 251.094 li
197.608 253.068 li
199.582 253.068 li
199.582 255.042 li
201.555 255.042 li
cp
196.652 256.319 mo
198.626 256.319 li
198.626 254.346 li
196.652 254.346 li
196.652 252.372 li
194.678 252.372 li
194.678 254.346 li
192.705 254.346 li
192.705 256.319 li
194.678 256.319 li
194.678 258.293 li
196.652 258.293 li
cp
@
204.689 171.303 mo
201.384 171.303 li
201.384 171.303 mo
201.384 171.303 li
cp
.92929 .879301 .889677 .799283 cmyk
@
207.649 171.303 mo
210.955 171.303 li
210.955 171.303 mo
210.955 171.303 li
cp
@
200.836 183.307 mo
198.05 183.307 li
198.05 183.307 mo
198.05 183.307 li
cp
@
203.797 183.307 mo
206.583 183.307 li
206.583 183.307 mo
206.583 183.307 li
cp
@
193.059 199.563 mo
191.775 199.563 li
191.775 199.563 mo
191.775 199.563 li
cp
@
196.02 199.563 mo
197.304 199.563 li
197.304 199.563 mo
197.304 199.563 li
cp
@
198.101 216.569 mo
197.583 216.569 li
197.583 216.569 mo
197.583 216.569 li
cp
@
201.061 216.569 mo
201.579 216.569 li
201.579 216.569 mo
201.579 216.569 li
cp
@
203.209 171.303 mo
205.254 170.638 li
205.254 168.487 li
206.519 170.227 li
208.564 169.563 li
207.3 171.303 li
208.564 173.043 li
206.519 172.378 li
205.254 174.118 li
205.254 171.967 li
cp
199.356 183.307 mo
201.402 182.642 li
201.402 180.491 li
202.666 182.231 li
204.712 181.567 li
203.447 183.307 li
204.712 185.047 li
202.666 184.382 li
201.402 186.122 li
201.402 183.972 li
cp
191.579 199.563 mo
193.625 198.898 li
193.625 196.747 li
194.889 198.487 li
196.934 197.823 li
195.67 199.563 li
196.934 201.303 li
194.889 200.638 li
193.625 202.378 li
193.625 200.227 li
cp
196.62 216.569 mo
198.666 215.904 li
198.666 213.753 li
199.93 215.493 li
201.976 214.829 li
200.712 216.569 li
201.976 218.309 li
199.93 217.644 li
198.666 219.384 li
198.666 217.233 li
cp
196.491 229.823 mo
198.536 229.159 li
198.536 227.008 li
199.8 228.748 li
201.846 228.083 li
200.582 229.823 li
201.846 231.563 li
199.8 230.899 li
198.536 232.639 li
198.536 230.488 li
cp
194.973 239.577 mo
197.019 238.912 li
197.019 236.761 li
198.283 238.501 li
200.328 237.837 li
199.064 239.577 li
200.328 241.317 li
198.283 240.652 li
197.019 242.392 li
197.019 240.241 li
cp
196.177 246.829 mo
198.223 246.165 li
198.223 244.014 li
199.487 245.754 li
201.533 245.089 li
200.269 246.829 li
201.533 248.569 li
199.487 247.905 li
198.223 249.645 li
198.223 247.494 li
cp
196.162 252.081 mo
198.207 251.417 li
198.207 249.266 li
199.472 251.006 li
201.517 250.341 li
200.253 252.081 li
201.517 253.821 li
199.472 253.157 li
198.207 254.897 li
198.207 252.746 li
cp
194.584 255.332 mo
196.629 254.668 li
196.629 252.517 li
197.894 254.257 li
199.939 253.592 li
198.675 255.332 li
199.939 257.072 li
197.894 256.408 li
196.629 258.148 li
196.629 255.997 li
cp
f
286.777 153.822 mo
286.777 39.076 li
156.475 39.076 li
156.475 153.822 li
cp
0 0 0 0 cmyk
ef
gsave
286.777 153.822 mo
286.777 39.076 li
156.475 39.076 li
156.475 153.822 li
cp
clp
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 2456 14 <0001005c0000046f0415000b0037401c037a050220080b7a0a0a0d17171a
067a040920030a7a00190c3f52182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3cf431301335211133112115211123115c01b4ab01b4fe4cab
01b6a801b7fe49a8fe4a01b60000>IVXETS+Helvetica AddT42Char 
1 5032 28 <00020049ffd80411059a001b002700ab402e19052b052816480658056805
8919881a981a09460807212727350a0a182135100504351bc7180d07023c
071e3114b80155400b0d00291b8124380d2947281076c418d4edf4ed10f5
fd397d4b52787a2f18003feded3fed12392fed1112393130437940341f26
191a0b13010312250226220f24280020111e28010319002800260b242800
230e2128011f13212801011a042800250c2728002b2b2b2b012b2b2b2b2b
2b81818181015d01161716333236130e0123220235341233201316151007
02212226350036353426232206151416330110086b374581b6263cb166cf
f1eee8013977424f83fec7d2da0232b19f7b849b8895015a95391ed70149
5f4d0102cbc30128fee69be9fef9cbfeaedca601268db09e9bb1948ca500
>IVXETS+Helvetica AddT42Char 
1 6616 36 <0002001e0000053d05bd0002000a0044b8005d2b00b801b64558b800032f
1bb9000301c43e59b801b64558b800052f1bb9000501be3e59b801b64558
b800092f1bb9000901be3e59bb000001b9000700612b3031010b01133301
2303210323038edfed85e10215da95fdbb9fcc025a0289fd770363fa4301
b8fe4800>IVXETS+Helvetica AddT42Char 
1 7724 42 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>IVXETS+Helvetica AddT42Char 
1 10844 57 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>IVXETS+Helvetica AddT42Char 
2 748 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/plus 14 def
/nine 28 def
/A 36 def
/G 42 def
/V 57 def
/u 88 def
end
IVXETS+Helvetica /Encoding get
dup 43 /plus put
dup 57 /nine put
dup 65 /A put
dup 71 /G put
dup 86 /V put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C 3{/.notdef}rp /G 14{/.notdef}rp /V 10{/.notdef}rp /a /b /c /d /e 15{/.notdef}rp /u 138{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -10.378 -10.378 0 0 0 ]msf179.812 125.003 mo(Au+Au 19.6 GeV)[-6.92206 -5.77014 -6.06073 -6.92206 -5.7702 -2.88507 -5.77014 -5.7702 -2.88507 -5.77014 -2.88507 -8.0741 -5.7702 0 ]yshgrestore
gsave
286.777 153.822 mo
286.777 39.076 li
156.475 39.076 li
156.475 153.822 li
cp
clp
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 2560 15 <000100aafed0018000da000e002d401600230e0a64080a1017171a07340a
640008190f6365182b4e10f44d3cfded4e456544e6003f4dedd4ed313017
3637363534262723353315140607aa451c0f01026dd66076d10c552d2a07
0b07daca77b415000000>IVXETS+Helvetica AddT42Char 
1 5544 31 <0001001cffed04ad04280006006a40405703670387030300201203030202
20120100010620120304030420120505060306040200030505010106050a
03000104020503011a08060019070888215fb5182b2b4ef43c10f6173c11
1239003d3f3f111217392f044d1887102b10872b87102b87102b3130015d
130115090115011c0491fc4403bcfb6f025e01cab4fe97fe96b401cb>IVXETS+Helvetica AddT42Char 
2 1672 92 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>IVXETS+Helvetica AddT42Char 
2 2356 95 <000100900000013b05d20003002940150200010a0517171a0300c1020119
0405c1217765182b2b4ef43c4dfd3c4e456544e6003f3f31302123113301
3babab05d2000000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/comma 15 def
/less 31 def
/y 92 def
/bar 95 def
end
IVXETS+Helvetica /Encoding get
dup 44 /comma put
dup 60 /less put
dup 121 /y put
dup 124 /bar put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine 2{/.notdef}rp /less 4{/.notdef}rp /A /.notdef /C 3{/.notdef}rp /G 14{/.notdef}rp /V 10{/.notdef}rp /a /b /c /d /e 15{/.notdef}rp /u 3{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf207.64 108.424 mo(<1.6 \(GeV/c\), |y|<0.5)[-4.32916 -4.12164 -2.06085 -4.12158 -2.06085 -2.46844 -5.76733 -4.12158 -4.94446 -2.06079 -3.70648 -2.46851 -2.06079 -2.06085 -1.92731 -3.70648 -1.92737 -4.32916 -4.12164 -2.06079 0 ]yshgrestore
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 10608 55 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>IVXETS+Helvetica AddT42Char 
1 15796 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/T 55 def
/p 83 def
end
IVXETS+Helvetica /Encoding get
dup 84 /T put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine 2{/.notdef}rp /less 4{/.notdef}rp /A /.notdef /C 3{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e 10{/.notdef}rp /p 4{/.notdef}rp /u 3{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -5.041 -5.041 0 0 0 ]msf211.193 111.68 mo(T)shIVXETS+Helvetica*1 [0 -7.413 -7.413 0 0 0 ]msf207.64 130.331 mo(0.2<p)[-4.12164 -2.06079 -4.12164 -4.32916 0 ]ysh259.412 125.314 mo
261.703 124.57 li
261.703 122.161 li
263.119 124.11 li
265.41 123.365 li
263.994 125.314 li
265.41 127.263 li
263.119 126.519 li
261.703 128.468 li
261.703 126.059 li
cp
f
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 7488 40 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>IVXETS+Helvetica AddT42Char 
1 8060 43 <000100a10000052f05bd000b003f402108091e0302020401020a07080407
2506051a0d010a250b00190c0c0da0217670182b2b104ef43c4dfd3c4e10
f63c4dfd3c003f3c3f3c392f3cfd3c3130133311211133112311211123a1
c902fcc9c9fd04c905bdfda1025ffa4302affd510000>IVXETS+Helvetica AddT42Char 
1 8172 44 <000100c90000019205bd00030017b8002b2bba00010000002e2b00b80000
2fb800022f303113331123c9c9c905bdfa43>IVXETS+Helvetica AddT42Char 
1 8220 45 <00010023ffd9036d05bd00130042402209061906670b7a06970205780401
09090412020d9204091125001a150a2507191415b80151b3218c70182b2b
4ef44ded4e10f64ded003fed3f12392f5d31305d011407062122263d0133
15141633323736351133036d3766fee2a5eabb6b719f311ec501b6ba67bc
b3e5696978796d43ba03d300>IVXETS+Helvetica AddT42Char 
1 8956 49 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>IVXETS+Helvetica AddT42Char 
1 9380 51 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>IVXETS+Helvetica AddT42Char 
1 10700 56 <000200aaffd9052f05bd00150016003c4023170527053810030a0002053a
1009160316161409250c1a18012514191718a0219570182b2b4ef44ded4e
10f64ded12392f003f3fed3f3c5d31300111141716333237363511331110
07022120032619012101743c59d3fd5b31ca4986fe8cfe8c8549024305bd
fc74a06aa0ad5e9f038cfcc7fef192fef6010a92010f0339>IVXETS+Helvetica AddT42Char 
1 13976 73 <0001001c0000021705d20017004d402b071d060a1d03010f1439160d0612
0a1917171a0e0d1129171207120f0e1f0e020efc14191819fc21677e182b
2b4ef44dfd5d39c42f3cfd3c104e456544e6003f3f3c4dfd3c3fedd4ed31
3012373633321617152e012322061533152311231123353335b5233fb411
24171c190b5220b2b4b295950542345c0202a4020155ae8efc64039c8ea8
0000>IVXETS+Helvetica AddT42Char 
1 15372 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>IVXETS+Helvetica AddT42Char 
1 15556 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>IVXETS+Helvetica AddT42Char 
2 0 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/E 40 def
/H 43 def
/I 44 def
/J 45 def
/N 49 def
/P 51 def
/U 56 def
/f 73 def
/n 81 def
/o 82 def
/r 85 def
end
IVXETS+Helvetica /Encoding get
dup 69 /E put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 78 /N put
dup 80 /P put
dup 85 /U put
dup 102 /f put
dup 110 /n put
dup 111 /o put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine 2{/.notdef}rp /less 4{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G /H /I /J 3{/.notdef}rp /N /.notdef /P 3{/.notdef}rp /T /U /V 10{/.notdef}rp /a /b /c /d /e /f 7{/.notdef}rp /n /o /p /.notdef /r 2{/.notdef}rp /u 3{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -5.93 -5.93 0 0 0 ]msf265.073 119.378 mo(E)sh265.073 115.417 mo(ff. Uncorr.)[-1.56555 -1.67224 -1.67224 -1.67224 -4.28735 -3.3208 -2.97089 -3.3208 -1.99841 -1.67218 0 ]yshIVXETS+Helvetica*1 [0 -6.523 -6.523 0 0 0 ]msf226.291 119.082 mo(HIJING INPUT)[-4.70953 -1.81335 -3.26154 -1.81335 -4.70953 -5.07489 -1.81342 -1.81335 -4.70953 -4.35077 -4.70953 0 ]ysh223.51 128.318 mo
220.352 128.318 220.352 123.582 223.51 123.582 cv
226.668 123.582 226.668 128.318 223.51 128.318 cv
cp
0 .9617 .904814 0 cmyk
@
250.094 126.266 mo
251.673 126.266 li
251.673 124.687 li
250.094 124.687 li
250.094 123.108 li
248.515 123.108 li
248.515 124.687 li
246.936 124.687 li
246.936 126.266 li
248.515 126.266 li
248.515 127.845 li
250.094 127.845 li
cp
.905547 .71957 0 0 cmyk
@
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETS+Helvetica gcheck setglobal} if
1 5772 33 <0001001cffed04ad04280006006c40425800580368038803040020120302
030620120303040420120506050220120101000306040200030501050506
010a03000106001a08010405030219070888215fb5182b2b4ef4173c10f6
3c1112393d003f3f111217392f044d8710182b10872b87102b87102b3130
015d0901350901350104adfb6f03bbfc45049101b6fe37b4016a0169b4fe
3600>IVXETS+Helvetica AddT42Char 
1 8352 46 <0001009c0000054e05bd000b00ba407a0605250527084807580777058803
9803b803c803e7070ba603a60402050528082909a809f902050705070805
0903d4020105050608080709020228030325120404090605052512080807
050409080705040302070609080502040a040301020a0706086b067b06e8
0603061a0d010a250b00190c0dd621765e182b2b4ef43c4dfd3c194e10e6
5d18003f3c3c3f3c3c1217390111173908874d2e2b057d10c5872e182b04
104b52787ac510083c083c31300072715d01715d13331101210901210107
11239cc202cc0113fd9d0274fefdfdfeebc205bdfd3402ccfdb0fc9302e1
e1fe0000>IVXETS+Helvetica AddT42Char 
2 588 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>IVXETS+Helvetica AddT42Char 
IVXETS+Helvetica /CharStrings get begin
/greater 33 def
/K 46 def
/t 87 def
end
IVXETS+Helvetica /Encoding get
dup 62 /greater put
dup 75 /K put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETS+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine 2{/.notdef}rp /less /.notdef /greater 2{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G /H /I /J /K 2{/.notdef}rp /N /.notdef /P 3{/.notdef}rp /T /U /V 10{/.notdef}rp /a /b /c /d /e /f 7{/.notdef}rp /n /o /p /.notdef /r /.notdef /t /u 3{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]IVXETS+Helvetica nfIVXETS+Helvetica*1 [0 -6.523 -6.523 0 0 0 ]msf251.751 119.378 mo(E)sh251.751 115.021 mo(ff. Corr.)[-1.71558 -1.83942 -1.82001 -1.83948 -4.716 -3.65289 -2.19818 -1.83295 0 ]ysh/IVXETS+Helvetica*1 uf/IVXETS+Helvetica uf/Helvetica uf/IVXETT+Helvetica-Identity-H uf/IVXETT+Helvetica /CIDFont ur%ADOBeginSubsetFont: Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c0000038c6670676d00000000000004b800000b90
676c796600000000000062a4000414b06865616400000000000010480000
003668686561000000000000108000000024686d747800000000000010a4
000023306c6f636100000000000033d4000023346d617870000000000000
5708000000206e616d6500000000000057280000070c7072657000000000
00005e340000046e67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a002a0093007600a000ac00b800ab00c50000002bfe55001a
042f002105be002740292a292827262524232221201f1e1d1c1b1a191817
161514131211100d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b000
43617d6818b0004360442d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2c20b0032552582359212d2c69b04061b0
008b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0
112bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb01745
8cb0172344b0177ae5182d2cb002254661658a46b040608b482d2cb00225
46608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b003
2545b019236a4445b01a23444565234520b00325606a20b009234223688a
6a606120b0005258b21a401a4523614459b0005058b21940194523614459
2d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7
830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c456920b00943b0022660b00325b00525
4961b0805358b21940194523616844b21a401a4523606a44b209191a4565
2345604259b00943608a103a2d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c764520b003
254523616818236860442d2c7645b00325452361682318456860442d2c76
45b0032545616823452361442d2c4569b014b0324b505821b0205961442d
b8002b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db8002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db8002f2c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db800302c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db800312c2020456944
b001602020457d691844b001602db800322cb800312a2db800332c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db800342c4b535845441b2121592db800352c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800362c20
20456944b001602db800372cb800362a212db800382c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800392c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db8003b2c2020456944b00160202045
7d691844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db800402c2020456944b001
602db800412cb800402a212db800422c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db800432c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db800442c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db800452c2020456944b001602020457d691844b001
602db800462cb800452a2db800472c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
482c4b535845441b2121592db800492c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db8004a2c2020456944b001602db8004b2c
b8004a2a212db8004c2c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db8004d2c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db8004f2c2020456944b001602020457d691844b001602db800502c
b8004f2a2db800512c4b20b003265358b0801bb040598a8a20b003265358
2321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b003
2653582321b801408a8a1b8a235920b80003265358b0032545b801805058
2321b8018023211bb003254523212321591b2159442db800522c4b535845
441b2121592db800532c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db800542c2020456944b001602db800552cb800542a212d
b800562c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800572c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800582c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80059
2c2020456944b001602020457d691844b001602db8005a2cb800592a2db8
005b2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a
1b8a235920b0032653582321b800c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db8005c2c4b535845441b2121592db8005d2c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db8005e2c2020456944b00160
2db8005f2cb8005e2a212db800602c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800612c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800622c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800632c2020456944b001602020457d691844b00160
2db800642cb800632a2db800652c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800662c4b535845441b2121592d0001
00000000000067a8ffcc5f0f3cf500110800000000005f4d8f0000000000
d8b9a29bf865fc270b9108f9000000090001000100000000000100000629
fe2900000c01f865fced0b910001000000000000000000000000000008cc
05120042000000000239000002390000023900ed02d70052047300000473
0040071d0042055600590187009c02aa008e02aa0044031d004e04ac005c
023900aa02aa0055023900af0239000004730040047300c4047300400473
003104730034047300420473004d0473004b0473004204730049023900e3
023900e304ac001c04ac005c04ac001c0473009c081f00e10556001e0556
009705c7005a05c700a5055600af04e300af0639006305c700a1023900c9
040000230556009c0473009c06aa009705c7009c06390050055600af0639
005005c700b40556006004e3002105c700aa05560034078d00250556002a
0556002a04e3002f023900800239ffbb0239002f03c100780473000002aa
002604730052047300760400003b04730038047300480239001c0473003d
0473008401c7008401c7ffda0400008001c7008906aa0084047300840473
003b047300760473003c02aa00890400004202390017047300800400000b
05c700120400000b040000150400003402acffd50214009002ac002a04ac
00120556001e0556001e05c7005a055600af05c7009c0639005005c700aa
0473005204730052047300520473005204730052047300520400003b0473
004804730048047300480473004802390067023900080239000002390025
047300840473003b0473003b0473003b0473003b0473003b047300800473
00800473008004730080047300500333006f04730068047300380473004b
02cd0095044cfff504e300c705e5001505e50012080000ed02aa008a02aa
00520464005c080000100639004205b4002a0464005c0464005a0464005c
0473ffe1049cffb403f4006a05b400280696001c0464002f0231ff7902f6
003b02ec00310625005e071d004904e3005c04e300ba02aa00e804ac005c
0464ffef047300280464005c04e50071047300c2047300c2080000ed0239
00000556001e0556001e0639005008000049078d00470473fffb080000f1
02aa004e02aa004e01c7008401c700aa0464005c03f40042040000150556
002a0156feaa05f4006002aa00b402aa00aa0400001c0400001c04730050
0239009701c700aa02aa004e0800000e0556001e055600af0556001e0556
00af055600af0239006b0239fff902390020023900020639005006390050
065200690639005005c700aa05c700aa05c700aa023900bd02aa002a02aa
fff702aa001502aa001902aa00f702aa008402aa007902aaffff02aa00a1
02aa002a0473ffe801c7ffd7055600600400004204e3002f040000340214
009005c700210473003d0556002a04000015055600800473008004ac005c
04ac007402aa005702aa000b02aa000706ac005a06ac00a306ac004b0473
0000063900630473003d023900c9055600600400004205c7005a0400003b
05c7005a0400003b047300380556001e047300520556001e047300520556
001e0473005205c7005a0400003b05c7005a0400003b05c700a505480038
055600af04730048055600af04730048055600af04730048055600af0473
0048055600af04730048063900630473003d063900630473003d06390063
0473003d0473003d05c700a10473008405c700350473003e038f00690371
004403330059031f00650239003501c7ffdf063900c9038e008404000023
01c7ffa3055600320400fff10473009c021f00830473009c01c7000c0473
009c021a004e0473009c027b008905c7009c0473008405c7002a0473000a
05c7009c047300840473000e063900500473003b063900500473003b0639
00500473003b05c700b402aa008905c7004902aa001705c700b402aa0042
0556006004000042055600600400004204e300210239001704e3002102e1
001704e30021028fffe205c700aa0473008005c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa04730080078d
002505c700120556002a0400001504e3002f0400003404e3002f04000034
055600600400004204e30021023900170473004b0000fcfc0000fcfc0000
fc9c0000fc680000fc860000fc8a0000fd690000fcc40000fcf60000fc70
0000fc9c0000fd5b0000fcea0000fd120000fc9105c70021063900630473
003d0473009c01c700890556009c0400008005c7009c0473008405c700b4
02aa008901aaffdb023700e102aa005501c7ffda040000800239001c0473
0048047300480400003a047300510000fd3c0000fc660000fc8a0239fffb
0239fffb05c7009c047300840000fcc4056d0024054c0098055600980427
0098059c00250556009807f0000a0554004505c7009805c7009805560098
057e002506aa009805c700980639005005c700980556009805c7005004e3
001d0556002f06d800410556002505db009805360060078d009807a10098
06aa001d070900980536009805c700640800009805b7006a047300560473
0048046200870339008704d9001c04730050063d00170400003304ab0087
04ab0087046200870498001b055400870473008704730048047300870473
007d04000048040000330400001706a800460400001404910087044e005c
063900870657008704e3001b05c7008703ff00870414002f063900870477
005005560098047300500427009803390087023900ba01c7008704000023
05c70050040000480239001d020300290800002506c3001b07e10098067c
008701c7ffdd055600620639004e0473001b055600980462008704000048
0617001b0473001b0556002f0400001705c700980473008704730098031d
00870000fd5b0000fd5b0000fd5b0000fd5b0000fc700000fd930000fd2a
0000fc8a0000fcfc0000fcfc0000fc860000fd690000fcc40000fcf60000
fd930000fc9c0000fc9c0000fc8a0000fc8a0000fc680000fc860000fc66
0000fc680000fc860000fc660000fc660000fd500000fc660000fd5b0000
fc8a0000fc8d0000fd2a000000000239001b0473008306aa008302aa0088
06aa008302aa008902aa0088042b0052042b005302020087033afffd0239
0017023900170400000a05c70011040000140473009c0473009d0473009c
0400008004b2003904b2003905c7005905c7002104890049055600af0556
0060040000420498003906e600aa05950080060a0052021400b6037300b6
023900c3048c002b0400003b0134005102aa00c102aa00c20b06000e0556
00ed029600ed02aa004e01c700aa02aa0055044cfff5042f00c1042f00c2
056500c1056500c202aa0055029600ed02aa0055080000f102d500a4011d
000000000000000000000000000000000000000000000000000000000000
023900000239000002390000023900000239000002390000023900000239
0000023900000000000000000000000000000000000000000000011d0000
008f000002aafff7037000b60473009c02aa005502aa0006044c0072044c
00730556001e04e300ae04730048071c00500568003b0000fd5e0000fd5e
0000fd5e0000fd5e0000fcc90000fcd20000fd980000fccd0000fcef0000
fce10000fcd90000fcec0000fc5e0000fd440000fd4a0000fccf0000fcd1
0000fc860000fc910000fcc10000fcc10000fcc10000fcc20000fcc20000
fc8a01550061027b00610155006101550061046400320464002b03f4002d
03f4002f05b4011305b400280231006b0231fe830464ff330464ffef0464
002b0464002d08fa006f0816006f0556009c023900c9047200c906ab00c9
078f00c905560034078f003409c800340c010034078f00c90556002a078f
002a09c8002a0473009c05c7005a05c700a506aa009701c70084038e0084
0555008405c700840400000b05c7000b078e000b0955000b05c700840400
000b05c7000b078e000b01c700890400003b0473003806aa008409e20074
08c1004f07db003807da006b05a7007102f7005808e7007106f0006b05a1
00530556001e047300520239001e0239ffff063900500473003b05c700aa
0473008005c700aa0473008005c700aa0473008005c700aa0473008005c7
00aa047300800556001e047300520556001e0473005208000010071d0049
063900630473003d0556009c04000080063900500473003b063900500473
003b01c7ffbe09cd005408fc006f07fb00380639006305c7009c04730084
0556001e0473005208000010071d00490639004204e3005c0556001e0473
00520556001e04730052055600af04730048055600af047300480239ff71
01c7ff350239fff801c7ffaa063900500473003b063900500473003b05c7
00b402aaffd605c700b402aa004f05c700aa0473008005c700aa04730080
05c700a1047300840556001e04730052055600af04730048063900500473
003b063900500473003b063900500473003b063900500473003b0556002a
0400001502aa004e023900c90556001e0473005205560097047300760556
009704730076055600970473007605c7005a0400003b05c700a504730038
05c700a50473003805c700a50473003805c700a50473003805c700a50473
0038055600af04730048055600af04730048055600af04730048055600af
04730048055600af0473004804e300af0239001c063900630473003d05c7
00a10473008405c700a10473008405c700a10473008405c700390473001b
05c700a1047300840239ffec01c7ff9e02390027023900160556009c0400
00800556009c040000800556009c040000800473009c01c700890473009c
01c7ff9d0473009c01c7ffb50473009c01c7ffc006aa009706aa008406aa
009706aa008406aa009706aa008405c7009c0473008405c7009c04730084
05c7009c0473008405c7009c04730084063900500473003b063900500473
003b063900500473003b063900500473003b055600af04730076055600af
0473007605c700b402aa008905c700b402aa008305c700b402aa004a05c7
00b402aa0018055600600400004205560060040000420556006004000042
0556006004000042055600600400004204e300210239001704e300210239
001704e300210239ffe204e300210239ffe705c700aa0473008005c700aa
0473008005c700aa0473008005c700aa0473008005c700aa047300800556
00340400000b055600340400000b078d002505c70012078d002505c70012
078d002505c70012078d002505c70012078d002505c700120556002a0400
000b0556002a0400000b0556002a0400001504e3002f0400003404e3002f
0400003404e3002f04000034047300840239001005c70012040000150239
001c0556001e047300520556001e047300520556001e047300520556001e
0473ffcb0556001e047300520556001e047300520556001e047300520556
001e047300520556001e047300520556001e047300520556001e04730052
0556001e04730052055600af04730048055600af04730048055600af0473
0048055600af047300480556008c0473fff0055600af04730048055600af
04730048055600af04730048023900ae02390099023900c701c700840639
00500473003b063900500473003b063900500473003b063900500473ffd8
063900500473003b063900500473003b063900500473003b071c00500568
003b071c00500568003b071c00500568003b071c00500568003b071c0050
0568003b05c700aa0473008005c700aa0473008006e600aa0595008006e6
00aa0595008006e600aa0595008006e600aa0595008006e600aa05950080
0556002a040000150556002a040000150556002a040000150556002a0400
0015055600af04730048055600af04730048056d007505df009604860052
048600870723000a05890017056d002404860043056d002404860043056d
00750486005208d9001006dd0012054f0043040a003005df009604860087
05df009604860087065500500486005205df006004120037056d00100412
0019056d001004120019056d00100412001905ac005e047a006907480098
0600008d08000010071d004906aa009706aa008405c700b402aa004c0222
ffc50556001b05c700c504e300d505c70029055600c504e3004805c700b0
06390071023900ba055600b00556002f071d00be05c700b004e300620639
007105c700b0055600c504e3005804e1002f0556002905c700500558003d
06a8007f063900640239000a0556002904e3005a04e300b40473001204e3
006804730077038d004a04e3003b04e5008f023900b0047300b004730025
04e300b8047300420400007104e3006f04e300aa0473004c04e3006f0400
003b04e300b805c700770473000e05c7008f0610006a0239000a04e300b8
0239009a0222000b0000fd19023900b0016c0088016c00880000fcfc0000
fcfc016c008802ca001a02b5001a03050088031200880222002e0222002f
031e00880362006f033300880362006f0735007f0625005e0639ffef01c7
008401c700aa047200ed06ac009c06ac00ed04730048047300480556001e
0473005204730052055600af04730048055600af04730048055600af0473
00480239fff00239ffdb01c70079063900500473003b063900500473003b
063900500473003b055600600400004205c700aa047300800400000b06e6
00aa05950080060200610473ffd605c7fff20473008406aa008403f0009c
0460009a03a6005a03e9000c02cf00020448005c06020061047300500655
004e0486004c0639005002aa001e07c6002407c6002408e6ffca0000f920
0000fa0b0000fa0b0000fa060000fa0606020061047300500655004e0486
004c0222002f02b5001a0473002504e3002f040000340473003b04d20084
04dc00380473007204bd003804d7003d0473008204d7008202220086078d
00470387008802aa008604d2003c04b80032052b00320772003805600017
043a001705ce001c04c2008904b8008901a9008a01a9008a01c700aa0187
007802aa000802aa00c102aa003a0187007802aa000802aa00c102aa003a
01a9008a01a9008a02aa001e02aafff7023a0042023a004100e4ffed0155
00450155004401c4004402e400090200000b023a004e023a004f0256000e
0256000e025600240256002402aa00550256002e0256002e0256002e0200
00210200000600e300440256003a023a000902560024025600240256000e
0256000e02aa0078023a004f0000fccd0000fca20000fca20000fd6f0000
fd6f0000fc490000fc490000fb9e0000fca20000fc490000fccd0000fcc2
0000fcc20000000002390000000000000000000000000000031d004e031d
004e06da00c107c60024023900e308e6009c07c60024071d00d00703001b
023900800239008000000000000000000000000000000000000000000000
0000067b003a023a00200239001a02390021023a002702390025023a0021
023900240256002e0155002b0256002e0155004701550022023a0042023a
0020023a006202390020023900180239001a02390021023a002702390025
023a0021023900240256002e0155002b0256002e0155004701550022063c
0011063900630473009c0473009c0556002a06ab00280600003007560011
0473007207c8005806ac005a05c7005a0556005904e500710696001c06ab
003406ab0028055600af04730076055600af0473007604e3000206390050
04c400a1024100230369001105c7005002bb0023033afffd0473009c0473
009c01c7002a01c7002a0473003d04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a05c1005b05b3005b076c00880776
008807760088078d008807ca006f07a0006f047300770473007704730077
04730077047300770473007706c2008806c200880874008808890088085b
00880868008804e3003b04e3003b04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b073300880733008808e5008808fa008808cc008808d9
00880929006f0929006f023900b0023900b002390041023900390239003d
0239003d023900230239002303a5008803a5008805570088056c0088053e
0088054b0088059b006f059b006f04e3006f04e3006f04e3006f04e3006f
04e3006f04e3006f07a5008807a5008809570088096c0088093e0088094b
008804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b806c20088088900880868008808b8006f0610006a0610006a0610
006a0610006a0610006a0610006a0610006a0610006a0791008807910088
0943008809580088092a0088093700880987006f0987006f04e3005a04e3
005a047300770473007704e3003b04e3003b023900b0023900b004e3006f
04e3006f04e300b804e300b80610006a0610006a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a0811005b080c005b
0991008809d80088097f0088099b008809d3006f09ce006f04e3003b04e3
003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b096c0088
096c00880b1e00880b3300880b0500880b1200880b62006f0b62006f0610
006a0610006a0610006a0610006a0610006a0610006a0610006a0610006a
09ca008809ca00880b7c00880b9100880b6300880b7000880bc0006f0bc0
006f04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
0556001b0556001b0666002e0661002f07a9001b04e3003b04e3003b04e3
003b04e3003b04e3003b06ac002e06a7002f06d2002e06ba002f083100b0
0239ffcf0239ffce0239ffcc0239ffda0239ffdc0239ffc50239ffe10239
ffee0343002e0348002f04e300b804e300b804e300b804e300b804e300aa
04e300aa04e300b804e300b8055600290556002906b1002e0713002f06c2
00880610006a0610006a0610006a0610006a0610006a075a002e0789002f
0792002e07a9002f0878005e04e3005a0473007704e3003b023900b004e3
006f04e300b80610006a05d5007206a7002f06ba002f0348002f0789002f
0713002f07a9002f0239ffcb04e300b804ac002504ea011704f700a102f3
001b02bb00230473002504e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a0239ffd70239ffe40239ffd20239ffd7
0239ffdb0239ffdb0239ffcd0239ffe00239ffc80239ffc30239ffdc0239
ffdc0239ffd70239ffd70239ffd20239ffcd0239ffd20239ffd704e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b80666002e0661002f05c1005b076c00880776008805b3
005b07760088078d00880666002e0661002f05c1005b076c008807760088
05b3005b07760088078d00880343002e0348002f0348002f03a500880557
0088053e008803a50088056c0088054b00880343002e0348002f0348002f
03a5008805570088053e008803a50088056c0088054b008806b1002e0713
002f0713002f06c20088088900880868008806c200880889008808680088
06b1002e0713002f0713002f06c20088088900880868008806c200880889
00880868008805c700b405c7005a0639005001c70020051d0029055600af
05c700a10000fd31055200680473003806390050047300480772005b0738
004505e5001306ac003d06ac003d06ac003a06ac003a066d001d04e3001b
082200d005e1008a06a8007f05c7008f0556001e0400000b079900d005cf
008a04da003802ca002405d900160588003805c700b404730052031f0000
04da00a103eb00a1064900a104cf00840556009c0400008004e3002f0400
003408d9001406dd0030054f0072040a0047056d00a50412007a05df00ac
0486009105df00630412003f04f8002b0412003a056d002e0412002405ac
00ac047a007705ac00ac047a00770556002a0556002a04d900bc037c0091
05ac00ac047a0077063200a504df007a075f00ac059b00910556002a0556
002a06fe0028054e00350748003a059400260748003a0594002607720048
05b3003805df00ac0486009104730052054f00ac054f00ac06a8007f04dc
005d0855004405e0002605560025040000040556003404b6000b0400003b
054f0072040a004705f10026049c0024023900bd056d002e041200240556
00340556001e05c7005a0400003b0473ffe804e3002101c7003e02bb0023
04e30021055600af0473009c0473009c055600af047300480456002301c7
ffda05c700aa01a9002101a9002102aa003302aa003302aa003a02aaffe9
023900e302aa003c02aa003c057f005b04ac002504ac0074023900e304ac
0025057c004c04ac0074023900e3023900e3063900710412003f0412003f
055600ae0473008005c7005a06aa009705dd0097059b004605c7005a05c7
005a05c7005a0400003b0400003b0400003b0473003805ca003006c6002e
063f002f031f001a062e001904e900310488004502aa00be02aa00be02aa
00be02aa00be0277003b0277003b034b0000034b0000034b0000034b0000
034b00000487001203f7001e045e0054043600830436008302fd005d034f
0012069900390655003e052900300000f86506e1002204e9002001e0004b
01e9004b015d0025015d000a0199002a0198001202fb0017030400170267
0013025700120257001202c8004b01d8000701d8000707e9003a097c004b
0931004909310002013c004b04570022058900050589000d04be00150442
001801d8000701d8000703fe003d03fe003d0404003a036f000b0467003c
0000fb760000fcc10000fc080000fc730000fc730000fa630000fce00000
fe950000fc8e0000fc510000fa0b0000fc9f046500360465002204010034
0401002407760017044c001b03ea001d051a00340653003204c8003306c2
008808890088086800880556001b0556001b0239ffdf0239ffe105560029
055600290404001505e5001405e5001405e500140800ffeb0800ffeb0800
03b40800038c080003b40800038c0800ffe90800ffe9080003b40800038c
0800ffe90800ffe9080000000404001500e40042023a0029023a0024023a
001e02000006023a002405c7005a0639006305c7005a0471002205520029
04e300210556001e04d0002805c2004e04d9004e05c7005a06aa008405d0
003106640037082d00350552006805520068039c003f0380003b039c003f
0380003b039c00530381003c039c00530381003c02eb005302e3005302e3
005302e3005302eb005302eb000802e3000002e3000002e3000002eb0008
0363005303630053036300530363005303630053027f00010330004503b2
002603c3000b050b0031069c00290390007f0000fc4f0000fc4f0000fc42
0000fc420000fc420000fc420000fc010000fc010000fd44046500220401
00240a3900500873003b0436008304360083043600830329003a0329003a
03550028050d00340329005403290028032900330329003302f6003a02f6
003a0329002b0143005e02d7005b04bb005e0329005e0329002a02d70029
032900270329002a03290054019400100329005b0373003704bb005e02d7
0008037800800329000d0378004a04dc004d0632002a04be003304730039
0473003b04e6003804e1003a04fa0039076e003e0329000a0143005e01e4
00610329005b02d70008037800800329000d037800790329000a042b0052
05c5001001c70084045e0054070a002e06cb003504d6001b04fa001a02d8
000d04e9001b0330000d02d9000a02db000c01c700aa02aa004e01c700aa
02aa004e01c700aa02aa004e01c700aa02aa004e053d007a0708003b0310
008f0574009708c000220473004002e00034047300400473003104730034
047300420473004d0430002b047300420473004903cc000903cc000903cc
0009042800580425004e048d00560437003d06a600560450004804460048
04f8001f06c70056044e0056042d003d07c7005a049c0056049e007505e3
00560446003f0475005205e9005c046a0075054e00560475003106660056
0448003b05e300560468005604a400560487007504b40058049a005604a4
007504d1003d049a007504250044043d003d04be0056043d004e0458004e
0458004e04ba005605df0056044c00aa04d500b10473005e0473002f0425
00330473007b0437003d04250056049e0050048b003d04b8005604b80056
072b005204a20048048f004804db001f074c007104c10071047d003d085c
005604dd005604dd007b06a20071046f003d04b4004e0619005604ba0085
05d5005604ee0056068b004804a80048063f005204cd005604dd005604c3
007b053b005604e7005604e70085051d005604e70085049600480493003d
0521004e04c50056049300480491004804e7005606060056049c004804c3
007b049c004804ae00560527004c02f6007b044e0056048d005604c50056
05ae005605ee006f000000000000006c0000006c0000006c0000006c0000
00cc0000011c0000028000000430000005c0000007500000079400000824
000008a80000099800000a0000000a6400000aa000000ae000000b280000
0c0400000c5000000d6800000ec000000f5c00001084000011b000001244
000013a8000014d40000152c000015a80000163c0000168c000017240000
1828000019d800001a5400001b5c00001c7c00001d4000001dc800001e2c
00001f7c00001fec0000201c000020a000002194000021e4000022fc0000
23a8000024a400002550000026c4000027d800002970000029cc00002a5c
00002b1800002cb000002da800002e6c00002f0400002f5c00002fbc0000
30200000306c00003094000030c000003254000033280000342c00003504
000036980000373000003880000039200000397c000039f000003ad00000
3b1400003c0c00003cc400003db400003e9800003f800000400c000041cc
0000426c000043200000444c000045a80000460800004734000047d40000
48b4000048f8000049f400004ab000004ac800004ae000004ca800004cc0
00004cd800004cf000004d0800004d2000004d3800004d5000004d680000
4d8000004d9800004f4400004f5c00004f7400004f8c00004fa400004fbc
00004fd400004fec000050040000501c000050340000504c000050640000
507c00005094000050ac000050c4000050dc000050f400005150000051c8
0000538c00005518000056e400005770000057e4000058fc00005a9c0000
5c0000005ce400005d1400005d7c00005e5c00005f400000611c00006270
000062f800006398000064480000656800006668000067a00000686c0000
68cc0000697c00006a0400006b6000006c3400006d5400006f7c00007124
0000721c00007280000072c400007374000074b0000075a8000076340000
76e40000779800007804000078040000781c000078340000784c00007978
00007b5800007b9000007bcc00007c6c00007cfc00007d5c00007dbc0000
7e2c00007f1400007f2c00007f4400007fa40000811000008180000081f0
000082b400008364000083e800008440000084a400008538000087600000
877800008790000087a8000087c0000087d8000088240000889400008914
00008960000089780000899000008a3800008a5000008a6800008a800000
8a9800008ae800008b2c00008bb000008bdc00008c3800008c6800008d7c
00008e6000008ea800008f7400008fb400009084000091140000912c0000
91440000915c00009174000091d0000092c0000094280000944000009458
00009510000095dc00009604000096bc00009708000097c0000098b40000
99ac00009abc00009c8800009d4000009eb40000a02c0000a0840000a2b4
0000a4f00000a5080000a5200000a5380000a5500000a6180000a6300000
a6480000a6e00000a8a40000a8bc0000a8d40000a8ec0000a9040000a91c
0000a9340000a94c0000aa840000aa9c0000aab40000ab600000ac680000
ac800000ac980000acb00000acc80000ace00000acf80000ad100000ad28
0000ad400000ad580000ad700000ad880000ada00000adb80000add00000
aeb80000aed00000af700000af880000afcc0000afe40000b0dc0000b0f4
0000b17c0000b1940000b1ac0000b1c40000b1dc0000b1f40000b20c0000
b2240000b23c0000b2540000b2e40000b3440000b35c0000b3740000b38c
0000b3a40000b3bc0000b3d40000b3ec0000b4040000b41c0000b4340000
b44c0000b5c80000b7300000b7480000b7600000b7780000b7900000b7a8
0000b7c00000b7d80000b7f00000b8080000b8200000b8380000b8500000
b8680000b8800000b8980000b9b00000b9c80000b9e00000b9f80000ba10
0000ba280000ba400000bb0c0000bbf40000bc0c0000bc240000bc3c0000
bc540000bc6c0000bc840000bc9c0000bcb40000bccc0000bce40000bcfc
0000bd140000bd2c0000bd440000bed80000c06c0000c1000000c1fc0000
c3640000c3900000c3c00000c4040000c4880000c4b40000c5140000c544
0000c5a40000c6b40000c6fc0000c73c0000c7900000c86c0000c9380000
c9640000ca500000ca680000ca840000ca9c0000cab40000cacc0000cae4
0000cafc0000cb140000cb2c0000cb440000cbc00000cc380000cc640000
ccb40000cd1c0000cd940000ce4c0000cf040000cfc80000d14c0000d20c
0000d2380000d2980000d2b00000d2c80000d3680000d42c0000d4740000
d4cc0000d5c00000d7500000d78c0000d85c0000d8bc0000d9680000dadc
0000db740000dc3c0000dca80000dd380000ddf40000de7c0000dfc80000
e0300000e1140000e2080000e2500000e2c00000e4680000e4d40000e558
0000e6000000e6740000e7200000e8140000e9100000e9fc0000eae40000
ec0c0000ed840000ef100000f0e00000f24c0000f2880000f34c0000f438
0000f4e00000f61c0000f6b40000f77c0000f7e40000f8700000f92c0000
f9b40000faf00000fb540000fca00000fd940000fddc0000fe4800010090
000100f80001017c0001021c000102900001033c000104300001052c0001
0614000106d8000107f400010934000109d400010ae000010b3800010b94
00010bc400010c1400010ca400010d7400010e3000010eb000010f300001
107c000111b4000112d8000113fc00011480000115d00001168800011774
00011800000118880001197000011ab400011bb000011c6000011d0c0001
1d8000011df400011e6000011ecc00011f2000011f7400011fc80001201c
000120680001209c0001210400012178000121a4000121d0000121fc0001
222c0001228c0001239c000123cc0001240c00012450000124ac0001250c
00012590000125bc000125e80001266c00012698000126c4000127040001
282000012860000128b400012914000129a400012a0c00012a0c00012aac
00012b4400012c1400012c8400012d8000012df000012e6000012f5c0001
30a8000130fc0001318400013224000132c800013310000133880001340c
000134f0000135d4000136b400013724000138300001393800013a100001
3b3000013c9400013cf400013e6000013f5c00013fb40001406c0001413c
000142a4000142d400014338000143940001444400014500000145540001
4584000145b400014994000149f800014a2800014ad000014b2c00014b58
00014bdc00014c2400014c6800014cc800014d2400014d5000014d800001
4dac00014dd800014e0c00014e0c00014e0c00014e0c00014e0c00014e0c
00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c0001
4e0c00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c00014e0c
00014e0c00014e0c00014e0c00014e0c00014e4800014eac00014fd40001
5000000150140001506c000150cc000150e40001513c000151f400015374
000154e000015538000155d400015670000156c800015844000158ec0001
593800015a4c00015af000015ba800015ca400015d3c00015e1800015e8c
00015f3400015f7800015fd80001601800016044000160ac000160f40001
613c00016188000161d40001624800016274000162b8000162e400016310
000163280001633800016350000163600001637800016388000163a00001
63b4000163cc000163dc000163f4000164040001641c0001643400016444
000164540001646c0001648c000164a4000164b4000164cc000164ec0001
65140001652c0001653c00016554000165740001658400016594000165a4
000165b4000165c4000165dc000165fc00016614000166240001663c0001
665c000166840001669c000166ac000166c4000166e4000166f400016704
00016714000167240001674400016764000167840001679c000167b40001
67cc000167e4000167fc000168140001682c000168440001685c00016874
0001688c000168a4000168bc000168d4000168f400016914000169340001
69540001697400016994000169b4000169d4000169f400016a1400016a34
00016a5400016a6c00016a8400016a9c00016ab400016acc00016ae40001
6afc00016b1400016b3400016b5400016b6c00016b8400016b9c00016bb4
00016bcc00016be400016bfc00016c1c00016c3c00016c5400016c6c0001
6c8400016c9c00016cb400016ccc00016ce400016cfc00016d1400016d2c
00016d4400016d5c00016d7400016d8c00016da400016dbc00016dd40001
6dec00016e0400016e1c00016e3400016e4c00016e6400016e7c00016e94
00016eac00016ec400016edc00016ef400016f0c00016f2400016f3c0001
6f5400016f6c00016f8c00016fac00016fcc00016fec000170040001701c
0001703c0001705c000170740001708c0001709c000170ac000170c40001
70dc000170f40001710c000171240001713c000171540001716c00017184
0001719c000171b4000171cc000171e4000171fc000172140001722c0001
72440001725c000172740001728c000172ac000172cc000172ec0001730c
000173240001733c000173540001736c0001738c000173ac000173c40001
73dc000173f40001740c000174240001743c000174540001746c00017484
0001749c000174b4000174cc000174e4000174fc000175140001752c0001
754c0001756c000175840001759c000175b4000175cc000175e4000175fc
000176140001762c0001764c0001766c000176840001769c000176b40001
76cc000176e4000176fc000177140001772c000177440001775c00017774
0001778c000177a4000177bc000177d4000177ec000178040001781c0001
783c0001785c0001787c0001789c000178bc000178dc000178fc0001791c
000179340001794c000179640001797c00017994000179ac000179c40001
79dc000179fc00017a1c00017a3400017a4c00017a6400017a7c00017a94
00017aac00017acc00017aec00017b0c00017b2c00017b4c00017b6c0001
7b8400017b9c00017bb400017bcc00017be400017bfc00017c1400017c2c
00017c4400017c5c00017c7400017c8c00017ca400017cbc00017cdc0001
7cfc00017d1c00017d3c00017d5400017d6c00017d8400017d9c00017db4
00017dcc00017de400017dfc00017e1400017e2c00017e4400017e5c0001
7e7400017e8c00017ea400017ebc00017ed400017eec00017f0400017f1c
00017f3400017f4c00017f6400017f7c00017f9400017fac00017fc40001
7fdc00017ff40001800c000180240001803c000180540001806c00018084
000180a4000180c4000180e4000181040001812400018144000181640001
8184000181a4000181c4000181e400018204000182240001824400018264
00018284000182a4000182c4000182e4000183040001831c000183340001
834c000183640001837c00018394000183b4000183d4000183f400018414
00018434000184540001847400018494000184b4000184d4000184ec0001
85040001851c000185340001854c000185640001857c00018594000185b4
000185d4000185f400018614000186340001865400018674000186940001
86b4000186d4000186ec000187040001871c000187340001874c00018764
0001877c00018794000187ac000187c4000187dc000187f40001880c0001
88240001883c000188540001886c000188840001889c000188b4000188cc
000188e4000188fc000189140001892c000189440001895c000189740001
898c000189a4000189bc000189d4000189f400018a1400018a3400018a54
00018a6c00018a8400018a9c00018ab400018acc00018ae400018afc0001
8b1400018b2c00018b4400018b5c00018b7400018b8c00018ba400018bbc
00018bd400018bec00018c0400018c1c00018c3400018c4c00018c640001
8c7c00018c9400018cac00018cc400018cdc00018cf400018d0c00018d24
00018d3c00018d5400018d6c00018d8400018d9400018da400018dbc0001
8dd400018dec00018e0400018ebc00018f1c0001909c000190d800019114
00019174000191bc0001923c000193bc000193ec000194540001949c0001
9550000195d40001962800019790000197f4000198c80001992000019968
000199c800019b5800019bc400019d0400019e6c00019ef400019f8c0001
a0d40001a29c0001a3340001a4ac0001a6000001a7180001a7b80001a8b4
0001a9240001a9900001aa0c0001ab0c0001ab500001acc80001ae080001
af2c0001b0440001b1940001b2140001b2940001b4200001b4ec0001b5a0
0001b7380001b7e80001b8a00001b8ec0001b94c0001b9b00001ba0c0001
ba680001bac40001baf00001bb200001bb7c0001bc140001bcb80001bd28
0001bd980001bdc40001bdf00001be600001beec0001bf5c0001bff00001
c1800001c2ec0001c44c0001c4a80001c5040001c51c0001c5340001c54c
0001c56c0001c58c0001c5ac0001c5cc0001c5ec0001c6040001c61c0001
c63c0001c65c0001c67c0001c69c0001c6bc0001c6dc0001c6f40001c70c
0001c7240001c7440001c7640001c7840001c7a40001c7bc0001c7d40001
c7f40001c8140001c82c0001c8440001c85c0001c9180001ca080001cab0
0001cb440001cc500001cc8c0001cd680001ce640001ced80001cf500001
d08c0001d1480001d2380001d2e80001d37c0001d4540001d4980001d4fc
0001d5600001d7a80001d8500001d8b40001d9180001d9440001d9700001
d9880001d9a00001d9b80001d9d00001d9fc0001da940001db240001db98
0001dc0c0001dc9c0001dd640001deac0001dfe80001e10c0001e26c0001
e3500001e4680001e4dc0001e6380001e6f40001e7b00001e8f00001e9c8
0001ea800001ebc00001edac0001eeac0001f01c0001f1680001f1cc0001
f22c0001f2c80001f3240001f3540001f3800001f3b00001f3dc0001f40c
0001f4340001f4600001f48c0001f4ec0001f5880001f5c80001f6080001
f6a40001f7880001f7f40001f8680001f8e40001f9780001f9ec0001fa64
0001fb480001fc2c0001fc6c0001fcac0001fcf00001fd340001fd600001
fdc80001fe300001fe9c000200000002006800020098000200e400020180
000201c4000202080002024800020288000203980002047c000204c80002
05080002054800020598000205e800020648000206a80002072400020764
000207c800020814000208e8000209240002092400020924000209240002
092400020924000209b800020ac400020b3c00020ba000020c2800020c40
00020ce800020e2400020ec800020f3c00020fb400020fb400020fb40002
0fb400020fb400020fb400020fb4000211640002128c00021310000213f8
0002154c0002159c00021780000218e40002194c00021974000219b40002
1a6800021b1400021bc000021ce800021d2800021dd400021f0c00021f90
00022078000221cc0002221c000223fc00022560000225c8000225f00002
2630000226e400022790000227f4000229100002294c00022988000229e4
00022a6400022c5800022d3800022db000022e8800022ee000022fc00002
315800023198000232100002322800023238000233180002344400023524
00023644000236cc000238100002389000023938000239c800023b440002
3bd000023c8000023dd800023f2c00023f8000023fd8000241040002411c
000241340002414c000241640002417c00024194000241ac000241c40002
41dc000241f40002420c000242240002423c000242540002426c00024284
0002429c000242b4000242cc000242e4000242fc000243140002432c0002
43440002435c000243740002438c000243a4000243bc000243d4000243ec
000244040002441c000244340002444c000244640002447c000244940002
44ac000244c4000244dc000244f40002450c000245240002453c00024554
0002456c000245840002459c000245b4000245cc000245e4000245fc0002
46140002462c000246440002465c000246740002468c000246a4000246bc
000246d4000246ec000247040002471c000247340002474c000247640002
477c00024794000247ac000247c4000247dc000247f40002480c00024824
0002483c000248540002486c000248840002489c000248b4000248cc0002
48e4000248fc000249140002492c000249440002495c000249740002498c
000249a4000249bc000249d4000249ec00024a0400024a1c00024a340002
4a4c00024a6400024a7c00024a9400024aac00024ac400024adc00024af4
00024b0c00024b2400024b3c00024b5400024b6c00024b8400024b9c0002
4bb400024bd400024bf400024c1400024c3400024c5400024c7400024c94
00024cb400024cd400024cf400024d1400024d3400024d5400024d740002
4d9400024db400024dd400024df400024e1400024e3400024e5400024e74
00024e9400024eb400024ed400024ef400024f1400024f3400024f540002
4f7400024f9400024fb400024fd400024ff4000250140002503400025054
0002507400025094000250b4000250d4000250f400025114000251340002
51540002517400025194000251b4000251cc000251e4000252040002521c
0002523c00025254000252740002528c000252a4000252bc000252d40002
52ec0002530c00025324000253440002535c0002537c00025394000253ac
000253c4000253dc000253f40002540c000254240002543c000254540002
546c000254840002549c000254b4000254cc000254e4000254fc00025514
0002552c000255440002555c000255740002558c000255a4000255bc0002
55d4000255ec000256040002561c0002563c00025654000256740002568c
000256ac000256c4000256dc000256f40002570c000257240002573c0002
57540002576c000257840002579c000257b4000257cc000257e4000257fc
000258140002582c000258440002585c000258740002588c000258a40002
5974000259c000025a1400025acc00025b3800025b5000025b7000025b90
00025bb000025bd000025bf000025c1000025c3000025c5000025c700002
5c9000025cb000025cd000025cf000025d1000025d3000025d5000025d70
00025d9000025db000025dd000025df000025e1000025e3000025e500002
5e7000025e9000025eb000025ed000025ef000025f1000025f3000025f50
00025f7000025f9000025fb000025fd000025ff000026010000260300002
60500002607000026090000260b0000260d0000260f00002611000026130
000261500002617000026190000261b0000261d0000261e8000262000002
62180002623000026248000262600002627800026290000262a8000262c0
000262d8000262f000026308000263200002633800026350000263680002
6380000263a0000263b8000263d0000263e8000264000002641800026430
00026448000264600002648000026498000264b0000264c8000264e00002
64f8000265100002652800026540000265600002657800026590000265a8
000265c0000265d8000265f0000266080002662000026640000266580002
667000026688000266a0000266b8000266d0000267f80002692400026aa4
00026afc00026bb000026cc400026d8000026db800026e5800026e700002
6f5800026ff4000271f000027420000275f80002781400027ad000027cb8
00027e1c00027f40000280640002816000028228000283680002841c0002
849800028514000285f0000286dc0002878c000288300002891800028a30
00028b2c00028d8800028e7000028ebc00028f0800028f9c000290440002
90dc00029178000291e00002924400029318000293ec000295dc0002983c
000298cc00029950000299e000029a7000029ba000029cc400029d280002
9d9000029e2000029eb400029f4800029ff40002a0780002a10c0002a168
0002a1c40002a21c0002a2740002a3340002a3ec0002a4980002a5340002
a5f80002a6800002a7240002a7a80002a8400002a8c00002a9b80002aaa8
0002ac380002adc40002ae580002af100002afb00002b05c0002b2340002
b3500002b46c0002b5f40002b7280002b8740002b9c40002ba340002ba9c
0002bb400002bbf40002bcc40002bdf80002bf440002bfe80002c0900002
c0c00002c1600002c1f80002c2400002c2b40002c3d80002c5180002c594
0002c63c0002c68c0002c6f80002c7600002c8380002c91c0002c9e40002
cac00002cc140002ccc80002cd700002ce040002ce440002cea40002ceec
0002cf380002cf640002cfe80002d0440002d0ac0002d0f00002d1ac0002
d2480002d2c80002d3240002d3c00002d4980002d5180002d5980002d638
0002d7100002d7a40002d83c0002d92c0002da580002db300002dc000002
dcc80002de300002df100002e0140002e1200002e1f00002e2e40002e3dc
0002e5140002e6c40002e7b40002e8b80002e96c0002ea140002ead80002
ebd80002ec140002ec500002ec8c0002ecc40002ed100002ed4c0002ed90
0002edd40002ee280002ee7c0002eed40002ef100002ef6c0002eff00002
f0a80002f1600002f2b00002f3240002f4040002f5600002f6680002f6a8
0002f7e00002f91c0002f9580002fa140002fa4c0002fa840002fb3c0002
fbf80002fc400002fd080002fe240002febc0002ff540002ffc40002fff0
0003001c000300c4000300ec0003013000030174000301d40003021c0003
029c0003031c000304140003046400030490000304bc0003066c000307dc
000308ac0003098000030a9400030b4000030ba800030c2400030cd80003
0e1000030e6c00030ebc00030eec00030f800003111000031174000311c0
00031290000313640003143800031514000316fc000317f0000318f40003
19e000031af400031c6c00031c8400031c9c00031cb400031d1c00031db8
00031dfc00031e7400031ed800031f700003205800032270000324880003
26300003265c00032688000326bc000326f00003272c00032768000327a4
000327e00003281c0003285800032894000328d0000328fc000329e40003
2a3000032bb000032c5800032d7000032dd800032e8800032fac00033104
000332400003338c000334c400033560000336640003382c00033ab80003
3ccc00033e3000033fa4000340580003422c000343d8000344300003448c
00034530000345ec000346900003474c000347f8000348b8000349640003
4a2400034ae400034ba000034c5c00034d1800034dd400034e9400034f50
0003500c000350c800035188000351c4000352100003525c000352a80003
52e4000353a4000353f40003549c000354e000035608000357dc00035834
0003597800035ac000035afc00035b3800035b7400035bb000035c040003
5c5400035cc800035d9c00035e7800035e9000035ea800035f8400036044
0003610400036288000364000003651c000366dc000367e4000368e80003
699400036a4400036b3c00036c3c00036d6800036db800036e2800036f00
00036fc8000370e0000371b0000372300003730000037428000374d00003
757400037648000377180003775c0003791c000379b800037b4000037c14
00037d6400037e7800037f4c000380600003818400038260000384140003
857800038648000386980003870c000387b0000387f4000389b400038a50
00038b7400038c4400038d9c00038e3c00038e8c00038f08000390b80003
9210000393a40003953800039690000398400003994000039a1800039b7c
00039bd800039c8800039ce400039d8c00039dec00039e9800039ef40003
9fa00003a1100003a1780003a29c0003a4b00003a5200003a6500003a698
0003a7840003a91c0003a9a40003aa900003abe80003ac3c0003ae280003
af940003afd80003b0140003b0580003b12c0003b1e40003b2c80003b3cc
0003b4ec0003b5bc0003b6cc0003b7fc0003b9040003b9b40003baa40003
bbec0003bcf40003bdec0003bed00003bfbc0003c0980003c1b40003c268
0003c3700003c4580003c5c00003c6ac0003c7a00003c8b00003ca080003
cb140003cc240003cd0c0003ce480003cf680003d0480003d1380003d288
0003d3dc0003d4e40003d5c40003d6c80003d80c0003d9a40003da400003
da900003db800003dc040003dcf80003de100003df180003dfd40003e0bc
0003e1800003e2640003e37c0003e4d00003e5ac0003e6c40003e7f80003
e9200003e9fc0003eaec0003ec700003ed9c0003ee980003efac0003f0a4
0003f1840003f2b00003f3680003f44c0003f54c0003f6bc0003f7b80003
f8e40003f9e80003fb3c0003fc480003fd580003fe340003ff80000400b0
0004018800040278000403a8000404d0000405d4000406b4000407b40004
091800040a4c00040b5400040c7000040d8400040e5c00040f440004101c
00041120000411d8000412c8000413a0000414b00001000008cc006f0009
006b00070002001000100067000007e80b90000400010000003902b20001
000000000000005000000001000000000001000900500001000000000002
000700590001000000000003001f02160001000000000004000902350001
0000000000050008023e0001000000000006000902460001000000000007
0032024f0001000000000012000903f80001000000000100000904010001
0000000001010010040a0001000000000102000e041a0001000000000103
0014042800010000000001040012043c00010000000001050009044e0001
000000010007002f02810001000000020007003c02b00001000000030007
003002ec0001000000040007003a031c0001000000050007003603560001
0000000600070030038c0001000000070007003c03bc0003000104030002
000c01580003000104040002000600cc0003000104050002000e01760003
000104060002000c00e60003000104070002000c007c0003000104080002
000801920003000104090002000e006000030001040b0002001000f20003
0001040c0002000e006e00030001040d00020008019a00030001040e0002
000c01a20003000104100002001000a80003000104110002000a00880003
000104120002000600b80003000104130002001000980003000104140002
000c01020003000104150002000e010e0003000104160002000c00da0003
000104180002000c01c60003000104190002000e012a00030001041a0002
0012016400030001041b0002000e01d200030001041d0002000c01380003
0001041e00020008014400030001041f0002000c014c0003000104210002
000e01ae0003000104220002001201e000030001042a0002001801fe0003
000104390002000c01f200030001043e0002000a01bc0003000108040002
000600920003000108090002000e01840003000108160002000e011c0003
00010c010002000800d2000300010c0a0002000e00bea920313939302d32
303036204170706c6520436f6d707574657220496e632e20a92031393831
204c696e6f7479706520414720a920313939302d3931205479706520536f
6c7574696f6e7320496e632e48656c766574696361526567756c61720052
006500670075006c006100720043006f007500720061006e0074004e006f
0072006d0061006c30ec30ae30e530e930fc5e3889c44f53005200650067
0075006c006900650072005200650067006f006c006100720065c77cbc18
ccb40052006500670075006c006100726a196e969ad406390627062f064a
004e006f0072006d0061006c004e006f0072006d0061006c004e006f0072
006d00610061006c0069004e006f0072006d0061006c0052006500670075
006c006100720052006500670075006c00610072041e0431044b0447043d
044b0439004e006f0072006d0061006c0e1b0e010e150e34004e006f0072
006d0061006c004e006f0072006d0061006c0052006500670075006c0061
0072006e00690052006500670075006c006100720052006500670075006c
00610072039103c003bb03ac05e805d205d905dc004e006f0072006d00e1
006c0052006500670075006c0065007200420069006100730061004e006f
0072006d0061006c0052006500670075006c006100720417043204380447
04300439043d043804390928093f092f092e093f09240054006800f4006e
006700200074006801b01edd006e006748656c7665746963613b2031352e
30643165333b20323031392d30332d323148656c76657469636131352e30
6431653348656c76657469636148656c7665746963612069732061207265
67697374657265642074726164656d61726b206f66204c696e6f74797065
20414748656c7665746963612065737420756e65206d617271756520648e
706f738e65206465204c696e6f7479706520414748656c76657469636120
6973742065696e2065696e676574726167656e657320576172656e7a6569
6368656e20646572204c696e6f7479706520414748656c76657469636120
8f20756e206d61726368696f207265676973747261746f206469204c696e
6f7479706520414748656c7665746963612069732065656e206765726567
69737472656572642068616e64656c736d65726b2076616e204c696e6f74
79706520414748656c766574696361208a72206574742072656769737472
6572617420766172756d8a726b6520669a72204c696e6f74797065204147
48656c76657469636120657320756e61206d617263612072656769737472
616461206465204c696e6f7479706520414748656c766574696361206572
20657420726567697374726572657420766172656dbe726b652074696c68
bf72656e6465204c696e6f7479706520414748656c7665746963614c6967
617475726573436f6d6d6f6e204c69676174757265734e756d6265722053
706163696e6750726f706f7274696f6e616c204e756d626572734d6f6e6f
737061636564204e756d626572734e6f204368616e6765000000b8005d2b
01ba000501b9005f2b01bf01bb003e00340029001d0012000000652bbf01
bc004200340029001d0012000000652bbf01bd003a00340029001d001200
0000652b00bf01b7004d003d003700280012000000652bbf01b80060004f
00370028001b000000652bbf01b90047003d0029001d0012000000652bbf
01ba004200340029001d0012000000652b00ba01be000400642bb801b620
457d691844b800532bb800492bb8003f2bb800352bb8002b2b4118008001
a6009001a600a001a600030069018b0079018b0089018b0099018b000400
89018b0099018b00a9018b00b9018bb2040840ba0179001a014a400b041f
5414191f180a0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d00
09410a01a0019f0064001f01a50025017a00480028019ab3296c1f60410a
01a9007001a9008001a90003008001a9000101a9b21e321fbe012c002504
01001f0126001e0401b61fe7312d1fe531b80201b21fc227b80401b21fc1
1eb80201400f1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b804
01b61fa91d6c1f931eb8019ab21f921db80101b21f911db80101b21f751d
b80201b61f6d29961f6431b8019ab21f4c96b802abb21f391db80156400b
1f3638211f351de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802ab
b21f201eb8012540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa01
9b002a019bb2254a1fba019b0025017ab349293896b8017bb348283125b8
017a403648289629482725294c1f252946272729482756c80784075b0741
0732072b072807260721071b071408120810080e080c080a08080807b801
acb23f1f06bb01ab003f001f01abb308060805b801aeb23f1f04bb01ad00
3f001f01adb70804080208000814b8ffe0b40000010014b801abb4100000
0100b801abb606100000010006b801adb300000100b801ad401f04000001
000410000001001002000001000200000001000002010802004a00b0018d
b806008516763f183f123e113946443e113946443e113946443e11394644
3e113946443e11394660443e11394660443e11394660442b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa
1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b6542
2b2b4b5279b376706a66456523456023456560234560b08b766818b08062
2020b16a704565234520b003266062636820b003266165b070236544b06a
234420b176664565234520b003266062636820b003266165b066236544b0
762344b10066455458b166406544b27640764523614459b36242725d4565
23456023456560234560b089766818b080622020b172424565234520b003
266062636820b003266165b042236544b072234420b1625d4565234520b0
03266062636820b003266165b05d236544b0622344b1005d455458b15d40
6544b262406245236144592b2b2b2b456953427374b8019a2045694b20b0
2853b049515a58b020615944b801a62045694475000000>
[16257 16325 16277 16241 16045 16361 16349 16373 16341 15953 16333 16361 15785
16177 16241 16369 7669 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2456 14 <0001005c0000046f0415000b0037401c037a050220080b7a0a0a0d17171a
067a040920030a7a00190c3f52182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3cf431301335211133112115211123115c01b4ab01b4fe4cab
01b6a801b7fe49a8fe4a01b60000>Helvetica AddT42Char 
1 2660 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>Helvetica AddT42Char 
1 5772 33 <0001001cffed04ad04280006006c40425800580368038803040020120302
030620120303040420120506050220120101000306040200030501050506
010a03000106001a08010405030219070888215fb5182b2b4ef4173c10f6
3c1112393d003f3f111217392f044d8710182b10872b87102b87102b3130
015d0901350901350104adfb6f03bbfc45049101b6fe37b4016a0169b4fe
3600>Helvetica AddT42Char 
1 6616 36 <0002001e0000053d05bd0002000a0044b8005d2b00b801b64558b800032f
1bb9000301c43e59b801b64558b800052f1bb9000501be3e59b801b64558
b800092f1bb9000901be3e59bb000001b9000700612b3031010b01133301
2303210323038edfed85e10215da95fdbb9fcc025a0289fd770363fa4301
b8fe4800>Helvetica AddT42Char 
1 7488 40 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>Helvetica AddT42Char 
1 7724 42 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>Helvetica AddT42Char 
1 8060 43 <000100a10000052f05bd000b003f402108091e0302020401020a07080407
2506051a0d010a250b00190c0c0da0217670182b2b104ef43c4dfd3c4e10
f63c4dfd3c003f3c3f3c392f3cfd3c3130133311211133112311211123a1
c902fcc9c9fd04c905bdfda1025ffa4302affd510000>Helvetica AddT42Char 
1 8172 44 <000100c90000019205bd00030017b8002b2bba00010000002e2b00b80000
2fb800022f303113331123c9c9c905bdfa43>Helvetica AddT42Char 
1 8220 45 <00010023ffd9036d05bd00130042402209061906670b7a06970205780401
09090412020d9204091125001a150a2507191415b80151b3218c70182b2b
4ef44ded4e10f64ded003fed3f12392f5d31305d011407062122263d0133
15141633323736351133036d3766fee2a5eabb6b719f311ec501b6ba67bc
b3e5696978796d43ba03d300>Helvetica AddT42Char 
1 8352 46 <0001009c0000054e05bd000b00ba407a0605250527084807580777058803
9803b803c803e7070ba603a60402050528082909a809f902050705070805
0903d4020105050608080709020228030325120404090605052512080807
050409080705040302070609080502040a040301020a0706086b067b06e8
0603061a0d010a250b00190c0dd621765e182b2b4ef43c4dfd3c194e10e6
5d18003f3c3c3f3c3c1217390111173908874d2e2b057d10c5872e182b04
104b52787ac510083c083c31300072715d01715d13331101210901210107
11239cc202cc0113fd9d0274fefdfdfeebc205bdfd3402ccfdb0fc9302e1
e1fe0000>Helvetica AddT42Char 
1 8956 49 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>Helvetica AddT42Char 
1 10608 55 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>Helvetica AddT42Char 
1 12480 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>Helvetica AddT42Char 
1 13572 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>Helvetica AddT42Char 
1 15372 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>Helvetica AddT42Char 
1 15556 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>Helvetica AddT42Char 
2 588 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/plus 14 def
/hyphen 16 def
/greater 33 def
/A 36 def
/E 40 def
/G 42 def
/H 43 def
/I 44 def
/J 45 def
/K 46 def
/N 49 def
/T 55 def
/a 68 def
/e 72 def
/n 81 def
/o 82 def
/t 87 def
end
Helvetica /Encoding get
dup 43 /plus put
dup 45 /hyphen put
dup 62 /greater put
dup 65 /A put
dup 69 /E put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 78 /N put
dup 84 /T put
dup 97 /a put
dup 101 /e put
dup 110 /n put
dup 111 /o put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/IVXETU+Helvetica /Helvetica findfont ct_VMDictPut/IVXETU+Helvetica*1 [43{/.notdef}rp /plus /.notdef /hyphen 16{/.notdef}rp /greater 2{/.notdef}rp /A 3{/.notdef}rp /E /.notdef /G /H /I /J /K 2{/.notdef}rp /N 5{/.notdef}rp /T 12{/.notdef}rp /a 3{/.notdef}rp /e 8{/.notdef}rp /n /o 4{/.notdef}rp /t 139{/.notdef}rp]IVXETU+Helvetica nfIVXETU+Helvetica*1 [0 -5.93 -5.93 0 0 0 ]msf240.797 126.779 mo(HIJING+GEANT)[-4.28137 -1.64856 -2.96497 -1.64856 -4.28137 -4.61353 -3.46313 -4.61353 -3.95526 -3.95526 -4.28137 0 ]yshIVXETU+Helvetica*1 [0 -8.599 -8.599 0 0 0 ]msf194.91 109.016 mo(Net-Kaon)[-6.20837 -4.78101 -2.3905 -2.8634 -5.73547 -4.78107 -4.78107 0 ]yshIVXETU+Helvetica*1 [0 -11.25 -11.25 0 0 0 ]msf298.526 155.495 mo(>)shgsave
308 567 mo
308 .0709839 li
-.480011 .0709839 li
-.480011 567 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETU+Helvetica gcheck setglobal} if
1 15796 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>IVXETU+Helvetica AddT42Char 
2 0 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>IVXETU+Helvetica AddT42Char 
IVXETU+Helvetica /CharStrings get begin
/p 83 def
/r 85 def
end
IVXETU+Helvetica /Encoding get
dup 112 /p put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETU+Helvetica*1 [43{/.notdef}rp /plus /.notdef /hyphen 16{/.notdef}rp /greater 2{/.notdef}rp /A 3{/.notdef}rp /E /.notdef /G /H /I /J /K 2{/.notdef}rp /N 5{/.notdef}rp /T 12{/.notdef}rp /a 3{/.notdef}rp /e 8{/.notdef}rp /n /o /p /.notdef /r /.notdef /t 139{/.notdef}rp]IVXETU+Helvetica nfIVXETU+Helvetica*1 [0 -7.401 -7.401 0 0 0 ]msf303.855 168.225 mo(part)[-4.11493 -4.11499 -2.46448 0 ]yshgrestore
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IVXETU+Helvetica gcheck setglobal} if

1 0 3 <> IVXETU+Helvetica AddT42Char 
1 5544 31 <0001001cffed04ad04280006006a40405703670387030300201203030202
20120100010620120304030420120505060306040200030505010106050a
03000104020503011a08060019070888215fb5182b2b4ef43c10f6173c11
1239003d3f3f111217392f044d1887102b10872b87102b87102b3130015d
130115090115011c0491fc4403bcfb6f025e01cab4fe97fe96b401cb>IVXETU+Helvetica AddT42Char 
1 9380 51 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>IVXETU+Helvetica AddT42Char 
1 12884 69 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>IVXETU+Helvetica AddT42Char 
1 13096 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>IVXETU+Helvetica AddT42Char 
1 13976 73 <0001001c0000021705d20017004d402b071d060a1d03010f1439160d0612
0a1917171a0e0d1129171207120f0e1f0e020efc14191819fc21677e182b
2b4ef44dfd5d39c42f3cfd3c104e456544e6003f3f3c4dfd3c3fedd4ed31
3012373633321617152e012322061533152311231123353335b5233fb411
24171c190b5220b2b4b295950542345c0202a4020155ae8efc64039c8ea8
0000>IVXETU+Helvetica AddT42Char 
1 14128 74 <0003003dfe3b03e80449001f002d002e00b7404d36144908490958085909
880ca91ba81da927a62bb91b0b4008031622290ec40a221d1f070406291d
190a121d0a0f2e072e2e051c032e162e2d29051a300c0e270d3e26271c19
2f3087217242182b2b4ef44dedf4ed394e10f64dfde4f51112392f003f3f
ed3fed3f3fed10ed1112393931304379402c23281a1e0b1124251026231e
262600281a262600110b0e21000f0e0c0d251d222601271b2926000f0c12
2100002b2b2b01103c103c2b2b2b2b2b818181005d001716173533111407
06212226273316171633323736270e012322241110003300262322070615
1416333237363501027c5e3335a63c70fec9adec0eb70d273d83cf402603
36987daefefb0107ba0144a47fbe4625937cc24f2cfed104423e234387fc
32cc76da9ba548273c9256dd5250f7011d010d012efea1c0b25f9ab5bdaf
6384022d0000>IVXETU+Helvetica AddT42Char 
1 14624 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>IVXETU+Helvetica AddT42Char 
1 15056 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>IVXETU+Helvetica AddT42Char 
1 15124 80 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>IVXETU+Helvetica AddT42Char 
2 140 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>IVXETU+Helvetica AddT42Char 
2 748 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>IVXETU+Helvetica AddT42Char 
2 928 89 <0001000b000003ea042f00060102402e4201c50102006700680268036706
87048805a700a802084700480245044a0586048905c704c8050849287328
0708b80109b321677e182b2b4b5279b8ff70b40105042004b80183b70303
6d1202010205b80183401e06066d12000001050604030101050203060300
0605040a0817171a03af02ba018400000184b301af0619194ef4184dfde0
e0fd194e456544e618003f3c3f173c1239011112391239074d2e2b104ee4
4d072e2b104ee44d2b4b5179402502291203030400291206060501050203
0603000605040a0817171a020403af050001af0619194ef4184dfd3939fd
3939194e456544e618003f3c3f173c12390507102b07102b313001715d00
5d7113090133012301dc011e012bc5fe6cc0fe75042ffc980368fbd1042f
>IVXETU+Helvetica AddT42Char 
IVXETU+Helvetica /CharStrings get begin
/space 3 def
/less 31 def
/P 51 def
/b 69 def
/c 70 def
/f 73 def
/g 74 def
/i 76 def
/l 79 def
/m 80 def
/s 86 def
/u 88 def
/v 89 def
end
IVXETU+Helvetica /Encoding get
dup 32 /space put
dup 60 /less put
dup 80 /P put
dup 98 /b put
dup 99 /c put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 115 /s put
dup 117 /u put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IVXETU+Helvetica*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen 14{/.notdef}rp /less /.notdef /greater 2{/.notdef}rp /A 3{/.notdef}rp /E /.notdef /G /H /I /J /K 2{/.notdef}rp /N /.notdef /P 3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /.notdef /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]IVXETU+Helvetica nfIVXETU+Helvetica*1 [0 -11.25 -11.25 0 0 0 ]msf298.526 389.372 mo(A)sh298.527 382.06 mo(verage Number of Participant Nucleons <N)[-5.64749 -6.255 -3.76868 -6.25497 -6.27753 -6.25497 -3.1275 -8.14484 -6.255 -9.39365 -6.255 -6.255 -3.76868 -3.14996 -6.255 -3.1275 -3.15002 -7.50366 -6.27747 -3.74615 -3.15002 -2.51984 -5.625 -2.51984 -6.27747 -6.255 -6.255 -3.15002 -3.12744 -8.14484 -6.255 -5.64752 -2.51978 -6.255 -6.255 -6.27753 -5.625 -3.15002 -6.57001 0 ]yshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/IVXETU+Helvetica*1 uf/IVXETU+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
