%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: sigmapt_general_alice_gavin.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For: Gary Westfall
%%CreationDate: 9/17/18
%%BoundingBox: 0 0 505 351
%%HiResBoundingBox: 0 0 504.3282 350.8858
%%CropBox: 0 0 504.3282 350.8858
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 92 8
%%BeginData: 9128 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0BFF7DFD54A8FFFD07A8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8
%FFA8FF7DFD0AFFA87DA8FD53FF7DFD07FF7DFD05FF7DFF7DA8FFFF7DFFFF
%A87DFFFFFF7DFF7D7DFD0BFFA8FD53FF7D52A8A87DA87DFFA827A8A87DFF
%A87DA87D52FF7D27FFA852FD04A852A87D7DFD0AFFA8A8A8FD52FF7D27A8
%527D52527D7D27A87D52A8FF7DA85252FF7D52A87DA8A852277D7D7DA8A8
%FD0BFF7DA8A8FD09FFA8FD46FFA87D7D527D52FFFFA8527D527D27FFFF52
%A87D7DFF7D52A8FF527D7D527DFF27FFA8FD0AFFA8A8A8FFA8FFA8A8A8FF
%A8FFA8A8A8FFA8FFA8A8A8FFA8FD3DFFA8FFA8A8A8FFFFFFA8FFFFA8A8FF
%FFFFA8FFA8FFA8FFA8FFFFFFA8FFA8FD04FFA8FD0BFF7DA8FD1CFFA9A9A9
%FD53FF7DFD0AFFA8A8A8FD13FFFD05A8FFA8A8A87DA8A87EA97E7E7EFD2D
%FFA8527D52277D7D7DA85227A8FD15FFA8FD0BFFA8FD23FFA9FFA9A9A9FD
%2AFFA852FFA87DFF7D27FF5252A8FD15FFA8FD0AFFA87DA8FD26FFA97EA9
%7EA97EA8A8FFA8FFA8FD1FFFA87D52FF52FF52277D5252FD16FFA8FD0BFF
%7DFFA8FD1BFFCAFFCAFFCAFD07FFAEFFA9A97EA985A9A8FD21FF7DA8A87D
%7DA87D7D7DA87DFD15FFA8FD0AFFA8A8FD1EFFCAFFCAFFCAFFCACACACBCA
%FFCAFFCAFFCAFFA9A97FFD04A9FFFFFFCAFD38FFA8FD0BFFA8FD2BFFCAFF
%CAFFCAFFCAFFCACBA8A97FA97E847EFFA8FD35FFA8FD0AFFA8A8FD32FFCA
%FFCAFFCACBCAA8A2A27EA3A9AFA9FD32FFA8FD0BFF7DA8FD3AFFCAFFCACB
%A2A9A2A9A2AFA9A9A8FD2BFF7DFFFF7D7D7DA8A8FFFFFFA8A8A8FD3FFFCF
%FFCACBA2A27E7878A9A9AFAFFD26FFA8FFFD07A8FFFFFFA8FD47FFCBFFA8
%A9A2A9A3A9A9FD23FFA8FFFFA8A827FD05FFA8A8FD4CFFA8CBA8A27E7E53
%7EA9FD1EFFA8FFFFFF7DA8FD06FFA8FD51FFCACBA8A2A2A9A9FFAFFD19FF
%A8FFFF5252A8FD05FFA8A8FD56FFA8A9A2A37EA97DA8FD15FFA8FFA8A8A8
%FFA8A8FFFFA8FFA8FD5BFFA8A27EA9A9FD13FFA8FFFF7DA87D7DA8FFA852
%A8A8FD5EFFA8CB7EA27E7E7EFD0EFFA8FD09FF7DFF7DFFA8A8FD60FF7EA2
%A3A9A9FD0BFF7DFD04FFA8FFFFFFA852A87D7DA8A8FD63FFA8A253FD0AFF
%A8FFA8A87DA87DA8FFFF7DFF7DA8FD72FFFD06A8FFA8A8FFFFA8A8A8FD72
%FFA8FFFD04A87DA8FD04FF7DA87DFD2FA87DFD13A87DFD13A87DFD0BA87D
%FD07A87DFD05A87DFD05FFA8A8FFFFFFA8FD047DA87D7D7DA87D7D7DA87D
%7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87DA87D
%A87D7D7DA87D7D7DA87D7D7DA87DA87DA87DA87DA87D7D7DA87D7D7DA87D
%7D7DA87D7D7DA87D7D7DA87DA87DA87DA87DA87DA87DA87D7D7DA87D7D7D
%A87DA8FD0A7DFFFFFF7DA852A8FD04FF7DFD53FFA87DFD06FFA852FD04FF
%A852A87D7DA852FFFF7D7DFFFFFF52FF52FFA8FFFFA85252A8FD04FFA8A8
%A8FD09FFA8FFA8FFA87DA8FFA8FD40FF7D27A8527D7D52A8A827A8527DA8
%FF7D527D7D527DA87D7DA87D527D7DA8A8FFA8FFFFFFA87D52FD05FF7DFD
%0BFFA8FFFFFF7EA985A9A8FD3FFF52527D7D52A87DA852527DA852FFFF7D
%7D7D527D52FF7D7D7D52277D7D52A8FF7DFFA87DFFFFA87DFFFFFFA87DA8
%FD0FFFA9AFA9A97FA9A9FFA9FD39FF7DA87D7D7D52A8FFFD057D52A8A852
%A852A87D7DFFFF527DA87D7DFF52FFFFA8FFA8A87DA8A8FD05FFA8FD15FF
%A9AFA9A9A9AFA9FD57FFA8A8A87DA8A8A87DA8FFFFA87DA8FD0EFFCACACB
%CACACAFFCAFFCACBA8A97EA97EA97DA8A8CFA8FD2EFFA8A8A87DA8A8FFA8
%7D7DFD16FFA8FFFFFFA8A8A8FD05FFA8FD15FFCAFFCBFFCAFFCAFFCACBA2
%A97EA9A9A9A8FD2CFFA852A85252A87D27FF5252A8FD15FFA8FFFFA8FD07
%FFA8A8FD22FFA8A9A8A97EA9A2A8A2FD04CAFFA8CFCAFD1FFFA87D7DFF7D
%FF5227A85252FD16FFA8FFFFFFA8A8FD06FF7DFD29FFA9FFA9A97FA97E7D
%7DCACAFFCAFD1DFF7D7DA87DA87D527D527D7DFD15FFA8A8FFFFA8A8FD05
%FFA8A8A8FD2DFFFD04A97FA985A9A2CBA2CACAFFCAFFCAFD13FFA8A8A8FF
%7DA8A8A87DA8A8A8FD15FFA8A8A87DA8A87DA8A8FFFFFFA8FD36FFAFA9AF
%A9A97FA97DA2A2CBCAFFCAFD2FFF7D7DFD04FFA8A8FFFFFFA8A8FD3CFFA8
%A97EA9A8A97EA27EA8A2A9A8FD2AFFA8A8FD04FFA87DA8FFFFFFA8FD45FF
%FD04A978A2A8CBFD26FFA87DFD04FFA87DFFFFFFA87D7DFD47FFA8A8A8A9
%7EA97EA9A8FD22FFA8A8FFFF7D7D7DA8FD04FFA8FD0CFFA852FD07FFA8A8
%FD08FFA8A8A87DA8FD0BFF7D7DFD1EFFA9A9A2A97EA9A9FD1DFFA87DFFA8
%5252A8FD04FFA8A8FD0CFFA852FFA852A852A8527D52FFFD067D52A8527D
%52527D7D527D7D7D527D52FF7D5252A8527D527D7DFD1BFFA9A853A97EA9
%A8FD1AFFA8A8FFFFA87D52FD05FFA8FD05FFCAFFCAFFCAFFFFFF7DFF5252
%F8A8A82752A8FF52277D7D52527D7DA87D7D7D527DA8527D527D527DA8FF
%7DA8527D275227A8FD20FFA9A9A2A9A9FFA8FD15FFA87DFFA87D52A8FD04
%FFA8A8FD06FFCAFFFFFFCAFF7D52527D277D527D525252FF5252527D5252
%277DFD05527D527D5252275227A8A852525227A852527DFD23FFA8CB7E7E
%78A9A9FD12FFA8A8FF7D7DA8A8FD05FFA8FD0DFFA8FD05FFA8FFA8FFFFFF
%A8FF52A8FFFFA8FFFFFFA8FD05FFA8FFA8FFFFFFA8FD2FFFA2A9A2A9A9A8
%A8FD0DFF7D7DFFFFA87DA8FFFFA8FFA8A8FD0CFFA8FD07FFA8FD06FFA8A8
%FD0BFFA8FD39FFA8A3537EA9FFCFA8A8FD08FFA8A8FD04FF7DA8FFFF52FF
%A8FD0CFFA8527DA8FFFFFFA8A8FFFF7DA8FFA852FD0AFF7D7DFD05FFA8A8
%FD36FFA9A97EA97EFD09FFA87DFD04FFA852FFFF7DA87DA8A8A8FFFFFFA9
%FFA9FFA9FFA87D5252275252527D7D527DA8A82752527D27FD05527D527D
%7D7DFD06527D277D277DFD34FFA8FD0AFFA8A8FFFF7DA852A8FFFF52FF7D
%FFA8FFFFFFFD06A9FFA827A8525252A87D7D525252A8A87D7D52275252A8
%527D5252277D7D7D527D27527D7D2752527D7DFD3FFFA87DFFA85252A8FF
%FFA87DA8A8A8FD0BFF7D7DFF7D527D7D7D52FD047DFF52FD077D527D527D
%527D5252527D7D7D527D52A8527DA8FD3EFFA8A8FFFFA85227FD05FF7DFD
%73FFA87DFFA87D52A8FD04FFA87D7DA87DFD13A87DFD0BA87DFD07A87DFD
%0BA87DA8A8A87DA8A8A87DA8A8A87DFD30A87DA8FF7D7DA8A8FD05FF52A8
%7D7D7DA87DA87D7D7DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA8
%7DA87D7D7DA87DA87DA87D7D7DA87DA87DA87DA87DA87D7D7DA87D7D7DA8
%7D7D7DA87D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D
%7DA87DA87DA87DA87D7D7DA87DA87D7D7DA87DA87DA87DA8527DFFFFA852
%A8FD04FFA87DA8FD05FFA8CF7D7EA8FD47FF7D52527DFD04FF527D52A8FF
%FF527DFFA852A87D7DFF7D277DFF7D52A852FFFFFD04A8FFFFA8A8A8FFFF
%FF7DFD09FFA9AFFD05A9FD42FFA87D52277DA8FD047D5252A8FFFF52FFFF
%A87D277DFFA87D7D527D7DA8A8FFFFA852A87D7D7DA8FD04FFA87DA8FD0D
%FFA9A984A95A7E7EA9A9FD3BFFA827527D527D52A85252527D52FFA87DFF
%FFFD047DFFFF7D7D27A85252A8FFFFFD04A87DA87D7DA8FFFFFF7DFD13FF
%AFFFFD05A9FD38FFA852FF7D7DFFFFFF7DFFFF52A8FF7D52FD04A87D7DFF
%A87D7D7DFFA87DFFFFFFA8FD04FFA85227A8FFFFA8A8FD08FFCACACAFFCA
%CACACBCACACAFFCACFCAFFA8A9A2A9537E84AFA9FD52FFA8FD04FFA87DFD
%05FF7DA8FD14FFCAFFCBFFCFFFCACAA8CBA2A97FA9A9FFA8CACAFD2EFFA8
%FFFFA8FFA8FFA8A8A8FD13FFA8FD0AFFA87DFD22FFA8A9A87E53A2A2A8A2
%CBCAFFA8FD24FFA827FF27FFA8527D7D7D52527DFD13FFA8FD0BFF7DFD29
%FFFD04A97E777ECBA8FFCAFD1FFF7D52FF7DFFFF7D7DFFFF7D52A8FD13FF
%7DFD0AFFA87DA8FD2BFFA9FFA8A9A9A97FA97E7E77A8A8CFCAFFCAFD15FF
%A852277D527D7D52527D7D52527DFD13FFA8FD0BFF7DFD35FFFD06A9A2A8
%A2CBCAFD12FFA8A8FF7DA87DA87DFF7DA8A87DA8FD13FFA8FD0AFFA87DFD
%3CFF7E7EA9A97EA3A2A8A8FD2EFFA8FD0BFF7DFD42FFA853A9A2A9A2CBA9
%FD29FFA8FD0AFFA8A8FD42FFA8FFFFFFA9FF7E5378A9A2A9A8FD24FFA8FD
%0BFF7DA8FD08FFA8FD3FFFA8FFFFCBA9A37EA9A9FD21FFA8FD0AFFA87DFD
%08FF527DA8A8FFFF7DA8A8FFA8A8A8FFA8FF7D7DFFFFA8FFA8FFA8FFA8FD
%2BFFA87EA8A97EA3A2CBFD1DFFA8FD0BFF7DFD08FF7D7D7DFD04527D7D7D
%52527D7DA827A87DFFFD05527D525252FD2FFFA87E7EA9A2FD1BFF7DFD0A
%FFA87DFD06FFA8FFA852525227527D7D52527D7D27A87D27527DFF27277D
%7D7D525227A8FD30FFA8FFA9A97E787ECBA9FD16FFA8FD0BFF7DFD08FFA8
%7DA87D7D7DA87DA87DA87DA87DA87DA87DFF7DA87D7D7DA87D7D7DFD35FF
%A8FFA2A97E7EA8FD13FFA8FD0AFFA87DFD5CFFCBA97EA27EA9A8A8FD0FFF
%A8FD09FF7DFF7DFD08FFA87DFD0FFFA8FD47FFA97E4DA9A9FFA8FD0BFFA8
%FD08FFA852A8A8FD05FFA8A8FF277D7DA87DA87D7DA8A87DA87DA87D7D52
%A87DA8FFA87DA87D7D7DA87D7DA8FD3BFFA8FFA8A97E777DFD0AFFA8FD09
%FF7DFF7DFFA8FFFFFFA8A8FFA87D7D527D527D52522752527D7D527D7D52
%7DFFFF2752527D527D52527DFD41FF7D7EA3A9A8FD07FFA8FD08FFA852A8
%7DA8A8A8FFFFA8A8FF7D52A87DA8525252277D527D5227277D525252A8FF
%5252527D7D525227A8FD44FFA97E77FD06FFA8FD09FFA8FF7DFD09FFA8A8
%7DFFA8FFA8FFFD0BA8FFA8A8A8FFA8FFA8FFA8FD45FFA8A8FD06FF7DFD0A
%FFA87DA8FD09FFA8FD68FFA8FD0BFF52FFA8A8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8
%FFA8FFA8A8A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FF7DFD0BFFA852527D277DFFFD3CA852A852527D
%277DFFFD2AA8FD0DFF7DA87D7DFD3DFFA87DA87D7D7DA8FD37FFA8FD047D
%FD3DFF7DA87D7D527D7DFD37FFA852FF52FD3EFF7D7DA852A852FD72FF7D
%A87D7DFD7CFFA852A8A8FD7CFFA85252FD7CFFA87DFD04A87D7DA8FD78FF
%A8FFFF52272727A8FD7BFF7DFFA8FDB3FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2018-01-11T15:40:33-05:00</xmp:CreateDate>
         <xmp:MetadataDate>2018-01-11T15:40:33-05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-01-11T15:40:33-05:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>180</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUg8828Nx5deCYQ&#xA;mGW6sUkF0glgKtewgiSMlAy+IqMVUtG8oeVUsyP0Zo8/xn47Kxhhi6Dbjym+L35Yqj/8J+Vf+rNY&#xA;/wDSND/zTirv8J+Vf+rNY/8ASND/AM04q7/CflX/AKs1j/0jQ/8ANOKu/wAJ+Vf+rNY/9I0P/NOK&#xA;u/wn5V/6s1j/ANI0P/NOKu/wn5V/6s1j/wBI0P8AzTirv8J+Vf8AqzWP/SND/wA04q7/AAn5V/6s&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.05</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPS-ItalicMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.05</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman Italic.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>EuclidSymbol</stFnt:fontName>
                  <stFnt:fontFamily>Euclid Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 1.60 (January 2001)</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Euclid Symbol.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:652a54ad-6200-428a-a612-1c156feedf5b</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:652a54ad-6200-428a-a612-1c156feedf5b</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:652a54ad-6200-428a-a612-1c156feedf5b</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:652a54ad-6200-428a-a612-1c156feedf5b</stEvt:instanceID>
                  <stEvt:when>2018-01-11T15:40:33-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -350.886 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 350.886 li
504.328 350.886 li
504.328 0 li
cp
clp
59.8282 88 mo
44.5782 88 li
44.5782 89 li
59.8282 89 li
cp
52.3282 92.75 mo
44.5782 92.75 li
44.5782 93.75 li
52.3282 93.75 li
cp
52.3282 98 mo
44.5782 98 li
44.5782 99 li
52.3282 99 li
cp
52.3282 104 mo
44.5782 104 li
44.5782 105 li
52.3282 105 li
cp
45.0782 104.5 mo
45.0782 .499969 li
44.0782 .499969 li
44.0782 104.5 li
cp
503.328 103.25 mo
503.328 104.5 li
504.328 104.5 li
504.328 103.25 li
cp
477.828 103.25 mo
477.828 104.5 li
478.828 104.5 li
478.828 103.25 li
cp
444.828 103.25 mo
444.828 104.5 li
445.828 104.5 li
445.828 103.25 li
cp
398.578 103.25 mo
398.578 104.5 li
399.578 104.5 li
399.578 103.25 li
cp
319.328 101.75 mo
319.328 104.5 li
320.328 104.5 li
320.328 101.75 li
cp
307.328 103.25 mo
307.328 104.5 li
308.328 104.5 li
308.328 103.25 li
cp
293.828 103.25 mo
293.828 104.5 li
294.828 104.5 li
294.828 103.25 li
cp
278.578 103.25 mo
278.578 104.5 li
279.578 104.5 li
279.578 103.25 li
cp
261.078 103.25 mo
261.078 104.5 li
262.078 104.5 li
262.078 103.25 li
cp
240.078 103.25 mo
240.078 104.5 li
241.078 104.5 li
241.078 103.25 li
cp
214.578 103.25 mo
214.578 104.5 li
215.578 104.5 li
215.578 103.25 li
cp
181.828 103.25 mo
181.828 104.5 li
182.828 104.5 li
182.828 103.25 li
cp
135.328 103.25 mo
135.328 104.5 li
136.328 104.5 li
136.328 103.25 li
cp
56.0782 101.75 mo
56.0782 104.5 li
57.0782 104.5 li
57.0782 101.75 li
cp
44.5782 105 mo
503.828 105 li
503.828 104 li
44.5782 104 li
cp
44.5782 104.5 mo
45.0782 104.5 li
45.0782 .999962 li
503.328 .999969 li
503.328 104 li
44.5782 104 li
44.5782 104.5 li
45.0782 104.5 li
44.5782 104.5 li
44.5782 105 li
504.328 105 li
504.328 -3.05176e-05 li
44.0782 -3.05176e-05 li
44.0782 105 li
44.5782 105 li
44.5782 104.5 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
52.3282 -3.05176e-05 mo
44.5782 -3.05176e-05 li
44.5782 .999969 li
52.3282 .999969 li
cp
52.3282 6.99997 mo
44.5782 6.99997 li
44.5782 7.99997 li
52.3282 7.99997 li
cp
52.3282 15.25 mo
44.5782 15.25 li
44.5782 16.25 li
52.3282 16.25 li
cp
52.3282 25.25 mo
44.5782 25.25 li
44.5782 26.25 li
52.3282 26.25 li
cp
52.3282 38.25 mo
44.5782 38.25 li
44.5782 39.25 li
52.3282 39.25 li
cp
52.3282 56.5 mo
44.5782 56.5 li
44.5782 57.5 li
52.3282 57.5 li
cp
f
461.684 91.3198 mo
461.683 89.8704 460.507 88.6951 459.059 88.6948 cv
457.609 88.695 456.434 89.8705 456.434 91.3198 cv
456.434 92.769 457.609 93.9446 459.059 93.9448 cv
460.507 93.9445 461.683 92.7692 461.684 91.3198 cv
461.184 91.3198 li
461.181 92.4925 460.231 93.4427 459.059 93.4448 cv
457.885 93.4427 456.936 92.4926 456.934 91.3198 cv
456.936 90.147 457.885 89.1969 459.059 89.1948 cv
460.231 89.1969 461.181 90.1471 461.184 91.3198 cv
461.684 91.3198 li
cp
443.923 84.8398 mo
443.923 83.3906 442.748 82.215 441.298 82.2148 cv
439.849 82.2151 438.673 83.3904 438.673 84.8398 cv
438.673 86.2892 439.849 87.4645 441.298 87.4648 cv
442.748 87.4646 443.923 86.2891 443.923 84.8398 cv
443.423 84.8398 li
443.421 86.0126 442.471 86.9627 441.298 86.9648 cv
440.126 86.9627 439.175 86.0125 439.173 84.8398 cv
439.175 83.6671 440.126 82.7169 441.298 82.7148 cv
442.471 82.7169 443.421 83.667 443.423 84.8398 cv
443.923 84.8398 li
cp
415.123 76.6801 mo
415.123 75.2309 413.948 74.0554 412.498 74.0551 cv
411.049 74.0554 409.873 75.2308 409.873 76.6801 cv
409.873 78.1295 411.049 79.3049 412.498 79.3051 cv
413.948 79.3049 415.123 78.1294 415.123 76.6801 cv
414.623 76.6801 li
414.621 77.853 413.671 78.803 412.498 78.8051 cv
411.326 78.803 410.375 77.8528 410.373 76.6801 cv
410.375 75.5075 411.326 74.5573 412.498 74.5551 cv
413.671 74.5573 414.621 75.5073 414.623 76.6801 cv
415.123 76.6801 li
cp
375.043 67.3198 mo
375.043 65.8705 373.868 64.695 372.418 64.6948 cv
370.969 64.6951 369.793 65.8704 369.793 67.3198 cv
369.793 68.7692 370.969 69.9445 372.418 69.9448 cv
373.868 69.9446 375.043 68.769 375.043 67.3198 cv
374.543 67.3198 li
374.541 68.4926 373.591 69.4427 372.418 69.4448 cv
371.246 69.4427 370.295 68.4925 370.293 67.3198 cv
370.295 66.1471 371.246 65.1969 372.418 65.1948 cv
373.591 65.1969 374.541 66.147 374.543 67.3198 cv
375.043 67.3198 li
cp
331.123 58.2002 mo
331.123 56.7509 329.948 55.5754 328.498 55.5752 cv
327.049 55.5755 325.873 56.7508 325.873 58.2002 cv
325.873 59.6496 327.049 60.8249 328.498 60.8252 cv
329.948 60.8249 331.123 59.6494 331.123 58.2002 cv
330.623 58.2002 li
330.621 59.373 329.671 60.323 328.498 60.3252 cv
327.326 60.323 326.375 59.3728 326.373 58.2002 cv
326.375 57.0275 327.326 56.0773 328.498 56.0752 cv
329.671 56.0773 330.621 57.0273 330.623 58.2002 cv
331.123 58.2002 li
cp
282.883 48.4799 mo
282.883 47.0307 281.708 45.8552 280.258 45.8549 cv
278.809 45.8552 277.633 47.0306 277.633 48.4799 cv
277.633 49.9293 278.809 51.1047 280.258 51.1049 cv
281.708 51.1047 282.883 49.9292 282.883 48.4799 cv
282.383 48.4799 li
282.381 49.6528 281.431 50.6028 280.258 50.6049 cv
279.086 50.6028 278.135 49.6526 278.133 48.4799 cv
278.135 47.3073 279.086 46.3571 280.258 46.3549 cv
281.431 46.3571 282.381 47.3071 282.383 48.4799 cv
282.883 48.4799 li
cp
228.403 39 mo
228.403 37.5506 227.227 36.3753 225.778 36.375 cv
224.329 36.3752 223.154 37.5506 223.153 39 cv
223.154 40.4493 224.329 41.6247 225.778 41.625 cv
227.227 41.6247 228.403 40.4494 228.403 39 cv
227.903 39 li
227.901 40.1726 226.951 41.1228 225.778 41.125 cv
224.606 41.1228 223.655 40.1727 223.653 39 cv
223.655 37.8272 224.606 36.8771 225.778 36.875 cv
226.951 36.8771 227.901 37.8273 227.903 39 cv
228.403 39 li
cp
166.243 28.9199 mo
166.243 27.4706 165.068 26.2951 163.618 26.2949 cv
162.169 26.2951 160.993 27.4706 160.993 28.9199 cv
160.993 30.3692 162.169 31.5446 163.618 31.5449 cv
165.068 31.5446 166.243 30.3692 166.243 28.9199 cv
165.743 28.9199 li
165.741 30.0926 164.791 31.0428 163.618 31.0449 cv
162.445 31.0428 161.495 30.0926 161.493 28.9199 cv
161.495 27.7471 162.445 26.797 163.618 26.7949 cv
164.791 26.797 165.741 27.7471 165.743 28.9199 cv
166.243 28.9199 li
cp
96.1631 20.52 mo
96.1629 19.0707 94.9874 17.8952 93.5381 17.895 cv
92.0888 17.8952 90.9134 19.0707 90.9131 20.52 cv
90.9134 21.9693 92.0888 23.1447 93.5381 23.145 cv
94.9874 23.1447 96.1629 21.9693 96.1631 20.52 cv
95.6631 20.52 li
95.661 21.6927 94.7109 22.6429 93.5381 22.645 cv
92.3654 22.6429 91.4152 21.6927 91.4131 20.52 cv
91.4152 19.3472 92.3654 18.3971 93.5381 18.395 cv
94.7109 18.3971 95.661 19.3472 95.6631 20.52 cv
96.1631 20.52 li
cp
95.8282 20.75 mo
128.828 20.75 li
128.828 20.25 li
95.8282 20.25 li
cp
91.0782 20.25 mo
44.5782 20.25 li
44.5782 20.75 li
91.0782 20.75 li
cp
166.078 29.25 mo
190.578 29.25 li
190.578 28.75 li
166.078 28.75 li
cp
161.328 28.75 mo
128.078 28.75 li
128.078 29.25 li
161.328 29.25 li
cp
228.078 39.25 mo
246.328 39.25 li
246.328 38.75 li
228.078 38.75 li
cp
223.328 38.75 mo
200.578 38.75 li
200.578 39.25 li
223.328 39.25 li
cp
282.828 48.75 mo
295.578 48.75 li
295.578 48.25 li
282.828 48.25 li
cp
278.078 48.25 mo
262.828 48.25 li
262.828 48.75 li
278.078 48.75 li
cp
331.078 58.5 mo
339.328 58.5 li
339.328 58 li
331.078 58 li
cp
326.328 58 mo
316.828 58 li
316.828 58.5 li
326.328 58.5 li
cp
374.578 67.5 mo
379.578 67.5 li
379.578 67 li
374.578 67 li
cp
369.828 67 mo
364.328 67 li
364.328 67.5 li
369.828 67.5 li
cp
414.828 77 mo
416.828 77 li
416.828 76.5 li
414.828 76.5 li
cp
410.078 76.5 mo
408.078 76.5 li
408.078 77 li
410.078 77 li
cp
461.684 91.3198 mo
461.683 89.8704 460.507 88.6951 459.059 88.6948 cv
457.609 88.695 456.434 89.8705 456.434 91.3198 cv
456.434 92.769 457.609 93.9446 459.059 93.9448 cv
460.507 93.9445 461.683 92.7692 461.684 91.3198 cv
461.184 91.3198 li
461.181 92.4925 460.231 93.4427 459.059 93.4448 cv
457.885 93.4427 456.936 92.4926 456.934 91.3198 cv
456.936 90.147 457.885 89.1969 459.059 89.1948 cv
460.231 89.1969 461.181 90.1471 461.184 91.3198 cv
461.684 91.3198 li
cp
443.923 84.8398 mo
443.923 83.3906 442.748 82.215 441.298 82.2148 cv
439.849 82.2151 438.673 83.3904 438.673 84.8398 cv
438.673 86.2892 439.849 87.4645 441.298 87.4648 cv
442.748 87.4646 443.923 86.2891 443.923 84.8398 cv
443.423 84.8398 li
443.421 86.0126 442.471 86.9627 441.298 86.9648 cv
440.126 86.9627 439.175 86.0125 439.173 84.8398 cv
439.175 83.6671 440.126 82.7169 441.298 82.7148 cv
442.471 82.7169 443.421 83.667 443.423 84.8398 cv
443.923 84.8398 li
cp
415.123 76.6801 mo
415.123 75.2309 413.948 74.0554 412.498 74.0551 cv
411.049 74.0554 409.873 75.2308 409.873 76.6801 cv
409.873 78.1295 411.049 79.3049 412.498 79.3051 cv
413.948 79.3049 415.123 78.1294 415.123 76.6801 cv
414.623 76.6801 li
414.621 77.853 413.671 78.803 412.498 78.8051 cv
411.326 78.803 410.375 77.8528 410.373 76.6801 cv
410.375 75.5075 411.326 74.5573 412.498 74.5551 cv
413.671 74.5573 414.621 75.5073 414.623 76.6801 cv
415.123 76.6801 li
cp
375.043 67.3198 mo
375.043 65.8705 373.868 64.695 372.418 64.6948 cv
370.969 64.6951 369.793 65.8704 369.793 67.3198 cv
369.793 68.7692 370.969 69.9445 372.418 69.9448 cv
373.868 69.9446 375.043 68.769 375.043 67.3198 cv
374.543 67.3198 li
374.541 68.4926 373.591 69.4427 372.418 69.4448 cv
371.246 69.4427 370.295 68.4925 370.293 67.3198 cv
370.295 66.1471 371.246 65.1969 372.418 65.1948 cv
373.591 65.1969 374.541 66.147 374.543 67.3198 cv
375.043 67.3198 li
cp
331.123 58.2002 mo
331.123 56.7509 329.948 55.5754 328.498 55.5752 cv
327.049 55.5755 325.873 56.7508 325.873 58.2002 cv
325.873 59.6496 327.049 60.8249 328.498 60.8252 cv
329.948 60.8249 331.123 59.6494 331.123 58.2002 cv
330.623 58.2002 li
330.621 59.373 329.671 60.323 328.498 60.3252 cv
327.326 60.323 326.375 59.3728 326.373 58.2002 cv
326.375 57.0275 327.326 56.0773 328.498 56.0752 cv
329.671 56.0773 330.621 57.0273 330.623 58.2002 cv
331.123 58.2002 li
cp
282.883 48.4799 mo
282.883 47.0307 281.708 45.8552 280.258 45.8549 cv
278.809 45.8552 277.633 47.0306 277.633 48.4799 cv
277.633 49.9293 278.809 51.1047 280.258 51.1049 cv
281.708 51.1047 282.883 49.9292 282.883 48.4799 cv
282.383 48.4799 li
282.381 49.6528 281.431 50.6028 280.258 50.6049 cv
279.086 50.6028 278.135 49.6526 278.133 48.4799 cv
278.135 47.3073 279.086 46.3571 280.258 46.3549 cv
281.431 46.3571 282.381 47.3071 282.383 48.4799 cv
282.883 48.4799 li
cp
228.403 39 mo
228.403 37.5506 227.227 36.3753 225.778 36.375 cv
224.329 36.3752 223.154 37.5506 223.153 39 cv
223.154 40.4493 224.329 41.6247 225.778 41.625 cv
227.227 41.6247 228.403 40.4494 228.403 39 cv
227.903 39 li
227.901 40.1726 226.951 41.1228 225.778 41.125 cv
224.606 41.1228 223.655 40.1727 223.653 39 cv
223.655 37.8272 224.606 36.8771 225.778 36.875 cv
226.951 36.8771 227.901 37.8273 227.903 39 cv
228.403 39 li
cp
166.243 28.9199 mo
166.243 27.4706 165.068 26.2951 163.618 26.2949 cv
162.169 26.2951 160.993 27.4706 160.993 28.9199 cv
160.993 30.3692 162.169 31.5446 163.618 31.5449 cv
165.068 31.5446 166.243 30.3692 166.243 28.9199 cv
165.743 28.9199 li
165.741 30.0926 164.791 31.0428 163.618 31.0449 cv
162.445 31.0428 161.495 30.0926 161.493 28.9199 cv
161.495 27.7471 162.445 26.797 163.618 26.7949 cv
164.791 26.797 165.741 27.7471 165.743 28.9199 cv
166.243 28.9199 li
cp
96.1631 20.52 mo
96.1629 19.0707 94.9874 17.8952 93.5381 17.895 cv
92.0888 17.8952 90.9134 19.0707 90.9131 20.52 cv
90.9134 21.9693 92.0888 23.1447 93.5381 23.145 cv
94.9874 23.1447 96.1629 21.9693 96.1631 20.52 cv
95.6631 20.52 li
95.661 21.6927 94.7109 22.6429 93.5381 22.645 cv
92.3654 22.6429 91.4152 21.6927 91.4131 20.52 cv
91.4152 19.3472 92.3654 18.3971 93.5381 18.395 cv
94.7109 18.3971 95.661 19.3472 95.6631 20.52 cv
96.1631 20.52 li
cp
f
163.538 41.9984 mo
166.528 42.2386 li
166.609 41.2418 li
163.618 41.0016 li
cp
169.519 42.4787 mo
172.509 42.7189 li
172.589 41.7221 li
169.599 41.4819 li
cp
175.5 42.9591 mo
178.49 43.1993 li
178.57 42.2025 li
175.58 41.9623 li
cp
181.48 43.4395 mo
184.471 43.6797 li
184.551 42.6829 li
181.56 42.4427 li
cp
187.461 43.9199 mo
190.451 44.1601 li
190.531 43.1633 li
187.541 42.9231 li
cp
193.442 44.4003 mo
196.432 44.6405 li
196.512 43.6437 li
193.522 43.4035 li
cp
199.423 44.8806 mo
202.413 45.1208 li
202.493 44.124 li
199.503 43.8839 li
cp
205.403 45.361 mo
208.394 45.6012 li
208.474 44.6044 li
205.483 44.3642 li
cp
211.384 45.8414 mo
214.374 46.0816 li
214.454 45.0848 li
211.464 44.8446 li
cp
217.365 46.3218 mo
220.355 46.562 li
220.435 45.5652 li
217.445 45.325 li
cp
223.345 46.8022 mo
225.777 46.9975 li
226.312 47.0637 li
226.435 46.0713 li
225.89 46.0038 li
225.879 46.0024 li
223.426 45.8054 li
223.345 46.8022 li
cp
229.289 47.4325 mo
232.266 47.8012 li
232.389 46.8088 li
229.412 46.44 li
cp
235.244 48.1699 mo
238.221 48.5387 li
238.344 47.5463 li
235.367 47.1775 li
cp
241.198 48.9074 mo
244.176 49.2762 li
244.298 48.2837 li
241.321 47.915 li
cp
247.153 49.6449 mo
250.13 50.0137 li
250.253 49.0212 li
247.276 48.6525 li
cp
253.107 50.3824 mo
256.085 50.7511 li
256.207 49.7587 li
253.23 49.39 li
cp
259.062 51.1199 mo
262.039 51.4886 li
262.162 50.4962 li
259.185 50.1275 li
cp
265.016 51.8574 mo
267.993 52.2261 li
268.116 51.2337 li
265.139 50.8649 li
cp
270.971 52.5948 mo
273.948 52.9636 li
274.071 51.9712 li
271.094 51.6024 li
cp
276.925 53.3323 mo
279.902 53.7011 li
280.025 52.7087 li
277.048 52.3399 li
cp
282.844 54.1739 mo
285.804 54.6646 li
285.967 53.6781 li
283.007 53.1874 li
cp
288.763 55.1553 mo
291.723 55.646 li
291.886 54.6595 li
288.927 54.1688 li
cp
294.682 56.1368 mo
297.642 56.6275 li
297.805 55.6409 li
294.846 55.1502 li
cp
300.602 57.1182 mo
303.561 57.6089 li
303.725 56.6224 li
300.765 56.1316 li
cp
306.521 58.0996 mo
309.48 58.5903 li
309.644 57.6038 li
306.684 57.1131 li
cp
312.44 59.081 mo
315.399 59.5717 li
315.563 58.5852 li
312.603 58.0945 li
cp
318.359 60.0624 mo
321.319 60.5531 li
321.482 59.5666 li
318.523 59.0759 li
cp
324.278 61.0439 mo
327.238 61.5346 li
327.401 60.548 li
324.442 60.0573 li
cp
330.166 62.0872 mo
333.105 62.6916 li
333.306 61.7121 li
330.368 61.1077 li
cp
336.043 63.2961 mo
338.982 63.9006 li
339.183 62.9211 li
336.245 62.3166 li
cp
341.92 64.5051 mo
344.859 65.1096 li
345.06 64.1301 li
342.122 63.5256 li
cp
347.797 65.7141 mo
350.736 66.3185 li
350.937 65.3391 li
347.999 64.7346 li
cp
353.674 66.923 mo
356.613 67.5275 li
356.814 66.548 li
353.876 65.9435 li
cp
359.551 68.132 mo
362.489 68.7365 li
362.691 67.757 li
359.753 67.1525 li
cp
365.428 69.341 mo
368.366 69.9454 li
368.568 68.966 li
365.629 68.3615 li
cp
371.305 70.5499 mo
372.224 70.739 li
374.233 71.1758 li
374.446 70.1986 li
372.432 69.7608 li
371.506 69.5704 li
371.305 70.5499 li
cp
377.165 71.8131 mo
380.096 72.4503 li
380.309 71.4732 li
377.377 70.8359 li
cp
383.028 73.0876 mo
385.959 73.7249 li
386.172 72.7477 li
383.24 72.1105 li
cp
388.891 74.3622 mo
391.822 74.9995 li
392.035 74.0223 li
389.103 73.385 li
cp
394.754 75.6368 mo
397.685 76.2741 li
397.898 75.2969 li
394.966 74.6596 li
cp
400.617 76.9114 mo
403.548 77.5487 li
403.761 76.5715 li
400.829 75.9342 li
cp
406.48 78.1859 mo
409.411 78.8232 li
409.624 77.8461 li
406.692 77.2088 li
cp
412.343 79.4605 mo
412.472 79.4886 li
412.468 79.4877 li
415.265 80.1201 li
415.486 79.1447 li
412.686 78.5117 li
412.555 78.4833 li
412.343 79.4605 li
cp
418.191 80.7817 mo
421.118 81.4432 li
421.338 80.4679 li
418.412 79.8063 li
cp
424.044 82.1048 mo
426.97 82.7664 li
427.19 81.791 li
424.264 81.1294 li
cp
429.896 83.4279 mo
432.822 84.0895 li
433.043 83.1141 li
430.117 82.4526 li
cp
435.748 84.7511 mo
438.674 85.4126 li
438.895 84.4372 li
435.969 83.7757 li
cp
441.563 86.0907 mo
444.439 86.9416 li
444.723 85.9827 li
441.846 85.1318 li
cp
447.316 87.7925 mo
450.193 88.6434 li
450.477 87.6845 li
447.6 86.8336 li
cp
453.07 89.4943 mo
455.947 90.3452 li
456.23 89.3862 li
453.353 88.5353 li
cp
458.823 91.196 mo
458.936 91.2294 li
459.22 90.2705 li
459.107 90.2371 li
cp
0 .993286 1 0 cmyk
f
163.461 24.9861 mo
225.718 39.9877 li
280.233 51.491 li
328.487 59.9916 li
372.222 68.4886 li
412.46 78.2359 li
412.456 78.2348 li
441.199 85.483 li
458.943 90.4812 li
459.214 89.5187 li
441.457 84.5169 li
412.698 77.2645 li
372.435 67.5113 li
328.669 59.0083 li
280.423 50.509 li
225.938 39.0122 li
163.695 24.0139 li
163.461 24.9861 li
cp
.883848 .768521 0 0 cmyk
f
59.8282 192 mo
44.5782 192 li
44.5782 193 li
59.8282 193 li
cp
52.3282 196.75 mo
44.5782 196.75 li
44.5782 197.75 li
52.3282 197.75 li
cp
52.3282 202.25 mo
44.5782 202.25 li
44.5782 203.25 li
52.3282 203.25 li
cp
52.3282 208.25 mo
44.5782 208.25 li
44.5782 209.25 li
52.3282 209.25 li
cp
45.0782 208.75 mo
45.0782 104.5 li
44.0782 104.5 li
44.0782 208.75 li
cp
503.328 207.25 mo
503.328 208.75 li
504.328 208.75 li
504.328 207.25 li
cp
477.828 207.25 mo
477.828 208.75 li
478.828 208.75 li
478.828 207.25 li
cp
444.828 207.25 mo
444.828 208.75 li
445.828 208.75 li
445.828 207.25 li
cp
398.578 207.25 mo
398.578 208.75 li
399.578 208.75 li
399.578 207.25 li
cp
319.328 206 mo
319.328 208.75 li
320.328 208.75 li
320.328 206 li
cp
307.328 207.25 mo
307.328 208.75 li
308.328 208.75 li
308.328 207.25 li
cp
293.828 207.25 mo
293.828 208.75 li
294.828 208.75 li
294.828 207.25 li
cp
278.578 207.25 mo
278.578 208.75 li
279.578 208.75 li
279.578 207.25 li
cp
261.078 207.25 mo
261.078 208.75 li
262.078 208.75 li
262.078 207.25 li
cp
240.078 207.25 mo
240.078 208.75 li
241.078 208.75 li
241.078 207.25 li
cp
214.578 207.25 mo
214.578 208.75 li
215.578 208.75 li
215.578 207.25 li
cp
181.828 207.25 mo
181.828 208.75 li
182.828 208.75 li
182.828 207.25 li
cp
135.328 207.25 mo
135.328 208.75 li
136.328 208.75 li
136.328 207.25 li
cp
56.0782 206 mo
56.0782 208.75 li
57.0782 208.75 li
57.0782 206 li
cp
44.5782 209.25 mo
503.828 209.25 li
503.828 208.25 li
44.5782 208.25 li
cp
44.5782 208.75 mo
45.0782 208.75 li
45.0782 105 li
503.328 105 li
503.328 208.25 li
44.5782 208.25 li
44.5782 208.75 li
45.0782 208.75 li
44.5782 208.75 li
44.5782 209.25 li
504.328 209.25 li
504.328 104 li
44.0782 104 li
44.0782 209.25 li
44.5782 209.25 li
44.5782 208.75 li
cp
0 0 0 1 cmyk
f
52.3282 104 mo
44.5782 104 li
44.5782 105 li
52.3282 105 li
cp
52.3282 111 mo
44.5782 111 li
44.5782 112 li
52.3282 112 li
cp
52.3282 119.25 mo
44.5782 119.25 li
44.5782 120.25 li
52.3282 120.25 li
cp
52.3282 129.5 mo
44.5782 129.5 li
44.5782 130.5 li
52.3282 130.5 li
cp
52.3282 142.5 mo
44.5782 142.5 li
44.5782 143.5 li
52.3282 143.5 li
cp
52.3282 160.75 mo
44.5782 160.75 li
44.5782 161.75 li
52.3282 161.75 li
cp
f
466.003 184.92 mo
466.003 183.471 464.828 182.295 463.378 182.295 cv
461.929 182.295 460.753 183.471 460.753 184.92 cv
460.753 186.37 461.929 187.545 463.378 187.545 cv
464.828 187.545 466.003 186.37 466.003 184.92 cv
465.503 184.92 li
465.501 186.093 464.551 187.043 463.378 187.045 cv
462.206 187.043 461.255 186.093 461.253 184.92 cv
461.255 183.748 462.206 182.797 463.378 182.795 cv
464.551 182.797 465.501 183.748 465.503 184.92 cv
466.003 184.92 li
cp
447.523 181.08 mo
447.523 179.63 446.347 178.455 444.898 178.455 cv
443.449 178.455 442.274 179.63 442.273 181.08 cv
442.274 182.529 443.449 183.705 444.898 183.705 cv
446.347 183.705 447.523 182.529 447.523 181.08 cv
447.023 181.08 li
447.021 182.252 446.071 183.203 444.898 183.205 cv
443.725 183.203 442.776 182.252 442.773 181.08 cv
442.776 179.907 443.725 178.957 444.898 178.955 cv
446.071 178.957 447.021 179.907 447.023 181.08 cv
447.523 181.08 li
cp
419.684 174.84 mo
419.683 173.391 418.508 172.215 417.059 172.215 cv
415.609 172.215 414.434 173.391 414.434 174.84 cv
414.434 176.29 415.609 177.465 417.059 177.465 cv
418.507 177.465 419.683 176.29 419.684 174.84 cv
419.184 174.84 li
419.181 176.013 418.231 176.963 417.059 176.965 cv
415.885 176.963 414.936 176.013 414.934 174.84 cv
414.936 173.667 415.885 172.717 417.059 172.715 cv
418.231 172.717 419.181 173.668 419.184 174.84 cv
419.684 174.84 li
cp
381.523 166.68 mo
381.523 165.231 380.347 164.055 378.898 164.055 cv
377.449 164.055 376.274 165.231 376.273 166.68 cv
376.274 168.129 377.449 169.304 378.898 169.305 cv
380.347 169.304 381.523 168.13 381.523 166.68 cv
381.023 166.68 li
381.021 167.853 380.071 168.803 378.898 168.805 cv
377.725 168.803 376.776 167.853 376.773 166.68 cv
376.776 165.507 377.725 164.557 378.898 164.555 cv
380.071 164.557 381.021 165.507 381.023 166.68 cv
381.523 166.68 li
cp
340.483 158.28 mo
340.483 156.83 339.307 155.655 337.858 155.655 cv
336.409 155.655 335.234 156.831 335.233 158.28 cv
335.234 159.729 336.409 160.905 337.858 160.905 cv
339.307 160.905 340.483 159.729 340.483 158.28 cv
339.983 158.28 li
339.981 159.452 339.031 160.403 337.858 160.405 cv
336.685 160.403 335.736 159.453 335.733 158.28 cv
335.736 157.107 336.685 156.157 337.858 156.155 cv
339.031 156.157 339.981 157.107 339.983 158.28 cv
340.483 158.28 li
cp
294.403 150 mo
294.403 148.551 293.227 147.375 291.778 147.375 cv
290.329 147.375 289.154 148.551 289.153 150 cv
289.154 151.449 290.329 152.625 291.778 152.625 cv
293.227 152.625 294.403 151.449 294.403 150 cv
293.903 150 li
293.901 151.173 292.951 152.123 291.778 152.125 cv
290.605 152.123 289.655 151.173 289.653 150 cv
289.655 148.827 290.605 147.877 291.778 147.875 cv
292.951 147.877 293.901 148.827 293.903 150 cv
294.403 150 li
cp
241.723 140.28 mo
241.723 138.831 240.548 137.655 239.098 137.655 cv
237.649 137.655 236.473 138.831 236.473 140.28 cv
236.473 141.729 237.649 142.904 239.098 142.905 cv
240.547 142.904 241.723 141.729 241.723 140.28 cv
241.223 140.28 li
241.221 141.452 240.271 142.403 239.098 142.405 cv
237.925 142.403 236.975 141.452 236.973 140.28 cv
236.975 139.108 237.925 138.157 239.098 138.155 cv
240.271 138.157 241.221 139.108 241.223 140.28 cv
241.723 140.28 li
cp
180.163 129 mo
180.163 127.551 178.987 126.375 177.538 126.375 cv
176.089 126.375 174.913 127.551 174.913 129 cv
174.913 130.449 176.089 131.625 177.538 131.625 cv
178.987 131.625 180.163 130.449 180.163 129 cv
179.663 129 li
179.661 130.173 178.711 131.123 177.538 131.125 cv
176.365 131.123 175.415 130.173 175.413 129 cv
175.415 127.827 176.365 126.877 177.538 126.875 cv
178.711 126.877 179.661 127.827 179.663 129 cv
180.163 129 li
cp
111.043 114.48 mo
111.043 113.031 109.867 111.855 108.418 111.855 cv
106.969 111.855 105.793 113.031 105.793 114.48 cv
105.793 115.929 106.969 117.105 108.418 117.105 cv
109.867 117.105 111.043 115.929 111.043 114.48 cv
110.543 114.48 li
110.541 115.653 109.591 116.603 108.418 116.605 cv
107.245 116.603 106.295 115.653 106.293 114.48 cv
106.295 113.307 107.245 112.357 108.418 112.355 cv
109.591 112.357 110.541 113.307 110.543 114.48 cv
111.043 114.48 li
cp
110.578 114.75 mo
125.828 114.75 li
125.828 114.25 li
110.578 114.25 li
cp
105.828 114.25 mo
87.5782 114.25 li
87.5782 114.75 li
105.828 114.75 li
cp
179.828 129.25 mo
191.328 129.25 li
191.328 128.75 li
179.828 128.75 li
cp
175.078 128.75 mo
161.828 128.75 li
161.828 129.25 li
175.078 129.25 li
cp
241.328 140.5 mo
249.328 140.5 li
249.328 140 li
241.328 140 li
cp
236.578 140 mo
227.578 140 li
227.578 140.5 li
236.578 140.5 li
cp
294.328 150.25 mo
299.328 150.25 li
299.328 149.75 li
294.328 149.75 li
cp
289.578 149.75 mo
283.828 149.75 li
283.828 150.25 li
289.578 150.25 li
cp
340.328 158.5 mo
342.828 158.5 li
342.828 158 li
340.328 158 li
cp
335.578 158 mo
332.578 158 li
332.578 158.5 li
335.578 158.5 li
cp
381.328 167 mo
382.578 167 li
382.578 166.5 li
381.328 166.5 li
cp
376.578 166.5 mo
375.078 166.5 li
375.078 167 li
376.578 167 li
cp
466.003 184.92 mo
466.003 183.471 464.828 182.295 463.378 182.295 cv
461.929 182.295 460.753 183.471 460.753 184.92 cv
460.753 186.37 461.929 187.545 463.378 187.545 cv
464.828 187.545 466.003 186.37 466.003 184.92 cv
465.503 184.92 li
465.501 186.093 464.551 187.043 463.378 187.045 cv
462.206 187.043 461.255 186.093 461.253 184.92 cv
461.255 183.748 462.206 182.797 463.378 182.795 cv
464.551 182.797 465.501 183.748 465.503 184.92 cv
466.003 184.92 li
cp
447.523 181.08 mo
447.523 179.63 446.347 178.455 444.898 178.455 cv
443.449 178.455 442.274 179.63 442.273 181.08 cv
442.274 182.529 443.449 183.705 444.898 183.705 cv
446.347 183.705 447.523 182.529 447.523 181.08 cv
447.023 181.08 li
447.021 182.252 446.071 183.203 444.898 183.205 cv
443.725 183.203 442.776 182.252 442.773 181.08 cv
442.776 179.907 443.725 178.957 444.898 178.955 cv
446.071 178.957 447.021 179.907 447.023 181.08 cv
447.523 181.08 li
cp
419.684 174.84 mo
419.683 173.391 418.508 172.215 417.059 172.215 cv
415.609 172.215 414.434 173.391 414.434 174.84 cv
414.434 176.29 415.609 177.465 417.059 177.465 cv
418.507 177.465 419.683 176.29 419.684 174.84 cv
419.184 174.84 li
419.181 176.013 418.231 176.963 417.059 176.965 cv
415.885 176.963 414.936 176.013 414.934 174.84 cv
414.936 173.667 415.885 172.717 417.059 172.715 cv
418.231 172.717 419.181 173.668 419.184 174.84 cv
419.684 174.84 li
cp
381.523 166.68 mo
381.523 165.231 380.347 164.055 378.898 164.055 cv
377.449 164.055 376.274 165.231 376.273 166.68 cv
376.274 168.129 377.449 169.304 378.898 169.305 cv
380.347 169.304 381.523 168.13 381.523 166.68 cv
381.023 166.68 li
381.021 167.853 380.071 168.803 378.898 168.805 cv
377.725 168.803 376.776 167.853 376.773 166.68 cv
376.776 165.507 377.725 164.557 378.898 164.555 cv
380.071 164.557 381.021 165.507 381.023 166.68 cv
381.523 166.68 li
cp
340.483 158.28 mo
340.483 156.83 339.307 155.655 337.858 155.655 cv
336.409 155.655 335.234 156.831 335.233 158.28 cv
335.234 159.729 336.409 160.905 337.858 160.905 cv
339.307 160.905 340.483 159.729 340.483 158.28 cv
339.983 158.28 li
339.981 159.452 339.031 160.403 337.858 160.405 cv
336.685 160.403 335.736 159.453 335.733 158.28 cv
335.736 157.107 336.685 156.157 337.858 156.155 cv
339.031 156.157 339.981 157.107 339.983 158.28 cv
340.483 158.28 li
cp
294.403 150 mo
294.403 148.551 293.227 147.375 291.778 147.375 cv
290.329 147.375 289.154 148.551 289.153 150 cv
289.154 151.449 290.329 152.625 291.778 152.625 cv
293.227 152.625 294.403 151.449 294.403 150 cv
293.903 150 li
293.901 151.173 292.951 152.123 291.778 152.125 cv
290.605 152.123 289.655 151.173 289.653 150 cv
289.655 148.827 290.605 147.877 291.778 147.875 cv
292.951 147.877 293.901 148.827 293.903 150 cv
294.403 150 li
cp
241.723 140.28 mo
241.723 138.831 240.548 137.655 239.098 137.655 cv
237.649 137.655 236.473 138.831 236.473 140.28 cv
236.473 141.729 237.649 142.904 239.098 142.905 cv
240.547 142.904 241.723 141.729 241.723 140.28 cv
241.223 140.28 li
241.221 141.452 240.271 142.403 239.098 142.405 cv
237.925 142.403 236.975 141.452 236.973 140.28 cv
236.975 139.108 237.925 138.157 239.098 138.155 cv
240.271 138.157 241.221 139.108 241.223 140.28 cv
241.723 140.28 li
cp
180.163 129 mo
180.163 127.551 178.987 126.375 177.538 126.375 cv
176.089 126.375 174.913 127.551 174.913 129 cv
174.913 130.449 176.089 131.625 177.538 131.625 cv
178.987 131.625 180.163 130.449 180.163 129 cv
179.663 129 li
179.661 130.173 178.711 131.123 177.538 131.125 cv
176.365 131.123 175.415 130.173 175.413 129 cv
175.415 127.827 176.365 126.877 177.538 126.875 cv
178.711 126.877 179.661 127.827 179.663 129 cv
180.163 129 li
cp
111.043 114.48 mo
111.043 113.031 109.867 111.855 108.418 111.855 cv
106.969 111.855 105.793 113.031 105.793 114.48 cv
105.793 115.929 106.969 117.105 108.418 117.105 cv
109.867 117.105 111.043 115.929 111.043 114.48 cv
110.543 114.48 li
110.541 115.653 109.591 116.603 108.418 116.605 cv
107.245 116.603 106.295 115.653 106.293 114.48 cv
106.295 113.307 107.245 112.357 108.418 112.355 cv
109.591 112.357 110.541 113.307 110.543 114.48 cv
111.043 114.48 li
cp
f
108.294 129.249 mo
111.287 129.454 li
111.355 128.456 li
108.362 128.251 li
cp
114.28 129.659 mo
117.273 129.865 li
117.341 128.867 li
114.348 128.662 li
cp
120.266 130.07 mo
123.259 130.275 li
123.327 129.278 li
120.334 129.072 li
cp
126.252 130.481 mo
129.245 130.686 li
129.313 129.688 li
126.32 129.483 li
cp
132.238 130.891 mo
135.231 131.096 li
135.299 130.099 li
132.306 129.893 li
cp
138.224 131.302 mo
141.217 131.507 li
141.285 130.509 li
138.292 130.304 li
cp
144.21 131.712 mo
147.202 131.918 li
147.271 130.92 li
144.278 130.715 li
cp
150.195 132.123 mo
153.188 132.328 li
153.257 131.331 li
150.264 131.125 li
cp
156.181 132.533 mo
159.174 132.739 li
159.243 131.741 li
156.25 131.536 li
cp
162.167 132.944 mo
165.16 133.149 li
165.229 132.152 li
162.236 131.946 li
cp
168.153 133.355 mo
171.146 133.56 li
171.215 132.562 li
168.222 132.357 li
cp
174.139 133.765 mo
177.132 133.971 li
177.201 132.973 li
174.208 132.768 li
cp
180.114 134.218 mo
183.103 134.473 li
183.188 133.477 li
180.199 133.222 li
cp
186.092 134.729 mo
189.081 134.984 li
189.166 133.987 li
186.177 133.732 li
cp
192.07 135.239 mo
195.059 135.494 li
195.144 134.498 li
192.155 134.243 li
cp
198.048 135.749 mo
201.037 136.004 li
201.122 135.008 li
198.133 134.753 li
cp
204.027 136.26 mo
207.016 136.515 li
207.101 135.518 li
204.112 135.263 li
cp
210.005 136.77 mo
212.994 137.025 li
213.079 136.029 li
210.09 135.774 li
cp
215.983 137.28 mo
218.972 137.535 li
219.057 136.539 li
216.068 136.284 li
cp
221.961 137.791 mo
224.95 138.046 li
225.036 137.049 li
222.046 136.794 li
cp
227.94 138.301 mo
230.929 138.556 li
231.014 137.56 li
228.025 137.305 li
cp
233.918 138.811 mo
236.907 139.066 li
236.992 138.07 li
234.003 137.815 li
cp
239.854 139.377 mo
242.818 139.841 li
242.973 138.853 li
240.009 138.389 li
cp
245.782 140.305 mo
248.746 140.768 li
248.901 139.78 li
245.937 139.317 li
cp
251.71 141.232 mo
254.674 141.695 li
254.828 140.707 li
251.865 140.244 li
cp
257.638 142.159 mo
260.602 142.622 li
260.756 141.634 li
257.792 141.171 li
cp
263.566 143.086 mo
266.53 143.549 li
266.684 142.561 li
263.72 142.098 li
cp
269.494 144.013 mo
272.458 144.477 li
272.612 143.489 li
269.648 143.025 li
cp
275.422 144.94 mo
278.386 145.404 li
278.54 144.416 li
275.576 143.952 li
cp
281.35 145.867 mo
284.314 146.331 li
284.468 145.343 li
281.504 144.879 li
cp
287.278 146.794 mo
290.242 147.258 li
290.396 146.27 li
287.432 145.806 li
cp
293.193 147.745 mo
296.149 148.259 li
296.32 147.274 li
293.364 146.76 li
cp
299.104 148.773 mo
302.06 149.287 li
302.231 148.302 li
299.276 147.788 li
cp
305.016 149.801 mo
307.971 150.315 li
308.143 149.33 li
305.187 148.816 li
cp
310.927 150.829 mo
313.882 151.343 li
314.054 150.358 li
311.098 149.844 li
cp
316.838 151.857 mo
319.794 152.371 li
319.965 151.386 li
317.009 150.872 li
cp
322.749 152.885 mo
325.705 153.399 li
325.876 152.414 li
322.921 151.9 li
cp
328.661 153.913 mo
331.616 154.427 li
331.788 153.442 li
328.832 152.928 li
cp
334.572 154.941 mo
337.528 155.455 li
337.699 154.47 li
334.743 153.956 li
cp
340.392 156.189 mo
343.294 156.95 li
343.548 155.983 li
340.646 155.222 li
cp
346.196 157.711 mo
349.098 158.472 li
349.352 157.504 li
346.45 156.744 li
cp
352 159.233 mo
354.902 159.993 li
355.155 159.026 li
352.253 158.265 li
cp
357.804 160.754 mo
360.706 161.515 li
360.959 160.548 li
358.057 159.787 li
cp
363.607 162.276 mo
366.509 163.037 li
366.763 162.07 li
363.861 161.309 li
cp
369.411 163.798 mo
372.313 164.559 li
372.567 163.591 li
369.665 162.831 li
cp
375.215 165.32 mo
378.117 166.08 li
378.371 165.113 li
375.469 164.352 li
cp
381.02 166.84 mo
383.922 167.599 li
384.175 166.631 li
381.273 165.872 li
cp
386.825 168.357 mo
389.727 169.116 li
389.98 168.149 li
387.078 167.39 li
cp
392.629 169.875 mo
395.532 170.634 li
395.785 169.666 li
392.882 168.907 li
cp
398.434 171.393 mo
401.337 172.151 li
401.59 171.184 li
398.687 170.425 li
cp
404.239 172.91 mo
407.142 173.669 li
407.395 172.702 li
404.492 171.943 li
cp
410.044 174.428 mo
412.947 175.187 li
413.2 174.219 li
410.297 173.46 li
cp
415.849 175.945 mo
416.947 176.233 li
418.735 176.732 li
419.004 175.769 li
417.209 175.267 li
416.102 174.978 li
415.849 175.945 li
cp
421.625 177.539 mo
424.514 178.346 li
424.783 177.383 li
421.894 176.576 li
cp
427.404 179.153 mo
430.293 179.96 li
430.562 178.997 li
427.673 178.19 li
cp
433.183 180.767 mo
436.072 181.574 li
436.341 180.611 li
433.452 179.804 li
cp
438.961 182.381 mo
441.851 183.188 li
442.12 182.224 li
439.23 181.417 li
cp
444.726 183.992 mo
447.591 184.882 li
447.888 183.927 li
445.023 183.037 li
cp
450.456 185.773 mo
453.32 186.663 li
453.617 185.708 li
450.752 184.818 li
cp
456.185 187.553 mo
459.05 188.444 li
459.347 187.489 li
456.482 186.599 li
cp
461.915 189.334 mo
463.18 189.727 li
463.477 188.772 li
462.212 188.379 li
cp
0 .993286 1 0 cmyk
f
108.217 117.738 mo
177.482 133.491 li
239.005 143.745 li
291.761 150.495 li
337.738 156.992 li
378.711 166.236 li
416.943 175.981 li
444.687 184.48 li
463.192 189.731 li
463.465 188.769 li
444.97 183.52 li
417.213 175.018 li
378.945 165.264 li
337.918 156.008 li
291.895 149.504 li
239.151 142.755 li
177.675 132.509 li
108.439 116.762 li
108.217 117.738 li
cp
.883848 .768521 0 0 cmyk
f
56.0782 309.25 mo
56.0782 312.5 li
57.0782 312.5 li
57.0782 309.25 li
cp
44.5782 313 mo
503.828 313 li
503.828 312 li
44.5782 312 li
cp
44.5782 312.5 mo
45.0782 312.5 li
45.0782 209.25 li
503.328 209.25 li
503.328 312 li
44.5782 312 li
44.5782 312.5 li
45.0782 312.5 li
44.5782 312.5 li
44.5782 313 li
504.328 313 li
504.328 208.25 li
44.0782 208.25 li
44.0782 313 li
44.5782 313 li
44.5782 312.5 li
cp
0 0 0 1 cmyk
f
319.328 309.25 mo
319.328 312.5 li
320.328 312.5 li
320.328 309.25 li
cp
307.328 311 mo
307.328 312.5 li
308.328 312.5 li
308.328 311 li
cp
293.828 311 mo
293.828 312.5 li
294.828 312.5 li
294.828 311 li
cp
278.578 311 mo
278.578 312.5 li
279.578 312.5 li
279.578 311 li
cp
261.078 311 mo
261.078 312.5 li
262.078 312.5 li
262.078 311 li
cp
240.078 311 mo
240.078 312.5 li
241.078 312.5 li
241.078 311 li
cp
214.578 311 mo
214.578 312.5 li
215.578 312.5 li
215.578 311 li
cp
181.828 311 mo
181.828 312.5 li
182.828 312.5 li
182.828 311 li
cp
135.328 311 mo
135.328 312.5 li
136.328 312.5 li
136.328 311 li
cp
f
58.3282 296 mo
44.5782 296 li
44.5782 297 li
58.3282 297 li
cp
51.5782 300.75 mo
44.5782 300.75 li
44.5782 301.75 li
51.5782 301.75 li
cp
51.5782 306 mo
44.5782 306 li
44.5782 307 li
51.5782 307 li
cp
51.5782 312 mo
44.5782 312 li
44.5782 313 li
51.5782 313 li
cp
45.0782 312.5 mo
45.0782 208.75 li
44.0782 208.75 li
44.0782 312.5 li
cp
503.328 311 mo
503.328 312.5 li
504.328 312.5 li
504.328 311 li
cp
477.828 311 mo
477.828 312.5 li
478.828 312.5 li
478.828 311 li
cp
444.828 311 mo
444.828 312.5 li
445.828 312.5 li
445.828 311 li
cp
398.578 311 mo
398.578 312.5 li
399.578 312.5 li
399.578 311 li
cp
f
51.5782 208.25 mo
44.5782 208.25 li
44.5782 209.25 li
51.5782 209.25 li
cp
51.5782 215.25 mo
44.5782 215.25 li
44.5782 216.25 li
51.5782 216.25 li
cp
51.5782 223.5 mo
44.5782 223.5 li
44.5782 224.5 li
51.5782 224.5 li
cp
51.5782 233.5 mo
44.5782 233.5 li
44.5782 234.5 li
51.5782 234.5 li
cp
51.5782 246.5 mo
44.5782 246.5 li
44.5782 247.5 li
51.5782 247.5 li
cp
51.5782 264.75 mo
44.5782 264.75 li
44.5782 265.75 li
51.5782 265.75 li
cp
f
475.963 300 mo
475.963 298.551 474.788 297.375 473.338 297.375 cv
471.889 297.375 470.713 298.551 470.713 300 cv
470.713 301.449 471.889 302.625 473.338 302.625 cv
474.788 302.625 475.963 301.449 475.963 300 cv
475.463 300 li
475.461 301.172 474.511 302.123 473.338 302.125 cv
472.166 302.123 471.215 301.172 471.213 300 cv
471.215 298.828 472.166 297.877 473.338 297.875 cv
474.511 297.877 475.461 298.828 475.463 300 cv
475.963 300 li
cp
f
459.043 292.68 mo
459.043 291.231 457.868 290.055 456.418 290.055 cv
454.969 290.055 453.793 291.231 453.793 292.68 cv
453.793 294.129 454.969 295.304 456.418 295.305 cv
457.868 295.304 459.043 294.129 459.043 292.68 cv
458.543 292.68 li
458.541 293.853 457.591 294.803 456.418 294.805 cv
455.246 294.803 454.295 293.853 454.293 292.68 cv
454.295 291.507 455.246 290.557 456.418 290.555 cv
457.591 290.557 458.541 291.507 458.543 292.68 cv
459.043 292.68 li
cp
f
440.684 286.44 mo
440.683 284.991 439.507 283.816 438.059 283.815 cv
436.609 283.816 435.434 284.991 435.434 286.44 cv
435.434 287.889 436.609 289.065 438.059 289.065 cv
439.508 289.065 440.683 287.889 440.684 286.44 cv
440.184 286.44 li
440.181 287.613 439.231 288.563 438.059 288.565 cv
436.885 288.563 435.936 287.613 435.934 286.44 cv
435.936 285.267 436.885 284.318 438.059 284.315 cv
439.231 284.318 440.181 285.267 440.184 286.44 cv
440.684 286.44 li
cp
f
421.963 280.68 mo
421.963 279.231 420.788 278.055 419.338 278.055 cv
417.889 278.055 416.713 279.231 416.713 280.68 cv
416.713 282.129 417.889 283.304 419.338 283.305 cv
420.788 283.304 421.963 282.129 421.963 280.68 cv
421.463 280.68 li
421.461 281.853 420.511 282.803 419.338 282.805 cv
418.166 282.803 417.215 281.853 417.213 280.68 cv
417.215 279.507 418.166 278.557 419.338 278.555 cv
420.511 278.557 421.461 279.507 421.463 280.68 cv
421.963 280.68 li
cp
f
402.644 276 mo
402.643 274.551 401.467 273.375 400.019 273.375 cv
398.569 273.375 397.394 274.551 397.394 276 cv
397.394 277.449 398.569 278.625 400.019 278.625 cv
401.467 278.625 402.643 277.449 402.644 276 cv
402.144 276 li
402.141 277.172 401.191 278.123 400.019 278.125 cv
398.845 278.123 397.896 277.172 397.894 276 cv
397.896 274.828 398.845 273.877 400.019 273.875 cv
401.191 273.877 402.141 274.828 402.144 276 cv
402.644 276 li
cp
f
382.723 271.56 mo
382.722 270.111 381.548 268.935 380.098 268.935 cv
378.649 268.935 377.473 270.111 377.473 271.56 cv
377.473 273.009 378.649 274.184 380.098 274.185 cv
381.547 274.184 382.722 273.009 382.723 271.56 cv
382.223 271.56 li
382.221 272.733 381.271 273.682 380.098 273.685 cv
378.925 273.682 377.975 272.733 377.973 271.56 cv
377.975 270.387 378.926 269.437 380.098 269.435 cv
381.271 269.437 382.221 270.387 382.223 271.56 cv
382.723 271.56 li
cp
f
362.203 266.52 mo
362.203 265.071 361.027 263.895 359.578 263.895 cv
358.129 263.895 356.953 265.071 356.953 266.52 cv
356.953 267.969 358.129 269.144 359.578 269.144 cv
361.027 269.144 362.203 267.969 362.203 266.52 cv
361.703 266.52 li
361.701 267.693 360.75 268.642 359.578 268.645 cv
358.406 268.642 357.455 267.693 357.453 266.52 cv
357.455 265.347 358.406 264.397 359.578 264.394 cv
360.75 264.397 361.701 265.347 361.703 266.52 cv
362.203 266.52 li
cp
f
339.763 261.48 mo
339.763 260.031 338.587 258.856 337.138 258.855 cv
335.689 258.856 334.513 260.031 334.513 261.48 cv
334.513 262.929 335.689 264.105 337.138 264.105 cv
338.588 264.105 339.762 262.929 339.763 261.48 cv
339.263 261.48 li
339.261 262.653 338.311 263.603 337.138 263.605 cv
335.966 263.603 335.015 262.653 335.013 261.48 cv
335.015 260.307 335.965 259.358 337.138 259.355 cv
338.311 259.358 339.261 260.307 339.263 261.48 cv
339.763 261.48 li
cp
f
315.523 256.44 mo
315.523 254.991 314.347 253.816 312.898 253.815 cv
311.449 253.816 310.274 254.991 310.273 256.44 cv
310.274 257.889 311.449 259.065 312.898 259.065 cv
314.347 259.065 315.523 257.889 315.523 256.44 cv
315.023 256.44 li
315.021 257.613 314.071 258.563 312.898 258.565 cv
311.725 258.563 310.776 257.613 310.773 256.44 cv
310.776 255.267 311.725 254.318 312.898 254.315 cv
314.071 254.318 315.021 255.267 315.023 256.44 cv
315.523 256.44 li
cp
f
290.203 251.52 mo
290.203 250.071 289.027 248.895 287.578 248.895 cv
286.129 248.895 284.953 250.071 284.953 251.52 cv
284.953 252.969 286.129 254.144 287.578 254.144 cv
289.027 254.144 290.203 252.969 290.203 251.52 cv
289.703 251.52 li
289.701 252.693 288.75 253.642 287.578 253.645 cv
286.406 253.642 285.455 252.693 285.453 251.52 cv
285.455 250.347 286.406 249.397 287.578 249.394 cv
288.75 249.397 289.701 250.347 289.703 251.52 cv
290.203 251.52 li
cp
f
262.963 246.24 mo
262.963 244.79 261.787 243.615 260.338 243.615 cv
258.889 243.615 257.713 244.79 257.713 246.24 cv
257.713 247.689 258.889 248.865 260.338 248.865 cv
261.787 248.865 262.963 247.689 262.963 246.24 cv
262.463 246.24 li
262.461 247.412 261.511 248.363 260.338 248.365 cv
259.166 248.363 258.215 247.412 258.213 246.24 cv
258.215 245.067 259.166 244.117 260.338 244.115 cv
261.511 244.117 262.461 245.067 262.463 246.24 cv
262.963 246.24 li
cp
f
233.203 241.08 mo
233.203 239.63 232.027 238.455 230.578 238.455 cv
229.129 238.455 227.953 239.63 227.953 241.08 cv
227.953 242.529 229.129 243.705 230.578 243.705 cv
232.028 243.705 233.203 242.529 233.203 241.08 cv
232.703 241.08 li
232.701 242.252 231.751 243.203 230.578 243.205 cv
229.405 243.203 228.455 242.252 228.453 241.08 cv
228.455 239.907 229.405 238.957 230.578 238.955 cv
231.751 238.957 232.701 239.907 232.703 241.08 cv
233.203 241.08 li
cp
f
200.683 235.8 mo
200.683 234.351 199.508 233.175 198.058 233.175 cv
196.609 233.175 195.433 234.351 195.433 235.8 cv
195.433 237.25 196.609 238.425 198.058 238.425 cv
199.507 238.425 200.683 237.25 200.683 235.8 cv
200.183 235.8 li
200.181 236.973 199.231 237.923 198.058 237.925 cv
196.885 237.923 195.935 236.973 195.933 235.8 cv
195.935 234.628 196.885 233.677 198.058 233.675 cv
199.231 233.677 200.181 234.628 200.183 235.8 cv
200.683 235.8 li
cp
f
164.203 229.56 mo
164.203 228.111 163.028 226.935 161.578 226.935 cv
160.129 226.935 158.953 228.111 158.953 229.56 cv
158.953 231.009 160.129 232.184 161.578 232.185 cv
163.027 232.184 164.203 231.009 164.203 229.56 cv
163.703 229.56 li
163.701 230.733 162.751 231.682 161.578 231.685 cv
160.405 231.682 159.455 230.733 159.453 229.56 cv
159.455 228.387 160.405 227.437 161.578 227.435 cv
162.751 227.437 163.701 228.387 163.703 229.56 cv
164.203 229.56 li
cp
f
124.963 222 mo
124.963 220.551 123.787 219.375 122.338 219.375 cv
120.889 219.375 119.713 220.551 119.713 222 cv
119.713 223.449 120.889 224.625 122.338 224.625 cv
123.787 224.625 124.963 223.449 124.963 222 cv
124.463 222 li
124.461 223.172 123.511 224.123 122.338 224.125 cv
121.166 224.123 120.215 223.172 120.213 222 cv
120.215 220.828 121.166 219.877 122.338 219.875 cv
123.511 219.877 124.461 220.828 124.463 222 cv
124.963 222 li
cp
f
84.6431 213.96 mo
84.6428 212.511 83.4675 211.335 82.0181 211.335 cv
80.5687 211.335 79.3934 212.511 79.3931 213.96 cv
79.3933 215.41 80.5688 216.585 82.0181 216.585 cv
83.4673 216.585 84.6429 215.41 84.6431 213.96 cv
84.1431 213.96 li
84.141 215.133 83.1909 216.083 82.0181 216.085 cv
80.8453 216.083 79.8952 215.133 79.8931 213.96 cv
79.8952 212.788 80.8454 211.837 82.0181 211.835 cv
83.1908 211.837 84.141 212.788 84.1431 213.96 cv
84.6431 213.96 li
cp
f
79.5782 213.75 mo
72.5782 213.75 li
72.5782 214.25 li
79.5782 214.25 li
f
84.3282 214.25 mo
90.8282 214.25 li
90.8282 213.75 li
84.3282 213.75 li
f
119.828 221.75 mo
112.828 221.75 li
112.828 222.25 li
119.828 222.25 li
f
124.578 222.25 mo
131.078 222.25 li
131.078 221.75 li
124.578 221.75 li
f
159.328 229.25 mo
156.578 229.25 li
156.578 229.75 li
159.328 229.75 li
f
164.078 229.75 mo
166.578 229.75 li
166.578 229.25 li
164.078 229.25 li
f
195.828 235.5 mo
192.578 235.5 li
192.578 236 li
195.828 236 li
f
200.578 236 mo
203.328 236 li
203.328 235.5 li
200.578 235.5 li
f
228.078 240.75 mo
226.578 240.75 li
226.578 241.25 li
228.078 241.25 li
f
232.828 241.25 mo
234.078 241.25 li
234.078 240.75 li
232.828 240.75 li
f
257.828 246 mo
256.328 246 li
256.328 246.5 li
257.828 246.5 li
f
262.578 246.5 mo
264.078 246.5 li
264.078 246 li
262.578 246 li
f
285.328 251.25 mo
283.578 251.25 li
283.578 251.75 li
285.328 251.75 li
f
290.078 251.75 mo
291.578 251.75 li
291.578 251.25 li
290.078 251.25 li
f
310.578 256.25 mo
308.328 256.25 li
308.328 256.75 li
310.578 256.75 li
f
315.328 256.75 mo
317.078 256.75 li
317.078 256.25 li
315.328 256.25 li
f
334.578 261.25 mo
333.828 261.25 li
333.828 261.75 li
334.578 261.75 li
f
339.328 261.75 mo
340.078 261.75 li
340.078 261.25 li
339.328 261.25 li
f
357.328 266.25 mo
356.828 266.25 li
356.828 266.75 li
357.328 266.75 li
f
362.078 266.75 mo
362.328 266.75 li
362.328 266.25 li
362.078 266.25 li
f
377.828 271.25 mo
377.328 271.25 li
377.328 271.75 li
377.828 271.75 li
f
382.578 271.75 mo
383.078 271.75 li
383.078 271.25 li
382.578 271.25 li
f
417.828 283.5 mo
420.828 283.5 li
420.828 283 li
417.828 283 li
f
436.578 284.25 mo
439.578 284.25 li
439.578 283.75 li
436.578 283.75 li
f
437.828 288.75 mo
437.828 289 li
438.328 289 li
438.328 288.75 li
f
436.578 289.25 mo
439.578 289.25 li
439.578 288.75 li
436.578 288.75 li
f
456.578 290.25 mo
456.578 289.5 li
456.078 289.5 li
456.078 290.25 li
f
454.828 289.75 mo
457.578 289.75 li
457.578 289.25 li
454.828 289.25 li
f
456.078 295 mo
456.078 296 li
456.578 296 li
456.578 295 li
f
454.828 296.25 mo
457.578 296.25 li
457.578 295.75 li
454.828 295.75 li
f
473.578 297.5 mo
473.578 296.75 li
473.078 296.75 li
473.078 297.5 li
f
471.828 297 mo
474.828 297 li
474.828 296.5 li
471.828 296.5 li
f
473.078 302.25 mo
473.078 303.25 li
473.578 303.25 li
473.578 302.25 li
f
471.828 303.5 mo
474.828 303.5 li
474.828 303 li
471.828 303 li
f
475.963 300 mo
475.963 298.551 474.788 297.375 473.338 297.375 cv
471.889 297.375 470.713 298.551 470.713 300 cv
470.713 301.449 471.889 302.625 473.338 302.625 cv
474.788 302.625 475.963 301.449 475.963 300 cv
475.463 300 li
475.461 301.172 474.511 302.123 473.338 302.125 cv
472.166 302.123 471.215 301.172 471.213 300 cv
471.215 298.828 472.166 297.877 473.338 297.875 cv
474.511 297.877 475.461 298.828 475.463 300 cv
475.963 300 li
cp
f
459.043 292.68 mo
459.043 291.231 457.868 290.055 456.418 290.055 cv
454.969 290.055 453.793 291.231 453.793 292.68 cv
453.793 294.129 454.969 295.304 456.418 295.305 cv
457.868 295.304 459.043 294.129 459.043 292.68 cv
458.543 292.68 li
458.541 293.853 457.591 294.803 456.418 294.805 cv
455.246 294.803 454.295 293.853 454.293 292.68 cv
454.295 291.507 455.246 290.557 456.418 290.555 cv
457.591 290.557 458.541 291.507 458.543 292.68 cv
459.043 292.68 li
cp
f
440.684 286.44 mo
440.683 284.991 439.507 283.816 438.059 283.815 cv
436.609 283.816 435.434 284.991 435.434 286.44 cv
435.434 287.889 436.609 289.065 438.059 289.065 cv
439.508 289.065 440.683 287.889 440.684 286.44 cv
440.184 286.44 li
440.181 287.613 439.231 288.563 438.059 288.565 cv
436.885 288.563 435.936 287.613 435.934 286.44 cv
435.936 285.267 436.885 284.318 438.059 284.315 cv
439.231 284.318 440.181 285.267 440.184 286.44 cv
440.684 286.44 li
cp
f
421.963 280.68 mo
421.963 279.231 420.788 278.055 419.338 278.055 cv
417.889 278.055 416.713 279.231 416.713 280.68 cv
416.713 282.129 417.889 283.304 419.338 283.305 cv
420.788 283.304 421.963 282.129 421.963 280.68 cv
421.463 280.68 li
421.461 281.853 420.511 282.803 419.338 282.805 cv
418.166 282.803 417.215 281.853 417.213 280.68 cv
417.215 279.507 418.166 278.557 419.338 278.555 cv
420.511 278.557 421.461 279.507 421.463 280.68 cv
421.963 280.68 li
cp
f
402.644 276 mo
402.643 274.551 401.467 273.375 400.019 273.375 cv
398.569 273.375 397.394 274.551 397.394 276 cv
397.394 277.449 398.569 278.625 400.019 278.625 cv
401.467 278.625 402.643 277.449 402.644 276 cv
402.144 276 li
402.141 277.172 401.191 278.123 400.019 278.125 cv
398.845 278.123 397.896 277.172 397.894 276 cv
397.896 274.828 398.845 273.877 400.019 273.875 cv
401.191 273.877 402.141 274.828 402.144 276 cv
402.644 276 li
cp
f
382.723 271.56 mo
382.722 270.111 381.548 268.935 380.098 268.935 cv
378.649 268.935 377.473 270.111 377.473 271.56 cv
377.473 273.009 378.649 274.184 380.098 274.185 cv
381.547 274.184 382.722 273.009 382.723 271.56 cv
382.223 271.56 li
382.221 272.733 381.271 273.682 380.098 273.685 cv
378.925 273.682 377.975 272.733 377.973 271.56 cv
377.975 270.387 378.926 269.437 380.098 269.435 cv
381.271 269.437 382.221 270.387 382.223 271.56 cv
382.723 271.56 li
cp
f
362.203 266.52 mo
362.203 265.071 361.027 263.895 359.578 263.895 cv
358.129 263.895 356.953 265.071 356.953 266.52 cv
356.953 267.969 358.129 269.144 359.578 269.144 cv
361.027 269.144 362.203 267.969 362.203 266.52 cv
361.703 266.52 li
361.701 267.693 360.75 268.642 359.578 268.645 cv
358.406 268.642 357.455 267.693 357.453 266.52 cv
357.455 265.347 358.406 264.397 359.578 264.394 cv
360.75 264.397 361.701 265.347 361.703 266.52 cv
362.203 266.52 li
cp
f
339.763 261.48 mo
339.763 260.031 338.587 258.856 337.138 258.855 cv
335.689 258.856 334.513 260.031 334.513 261.48 cv
334.513 262.929 335.689 264.105 337.138 264.105 cv
338.588 264.105 339.762 262.929 339.763 261.48 cv
339.263 261.48 li
339.261 262.653 338.311 263.603 337.138 263.605 cv
335.966 263.603 335.015 262.653 335.013 261.48 cv
335.015 260.307 335.965 259.358 337.138 259.355 cv
338.311 259.358 339.261 260.307 339.263 261.48 cv
339.763 261.48 li
cp
f
315.523 256.44 mo
315.523 254.991 314.347 253.816 312.898 253.815 cv
311.449 253.816 310.274 254.991 310.273 256.44 cv
310.274 257.889 311.449 259.065 312.898 259.065 cv
314.347 259.065 315.523 257.889 315.523 256.44 cv
315.023 256.44 li
315.021 257.613 314.071 258.563 312.898 258.565 cv
311.725 258.563 310.776 257.613 310.773 256.44 cv
310.776 255.267 311.725 254.318 312.898 254.315 cv
314.071 254.318 315.021 255.267 315.023 256.44 cv
315.523 256.44 li
cp
f
290.203 251.52 mo
290.203 250.071 289.027 248.895 287.578 248.895 cv
286.129 248.895 284.953 250.071 284.953 251.52 cv
284.953 252.969 286.129 254.144 287.578 254.144 cv
289.027 254.144 290.203 252.969 290.203 251.52 cv
289.703 251.52 li
289.701 252.693 288.75 253.642 287.578 253.645 cv
286.406 253.642 285.455 252.693 285.453 251.52 cv
285.455 250.347 286.406 249.397 287.578 249.394 cv
288.75 249.397 289.701 250.347 289.703 251.52 cv
290.203 251.52 li
cp
f
262.963 246.24 mo
262.963 244.79 261.787 243.615 260.338 243.615 cv
258.889 243.615 257.713 244.79 257.713 246.24 cv
257.713 247.689 258.889 248.865 260.338 248.865 cv
261.787 248.865 262.963 247.689 262.963 246.24 cv
262.463 246.24 li
262.461 247.412 261.511 248.363 260.338 248.365 cv
259.166 248.363 258.215 247.412 258.213 246.24 cv
258.215 245.067 259.166 244.117 260.338 244.115 cv
261.511 244.117 262.461 245.067 262.463 246.24 cv
262.963 246.24 li
cp
f
233.203 241.08 mo
233.203 239.63 232.027 238.455 230.578 238.455 cv
229.129 238.455 227.953 239.63 227.953 241.08 cv
227.953 242.529 229.129 243.705 230.578 243.705 cv
232.028 243.705 233.203 242.529 233.203 241.08 cv
232.703 241.08 li
232.701 242.252 231.751 243.203 230.578 243.205 cv
229.405 243.203 228.455 242.252 228.453 241.08 cv
228.455 239.907 229.405 238.957 230.578 238.955 cv
231.751 238.957 232.701 239.907 232.703 241.08 cv
233.203 241.08 li
cp
f
200.683 235.8 mo
200.683 234.351 199.508 233.175 198.058 233.175 cv
196.609 233.175 195.433 234.351 195.433 235.8 cv
195.433 237.25 196.609 238.425 198.058 238.425 cv
199.507 238.425 200.683 237.25 200.683 235.8 cv
200.183 235.8 li
200.181 236.973 199.231 237.923 198.058 237.925 cv
196.885 237.923 195.935 236.973 195.933 235.8 cv
195.935 234.628 196.885 233.677 198.058 233.675 cv
199.231 233.677 200.181 234.628 200.183 235.8 cv
200.683 235.8 li
cp
f
164.203 229.56 mo
164.203 228.111 163.028 226.935 161.578 226.935 cv
160.129 226.935 158.953 228.111 158.953 229.56 cv
158.953 231.009 160.129 232.184 161.578 232.185 cv
163.027 232.184 164.203 231.009 164.203 229.56 cv
163.703 229.56 li
163.701 230.733 162.751 231.682 161.578 231.685 cv
160.405 231.682 159.455 230.733 159.453 229.56 cv
159.455 228.387 160.405 227.437 161.578 227.435 cv
162.751 227.437 163.701 228.387 163.703 229.56 cv
164.203 229.56 li
cp
f
124.963 222 mo
124.963 220.551 123.787 219.375 122.338 219.375 cv
120.889 219.375 119.713 220.551 119.713 222 cv
119.713 223.449 120.889 224.625 122.338 224.625 cv
123.787 224.625 124.963 223.449 124.963 222 cv
124.463 222 li
124.461 223.172 123.511 224.123 122.338 224.125 cv
121.166 224.123 120.215 223.172 120.213 222 cv
120.215 220.828 121.166 219.877 122.338 219.875 cv
123.511 219.877 124.461 220.828 124.463 222 cv
124.963 222 li
cp
f
84.6431 213.96 mo
84.6428 212.511 83.4675 211.335 82.0181 211.335 cv
80.5687 211.335 79.3934 212.511 79.3931 213.96 cv
79.3933 215.41 80.5688 216.585 82.0181 216.585 cv
83.4673 216.585 84.6429 215.41 84.6431 213.96 cv
84.1431 213.96 li
84.141 215.133 83.1909 216.083 82.0181 216.085 cv
80.8453 216.083 79.8952 215.133 79.8931 213.96 cv
79.8952 212.788 80.8454 211.837 82.0181 211.835 cv
83.1908 211.837 84.141 212.788 84.1431 213.96 cv
84.6431 213.96 li
cp
f
417.578 281.75 mo
417.578 283.5 li
421.078 283.5 li
421.078 281.75 li
420.578 281.75 li
420.578 283 li
418.078 283 li
418.078 281.75 li
417.578 281.75 li
cp
f
436.828 285.5 mo
436.828 284.25 li
439.328 284.25 li
439.328 285.5 li
439.828 285.5 li
439.828 283.75 li
436.328 283.75 li
436.328 285.5 li
436.828 285.5 li
cp
f
436.328 287.5 mo
436.328 289.25 li
439.828 289.25 li
439.828 287.5 li
439.328 287.5 li
439.328 288.75 li
436.828 288.75 li
436.828 287.5 li
436.328 287.5 li
cp
f
455.078 291 mo
455.078 289.75 li
457.328 289.75 li
457.328 291 li
457.828 291 li
457.828 289.25 li
454.578 289.25 li
454.578 291 li
455.078 291 li
cp
f
454.578 294.5 mo
454.578 296.25 li
457.828 296.25 li
457.828 294.5 li
457.328 294.5 li
457.328 295.75 li
455.078 295.75 li
455.078 294.5 li
454.578 294.5 li
cp
f
472.078 298.25 mo
472.078 297 li
474.578 297 li
474.578 298.25 li
475.078 298.25 li
475.078 296.5 li
471.578 296.5 li
471.578 298.25 li
472.078 298.25 li
cp
f
471.578 302 mo
471.578 303.25 li
471.578 303.5 li
475.078 303.5 li
475.078 302 li
474.578 302 li
474.578 303 li
472.078 303 li
472.078 302 li
471.578 302 li
cp
f
82.0595 229 mo
85.0574 229.111 li
85.0947 228.112 li
82.0968 228 li
cp
88.0554 229.223 mo
91.0533 229.335 li
91.0905 228.335 li
88.0926 228.224 li
cp
94.0512 229.447 mo
97.0491 229.558 li
97.0864 228.559 li
94.0884 228.447 li
cp
100.047 229.67 mo
103.045 229.782 li
103.082 228.782 li
100.084 228.671 li
cp
106.043 229.893 mo
109.041 230.005 li
109.078 229.006 li
106.08 228.894 li
cp
112.039 230.117 mo
115.037 230.229 li
115.074 229.229 li
112.076 229.118 li
cp
118.035 230.34 mo
121.032 230.452 li
121.07 229.453 li
118.072 229.341 li
cp
124.011 230.619 mo
127.004 230.829 li
127.074 229.831 li
124.081 229.622 li
cp
129.996 231.038 mo
132.989 231.248 li
133.059 230.251 li
130.066 230.041 li
cp
135.982 231.458 mo
138.974 231.667 li
139.044 230.67 li
136.052 230.46 li
cp
141.967 231.877 mo
144.96 232.087 li
145.03 231.089 li
142.037 230.88 li
cp
147.952 232.296 mo
150.945 232.506 li
151.015 231.509 li
148.022 231.299 li
cp
153.938 232.716 mo
156.93 232.926 li
157 231.928 li
154.008 231.718 li
cp
159.923 233.135 mo
161.543 233.249 li
161.541 233.249 li
162.913 233.352 li
162.988 232.355 li
161.616 232.251 li
159.993 232.138 li
159.923 233.135 li
cp
165.904 233.577 mo
168.896 233.803 li
168.971 232.806 li
165.979 232.58 li
cp
171.887 234.028 mo
174.879 234.253 li
174.954 233.256 li
171.962 233.031 li
cp
177.87 234.479 mo
180.862 234.704 li
180.937 233.707 li
177.945 233.482 li
cp
183.853 234.93 mo
186.845 235.155 li
186.92 234.158 li
183.928 233.932 li
cp
189.836 235.38 mo
192.828 235.606 li
192.903 234.609 li
189.911 234.383 li
cp
195.819 235.831 mo
198.031 235.998 li
198.788 236.085 li
198.903 235.092 li
198.135 235.003 li
198.126 235.002 li
195.894 234.834 li
195.819 235.831 li
cp
201.768 236.429 mo
204.749 236.773 li
204.863 235.78 li
201.883 235.436 li
cp
207.729 237.117 mo
210.709 237.461 li
210.824 236.467 li
207.843 236.123 li
cp
213.689 237.805 mo
216.669 238.148 li
216.784 237.155 li
213.804 236.811 li
cp
219.65 238.492 mo
222.63 238.836 li
222.745 237.843 li
219.764 237.499 li
cp
225.61 239.18 mo
228.59 239.524 li
228.705 238.531 li
225.725 238.187 li
cp
231.554 239.894 mo
234.523 240.319 li
234.665 239.329 li
231.695 238.904 li
cp
237.493 240.743 mo
240.463 241.167 li
240.605 240.177 li
237.635 239.753 li
cp
243.433 241.591 mo
246.403 242.016 li
246.544 241.026 li
243.574 240.601 li
cp
249.373 242.44 mo
252.342 242.864 li
252.484 241.874 li
249.514 241.45 li
cp
255.312 243.288 mo
258.282 243.713 li
258.424 242.723 li
255.454 242.299 li
cp
261.238 244.157 mo
264.198 244.646 li
264.361 243.659 li
261.401 243.17 li
cp
267.158 245.135 mo
270.118 245.623 li
270.281 244.637 li
267.321 244.148 li
cp
273.078 246.112 mo
276.038 246.601 li
276.2 245.614 li
273.241 245.126 li
cp
278.997 247.09 mo
281.957 247.579 li
282.12 246.592 li
279.16 246.103 li
cp
284.917 248.067 mo
287.487 248.492 li
287.854 248.568 li
288.057 247.589 li
287.68 247.51 li
287.67 247.508 li
285.08 247.081 li
284.917 248.067 li
cp
290.791 249.179 mo
293.728 249.789 li
293.932 248.81 li
290.995 248.2 li
cp
296.665 250.4 mo
299.603 251.011 li
299.806 250.032 li
296.869 249.421 li
cp
302.54 251.621 mo
305.477 252.232 li
305.681 251.253 li
302.743 250.642 li
cp
308.414 252.843 mo
311.351 253.454 li
311.555 252.475 li
308.618 251.864 li
cp
314.282 254.076 mo
317.214 254.711 li
317.425 253.734 li
314.493 253.099 li
cp
320.146 255.346 mo
323.078 255.981 li
323.29 255.003 li
320.358 254.368 li
cp
326.01 256.615 mo
328.942 257.25 li
329.154 256.273 li
326.222 255.638 li
cp
331.874 257.885 mo
334.806 258.52 li
335.018 257.542 li
332.086 256.908 li
cp
337.721 259.172 mo
340.635 259.884 li
340.872 258.913 li
337.958 258.2 li
cp
343.549 260.596 mo
346.463 261.309 li
346.701 260.337 li
343.787 259.625 li
cp
349.378 262.021 mo
352.292 262.734 li
352.529 261.762 li
349.615 261.05 li
cp
355.206 263.446 mo
358.12 264.158 li
358.358 263.187 li
355.443 262.475 li
cp
361.015 264.903 mo
363.912 265.68 li
364.171 264.715 li
361.274 263.937 li
cp
366.81 266.458 mo
369.707 267.235 li
369.966 266.269 li
367.069 265.492 li
cp
372.605 268.013 mo
375.502 268.79 li
375.761 267.824 li
372.864 267.047 li
cp
378.4 269.567 mo
379.941 269.981 li
381.272 270.38 li
381.559 269.422 li
380.215 269.019 li
378.659 268.601 li
378.4 269.567 li
cp
384.145 271.242 mo
387.019 272.104 li
387.306 271.146 li
384.433 270.284 li
cp
389.892 272.966 mo
392.766 273.828 li
393.053 272.87 li
390.18 272.008 li
cp
395.639 274.69 mo
398.513 275.552 li
398.8 274.595 li
395.927 273.732 li
cp
401.343 276.473 mo
404.174 277.466 li
404.505 276.522 li
401.674 275.53 li
cp
407.005 278.459 mo
409.836 279.451 li
410.167 278.508 li
407.336 277.515 li
cp
412.667 280.444 mo
415.498 281.437 li
415.829 280.493 li
412.998 279.5 li
cp
418.329 282.429 mo
419.163 282.722 li
419.178 282.727 li
421.232 283.302 li
421.501 282.339 li
419.478 281.773 li
418.66 281.486 li
418.329 282.43 li
cp
424.12 284.111 mo
427.009 284.92 li
427.279 283.957 li
424.39 283.148 li
cp
429.898 285.729 mo
432.787 286.538 li
433.057 285.575 li
430.168 284.766 li
cp
435.676 287.347 mo
437.938 287.98 li
438.552 288.165 li
438.84 287.207 li
438.222 287.021 li
438.217 287.02 li
435.946 286.384 li
435.676 287.347 li
cp
441.424 289.031 mo
444.297 289.896 li
444.585 288.939 li
441.713 288.073 li
cp
447.169 290.762 mo
450.041 291.628 li
450.33 290.67 li
447.458 289.804 li
cp
452.914 292.493 mo
455.786 293.359 li
456.075 292.401 li
453.202 291.536 li
cp
458.667 294.209 mo
461.545 295.055 li
461.827 294.096 li
458.949 293.25 li
cp
464.423 295.902 mo
467.301 296.748 li
467.583 295.789 li
464.705 294.943 li
cp
470.179 297.595 mo
473.057 298.441 li
473.339 297.482 li
470.461 296.636 li
cp
0 .993286 1 0 cmyk
f
82.0014 215.994 mo
122.24 222.242 li
161.478 230.24 li
197.989 237.742 li
230.502 242.744 li
230.503 242.744 li
260.253 247.244 li
287.502 251.244 li
312.741 255.242 li
336.977 259.99 li
359.462 264.986 li
379.944 270.232 li
399.929 276.227 li
419.184 282.479 li
437.939 287.73 li
456.179 293.227 li
473.174 298.726 li
473.482 297.774 li
456.476 292.272 li
438.217 286.77 li
419.473 281.521 li
400.226 275.272 li
380.213 269.268 li
359.695 264.014 li
337.18 259.01 li
312.915 254.258 li
287.655 250.256 li
260.401 246.255 li
260.403 246.256 li
230.653 241.756 li
230.654 241.756 li
198.167 236.758 li
161.679 229.26 li
122.417 221.258 li
82.1549 215.006 li
82.0014 215.994 li
cp
.883848 .768521 0 0 cmyk
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 43 /plus put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 55 /seven put
dup 57 /nine put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 76 /L put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 113 /q put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 122 /z put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
38 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/space <1C60D8A8C9B8707C25> |-
/plus <1C60D8A8C9B7E7C1AF20108BE9542537F46D63CC3CA2839958A1F5DF8
0C8F650E8951850C571859AA14DD682> |-
/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED949
85BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375
C6ADD098717CA70F621> |-
/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50
B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF
4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FB
CD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C5
8344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE234
02242D396440157FC51> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
/six <1C60D8A8C9B7A73DB682174C160AB8115D90A4524BD5B352C23110F23E
E4E20266716093AE0643A076F6C57BA527F49BB819243E28C4CA7F711F41FA01
318856C15674E51D546E83D25FE9DB7A4B9EDFDDE57E488CC507C2304526D6E8
0E07D1EEFCA86373B2F664DD3DA4646061C700F112AB44ED3896FA596FE81443
6AD1F1DC5FEDB207A575A17735F66E79BF0D0E423C92F1E9255D38F15B49459F
3693E95DCE92EBF25C243713EDA9138A49C42AA83683249878EEA825672AC6D9
9C32B9109B3D5797A7> |-
/seven <1C60D8A8C9B7A73DFE31854B8CA51F015562FECC80A8475F282F7722
52E10D05B7D43981266F60616595AB1BFBC47BFB03D1BE> |-
/nine <1C60D8A8C9B7A73D92CE6A66BA49C70A16072730ADF99EB50B81EC870
A54394DDFE38FABEC18FB7B826889153F28664691169009324BD4E9661571BB9
1EC6E47B44C4894E182CDFFE1F715113C62DB236897358730FEA1D138847386A
CC90D129A1077A70DC9DAEA483EA5552EB360DE0397958942F0F1C3FE8C7E6CD
3CF99FAB1F16B30CA1A210BFF9DDE43DE5ED76615C174EEED6DAB9E5A77B1C62
FBE9CABC1B3A46D497C4D6EFFC96F4CC02C8A01382FD55BD7B4> |-
/A <1C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C49
5B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F15A
9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A63
AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D739850711
02DFA93B6532> |-
/C <1C60D8A8C9B64EDFFBA6F0CF8A2CDA79A069460245F5373797A9E71DEA34
5031885496623E7C65FDB470FC6BFF7BE37B20FF363C43CAB08BA8E918FCBA9D
EB0021B12355971EB2945D0594E78D2EE4D593C49790304E106026BC94209715
8DDBF12F8B83C9752B02212C28957008FA70A685356583CB4C7D6F55B12AC739
9ECFE4B69C91B472A6132E65C9F7B697AE783582C9D65C392064A7C49C83B283
409DD22AD16B7DD28B54D5FC454C> |-
/E <1C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFC
A94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52
C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB
92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A
3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC19495
58757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215F
A79B98816AEC20BC3F> |-
/G <1C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F608
6ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB21115511238
376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3BFE
6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B11
ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C41B
FE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A34A
CA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |-
/I <1C60D8A8C9B81F2C3A0A02564E7D4C279888DF3754179E93227DE304C0C9
64F0884ECCD4584153E47F1EA31388FE202C61849A093340FE4B9D53774AFF48
A8CAE2304CA5B92609AD38240AA6AEAF6E8AB66763220047F647E30DE8B74D2A
7DF15DDA4EFCA27B915E1B9ED43E7C12> |-
/L <1C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09
270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C2
21DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12
A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B
847D2C24AD687E0CDB56> |-
/P <1C60D8A8C9B7EF322B88F9F448EE5C6C6600BEF9C3C9A017B9BABF876458
925BFD3DF1270B888D0A52682DD77562B0592DCEFA4305CC7C82B5C217C153D7
D799EF75C3E1B47B2F2C3741BE023ABA656D3600645948113D9E1ACE5988E886
C2CAB89042DA868AC9EEC60CE17BA00926C89C442DF26FC8F7E4DF94B56A18CF
B31DE37DED0B361C6E9E1A158721E9F2BF357AD3A9D82EC3F61E7737142FF120
86F5CF2AAB01A87FB3B34AEED6F7C6CCE06EC32D6DE2EC0B548299344251FBC6
28> |-
/R <1C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B03B
D344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687DE6
B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF919356C
91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B78
271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235A6
9A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC20
DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |-
/S <1C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC49
387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F8D
7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5BFD
7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEEB6
B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E645337518
CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE9049
07DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3AB4
44BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80CE
13D22435E5FCC1B5A000DE> |-
/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F
6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD9755
6EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58
110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-
/V <1C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777BDE
67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD4A
5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712B5
02AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC078154F
7D9BB4AB2053> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8
F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9A
F110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D39992
4398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D660
3C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83
F23AED1F56FC130F21> |-
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEA
D3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15
F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA
0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984
A59E1CFFFD06EA629758085868D3F5F7204292> |-
/f <1C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF3209
2BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274BF
E5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40FC
628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C5573
F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FDD9
41D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |-
/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E0
27FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0
134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9
C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E
2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E
36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E9
7FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F
735A795EACD82F245D81FB43B5> |-
/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D
9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F9
8C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365
B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090
E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB
8CA3E9F85837FAC6> |-
/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C430
4B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D
244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527
D6441CE02F5A28D63A618F> |-
/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D
24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E
9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2
556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD
574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F24910
7C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18C
E6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE9556
17323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D98
7ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFE
C679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82
B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B5179
96> |-
/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC
81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D
4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF
60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B2800261
30687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E
277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0
027198438FE663C2EACF82CEB86F7C727594> |-
/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD441
6250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF9
96A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA4367
02294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D
9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-
/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD3
9E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB8
13B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272
E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462
E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D
017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D
23764933CEE9DC71CCD4C3E61E53DA702E> |-
/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE
6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983
E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53
A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455
AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C
360275B503E4954E912CD342> |-
/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448
713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43
DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B
36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-
/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A1
99CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152
D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B
867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E16
9A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97
520325221F3417C7781EB09765> |-
/w <1C60D8A8C9B6079F04262E67C9FB6DFF2B2A2909EEE6C74AA460646E6418
023C6B7542892CB61B617E90DA8C58C94D261B2066526778FA77F05506A363FE
5266E7C038D05568B67F867A9FF97988CC575C0A7C1F4DE18568CA203BA52391
7E8148BF72D6E4FEA4245E4F8E144E9C4F6DDF7EC6DAC323FEA1568E1A6C8D85
26507DC2E91B066C274F65DD58F049FFA3E606BF021DDA3B6174F51DB721A6C7
E1197FF1898AE92ADB1C1DD84FD7DEC1> |-
/z <1C60D8A8C9B77FE2C18484DB453227C527C164B5A1471C4657A5A14A46A1
D3A0BD899640627BE2A7B9DB921E26CD53975830B919737E4B957FDCE605D77D
C327B798A39B69F36340D55162C5C44140DACBE16FE7873A74F99AB90B7497> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OJTZWZ+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/OJTZWZ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 10{/.notdef}rp /plus 2{/.notdef}rp /period /.notdef /zero 
/one /two 3{/.notdef}rp /six /seven /.notdef /nine 7{/.notdef}rp 
/A /.notdef /C /.notdef /E /.notdef /G /.notdef 
/I 2{/.notdef}rp /L 3{/.notdef}rp /P /.notdef /R /S 
/T /.notdef /V 10{/.notdef}rp /a /b /c /.notdef 
/e /f /.notdef /h /i 2{/.notdef}rp /l /m 
/n /o /.notdef /q /r /.notdef /t /u 
/.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]
OJTZWZ+TimesNewRomanPSMT nf
OJTZWZ+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf
96.7031 177.215 mo
(Local equilibrium flow)sh
96.7031 198.814 mo
(Partial thermalization)sh
372.418 19.145 mo
(Au+Au 19.6 GeV)sh
372.418 40.7451 mo
(STAR)
[10.0107 9.55371 12.999 0 ]xsh
372.418 121.966 mo
(Au+Au 200 GeV)sh
372.418 143.566 mo
(STAR)
[10.0107 9.55371 12.999 0 ]xsh
372.418 225.645 mo
(Pb+Pb 2.76 )sh
460.766 225.645 mo
(TeV)
[9.73828 7.98926 0 ]xsh
372.418 247.245 mo
(ALICE)sh
64.7657 193.903 mo
90.3907 193.903 li
90.3907 192.903 li
64.7657 192.903 li
.883848 .768521 0 0 cmyk
f
64.7657 173.257 mo
67.7656 173.257 li
67.7656 172.257 li
64.7657 172.257 li
cp
70.7656 173.257 mo
73.7656 173.257 li
73.7656 172.257 li
70.7656 172.257 li
cp
76.7656 173.257 mo
79.7656 173.257 li
79.7656 172.257 li
76.7656 172.257 li
cp
82.7656 173.257 mo
85.7656 173.257 li
85.7656 172.257 li
82.7656 172.257 li
cp
88.7656 173.257 mo
90.3907 173.257 li
90.3907 172.257 li
88.7656 172.257 li
cp
0 .993286 1 0 cmyk
f
20.3331 215.246 mo
20.209 215.246 li
8.74178 209.537 li
8.62057 209.482 8.5601 209.384 8.5601 209.24 cv
8.5601 209.092 li
8.5601 208.96 8.62057 208.86 8.74178 208.795 cv
17.4174 204.476 li
20.3907 204.476 li
20.3907 215.131 li
20.3331 215.246 li
19.2193 205.115 mo
10.1114 209.652 li
19.2193 214.19 li
19.2193 205.115 li
.74136 .674891 .6636 .859129 cmyk
f
gsave
23.9213 204.476 mo
20.3907 204.476 li
20.3907 203.201 li
20.3331 203.086 li
20.209 203.086 li
17.4174 204.476 li
13.0976 204.476 li
13.0976 194.844 li
23.9213 194.844 li
23.9213 204.476 li
clp
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 112 /p put
def
/FontBBox {-498 -307 1333 1023} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/p <1C60D8A8C9B7A73D8E81CAA60D14E3E98C0D2E05AFF3FB862AEA3DF0C900
A6244DFC203BD831D689E22DB403066666BFF3F475FEB3829C9D7ECDAB0DC925
8303ED1E42322E45D2E74BDF643BC8197209EBDB2F245FB9585F9D7C5F4C0605
E973113BC15F69B61D839FC08F998D44808113D68025D33AED404EFD98528A1C
4BF8833248921CD84E8766EA07C2F75403CFFB9CC1A48AD11EBE79666821D3F8
B741F5FE91D0F75F9F9632B838010D323EEA8F5B163329DD917466275C63DA4F
B54445D129B662802A208E18CFAD13CCA131C101542E45275DFEF10296A99CE9
BEFE39650F703ED74130D9F7EBDFC13232> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OJTZXA+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/OJTZXA+TimesNewRomanPS-ItalicMT*1 
[112{/.notdef}rp /p 143{/.notdef}rp]
OJTZXA+TimesNewRomanPS-ItalicMT nf
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -16.5 -16.5 0 0 0 ]msf
20.3901 202.648 mo
(p)sh
grestore
gsave
20.3907 204.476 mo
17.4174 204.476 li
20.209 203.086 li
20.3331 203.086 li
20.3907 203.201 li
20.3907 204.476 li
clp
17.4174 203.086 mo
20.3907 203.086 li
20.3907 204.476 li
17.4174 204.476 li
cp
f
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -16.5 -16.5 0 0 0 ]msf
20.3901 202.648 mo
(p)sh
grestore
gsave
25.7534 194.256 mo
19.9975 194.256 li
19.9975 191.674 li
25.7534 191.674 li
25.7534 194.256 li
clp
OJTZWZ+TimesNewRomanPSMT*1 [0 -9.5625 -9.5625 0 0 0 ]msf
25.687 194.352 mo
(t)sh
grestore
gsave
27.2744 190.32 mo
24.7496 190.32 li
24.7496 188.924 li
27.2744 188.924 li
27.2744 190.32 li
clp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZWZ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CDCEBD9C789FC719A6E699B9D99F66BE737EEBAFF
7111B9225F270084B7F68BC0DDECBD8A23968AE48D16B628A165111DDE7E6CD8
DD6007F82AE5C9057E54AF2D17F8AB7C9B11610F20000D2C65AB75461D35EBD1
19C9E1C1E902BC7C231A59B4A0E3A4C206C50EEA0EE1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZWZ+TimesNewRomanPSMT /Encoding get
dup 44 /comma put
pop
%ADOEndSubsetFont
/OJTZWZ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 10{/.notdef}rp /plus /comma /.notdef /period /.notdef 
/zero /one /two 3{/.notdef}rp /six /seven /.notdef /nine 
7{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G 
/.notdef /I 2{/.notdef}rp /L 3{/.notdef}rp /P /.notdef /R 
/S /T /.notdef /V 10{/.notdef}rp /a /b /c 
/.notdef /e /f /.notdef /h /i 2{/.notdef}rp /l 
/m /n /o /.notdef /q /r /.notdef /t 
/u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]
OJTZWZ+TimesNewRomanPSMT nf
OJTZWZ+TimesNewRomanPSMT*1 [0 -9.5625 -9.5625 0 0 0 ]msf
25.687 190.836 mo
(,)sh
grestore
gsave
25.792 187.998 mo
19.5859 187.998 li
19.5859 185.882 li
25.792 185.882 li
25.792 187.998 li
clp
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZXA+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B854D0F4620EF8AB3A43726CA9F1D5CA3F0AC21C46156AA7EA
FD30B421C67072AD9E9673A39A0C73C611BF2D30694524FB9362DF4B7BF42BD4
03E13FE93BE1CC4B973BBB2F8A1766424F865950A3B4E0C2909B014DAC40D6C3
1A5A624961F141A00D5EA650DA557D976995CE1AB37642609DB19511A8C6A021
6D711E915D0A16129E261DB540D787FC5DFEB3FE9BF504AACF3812EF9A098716
4BC0CA8AED8AA0620C2C50ECD33D7A5F1286537664219BFD394BB743A505> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZXA+TimesNewRomanPS-ItalicMT /Encoding get
dup 105 /i put
pop
%ADOEndSubsetFont
/OJTZXA+TimesNewRomanPS-ItalicMT*1 
[105{/.notdef}rp /i 6{/.notdef}rp /p 143{/.notdef}rp]
OJTZXA+TimesNewRomanPS-ItalicMT nf
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -9.5625 -9.5625 0 0 0 ]msf
25.687 188.492 mo
(i)sh
grestore
20.3331 184.637 mo
20.209 184.637 li
8.74178 178.928 li
8.62057 178.873 8.5601 178.774 8.5601 178.631 cv
8.5601 178.482 li
8.5601 178.351 8.62057 178.251 8.74178 178.186 cv
17.4177 173.866 li
20.3907 173.866 li
20.3907 184.521 li
20.3331 184.637 li
19.2193 174.506 mo
10.1114 179.043 li
19.2193 183.581 li
19.2193 174.506 li
f
gsave
23.9213 173.866 mo
20.3907 173.866 li
20.3907 172.592 li
20.3331 172.476 li
20.209 172.476 li
17.4177 173.866 li
13.0976 173.866 li
13.0976 164.235 li
23.9213 164.235 li
23.9213 173.866 li
clp
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -16.5 -16.5 0 0 0 ]msf
20.3901 172.039 mo
(p)sh
grestore
gsave
20.3907 173.866 mo
17.4177 173.866 li
20.209 172.476 li
20.3331 172.476 li
20.3907 172.592 li
20.3907 173.866 li
clp
17.4177 172.476 mo
20.3907 172.476 li
20.3907 173.866 li
17.4177 173.866 li
cp
f
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -16.5 -16.5 0 0 0 ]msf
20.3901 172.039 mo
(p)sh
grestore
gsave
25.792 163.73 mo
20.3032 163.73 li
20.3032 161.268 li
25.792 161.268 li
25.792 163.73 li
clp
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZXA+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/t <1C60D8A8C9B854D0F4BEDEF58C8CF76928EC03CF9E6A69066343B65CF2F2
9CD6E545B8A00752040D324808F3F5D7377FE94463A69378800F35B93737A90E
D33397EF28DE6855D7404A61AF81C1EEF0FFED3B556E8E9BEB0451CA1D28658C
106F5916BA3D50810F2ED0B604B6D36F194AAE36158BC40E0B3FFAD76350433E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZXA+TimesNewRomanPS-ItalicMT /Encoding get
dup 116 /t put
pop
%ADOEndSubsetFont
/OJTZXA+TimesNewRomanPS-ItalicMT*1 
[105{/.notdef}rp /i 6{/.notdef}rp /p 3{/.notdef}rp /t 139{/.notdef}rp]
OJTZXA+TimesNewRomanPS-ItalicMT nf
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -9.5625 -9.5625 0 0 0 ]msf
25.687 164.117 mo
(t)sh
grestore
gsave
27.2744 159.898 mo
24.7496 159.898 li
24.7496 158.502 li
27.2744 158.502 li
27.2744 159.898 li
clp
OJTZWZ+TimesNewRomanPSMT*1 [0 -9.5625 -9.5625 0 0 0 ]msf
25.687 160.414 mo
(,)sh
grestore
gsave
27.7525 157.924 mo
19.6055 157.924 li
19.6055 153.622 li
27.7525 153.622 li
27.7525 157.924 li
clp
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZXA+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/j <1C60D8A8C9B854D0F4659B7FFADF9957DA68B07B6E521A3DF198F53722C1
EFCEAF10026DF73D4410F9B17662445DB6D83FCD5219002D838CE9DCB002E084
6F17BE49CA01BE8786E4F26F674D269761A97042F7EFEAFEE3C5B2BB4C341652
31ED8551E3DA0C24B7313736B99DA84705B3ED16D047EB9A35258AE26E18D6CF
2C6B83E7F0C4D2680AC8F3A24A06D908DFCA82AD4DED6865586C5C902373DF8D
C54F895E34149677C3F663323010C38B35E7F6C07F0B821D00A4DAC9EDFDFD4E
B4C4ED970BDCEF5168A762B8982DCC18EA83CE45E12A83029A091E9B3F36FD30
42E8F7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZXA+TimesNewRomanPS-ItalicMT /Encoding get
dup 106 /j put
pop
%ADOEndSubsetFont
/OJTZXA+TimesNewRomanPS-ItalicMT*1 
[105{/.notdef}rp /i /j 5{/.notdef}rp /p 3{/.notdef}rp /t 139{/.notdef}rp]
OJTZXA+TimesNewRomanPS-ItalicMT nf
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -9.5625 -9.5625 0 0 0 ]msf
25.687 156.289 mo
(j)sh
grestore
16.2657 222.008 mo
3.56249 217.836 li
3.56249 217.039 li
16.2657 221.211 li
16.2657 222.008 li
f
16.2657 222.008 mo
16.2657 221.211 li
28.9688 217.039 li
28.9688 217.836 li
16.2657 222.008 li
f
3.56249 150.758 mo
3.56249 149.961 li
16.2657 145.789 li
16.2657 146.586 li
3.56249 150.758 li
f
28.9688 150.758 mo
16.2657 146.586 li
16.2657 145.789 li
28.9688 149.961 li
28.9688 150.758 li
f
18.1888 231.007 mo
18.1834 231.002 li
27.6183 227.405 li
10.2166 224.824 li
27.7031 227.398 li
18.1888 231.007 li
f
20.2969 233.211 mo
18.1875 231.008 li
18.1888 231.007 li
27.7031 227.398 li
10.2166 224.824 li
0 223.32 li
0 144.477 li
.796911 144.477 li
.796911 222.664 li
30.2812 226.977 li
30.2812 227.773 li
19.6407 231.898 li
20.625 232.883 li
20.2969 233.211 li
f
gsave
20.605 140.851 mo
8.92282 140.851 li
8.92282 136.247 li
20.605 136.247 li
20.605 140.851 li
clp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZWZ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D0F4B64A43F243E3CCF111DDD476299F3B748356> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZWZ+TimesNewRomanPSMT /Encoding get
dup 47 /slash put
pop
%ADOEndSubsetFont
/OJTZWZ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 10{/.notdef}rp /plus /comma /.notdef /period /slash 
/zero /one /two 3{/.notdef}rp /six /seven /.notdef /nine 
7{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G 
/.notdef /I 2{/.notdef}rp /L 3{/.notdef}rp /P /.notdef /R 
/S /T /.notdef /V 10{/.notdef}rp /a /b /c 
/.notdef /e /f /.notdef /h /i 2{/.notdef}rp /l 
/m /n /o /.notdef /q /r /.notdef /t 
/u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]
OJTZWZ+TimesNewRomanPSMT nf
OJTZWZ+TimesNewRomanPSMT*1 [0 -16.5 -16.5 0 0 0 ]msf
20.3901 140.867 mo
(/)sh
grestore
gsave
23.9213 119.585 mo
13.0976 119.585 li
13.0976 109.954 li
23.9213 109.954 li
23.9213 119.585 li
clp
OJTZXA+TimesNewRomanPS-ItalicMT*1 [0 -16.5 -16.5 0 0 0 ]msf
20.3901 117.758 mo
(p)sh
grestore
gsave
25.7534 109.365 mo
19.9975 109.365 li
19.9975 106.784 li
25.7534 106.784 li
25.7534 109.365 li
clp
OJTZWZ+TimesNewRomanPSMT*1 [0 -9.5625 -9.5625 0 0 0 ]msf
25.687 109.461 mo
(t)sh
grestore
16.2657 125.82 mo
4.64069 121.883 li
4.64069 121.086 li
16.2657 125.023 li
16.2657 125.82 li
f
16.2657 125.82 mo
16.2657 125.023 li
27.8906 121.086 li
27.8906 121.883 li
16.2657 125.82 li
f
4.64069 103.93 mo
4.64069 103.133 li
16.2657 99.1953 li
16.2657 99.9922 li
4.64069 103.93 li
f
27.8906 103.93 mo
16.2657 99.9922 li
16.2657 99.1953 li
27.8906 103.133 li
27.8906 103.93 li
f
16.2657 132.477 mo
3.32816 128.258 li
3.32816 127.461 li
16.2657 131.68 li
16.2657 132.477 li
f
16.2657 132.477 mo
16.2657 131.68 li
29.2031 127.461 li
29.2031 128.258 li
16.2657 132.477 li
f
3.32816 97.5546 mo
3.32816 96.7577 li
16.2657 92.539 li
16.2657 93.3359 li
3.32816 97.5546 li
f
29.2031 97.5546 mo
16.2657 93.3359 li
16.2657 92.539 li
29.2031 96.7577 li
29.2031 97.5546 li
f
gsave
20.8355 77.4776 mo
9.20361 77.4776 li
9.20361 64.8721 li
20.8355 64.8721 li
20.8355 77.4776 li
clp
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZWZ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B6B41CB58B94D8D18D555BC5BEBEC52562935C46122A
FAA0ED803E3529535992C453E7D39C781D037D8C60D56858EB62D5407C7BDFFF
0561EFA95048C2E6327B2C56953B4D447FAEA6BA9616D949A9F21B695CF6FFFF
96A8F94ED1C78A77DDD1A70AEEE65948B26F6C68E2D7FDE8A31D4B74D5501179
5EC8D162CDF753693F15B5AA4A992BED864233FE0C7EA3C38ACC8B2C4FCDB43A
9F46E5CCDF50F3E149810FDA5D16DFD9E6B5280E4F2FB916EA8D7443F4D0CB60
59CCDA3934E6671B634107BFE19354D8C202D44FD829DC6293AC970884F5D2CC
9E99B75D7A154B0414ED2E8B1FF497056830BA1DD37CEB0B5DDA3C7709801620
2DC0B7FCCA29D6FA785F8E1AEDB90F4F0137315CB64CB58CC77B9A0859824EFF
52344495528D08F4C7F6A5958F8956026AECA3202A9F2648885216561F87> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZWZ+TimesNewRomanPSMT /Encoding get
dup 37 /percent put
pop
%ADOEndSubsetFont
/OJTZWZ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 5{/.notdef}rp /plus /comma /.notdef 
/period /slash /zero /one /two 3{/.notdef}rp /six /seven 
/.notdef /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
/.notdef /G /.notdef /I 2{/.notdef}rp /L 3{/.notdef}rp /P 
/.notdef /R /S /T /.notdef /V 10{/.notdef}rp /a 
/b /c /.notdef /e /f /.notdef /h /i 
2{/.notdef}rp /l /m /n /o /.notdef /q /r 
/.notdef /t /u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]
OJTZWZ+TimesNewRomanPSMT nf
OJTZWZ+TimesNewRomanPSMT*1 [0 -16.5 -16.5 0 0 0 ]msf
20.3901 78.0547 mo
(%)sh
grestore
gsave
27.7115 83.2349 mo
4.61127 83.2349 li
4.61127 79.3906 li
27.7115 79.3906 li
27.7115 83.2349 li
clp
%ADOBeginSubsetFont: OJTZXB+EuclidSymbol-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (OJTZXB+EuclidSymbol)
%%Title: (OJTZXB+EuclidSymbol Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /OJTZXB+EuclidSymbol def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-166 -253 1083 950} def
/FontInfo 4 dict dup begin
/FSType 0 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 193 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31144C6DA16F7BC88F58201AFC979B07945644B0DE11F
7696D3918A6A4> |
11 <001C60D8A8C9B7361F026C90415150EF73EECFB0F5D1859D81A95734A88F
918A757D6658CD63D670E6F96F46CB32F26F4B913D0ABF1C26A72A7BF7EFA0B0
847CD7F8E9BCD53DB080D1BDE25062D12FC483F59F1D61CA37F4AB8D777F4342
DECE0641880E7189E6A84097D60F2FBF31A46C96B6F5DE1E0A62D1D5E92AD634
66852A0EFBC940CCECEE998385455C7B10514CB2DFC712D2FE37D7C401D24C97
BC6FC3E24FD582C0E743013324C4BB17A590B67F54D30767812C> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /OJTZXB+EuclidSymbol-Identity-H /Identity-H 0 [/OJTZXB+EuclidSymbol] ct_ComposeFont pop end end
%ADOEndSubsetFont
/OJTZXB+EuclidSymbol-Identity-H findfont [0 -16.5 -23.1 0 0 0 ]msf
21.937 84.8516 mo
(\000\013)sh
grestore
gsave
27.7115 63.1158 mo
4.61127 63.1158 li
4.61127 59.2715 li
27.7115 59.2715 li
27.7115 63.1158 li
clp
%ADOBeginSubsetFont: OJTZXB+EuclidSymbol-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OJTZXB+EuclidSymbol 1 GetGlyphDirectory
12 <001C60D8A8C9B7361F021858F9E5B069E8CC96BD5F64E200E47B850B721C
1CD244D2FF5E3B6A434A87E1C56DF9FDF2975A7B782219354D400590C03D6E39
54934871364E55D05A249B0B731086E76CAEFDBD8C63DD39B280EF248F4A26E7
0CEABE6E2C41313CE7B9D305AF14325C6BAF30942CCAA5830F2D8E8748228234
E4EA1DE7DC8A5DFCBB6C47C51BB75B4FAE6BD76D28EC4393CE1FD138FAF511CC
3D64B0504CE02032E0EB40A7FEDFAD15FA496540CB87C5AC9346C1503DE8> |
!
end
end end
%ADOEndSubsetFont
/OJTZXB+EuclidSymbol-Identity-H findfont [0 -16.5 -23.1 0 0 0 ]msf
21.937 64.0391 mo
(\000\014)sh
grestore
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZWZ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40E
B48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048
D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC6
66023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F759
04A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B84
31B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E
94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF
1C7730E7CC0F462D79552DFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZWZ+TimesNewRomanPSMT /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/OJTZWZ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 5{/.notdef}rp /plus /comma /.notdef 
/period /slash /zero /one /two 3{/.notdef}rp /six /seven 
/.notdef /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
/.notdef /G /.notdef /I 2{/.notdef}rp /L 3{/.notdef}rp /P 
/.notdef /R /S /T /.notdef /V 10{/.notdef}rp /a 
/b /c /.notdef /e /f /.notdef /h /i 
2{/.notdef}rp /l /m /n /o /p /q /r 
/.notdef /t /u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]
OJTZWZ+TimesNewRomanPSMT nf
OJTZWZ+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf
32.853 94.3496 mo
(1)sh
32.853 198.25 mo
(1)sh
32.853 302.325 mo
(1)sh
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZXA+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/N <1C60D8A8C9B64EDFF4DA474F415D5DD537FAA93C37EEC62FDC4A039CA573
DD652A21E9CE136A62765D8121CCC1F8B6C69DF6675E56D02777F89248A7E9F8
174321009C99A7EB5A01D10C6E86BF0A4F9A0D56B508A1E855C0FF0A6C58B1C7
7BA71F42A09686FC0B9D9347A0229AAC02E9F435CD8098A9D1CEA8AEE9A656F4
D80C818AD8E6F22D6A0A48B5693B6D4404BEB011866D75A098B62476C7952178
AF8113D66FC324EF6F1393F40514FE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZXA+TimesNewRomanPS-ItalicMT /Encoding get
dup 78 /N put
pop
%ADOEndSubsetFont
/OJTZXA+TimesNewRomanPS-ItalicMT*1 
[78{/.notdef}rp /N 26{/.notdef}rp /i /j 5{/.notdef}rp /p 3{/.notdef}rp 
/t 139{/.notdef}rp]
OJTZXA+TimesNewRomanPS-ItalicMT nf
OJTZXA+TimesNewRomanPS-ItalicMT*1 [18 0 0 -18 0 0 ]msf
275.883 341.881 mo
(N)sh
OJTZWZ+TimesNewRomanPSMT*1 [10.4063 0 0 -10.4063 0 0 ]msf
289.289 347.694 mo
(p)sh
294.492 347.694 mo
(a)sh
299.039 347.694 mo
(r)sh
302.273 347.694 mo
(t)sh
OJTZWZ+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf
47.5781 327.659 mo
(10)
[9 0 ]xsh
306.129 327.659 mo
(100)sh
71.3282 292.875 mo
71.3282 292.125 li
70.8282 292.125 li
70.8282 292.875 li
0 0 0 1 cmyk
f
69.5782 292.375 mo
72.5782 292.375 li
72.5782 291.875 li
69.5782 291.875 li
f
70.8282 297.625 mo
70.8282 298.625 li
71.3282 298.625 li
71.3282 297.625 li
f
69.5782 298.875 mo
72.5782 298.875 li
72.5782 298.375 li
69.5782 298.375 li
f
69.8281 293.625 mo
69.8281 292.375 li
72.3281 292.375 li
72.3282 293.625 li
72.8282 293.625 li
72.8281 291.875 li
69.3282 291.875 li
69.3282 293.625 li
69.8282 293.625 li
cp
f
69.3282 297.375 mo
69.3282 298.625 li
69.3282 298.875 li
72.8281 298.875 li
72.8281 297.375 li
72.3282 297.375 li
72.3282 298.375 li
69.8281 298.375 li
69.8281 297.375 li
69.3282 297.375 li
cp
f
70.8282 292.5 mo
70.8282 298.125 li
71.3282 298.125 li
71.3282 292.5 li
f
69.5782 271.125 mo
72.5782 271.125 li
72.5782 270.625 li
69.5782 270.625 li
f
69.5782 277.625 mo
72.5782 277.625 li
72.5782 277.125 li
69.5782 277.125 li
f
70.8282 270.875 mo
70.8282 277.375 li
71.3282 277.375 li
71.3282 270.875 li
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
OJTZWZ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22A
CE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A03
9A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40
BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FA
AB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593
B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B
93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-
/y <1C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BA
F02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A
3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8
B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD
6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DB
F9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A
71BC990F312D4821883A95164BCE1683B85434AFA8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OJTZWZ+TimesNewRomanPSMT /Encoding get
dup 115 /s put
dup 121 /y put
pop
%ADOEndSubsetFont
/OJTZWZ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 5{/.notdef}rp /plus /comma /.notdef 
/period /slash /zero /one /two 3{/.notdef}rp /six /seven 
/.notdef /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
/.notdef /G /.notdef /I 2{/.notdef}rp /L 3{/.notdef}rp /P 
/.notdef /R /S /T /.notdef /V 10{/.notdef}rp /a 
/b /c /.notdef /e /f /.notdef /h /i 
2{/.notdef}rp /l /m /n /o /p /q /r 
/s /t /u /.notdef /w /.notdef /y /z 
133{/.notdef}rp]
OJTZWZ+TimesNewRomanPSMT nf
OJTZWZ+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf
78.168 279.5 mo
(Statistical error)sh
78.168 301.1 mo
(Systematic error)sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/OJTZXB+EuclidSymbol-Identity-H uf
/OJTZXB+EuclidSymbol /CIDFont ur
/OJTZXA+TimesNewRomanPS-ItalicMT*1 uf
/OJTZXA+TimesNewRomanPS-ItalicMT uf
/TimesNewRomanPS-ItalicMT uf
/OJTZWZ+TimesNewRomanPSMT*1 uf
/OJTZWZ+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 17.0
%%AI8_CreatorVersion: 22.1.0
%%For: (Gary Westfall) ()
%%Title: (sigmapt_general_alice_gavin.eps)
%%CreationDate: 9/17/18 8:11 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;kBcF7ZKQ];hLT'T(-.b@a9D_N8$Dt*9Fqsn1M_HpB>5IOOTZ0kgZMhf/3m+6Wk*5[\lr-MJN<+0X50Mcr0&sl,"<af1e,=_
%@jD[B=KU+RQTcgdp`e[14<+jOM+!"&_AdlZG_1aii^"btN._hXGRSsi#k/j06kc5%QllC5&i2[fl.rV^1/n$g-o)`r4X?$+5Le!2
%U))YoAUL42)s2'K@7*c@P$:IhG6CX`Vs.eNli#L3QjpRj2YL3VqJ\t)h.=%EY1*!nNmqYuD=uF3U9ctthJ'a^XQ\>U!RB:@@reuN
%8VZ&!7q476$c%rl@U(mp2RC$EG!`NcHU._)%ZO?K*tFsqJ-#-u4<5Bm[bsi?4rsa:!EfDW[Ffe?83$n"q>al46nfSahgiTVE$cJr
%";>2f(5tY4AA[P(!*kG:M+B`@M'g$+6m*>,`.Eh2,T)CCK1<mSQX6a'8!Z3=R,+6qUPrdX>Dc]Ro\dJtO>+Ze*7]I`]AHFT)J_Y>
%W.HagLr)sX2qJ]3!jrBTNDQ)W@:Li(`n*UAT`83CIj^4UR[VVTAn%>pp/_1pXouZ$5QH;n/)A[/Afl1H-ndta!ctWcbifLL0AK?@
%W!,[S!$HaM#(;A7cpsb[biT'*SM\?3$p[EZl44>h&jZoF`Wa/O*Pf!C!eSInq=lU^);I)U*0\2UDO)-Kp[kW7$rCTL_$K7F/8>S2
%M/YQX<$;[!71gC?]HRn&'L+Toq9>%6GC[Ll`npr,hTa%B9Kt\(U50p+&-:\g(soo*d)@oT!XqV?gl%.B/2.`'5@]@$N^")-I=RON
%0,R@oJHV+Fp.PPd`M0#@_(]lR)9`m>kTf9m0.gX<Ce8Fji+r!>dJY@F^E'_6=orr5!!IrB+jlUS,F()4i9;`iO0S3;8087@873hK
%5GM*NR7P->@Z`ko$Gl1-#[Rsoi71X0?R89g2ngd\Krq(HGSH.S<m`=3'oeA%%l9>uD%[0-#'LR7SOgOsM$.VuJ&+q5W`XqVMFDc&
%Ym@NIMm*X^_Q+q"NP`;!&mcqWHk3(kdu3J,)"CUN-\"8^r&st2X^IdZ-Yrt``:jsQK0=gYYRTq2r.P%23J$XQI=e*\#keOQ6:dJ>
%(c(Fir.P$'hs`2`'?#a<M=JJaY[?l5[NS4eNgC9P*:k"g&T\8-i]D/+1%goW9H1t].Hb9\\%mKt($m%?KTND@ENemi/2?o/>J^=/
%'#n1mpVQpG:O!"hLZK%21$.m5r.M1[s558j,1[CN=,\51jE1H#cKbuo1JAnQ3c'NG`q'B.*)d@sa)kb&(c!`tgk,QYD.)gWc%Nc_
%GN3#iX0@*C'=PdS%Jtp+K("DcYRTri_9-OOD`a>-(^&?,?AEf3iO'+mN\q"+!cJmf9JPEZFdVJ30BO4LS<jN=2bZ;L`FHs8nbr5D
%rkjt1bJ`+nAWD%g+ctmul`Y!hp`>'Q[oUn^GWptqO0tJ/HVsh$h4bDLQ7bdtkHZK@8.j0>Gdka'SlVFh*\W8+mgKDGB+73Rre:@X
%!acPSnK/1kn5&u%Ig0[6K$T81pb*E#a5T&WMfXFn*p7O`\\EM5?P1'C?_N"2`GbZeYa.oVN;/D4b%5rOIcJ1nn;$s&PTB\?ElH)s
%&cN"5,JqE=KId96,T/+pV+<Qf#8^!`R.NH^L]8g<Tk*'n]J#A%^LJR/>`+3EF#!)EK"afuQ,LE\DV-#ZJZkfV"U($A&Kr8<GTUaa
%NtX6qbhim070qP/Lr&E8G:=)XhscLo(SY)H#q:oHn4rb8cX:"F7X1NF%ZfQd+pM92,LC@h?PmZ'JS>Ta0b<35QnD&G5)'c7A;%a_
%iuV^#QjWU[P.2Sh\k+@6iSEd#i*E%>r#DR6J)\*91X^c9F+AVm2qL:"'Ej_f:Vd!<^BN:_p_jPa9o4[n0kXtWHm2UGs,eV%KXCu)
%6f]TlNF5.B]^VBr6**1\'&64B3=1mO"#*6=XCV&uoT4Uo83eX5<_SF9CZ$6H[tQO+5=cTRIOQ*KklH!p\3%K'0e`Gl)P/Tl.NsOk
%"T3k=K=lBG9(6^LEDDQ0Zm*"k)-lYArDtE0OnY&E6't3=jU!Iu84P)2i#YB9nG71("b7-=&#kPD@qADNcKGQHYdK9+;?F!4GlmUn
%"DE=k6*94Z&s?W(RS&*rp`GeH7iAa]d@PRljD`"#OVg$M(ZC=l@rVX&"Mh9IV-]&?ljkeILc>BRA'?*t4\2%F3rjSZHkOF8LADo\
%S:R'ME!??c&kdq6O8BaOZm$+s\4If*:f@BX_$"\MU1T:M,3Wo4=U=8%8YWaNT?>X*@7,H0]LTXA$GGCU$b+'g"l3%qI0+U(]EJL!
%BgZfmm>%Si$DIQ;$1?sN`CC$U)j%][j0>;i6C97\&Wl.2SdA=AqKgrC(kEqJj]b;f*[CG^K)IXKm4dEb+@20sSWNb2:r"uDFTFuO
%r`d=Yq_ku2o&%e\eZW6S`ckd)+oQUJDQSE:G'k!W&eJP%Q5%Y0m'A^D7)^R2,ppbKa"&-tYl<X3]VG[Y%V*3sH1S;%qo<IrYc7[F
%C\d1K/Irq54i]8fJ+?S.k<r*?MI)at,XB+):PX9Jn[p$jnp$[P4I>aQo:1lhR$2nkij/VKb)"r&s,aCGa:iXOR'V;+&JLm5nus7e
%I/gI*$J>`B@m>I]B+1LLM>dVS$09^JR#$00,USS_U?)]M;<Hk0!Cd1dT->2<\UWiB,*!aV3E5?DECL\%9'((g,D'2t6ljqK"SQ2-
%*%:A!"m_Fg2!=6a-@!KB6#]#PUHB(_MY%cT7mK:tLO<XQh?Vnso*ec<(OCW!!dU2eR!%=8M7#e1=t.O(Wab\DCFi8h,i8ZNi@.:(
%QT5#"?mCXW+E+&2iOq=FY=YS5jU)SgQ6hH_5R1`dOEMgb_>Pdu3!H':`^0*[/m,HE)keGt6P5).V[8SN&Y/KH9EF%slPsR785m'j
%_L"NnihNr<;ef>%Cfo%p8\ULPa?2*")C1_c;=J9ShD9`?Z<WWTBLka#^'=HY6r_"Zn^p+pkp/4kS`MY1*7M-?___(*hS7/1%#-:]
%Qia!.*XV@^.["aWW^ifHj"3uoe+#.._?Tt!@kZ#d.sR]+qc&\%OUccWlP^hDn6%a`&:'O:Lc3QMMXth<;ket4>N.)ah`Q@X>N6qJ
%>OZo33P5]G-W1+^^iWtr'eL8*C5C2T@V%fMS<K_@.:SkmE3:I,:`<PWhST)';Q@d[QA?dTS'Pj`651u-O]1Orjncl1-m+5`OX.4n
%`8>qjJoX5G"*=3o:r;3/)KLqWc0;+T#0#q*Y`6;'nIZ?lneDHp#4U#FZr'"r9)K4>JECtE]XNiXnrd`PYD_3"=!Cp6Q3<qpAmkFi
%Gam"%Hbi>[gQ@RJP1]Ub%D6lRd?XaV+(7d;@t/qAb3M0]$fHA^EsZ1%3M/QGgnH_Cr!Fm\GarOnH@a:/3tlVW]n7HB;Q).SI7U+i
%l\U<`MF?4ZIAg=]/EXo*B9Hm6no'%?_!A/YH8*t3RAjMYH@ARK#/14/SdS22?cnDT+n<(Mn=E"c1GP[ZU67r*c@1Y48*)illK!@5
%DTU'9CC>kDc2'D:-[EgTH5r61M+E"QJr)8r4N@N9>aXI2&)m"&)dYo-4;*\a0IGW\Ua'c>,&'1$IUa<!SfnSQGU*g5/G?<A!k'u6
%:\.VBUE%i[1sa+n!7iLR3]Xee7X=pqQ&B-#qZ2rA2Q4).hM4\B-@G6?Fd8Tl_q2ltQorP'I2W]]j_/X_^'2i.n1u`qR3J5H_;k4l
%oZht73;4bqE&ekq#kMY:8M3\G*,(ppOGk(:#Rcu;.qe%`feq/)U=^jS^i6^`bs93UL5kdd'W&ZK9)O(2k\[Pi$8;j8hTJP#jh.j#
%)3,.s+d_=I(g`XV.El+=&l['V'*UQXi1-F_V?(Kqaq1l7#X8g\o)g^Sd@qE%=(/k98"PR\Ch;"df.M%a:7[^U/'N0^rC4+t"IH6W
%j]Je<_+Y<YJ&!3a,>'3q0oKhh7nO%-BFUk(U3-0-/8&u#%'G\E5koSq#gH`\cRBCCq=13s.4(EMnt'*h<BP.ETfC3[\UMFI4]mmA
%3Y:IqDQ"Sg*f4#PNk7#.ZAD-C4.Ib=3R/6sf>Uq1a&$2.N>+02\HZHopajp+W$D6(S^1/#!=f<s?S%4Z2^+g0ja3^BM5:0I@sGhV
%+Ka\d\-T1Zl5CBd@bGa2V?H'n80M=RkMJ7fcnBk7"RQrZ)_QsbGCZ13jP*01Bk@`%_O6A4UWT>Ps3r2FbgK%/LU^Ft]FOW8JiuJY
%\OaZ`Mb(0J0sX?VG3K8<il4%#?P/pDJGu:2Ec+o\RNW&%(!"*6<r(O2kW@]UIL`!2^s\a;f9pRpF#b!LkB-Nf/0X#m0lG)M!9I1#
%qr6ul/Bm\UEs\S49;%WGP*u.PTaH_Ta(Mr?GbEJ_Gs3=:hCZF@oFL-a64<NFs2:<LobQQY4`Njq\JcrT1I9C%q=@!<09!%.=b9IA
%WPRL4Y;9TL'-*1j+lr4lo0JV)_^q:Lou,mc(cSbYn\g+V.0u>+67n+Ic%\[aM8c;Is%j*.VSrmoeW^CaS<mC%],=kiK7=W(/R2>"
%i7I[E=D#H%n29/`]$d@7VnM'.&5)^^:X"qbXEKL2D+m@r$^UXIL9$"*q:UX;_3KX;c[s@>ifp%:2B0eGVP^79mCt`c2Da(Ek*m7d
%&&K>$DF,L[IVQH'Vl/p06iZ2E`&@C>$3?di^hIng_,')qC!!KaE9dj`?f<mn8Xl!lAr"/@r![Jdi3nT?/L.W60I\C)oRr^*`23b=
%8SC2\((6T(cN&MQm@OH/q[Z2ch8!>:kUBb6kF\8&)uAdU;_7"FId%)]CoQ6,Z2n3>d@*E&D<@HGq`jF^YrqlD/2a3]W^B"J5sXVf
%0uk.ppZKa!p0g</Q3Q<tIWIPd=1a[KM#[HAn,1q(o!IAW*WOBgZT/I[X`cQ!]ql4fdfpl_%4H1e_u=qU&$V6Rk3nk5rb&g9[cf*c
%Y18cjJ/a0Rjr4L1pRI2]$&G&,1<0he5Dhsu'D,nCg;BL(p=,?#kHQ`3S?d-AANp9>A2aT9q<9L-6Ac1RN.CI((a_9Vcf:4qeR'i*
%+9L!pSj*Orjt)34>!B2"U(gaf5W:_ji!fV\$?VY6%tN?J#C)UR<"L<jdEX)gJJJMZ#GC=$ad`i+71B1.6q,:^hg):@AV%?HAk``,
%Y=[9P-8_a]7W$qZ/V1t:]8^#Wi"ci$0G!s,$qff(=SX7e@mOq1.1>g>V/\;+M@9QU1q%(MIsKa"./(%(:o>PB6Y8ilrDO'YBBY]0
%ilal@gcq=;FOGC=0&eaoaA%qD;[+ke:)_1$"j6DdatJ4s7DGoM?MW<)`^#(sj?X^]m"t01g!a#$TX>tIH`8ip9^A-S',k2jqOaGU
%S5`K,c\]8oWg@*MaLO`L0Ga3]oqFZHe-6m\rN"`o\<l4tM:7&+Kc5K/6W;?&i.3$g%mo.WI-5K<D.]jEg^j7l78(#dH^:(jVSKO@
%!5p+@&HI2@iGWZ!"_BLn'+mHJUsKViK8Gtfg4L@DiM];cr?Zc2Ul7\qbS`Wa>6!$_"`5O%!SDW!gqahCcIad`OP'.1[i?<j]E<6q
%0!mLkmGX?*\?e2H9,3aQm;'<o@rULAb_.ka5Y(l]n6^KRCem71J^`gJMqe?n5[<(r^p28+8$2J[?#\kZ@VI($#jt*9r:f<b9D"`_
%\)QfMCjGak]j^UIYdiM#Gb#;OUKAa%07[i@5Q]?,!..+aYT\FB]E0;%*qh:Frl((rJ?I?dEp5?R-4"N^!9bEL]>#5,/Kh-3JB#G=
%!J^7J("%fj>LUXW;@/[Oq_Q;a)cqfsE4ba9#?o;m6hgS1bi/uGoql]e3,:(LVo-s8B:+Ya<d%&r+En`pL$enQi96gQG3p=FYuJWZ
%2,Ic)ZU]Dhs%lt;4_f5W`W%MLMA4.o:^Xk(WhE;#0&Vq"qjNm;O#A+>4:#WiTa2RJ."(GtYo?!c"UnDK.I";*rCm=aDltFufHAum
%7a?NeoM2G3/b4_NmU6-bZ+$P&1bs6gAPW:C6+&;-\E*<h$<VP/LrdAoM=30b6OUDIONAEq/3r:G^Lku\[NBmgJH%^Glus@rQl%eL
%Q'1^]?...gK0tPRE%)'I_<?ANL(st2-3*onh$JH4(4I;(J?6iMDsY8q$69tITF3gc.'<N0g<rHO_;AI66))5'%2diShl;ILSU7.@
%I+9&np]D#ki5Z'^of$92Z"8<.$Q*O7oOA[pHj!pp*:?`0,=o*%i*4T](N>[$D2rQ2h2kTR"YgnNhsO_JqS!+jqM$7"6nHLHU<l!O
%L'A\#orp7JjZY,o(_Hups#$<H2g2'Q:-g"gVs,_3f`^6/dQHOnC@E5_#R9cESCBeXs+`ZF!%CZX!9\%WM_">)f\"Ll"!rRi.l<iq
%fK\RZ@.`'d,mV4"1^Yh^m$P%Lm1q(:W-=Ulo]%!;s'r*Ta383s?n%l2TC$4q/pflH?rn!qSj%,fj]RndXo?clIK@0YeT;,;q(04s
%D$Z/-r)NN3qu_Qa]]u`g%cb;Pp5f>fhE/SG!.!&.W6L0;$dTnOg?jEK^s+i2%^Ml0V;.K?:_A!B$K_=8!Zep@Cq.\4C$T,(ddQlA
%6n0dOV>].&dks;#VJgk*?P<ALHQUc)rDdlD;3MH;NT+<0jF>k0VdSl6D#[G2rkHR5-3(QfF0Op%Wr/L<_rQB#fb]U0^i`n_NrO+2
%!4;Y7,3Ah0.m;,VrZ<,>s3#"nfW:tMgO1g75llpT[6$BWNkeFLl1kp0AT<]ocgU\uqW+tGGPka8dcp?f=/kb?^K1GC4:VR;6!2i9
%&=7^NUu?sGCV%Npr9s>TYqa[\hYk!^@t4L4I>S0E^(:ke7O!s;(n\i%p$2"rm's^*B3`@S!QbB5MEU+?:2.**eUK_D!&<iT9u<2[
%;DXCcrKN>\&*^=B\2fF^<(bRUT&Jini;Qc&QDX6:8_JC)<gZf:*fh4LYs];,HA>Y>/X+1D#MP21)BX2,V:B"hU&MDIpoFjcSS*us
%L14db3;@pSXepVJSpYP5._,.H^<8m&,mXh60"pL*?&THEcs[D781_=j`&GLA])l'k6jU0[0NpR-`:iC(4[&@gces'NDAqm0>ki[S
%`)Vht80el]At'G&@3B1('Q2l@$lULFPTrS`Lhepq,Y\S:ZQi-1%XSQHg@UGG_6.Ci_s1V*9'e+d:Os+^fq-pH/-*">D9sQ&gmH@f
%SUh%NNP#lB<sJqISHc$jd6u'@SQ2FY$?j*mVJG=9"C5X7BtB3fi?F!3Q)p+T%E_6*Yk3KYs.YL$qO]!Yp-VPTS(3XbGVC%nLBPEj
%jC48*rC%`QJn1,.(?Y#bfNAAUC9orL=L"\4S;i5s]_1WjR8RZ.H\QSCT`B#-Zi/#o\;G[YQp2T/A!_ctdfeYS!Pp&#BBsLAZn]]4
%pXE1+D'U1lEEgEo+?JfD=8qA23$lXoNZba,?!d;79o*)BlB'M[cGLreE_iLb[W#hAb%?&n\CX/"irBZ;Jmk4a<(&kV&[?"CO%)^q
%E$QLR!_[DJL6]+l[-=^0"X_Hr.`i)DnO,L<6a4W[9rNkup3_=^O-b3J)@I0@)a_YE)rQ+Ee.ENlPF5;fk[G&8B<'@f#++&o9%'$R
%bC)@QLKMn$8\d=+>Nl04#CHh_qe/)3=_:AY/IjUt8fCX?j2qW9PN(:"2>+=ID`1%G:E;);1h=9dT<C((UcME>$HG"M#PU7^:)Lq7
%,IO"]GiD$!2./C;-tBs]mbX'=,,i5t_>Pje<"2^^i1mbS'EGQ!ZQb"j"anaDol[u<Si.PEkAjcjJucNte.\#/RkJKs&bu=r+JL>#
%61)'3'\ef#UM003C'\!?2-:l"393>U>]>,t^@lF6BT/$%),c1s;F#XL:qP7d#oJ/G3_5FRg29C[6a#(ZnVbPFOJ7aLcod!bD(H8"
%@nuq,7\1c54;<`[Jg[c98mc<s=&UA03$[Wj54n%fZ^XP5`Y)We7%`.*\I],U>_pA:f81.65u!MD;^3t^:/!bi'(dXjLrHP1M:aV\
%9EI\%,S7J157J:W^M'G7?d_^NZ)Woh"-P%O;O>1n`6%lm>01KK:`If]"uX'7FL0\R,SSJ@s'p^N!=V3!Wcc@R:H4cWBQan.Ie2"i
%k>NM?@rQD+?iF]aYX]Q0nco`+%h5!!0TMJ84^4Jc7WCNJ\+:c3g=(%>TF.O38#'T7-i,fi:q,Z+;Fi?9fT9L)A>S9+mF-%c&pjM'
%;Xf\q_p7K!3=h)J46@s'bfd*pJF^Ua>"NRA;=='!"j"UU"V36rHMAh51/PrN46RLDFSu$TG3oB0TkDSsm_cB6>X6\QNjbfc2Wq'g
%#(AV[5_9/aGkd0_V%E[[qnrdFa+LSY1CiZ+Z,cqBQl06O]j\PEl88K/k_#:@I=%9JY;WaGnYcoJp?D:s>.<H+i)*7B8=Qh>p>EiL
%/*4dSJWMlEBi[Da:pbmkcd,jQJlBmBG.Q&Y5\jj1%1]:!,jFgmEcn1G]e2"+LS?V)(g*gr7%BX:G#N7,!a*f(.;!,9JT0b$3*b\-
%Pds$h]n:cj$[iM5bs=9b],dZaq@@2t6Zsp+YR=jt/YZ_?!i6BjeT"6=_Dp`)'M-LC2^91SBfD5Ne>m;7J9SlT`9IpoUCXEE:,5\A
%K3(ZO/4-:])piI+.huTdjpF=reC2r20LZ0OB;`Xae7OV\s$C)FR1I<S%CPs/FZ"TKaE(?W!.`@G#qQtfhb1K4Kl<sFO%g2ZKTaWp
%W/u5m*L?1(!;pO%$L\Kud&q8f0+lk/!*AVpALsc?p84R8l#Pu@8a`D2l2V'14=;?l1>-`t[MO66o-^Q?J6kmDJSONSD.\$==.E7@
%YS#!@RgZ;Z*&el"rI1W'*&ci=$gfd_MmSpgitJ&jS[AP"@7G<$Z03gu<fX5U?D*nYNkX19%)EbI<6&<QZf>dF%:PT>=YtaJT`pTf
%=7F`i=6L-_nsrUY0U\[JeeY>2):btj*PJ,aLFhH?Wra9A!_t8KM"1qnot@fT)Yik8h51gGGR:D.8mmbu:oKe%o#FjA5pt=nq?0'>
%5ur65F5BG+'/,aY%#oY;G(oI+m3P?j(&.'-:qJZLS#"6\p$u@"ZbZh(in3H%B?eT1Y8T!#p8+C._2pu*Y@r^@Sn7WLr5K4m\i],p
%bRFrt3`(DQI+FsC&@N:-Y7p\s,CP&\R-lo^58QAr8f##(nmo%Xj"h^7:]\srZjR`F^_Tt_\P@1'*TN`^1Vs\XUlcnKJ'f4k1n%qA
%nSC%^h@@k:?Q""dddP'31q=lVdJ:i4@Q0rQ2BSZY^>d(7kmCA+_`"/@`]Sa/;4P\AEo=,h#H^ppf?qk=2`fB<XUa[I*iSX)8!RL=
%=<u36BEf2Gl&8[U@TZu+m2":a@//oNP.N@>MSJ8G`p,T@JV@eN7`WHfUtcpqStY]7qIO/&Fk3V&U\;SOa:q8uosYLd@kfDh!b*so
%pJ?eRUZCBI@E"-^h^d8mnOSLk4Fe6cfs^:eSK?YA;q.S?*jW2eKcF=M/sD3aWD8mE%XW1aq$o@2LMAha8`h'DR8u;:CqeV-3VG:h
%O_(7%[g'`Y9-A1%I?YM=^eHF=o!rdTci0"f1^Lk4RS,M4/DmCT/1dgqc!3;'pPQ$+bd?I&fb\;"R^4Al030:!ak1[r=Sd7mKV,rL
%r0D%<o!R=ol-;[K-aFH#)&>Cop7]<+RKr*k<F@bj`&orfIsK<5MnXa#;JEc(>;!T9hf?hkDsK$$X=)FnREZ1A`%:J-gch"cDo5[c
%PM82HkCr$&\;WQUAaFZNQ);C[B.fa_%l#%hntA$HN#;'-p0"E?C8QSArc+.jGqD*O_]q$#)6AZ*LO33r7d_;9AU'_;kH,ns]5ZqY
%GNXkW#I6mm>a[n6Z:muje/J<i\]aU,&n;CUr)AV\h7P+:U\_'rZ"EB0f)9p;2g_u/8A?sIW\<=(K2R?2>^eW>Dr%n)PWuU)]j8Td
%rkgj_B;`/1H^tQP&>uB$@0"pqZdZ0f-nn;sMLGoR2qY]aGWg.W'C0IS&"]6@>d9U'%*P51j8e7=H\ko]Yp(uEV['Pp,VcR:+g@B*
%'m(i;F]kA.?D>@$r=8BI;cl,V?;<?_ZXt?TAndP.<8'g1gs7Oi&qq,k#RY<UYQcH:=r@3]B?2q(.m5FBE:]g%r/Q=?:IGYjmUO&'
%acnqV.D*+Oi!aPQWS,>J#Y@o:(r0o'+rhBFW)+99GS:Ah3c;R6&KO@(,,R\@N*'A[&(tpo3VkJTpIcUrdbNaT/5qf3V@]:\ga>/6
%a+o&S=Ql"3^"$c`o.@L,=:=)crYRH_3BDL>O+Zjd+oI^GPGO?!\@DBkqG[!fF[6f+Xrq+[jujLGc57.#]_AsRjP*C1K.K#q%Eoc_
%d9--ooT+@V]fS<K5&l?5d5[CaooJ6_^OA;9G>5nV#p4CX4L-:T<"E)+]6H/7bKi!1Jp:((9*+T@(IBU5ISZ.RTH,YG]>,[]8m07r
%.hsTg#cp&>jl(m&"Ss>(;nZ>UO6]*-0kpAGohIR1%:;;\mQVB1Ro((;,%jF<e4n;c_mXb)QdP64lu)Yj;,`#H4>G4#oZAtgTfHL[
%>8udp`E?FsbD027qU!L-Sr'.=#+b$k+G4O6PeEY[6;8_^2;KZ!XSI<\joukRP:.07:MVh&;+jKmb#<*dN2B8OLe>1"XuXN4l0N4a
%A1@(C\20CoYJD^^$hS0p-d/>WX:Y'5#KYm!K%5DW+YENIpTDBREOIH8Fos)K?U!<H&.Q)K?siU]G6DXO`a85lq9fajHa=H]mcG./
%94qsVY=8Q#bS#9=o&-dq]5W:nn^\55\]*q\FR\aq8U*8>5?OfgGro6EgOInp5;q@Tnn;JT!*I2*9KeIiX<%0QRB?Z5'&W]DF\u&.
%J64"8f"o/_<-I&G%`Lu6\-b(GEJuILH$&NAHMlTiWZC6;@o"\=6L_@-anOZX7IFn7s.2kbMa#MKI/poFdoH`<T>p]`W?2nZU;k!0
%JJ6cX4&+G5[&!E[InFA.`EfQ,?T<Y$d6g*.1Yn:h:)APJ@P\7=AHMNsn2<O-P1cMK;9TC11?';YX4S&UKnfiq$B++;F;XC&M0jL?
%(>m@].)L$/$nS%EP-KhPe0W,\q_DuN7ZH@Mgrbg.Y5fNtM/Y-aLeeL)-P2m^mRX#uOI?Y'8a(%5&Rqu=DW2-nU10[.Wt3OQ&24\(
%!hj-::U1T^3Y^NF3%Vr&kaiL$Nk1>f=c&Rlnh:l(Mq#GUJf`pLJ0h</*K\!?:b&4<L*.1>i3;-d+L=JgW#LOgEd$64?AXFCR"2`A
%6:4MU0:C!-_'Gd_!^quHIYcMUG^_6`cr:D*\1.&B<#&DFTaO,Lc^Ap6qhcq[B?..,B@s_r``.Yg$4OSd*)gqmnK]OgOd/jD'JO$f
%<Zjhj7B6NZ/4rP^eVpH7W&`p,?H#lA!ehZ2H!hpe(HC/>@)(!%I=4C47pJHD3?;%>J>d78BmrbcYt,!:_VPpQfT!n'c8PNQfak]G
%Lkd(uo$l!Nmgg<u12!N^+OcqrdX[J$mm*sZ1s,LC;j&uJHm"<_I`;+rn%Aai950q9=rnHueS(I':Y23s*6KPk7-*"J*mR=*%egMD
%B>@VC5+k2pQ53e>(8lVPRe'O<EO*tm^lfYh*JreHe9rr,)P71ILC.NPhqaRO\_`.5J.-UbgBQbAgh?&9]F/PqC%".*.'NKlc5//?
%*ULsJ:Z#N8H3g]bg__S9(+%[7Y)9b)b`qCjKZFu_$[[lB,ssV*&cm`aE,;#rON\]BB4h2c_r*F+j)9'Io8kSd.=l:uo)+]faV@/V
%QmquQE,rqEKZj2p%J@T@i?>ODloSC/,F%uCa&Y2<4BU3?Ie6_qTJT^1P6gIRYE8u,8Ftl@l>*@rLtVk2kG3'hHZ9egX`$^o%RX;0
%;rNp^/:uA8'5dM:[>u.NZ42aD+QGHTkBGJ/@+4K*gCFadm_ClgEf,N`%4X%r1XW-o0Ruc('4&8DllWnnP0<mO$)QCQb1]Gio=@`8
%8W>1ojZ-B8k"-cU:5//t@%/'ePdDHXQqG*%ago7DMpL=gRr&hL#?-3nWV0US@+IAd@F.e4Y:[`TX!n>\*fkU2^\L-=IDGOal]rIu
%6osqD?m&$#0GkPU`2uVD+=MRZ3SSEQ:eZ#b(cbbBe)aZ'!$t*phHUi%]K6.p,cli>*,Cl'`r?[49q1gmI4#8o`RFO@,P:V=c/7FO
%#&pZg?Pn6F3$'la5\tk;F99_#Dc8['Bi]eQZUtDhho9K:$7\X0=EaKO::>m[KHM#NVV^:qXr*NRMDY_,p:a?TKMR:ed.;31a^jlr
%asU'rYAg0Wrq*>`BIm3XjB-K:9"LOa0Q:)\0Y[)$Fs&hg8TO/S/R_FB\b'F>b73pr[cGlm>Ck_!pcs-Xn]kb\(fbLRcFVl;Nh'sE
%WLUdV"oFPc]?Y_ZB\nIf+In4tAA9:-dS\nJ-%nPL"[bRf?<eLO;)kW7IH^t$jj0Y&iYA59$.sS<LtoZ9L-YU`fUsS5@,(m*Ia\&A
%3T_8V_&4$KD<#M7RV`]Z?MPRQ0M]pu9#[e6#9tm3b4tHo!1l=mhF<\#]8btJ<:0Gg)dbN0JG+.7m4_Ws`k.$$>Br?:^&[./VVGfm
%j:ENd;U@M`Fe^lr^kkGg`gfJCidY:VEu<uC?dRGrMq?2WaHU/Of"NMmh7.#I*@fP";0t&&\Od,hS@PsgFU)7E@7T;u\A)Glk5lY"
%O<p7=51iK8mHUMZ)*IcdpTDdchsJ%laJ*.G]Yt6Di/Equ.QF*VqFe5_V@+^i?.9"%kB'LZpit\>dj)mKgJ_erpf5tbD`jl-_s'G.
%NF;W3P?:r=5UR3,eGQ2Q<'_E,6*tte]3Wgp1qZ+WmDjoXDK'YZ$CI;J`!]N9fHe'oP9YLJ=*D]'$IiB3Bb#e-?dT:!lXN+SY3bm7
%OOAFFAEg)Y;X9dQ?,UTaVV[],=1q'*=6sgnC+GaKk`KqGk0]?9Mq"cn@@i+e1Icul?A*^,Cl^21D"kbmQnp>"*'c&h/TDtuNBUC#
%GJujKTc;e9$eFqOdcSk.&9@2;Or\S9!^=EViSIs2%mX*)hui]+Ldl=)cYC%uBh$#dQkSK#@OfWLmn@_4^52j/%_)&A9T;ou+Xe/*
%FDYX$:UK9`@(r0_2fbn7?CH.\PbfB\eseWbT:F*FhI^u.H/dXeI\r/a"[<YBXM#/(robfW/DDem0tFRqkn6%)'o</`ASVo1akT?Q
%C'p,+kKEgO/C?n#j1$q\5CeQK>m3`8eNt&CD[Wk<>BHo)\%u63iEtcuS)dis\O!u"Om1:k64NG&(3;)gU_gT:SfOSOa`B"@5j(J>
%!a=)V?JADKk/j<m/">,@SV^@H+MN4eVk+#WKn,pL+5f!S4j]3">Ac.`T-UWsdJBj'ld!/RjP@j[P+7/cIah'ZMVOsC_-B4rE:d>d
%K'4Rl^O>-Ld\D#XeT=p9Nb\GjWf@REP%R+Ie'8ou"45#bcbd,]M4EnT]buL,oeXgV;F(QWF($Rieb]9n][)2G?=:L4=CCOcp0P"e
%VFHTRN/j_p_tm=H2?BQ7_?lk%4Hd[/2C+_%2h$>"5n$N,iY7<`H2LbJLramFWar1f821`S49mqg4<F^1.FM(_%H679(&Ea,&tL)[
%Tu+o'%KQ=&4<^'/)3;#$+ioNj+8L)a&-Bc9loLKYln)+>jO57@CZ^t&0lZVE7l(\7E^&K"gd=RD4NE$l+[S[Ed8u<!B!Srt:EqrO
%g$<^Z0[$&Koi`W&_,D`-jQ@"q/:d>O\/#>TaIWHkABPtpOgK$_?"Kuj[E!=8;LDpD4`CNngu%2q7$bIj9(a5R:S691.9G>Tnr5d@
%9^&3QOXa/;%=3!7AJadhqK#rZ*>!AM$Cb/c"q;lg#FSHaE$=@)6%@9VHKT!Ckc&Y2U/c=?$Cf<>>qpjGF\EFV-fmoBD3nl(*5j8>
%OP`kkHn&QU%r27B0%2qK4RLH4T.-m<!nG`oK!<nM;fhR?N+>U5=cR^,b%0P=g23R8Eb`=rftaij,:_hB.N(JZGjM^H#od:"aXL-*
%ZFast!sXduHL3I>@"sX[J=6&/@5_3kgr!BC6TV&(\.Vn>g[:^@IhqLqM0BY1gmQ'$6?J7'>J`#K3prP7E.i8p?WiP+/tqAGOlMEc
%$@HB+PD_RVb5$;DE.j:d]qhFk*>F,:gI$ing:![#?)JBXk&ZHd8Ec8D;d/T@:\jcr^Q=*OjD^a[W@H!^Qp>D8U04>YAR$Orj::.b
%0N&gA2>S1aoK^.H,K\^B.!b:2T3^%*-lV_%5/;/'$`MC5!;T0sQ1'!=5V<Gr:5T3(B6eeYO7R@pcO:K(W'\0_382c6n9R!N%NaI2
%nQ<5%/M:CBAiRX_kL0*u;5qr6RtZX:b1f0F7T-[80(no<da$LY4$\$SVngJ?Y<gC'n+5@0A12N9e77q)Ho.0.oajrH94>$d;#.$_
%S`a+)I+fI>TOmZ%["q,pC!Z$d(!V-;b$YqEqBXPNPg`+<57+KLpIUks4)fh0Nm3!AMj[4Om/S9iXVgBKQo)n(pGX>#34YHIc)1Fb
%6+K%1NAoLn4?c!tJ6\*<EAe=d\Jn7<jSR\G$!1?`dFcOPoCTpk&5lpAi(g1P)KWZ;#R(1caR:I6KAbKp&4aYS`B_N`$Q7Rt87"e6
%^q_<JE,51qnLE+p@D;aQl\iDKXE,IXd.?X$2J!3*r&t6,C*,Fr"6mG2A53gnX'e`t9<OP0ReAj$$Mh30#3"69TJ+AeKnN!To=T%P
%%'L)&WPULLDH,TTd_um\"!JoRh@+u<rK<n0bQeuuqTBs]ZCG<'jjE,Z!B;(fP=kH@kX57/KC^cknl6>]krbi1nhfWj'O"8p.^lD6
%]AZ:c3?*AWidQfm"*M>'/pj5MMaDY*nk,^m)L3+oId,dJIQ".k/JoEg^u-[_PiEFM\8Hl29Tn_rdbF'/,#L/t%N<oNR'Y<E&\9VJ
%F#.a6[OD\$+[86I^KO/uUB"Y^fQm0EP5`Ye_4uTp=MaN?Ucdn.,GJh8@=Erf6Zn,1XSE`sk6.5PJRdb;?m_Le8X?@M%o7Y@20Hua
%`u>&=iO)WDbl]/84RDSd<GP[JdH'?*"S@Bp\J,XS)Wr^;JH_-!8Fr>O_5h[\5+8jk?+%$fOr1gS/U%7uS_F6_W.-3k1K=G?_7%*M
%4Hs2j&rRnM,6Q)gE*hB[b4h7O,Gal0Aq[R8no\js[)%i?nJnWbgbE9OVfB+3-)7[Y6Fl4k_9:H5>*O53kh)):G+_\M-n>OV2s]"E
%8h_Eg^53-Oq\;4^=B/SdWbT/oW`o36%WKH%\9C;H=Z!$O[TEg8[jKL516kXl:;&>>4_6CBP.t9sJ4O9`D[X7(bL-fqmS"sN(bjX[
%eS["mc5dQKZM"'4]_uqUP.!u(s6m`&RS;$$P0)djRnY5"h$c'48@.+N=8W/&9LOoSY6Db')\sKH+mn#n"+FA@_1t$W.HK\"U;s]q
%f-@iBgSY__YhRQ6q0cGI_o!0L/;3#^/3Ib/`r5(7&fsfq@6T,^g4LIW1PD=Ea#bAanB6(b&,RK`fmS,Vq!EZmbh\/!I2;t"4Ep;_
%1@SOs5<M>e7R/0Z4b+X2+M(/\C%`2]5/9O(q*"?6J3PIOOba^-jb-'XW%SHB=Z!E!YCeP&G5Eq38Ga_&2?>TNL7e%N:c%DE(&Zo`
%^AiHY%_gjF!3[D]jiL6f"g7'oQ5Z[J#dFdm'BF_#q<ko7Zm88O:l?aX]HdUJK4+H2It9nl\S/@a>"&8EVe;`?neV/HD8siD_dJ1j
%8An>L%s(KjY4XS7.CjcB!nLJtOO*>L3XP3YVsC"Fp;RB.?Ea.4js60dHOR(,\g"O:Ub.;t?8`jN^%2CXKr=*O^,sNl$>$su%-_d,
%(7ugq.C6`?gR(K4V=5CO0<C?n:[[gg<KO/B#dk-6%)S9OIqDo7K#"cRJS_:9N^asd\,`q*"HKZ'KILc^?#GgLdEp-PqX;2uFhM4(
%B9$eej3Xs#j>4m1&U=!9CW6UMDQNau-OXV%_;CWl_m/T%n3K?7$i'(')[$l$$&f?FF!/R8GJTcYImLUVH:kdU'fHZi7-9pODpUVj
%pN;"saabK;_FL:nbU`K3l\,^C-X<,$I1;GKX]@n?;Cp"@OUhD,Z8dJCPJocBR`r,'LWNL6L4RXU7?]0)5=.EUS?/6`2m^VOp\8HC
%,nho,j%->G"_Y*#2g>HL'b_,U)]a5`DNM(Tip`*IlF+fH1>CZK-B"dDB=]8A'9b9X9\4IBNW@nE-Nb*I,J/4U3QjS*jD(K<-MP3a
%@.F^q"-`Jer*f.j]M=Z?Z+;dr[[hbDn.;?h+j9Dq'KSBF9bCU@DMi`k,?$-QAkhf#.qD86iMn@&?lGG2;u#Vbe#dI(1M&?7[OF;J
%?'oZET\EF:\k8jZMe-]SgXmGYg%ij[Wn.-LWRfp19F^G>De`2$Z0<n,G+(J#B[(W`afeCO=t=E8#Wt;<#,`!<l&kM#:!_j(0G6:W
%5!HnYU\i<:l+J2/QmRH'cSU"(hjEQ49[g@ZW2"'D$WKjTjO:#`C&9BWcfsrJFS$,EZ`-Ebba*[NA[W=)2R?ohpgA7]ZN7E,@!ss=
%>#`Wa$F[AIX#]a5XIJ6oG)&)CgqB.4Ft.@SYtq"Sij.;pPG:V">^NMgbg"aSgYAC._WL:KIV4*h%f5=c!.a[0hjD[KSnW#4C]W[D
%W^`@W%fjDrZ@=\!47O6)EjS&!/`n+$A$L`o98djK)-X\dB[m_(4iJub>KCZ<DlJ@8rLTH^Enudh9BiV9[T%SSdaB,<D_7O3qllps
%EU1"p=e'ZY>@MNZ:`YG$d#6c3nj,)tSncr$MbD70Q=&F7gY)C^h,@S6\4;hG9d&!]\;?Ro[Ps&pn`NWDYrCJQ90rGL23djl[+rR?
%:"OHr]c$[0Q((kTTQ<IH/MB'S<b$E]IQs??p;`':C.b$^#&1J.hDMG'P8tq%GLXnV4m(SOoURRD/Hk3!CLqe+['gm^:2;NFb?:I]
%a%,H/Zi7>W5#tPHa8!>Xh9W!'RqY?GD>*YhhWD.]pU5%bS?aG&_&$<nQ$4(H[RtYgYdGP(4'UV)\[=TX=!fgTYR9,#FQCEL.h-p8
%PLhh%gC?TSh+RVemGYmNc^q^D^"Ni'->]lnHS^$323YEY=,stBFBZ->oB;Cm^2;H@p>\3#"oci>\MZBpo>ICKRYW:2[ib.8UJ.O+
%*A-1a*W99ik'2<NVN+f-hfNZAJZ.U2BUG@a!^1]&MscT]energg!RY!XF-<DcAlg+F$A056g$O@C,f:_5/?1Ugr(EiC['=8o%@>#
%Y39*Se!7%if</lPL3DD-(s;Nicm..Q6bU(^X1&nsOVtpDS^,3DRtrk1GH,DL\4c:A\bjZNg:2p?8(LD&%p&Ep/+.I#c/"c'l>_b7
%"V3oMmQ>2:oAV2@aH`Yd4]jgBDk2u&qAq,5[ZgC2CYna9?EZ6Hp;W9P]Jk?73V53fF2g:t]S=)fYJZZMmHZC<Vo<_mk:XESHr8X/
%j3'%K!/n$8E"%/IB)9M;2'/d39msM@S*QcThqRNnr:-1$i\-n',C_e#%/HM;l6AMi`/+H"1R\FdNdNl!HEaIQfa("NlGno20NaQo
%J]W<g'%d5t6#4`m1g#CH4/Y;fgN,!"2(Hr[4tn]83!g@gi3(cO&D#0-Sfhq<DBcu_2ajE#H6OD9^'ZTiHSONdBsEG`V;<g=%6NH7
%`Q7pDW"U\3!Is)U(]%etiaMG_*ACU5raX=r^.lXaiVJbm*.E"c*5hEtboqH?h&IX,[HeZ$$tJEjV-()o*rKkfAEmG',+foX/F%6j
%ZI*pd]c&1)ra)thm>[m)NFNY#9K_!;Y1IVLQ>k.-C[*FF`a`hH+kEn9bID#:)2p/Lp+W)@<ql,RYn2p[B2WsD<?q7#YdAI>JtO'R
%7):e6-go1$FQ/k*!VRR1H]kP^dsWuCRSCS1ALkkMHFZhSqR7b)Y.JCaQrLRt+]G5#rK-<2hO:FsY\m5WWPC2.E*+=K>k)<hmOY9D
%1_kL_VEa7in$h0?;t2d+RQ5<TW9*Yp4Lf+\md$!3``$TURG60N/T]N_eM?1J(6EuW^Y7GJ?>jhSc.oRBg%N/5a\nq4P\'Sg,3NlG
%r4.2+AC'og<`<nE?17B^dG$](U0^mro'C(Q+"i<>r.ghHJjKA3UQDuMD$u>OJ1Z]e'h_u]:;KK2kdtniMKtqa.JAeBH>u-J$q`I>
%VcbJ"^,qSED4e$(2I,B;qtF-pm'gP,j[.ba/3ge9o&Z-PqaB.n*sXR_?REiUHMp*(g;cS"P]Yb_,2W*n;KL[q/<r0[ZrQpD45"?k
%d3r$g*Hk_:>a@1rX_Y8AH2<Lo/ame1e/hqn`S*hV_Ub8*ii\lH/adqg^O3(8#BZj%BYPN*\'Lg8UJ"Mli%J0PVBaAM2/gN'_-h-R
%m!2ZR3I(@53J41p/$g]>>Q'<ldJ>8e9R#pW@X4<$Q=''7&^0"d2Z6foqc[O1>oEm&p5Ab-Bn)H#p("@'/=fu<p!aj$8&ou*g\c.8
%-Q2N(45mC^XS6d[eCf!>4+V9-oF^C!ir3b<HhUA*q.\SNYN#"GHD@oih`$s1h>MR_S*kK`NconlS5122dt-VSnBsik4SNmj%r=J<
%*^iK,_*Mk)Bas45o#K*[k_0Js@=Bq\(d?!Bjrlh4PTQ[N[u\S<gQ?eeXBX.$p\R\OWV#m<H$Xf\im/rd21J@RS(Zu=-cnJhbKf6C
%E.2c>1d[,JbA9#W]K0u/VUqPbp&+YIfk9/8Da#kTInSTD-Z9Oi^#g9_ho%um.V]j/:!`FY.cu$oq]6g$j-h20)c%QBmWW<RG'Yh0
%K'W0YbAg/1e0_@u2E)INcacf33n6:cP>o$?R1*\[c@g=7]$pH1EF?"GH\^P&P\JXG=k'eQR,(O?lteb.ERNfl+@:9iT*t:gR-Msa
%e^*Km4a]B:fCN6\&L'QL7D!1O0@gBJZjbdZ;Tk)M4'6CO/@u8(3`E*VLZHWnGLluNk=;m8XaThJh:n"hU3=.DfJ^)/TTkM>%j-.5
%P:kb52c$=o]er#l1YZ0G\)!&MZG*Y,')#Va*dld<rIJ1m'D!64H8RNiQBP!g:B]C;IA]#Qh_T.Kh-g2?^Lna__]!)u9d(V'k'V(L
%G3k)d%Sl=P+e(q42J;=5NHO<'$*rdrjh=1S@5/bQX,Mt_-P!9tB+k:PAZL=E9o!?Do^o'^HFC<?NnS8K&[n(A!*/&BF^-EdSUjp!
%Iof]-c%8=ne:Cr!\#*M49r_O;&%U+;OlI4`A#;nbg!V2/mi?ktL2u0$eJd*om3\]eT&5W1nmYJ+.kTsqOkSj/Bijpm(CgK)i;L.C
%DOS0^Vbh?PV8I+MHDT7V)+D&n6:'Bq6+ptL2W_ED]%f51D0:"mi7fH;9k!o$4^.aLC'uu#eu+f!(>b3$cZ3tFr?^C2&\aA$\>5,>
%Scm%8I=s.9)#mpj46(mD8nOlBdau/NOc<6DGa`u3A;M#/2"he/%L=?TPQUg#S;_ff$q=iAUp4GBC(+uGX`eZ8:kHbu"NZ7#GCV9b
%,6L5*C#]QF-;qhmo`oB,$t"LsRc;$3%e-$FJ@sU=K_?)m_-h(@_"eY:NgYgh<sRc"[t_*boB@&Ao3)>`:YF9)^Lj*N4p`cL85J0H
%V>Si:Pb6jjO?l\%=H?KESaFJmcLd.HDFUll]=%,[q^g[4A:L$UC0\9UpQDV#?Z2\]^*W:"&s_'afqB1'9tJNa"nZ)?lO(&5%]#Bn
%'MZ#=[SHE$9DoJ$Bk,-NP8VmC`P'_'(_=aTNa8U5g`B[^kQOA&TZaV]?o8)oN"f:7pZ4KfBWEh1msW;9m8rp#`WPKspQqfFA4Na[
%iXShsh'e0XB8I&GTMBDi@pSK;];\&$l:^#)UWG5)(lE!fM?DQq=H"W-qk=A1+)P%JK".8iYL"&5qh:"AGg+s40`Tp6]CUs!8HCJ;
%?0*l,2b<gi,s!#k!K1R<XfaMSF]-5`Tk*2RYj0e.dQBt*..fRsr.On3$C?Q:W+q8'%JOhl#,#>\Mc*t`E-GCUCe2"bNd`odD+&fu
%-ZrLdm"GZ(Y1rUAHQ#eOJV7Gh?h$48I*I\_qE$9CEU3TlM4U1Z1_Nt,L++u3HpL8B0!-b(/+VWrP[u2kYt=nf=hUC!2#/AL;uKH@
%N'c4@01kjglb;_+\Akr4'I6'R^N5*$C@-4pm=!us7/G:GECh3X^F"rWKahrXih&nK20NB?HIlRg]P=4VCE8="L!DV=G(<WG_\IkV
%p2%CtU]-ul+:hcZ&:+*64q;S&J\f.8r><3<5l&K,\gTjD_,)i0gT11@K.'gS%a]IS!=36@\)@E,`f,f]HCI1[S!m0g5Y'0qkUe;t
%nrR:s;\NM,L$uU3.s4#r+MJ:irn;&l'u,bI6K50dOLV-"<*'[A1QhF!4$/i)"+GI;lcq,D+o$s$VsffmiPN:t$XH;WZMe:,1f%*%
%<D3(PJd\Y9_H"I$gPmg[NpJY0*upFJX3!_j-'NDX.DgjrUrft@kk[WjKZTdaQu$`Ar#T8VBA;mC5kVg^Klk<(g0:!tSBC8#F'*2,
%9KiAiC$kL6,1Y1W0aO*s[&7N?QJ#=tT!(VO?7Hm6`(QELWEdTW)NiNj^!M^>e#RH5Irpq_n#^"Qn_Wm"!M'!E0XEp-&Gh3^k\T9#
%T^E#S2fZ?M#@!^"?;:7hW;g80P3I#^K4d^G^p:meC\$o]-a8e[PPa%l2L58p8!B2J2GEP<YA!LX'9AfelT3Y\gV$V%cZ$jb?EYTC
%8bo^b9Lc&XC*[LFA_kOr_YYA$M`#NX%lg)*ES%5ZSYB`Ji%>qRcDbpQ#^b*Rh.W:JkrT]/rgSQ2lbO'n-Kj1u@rd;R>;^D4p<N:O
%ku`AWFd))+A0&Z1q?4QZqm.VZ\p0$p]0>1E4P]ul"a?,I5TO?A%uWE_*'Z_?#WHa:nR1CBcnK%!K>Yid'=-8ueDZgD96JqhJ%4['
%$3DBQ"CK'-bGId\'X$AKB\sSZ.RL1j1eN/j9j1(8m)\W:W[#2-3%Y[<%:&M-das+_'J3uAX_.!2]7E#kYk-85R^QE-U]:chCF2P[
%KN8OrJ1NNt)G$WhRiUh-eNisf$BXkk*l+N$=*)?F[KZ!W^+.Q'Q0<"hQ[$gJh\";0.mGI-U_!pSi$%uDatt8>kIFP4:SF+Lcj>eg
%)5Sgr2$5sf4*J4;BdBu)@ni8`'p+I/\)jcrJM]kcA)p?\($R.DhGk[e=?*;:KH-smFeia#gVL1k]BVrUMpBQ0c*jU+e=G;=Jb1hr
%)RW[2:X:b<UuA5<!80ne<0<WkD8I4*/)?+S%9BGX0rql4;Hp1r=1"(;J]b[f=hU_W_goR<?2FjiJ2Xi;)NDEc%WP%3]FG+naQL.d
%`CS1UCJooZ3>6)W&g<(\Koi$7!/8-ff:T<e+WFHL)JF$OZmO4GX#uha+WUSXDK"5l&Zla]_uAH\q&!-IBs/8/Bd.Cp_MtdU'^1nu
%m7TFcYP"D(85I94Zgn`-761\o=.2YheinNF?Y]6+V%so,lksrAc%LN'0\p;?OUf&,Rtqd"7?2PYGGHcn86:@Tcg=7Dl!9;J0MPg_
%25EJiD\I1bZ`i]U`a77^qO.kP7es8Ld^IoCG6+1$8.AU2?f+53%S`b]Vif0+N\kT.Yq4R26_nT';M4WRD\G.?3M)fD[)l+?=#pM/
%!tOQViDLfs*65K=6;#ldNiG4iFPKIM=GB@TDL#ipID<2'C39R*gd0WBo%cLF+['GnMXY3egl/Mc&9#U">srG363hKP.$l#HLt8Ih
%b+@Il-9LUN4TVA>8a-S#rSA\eRLM0f$Dcg5]oV!%_&CH[1n1f#kdWD\`T%XV%@m*5&:4;"/>ZVPC#,Rq0?][;I!Fsnca!olOf6OT
%Y2cRVC!E](($(\)7d"O,`X8=;r-G$+SpC+3]sFrubZ/$FWrlp4#rK9mZ$>qHPFJoQWV5."dq5:p214F_]?5+Ecp"Qr[.!Dl&db,0
%bAooGC;7s!7?3pEB9+*c%r.B-F8,G@qrFrp.a9Lu=;4QjeT6`[D`Ti2G7UIP%\9ZNAP)8=c`uZSMd-)H\$`!5I<FTV5O)KZN+e>`
%B@fFocXaDdL'M$Wqs(;%rh.06?m-*lCYsQ,#r1.8gRlTP%`aa@4Yt[%gLP@A,Q-(HX1Wc-b,kE>';akJ&V8A2jOi..GFE32FKVLP
%V#9La)"HF;%q,u@&\DMDgp2ch1Z7(m45HT5osS42#E&b8I0bS\oc=rTpA/d4a`[a#.NL49[MR'+=)nM>J[pGOK-Q:uMd9ob^uA_W
%:7OQQb[h=pZ<`mUABff+[c?HR4+jGkUo,)'aGu";Gd*A_^-#!I^:tE?f`V6.`tKBZ!-ZT8C.LWI8-Ur6#0;=qV*N1_?L_t^eoe]@
%+FSRd6jaReI7P;k`U`pLdq!0"UDA2ni`knC.iTqc[)jac)XcEPg"V>p&u7=Q%HM"3#2<WG;,'D5UlhM&OaYo],7Q`l[#peKasW,E
%&?V25@-jP;1hqSOLNa3':LaQ+K2mf;EYHtm$HEVp83p\cne"J%BbspK(5)&o")Xhf+-Fb=#%$s.^V!gOjb!A6>h(T/$s_14nErp2
%e_3;`QF0,[RclCiYFi[p)'YL-g(ANaM<`=jdeuk6nlR1(fg$"P,pZ5$@LmPKc?RJQa[abE.LJQAHTXXuc?2Qk!_eS5h$)q[LM6b'
%8oXQ47[OpNa^>8T4ES@F)k=l,\Te6:Ds%[fh#M`HSo<'#+V:Bs$e-D%X8%h14(`nLA>,Be"3gk?\PM!O2CFAQ0)1cTaU16`!d@mI
%GKb7Id/QuN;E+;!SfnCh3M4EXXk\]0`J?orO@1.38[?.&=W`5:q!fQ!Z&qfk,,Sunjb=]&V(>+Ye72&iPGA+KI5:(rkU+hn?KrX1
%\0O;N=d1!e6_YnnBV.ZVLe+@l0_)hCIaD;*P[K%@TEeh4Q4an`(Co)+4hLpa.V37EjgRTGjL[D.s12g=HrjD[i]B@hVSi3aqd[f8
%[L\`_0D]"hb:JA5.DKJ"En=70o>snn,P;"odWk>e1'S'g!sTYhIO@C)Ho@LZSb&um8)cBHC;qV_nE_`f^cR=K<K>5?gSrOr3,Um[
%`3X_=?1TPJ;VJ[^]9Z1J[k9E3h.]57KO^hsQhQ)kl1M()Y]8)m;>0Qrabr35B&M"2FhOll:f+1TK):br\]oZ=\f/k*<"@-)k,2u4
%UWF:.+$4+oVr6L_k-jC7AVhdf<.PX8k<rSb'U8T.?jaN@bS@VBmRVc,1K^ii]*WK*ZocQG=csiu_>-@qfp-sI$7Z6k*h+ejPS9s*
%')P?]8C7YL5$84D(SHg"r\M\D+fD?W;W\agfh)4,EShtN.'bNIOl20r-Ba6u(+-U61pTr%4u/\#<J%Bj#H=:+>g+&H;/@7;l3AY1
%q'rl[80=Bjl/E+PR6OuF4]R_qqOC\@'Qsr:MaYs)X]Uu)W4>/+g=$NCV3B?8]7S:6,<rSh:<<6N:8+$G9BDMEIS#"*'4+[N%D9HN
%$qQQe(K-hXB\'u&"q(43mf3an-HC_QaYDfL3#;?.a1/@t.@TFIi4>ikAp12Uk(F/o04i0liGj%P2PJ[lA&k\8g&tWt.Ml*1K`?m/
%*j[e4)CRt5Tr5H$gc8QQc5eo&2FTh'*UX&DCA`%i:r-Pi9FX9p`i>@&77+ci:S&s"N*8%E\R;r2_f1GH7;hoQ6:-D7/mLC`Vp*2=
%9%9r:WG>4.0j%GqL2OsU[rd1bUVm3IIjn!gI60!?qRU?:+E2)bm\?Wr>[JCQbKN=U7=^6ke;Wp4j'cef'FmB>]RQa[!1C\]1?EUO
%XbY@(*?DR1pCE8X5AHnYT\oSmdq((;?AurtXjtMSCZp?-Qhna^/CYp^R+jhI^G):R0d[.:Il(9T`8[sS/$,]Yd^b;%R&+<PR`Zb3
%pD#"rX</-'*kFr0:R;<#Wj>?U)3SiBDW9Q@9*j?!*B+=?psi2J*E:ORq7HJk!&r)WkEE;Y`O7DFi4mmOYesk^b\EX(oZ">B%*L-6
%10g:+!.&UI%k59@+bLNnc=][h+FW@a:E;S8ems[aMHs]84R%+i_T\cs4>6=(O?8me2X7G12U`dEV>XjQ/^@Pg)tIP9+p*a'3g>&3
%>;"ROA_uen3ceRF@8LH'0q5hb?_\3r7n+D7'Qbr&F*lS!j:P4Rd=t;kRshLFJ#_Z@KLHsX^==B<aO?OBdrtf6H]pSGIE_e3E??q_
%H3Ie2kH^)R5c:I#=66aW@?n?OKBj77Vdaf>&`7_S#G&*r9,\tq@DlIgJXF=.^@*T"%Y@:oY-F<Dk$'"5gZ+?Cnmh,]%k/3].`_e9
%m;gRc1oHD-aIa/=Sr.t+NiiPc5nT]F/)^@#8Hj^_a$"m9oTdLA##,#D:a<U!![aNTLQ?^$ML6)/oBBHhR\MW?YF,'9^]H_,2pu[l
%"Qm90#aNa21g/MdM6,3lMtAa5Y"'Ebk8k)&'0I3,QJ]q4TP\qW@&6.Raq`5<<IDubi>HkGXEheCj;O'`/p'cOcBK@l^@'CuC`gac
%(H`Uh_L"+f*P2U?8rmSg?@qciNs8ZO.s$!hUR->t3KAD<+;^Er#TE#rm*VMQQElhl*'2p=F5r;`bm1I[??9+lg4+MfIJ3"B$M8p_
%]_::c"@ZSiI/e4f%tS"'1)d;dVMi:]l`5'ao-Im9E^=`005LDR8rfRC-h^Z_^&mJt,nLD3MKp$A7qYBk"_sh@O&Vb@lD<Q6?rp'5
%8_.227`3j(o4SET>reoC=>*'0i5ba[*Usm'N2$,F5Cd%1heTBl;!Q\5d?$+Z^1KRGG[DrNiD9#kM:@2\pld*1iLK**?]SXrcBn-L
%2(1/9rB(ubC@ku/A;0:`d;Z%"L>&n/13uqg6a'*=I/N+N5da:"bj%S`l-cO]HN+6ulDh-;M,MKlM1oW)=u-p_J97O0.$\<'X0!<@
%>@(a"9&!C=<<0hcb$"B*\a;mti0kY_dbo/ilK>h&<GJO4ER5PM3`FWH(XpKunNimkN:_.jW=2F`!t%[./<e!?9_ZCIV.:e@D!`WS
%]67WER[c"$8O/l4b#N2Fb4>1_X).mAY<9MGHZfKW"WP_DR3@t<Y+/;=GW$\2V>mR7[g:K/MSY:7iJI^(9OFY/=-9<*#e;9h]2k1Q
%$RggC9Q.BYY$0+YNQkhmZ-kEgkiM`_6F4mrDT?+fU!p3<"0qDuC?Y:?kTh/F;%9(#[t5*%j1eGYVhl*fd"tg!ZPkn'$9GFqn7OV#
%RRg9ZSYTTY7l>Db'm.l=_4T6(kuZ6r<==8PL/,K(^MhFoCZtC@k`@.k64KLbH>)"'arf-[.2F0Ziq<*cGZXlfIsKZsc0Mb&J=aCg
%=VSK2W,n,ZqXm5ljPC?4bKF^W+0T&5Sg9oPoNp[D`n7^F7XL7jnu"TOo;SY&cHII?KD[nYWg./d5_$MT#Z,SJ&RKBg\70UEFo%oC
%%SKpU-gRI<s"5nke**F*L6j.M<PM6"C6Ct,_9__&S*:`$Y&s'mEm`[=dBZGOTdFP(D#(KYrc$G,<(:\f<7bH_(dqX6:L;Lm1VK-Q
%NBu0fXsbSom@%_cU[f/AqrM9GeHc+e.j6P]]7"<@aB;6s02,A/H1ng0s7M?Hg+WZP7B8`_!7P7nF2aM9>_7ZBX^1*]"@ZW8P@*Dm
%82TP\SKZB"p<(<FOnpB$Z9!mO7A^aXo?%,(jiCbFVACpZB48S5'5-lM_sf&I0XCNOFe&DM3l.0#4<ES6K&<R1j%@eqZqDq6qFVdc
%Kb_U7W8gNUW.0AulaVNlq+=/r)YhM1;92;6BTaWuNa(=Z;1e?Vb\ra^$?^aeLD23N]N0Jr2)38/ndE8*G<q=AP3rUU%SV?gK^7hg
%:IP;g$`iR-dRf^]RI>2jk>B=P3Heg]"F[lVM-iHUbT&F2b3GD3j62rMnPUudba^:c%#N!,!TI"b*!3o=Hdr1+^'(2%(doG^.j#.[
%TDI,em9m,t2V8[#=e7dWVde3"mQhclp+Y%?S"ke&r^NTO_0VZ61C'I3EHt0OAc&^Mm?6jDihu2U:-#K,Y*/ZSGZ-ei&3UHgcm:bt
%?'.XoDCD-"E]$mdFg7rlUirSq7\6<JaVW*\/sODu]agAoSj.SH3m-1Hr+l,\gJP&!rLq3^1bE%pP5P-6G+"oUrcLDqY>9n\@pb_^
%q+>5R=nRtB;'JS=RZTm37PotudYs-&Kq2Ddosa^<Z0kVI./AfqkU*S.b@bAN=3Sb,F\Jhuk9apBm^.[]qqLu!bB)0E&B"\GbB"J$
%PipgIKD$s@9l4.GXoEW8"r<n(-6Bn5T2PV\1GYC6WNZfuV_^*,3`!$$h)?2b\S=S-jmnqQ>'\Ed91hIT/=YnK-9F_/*GY;aWkFk`
%g12)D-$aF>U=]7L>5B`eE!=1FUR$>gS,7r>7-*FBj6'^3Vn:A?,-KPEjLsfXV$jqbWp^6#AcC`dd>#/E<cr>Z0@\NX[ouRGocReh
%<@&n,f4(Dde#fks'\=cLl8_h8U\6>/f6?&W1AuO/X7trW;*CH?=V@lnqsA^>TBOr#ol0aX<.Cqi%bC2U[po%Yol/M_V#I_B:0&tA
%K1bVhP%928/T:Hsol.4:ZnI\ZI&.nPdQSqk;\(7u79U:Ijc[?Ylet5_dYbOV4OtsQm8s5AHEf-,M:Ba$@I`#hXbhFU=QBSKn'u1;
%kO4.@&ln.Kgg<Z$eCTd)3'Z9N!^fgfF08CgIMpFtC[B@t\KDl_EV#Oj,"3f(^^)fAe,&oukGS9(+V$I:NDP*>_0'@7GtiqM\lu!"
%025Kk-j!ekAqgDA&Ul5LL]%/"0NpUYLJcju'/L>r+=$g;kS;"G>R5Uhmg]ch#?tL')(^I44/k@I-%G9]j^G<\QaWr2#n0J>R]<?o
%UgEE!k>.ApcX3YB%@SqdU2kZNC=!ss]o(=43NQ$.FVUm?RD,EZk#+Y5n5h);LVHfN3rGh3eD[T1U^gBS;Dkq7^,2Zd4Pp?H[U;C'
%A>E/KTeJj!D4k;heq8DO]6:ULDj8+1U)5M;dthHt.tppEj_KRQf9X8kXr4bL\.h]XZ"lhth^X>l0Wt>M;E0=uO/QD7KbIKTnAT?%
%/=0#gY"K2N.Y=(#D=uM(KSMRmlAkAhaPuN.F^KH(,C+@83j;t:nH@"!-ASW[1;'Vd9QbARDb!VupJH/T?e?#_Yt_H;2>WO),Fkq@
%#=oK$=EX5;25m8B_KX#!WO)N)ZG^/P?].+&DgX4-]_Tn[^'D=[?Q5$^M#IP7,2S(s3V[pj]#dn9(?#LG+_Te(&?"o3%[QuD.fj,j
%6*'XcHh%N?YaJ$/e;N/2At)uS)-:7eT&+m%WQ*#@]$nUW?3=ok!ahu+U@l+-B:TCAK:2YaX0A)Noe_fJQYK=(/*pkoeQ@Ns"KA-J
%%DHR\5cQ@8K<L_mdAjDY4.e?l!qtJc=4d\t7,Ugk<;&MimZn](eXbr*fH%i_81U;+JPLn>I$a1tX-V,1LU:bs+I-![Z%n*n8JA'P
%pZCkdUe3"Zo]R)=#\W[Q[T0]pAk8.<8#PbB,/gGAF&[U)?YgN])Q]IkEPW;(*PLSMW@0u(j#GrEO?@6l,tY]%p<%7P<Lsf9Pce<K
%FSS(#*BU5Tm<$lO^Vj!t9Bhr=7V=!g;rERLY.jo_3OS3TFn^V4]h(ud4`\,Pb.Eg4Q^:6L[2oOd(X8d:jAK.4VuPV_+21-<$;1"/
%$pCllAnbiAiYtnmraEA$&9Zr;"4rZg,')tc9,R;h/gX)!.HT1K-$A`@.d)^qKf;a(=uDihKmZ>Smo@i9A_Y(cO^G/d;k*:)GSfNR
%Wp.I)M,V^24&:=+RSI]##^ftS]@D"<[<.c0](p(uh03J5^KsX42Gt2Gq7!Bge8"60mJgoYSXK[,*p/fhl.!_t=r#iMYGP6n$U.;[
%h.f!Y>.Vm7,@@RM;b:kIdf%48Vj^@T\n^:(T2j@^R)RV(l+A\6S(2U9/`EYeh_"VMeT>QsPJ&^6=/tN7C?\\RV&r^dWI^56)ulaL
%3rLG=^K""+<_N0SNa9j8^V[7Z<7>.6fWS9'EH<qA=un9nrF.XTRU+%mPkQ-IFD:f/-bR2p9rD#bVn,Xf8(D]r[9or/f,n#AWR]Fr
%^K:%TeT>O=;V??dLXgK][<0"?b&:;/WA3H"anq."l(f=tmV2]dC-"@HOXis`Y=Ooh!/\2&`$ZW,f"SY:e,O4P]D!6.Psh7[mskE@
%cCKSBfZ&c<L7I9X$p!.MkF_Y<[n>p6WU4TXm'gU\]>$.okuO.HP#SGdO\uh-ISM7530AbfmI=`B7I5>C,).HdGEJ\-?,*rWrTi"Q
%`R?Y",_7%R4?W:L/=;AW4\E9(el22^'(mB)(KfE>]^nqk@HJbfqr"G,#9Y!!:LRX-EK5+A+g#K,0e#eXA;2D)\PH6M_P!oXp<%Vp
%YX-FeE>T?(\f6SS&!XV_?"[]H13\/IARV:E+dFcXb8?^&ClCa]13^#$PD:c37t%Q:'Y93\R)n3?a@[*XD@2#]\I78ZObN5YdIo57
%(Gd`"$EH*&-t\Grk78PFU"4D3(r<Bn2cd:%e%INL+$N@MgV[)95p0GtcbgU6f!+;S"r5N6cLgVV6u0E&kQohn;/%P>gL29R1<'t?
%_[L#X_8M<\\icT3Jo\A]e`D(bT;-7nMsfL>F6Wu%:>^F;Tf3Yc)kAq;k0q[g>nPi=b4S/bO4cgOHNWh&JWh%='G)[o@>:PC1#WfZ
%N@(r+@Q$u(Z5B0=#c\Ss>/guPc1:Vc_9N=m!WoTtnKr^4AXnR?SX@>HW%MO/J-;![1Sr$iP7nKQH[/F$CGhT?).W1d^!1mY!u^fG
%T%Y>4;rDuf1Zs3n2dp+!9$>5T@/077FCS$eB">Rp"%PO%%:g#rFmb:,\4`KR+A2]c'8q]k^!h>D3KMD$*SXZGYELpr7EXME/\KPk
%?\R6-qkVn,(*r#s'N_e;)IGL,KtHR$[ob"*AqdkU\a_WomUAXL%N/('=3;K](e.T:93s&c&6W19.51N7%U.ho:R8>S's.:4\;Tph
%M&BEB3PHLY3CZ4o[QekAD.&FlO"RY[?R/W!YP!;6Q97Bs0_2J.K"tQ?ibPk)p:6o:@Z&a.a'BCL@0:9OPb*0ZP/Xn?\\)64MTOo5
%cenP.#g]7;>,b2i@gKD%N\%OY*Q/Y7McF@u3dSaN@QK!Of4FGL!!"QJC_()7O-A9;J0b_8MT2#<)S$J]Ej(iqY)FK.#;Lgt;OJB'
%Tf8o9?2km*`l>M@*#oaI(g#9G,6;;q<QZ7d\]7(p]jG:f8K-X#E:D6/Bm(]Y$eI&OQ1`j%OID'MEs9?C1BXX)\Oq.MpVmIgji&q3
%V#&*@@R[jOautJ*$QRYE@U+>9*M$tI5D23G%dSmY9'P-RXA"6<0Wa_E\o<,)PKrPP%/dNt`:g='lVdQ:_/q<$\X/*0i-]ItE9u(J
%FR_;*ZRc:M)(oth4o+Xe]]]EZ;](iXF#CN,&67qsB>qEfkf>ufZX@U&UfXG?h6T.h*YnQret^]3>*&"a<kmC;5P2Nu_sf#0N3AGD
%d'OkaE7S&Q:dpIZXb.4*q:Weo2@Ro%E3?pIH]8BLMiR^.AH9Pj_,Y&Vs%XB*!Y13HbX6[E.]Urj^Jh-S$Q$C<.Zp:9J(uVO7!>"_
%R4reQSYe/ui'OX"^SNAk<Uj`<8b_;4)hRm.'A8DoA@L[?`,-KMiu<(()"$1pc6"eO9r?MfcC4?.E/uW!?'o''c<fMZ`\qnm#q?iI
%h!4%O'9cd`e"$tG`U#IUb><<Q:]7Ck'skDM^A:ff8];0VMW%_RZSK_dPgI6'\L%XP[)lk/(_fcpID&?b8#7MOXm-RbQ64e/ROs=\
%-26fC&@Y&6=tlb.(b6G&.5''G%B2+('Uc3X=k$`aQ8miKnboii+`6S'I:Ker+btbaQ<]D?a*^usj'N#;_7!i%\)Ptf3bo79[gl?(
%_rCI\;\S5t8ZX!q/A*=]C[j8[gF'*_`ne?Don&WD@1K#V;1Jt9cpliVJ=)_o@XV6[!"*f'7/CW:/]mD!bjr=(3lGU@O0q"aKt/0f
%LePpS:e'j]UC:c,r)gZc3[J`#76jA9k>.Ol.'-@ho*tm^>uo997!+n5?)9J\Nei4X0<;3K)FtXJ,BkAr0-h'd@[K)?rQ:3[[RYH!
%B5KZo;N&ANLBeQgpVKbB)!csTo"gn;=X`I>ORE\AKT%"qfsg/[",b1@OhcE/O![8WG]rbYCn,U1LVioD"(J?=/5IIKos%aK_cXYl
%`sF)</#3ak@pJQKBOQ(WML(L/)`.mUD@@XsD"&jg\1rN5TqVMleL)`&!YfGO@16OC"nm1<J8o'!6ZG\SUB'>o!/<X:P"#Jl`Fn,3
%*$>TMh]Unq^h=TG:)%(eEAZ,?eiO5c)%Ag2aJ+(]*rF6WHr2u9:XiF^U3mQ9`JBHCp!LX9W$n9Rjn[c-Hm,Z]gPYR@d)(d8-srU6
%OV&>i6]AjS^:>Y!AA7RTGj<70e'[g4%5hO!^KA%?L9Bi$hm9=idbIYrFo?WeS0Mch-*HP]RbA$f6SW`^H>A5/F$h7SlPDRT;<3K&
%lM:r/?Q$&M?Q@DNiTp=DYUug=8#r!d?e;K*<PKfA>_@AREfjV%#t/7&q@-WCP-+%/OPVa4?,*>:]9q+d@b12k`^;V4?,*!$Q0J:^
%E:FQRpTEctgr[I`p$7%R$2CcVlM;fa8fP:C+62b,<:u1#o-^U)2j>,#m(.YZ_^%_ao1l=gp'ST0;NGbc;RYP1I)DPkW2b:JMq((8
%rHc)dnT>Mt38Ab$rH_+OZkhioFo?VZ=LcC@;:j,_V7<OtaHAMR>sCPm:ZQI8TnhkQpE6F#f:*e>MFngVgr$d+eLq,F)69oImq`&F
%c[NX?Iduao%3P=`)c>.(TR(u1W+0s3:gH9t'`S^OCjZ?8oo$+];%':3HQB]#?gi@`TmG]ceFe_;Pr>XP.'2^cLQ9?VlSk1I6.3>n
%;;m<7VjF+9`$hc+Y9)T*R6@'dHm8n]ii;hY%Uh=PAam9[nKUteWU&/?TGD&t*2p"^2s4";5I'i!=!d7cp$9lbUde>802C)qiTp?b
%pT3YH]H5rQg+6)a^-V&\ordR=T[+?Sf.X5NAqT&Jh>"3srH\^d#HS5!eb/71f-8^b"EjZ*<!o]&q7#!qFo?WEmEW:2a#q>Bldo?W
%G>@8HFo;@YMrtC,:gLi-Eb/c%hP>;mqF,CaVQQQ7(lGBjTo;*k\ph>nqP!OBMRn8M"(EMNZ%R8uH8t!uN/^AZgp="f@NHkjY$Z,-
%JiGhgo"':%o,4LlfAGI@?<t>&4!KrHEBOFW#<i<2';"#K7s2H:?Mc$'bt8&fmVso10'@KJm:9Y`@Y[fp21mrkMp,\pfH\T%q%-KA
%m%>I?MA2Z62d^rk19r=J^+EO-o[HrhIpkPNc[NPg:!R[Hn*b>?_YiidiCl<(Chi5!MUY5\?@HafQ-(c(2F%(@=ieq8^";kf.t=Fm
%pA1g>FmO9Wl7B$DV/G7->?Wm#Nht:dUMFQqpJI*&btdTQYOgJ"[/9U_7bX>\rZgg4b&>_blggjY?b:&EV]--sdckE/5WW7%4p-ML
%aDJgZe[+W>qg*8YrM+@I]RRRf/\QX65*%oT?5J'We5bhXM<qm%fpk!udqcQ')9&,VSA*gLfK7fTT6u)@GGZ)AI!tkN=2c*8=hZNN
%G<25Bo39aL_lq+Ys-[3+4_Y_WeZ$<f,l%q)]bT#bpS[,s`r4UL@J9rG4r@Ro]mmE<q+#9P<!%+5"!d0>ls[V3/QRPG,3XRA:.Z7;
%1L%P*R\.:Ei*30=06MI34&U:^Ab5l<g:p3j81^_V*4h?+.i1c7b&J>`fP^^@^OMcdbi5r8L1.!X`'6HWF0>UNPqj$@?)apZ6*#qE
%'=lT;(Y6SgT]Is;C\nA$RH!<fL=e-=5I4HiF#.)Q:RrZ_k-<M"#o:srEH%<Gf153X5[<Ri=f]QkbN_T-AUj_2h^W0N3\u[e9-A^J
%STN/`a"),+%s?qm-BZ/q^jRq7Uls3>Ie&&>Q5pU>02?jN=^R]8)LdaG%DoD3M`D^M$hncEs"$-Z2G5@oZfHO8cF<NX(3)/YC2NE^
%Tm;,jQDO/b2WG8<'Q<'#R>UmAP4N&&mB]F8I8MZm0Aq.\STeF_8q@eV?Y=NU`MsX=,rgEm-&Zih#(,dho02So4a/tVrrqAZiRqt6
%h@&H5L4m+qo'3%LoSJ`"G?7)_3M7mp[KC!FRE%c#pr@c:5F76[2>Nu?9CQc*7%02m2Xon<KG7XFIr=c%!t&#0m6$`6Q"O"::6r1R
%/<n;494TWJQ_ln2FF(Go,/'o_Q>4\$Sn3C1rtq;dKh#pq$>`8=YXhS>-sh4B.6g)Q/e8&HLUScoSra)LYrc$$2Kl!10:IC7Q.O#N
%j*@8e-=u-qG=M=FpA3^]5.d84L[DLEHJ@a0\@PbBr`6R_UKKpA<V^CAKIA<X(f-Is\fBTXP$`b3?TIsuiCI7m_gVkqWObKHOei3]
%G<.`;jN`n1&%a.;HcWF+ehhZ7aoLeJ%/C?&XuY[(kM]>/`cD;(m+0r.G?UoHXPpuYd_31rWO:Olb!m3:_Dj$Rb*UYXb2)[]DPu4>
%rWXZ4kMkkMCcPZ[qN%EJF1IOcC2bhT*g^l"\D%o^qQ#%MS>X-7;'X(Emo8jW=ZFX7RIM+a:Q(:9hjKOrHF7ph2-(24+IW)*%b,$)
%L?q]Yl97#S^4(=5,Hl$[kGK-+]-f5g/<9s;&*]r^g#:8VFLJc`!G.eX6UKHu:U[@)7lP5Y@Q@_=HelIR2'eq^q16C(/>dK,'CU>6
%JhgeO@`G6ICX:;BhRLhXA*3.fZEZ->4GHl%&cnZVp=kpECJq3Hae>";i=+5A&>kb)V,]Y'94`OSi%Fq:Omk^,XB@m@keJ@^h3G&d
%DX3j63"q"Lg=;N8DY;*ZTWjdaV8SHr1/ji_2ofIMEa^hdI]4hd1.&Nj2cjlK='m4Xr=E7'0=AiSa78>Q>b#'qj.='Z/6Nt8W-)1^
%9@!HcQK%bDiT;q)HduI/)+BE0!C"!M#R,ogoW&_f\CN)aj[E\0LJ:i@^,jFO)*'?$fM.(0\s!YZX(//t4<;=&F\p?7Pd7-U0A[8f
%CtA\GGPK?IIorg4hqcD>n%/g_o$q#0.poDr<0ch!qQ*K:6JgsXb?rB6"=NJ6F`G<!)*#J,+?\Pg=;m$GQIg:lC?>?1RjHiH:4KCb
%f5cQE=KoPlU1S;?$)*lCd@SV"FO+]^\p*R=__3j`rJ+Aj7.g_IS<2o1iqk\a!h;(Un+0G:dA\mB#PA#ib\g"CC=h/^TpSj3e0CQ&
%.PP<+qI!XD"q8V-f;AchpLRF-b71W8M0+*@bl`jKJB:k,%7&$VddlNua^7tE*BS"9+0Guj"CAM,g1dB5GOOr<`/YGS`hFuP>aX1k
%X$Q#L)Ue"?`<)"+C4?NpfQ9b200d!;F"1_F][1_?TlSr1cVN%_jnlpM*$2)#O^&cCa-k)Dm1kp7?^4YAZ3eS2AmXp)R9W=jZnW=S
%m%6E(r[h-np[\WjC?%IZ_YcUOo(DPL<g::<kjpf3bsThM.Tq2`4u3SeFf>CHhphVc9jcZk]/[3m]U4i8%L)6TcZ'fajW#iKh)r7B
%XfT0;Hu6uZ[IdASXh2.T>BdP'/RP'2*(s;n6<1X<pFWkumic-^Hk0i:,eromq9no03]27h<Z=&G9toIjSF(Aqk9m]q\/L8t[YXH,
%=_eM-hG$qjhUG5NBQ*PMWX48)WY7\<ikj,o1`\7.S0]FYM_T0U?CtT)a^)G@-XYJ@'f[i_lPEde5JPIO3d(FAc#,#*DHZl0TE^b[
%X/l;@fia(RmD+Ih38,_EUr_RgFg*`*?aX+P^H-%#.l/%P5?sFRAg]MW]iK*K([0;14md*&V4BE.!PPp=?LN'+b!g2Z42t$M7K-T'
%WPO68Q[r'tY:(4a.tF_orJeleNa-&Ga[m7NBl-#@?r^9/aWeV3ZIFD9\tA.\;eV#9^PbAo\IJH#n"OiO;mdg9(pdt9Clt87<[A.e
%DD&LnI(om!/=OSi@s]5:OX$20I21[(J/dgWm[W@S(HHMm"b%7$>:"![H!->[YMLjn7>A!e9E%LXIZ@o893C9*)A;2$g8NS]jQAK[
%`$3rTNqMe*o_Y_-O[Y:8@S/4B[)d9]$.GHF[PsUqm,[RObp&(3=C/()[t%Y.jEg#YNa1RO9Hl+[!Xq*FJRr"A7nB_82N&,j[5Zc*
%X-k;A02:$XEE)$TCl>,:#UuAQ>V`on\TkYh0D+F3%:kc5TP8+#/or7]?Z-iTlXmt&M=7-U_D/]=pYW`<:(=`t1:^"K!t"@o:2Fg]
%]0aN3!FO0rJ;:cYUFY>>rB:\FCO-T!EL,P*3,U.tadZ18/5@Y`=h98S\Bu7RW=Y8<3j-:*>lR78f)[7(BrML%iiU"p\)=8SJpGLj
%$MiDH=ZP;CZQ"gW;,:c]5LkIAMtMpLnt7c2d]0Z$D@9,)rIs"nqX5GM$Jm8I3qe4jhm"Q<DjmTI'8s2(GOpNBP4lVf9\4;jhnhW@
%ZJ:[_AQ/tPQ:O0QW@)8'I_=bl7j]VLQ1is(7;]KY)`u<NPP4"u]j-&&PT-a$Vu)NMlVUu-<#Jm**l)ZC^:u0?lV;W6!<$muV-[nf
%DY[$T52,i0UHaa/^&@]Y>PnAmn`q_(a*_+H?>X%U:7'[)2rfCDhDnsSaLn$$V/kb3*41XsShT'n^="KrWr&@YcVqA<]DSnhHb./a
%_On%q%THmec&a)J;+r2Xacg#kjPfEpkC"Q`<>J>/<jr+a\+^7@1G`6ac`'TF<(#!>g%hTJH_+N2Cn3gEh<s&cA#H0;,t>J?/0)f*
%0i1'N4n^mAdM<Xr_^&_Ampp@Hh42[K2<*s\[(1INZ<=TDo3$"gGGa6_Hd`4<op<Yl_p3O9EMB^X='YtDBToRU>9DV\/:OBjVd%SD
%k.(YnZEiSq1ZtC##iBX,S]ZVE?6<.CVmNTcC8.[<3,tTFEMl"=7S@;*9jKSqPeUG:k*73hLq<>+6HYD;C:3h>D1,]5=+Q>0>-4,U
%CFbB54oGl/Zh8+-XXr&j[WPkh^RnNOArfubkIZe%#:ImZ=A!/ijcA"XA;5Y7PJ\GbB#bQX,(J7#+u?FIk/,%.o1>un:4J??JCT^+
%fS?/;J?f(e*h'ML$ZEcd7nsjYg?U"E8Ant$^O)PfMgD8W[Nesd6Hk>57I-'rCNtaH8_.CA2<\URZ6&$9O2&a5><I2W\1Z[S[)BJn
%L14>>Lj&>oogO"dl1,dQgb5pE4j9Ep):?PEEfY4q=t2<^>p2\)bI:B&=?pk=UpKAW+=3`=666)/8/IN93rLk(>>WbePP-Z:fWCn8
%D?X>\hpGEt.p^6I8WuKPBGDC$#`0DpW"7!:T_=RZcVp]Tb%E*8o@bu=l\]dp;KgKOUlX*u_T$3d[+!IrMoO'/hjN'DZ*=_<0f*.>
%eiG,'#O'E>Jb#GWo/k@lT%ND2j7g31>MiYQ>Cn`b8[g@3NB\UNMTB78G%0lQ@aIl8lgnA0p>jPFX0d<FhY]P2Hkhj#_+kjp+u/hV
%apc6K`h_dBp>aubZ+24_[Rkl._"`pOkM^<`,b.cN2*,":+d<'63thOdGL*6^E]G:'I3#:4T$Eli^3ZO,N0!^aV5-MK*Uaef!!?PB
%4`gZ*8R2(]$6D%`O:af?EOZ=pq$Xju$E\.KD[j3JNb7R$^H?6O/5`[2%j^fHfZ/mOhJ\D"iXN2Uc<gFW*+unT)`:o+[L^.=IMn@M
%!4bgPO16+sIMoTWp>na?U&Osj^4>X\&)htoJ$m!)r`eiXUc07'p\R[pkB)9llqOp7.q@AUPgLpiOJm(Q2d;0g$m\:<<pTM0lNAui
%=+GngF4%psa:o4"2&$E55$Y>g8WMDQ>F\mS#$6Grl^<(!`'.K0*\J@j5"]S<K8pDY36%>'@#r8e?3AJ5Pt?)1#+TpGO2X+c0b5']
%`9k86aoP;i(CG7t/sIWX]t\NrhC-$/ou?[UHDacdlcY:)94b\WeG24D//f>jp"qj7ZgIM9X,Yf$]P"W!DSFi,>-=uNG&$05YPJ@(
%0<G'j7eIS>eYP$rf!^JR3foIoXJ^lT+\??P$17]2PDI;/]8TFnBI\q";GSI)32'hFFFg3LTi.9Z<KY2`?jBa0oDE]NrRaB(3Nm(s
%!V*9"+-9h+L_AUEK8l,Q_YQ!4E;eG5jDbKK@2o")Ag1AHFNU-nR6Ba(o^-;_O*Q$jo8(-n-mTibs/GC8Tn@R.#s<lhmbGmg%pEg3
%GLG-srHf<<[ZOpfo/*`C<8(;`%:!iY0D\0$r8BB^Bfo`$N?om5?SqI.?+\qaiYA8?G2)X_o0.SmmAD,t\%!NZ<m48ibn@JkA`;QC
%3X-Bpl<&Jt_E4(%DdI[om&gQlgD6A3HReX3$Qn9K1X*_"ATrQK^MVpCf_C2'Gd?[h_L1O`PJp!cn$aos/.T,O_Gf#LX>gjtW4FgR
%k.C,W7Y<KF]`bfBBPClZ1Q)8M8O;>g5K]i;:5MJY\W;'pQCcN33e=HTZghX;gp8j)Ko2d+!*LBDgm(flq_eO#hjgdUI4eKeYn'ia
%#3=J4pjB40b,6o'i9YI.a#fiN%flQ:`q;(hio"4NiISM2#mD?ck+aYA(pMLRR4Y/2V[T'%<KOh*-(4pg4G3=]/!4Hib2usRA&sfP
%%!MWl$:n]V<TS,AMd&C<[mbc>H=IC/e](/\Fh$ol%1WMUl.0jfFGbWUbUNOZcHaq":LTo"(LG1Zd'h"[]Bf$Q`_P!)_6f9`.JHeR
%%nNq3@hTC)P'%/q&WA;P=7U5Wq;Q+&r9l6u=3tXf,LA>U][8jI28CUI=s(M8L;^:^lQP6QGf)nc5o9oRDcQhuNo/A;(BkO6J:cq2
%c'aKA;N^L'1Z/'R+ZDt;`lVn/c*uVFWm.p-.12S?]un<98bsZ_-AX%?Woh<RK*(.-Nj0+n[\rJ1m=Y%(\P84U^2S>`,6@*YT1&#J
%-[.5_@]#U.?oF1Sa*N?Yp'/nd5VA<>(.<*t7%K*4VUp[G(5<hs0m"lM!`=h0%5J7JqBA1hLRj/6Um?XM.QPnZ"J24f;91(Kh-g:D
%"p!VGPCXRB_A!=h+QBOnTdTt-0G`@U_,7EZ8hj@6X`)J.2ukRH)iR7k0^PYd8<Elll*W_]3<grX%liNV$Ao5.R.-0ga*;g))="5l
%o@m\:peA47plc>.a)2IY*pY\anc2XEfjeUP(.kaVbJF^?P'H=,?QO<Apj9(n%6KP_WY9T;Q'Gdt5k\;_m=3h*[CN\WSq;3Zf@A4b
%PWi'e\R0Yk67E=)L19@9*b7-m;N)WYb4JjH,n=u@,$Z/hC#BquLg2'(eNZSoLS,UZr:YPOVcGfm^RpdO)N2W3@e9/.q(Ku&U^(sk
%kY4`DZJ!HWF(b`.eYhRdg3RPXPpQZ#0L:'2>>Ur^,f)p8_P'kFG:nX_eLflL3E&a^.=0ul+cu5%_9;T(5Cl>OM1_fZ;-n:LMn&-Q
%I!9?u^,imDgkhN+S#:I:5C@Zqh0dM4LoBB.6^LBaPru;![gT@?SR&\4Coc<)Cc.8X.nf,6!,QNben+9L<QkErBf-]&:49J]c`Y-D
%+P*#2W3Dq*[oVZSKu/H@\N+ri4[$+=5bam`#:Y*8pX>/hB;Y2t&g92_Gc:jedfe+)>]%he1erq$X51';h5^Vao,JU@R(ZMUa\V"&
%87Couc*QtG.5,_EH$k9J5)qV=4co-6o]#-K0J&0#.Y>I\6aDKgOM$i(F2kV^\Y2j2@hLQpY&)E7Xeg,t9?9@%j^53iOXc&.D@ol<
%W;A^c2)drogCnn`;IIa"q==B0]e3Z1=&H-=$ri#Z=gcY[Fe"*F`*jG(pYCf]8POmh3E,qK;QnJ%1Cl8*KtomZK.!&m^iP8eADGJ1
%d53f+ORsaIHT319><**&>R"(*[No53eKsboo37g"/isp^%j(EE7J`gDj5k@EOADWKD3s_SlW*'EERg3[nmu*t\prL8:-WA@dVjDR
%N^e_3>_cM;>@17*<4.WjC5$7/&$-8=k]dj]h'#YN<96GfUFm?`O)&9GjK$hu"t\D6Q]B=,+-N]ZR($[2c.qBkl;Xp$!(P2&gm+?:
%dRl$&Ok__Q('C!oog5@JI<;:h0;>Nj2+Ic0jlHgF>X_O#2dbN#+^n[eVQ<GP2I@HpE:Ase9tC^N#!f`RJ@Fi)UacOjlJcoOjQpUs
%>U$iT7Xn9Ek2oE_p[?sCABqu@3XO>k:7<,g)EOc/FgTim]l)CTPA.:O&iQag;R3_,/5LDkr]7$f%NZrn;g+"cNm;QddY1?-1giYQ
%)!SQW`[=O&V>3.7PZH&AG$jUb"@GdsX,6TDIbC:[^-q1uO)k7qU%aI,1;,O3i`jDBIYX!#bYgtBq2BYVhCZD[-9)saf'VP2j3pXV
%Ieg<.f.Uo\cIljIGMrZS\b,`!EnZ7J!-mceC>+CsmlY_32/U692jCmZ("K;Xdq,qqS!SES2ESn)[U<DcL+p`o3?Ts'lTS`DC?^hW
%'*7r03WIHoPCB_7Q%A9>9:5SWkiQd%_FtC0Eqf7+m3K[PrkQ^bPmpUR6^k8s3U[C5IZU@E3jM:c(46_UVE1P*'a\_MAOP%M+)Rc0
%Bd-1UM6$M<ILgH!`(S\C!/TamiM:ekLOkrN*<R$g!J*3$]hYF"3rGtI*p-GI4L(%:[h%6g@U?n+%L[0nUK*f;?c#WO(Uj(hrD#'p
%,X%j<UIu)(*`FNg`P/od_/j0senYGmjVH;*&uDTb!Q*-@WAa1JpL#4/,;5tXP\_eXJpWHHK?Lb&THiLqf-1:&I9!hqqAh\';S),`
%e%sAkm:')F.ElAOI^>P<:X8H)o$lj&H]5oP*n-ebkpLXh09uS8c<$h'K.Aq%1C"CRc_&X)Us=$S5)Xt06G-i#h:L8I[/@.3`C$`J
%=0KYclGD&o%]4-Lan^UPm8tS#!nip;P'u'#*9<J/n):iO]:.>QAr*&l>-Hp?(B+IaEc.'np7I4?HZi<o#Xu*Y8&#G%8mCU<].$F_
%;J&<>pK5eDk!B*)c.iq1"M/et<F1]h'bK-"T:j+uI-t<'KGtGnjQ.a]nUb9CZ7cIL99b'EOsCM9.B2)BeIFb9-*[2qNlarCZRBS4
%">L[S6]9ADRa./Nq\Lnk_9lL4B9kXVp>Y$I<_I+6,.nk&8jOXJ<uE^8^_>`L$XHV\j!m#!rHNc``tI9fJPI^@D&F32Ao2RK^]A>.
%QD=58HPY`'kd0KJ*%4MU/Afq`2PRPAT>Vl6+7Li8D<jh<?DPipme/qVd5YFtm*tU<c-teFC42q13URY8eudcZ`7=Bdj*GKjM7B0i
%,Y?83bFd>HN]fD:"2AlY]PX`T/@:\5<dT>TD3$f3DnAO/CLIs,9l77P1\k,7f_\j^ToZln'[>-_kP1,aLR:Wdn9PD_)kOD[MoZ-G
%)fY7<h$8l1Vr6bkE8/!3W.?FdY(ORQqm`[h&?-EN7(:GG8TnHSAh%Uh.C\pLSNW114eYW&%&n_'*%sg+Ih#m(rW'8_`T%M=nHYQH
%D^*%DdZ?k\-<k2^V.Cs"UNQ_%S7IAiKK#9LZN;pg"9.a^aX@u&kt8[Uc$\K`hn#>s*(3eO0KZCAbhc<LnZU0QT*hIlSZEEGP&gQ0
%D;bltE&R_2U2jS3T\RDQ:ZY.H1dK7'.cJAX2/2l-WQ#O^FE*!G46cLrACDcG.e"r/,"ik304t9W/E?3W!M]h?6;7PK4[r1!9`N4T
%[#OKR?Sj9-UT?3mK/$oBcB@P-"h9CMIh'+YQ0cL'h,i*8<?Oec-p^#lqgeNWKf1J,5%XlJl0lb8#b7_J#YbO7;@na/bi'UiG^*<D
%b2"'"YF6bQNdk),p7&jn@//`B:/kD3k%dQ/X\tp@UTo#QA%D;YB<*Gm2A%8)1-5+>.@CP`e!6>\#3p\8Kp]8VN4TP0HhOJ6S@8n.
%mS)H='8,-sh5;LAOk)c('/.b22?5_#0Gd`qI(p!F(8PS3/lZ`R+=\?id3_Vo`C9-Rpj8bPF36pkL26s5=.PoIbG5&]4^$"`>5hg0
%b"&I0e,GAs^Q3FLec#2bH1kq5l9g'6]K)&&r<oA\hYd82C@1!>.Cn;Ckda34\Jeo3[BnXB,HV8,+9ik+n82\ZKRa]^aUNC^O:PZD
%KGDsbc)@%Gi8Dct\'IIP,cVNp@NiiE;A06]ji.C!EftJ3NY;U8Fb1mT)2QZJ#:Ff^Th;ZT1HG(0$.\6N2>tQ0WRkW.f)mpN.H$[3
%JI0jY>(RB8p\^T2PIe^UnQ3QaD,+r.Uc7AP=9#XL!=>4T`^b8@qY-bK(N-`%'$FJOADM[*^W-dT&l8\0fVf0raMl94Kp&kK')V8:
%hKs2A2YWg%Z_dfYn3Nt<OUo)o@8N$<M6IoBb;`U?"n'/pe*a/o[Yd,;:L2'\2\#0Z<,:g`A#]O:>cJpdS3'PG)],ml>h5gomS@Pl
%@J:(F$[NE[ZC#j$j[a^g0Z69`@SfN>92+eMO7NeAl3tHOlOlZOZOK^&cBisRkdWdN/FA],EHGg\B24`moC)>2Hlrf5T[Ts.U67ZG
%>R)VNYf,=J0Ug<@2#_366PA3ZQ`05,h$X4]?%RHg`FQ'>qp<Q<3+oVApCg^4q&2]4a;&\pMp(*[rB-HG=uSmOps`:uXa!9KkA$q/
%SMK+A>b+k6mmjfb@;;00N@Vl&UBScI<Vh.Cf7I4CrDK6`8=-,q<IIM^GPR>g8Dth<QTWR8'2`rsY02%F?2i+1@r1d]Q[a'roj=)u
%$e+.e#/%QqD_=g$Mg]f?]Z%Rrr0tm-aYE4d5G*f#0(/(UbMD:;>X[=&i8&N"PjUrF*KB*;\@\1KM=7Ub(YgYNiT0+$='5W9FQkA(
%,]O1H0BT?XHW<Q;\%Z%[f..Rm65`&*G(UEp1fHI#Flb2+iOV^rn"@=,0peJRqtKg+3Ae=5%C$*JAK[q@7Am2Mq7P'j'@^59\WmAj
%"6.d-TLQ@D7'%P8p)mtX,);XX1W5sI-n?Jun;.t\_0ShOp(q[?Q&H#REaq]/hJ"ICqZe!Src'-AX06m3b`A1P"(1tC@_%SGe/0[r
%(@02<0Q0T7nf<j`(*cipPO!EOlF:6-gg/a<TF,q+Y%d[RA(EK%).6GX)rmI@"H9b4VDGtBh/pC.\t5L^gF/kqr]]";-\t/t.d?KC
%b=amcCL!`LMAJ@:IL.305)Dm)@_3:nqL*43^l:iOr2f".U-FSgd*4r;=9CKh>X955A`<&pSkp`R46^1D$<"6#(@7#9q30G:W8@dF
%4,NsJ5!#"cH=`Xpb/kOH\MYC^grTaUr-K6*PB_7j[LZ^=W0DO4DGYTresIA7jYE+kD3kj#b<h%ARJ<l@_c]-Wa[@P8XbkPp_jF+G
%G7e$_jT[Rf<'\iYj$=F0mDD4!dt+^\rDVY-DcB!H5+0K^bPCreI0sXU(]@r`5NTbM.0J:a5ES=Ba9>&90=$dg?XPCR=G*NN[(_Q5
%P?qX3$Y6^>-JFTso`?Ai(Tf@aN>EGB^5.LhaT_Aus-DGX*N&b")$@>)dfqG"`a<+dE.M:jN6Bhl3<a=_2,a2VM-b@`ABs(77^-LQ
%>O6&)M]Ssp/11<k]#>"p02&#0WH!S)e)AiV:Do[%l5Bmo!%#jUj3+5B@c"<`a]<RP?_cXm'%onB\V[M_O@s?L'bo/W7pSI1c5"hk
%BZ.K"rn_*<cqZ$+XY*Cs<:d`.mp>\*(Q-2rfA.mW^Uf&kV4S@m'`IS.Cct4Vae7sG)qV!+G?RWuF(s6smQbs!c5e4h)OLE6H15)!
%$:1;p`AtRXp.LFXgsH`hhbBikeb+Y`er<[/OrDA49R48on*8`Zp'dZm]R&`K[8^4aD]53MK.4=kpl-YF%#DXX](.I7[cRrs55Xr`
%e3rWWommaMEu@>*^R8tdg8,d3-gRsA6Lc`WdOt'=9!!2MVLsT;[nCJuqP2#QMGb<]"k*MnlJuc.R8dKi)n@0ZP3mr1&>@QQimZXr
%bLa-J/@&]f_4Rc$/oL.0Uu1b#7;CBrA;q:`\NZ<?b([F:Kk4boJ:^ZnC#)`_li9GIc"72/RXlJam$7U`?q)/iLfAS<`\6))!U\?%
%"J]N2&PUP5@`q<U=AKXpOH0`i8<#CO+Yq8m[tuL'nu9l/WCgs<W:e^F3E\41*F#D>YNMVV>b@;T-4)^Q*So8j<9pK('_9]rhK+A9
%@nPr^N!4k3GGO0Qm?1=VITK`lR&;l!:+X?2YI&?_*Zk29DPN-[&oJ\e+Y:V`FEIrf?N\./n*&hG'`G`*GTMsB4BO'^5]AX%%t4+V
%M"2tua5G^rj<^rMe8(7mh4U)`=7e#O"(DZB'[C9!4f^Inp4![@<NP+a:`K<!/mcO$T@PFR9=Z@F>s52c7=5#B]."OGB+dq<)M5Xs
%2>*QRjA>io-KI;YD3p0JmEPcZ^C:=Dp"+k0B2(5)+1iNJdj;nk4"(L[nGN-jJLVhPm+(0(30<A_.:5"EF/dJ0V4.#RJSQk]XO"dB
%gpVbFD?5I8j>N)H+8c2ge3'nVKf9;T^6:^)YN?UrheU^,6KWZ$Y:O'm_G*OK^:>Q3h;,DLV#&lK`1#<`Wa)&>U*/W_'Z5P/(a;T"
%jpiEjg9!<)F87`(Wh$`^Pq9eG-$X-=R'sSe]8cS/"Vosp9GBQCJ-nE?!(SR9`kkLsfCqdU(%Rs-52*2DUmn#@,^Dj@6.c=Ajk'cd
%A]:N__L5jlX^#BIc5l1$N+'N[#,1HOaRGm0(6++Nl@l5AT6c4`'L!Zcp5m.u6O7JU&qM%FFMrH$9g&sD@3)!LRp.nSH+68J27`q-
%A)sjE.Eojf#[@US[,)uQESXfQ9d3hnr-<eAKjT&IZmI6-EJ3lb.I=e*[,p_F6n<Q"<iXBC;t#e=fKgMuWZ&\':'-U1Y>LRYe_M-l
%//q[_Lp`7Z>`mBIXC&Lg(R$Xq4kR9u;NYDJr:lV3N*IPbNmt<PKTSpG`WbBR6kQJpTlT5,oUp9#TlR,+D`Tfq.d'2_8(+pN<).n%
%N)t0"P^5m#kRecGJ9XIUQQJ"-N`bCM$kh$Cd8.G"<[/<`$"LP/D,29$l;(Ps/P0`pQnJ";AR`5Y:X@;/f;32@O&nK3PHQ?@4&e:F
%NJ^hD.,Q+a",/V$()I`E1M=nek!;'u]INR%1LbJ`nZ"G7k\MHd;"Aj2a1`W5Yr\=ueR74BSfZr[`N.GY&fn5<RWqiQ^)n5t3gt:n
%6=G1.X:B$Sb'T:?;B?<odG?k?#kWmi/\Wj1pQ:":72ASfDsLVTi$eh4,8VP?Uluu6O,m%d)lH#;i/eQpeN9Q]K[`O)Q.C5A'N4l`
%=g`WAOfoo!;[QB%.\rXkFp6l\%P6kq)MpFJAO8,L@DWb>3H^;h17HtO^n\'",4ZRQ*03'?'r<qdP[5ErZ6Q!)bG2YY'e,dKB&gfe
%l\U!mR<gjMN%:OoQ;39$rs7]7hU3jtEL0ckV7JA46*%1FQD_:i/d7bh._esa7j`d(qc3k?a7FZ/o@U=&?DJ`_2UAd4n/PN+Q&9Cp
%*kOJFJ]%4pElBtUNmbFf(2AeX)+E%`DnaKT?jDTN`$dk!<3f:M'n:mCi*hDNG7i.C8hHBl51c'CY):`24GsCFO<"!jWu*nF!SV_-
%6CbW;[N/H="n71l4)6HcbM"@[25QS8Buu;++tE%rS!]\`P&<MMW)Zrf9lEk:)OSGi#cZA5*Kh;oQ4griNWn9$<0PchZ7[l+pI6f;
%p'CgBKl.lrXKjt@d4FlZduR$?2@MR"7gmbMD`s1mX/%M'*QU^2=Ss;6EK!A)b\I[.cj[L_j<Q[Y\hr7$]i$'7pNNZY0k5-q?_>FC
%%\nbh=KdtgXpa7%4m=D4nU*%B"eE.C!7.lKo#2Y/#LS>@on3E[^Xr$_P?3X%<A_6p$5]cX6tKar/8k5t+C?]Da?h+2O?M.$]ja,K
%4hD8LiB(aM:7p(S6q9(s85m>nfHO1mJ^?bKIn8/#WT%cM0!JL&`3l/RHb[.t&j!rflB%T@rlhB]F\[$d$u:&ep>CrT,'?/9m+`?B
%YlS_-0`ia#UQEWW`,=Z,jUigQU4FCiR99LSSc"LOhSmXU>%R:]XA&81KLI(IihjB[,9Zi_&:6G8jhrlJDBK[/']XmF768'QF*3%/
%dH_"KXj'V+KHUW*V[L4u,W_>e@J@8]aB_)16/aCB5.)lOXZ)N'oqP[hi::b;6/Pd#(ZZf1SE"Lu,Ye:KeA=b@M.-Tg?_;t1039Mc
%]jr`j2%7!Or^r,SNVB0a#!!uqW`,>HEclE%3gE8h=!s?7>q^dTEciLW%hLlKL0G%,mlUFLIQbq8[K*GcX^O&8drB/#eZR\Ub:UbR
%CLOVirH3k&WUbJR>ek\>k<r>k*k0N)/JM?13j-T\h:FP>%6FL1l;W+M`JN[EP;ct_X)BKCD5.(Fk+`<Rpeq[r9T11O]pF7HA:A!g
%#X\(C4:9&#BX42JS=XfE7C?usfB8L_J>+XGUm7@#&l?c0p$7V.]tV)=WZhan_(S3"41uc=aA3iCTE%B[%:$TZgEc2ABG59^$hdOe
%C`,N+8jtAFV44'0XiT+jamO]56]lajo-Z3:n*Y"arr:oKm$&J&q'Y'8-Sn!daWpFRmf%MR_ESpPk5:Ea'!MRqE4?n>Yu@%DZ+<Pf
%ouR)qF/W<DTPU:4qMN$.oX6>GL=<rJoFNs>UHEMZ@5<g2U?k-r:<OKs\KEO@4%?/]U:*#eX"BE$I9nh]WV,s?n[N(c<"Xa[;0KIN
%$&I)fGTkYIi4<W/G*+p<@3@(8,8\o:G`mDmE^@7gIln8IfE<UG@>:^9*+B?r/ZpQJm+3&=g2lh%pX_)u0%Ga&NJ>Td4*gV.TY7'R
%J<';uF/,FLWBPEA1fQ)mktU>16fhta[t)ck%@W9II*5>HEaGP"3pY+%jP1^gLG9\sQcer\_\c)^L82-t=>Y/q0ZYmi]X^I.-jE.[
%=2r9Dj\Uq(i;R1a?7`'+`5@u3BQ,H1B0@@+%X%:2**eTaK-kVe%UB?/d2Y0>FSD7t2;E45)pQ2LN+SaQC5nSc#_A2*5Q<><?OBFB
%-?+D3PPYp$QFS&h^j/qIP;708#TUB^#%?R*&NJsV9HIl5Lqll'o`0qU+p-rUZ,DT++p-r!b4pqN@C5o<,_72R&/'3^atn&T[X!#B
%"F2Jl%7B&OR/mE7&eR)eJpTns2j_<gStIS'*JM%%g491@<)Pk1]SHEKQg1LMCSL-p9Lr*<0WCF(mrH[l//MnfrKE.[p[5*lYI58B
%5Vkb(RLQfHp*BNdAr4CKS2e6F.`;'9ZiAk\aY<nB''\ErH%/(DQallOQ\-=&cR#_XNq-\4qRHb$EASh=KK_#UiD?J6K<Nrn1E\J4
%2..FOQXS\4Po*qA_dkfc+(b_(Cp612I$-0>4I$!PRK\@D#(`I%ZQePR?6D-i)C?C8BU5uk5VcZGWK$MaZ[SPbAHIA)G6"mSZ[2pb
%OK*fi&<%2*?oU%0J]+CcUPYc]&NFgGN&6\u7,TJke0gEF\sL]dY6tHP?A.r\0k8Fja'LH+d'7'(P/gl?^V5@UAdQ\Xg#=^baWsFd
%'4J?!KEJ]@p:>A[:Ycdkq.?*9+3-`+;2eXBf*+qWFL6#A23P63U)J46nRO0pX6@):+#T.^!S=/D'b?XDXN=g\+nJ`5b2\GK!P#5Q
%(2CA1$0O`4K*?M'"^pa.juqLSGq[dnn@SM*Y%40YX30[>Akm'j0&_`RauX,$Y%o,;ddh"@Y]b)&,<+:DC=uoM`K#<H";>kAG0N<k
%dJs\gocq\[*ugs]^nCE"!D8(m$Gc/j/-bf9.V"dCD"$#7e,\%9P/gn)#,i<'4SFBVIn<`o/:$RclSh!jKTe/Dc=%lh/&C6JN*6s=
%j"uTC*$@5&9+?%/rdK=3EesW$a"ntUOuj])/4],=4JZ4"X%4fNXpB@d_nn[Pe<6.fnHeDd&S]L1:ik_kVqjSE=oe9UOuS%[%tT[Y
%fnLNI<L$UuB_3EdH]q1EH[45Eq#o!*?BpH@F;l:fD##>oKENo,cQ[qTLd"5p_,8]M'G3=n7NS8(-)!1pb@MuHX=cN_ns^A5jJY-X
%%_kd?8&uV60"t<dkNFN2.,\u-#IH1Hlj^FrS,uHN(9mMhU9>mFn]Fr]C80c)#3+5NXaho,`M^jPfb^:!!W+_B>prSm+ZhXR#Sh<-
%p&amS=9+5d24J&#A)_sKUmulrVh5`h;Q&O>\;>L(CehK&=1_(?4'a5`MofDe<+Nm/!%>?p0*(,\SP(f$CTkP]a]7,+-C\\!ZS2N)
%!17.K7s"`!inH!okRT;Q0P!q!7uW.QpDY3k<@$#0JG,=l\V`dY(mp1sh++tYUnpp)I3nF)UC*`TAE01^d;LZ68g<VV&#,Uq-S*H,
%82ec8TGu"oZ!R*jJcc*@k<0P=1'qpPZSsc540etl'+ksGM28[S9.7KfV[_GVdii#L2e<<bBu<r5\@;8:_F_R1)7fA5Yb]Dc0V$$k
%*po^;bbfOWWpiV;LQNh/bSXts(Z^K(WXIqe<O`[e('JBb!#p^K"YatjA2@gMQu$@KW<,2_BWpFH6`18^NEf?rZ#Pe`00(8DLlFbD
%P**;47'^gHVu:g#`4=D9^=+7n1$r"O*5kk<0eHen8852O/-TGWCn+EUCW$^&//s@'nj&.=+u[a<L.]V0$.ub!!?4N@LiF1EKgA0<
%W7UI->WA?^_7F=O,"@TS6Bj_#,Z9rS(Bo11#j\g!Gn9A1_&0^NCg9)0\7%0+s/5Y/`Q:[KisRdq?b"@okCEpZHn4]?;cO6iSS8N"
%.e:?m(TqsO@OD\CQccJ.Ao=CZPXQnD<CE+<HFo&2-Lgct9h/oqWuYQ6LOS8Y:1A;VQ>=CJMF9L_6t?U[Q-/MmO)%7^*YBW;'oB;m
%"tV":]8Eh9<6nEp>-(3S.MCto6Km(c6amn&O]:II6FRe%&Sb$rm4*]f8Zh%kM+P\hbXj?KB,Ob_\^3I.PHU%J?)m-1+sX@VLL`6E
%,*@m0CqSCsXs0!g+rFf9F;=UucFAb9#\5\'GFP/7h#3F@'01rs\^]E9T%bhO'3MfHa]GYfb=%"XSrjk$jBaj'#L#_$HaNW3mhSW!
%I_i]nC9.Z`ZsToDpRC1JmJYbYb3[O09XF\H<]PdK>>*7sC\uAhXab.Q]DOCRo@noSFAj/h'fXthmZP_?N7*39VDf:/<GcV=KqB;3
%c8l\Mq'=N#j7)#K5Rgd[UH%<"\7/JtP53W=<]BS^n*nGU/YG*f*JIS_>Ep+#3XS_hdcf.W"T6;p8Ol'%D+Kej<m[;^UUXu]-gNdT
%fto4U2.^rgf%<1bbfmqr<eaZ+#&9hT`^2!)8VRPqnR@TSgG'&;_e>WL1rjHlVtr5=A_)u>()L.UPjD+a5q]h'.pci"qLD"HM1)"k
%?AtUD)Rd_g=4+f81HT]@=ZduV`kf^%MY;&ZnImjoahUMEG0!u(,UhmYgMq$(X,k>gS^mJD"5[<tHpq,/'NHLaYaD0M&mnOB=3_UH
%\l`ZI@7mP`;q\LUHEOg\SGiO/Ut4Y/?W90c8ThCt%[5bfiL*sF2.1-[^c?_f>Z76e1:28NcWur^\/KO82s6]6!>WD\jR[83#4eEB
%KD3PudJ7i`F$RN(p$#fJ99R>;Sd)n(k0:"-_OgkAR*,^ofMfS+F3]3a/Ge8>Y2-4j0:'c[$]s65)X`Lmfm@`$jCnT[_gdC^Wd`j]
%VU$HY"ae6/9HYnI]UH31&.nhi_2E/ur!D.W)ZJNnqlnD'U]Sk'"fDF6l[[Z75i3mr&#f^OJ)_OfD3U1S/Dr^aKKjYefGn1eo&d2L
%b6EPd5cV.c&/NZY795=4Sj/HKql&-s?WO'e`QR0">%AK/F45o2ap\_6L=1h+)Mh;G4J#?Yim&[']$V`O$bq^5VlhHG5#^V2,m@?8
%l;DbSh.QqEZa:7t"C_t)?@bKBE):_lI5mPJ?YB@U]*dh2iRNo+G]f<Qc`'Y/@dVFb\af0""GlR7=n[(2O3uX"m%.&i:@FehDr^aX
%.!_@i4.G@'9L@4W%/d]$h-W*iFMYB&n9k5c\C'N4Hb_#lZLbEb??(@pF0V#S9\TW3BXh6XH/SAf;^7t&6LirE^hAmq"M(2a0V!PN
%klo'cV`[TEi=_L*1m,bIK*DA[StW6L2bgL:Z(fB']fJ;N$@K+6rl9pC._jL'G![W;4,"[G&\]`A=(fn!).#k*"8%iPcaG'e?qilt
%;(l2>]974Z;m;Y7X#&i43\c643*6C%-0\J]aI02qr%0N;?COi.\b[N?,V5lJETag&GPG]=:[Be7`I)O"ohL]0_Op=Y\[U5(G\Gk6
%ot'rAeB<X7P;'#[XSqti^[io'ZA^M2\#ck*p=J?lqo8O3h>QqI+Z5`=2jS!"p\EsJo6u%uF8K=:XdA@WVq^C\Z-$1ZnZ04-AEg5N
%l^+*qYl_="R3&JLPri;Dm0GR1o`Ah*[_!'.'AISpXl%Rc4KFFeWf(r_@X/mepb_Iu<NLL^V[J"BiRPp9;EFhXq3<S6*OO6`Bhb:E
%i1Pl='W@rskK%m/WYR6K0BTtuh(T0koKS_8]4r$df9beRp;ahR=PYWQ?B2D+pA;so"G5Rj:1p^aG>5#35Z-ku,pKGqA4!iUc54^$
%nE97+]!-D0L;E=#Uh>ROj#Febr+@onCoEgWl`%44pAT%q?$tKi_1KBZC:\ela[t0*qcUCaDS]]KTY;B5\u-36Of%:OFnbP$n^s3=
%qJIEY!\QIqn@jQ#ON.aioQ_EDZW&,=chjs5+3^C\C0mA9YRNNI1DTXQ,o9r.g1Q\Nqk@EdE`OB.i)*j+eL:Z."@<R[<s-Z<Ykr;a
%9D+L"T"FY<?ZHqK]A)lOOu#A]/mRVr<VLt+DFd<ao$1Oth,VPH*k\U5RsB&O41Ec&;UNfhs-7Ycb3!GqZ3XDhgt\2L"Bou/o&]rV
%$g6W>13Q95ZBTJ^%keZ2#Y9L!3SZ$:I)=n"3'DY([`]k>WQa93j#^J_:?K63<'SB5+B@VHjWZgHFhroG-1Wj.V<S]hjXffLSPE;j
%HIk=HQI,COHZrcCb@+E[17&N<8q8ic[PjCj?eoEK$Zr1kF1D?Mh-!Foiao%CIiO3eY=c<.%IV6^j"f#0_mgXGqQ#%MS>X+'j8Q\i
%aYR"8'HE*PoX+DGqORH78S.2;g4ACl"/f6)I#CT6lI:5o.]E2`BOm=n%A.Kn)`L4!:SuRnlFM`E_&a63(7%"bH??KJ0:((@\(;(:
%;+!*bK9sJb3qkQ&*cP:+'J!%7`<+`F2!Z*N<66j8m'eVg,lpa,NRSRE31uRk0XWHq<2NEF?Vd[)qHI&hL8J+*[G3`\aDlDMlXnf9
%PT?;jLuB]/(Us8%"j-Cl]MjY1Y%4\#gMW%nOGV:G1+-&@"!M]fm.)GgWf"rna+_S(kDif;>l*KP^\)E103K;KOVndHlDNui'A[hh
%8C8]<2aRl:n4)^XQ1CZSlGKJL";60\(pFO]Z8,Tbr&ZU6%h9F`RG6=<9VF;;jhHgfNTS^(*S8Iuf0Go>[BF\9H#>q>pO#g+83g-i
%^Bb)P@-OI`$3U&Z^O)Pf_mm->WH[ATgu?)Li;fMW[$#o!Bn_V4ja[FK5*O^N%13.UDt*hA!W[b_Qs-"`%%]"Xbrt@pE92dr"Z'uS
%k$,dN_>08gXR&*&FXd5TBjp.p1:T/8Z\s%Jj.+=IQ`6i8i)krIhnLf+'QT;VMj^Wfm1UV,=r1MdiJR9G:50G1Z6[7iRLDAeSUK3]
%9h-+/*7@B.$2SE1EHaQr(of#.l`uUX+nHpoE*=1[]*gF9GG%mO/T8@bd:?m)a,g5Zcm5@r``.$>!P$1&01;[rSW5e&?>lng4W#R,
%$";]<Mc1<0^T1Eg$7`?BJo(&Bk)>r5<hG<uL]f8LiZR22L]lgWb<s-D&-XbV+::@f@8PnKj<,'fX6Vq^eDj'Pnr\I#Z4uYiTYO]n
%BG:SkpEb=`+/E8dD2O#@Ku;qqqk3rMDX=R6O+Ob4EBH[4?3CQ>4n_0ce)*bF;-PIf!/UioS8*\/E7,Ko!e=pu%gYi6de?0%!c[^"
%]MF9M`qari!'O+hpZc80Bjanp6S/P6`h2Hh`;jlBd.8C,WA#BL#jSe[DlGOMZ)":EoC+%<H%<GE+AQ6uUG/2#/;\C%(4.o06$:Ql
%JcLfJ!0i-/5hph\?&dWM!(<sbp(@Grk>Sam@4q)JnaJEoiH"7!cYpOnqdZAPg":ZoG6&[Iq#I50[DV;a`XYeW]lP#-Xjf@:g^^_R
%O0Lt\_L%4ZeD\s4E)c#iQJE\?*fIX)&-):Z+P[eNN'.HU8:kP<Iu.!YHS"kIh?Tl<hB"cV)B\Cc+&,H$^QFeB'-BVgHLK1`+Gd)!
%Tr8I#'7B].%hjB2n0`hQ\7;3+9.rtD4a[[I,HdV&]c25^_KGMeL[#.`jB"ho74-DXl9MqQ3R2=UA9EFNng_f')jI`V19%1Q-AF`T
%L6t'P]KJa'B?it,)@NBO+c*L&NlFC'e0p2jPbYK[#'pm8-q@d@,S`mtfI07"Td17X%iaVD/<m+t2TjEL.#3VK8RS5;3Ke^@-q@d@
%oIQOF2TjEL.(ur/@A=g%L!klkN3H0>`^38JV-bj+Te2L21TZq&E\nP(ZBKXf-q@d@F=\Z!2TjEL..OHNCm;9Qo9(Ys\"@SjB#mpu
%"&FC%IXY]cZR,QtiV)^=H1gac\*kbkN;gQps,[2Kp6_p`@u@G,+$)Sk]h6P2[UX?$D"Te7NA]Fhb^$bhrn4ltrk*`+^3otT=9Tce
%XKCnC[Dj\+oRh5[@!6>jL*W<WCNu+5"6_`Ro,PT^rso$^5AjE10DOuor3)TQSC,-qJ&<AOnDc/aqU_)cNNJ0\T1WTPpu-D=P"N$S
%fp65bZ6Ds8R&4"4eb#HS@o%Ik>usQ9_q$A-;j=Q-Pcia08FQ5/KDZR]pW(cRX>0G4jB'K)=9,oPI"D@n2Bk\t.>K![RU%\cO9BD'
%O;-A!=_,;f!<8>J4'`3&(BNIKL`i*T(^VBWHlEYCgOrVe\Tk:\hl3nNg3];X!'nn#"A,knYj&n8IAa'i[c,!m?AZDFFo%9Y8DYlE
%GFFDq&bbD&&q(!t+C]g!/&?G@X@@X$^CkrbN`5D3&[W-8)ARf(89cVI65#?9K;<;]+gGl.+E;W=5[rFY)Pm\4@k/eDR+O;&.C\VK
%#Q4(a)dIIs/E`:;=ur0?3Htm"MoN1;6W2/-OOuI#81Go;+oon=nTPm7TVCnF=5r]$9c808"r9TJCSdhi55)1EXNDjA#du=#\h9Bd
%N#=g5T)ckd<+$f>6uCG:@Hb.rbE@_?AQ:4Z2Dd-6Rp<]n6qgVOJ]L+T,YJMs?s6g5A3dV<WpmJD)k(;nTGStRl8]Ei"Z%1cLMJ-$
%,YaIJ6e+jt2obWT_!l3AkBtntcju$K%LA+sFs)37k8NeP8M1#YZu(%qaJoS1W?kc(%:SItU)4)@J:&<LU]B[rZ=?jA'.'WRRIJ#!
%'d2Wu?D@Y4Q4HEmm1S>%#_QglPD5"HJrVD*JDFn[+t.tjX4KlF/XZ?A5?o/(A,u&U+R$+I_H,Sb![oaLc\H4SSJ#=aBd:DE1Qqb'
%6WVTb]aTnU6TaGeN)-0LH:bOR8^\$t19_,gqG_UK.?NWSZ;H5R-jDAV5T0]2P34MR6RkY_lnq^#/GRZj6FTRqf!@$D"W\ukj^0G_
%h13'%.a/ld&\_I7NbFsX(l-4-N4.n'_K?QDc>1;e=X=q$d8gZS2_EZ$'&6kKEm'bZ'drf&C81meJ?>I_Y^i0#V?2B$bIBK]44J@S
%<s^c2FQu.h!I'j*"^s):XpJa?fsjg(eKi)&LSC(kV>!Nj(<h01+0LT\1^mF&Z5%U>-5_R@Mq*/<9FL3B_[6X&_^ma0Id9@%d4ert
%5YtHT!HP:Cmf:!N?Buq.<`jTO7D=`k<#C@fBIY!NGmnWt,h7ue9/6dXf77hu*'G]"YW%`B#@T;<@+MPXiKYZk5a?kKMkJ-F\DAIh
%=toQaI^h9Y+2Gn*?u9:sbq[%*i6IGB'5/TSROO[9dfTF*Yei]b0[#HOhtl7\C,0%X80&.>Kb8rRBB^^J%rAO!;&c9@)1bMZ8TkE9
%6l;SV2^^]f`lS^.G>3Yo8F:gB9T/3N9XJ=QWKuN@.C(OW!e[h*O+_;bbQn%(g1Veb#6*!`N'n*s$,M"V(>'.Q'c%.;=`u'=f8$FO
%aSOl'7Ze_[!_"kd9uTQ^S!YKBaV\i-k_2WQiD!rg5h0]^#`;L<S]`j?.;K-orAb]Un;M<?'jHu7h%1$JCD!-Gp;/]78sTWo"#^k?
%@Z:]6!V_Z1F"ZDUfF*HF"pU,dFr:2/Ke/f%gI/lq%KDk0^boM9.NDD1b,U?.TqD^N%=(keO9X&;ScKLfU]X=9RKjM;#!UcFJj!<l
%*ZkO6!%)O!f##[Dka!ElZ2b)6;*b-=P#3e7pFe`>Y!mRffF-:6ek/6NAJu]7!nOl$(qAEVI@t:R9][V=[_R>oN:9Y'XE#QMZSZ4k
%J/PeX-NtQNkYg?%?n!MU6t+.PhF=f%Ri/Uu^cdD9*g1Ci+F%iW@(pR\.!@k'&O92c8l25q%"i==F4?Cl,;D$5)i8GgFH;n%gB.6Y
%TnEZeU6HTcT4PjHP<]i&%8$;L`N&HW;,W&F4$(`=gokFlpsl-,Om+U]^E`#pW:)!%EG4TFN@-DY[\L`N?TgIE3)QsOhe=K*LgCZ6
%-=Fe"l0iGJl^648E,?X:IZU3i!!)8X.<n;S^D)Z\aUDrc'\fAU"SUB@,=R8,$37$)*(I1E'$<pL:k9CDrD]O[jW;t$M\4Vhn-iK'
%1AMZ$Kd(OSW1o#$rKNHOUg@mZ*<cQ0Ns>[E.ik5F44LWjTrTni=)8fW8S*hu!_>)IKbQn+oCesOqGDS;.(t(o?9_&c+/RSMdd'Ef
%oqV0U;0r0h]mc2P5>&+$V:UdVlb>aM79i\nn3<m?"U&@T,Sc#VH-CCL4_UY<<V0B6;oa]l-kT`Ol3(8P'K4$2'8;F^b5R'T,<?s:
%eH$h75SR2+beCq5L[)MdelrK<)>VES_ho4SKdVSuhK1l*W9/s)6.[JT6F(1=od&35LtIjspb3.M=+E!BOFSL]*VW^T$/ji'!Y:/'
%M$I1C_?9-,<b:=OJc!U1K>rB%j$@>.M*X8.?Nh"X@..14OgrSMLk,<ilau7>h">Ud(;/WL$[dR1D$7ShJhcu_7,T#cC'L_S'=8?:
%ir"7*NDmn*g'Ah3%_r,Gr[ZB?XP^2e!8g6KM=p`\6/pXT+?9qI+opIM_0;F,Y5j*GN<k^-!%\30]b5bV2unlNo3R9fEu]]6)p*RU
%ps+!^(A-e)&q/q&!/nS_?4">e<>:&Rr)]W]=MJ2T!5=H63HRXl7c:?c#Ej=**$ehT%uG-:!Jq_ZKE13dTdMPLd!_2R>ap26^oDJ9
%p2VhKg5'%+,s-L8L_bte,DN!Br?8F_`/mr`2<aRlfJX=:jp]3EDFp_MB\h4Xrkh!,:hHqBag?mEWEQB$;:*;mX7Bd\\m^_,PJZTM
%)+\%8n7Ps16U(pQ52`-UN!b.Y$.m%'Q#M=5Ak>;i<(!\.%mr3H&rJIfN@Llkk9n0U^eS!rn5)*OL54/pAV^C/R)+lh78m0/o*a9V
%g2U7'=a`OF0;2k0"/<kOfQ>'>\;"n^YQ7>r71(!="9[Ud0[mje\2I<GDLl2k^qu';7RHb9r$3814Z@fCS3n7I:I!p(,r3`L.To-H
%5;&aL)_ue6QlrO@Cba_t&eW*B0a3qc>7^(B%0g\0iGbJ=VM6Ff+:P+NbS3Gc24td"5lj!rkWKQ]"Z%7eLMJ-$'\qHKWi0Ua&<'!a
%.h)XQ@9R&'**,$I*+laDoNRr'L]'#W\>[R2DAb_Z/\Jha<Xr>g:oP?o,H:eX-ZIZ<(cm#l<&du'H^"L;/?@WS,[:_2h7J7sEqfbC
%7Y:Al?kO)4BnH00p)N)%Nr#HA/.ub('@e+&=`4B-Ts7*^cpeOaE-*umAb\XCA<U+]:aZl<,V!V:br:lSHjc;k*!%00[LG`#,$[&;
%7>;bTpIMe0)S7j1D:J%Z(Q:`g*tlD;'_\I3Yei]b0[#HOhtg10$:m8bfYij/!eq`=Woa%'X?IV;Z\`F1fesPWUK*4LWMAD`Q(^AI
%:+[!P:I]K:@TYZG+)rt7ZY&Z7E%O&W4PthBL\'P6<9jBd341l0%i,A);Jm>"eqMgW['7FR&9h/,cSo;*iOTq(@]C3=:Y1l9)O,(=
%Zdn0A/sV28L"3G[0lS^(SNPe_eV&#(J.iJj*Qs&VYV!)O&3>%I*'UoAoN;m6EgFQn02NDt&#X1rH4mW:Xbl+2Yp@e[bq[J+R=,9]
%"$((g!et9%W.C2#c-!K)-C1.jNp!(n%*Y:fiEJ#-U"0^N%1E_)]kJpmXBF6o58(jdi=>C[B\\!f(=3SI'cm^;=`u'=f*>@h[DMo[
%5YUr"lW5BG@u%ac?oG6q%7u,qCV-?=I8`2,R&uOR"O,k1$a`?i,m3QTA?078#i_Np-!_$!ka@P=>*uB5P+[d8X<V%6[L1doFaaUW
%`6cCC;>bgo(=suV.r6.*AsneR?Q[Up=JhAg6=lQmI9E;%4SI=#H[UX5Ag.4U=OSOKKH#l/_""uFZFYc:IeDp/@0F](mnE#./,i:P
%$kOU(>@u=fY\c^`*!?7@:&KkuXHbIXE"U`-'Sb>>NN;mcJJUUmCb^>\3K#JNm*T+#$ETa$MlHuu#t+or!JMPj#a3C]VMH^R)2c:?
%Kl'1#;0QL^!6=(FrXQVjIoKE4Wi@.@eW6`q7of5WWqoRmrMZ`F<)l/_WZP6kO/hJ8<V<,eqGC8k;lZhuI=X7'D5<o2\g`kl#f#J7
%H3/s(_Io'6SBDZ+j%RUlZ<jf5j(;qnXDS+@O]N<b.ZdIg6GrS"((JO/*PdUFf7koHap4pWl7_M`9%E_WY<K+j#[Br+RReN%S-mK\
%Q/Obf1FNT*2Llte%j$TZ-_NV])83eSYbK,+=6"_tHFW4NY;jT)2dnukJX`lON'036\-XZ\$4)3,0En+j^0@]-YG*b#hu`pdiF#n<
%?i^9-Q0:<\pK%KJD^0kPqYl?pnSL[U*%,,+!:Q3243mS%!'nn#"NaM$MZA"*7,L""^nU;1=/,.'-X_E/q+lY_a7]EHFQC1LFQ@cJ
%MSA[g$,1JoIg+a*Y=.9Q:;7tQHlE*^;3;RPKp`pDGYC4F,6fDG)Faj$QWXQ.*YR4^:o07'OL-d;Ene1/GfO3h*B`RJ(q,EC=t4lo
%M\_;eogOsQ.k5D@qb$dW@eCfDgI;TCm@UhSCEnQjW+S.BRd^66&Qjpgq'VRE'F.'Y=,^H\a,E;Bn9^TNOk=@O#S>+q"/rHri0QLL
%hk3Uh0VKV_kd"[M]'=bG>d<(j0></"A4@-CU)H$'-T)f8`q9]0MP"HG&WN/l!T!7OAYJT1@g3R"D&NqaKgV.\lNF4=J4%7G=rIso
%[?6:Ya.i.48qRD%[N*L[Ta/P+N01FUh%:9NX63ZZPTkhK8j!g20'TeYKYib&Do'X&APKTB-;m0%;NVE_\`62SRm\(R6/h"E[W$g\
%6Wi<@YaFNBdVjPI<3dPPT2[M8J-t&Le1mUs,>lR!'=24aW""i^2hQirq`5Dp3G>cC\I^H"0r0Q_>+i/d#qL'":uniI82(IT"Z$t]
%LMMMhHpA>NqX>#M2KL+j9"s"V2FR.F>0uKr+A+U)/5!HMoN;s0%lB^7M;A6V$09j>beD[<L/,P:_e2Kk(i$ssTR*t!c/PEF%,'Z2
%_R34M'?IYFR!m;?"JjoDg#;)2[_R>oXRK%Gb]4rm[m"=;iVLLk-7Kif,)dsG%-s,@Pnh#Fd.2#sTeIcc68PTmU$PbNeq(mF^9m-i
%L9*2"I;IAq'[0S8I0#MAh7G>CL#LekJld7X;imYV/USKDL9.Y(RUE]H'Fn^080[Otm3<D:,`n][OhiR[9P%<\fiBedJ`DV%DLtK7
%^mIrb+#9?9(1p,FoS<\R"1(mM+IEAb</[FSZLnKRi#U3d*,G^h0%:4ADBb>k#oEY@Z#l^$jb<fJ!ps87&8j+:KBj54&0;+8;f3S'
%eqKJ>6#ahF_!n,IcQSiThK(KC`XZ!<Yb;+>&sa8-Kni,bg7-(Dd6mf#,mR@WnK08-;qS5D4?Q:?l+GA9Op5FI/X<E4TIVmA3V^K#
%5=^gj'\Q82C:GlbQupTgGa3Oj&_pJn;D5bD_PGT]dZ6"(hVG<L*5h$NJ5dGQ(5/B%8\Kr2-u`r/TR]E\oc=Fk6KXGWnSP(P2\A7_
%i"Er<\@BYb/Zr#78pDa(>/S8A[k_Lm5R7Wu3Y\&np]PFN<X[W:D(_3b1rQPrRME9dE%PJ?RMiR6#bW#C)j4SS>RQQj'!u*"/\ssp
%N_M2LNp.3bKn[BRQ5rQSoso5c:LV3gRAG#NF+kbtMA@N@Wh_Dg8tgQVmKNHPaC4WapfKl"-0Wp*0!gefI3C=UL[>F-7#5)._doB<
%J!r'fj$'<<iOT_3P5(=DJ.VIP@^[sm$(@Y&2T_/]%5J`M"4`!#3#`Vc/cPh_&ieH.V@X,3"h@L5`H;MH;M_4c5Z,FHZ!\h^$YDTT
%&(a9(!RbgIF2WQ(0G7p_C`eOB5"pn#PQ33R'FqJ)8G]G!:&&G]qT>>=h0jj?D&A).CR4'QQ/SJ^;sUsf.>hTqW3@p/O/Bo:(&h^.
%m!QNOk;d0up>.JMCVDHY0me6LAR?QVG*`'H'Ko^)6?Ei6X&NW;FVB";oIH,"+M4*.<hPW:dTd`lUfmes27Sl:E"3Km)+GB`PZ'7V
%0fi;00UNV05Eui?"]49CU@]K5f7KD$p;=;cJHGq+!L"[8p*mgKZr4]m65@b#Bn?5%=Q,olR,pfcDgec[&oX6F;uq25'fbT2=S="T
%UP2,I)9ui=IfYrH8M@B="G_DV=bh-3BCd3\j@o(!3mX3;,>@9[&sb$NI7[kp`#kqrau+cREZ]@iiWda?hdf_@lP]8:Y_NZ\KjCKH
%NfHBo8dW].1?MQB4^Vrk,O@CWOc2=ij@]A(<N79oJH:l<`mSkup:l.$;X3'Sf0XM2C]9T.LF%#U>K$qBp\^-+(>'-Z>n.3s12\@7
%pa1n"ZijI`11a*ED^\Th<We%QWnK]RRW"spo/)tFTZRJEJhf4A^aLd'#&Y#VT_Af[E_G"@A-HO(T=U^"@5'9@Z6Z&!TM3aaX3l#$
%'KrOd&WDB[_9N;_iS&fa$QIbuaVBj7YTm#);F'39$0K.6^j]Cen5)+2F!KqY5&S:WR8kZ#Qc^2kABF,ck0_iq+jUi7,fO/STEue+
%3nqe=l>2b+pXQ$+,+*BH,_@J'&Gj\LiFR]1d,qbMa6,R1FKU<O#d:c_0d15HmhD#k8WeDN@I'P[3"^H&/,C9UA5*%hAVsTG+Z\sP
%aKr+2(/AU4ma\)M3/3PI!l/86#g%6pPU(lW"\6aLE3C<'!@/ZV-j%3FQ4u[&Hc^:S1"KFEG*k[#i3K''oN\-Z'XPi()H5ffZ!I7>
%W\JWX'\g+C'B,:^p0Mg\@k6'OPZ[/In-mn*Jo*juBhj.?!)n)&(4Bgo1FQ+^3@[L%iPp<:kbo^4Ld3IHoGrp?FaRdPfkH.8lW2rc
%USF1LoU\f.bCL^JV*"9'Cj)TO+r2(sr).T`,e-nYW(@L2Z,i=a:m2qD_+U5f;t)7FPU6BY$9[i/b4s?>+q6`_5V&<aFJPE-"j4UN
%BbQqM<RJu;@Xei*Z-[\G:u-5Ka1jA2j(/&9\P.j-a(u^SE?nEE&&l(0JrW=W.m^-\F=^6W0;"'0JFHRK5KQ3mpOq$df>Gt+B*"ZV
%<p7`sj2LQK`UW!-n`.UYj2LQK`UW!-n`.UYj2LQK`UW!-n`.UYj2LQK`UW!-n`.UYj2LQK`UW!-n`.UYj2LQK`UW!-n`.UYj2LQK
%`?Fs7n;Ne]o.OV'N3ILip9JmgY?6=9DO+eY->Bco[n(#m@kV>js2sCSc#TaQh).t`G0rg2?.=@uH^7;[Ibs?=He-@GKBQeuK;d^n
%m!G')HdoUsOo9-lU5i]j&X6!W4SZ?]NAZJ]RRnTJR7[?Y)K/$16Tn%HHAI[I<"-4U.i+d>a.t_UA<V0,dFa-sZod=aitNgJF<8)2
%)'fePa`7/cQGr%.\P,CZ(bmHMN*iP"0lC_O239?ZdaZd_<uOfhmJ=m,?^\'$M8fQ)BFEM<,s+:6(141CF^CKk]KE)#;rWUmkOY?f
%?TF]D5iUI*pss\m1@!dHS%,:r3V(0C]un_nJ*GMIV:W9Nop21:Oh^PDJb,47iEge&DfMtnV0<5JE5gL1#cp"T;_,*3>UD(Q`Ecs>
%0/Rg)nCEr9mHMj#]$:rM`f_nAh#>pg=9T1U\at8s]DI!I101&t>s@'s4l>&o(]:CpQ%+4r]`6ab>8\sOGE(e3qod%WbE)P`4*WfU
%8s,<eP;:-iZ==.:$$st5]a*TPHS>]k5oSKQI^3Jja>7WAs1H-ML9"N69iOnke0bsK3S8H$D,t'aABrAXpWqFhp#l:soB#ka@@ltE
%q0V8p^/A+IJ%j0fQ$8khY?u0bIso&kN1;j,kP!N"bLbK@Ab#?ek4/.n*>"Egl11Je\%hM-mH*Aq#8dBQID5UV6bfnQIoBEBi(e9T
%$K&F?qtta:IRor$r;5lJcV*W4nU1)p$j6agT\jArci`!LQCHUj,qSeGpapnTK/P1V^F\dVMP#TV`qB#VP<0oMF80,B)`2M\Em'I<
%D.M+]<#)3XnS0jSroYml<o\paD%JV`%/b$Lm)Eo-/!/h1!tIJ!#c8e]#5f9n]FOhT0Q#Lo5X5<(#dnCA7"TW;#0`sH)`I+%$,fjX
%A1\h1N@[/%iS`.pDKWVA:r-P>\q0\bZoM6sCg->+KK<g\!Rd/=A4BX">%JV@5XuHC\/Gch9W*4Dmi<--UFd/fW0+5SP&2p*1mPF%
%9GJls)*/8.R0pB"6/X(+^BrmC%*&?C*a,4V)kCSg1+Wt^%CC6qnlT;,Z=u?/cmqN79Nb<EZ/C9]92TC23*%0H!=C[Cl3;)^)&PA-
%@h&([OU2&KTrUG%8N.D9VN0L[\qtYFZnUGrOCrZa1G#sV"/`/6-+N5K?pM7J',_'L>GhOC9`l`<PNs)D^&Ua6A4_N@VJU/-`W5]$
%J&W>6JGB:"@4,0EEZA7rW87W==4T+(F/T8&"Z,&8)YPDt^j=G6phah8/[R5a("$rh^c"/^n_;\#B`fAA)[Z0Wb#i>a[UkRh>-J*K
%/V(:^=>[sgZRhfe+'ZPTck!dNFLi2Lgn=e"h3H8dE*!%:WR,KraYLthDH_!Cr)L,^:cM:](;2VU1\FsG"D;9;75A^)enHJ*-`1s>
%&)`aCAI1dGr.Mdp;^L\RJ_MphS2E!@WaSi>M.+4M!NulD:BmO5Ch(>5,aLn5*oKZ-G/cFg]366"ZuWbbp`1k;^GCIm%Et'irs==B
%V>l3G.f\FYqq#HGH`kWoh109;V;.8L>IpsEDG<7:.W&W5n/qY\`5CuL:s$Q8DG<+52U.?p!h]\b"h,iXA!448.Z=JL@]PMO(M\R]
%34)Q0=:-:hK[dhB'5[mWD1S8_d#FjC5tYhk:,LZ)`WMGHOCm^M>LSa$##T(R=U/gRk%)S+nCE7c#B+6@$^^G%bpqIa5BchQK_s(P
%WV;Hc8iUGi.!ta?P]^)PP$/p_^!LVKGY&/.10?KS8PfqB2ba5%Ug+?cJ0$"B&RCjP"OU[njDrg_)%e0M022gn9fpc<%0t'^R^2>]
%0bdkZ98BRs(^nS*/i22_[OJ:4IqS&^?^M&0-^d%0Xub)^R%U+9!e4haUS*G_o\B<#F(_LdmN`/L*/UhNr1d*sE8X'9>>h=YpX)7+
%X.i6#Qk`N:"O79^8eG?t&UjTk\#'dB:%44lqUk(rIrpp[eOKT&-tB=(^>n)JVYa6pko.'LT[n(VCa.Tt,tUO[+.\,-5n:>#<)"]V
%/6)pha_:h^);Vh;.fN"mWiL0^0TZR7\7Fi?)]9/JRTa.(GRourO"nX1U;Pi;0Mer#A\a9+Ur]FS;3_-%TT(5'9dI@r]K+@dO"j*[
%U1jl%$[71klZgN,FsL70"3.."2R][kf,ubTU=OuU=?P!!2XEN&%2s)WNIeR8O1rXOiu.fA7h"N/et`A*$-:N%!-/5.%<JfW;\CX*
%`*c%kCT<R>.EuN+5`)_Ks.Xn;$>hUmd3[j(AK/-$i'\#6]UD7@!-Ds3JS@D/"CR7hl_hA&JX8c`TbM;CK*uNi_f=Yb9Ge4)Wej>D
%N#=>rKtss9e1.+A#:_B;3)m\!L>*Q6NKHaEf'J&G79Cb^-:3!H'X-CZMrdKg\g5>:W2bt9dhALFis=*AUVK&+3'KfSA:FmfBnY5s
%0M:(:-.Nm>TT*E7Rt,T*.tkVcZ:(l-(a0A,VQO#6*ZO#SFd!6e,%(fuOiOmRU&e:K"bbmBS2NFZ1o2smU)SjIcfIo-;fV)9R5\\<
%FV*I^JnD*Z7SjAdfjW!L0?&_WB`]&<rJt?NPlHP:b5W_KpC61NPIu<^l4V7eWoWM\]LjI_i#?Kb7ffd'P%hJn'sn9QgH`ibR[%#B
%C"Knb\0g^8[#kXUE8!Fo(s_>`p5$OI`L.B99MP1VUBOMI'[on22C.e;S!2=`0ue0%2"(ErZ0iOq9e;5*OA/BThA1pmW6hbWhh;gh
%0OPHsYp^Ss0X)4C!tMce8B#F>%fk4BBo*Tf@Q^Dmn;+nC`L9b62$#_YH[<aFXZ/u]=[I%)U(r_+c`!4ThqJDBLJ80$)'6+XC(#dM
%&7$/[r#YHI(sMN88:=*<+98!LMN9`9:;ESRP&mUL/)Gb<hf-NQK6`>3.H&EELFWGe(d[6@C.\if7Y+k2:WdDC(h5\'?Z?KV^qb5S
%NKK_e`NH_)Q9uSQ+'sZZ(:>i>g-CA#-ePXn*#3Vs#.QtLP=_,FNu6/$*-(LVT&RsCYa0eX63W<u.)rDKb_[%*Flt#Rmtfs#pToJO
%&[j%^5JqC5+(559s$;Y9/p21ii2M<Hr]S1V&pWnkh!HfoID8RP4K)bdj%P]1Vq;(/i00!L]a`geCsd%V/n.c"_'^sF&%a8P\ZGYp
%ZPdjlH1#Y+Uu![T^aDcK/l?^e[tA[':P(KZjB]]Q8;+o,?fbGtP-7>?il4CW]89"O@t\kjs7Dk\f:H@&^,jO[Fha>-`gW<'*)'^W
%BSg+rH8o)'1b,"qh]Cgb@JY#^:PAUq%4VpkOK&7)T!4ou"PFE4\V>K@;9t(Z4(Jmh/^s.J'+;.0("KU+?t.M,,d*',&k(&i\B#F!
%0b6I)F3"HuXXokf#jdjcg\_`.XnGt+fUD"cX@aUKl6GnGrq6LijR^SKT.-EQm..Dur^ST5XH`AWrQE6E:XSE:g\aiL5,6U\joD1T
%'Ktjcri`*#$!>:$OuSmR)(oiM+dHaml0%HsS(5]3hnBnbWD$pqo'U\arUM"10Qm,0q1!;&/t\bUYd^h*B'esap&k0'*W,X'nh5@l
%T=E-%RJ')tp&>"JHfV^~>
%AI9_PrivateDataEnd
