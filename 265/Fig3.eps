%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Fig3.pdf
%%Creator: Adobe Acrobat 9.3.0
%%For: pmjacobs
%%CreationDate: 6/24/17, 4:45 PM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 739 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-02-02T19:42:59Z"
   xmp:CreatorTool="Preview"
   xmp:ModifyDate="2017-02-02T19:42:59Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11.6 Quartz PDFContext"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">JER.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 660 mo
612 660 li
612 132 li
0 132 li
cp
clp
.0647619 129.924 mo
612 129.924 li
612 659.935 li
.0647619 659.935 li
cp
false sop
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
122.508 182.921 mo
501.905 182.921 li
501.905 553.952 li
122.508 553.952 li
cp
f
.809524 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
122.508 182.921 mo
501.905 182.921 li
501.905 553.952 li
122.508 553.952 li
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
122.508 182.921 mo
501.905 182.921 li
501.905 553.952 li
122.508 553.952 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
122.508 182.921 mo
501.905 182.921 li
501.905 553.952 li
122.508 553.952 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1.61905 lw
128.444 528.587 mo
128.444 528.048 li
@
128.758 528.274 mo
128.758 528.125 128.637 528.004 128.488 528.004 cv
128.339 528.004 128.218 528.125 128.218 528.274 cv
128.218 528.423 128.339 528.544 128.488 528.544 cv
128.637 528.544 128.758 528.423 128.758 528.274 cv
.75021 .679683 .670222 .90164 cmyk
ef
130.063 508.349 mo
130.063 507.54 li
1 /0 /CSD get_res sepcs
1 sep
@
130.312 507.81 mo
130.312 507.661 130.191 507.54 130.042 507.54 cv
129.893 507.54 129.772 507.661 129.772 507.81 cv
129.772 507.958 129.893 508.079 130.042 508.079 cv
130.191 508.079 130.312 507.958 130.312 507.81 cv
.75021 .679683 .670222 .90164 cmyk
ef
131.683 502.143 mo
131.683 501.333 li
1 /0 /CSD get_res sepcs
1 sep
@
131.996 501.592 mo
131.996 501.443 131.875 501.323 131.726 501.323 cv
131.577 501.323 131.456 501.443 131.456 501.592 cv
131.456 501.741 131.577 501.862 131.726 501.862 cv
131.875 501.862 131.996 501.741 131.996 501.592 cv
.75021 .679683 .670222 .90164 cmyk
ef
133.302 496.746 mo
133.302 495.667 li
1 /0 /CSD get_res sepcs
1 sep
@
133.55 496.217 mo
133.55 496.068 133.429 495.947 133.28 495.947 cv
133.131 495.947 133.01 496.068 133.01 496.217 cv
133.01 496.366 133.131 496.487 133.28 496.487 cv
133.429 496.487 133.55 496.366 133.55 496.217 cv
.75021 .679683 .670222 .90164 cmyk
ef
135.19 492.968 mo
135.19 491.889 li
1 /0 /CSD get_res sepcs
1 sep
@
135.493 492.396 mo
135.493 492.247 135.372 492.126 135.223 492.126 cv
135.074 492.126 134.953 492.247 134.953 492.396 cv
134.953 492.545 135.074 492.666 135.223 492.666 cv
135.372 492.666 135.493 492.545 135.493 492.396 cv
.75021 .679683 .670222 .90164 cmyk
ef
136.81 489.46 mo
136.81 488.381 li
1 /0 /CSD get_res sepcs
1 sep
@
137.047 488.899 mo
137.047 488.75 136.926 488.629 136.777 488.629 cv
136.628 488.629 136.507 488.75 136.507 488.899 cv
136.507 489.048 136.628 489.169 136.777 489.169 cv
136.926 489.169 137.047 489.048 137.047 488.899 cv
.75021 .679683 .670222 .90164 cmyk
ef
138.429 485.413 mo
138.429 484.333 li
1 /0 /CSD get_res sepcs
1 sep
@
138.731 484.884 mo
138.731 484.735 138.61 484.614 138.461 484.614 cv
138.312 484.614 138.191 484.735 138.191 484.884 cv
138.191 485.033 138.312 485.154 138.461 485.154 cv
138.61 485.154 138.731 485.033 138.731 484.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
140.048 482.984 mo
140.048 481.905 li
1 /0 /CSD get_res sepcs
1 sep
@
140.285 482.423 mo
140.285 482.274 140.164 482.153 140.015 482.153 cv
139.866 482.153 139.745 482.274 139.745 482.423 cv
139.745 482.572 139.866 482.693 140.015 482.693 cv
140.164 482.693 140.285 482.572 140.285 482.423 cv
.75021 .679683 .670222 .90164 cmyk
ef
141.936 480.286 mo
141.936 479.206 li
1 /0 /CSD get_res sepcs
1 sep
@
142.228 479.703 mo
142.228 479.554 142.107 479.433 141.958 479.433 cv
141.809 479.433 141.688 479.554 141.688 479.703 cv
141.688 479.852 141.809 479.973 141.958 479.973 cv
142.107 479.973 142.228 479.852 142.228 479.703 cv
.75021 .679683 .670222 .90164 cmyk
ef
143.556 477.317 mo
143.556 476.238 li
1 /0 /CSD get_res sepcs
1 sep
@
143.782 476.789 mo
143.782 476.64 143.661 476.519 143.512 476.519 cv
143.363 476.519 143.242 476.64 143.242 476.789 cv
143.242 476.938 143.363 477.058 143.512 477.058 cv
143.661 477.058 143.782 476.938 143.782 476.789 cv
.75021 .679683 .670222 .90164 cmyk
ef
145.175 475.159 mo
145.175 474.079 li
1 /0 /CSD get_res sepcs
1 sep
@
145.466 474.651 mo
145.466 474.503 145.345 474.382 145.196 474.382 cv
145.047 474.382 144.926 474.503 144.926 474.651 cv
144.926 474.8 145.047 474.921 145.196 474.921 cv
145.345 474.921 145.466 474.8 145.466 474.651 cv
.75021 .679683 .670222 .90164 cmyk
ef
147.063 471.111 mo
147.063 470.032 li
1 /0 /CSD get_res sepcs
1 sep
@
147.279 470.571 mo
147.279 470.422 147.158 470.302 147.01 470.302 cv
146.861 470.302 146.74 470.422 146.74 470.571 cv
146.74 470.72 146.861 470.841 147.01 470.841 cv
147.158 470.841 147.279 470.72 147.279 470.571 cv
.75021 .679683 .670222 .90164 cmyk
ef
148.683 468.683 mo
148.683 467.603 li
1 /0 /CSD get_res sepcs
1 sep
@
148.963 468.175 mo
148.963 468.026 148.842 467.905 148.693 467.905 cv
148.544 467.905 148.423 468.026 148.423 468.175 cv
148.423 468.324 148.544 468.445 148.693 468.445 cv
148.842 468.445 148.963 468.324 148.963 468.175 cv
.75021 .679683 .670222 .90164 cmyk
ef
150.302 467.064 mo
150.302 465.714 li
1 /0 /CSD get_res sepcs
1 sep
@
150.518 466.232 mo
150.518 466.083 150.397 465.962 150.248 465.962 cv
150.099 465.962 149.978 466.083 149.978 466.232 cv
149.978 466.381 150.099 466.502 150.248 466.502 cv
150.397 466.502 150.518 466.381 150.518 466.232 cv
.75021 .679683 .670222 .90164 cmyk
ef
151.921 464.365 mo
151.921 463.286 li
1 /0 /CSD get_res sepcs
1 sep
@
152.201 463.836 mo
152.201 463.687 152.08 463.566 151.931 463.566 cv
151.783 463.566 151.662 463.687 151.662 463.836 cv
151.662 463.985 151.783 464.106 151.931 464.106 cv
152.08 464.106 152.201 463.985 152.201 463.836 cv
.75021 .679683 .670222 .90164 cmyk
ef
153.81 458.968 mo
153.81 457.889 li
1 /0 /CSD get_res sepcs
1 sep
@
154.079 458.461 mo
154.079 458.312 153.958 458.191 153.809 458.191 cv
153.661 458.191 153.54 458.312 153.54 458.461 cv
153.54 458.61 153.661 458.731 153.809 458.731 cv
153.958 458.731 154.079 458.61 154.079 458.461 cv
.75021 .679683 .670222 .90164 cmyk
ef
155.429 420.111 mo
155.429 418.762 li
1 /0 /CSD get_res sepcs
1 sep
@
155.698 419.604 mo
155.698 419.455 155.577 419.334 155.429 419.334 cv
155.28 419.334 155.159 419.455 155.159 419.604 cv
155.159 419.753 155.28 419.874 155.429 419.874 cv
155.577 419.874 155.698 419.753 155.698 419.604 cv
.75021 .679683 .670222 .90164 cmyk
ef
157.048 288.429 mo
157.048 286.54 li
1 /0 /CSD get_res sepcs
1 sep
@
157.318 287.36 mo
157.318 287.211 157.197 287.09 157.048 287.09 cv
156.899 287.09 156.778 287.211 156.778 287.36 cv
156.778 287.509 156.899 287.63 157.048 287.63 cv
157.197 287.63 157.318 287.509 157.318 287.36 cv
.75021 .679683 .670222 .90164 cmyk
ef
158.667 270.349 mo
158.667 268.46 li
1 /0 /CSD get_res sepcs
1 sep
@
158.936 269.55 mo
158.936 269.401 158.816 269.281 158.667 269.281 cv
158.518 269.281 158.397 269.401 158.397 269.55 cv
158.397 269.699 158.518 269.82 158.667 269.82 cv
158.816 269.82 158.936 269.699 158.936 269.55 cv
.75021 .679683 .670222 .90164 cmyk
ef
160.556 292.746 mo
160.556 290.857 li
1 /0 /CSD get_res sepcs
1 sep
@
160.815 291.634 mo
160.815 291.485 160.694 291.364 160.545 291.364 cv
160.396 291.364 160.275 291.485 160.275 291.634 cv
160.275 291.783 160.396 291.904 160.545 291.904 cv
160.694 291.904 160.815 291.783 160.815 291.634 cv
.75021 .679683 .670222 .90164 cmyk
ef
162.175 321.349 mo
162.175 319.46 li
1 /0 /CSD get_res sepcs
1 sep
@
162.434 320.518 mo
162.434 320.369 162.313 320.248 162.164 320.248 cv
162.015 320.248 161.894 320.369 161.894 320.518 cv
161.894 320.667 162.015 320.788 162.164 320.788 cv
162.313 320.788 162.434 320.667 162.434 320.518 cv
.75021 .679683 .670222 .90164 cmyk
ef
163.794 383.413 mo
163.794 381.794 li
1 /0 /CSD get_res sepcs
1 sep
@
164.053 382.56 mo
164.053 382.411 163.932 382.29 163.783 382.29 cv
163.634 382.29 163.513 382.411 163.513 382.56 cv
163.513 382.709 163.634 382.83 163.783 382.83 cv
163.932 382.83 164.053 382.709 164.053 382.56 cv
.75021 .679683 .670222 .90164 cmyk
ef
165.683 501.064 mo
165.683 499.984 li
1 /0 /CSD get_res sepcs
1 sep
@
165.931 500.556 mo
165.931 500.407 165.81 500.286 165.661 500.286 cv
165.512 500.286 165.391 500.407 165.391 500.556 cv
165.391 500.705 165.512 500.826 165.661 500.826 cv
165.81 500.826 165.931 500.705 165.931 500.556 cv
.75021 .679683 .670222 .90164 cmyk
ef
167.302 543.698 mo
167.302 543.429 li
1 /0 /CSD get_res sepcs
1 sep
@
167.615 543.688 mo
167.615 543.539 167.494 543.418 167.345 543.418 cv
167.196 543.418 167.075 543.539 167.075 543.688 cv
167.075 543.837 167.196 543.957 167.345 543.957 cv
167.494 543.957 167.615 543.837 167.615 543.688 cv
.75021 .679683 .670222 .90164 cmyk
ef
168.921 551.794 mo
168.921 551.524 li
1 /0 /CSD get_res sepcs
1 sep
@
169.169 551.848 mo
169.169 551.699 169.048 551.578 168.899 551.578 cv
168.75 551.578 168.629 551.699 168.629 551.848 cv
168.629 551.997 168.75 552.117 168.899 552.117 cv
169.048 552.117 169.169 551.997 169.169 551.848 cv
.75021 .679683 .670222 .90164 cmyk
ef
170.54 553.683 mo
170.54 553.413 li
1 /0 /CSD get_res sepcs
1 sep
@
170.853 553.661 mo
170.853 553.512 170.732 553.391 170.583 553.391 cv
170.434 553.391 170.313 553.512 170.313 553.661 cv
170.313 553.81 170.434 553.931 170.583 553.931 cv
170.732 553.931 170.853 553.81 170.853 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
172.429 553.952 mo
1 /0 /CSD get_res sepcs
1 sep
@
172.666 553.92 mo
172.666 553.771 172.545 553.65 172.396 553.65 cv
172.247 553.65 172.126 553.771 172.126 553.92 cv
172.126 554.069 172.247 554.19 172.396 554.19 cv
172.545 554.19 172.666 554.069 172.666 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
174.048 553.952 mo
1 /0 /CSD get_res sepcs
1 sep
@
174.35 553.92 mo
174.35 553.771 174.229 553.65 174.08 553.65 cv
173.931 553.65 173.81 553.771 173.81 553.92 cv
173.81 554.069 173.931 554.19 174.08 554.19 cv
174.229 554.19 174.35 554.069 174.35 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
122.508 553.952 mo
127.365 553.952 li
127.365 528.317 li
129.254 528.317 li
129.254 507.81 li
130.873 507.81 li
130.873 501.603 li
132.492 501.603 li
132.492 496.206 li
134.111 496.206 li
134.111 492.429 li
136 492.429 li
136 488.921 li
137.619 488.921 li
137.619 484.873 li
139.238 484.873 li
139.238 482.444 li
141.127 482.444 li
141.127 479.746 li
142.746 479.746 li
142.746 476.778 li
144.365 476.778 li
144.365 474.619 li
145.984 474.619 li
145.984 470.571 li
147.873 470.571 li
147.873 468.143 li
149.492 468.143 li
149.492 466.254 li
151.111 466.254 li
151.111 463.825 li
153 463.825 li
153 458.429 li
154.619 458.429 li
154.619 419.571 li
156.238 419.571 li
156.238 287.349 li
157.857 287.349 li
157.857 269.54 li
159.746 269.54 li
159.746 291.667 li
161.365 291.667 li
161.365 320.54 li
162.984 320.54 li
162.984 382.603 li
164.603 382.603 li
164.603 500.524 li
166.492 500.524 li
166.492 543.698 li
168.111 543.698 li
168.111 551.794 li
169.73 551.794 li
169.73 553.683 li
171.619 553.683 li
171.619 553.952 li
501.905 553.952 li
1 /0 /CSD get_res sepcs
1 sep
@
.809524 lw
122.508 553.952 mo
501.905 553.952 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: TCJRMX+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /TCJRMX+Helvetica
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000036c6670
676d000000000000042800000a1d676c796600000000000013c4000021fc
686561640000000000000e4800000036686865610000000000000e800000
0024686d74780000000000000ea4000000b06c6f63610000000000000f54
0000005a6d6178700000000000000fb0000000206e616d65000000000000
0fd000000024707265700000000000000ff4000003cf6764697200000000
000000000000000005c0001005bd00280580001a042f001f0000ffd90000
ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe
3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c
00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af0074
00c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c0062
0084ffa200240038008600bd0039005e008e00edffa9ffb3004000520055
00aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1
ff4cffaf0012002c004200500051008400be012503daff680018003b0098
009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c0053
0053007d01b401e103af0486ff9cffeafffe001f0028002a005200600093
00a300aa00af00af00c001000145016b0174019301950240028202b40485
0517fefd00060029004700470048006f008800b400b900c400f200f901ef
02180310037403c5ff35fff3000b004b004c005200550065007600760087
0087008e00ab00bb0106013001430150017d0194019501d3022a02550258
0277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7
ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125
013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e3
01ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df
03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008
002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd
00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d
014d014e014f01660169019e01ba01ba01be01e301ef01f6020002000209
02110217021c02530262026d028002d50280031b032a034a035a03af03af
03c803d603fb03fb04050413041504470449008c046d049a049a04a604a8
04b204cf0539053e054e055605800589058c036305d105d6067e068e06b2
06ef06f00728074c076f078c00b400c900c000c100000000000000000000
00000004012400af0032006e0063014401620096014301a10161008a0074
0064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d
0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d
00820030002a002a002a002a002a40292a292827262524232221201f1e1d
1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b
2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2c20b0032552582359212d
2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b0
02602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45
b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b
482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185
592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b0
09234223688a6a606120b0005258b21a401a4523614459b0005058b21940
1945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b
2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c456920b00943b0022660
b00325b005254961b0805358b21940194523616844b21a401a4523606a44
b209191a45652345604259b00943608a103a2d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c764520b003254523616818236860442d2c7645b0032545236168231845
6860442d2c7645b0032545616823452361442d2c4569b014b0324b505821
b0205961442db8002b2c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db8002c2c2020456944b001602db8002d2cb8002c2a212d
b8002e2c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db8002f2c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800302c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80031
2c2020456944b001602020457d691844b001602db800322cb800312a2db8
00332c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800342c4b535845441b2121592d
b800352c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db800362c2020456944b001602db800372cb800362a212db800382c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db800392c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db8003a2c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db8003b2c2020456944
b001602020457d691844b001602db8003c2cb8003b2a2db8003d2c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db8003e2c4b535845441b2121592db8003f2c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800402c20
20456944b001602db800412cb800402a212db800422c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800432c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800442c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800452c2020456944b00160202045
7d691844b001602db800462cb800452a2db800472c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800482c4b535845441b2121592db800492c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db8004a2c2020456944b001
602db8004b2cb8004a2a212db8004c2c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db8004d2c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db8004e2c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db8004f2c2020456944b001602020457d691844b001
602db800502cb8004f2a2db800512c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
522c4b535845441b2121592db800532c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db800542c2020456944b001602db800552c
b800542a212db800562c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800572c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800582c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800592c2020456944b001602020457d691844b001602db8005a2c
b800592a2db8005b2c4b20b003265358b0401bb000598a8a20b003265358
2321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db8005c2c4b535845441b2121592d00000000010000
00000000493edc1e5f0f3cf500110800000000005f4d8f0000000000d154
cd90f865fc270b9108f9000000090001000000000000000100000629fe29
00000c01f865fced0b9100010000000000000000000000000000002c0512
004202390000071d004202aa008e02aa0044023900aa02aa0055023900af
0239000004730040047300c4047300400473003104730034047300420473
004d0473004204ac005c0556001e0639006305c700a1023900c9055600af
05c700b404e30021055600340556002a04730052047300760400003b0473
0038047300480473008401c7008401c7ffda01c70089047300840473003b
0473007602aa00890400004202390017047300800400000b000000360036
00fe0146018801ba01d801f8021c028a02b0033c03e8043604ca05600612
063a06c6076e07a607be0814089e08cc092a098c0a560ac00b420bae0c78
0cc80cf60d300d520dae0e260e980ede0fbe100e106810fe000000010000
002c00920009006b0007000200100010005d000007e80a1d000400010000
00010012000100000000000600100000464e4c4b47472b48656c76657469
63610000b800532bb800492bb8003f2bb800352bb8002b2b4118008001a6
009001a600a001a600030069018b0079018b0089018b0099018b00040089
018b0099018b00a9018b00b9018bb2040840ba0179001a014a400b041f54
14191f180a0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009
410a01a0019f0064001f01a50025017a00480028019ab3296c1f60410a01
a9007001a9008001a90003008001a9000101a9b21e321fbe012c00250401
001f0126001e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11e
b80201400f1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401
b61fa91d6c1f931eb8019ab21f921db80101b21f911db80101b21f751db8
0201b61f6d29961f6431b8019ab21f4c96b802abb21f391db80156400b1f
3638211f351de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb2
1f201eb8012540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b
002a019bb2254a1fba019b0025017ab349293896b8017bb348283125b801
7a403648289629482725294c1f252946272729482756c80784075b074107
32072b072807260721071b071408120810080e080c080a08080807b801ac
b23f1f06bb01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f
001f01adb70804080208000814b8ffe0b40000010014b801abb410000001
00b801abb606100000010006b801adb300000100b801ad401f0400000100
0410000001001002000001000200000001000002010802004a00b0018db8
06008516763f183f123e113946443e113946443e113946443e113946443e
113946443e11394660443e11394660443e11394660442b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d
59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b
2b4b5279b376706a66456523456023456560234560b08b766818b0806220
20b16a704565234520b003266062636820b003266165b070236544b06a23
4420b176664565234520b003266062636820b003266165b066236544b076
2344b10066455458b166406544b27640764523614459b36242725d456523
456023456560234560b089766818b080622020b172424565234520b00326
6062636820b003266165b042236544b072234420b1625d4565234520b003
266062636820b003266165b05d236544b0622344b1005d455458b15d4065
44b262406245236144592b2b2b2b456953427374b8019a2045694b20b028
53b049515a58b020615944b801a620456944750000>
[8701 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> TCJRMX+Helvetica AddT42Char 
1 508 3 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>TCJRMX+Helvetica AddT42Char 
1 652 4 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>TCJRMX+Helvetica AddT42Char 
1 784 5 <000100aafed0018000da000e002d401600230e0a64080a1017171a07340a
640008190f6365182b4e10f44d3cfded4e456544e6003f4dedd4ed313017
3637363534262723353315140607aa451c0f01026dd66076d10c552d2a07
0b07daca77b415000000>TCJRMX+Helvetica AddT42Char 
1 1008 8 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>TCJRMX+Helvetica AddT42Char 
1 3468 19 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>TCJRMX+Helvetica AddT42Char 
1 4412 24 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>TCJRMX+Helvetica AddT42Char 
1 4504 25 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>TCJRMX+Helvetica AddT42Char 
1 5504 29 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>TCJRMX+Helvetica AddT42Char 
1 5764 30 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>TCJRMX+Helvetica AddT42Char 
1 5980 31 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>TCJRMX+Helvetica AddT42Char 
1 6384 32 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>TCJRMX+Helvetica AddT42Char 
1 6636 34 <0002ffdafe50013805bd00030011002fb800532bba0000000100562bb800
0110b80007d0b8000010b80009d000b8000e2fb800112fba000300000056
2b303101233533013e0135113311140706232226270138b4b4fea27931b4
263fb00d1d1f04edd0f93404235c04b6fb37753a620203000000>TCJRMX+Helvetica AddT42Char 
1 7244 38 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>TCJRMX+Helvetica AddT42Char 
1 8060 41 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>TCJRMX+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>TCJRMX+Helvetica AddT42Char 
TCJRMX+Helvetica /CharStrings get begin
/space 1 def
/parenleft 3 def
/parenright 4 def
/comma 5 def
/slash 8 def
/G 19 def
/T 24 def
/V 25 def
/c 29 def
/d 30 def
/e 31 def
/h 32 def
/j 34 def
/p 38 def
/t 41 def
end
TCJRMX+Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 47 /slash put
dup 71 /G put
dup 84 /T put
dup 86 /V put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 106 /j put
dup 112 /p put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/ATEDLO+Helvetica /TCJRMX+Helvetica findfont ct_VMDictPut/ATEDLO+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 2{/.notdef}rp /slash 23{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 12{/.notdef}rp /c /d /e 2{/.notdef}rp /h /.notdef /j 5{/.notdef}rp /p 3{/.notdef}rp /t 139{/.notdef}rp]ATEDLO+Helvetica nfATEDLO+Helvetica*1 [32.5013 0 0 -32.5013 0 0 ]msf289.151 635.344 mo( \(GeV/c\))[9.03537 10.8227 25.286 18.0707 21.6786 9.03537 16.2506 0 ]xshATEDLO+Helvetica*1 [21.294 0 0 -21.294 0 0 ]msf234.234 621.895 mo(det,ch)[11.8395 11.8395 5.91974 5.91974 10.647 0 ]xsh234.234 651.034 mo(T,jet)[13.0105 5.91972 4.72729 11.8394 0 ]xshATEDLO+Helvetica*1 [32.5013 0 0 -32.5013 0 0 ]msf217.423 635.344 mo(p)sh122.508 544.238 mo
122.508 553.952 li
156.238 549.095 mo
156.238 553.952 li
190.238 549.095 mo
190.238 553.952 li
223.968 549.095 mo
223.968 553.952 li
257.968 544.238 mo
257.968 553.952 li
291.698 549.095 mo
291.698 553.952 li
325.698 549.095 mo
325.698 553.952 li
359.429 549.095 mo
359.429 553.952 li
393.429 544.238 mo
393.429 553.952 li
393.429 544.238 mo
393.429 553.952 li
427.159 549.095 mo
427.159 553.952 li
461.159 549.095 mo
461.159 553.952 li
494.889 549.095 mo
494.889 553.952 li
1 /0 /CSD get_res sepcs
1 sep
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: TCJRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TCJRMX+Helvetica gcheck setglobal} if
1 1080 9 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>TCJRMX+Helvetica AddT42Char 
1 1376 11 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>TCJRMX+Helvetica AddT42Char 
1 2000 13 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>TCJRMX+Helvetica AddT42Char 
TCJRMX+Helvetica /CharStrings get begin
/zero 9 def
/two 11 def
/four 13 def
end
TCJRMX+Helvetica /Encoding get
dup 48 /zero put
dup 50 /two put
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATEDLO+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 2{/.notdef}rp /slash /zero /.notdef /two /.notdef /four 18{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 12{/.notdef}rp /c /d /e 2{/.notdef}rp /h /.notdef /j 5{/.notdef}rp /p 3{/.notdef}rp /t 139{/.notdef}rp]ATEDLO+Helvetica nfATEDLO+Helvetica*1 [32.5013 0 0 -32.5013 0 0 ]msf113.195 591.635 mo(02040)[126.638 18.0707 117.528 18.0707 0 ]xsh122.508 182.921 mo
501.905 182.921 li
122.508 192.635 mo
122.508 182.921 li
156.238 187.778 mo
156.238 182.921 li
190.238 187.778 mo
190.238 182.921 li
223.968 187.778 mo
223.968 182.921 li
257.968 192.635 mo
257.968 182.921 li
291.698 187.778 mo
291.698 182.921 li
325.698 187.778 mo
325.698 182.921 li
359.429 187.778 mo
359.429 182.921 li
393.429 192.635 mo
393.429 182.921 li
393.429 192.635 mo
393.429 182.921 li
427.159 187.778 mo
427.159 182.921 li
461.159 187.778 mo
461.159 182.921 li
494.889 187.778 mo
494.889 182.921 li
122.508 553.952 mo
122.508 182.921 li
1 /0 /CSD get_res sepcs
1 sep
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: TCJRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TCJRMX+Helvetica gcheck setglobal} if
1 944 7 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>TCJRMX+Helvetica AddT42Char 
1 4888 27 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>TCJRMX+Helvetica AddT42Char 
1 5292 28 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>TCJRMX+Helvetica AddT42Char 
1 6544 33 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>TCJRMX+Helvetica AddT42Char 
1 6820 36 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>TCJRMX+Helvetica AddT42Char 
1 7004 37 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>TCJRMX+Helvetica AddT42Char 
1 7472 39 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>TCJRMX+Helvetica AddT42Char 
1 7612 40 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>TCJRMX+Helvetica AddT42Char 
1 8220 42 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>TCJRMX+Helvetica AddT42Char 
TCJRMX+Helvetica /CharStrings get begin
/period 7 def
/a 27 def
/b 28 def
/i 33 def
/n 36 def
/o 37 def
/r 39 def
/s 40 def
/u 42 def
end
TCJRMX+Helvetica /Encoding get
dup 46 /period put
dup 97 /a put
dup 98 /b put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATEDLO+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /.notdef /two /.notdef /four 18{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i /j 3{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]ATEDLO+Helvetica nfATEDLO+Helvetica*1 [0 -32.5013 -32.5013 0 0 0 ]msf41.4673 485.165 mo(counts \(arb. unit\))[-16.2507 -18.0707 -18.0707 -18.0707 -9.03537 -16.2506 -9.03534 -10.8227 -18.0707 -10.8227 -18.0707 -9.03531 -9.03537 -18.0707 -18.0707 -7.21527 -9.03534 0 ]ysh135.19 553.952 mo
122.508 553.952 li
128.714 528.587 mo
122.508 528.587 li
128.714 503.222 mo
122.508 503.222 li
128.714 477.857 mo
122.508 477.857 li
135.19 452.222 mo
122.508 452.222 li
128.714 426.857 mo
122.508 426.857 li
128.714 401.492 mo
122.508 401.492 li
128.714 376.127 mo
122.508 376.127 li
135.19 350.762 mo
122.508 350.762 li
128.714 325.127 mo
122.508 325.127 li
128.714 299.762 mo
122.508 299.762 li
128.714 274.397 mo
122.508 274.397 li
135.19 249.032 mo
122.508 249.032 li
135.19 249.032 mo
122.508 249.032 li
128.714 223.667 mo
122.508 223.667 li
128.714 198.032 mo
122.508 198.032 li
1 /0 /CSD get_res sepcs
1 sep
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: TCJRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TCJRMX+Helvetica gcheck setglobal} if
1 2452 15 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>TCJRMX+Helvetica AddT42Char 
TCJRMX+Helvetica /CharStrings get begin
/six 15 def
end
TCJRMX+Helvetica /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATEDLO+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /.notdef /two /.notdef /four /.notdef /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i /j 3{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]ATEDLO+Helvetica nfATEDLO+Helvetica*1 [32.5013 0 0 -32.5013 0 0 ]msf93.0213 564.737 mo(0)sh67.2445 462.751 mo(0.2)[18.0707 9.03536 0 ]xsh67.2445 360.765 mo(0.4)[18.0707 9.03536 0 ]xsh67.2445 259.898 mo(0.6)[18.0707 9.03536 0 ]xsh501.905 553.952 mo
501.905 182.921 li
488.952 553.952 mo
501.905 553.952 li
495.429 528.587 mo
501.905 528.587 li
495.429 503.222 mo
501.905 503.222 li
495.429 477.857 mo
501.905 477.857 li
488.952 452.222 mo
501.905 452.222 li
495.429 426.857 mo
501.905 426.857 li
495.429 401.492 mo
501.905 401.492 li
495.429 376.127 mo
501.905 376.127 li
488.952 350.762 mo
501.905 350.762 li
495.429 325.127 mo
501.905 325.127 li
495.429 299.762 mo
501.905 299.762 li
495.429 274.397 mo
501.905 274.397 li
488.952 249.032 mo
501.905 249.032 li
488.952 249.032 mo
501.905 249.032 li
495.429 223.667 mo
501.905 223.667 li
495.429 198.032 mo
501.905 198.032 li
1 /0 /CSD get_res sepcs
1 sep
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: TCJRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TCJRMX+Helvetica gcheck setglobal} if
1 108 2 <00050042ffda06d00592000b000f001b0027003300f04052060c250c0237
0e580c670c960ca70cc60cd70cf60c0868080d0e0e46120f0f0c0e0f1218
0c0d2a301b2421f215240d272d240bf23324050a0f0e3517171a2a2402f2
302408ea12241ef218242419343f52182b4e10f44dedfcedf6edfced4e45
6544e6002f3c4d3fedfcfd2fc4edf4ed011112393911123939872e2b7d10
c43130184379405200322e0a301b002c002a1b011a22181b001020121b01
1626181b00141c121b013206301b0028042a1b012f092d1b012b012d1b01
19231b1b00111f1b1b001725151b01131d151b013107331b002903331b00
002b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b81015d710016151406232226
353436330333012312363534262322061514163312161514062322263534
36330036353426232206151416330604cccc9091cccc91916ffcdf6f3279
79565579795591cccc9190cccc90042b7979555679795602b8cc9090cccc
9090cc02dafa4803687955557978565579022bcd9090cccc9090cdfb2179
55557979555579000000>TCJRMX+Helvetica AddT42Char 
1 884 6 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>TCJRMX+Helvetica AddT42Char 
1 1300 10 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>TCJRMX+Helvetica AddT42Char 
1 1656 12 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>TCJRMX+Helvetica AddT42Char 
1 3108 17 <0002005c00de046f03360003000700274015012000cd07200604001a0907
021908095c213f52182b2b4ef43c10f63c002f4dedfdfd31300115213501
152135046ffbed0413fbed0336a8a8fe53abab00>TCJRMX+Helvetica AddT42Char 
1 3188 18 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>TCJRMX+Helvetica AddT42Char 
1 3804 20 <000100a10000052f05bd000b003f402108091e0302020401020a07080407
2506051a0d010a250b00190c0c0da0217670182b2b104ef43c4dfd3c4e10
f63c4dfd3c003f3c3f3c392f3cfd3c3130133311211133112311211123a1
c902fcc9c9fd04c905bdfda1025ffa4302affd510000>TCJRMX+Helvetica AddT42Char 
1 3916 21 <000100c90000019205bd00030017b8002b2bba00010000002e2b00b80000
2fb800022f303113331123c9c9c905bdfa43>TCJRMX+Helvetica AddT42Char 
1 3964 22 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>TCJRMX+Helvetica AddT42Char 
1 4136 23 <000200b40000057805bd0009002700944012070d49014805590158056905
641478050816bb01300119001b011c40422321202660127112751403121e
1f141c1503211e161404261224251e0009091b071e0b02261c1b08202515
1f251603310f691b1a29082625270a192829d6219566182b2b4ef43c4dfd
3c4e10f64df4edd4edd4ed003f3c3c3ffd12392f3cfd3c39111739011112
39391239395d1112392b3130015d01323635342726232111032132171615
1406071e011f011617161715232e012f012627262321112303478ca3723d
66fe1ac702a8a86dcf6d6256570507030b122ef40a0c040c0764397afe3b
c7031c70929d391efe0a02a1315efd84a833237280c55429461421133c56
f590311bfd8a>TCJRMX+Helvetica AddT42Char 
1 4692 26 <0002002a0000054705bd00080009008f402a880401142804251203020300
2512010102050802080701030403000207080903090904000b17171a0304
b801004009060202050625010807b80100b500190a8e5e182b194e10f44d
f43c3918fd3c393d2f1019f4394e456544e6111239182f003f3f3f173c12
39392e3c05874d2e2b872e182b4b5279b7050402030800010204877d10c4
04877d10c43130015d133309013301112311132ae801a601a6e9fdd5c766
05bdfd3e02c2fc93fdb00250036d0000>TCJRMX+Helvetica AddT42Char 
1 6752 35 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>TCJRMX+Helvetica AddT42Char 
1 8400 43 <0001000b000003ea042f00060102402e4201c50102006700680268036706
87048805a700a802084700480245044a0586048905c704c8050849287328
0708b80109b321677e182b2b4b5279b8ff70b40105042004b80183b70303
6d1202010205b80183401e06066d12000001050604030101050203060300
0605040a0817171a03af02ba018400000184b301af0619194ef4184dfde0
e0fd194e456544e618003f3c3f173c1239011112391239074d2e2b104ee4
4d072e2b104ee44d2b4b5179402502291203030400291206060501050203
0603000605040a0817171a020403af050001af0619194ef4184dfd3939fd
3939194e456544e618003f3c3f173c12390507102b07102b313001715d00
5d7113090133012301dc011e012bc5fe6cc0fe75042ffc980368fbd1042f
>TCJRMX+Helvetica AddT42Char 
TCJRMX+Helvetica /CharStrings get begin
/percent 2 def
/hyphen 6 def
/one 10 def
/three 12 def
/equal 17 def
/A 18 def
/H 20 def
/I 21 def
/P 22 def
/R 23 def
/Y 26 def
/l 35 def
/v 43 def
end
TCJRMX+Helvetica /Encoding get
dup 37 /percent put
dup 45 /hyphen put
dup 49 /one put
dup 51 /three put
dup 61 /equal put
dup 65 /A put
dup 72 /H put
dup 73 /I put
dup 80 /P put
dup 82 /R put
dup 89 /Y put
dup 108 /l put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATEDLO+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash /zero /one /two /three /four /.notdef /six 6{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G /H /I 6{/.notdef}rp /P /.notdef /R /.notdef /T /.notdef /V 2{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i /j /.notdef /l /.notdef /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]ATEDLO+Helvetica nfATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf345.186 213.947 mo(PYTHIA det. level)[11.2131 11.2131 10.2715 12.1376 4.67349 11.2131 4.67346 9.34698 9.34698 4.67346 4.67349 4.67349 3.73209 9.34692 8.40558 9.34698 0 ]xsh345.186 237.483 mo(R = 0.3, 0%-10%)[12.1376 4.67352 9.81769 4.67346 9.34698 4.67346 9.34698 4.67349 4.67346 9.34698 14.9452 5.59799 9.34698 9.34695 0 ]xsh1.61905 lw
154.889 431.444 mo
155.159 425.508 li
155.159 419.302 li
155.429 413.365 li
155.429 407.159 li
155.698 400.952 li
155.698 388 li
155.968 381.794 li
155.968 375.318 li
156.238 368.841 li
156.238 362.365 li
156.508 355.889 li
156.508 349.413 li
156.778 343.206 li
156.778 336.73 li
157.048 330.794 li
157.048 318.651 li
157.317 312.984 li
157.317 307.318 li
157.587 301.921 li
157.587 296.794 li
157.857 291.667 li
157.857 287.079 li
158.127 282.492 li
158.127 274.397 li
158.397 270.619 li
158.397 267.381 li
158.667 264.413 li
158.667 261.714 li
158.936 259.556 li
158.936 257.397 li
159.206 256.048 li
159.206 254.698 li
159.476 253.889 li
159.476 253.349 li
159.746 253.619 li
159.746 254.159 li
160.016 255.238 li
160.016 256.587 li
160.286 258.476 li
160.286 260.635 li
160.556 263.064 li
160.556 265.762 li
160.825 269 li
160.825 276.286 li
160.825 276.286 mo
161.095 280.333 li
161.095 284.651 li
161.365 289.238 li
161.365 294.095 li
161.635 299.222 li
161.635 304.619 li
161.905 310.016 li
161.905 321.619 li
162.175 327.556 li
162.175 333.762 li
162.444 339.968 li
162.444 346.175 li
162.714 352.651 li
162.714 359.127 li
162.984 365.603 li
162.984 372.079 li
163.254 378.556 li
163.254 391.238 li
163.524 397.714 li
163.524 403.921 li
163.794 410.127 li
163.794 416.333 li
164.063 422.54 li
164.063 428.476 li
164.333 434.143 li
164.333 439.81 li
164.603 445.476 li
164.603 456.27 li
164.873 461.397 li
164.873 466.254 li
165.143 471.111 li
165.143 475.698 li
165.413 480.286 li
165.413 484.333 li
165.683 488.651 li
165.683 492.698 li
165.952 496.476 li
165.952 503.492 li
166.222 506.73 li
166.222 509.968 li
166.492 512.937 li
166.492 515.635 li
166.762 518.333 li
166.762 521.032 li
167.032 523.46 li
167.032 523.46 mo
167.032 525.619 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: TCJRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TCJRMX+Helvetica gcheck setglobal} if
1 2156 14 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>TCJRMX+Helvetica AddT42Char 
TCJRMX+Helvetica /CharStrings get begin
/five 14 def
end
TCJRMX+Helvetica /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATEDLO+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash /zero /one /two /three /four /five /six 6{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G /H /I 6{/.notdef}rp /P /.notdef /R /.notdef /T /.notdef /V 2{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i /j /.notdef /l /.notdef /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]ATEDLO+Helvetica nfATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf288.031 240.845 mo(=10%)[9.81769 9.34695 9.34698 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf281.307 249.809 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf268.977 240.845 mo(/p)[4.67349 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf262.253 249.809 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf249.925 240.845 mo( p)[4.67349 0 ]xsh%ADOBeginSubsetFont: LMEQMX+Symbol Initial
ct_T42Dict begin
-0.164 -0.297 1.094 0.824
 256 array 0 1 255 {1 index exch /.notdef put} for  /LMEQMX+Symbol
Type42DictBegin
[<00010000000c000c000c000c4f532f32e67a4476000000cc000000606376
74205d0c08450000012c0000023c6670676dc62bd4b60000036800000200
676c7966b296804c000014880000012c68656164dae03ef0000005680000
0036686865610cca0296000005a000000024686d74788f905207000005c4
0000031c6c6f636123ce2464000008e0000001906d61787008d609b00000
0a70000000206e616d655742a16200000a900000010370726570f12012c7
00000b94000008f367646972000000000000000000000000000304940190
0005000402bc028a0000008c02bc028a000001dd003200fa000000000000
000000000000800000eb380160ea14400000000000007079727300400000
f8ff059cfd9c0000069e0264000000010000000000000000000000200000
ee00cd003b00870089023f005600c1005e00ec01b20093018b002d018900
ee003b00ae00b200c700b20037002d006000a603c100fc00d300b800d300
5c02cb00c100660031001902c1004e005400b2009c0002021d027500c100
9601c1000e023f02ac019e009c027f01a0005a001f002704c100f4005800
b4036d003300a8025e006a04850200077300a2027500100173005e004202
4e0202099800f604370046055c00bc00b000a6006d03e7025e074400f801
75006800dd00e1003500370262008d0062028900be00d301b601d701e301
5202cf00c301fc01cd01480548054805660500001700ee00c105b6001b02
7100b60000001b003f000403480548054805480500001f0029004e002900
4e0066009301cb059e018b005001ee00ee0031009a0091004e009a004805
b000310098032d006d033300e9004a004a00290098039803330083054a00
c3008f005200d3055a009c0175007d06600098039803b603b20133009803
8305c70198039803980300001200e5011d063900210427025e068700e900
b0053d02d70277008300f6028305b401df008d05a602750012019c058302
62015e0042024e024e0052058b008d051400f60421008d055c002d001f00
f4055200ba012d021000a603aa0175006800dd00e100c905e7020c024606
6400ec05ee01f8012f062506b201f80500028300c10135063d00fc013306
be0139060e06680083006200be00857bff7f82003000002a0029003f004e
005a0077008b00870031007500bc00dd0000001dfe39000003df00020548
001e4007060504030201002c2010b002254964b040515820c859212d2cb0
02254964b040515820c859212d2c20100720b00050b00d7920b8ffff5058
041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff505804
1b0559b0051cb0032508e12d2c4b505820b80107454459212d2cb0022545
60442d2c4b5358b00225b0022545445921212d2c45442db800072c4bb800
065058b101018e59b801ff85b800441db9000600035f5e2db800082c2020
456944b001602db800092cb800082a212db8000a2c2046b0032546525823
59208a208a49648a204620686164b004254620686164525823658a592f20
b00053586920b000545821b040591b6920b000545821b0406559593a2db8
000b2c2046b00425465258238a592046206a6164b0042546206a61645258
238a592ffd2db8000c2c4b20b0032650585158b080441bb04044591b2121
2045b0c05058b0c0441b2159592db8000d2c2020456944b001602020457d
691844b001602db8000e2cb8000d2a2db8000f2c4b20b003265358b0401b
b000598a8a20b0032653582321b0808a8a1b8a235920b0032653582321b8
00c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800102c4b535845441b
2121592d00010000000100005b3148635f0f3cf50111080000000000a1cd
888000000000d1846d3bfeaafd9c08c0069e000000060001000000000000
00010000059cfd9c00000856feaafbdc0881000100000000000000000000
0000000000c704cd00660000000000fa00000200000002aa00dd0400fffa
06aa00810639006002aa005e02aa00600464005a02000058020000890239
fff20400003b040000a00400003d0400003b040000330400002b04000054
04000039040000520400004c023900a00239007904640060046400580464
0060038d007d02aa005402aa00540400ffee03d7009e019a00a003d7009e
0333007903ae00ae0464005c05b4006d0464005a0464005804640058049c
009603f4007f05b4004a0696003d046400230231ff480625006605b400d5
0464ffe30400ffec0464001f04e5002b080000d90464005803f400060156
feaa06520071046400580464006d0464005804d3011d07e5007307e50073
04d3011d085600ac05b400370625009806250098057d0252057d008f05c7
fff60556003104d3003504e3002904e3002905c7002b05ee005802aa0039
05c7003f057d001d071d003f05c700270529007105c700560625002f0473
002f04bc001204e300210585001b061b004605c70019065c0002050c0046
04640089034a000203f4004803f4002704d30012042b005e02a2009c0464
000e04640023042b000003f20021046400420464007d04d3004803830054
0383ffcf049cfff8042b003304640014057dfff8057d00460200008901fa
0083034a00930606007306060021060600cd0606008105b400c90400049c
0383001406250025062500250464005805b4003705b4003705b4003705b4
003705b4003704d300b207e5004407e5004404d300b20856007d0544004a
05b4003704d300a604d300a40625008d06e7014c06960050057d02520696
0127031200be031200be031200810312008105b400480464004a04000091
02a2003502a20035050c001205b4fff604d3003d0383006d05b400310312
008d0312008d031200250312002507e5013f03f401b603f4005a03f401b6
03f401b603f4006603f401b603f4006604f6ffec04d3022d0800ff7f0312
008d031200be031201fc031201cd0652006206520062071f013506520048
06520048064a00c1057d005e065c003d0464001f0544007d05f4ffb20200
fff202000000020000000200000002000000020000000000002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220096009600960096009600960096009600960096
009600960096009600960096009600960096009600960096009600960096
009600960096009600960096009600960096009600960096009600960096
009600960096009600960096009600960096009600960096009600960096
009600960096009600960096009600960096009600960096009600960096
009600960096009600960096009600960096009600960096009600960096
009600960096009600960096009600960096009600960096009600960096
00960001000000c7007a0004000000000002001000400011000007e808f3
000100010000000800660001000000000003000d00000001000000000004
000d000d0001000000000006000d001a0003000004090001001a00270003
000004090002000e00410003000004090003001a004f0003000004090004
001a00690003000004090006001a0083464a4e4f46452b53796d626f6c46
4a4e4f46452b53796d626f6c464a4e4f46452b53796d626f6c0046004a00
4e004f00460045002b00530079006d0062006f006c005200650067007500
6c006100720046004a004e004f00460045002b00530079006d0062006f00
6c0046004a004e004f00460045002b00530079006d0062006f006c004600
4a004e004f00460045002b00530079006d0062006f006c00b800072b01ba
0007010f00092b01bf0111005400490039002900190000000f2bbf011200
e600d000a2005e00450000000f2bbf011300610049003900290019000000
0f2bbf0114003c002e0024001a00100000000f2bbf01150033002e002400
1a00100000000f2b00bf010b011300d000a2007d00450000000f2bbf010c
00b300930072005e002a0000000f2bbf010d0091006f0056003e002a0000
000f2bbf010e007e006f0056003e002a0000000f2bbf010f005f00490039
002900190000000f2bbf0110005200490039002900190000000f2b00ba01
160004000e2bb8010a20457d69184441ff0280010500fe0003010400fe00
030103007d0003010200fe0003010100fe0003010000fe000300ff00fe00
0300fe00fe000300fd00fe000300fc00fe000300fb00fe000300fa00fe00
0300f800fe000300f700fe000300f600fe000300f500fe000300f400fe00
0300f300fe000300f200fe000300f100fe000300f000fe000300ef00fe00
0300ee00fe000300ed00fe000300ec00fe000300eb0000000300ea00fe00
0300e900e80064000500e900fe000300e80064000300e700fe000300e600
fe000300e500fe000300e400fe000300e300fe000300e200fe000300e100
fe000300df00fe000300de00fe000300dc00fe000300db00fe000300da00
fe000300d900fe000300d800fe000300d700fe000300d60084001d000500
d60023000300d200fe000300d20023000400d100fe000300d000fe000300
d00023000400cf00fe000300ce00fe000300cc00fe000300cb00c8000300
ca00fe000300c900fe000300c800fe000300c700fe000300c60064000300
c500fe000300c400fe000300c300fe000300c100fe000300bf00fe000300
be00fe000300bd00fe000300bc00fe000300bb00fe000300ba00b9004f00
0500ba00fe000300baffd0000400b9004f000300b800b7000e000500b800
16000300b80080000400b700b60006000500b7000e000300b70040000400
b60006000300b50032000300b40082000341ff00b300a00033000500b300
5c000300b30040000400b200fe000300b10064000300b000af00ba000500
b000fe000300af00ae0076000500af00ba000300af0080000400ae00a000
33000500ae0076000300ae0040000400ab004b000300aa00fe000300a900
fe000300a800fe000300a70064000300a6003a000300a50064000300a400
fe000300a3005c000300a20064000300a100a00033000500a1003f000300
a10040000400a000330003009f003a0003009e00410003009d00d2000300
9c00fe0003009b004b0003009a00fe0003009900fe00030098007d000300
9700380003009600fe0003009500fe00030094003a00030093007d000300
92007d0003009100640003009000fe0003008f00fa0003008e003a000300
8d007d0003008c007d0003008b00c80003008a00fe0003008900fe000300
88002800030088fff00004008700fe0003008600fe000300850084001d00
050085003e00030084001d00030083008200330005008300fe00030083ff
d000040082003300030081008000dc0005008100fe0003008100c0000400
80007f008c0005008000dc0003008000800004007f007e003c0005007f00
8c0003007f00400004007e003c0003007d00fe0003007c00fe0003007b00
7a003c0005007b00fe0003007bffd00004007a003c0003007900fe000300
7800fe0003007700fe0003007600640003007541ff00fe00030073007200
450005007300fe00030073ffd000040072004500030071007000ba000500
7100fe00030070006f00760005007000ba0003007000800004006f006e00
260005006f00760003006f00400004006e00260003006b00fe0003006800
fe0003006700fe0003006500fe0003006300fe0003005f00fe0003005e00
fe0003005d00fe0003005c00fe0003005b005a00640005005b00fe000300
5a00640003005900fe0003005800fe0003005700fe0003005600fe000300
5500fe0003005400fe00030053007d0003005200fe0003005000fe000300
4f00fe0003004e00fe0003004d00fe0003004c00fe0003004b00fe000300
48ffe00004004700640003004600fe0003004400230004004300fe000300
4200fe0003004100fe0003004000260003003f00fe0003003e00fe000300
3d00fe0003003c00fe0003003b00fe0003003a00fe000300390043000300
3800fe0003003700fe0003003400fe0003003300fe0003003200fe000300
3100340003003000fe0003002f00fe0003002e00fe0003002d00fe000300
2c00480003002b00fe0003002a00fe0003002900fe000300280027003a00
05002800fe00030027003a0003002600fe0003002500fe00030024000f00
030023001b0003002200960003002100fe0003002000550003001f003a00
03001e00fe0003001d003a0003001c003a0003001b417600640003001a00
640003001900480003001800fe0003001700fe0003001600fe0003001500
fe00030015001000040014001100250005001400fe000300130012004b00
0500130096000300120011002500050012004b0003001100250003001000
fe0003001000100004000f00fa0003000e00fe0003000d00fe0003000c00
fe0003000b00fe0003000a00fe0003000900fe0003000800fe0003000700
350003000600ce0003000500fe0003000400fe0003000300fe0003000200
1d00030002001000040001006400030060001b0060001d0080000d009000
0d00a0000d00b0000d00c0000d00070001014c858d01732b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b1d0000>
[301 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 68 98 <00020048ffe903b205a4000b002e005a4032202c150d120c0c2c03099b26
199b4f15011512039b602c012ca112a326732f0d0f0c1615200c04001c0f
002c23062c0f292f10dcc4ecd4ec10ce111739111239310010e4e4f45dec
10c65dee10ee111239111239111239300134262322061514163332360327
2435343633321617232e0123220615141716171612151402232226353412
33321602f696796b7896767472d117fec57f6271b81738239154353ba838
20bab4f4ccbceeecbc0f190173cefab2a0c4f8a2029e10d08e5772916b58
6a2e2a536b241581fed8b1d6fefefac3cd0102040000>LMEQMX+Symbol AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>LMEQMX+Symbol AddT42Char 
LMEQMX+Symbol /CharStrings get begin
/g98 98 def
end
LMEQMX+Symbol /Encoding get
dup 32 /g98 put
pop
end
%ADOEndSubsetFont
/ATEDLP+Symbol /LMEQMX+Symbol findfont ct_VMDictPut/ATEDLP+Symbol*1 [32{/.notdef}rp /g98 223{/.notdef}rp]ATEDLP+Symbol nfATEDLP+Symbol*1 [16.8111 0 0 -16.8111 0 0 ]msf243.2 240.845 mo( )shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf151.299 240.845 mo(=5.0 GeV/c,  )[9.81769 9.34697 4.67349 9.34697 4.67349 13.079 9.34697 11.2131 4.67348 8.40556 4.67349 4.67348 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf144.575 249.809 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf136.73 240.845 mo(p)sh133.302 540.19 mo
133.302 539.651 li
.69482 .6318 .621515 .583612 cmyk
@
133.55 539.931 mo
133.55 539.782 133.429 539.662 133.28 539.662 cv
133.131 539.662 133.01 539.782 133.01 539.931 cv
133.01 540.08 133.131 540.201 133.28 540.201 cv
133.429 540.201 133.55 540.08 133.55 539.931 cv
.75021 .679683 .670222 .90164 cmyk
ef
135.19 529.937 mo
135.19 529.397 li
.69482 .6318 .621515 .583612 cmyk
@
135.493 529.699 mo
135.493 529.55 135.372 529.429 135.223 529.429 cv
135.074 529.429 134.953 529.55 134.953 529.699 cv
134.953 529.848 135.074 529.969 135.223 529.969 cv
135.372 529.969 135.493 529.848 135.493 529.699 cv
.75021 .679683 .670222 .90164 cmyk
ef
136.81 527.778 mo
136.81 527.238 li
.69482 .6318 .621515 .583612 cmyk
@
137.047 527.497 mo
137.047 527.348 136.926 527.227 136.777 527.227 cv
136.628 527.227 136.507 527.348 136.507 527.497 cv
136.507 527.646 136.628 527.767 136.777 527.767 cv
136.926 527.767 137.047 527.646 137.047 527.497 cv
.75021 .679683 .670222 .90164 cmyk
ef
138.429 525.889 mo
138.429 525.079 li
.69482 .6318 .621515 .583612 cmyk
@
138.731 525.36 mo
138.731 525.211 138.61 525.09 138.461 525.09 cv
138.312 525.09 138.191 525.211 138.191 525.36 cv
138.191 525.509 138.312 525.63 138.461 525.63 cv
138.61 525.63 138.731 525.509 138.731 525.36 cv
.75021 .679683 .670222 .90164 cmyk
ef
140.048 524.81 mo
140.048 524.27 li
.69482 .6318 .621515 .583612 cmyk
@
140.285 524.518 mo
140.285 524.369 140.164 524.248 140.015 524.248 cv
139.866 524.248 139.745 524.369 139.745 524.518 cv
139.745 524.667 139.866 524.788 140.015 524.788 cv
140.164 524.788 140.285 524.667 140.285 524.518 cv
.75021 .679683 .670222 .90164 cmyk
ef
141.936 523.73 mo
141.936 522.921 li
.69482 .6318 .621515 .583612 cmyk
@
142.228 523.482 mo
142.228 523.333 142.107 523.212 141.958 523.212 cv
141.809 523.212 141.688 523.333 141.688 523.482 cv
141.688 523.631 141.809 523.752 141.958 523.752 cv
142.107 523.752 142.228 523.631 142.228 523.482 cv
.75021 .679683 .670222 .90164 cmyk
ef
143.556 521.032 mo
143.556 520.222 li
.69482 .6318 .621515 .583612 cmyk
@
143.782 520.762 mo
143.782 520.613 143.661 520.492 143.512 520.492 cv
143.363 520.492 143.242 520.613 143.242 520.762 cv
143.242 520.911 143.363 521.032 143.512 521.032 cv
143.661 521.032 143.782 520.911 143.782 520.762 cv
.75021 .679683 .670222 .90164 cmyk
ef
145.175 519.683 mo
145.175 518.873 li
.69482 .6318 .621515 .583612 cmyk
@
145.466 519.467 mo
145.466 519.318 145.345 519.197 145.196 519.197 cv
145.047 519.197 144.926 519.318 144.926 519.467 cv
144.926 519.616 145.047 519.737 145.196 519.737 cv
145.345 519.737 145.466 519.616 145.466 519.467 cv
.75021 .679683 .670222 .90164 cmyk
ef
147.063 518.873 mo
147.063 518.063 li
.69482 .6318 .621515 .583612 cmyk
@
147.279 518.56 mo
147.279 518.411 147.158 518.29 147.01 518.29 cv
146.861 518.29 146.74 518.411 146.74 518.56 cv
146.74 518.709 146.861 518.83 147.01 518.83 cv
147.158 518.83 147.279 518.709 147.279 518.56 cv
.75021 .679683 .670222 .90164 cmyk
ef
148.683 516.175 mo
148.683 515.365 li
.69482 .6318 .621515 .583612 cmyk
@
148.963 515.646 mo
148.963 515.497 148.842 515.376 148.693 515.376 cv
148.544 515.376 148.423 515.497 148.423 515.646 cv
148.423 515.795 148.544 515.916 148.693 515.916 cv
148.842 515.916 148.963 515.795 148.963 515.646 cv
.75021 .679683 .670222 .90164 cmyk
ef
150.302 516.444 mo
150.302 515.635 li
.69482 .6318 .621515 .583612 cmyk
@
150.518 515.905 mo
150.518 515.756 150.397 515.635 150.248 515.635 cv
150.099 515.635 149.978 515.756 149.978 515.905 cv
149.978 516.054 150.099 516.175 150.248 516.175 cv
150.397 516.175 150.518 516.054 150.518 515.905 cv
.75021 .679683 .670222 .90164 cmyk
ef
151.921 513.746 mo
151.921 512.667 li
.69482 .6318 .621515 .583612 cmyk
@
152.201 513.25 mo
152.201 513.101 152.08 512.98 151.931 512.98 cv
151.783 512.98 151.662 513.101 151.662 513.25 cv
151.662 513.398 151.783 513.519 151.931 513.519 cv
152.08 513.519 152.201 513.398 152.201 513.25 cv
.75021 .679683 .670222 .90164 cmyk
ef
153.81 512.127 mo
153.81 511.317 li
.69482 .6318 .621515 .583612 cmyk
@
154.079 511.825 mo
154.079 511.676 153.958 511.555 153.809 511.555 cv
153.661 511.555 153.54 511.676 153.54 511.825 cv
153.54 511.974 153.661 512.095 153.809 512.095 cv
153.958 512.095 154.079 511.974 154.079 511.825 cv
.75021 .679683 .670222 .90164 cmyk
ef
155.429 511.587 mo
155.429 510.508 li
.69482 .6318 .621515 .583612 cmyk
@
155.698 511.048 mo
155.698 510.899 155.577 510.778 155.429 510.778 cv
155.28 510.778 155.159 510.899 155.159 511.048 cv
155.159 511.197 155.28 511.318 155.429 511.318 cv
155.577 511.318 155.698 511.197 155.698 511.048 cv
.75021 .679683 .670222 .90164 cmyk
ef
157.048 509.698 mo
157.048 508.889 li
.69482 .6318 .621515 .583612 cmyk
@
157.318 509.169 mo
157.318 509.021 157.197 508.9 157.048 508.9 cv
156.899 508.9 156.778 509.021 156.778 509.169 cv
156.778 509.319 156.899 509.439 157.048 509.439 cv
157.197 509.439 157.318 509.319 157.318 509.169 cv
.75021 .679683 .670222 .90164 cmyk
ef
158.667 508.079 mo
158.667 507 li
.69482 .6318 .621515 .583612 cmyk
@
158.936 507.551 mo
158.936 507.401 158.816 507.281 158.667 507.281 cv
158.518 507.281 158.397 507.401 158.397 507.551 cv
158.397 507.699 158.518 507.82 158.667 507.82 cv
158.816 507.82 158.936 507.699 158.936 507.551 cv
.75021 .679683 .670222 .90164 cmyk
ef
160.556 507.81 mo
160.556 506.73 li
.69482 .6318 .621515 .583612 cmyk
@
160.815 507.291 mo
160.815 507.142 160.694 507.022 160.545 507.022 cv
160.396 507.022 160.275 507.142 160.275 507.291 cv
160.275 507.44 160.396 507.561 160.545 507.561 cv
160.694 507.561 160.815 507.44 160.815 507.291 cv
.75021 .679683 .670222 .90164 cmyk
ef
162.175 505.381 mo
162.175 504.302 li
.69482 .6318 .621515 .583612 cmyk
@
162.434 504.831 mo
162.434 504.681 162.313 504.561 162.164 504.561 cv
162.015 504.561 161.894 504.681 161.894 504.831 cv
161.894 504.979 162.015 505.1 162.164 505.1 cv
162.313 505.1 162.434 504.979 162.434 504.831 cv
.75021 .679683 .670222 .90164 cmyk
ef
163.794 503.762 mo
163.794 502.683 li
.69482 .6318 .621515 .583612 cmyk
@
164.053 503.276 mo
164.053 503.127 163.932 503.006 163.783 503.006 cv
163.634 503.006 163.513 503.127 163.513 503.276 cv
163.513 503.425 163.634 503.546 163.783 503.546 cv
163.932 503.546 164.053 503.425 164.053 503.276 cv
.75021 .679683 .670222 .90164 cmyk
ef
165.683 502.143 mo
165.683 501.333 li
.69482 .6318 .621515 .583612 cmyk
@
165.931 501.592 mo
165.931 501.443 165.81 501.323 165.661 501.323 cv
165.512 501.323 165.391 501.443 165.391 501.592 cv
165.391 501.741 165.512 501.862 165.661 501.862 cv
165.81 501.862 165.931 501.741 165.931 501.592 cv
.75021 .679683 .670222 .90164 cmyk
ef
167.302 500.524 mo
167.302 499.444 li
.69482 .6318 .621515 .583612 cmyk
@
167.615 500.038 mo
167.615 499.889 167.494 499.768 167.345 499.768 cv
167.196 499.768 167.075 499.889 167.075 500.038 cv
167.075 500.187 167.196 500.308 167.345 500.308 cv
167.494 500.308 167.615 500.187 167.615 500.038 cv
.75021 .679683 .670222 .90164 cmyk
ef
168.921 499.984 mo
168.921 498.905 li
.69482 .6318 .621515 .583612 cmyk
@
169.169 499.455 mo
169.169 499.306 169.048 499.185 168.899 499.185 cv
168.75 499.185 168.629 499.306 168.629 499.455 cv
168.629 499.604 168.75 499.725 168.899 499.725 cv
169.048 499.725 169.169 499.604 169.169 499.455 cv
.75021 .679683 .670222 .90164 cmyk
ef
170.54 497.016 mo
170.54 495.937 li
.69482 .6318 .621515 .583612 cmyk
@
170.853 496.476 mo
170.853 496.327 170.732 496.206 170.583 496.206 cv
170.434 496.206 170.313 496.327 170.313 496.476 cv
170.313 496.625 170.434 496.746 170.583 496.746 cv
170.732 496.746 170.853 496.625 170.853 496.476 cv
.75021 .679683 .670222 .90164 cmyk
ef
172.429 495.127 mo
172.429 494.048 li
.69482 .6318 .621515 .583612 cmyk
@
172.666 494.598 mo
172.666 494.449 172.545 494.328 172.396 494.328 cv
172.247 494.328 172.126 494.449 172.126 494.598 cv
172.126 494.747 172.247 494.868 172.396 494.868 cv
172.545 494.868 172.666 494.747 172.666 494.598 cv
.75021 .679683 .670222 .90164 cmyk
ef
174.048 493.778 mo
174.048 492.698 li
.69482 .6318 .621515 .583612 cmyk
@
174.35 493.238 mo
174.35 493.089 174.229 492.968 174.08 492.968 cv
173.931 492.968 173.81 493.089 173.81 493.238 cv
173.81 493.387 173.931 493.508 174.08 493.508 cv
174.229 493.508 174.35 493.387 174.35 493.238 cv
.75021 .679683 .670222 .90164 cmyk
ef
175.667 491.619 mo
175.667 490.54 li
.69482 .6318 .621515 .583612 cmyk
@
175.904 491.101 mo
175.904 490.952 175.783 490.831 175.634 490.831 cv
175.485 490.831 175.364 490.952 175.364 491.101 cv
175.364 491.25 175.485 491.371 175.634 491.371 cv
175.783 491.371 175.904 491.25 175.904 491.101 cv
.75021 .679683 .670222 .90164 cmyk
ef
177.556 489.46 mo
177.556 488.381 li
.69482 .6318 .621515 .583612 cmyk
@
177.847 488.899 mo
177.847 488.75 177.726 488.629 177.577 488.629 cv
177.428 488.629 177.307 488.75 177.307 488.899 cv
177.307 489.048 177.428 489.169 177.577 489.169 cv
177.726 489.169 177.847 489.048 177.847 488.899 cv
.75021 .679683 .670222 .90164 cmyk
ef
179.175 488.651 mo
179.175 487.571 li
.69482 .6318 .621515 .583612 cmyk
@
179.401 488.122 mo
179.401 487.973 179.28 487.852 179.131 487.852 cv
178.982 487.852 178.862 487.973 178.862 488.122 cv
178.862 488.271 178.982 488.392 179.131 488.392 cv
179.28 488.392 179.401 488.271 179.401 488.122 cv
.75021 .679683 .670222 .90164 cmyk
ef
180.794 486.222 mo
180.794 485.143 li
.69482 .6318 .621515 .583612 cmyk
@
181.085 485.661 mo
181.085 485.512 180.964 485.391 180.815 485.391 cv
180.666 485.391 180.545 485.512 180.545 485.661 cv
180.545 485.81 180.666 485.931 180.815 485.931 cv
180.964 485.931 181.085 485.81 181.085 485.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
182.413 485.143 mo
182.413 483.794 li
.69482 .6318 .621515 .583612 cmyk
@
182.639 484.625 mo
182.639 484.476 182.518 484.355 182.37 484.355 cv
182.221 484.355 182.1 484.476 182.1 484.625 cv
182.1 484.774 182.221 484.895 182.37 484.895 cv
182.518 484.895 182.639 484.774 182.639 484.625 cv
.75021 .679683 .670222 .90164 cmyk
ef
184.302 482.175 mo
184.302 481.095 li
.69482 .6318 .621515 .583612 cmyk
@
184.582 481.646 mo
184.582 481.497 184.461 481.376 184.312 481.376 cv
184.163 481.376 184.042 481.497 184.042 481.646 cv
184.042 481.795 184.163 481.916 184.312 481.916 cv
184.461 481.916 184.582 481.795 184.582 481.646 cv
.75021 .679683 .670222 .90164 cmyk
ef
185.921 477.048 mo
185.921 475.968 li
.69482 .6318 .621515 .583612 cmyk
@
186.137 476.465 mo
186.137 476.316 186.016 476.195 185.867 476.195 cv
185.718 476.195 185.597 476.316 185.597 476.465 cv
185.597 476.614 185.718 476.735 185.867 476.735 cv
186.016 476.735 186.137 476.614 186.137 476.465 cv
.75021 .679683 .670222 .90164 cmyk
ef
187.54 467.064 mo
187.54 465.714 li
.69482 .6318 .621515 .583612 cmyk
@
187.82 466.491 mo
187.82 466.342 187.699 466.222 187.551 466.222 cv
187.402 466.222 187.281 466.342 187.281 466.491 cv
187.281 466.64 187.402 466.761 187.551 466.761 cv
187.699 466.761 187.82 466.64 187.82 466.491 cv
.75021 .679683 .670222 .90164 cmyk
ef
189.159 440.889 mo
189.159 439.54 li
.69482 .6318 .621515 .583612 cmyk
@
189.375 440.069 mo
189.375 439.92 189.254 439.799 189.105 439.799 cv
188.956 439.799 188.835 439.92 188.835 440.069 cv
188.835 440.217 188.956 440.338 189.105 440.338 cv
189.254 440.338 189.375 440.217 189.375 440.069 cv
.75021 .679683 .670222 .90164 cmyk
ef
191.048 404.191 mo
191.048 402.571 li
.69482 .6318 .621515 .583612 cmyk
@
191.318 403.413 mo
191.318 403.264 191.197 403.143 191.048 403.143 cv
190.899 403.143 190.778 403.264 190.778 403.413 cv
190.778 403.562 190.899 403.683 191.048 403.683 cv
191.197 403.683 191.318 403.562 191.318 403.413 cv
.75021 .679683 .670222 .90164 cmyk
ef
192.667 390.159 mo
192.667 388.27 li
.69482 .6318 .621515 .583612 cmyk
@
192.936 389.36 mo
192.936 389.211 192.816 389.09 192.667 389.09 cv
192.518 389.09 192.397 389.211 192.397 389.36 cv
192.397 389.509 192.518 389.63 192.667 389.63 cv
192.816 389.63 192.936 389.509 192.936 389.36 cv
.75021 .679683 .670222 .90164 cmyk
ef
194.286 397.984 mo
194.286 396.095 li
.69482 .6318 .621515 .583612 cmyk
@
194.556 397.196 mo
194.556 397.047 194.435 396.926 194.286 396.926 cv
194.137 396.926 194.016 397.047 194.016 397.196 cv
194.016 397.345 194.137 397.466 194.286 397.466 cv
194.435 397.466 194.556 397.345 194.556 397.196 cv
.75021 .679683 .670222 .90164 cmyk
ef
196.175 419.302 mo
196.175 417.952 li
.69482 .6318 .621515 .583612 cmyk
@
196.434 418.762 mo
196.434 418.613 196.313 418.492 196.164 418.492 cv
196.015 418.492 195.894 418.613 195.894 418.762 cv
195.894 418.911 196.015 419.032 196.164 419.032 cv
196.313 419.032 196.434 418.911 196.434 418.762 cv
.75021 .679683 .670222 .90164 cmyk
ef
197.794 452.762 mo
197.794 451.413 li
.69482 .6318 .621515 .583612 cmyk
@
198.053 452.244 mo
198.053 452.095 197.932 451.974 197.783 451.974 cv
197.634 451.974 197.513 452.095 197.513 452.244 cv
197.513 452.393 197.634 452.514 197.783 452.514 cv
197.932 452.514 198.053 452.393 198.053 452.244 cv
.75021 .679683 .670222 .90164 cmyk
ef
199.413 497.556 mo
199.413 496.476 li
.69482 .6318 .621515 .583612 cmyk
@
199.672 497.059 mo
199.672 496.91 199.551 496.789 199.402 496.789 cv
199.253 496.789 199.132 496.91 199.132 497.059 cv
199.132 497.208 199.253 497.329 199.402 497.329 cv
199.551 497.329 199.672 497.208 199.672 497.059 cv
.75021 .679683 .670222 .90164 cmyk
ef
201.032 526.159 mo
201.032 525.619 li
.69482 .6318 .621515 .583612 cmyk
@
201.291 525.943 mo
201.291 525.794 201.17 525.673 201.021 525.673 cv
200.872 525.673 200.751 525.794 200.751 525.943 cv
200.751 526.092 200.872 526.213 201.021 526.213 cv
201.17 526.213 201.291 526.092 201.291 525.943 cv
.75021 .679683 .670222 .90164 cmyk
ef
202.921 541 mo
202.921 540.46 li
.69482 .6318 .621515 .583612 cmyk
@
203.234 540.709 mo
203.234 540.56 203.113 540.439 202.964 540.439 cv
202.815 540.439 202.694 540.56 202.694 540.709 cv
202.694 540.857 202.815 540.978 202.964 540.978 cv
203.113 540.978 203.234 540.857 203.234 540.709 cv
.75021 .679683 .670222 .90164 cmyk
ef
204.54 547.206 mo
204.54 546.937 li
.69482 .6318 .621515 .583612 cmyk
@
204.788 546.926 mo
204.788 546.777 204.667 546.656 204.518 546.656 cv
204.369 546.656 204.248 546.777 204.248 546.926 cv
204.248 547.075 204.369 547.196 204.518 547.196 cv
204.667 547.196 204.788 547.075 204.788 546.926 cv
.75021 .679683 .670222 .90164 cmyk
ef
206.159 550.444 mo
206.159 550.175 li
.69482 .6318 .621515 .583612 cmyk
@
206.472 550.164 mo
206.472 550.015 206.351 549.894 206.202 549.894 cv
206.053 549.894 205.932 550.015 205.932 550.164 cv
205.932 550.313 206.053 550.434 206.202 550.434 cv
206.351 550.434 206.472 550.313 206.472 550.164 cv
.75021 .679683 .670222 .90164 cmyk
ef
208.048 552.063 mo
.69482 .6318 .621515 .583612 cmyk
@
208.285 552.107 mo
208.285 551.958 208.164 551.837 208.015 551.837 cv
207.866 551.837 207.745 551.958 207.745 552.107 cv
207.745 552.256 207.866 552.376 208.015 552.376 cv
208.164 552.376 208.285 552.256 208.285 552.107 cv
.75021 .679683 .670222 .90164 cmyk
ef
209.667 552.873 mo
209.667 552.603 li
.69482 .6318 .621515 .583612 cmyk
@
209.969 552.625 mo
209.969 552.476 209.848 552.355 209.699 552.355 cv
209.55 552.355 209.429 552.476 209.429 552.625 cv
209.429 552.774 209.55 552.895 209.699 552.895 cv
209.848 552.895 209.969 552.774 209.969 552.625 cv
.75021 .679683 .670222 .90164 cmyk
ef
211.286 553.413 mo
211.286 553.143 li
.69482 .6318 .621515 .583612 cmyk
@
211.523 553.402 mo
211.523 553.253 211.402 553.132 211.253 553.132 cv
211.104 553.132 210.984 553.253 210.984 553.402 cv
210.984 553.551 211.104 553.672 211.253 553.672 cv
211.402 553.672 211.523 553.551 211.523 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
212.905 553.683 mo
.69482 .6318 .621515 .583612 cmyk
@
213.207 553.661 mo
213.207 553.512 213.086 553.391 212.937 553.391 cv
212.788 553.391 212.667 553.512 212.667 553.661 cv
212.667 553.81 212.788 553.931 212.937 553.931 cv
213.086 553.931 213.207 553.81 213.207 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
214.794 553.683 mo
.69482 .6318 .621515 .583612 cmyk
@
215.02 553.661 mo
215.02 553.512 214.899 553.391 214.751 553.391 cv
214.602 553.391 214.481 553.512 214.481 553.661 cv
214.481 553.81 214.602 553.931 214.751 553.931 cv
214.899 553.931 215.02 553.81 215.02 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
216.413 553.952 mo
.69482 .6318 .621515 .583612 cmyk
@
216.704 553.92 mo
216.704 553.771 216.583 553.65 216.434 553.65 cv
216.285 553.65 216.164 553.771 216.164 553.92 cv
216.164 554.069 216.285 554.19 216.434 554.19 cv
216.583 554.19 216.704 554.069 216.704 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
218.032 553.952 mo
.69482 .6318 .621515 .583612 cmyk
@
218.258 553.92 mo
218.258 553.771 218.137 553.65 217.989 553.65 cv
217.84 553.65 217.719 553.771 217.719 553.92 cv
217.719 554.069 217.84 554.19 217.989 554.19 cv
218.137 554.19 218.258 554.069 218.258 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
219.651 553.952 mo
.69482 .6318 .621515 .583612 cmyk
@
219.942 553.92 mo
219.942 553.771 219.821 553.65 219.672 553.65 cv
219.523 553.65 219.402 553.771 219.402 553.92 cv
219.402 554.069 219.523 554.19 219.672 554.19 cv
219.821 554.19 219.942 554.069 219.942 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
221.54 553.952 mo
.69482 .6318 .621515 .583612 cmyk
@
221.756 553.92 mo
221.756 553.771 221.635 553.65 221.486 553.65 cv
221.337 553.65 221.216 553.771 221.216 553.92 cv
221.216 554.069 221.337 554.19 221.486 554.19 cv
221.635 554.19 221.756 554.069 221.756 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
223.159 553.952 mo
.69482 .6318 .621515 .583612 cmyk
@
223.439 553.92 mo
223.439 553.771 223.318 553.65 223.169 553.65 cv
223.021 553.65 222.9 553.771 222.9 553.92 cv
222.9 554.069 223.021 554.19 223.169 554.19 cv
223.318 554.19 223.439 554.069 223.439 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
224.778 553.952 mo
.69482 .6318 .621515 .583612 cmyk
@
224.994 553.92 mo
224.994 553.771 224.873 553.65 224.724 553.65 cv
224.575 553.65 224.454 553.771 224.454 553.92 cv
224.454 554.069 224.575 554.19 224.724 554.19 cv
224.873 554.19 224.994 554.069 224.994 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
122.508 553.952 mo
132.492 553.952 li
132.492 539.921 li
134.111 539.921 li
134.111 529.667 li
136 529.667 li
136 527.508 li
137.619 527.508 li
137.619 525.349 li
139.238 525.349 li
139.238 524.54 li
141.127 524.54 li
141.127 523.46 li
142.746 523.46 li
142.746 520.762 li
144.365 520.762 li
144.365 519.413 li
145.984 519.413 li
145.984 518.603 li
147.873 518.603 li
147.873 515.635 li
149.492 515.635 li
149.492 515.905 li
151.111 515.905 li
151.111 513.206 li
153 513.206 li
153 511.857 li
154.619 511.857 li
154.619 511.048 li
156.238 511.048 li
156.238 509.159 li
157.857 509.159 li
157.857 507.54 li
159.746 507.54 li
159.746 507.27 li
161.365 507.27 li
161.365 504.841 li
162.984 504.841 li
162.984 503.222 li
164.603 503.222 li
164.603 501.603 li
166.492 501.603 li
166.492 499.984 li
168.111 499.984 li
168.111 499.444 li
169.73 499.444 li
169.73 496.476 li
171.619 496.476 li
171.619 494.587 li
173.238 494.587 li
173.238 493.238 li
174.857 493.238 li
174.857 491.079 li
176.476 491.079 li
176.476 488.921 li
178.365 488.921 li
178.365 488.111 li
179.984 488.111 li
179.984 485.683 li
181.603 485.683 li
181.603 484.603 li
183.492 484.603 li
183.492 481.635 li
185.111 481.635 li
185.111 476.508 li
186.73 476.508 li
186.73 466.524 li
188.349 466.524 li
188.349 440.079 li
190.238 440.079 li
190.238 403.381 li
191.857 403.381 li
191.857 389.349 li
193.476 389.349 li
193.476 397.175 li
195.095 397.175 li
195.095 418.762 li
196.984 418.762 li
196.984 452.222 li
198.603 452.222 li
198.603 497.016 li
200.222 497.016 li
200.222 525.889 li
202.111 525.889 li
202.111 540.73 li
203.73 540.73 li
203.73 546.937 li
205.349 546.937 li
205.349 550.175 li
206.968 550.175 li
206.968 552.063 li
208.857 552.063 li
208.857 552.603 li
210.476 552.603 li
210.476 553.413 li
212.095 553.413 li
212.095 553.683 li
215.603 553.683 li
215.603 553.952 li
501.905 553.952 li
.69482 .6318 .621515 .583612 cmyk
@
.75021 .679683 .670222 .90164 cmyk
ATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf345.186 213.947 mo(PYTHIA det. level)[11.2131 11.2131 10.2715 12.1376 4.67349 11.2131 4.67346 9.34698 9.34698 4.67346 4.67349 4.67349 3.73209 9.34692 8.40558 9.34698 0 ]xsh345.186 237.483 mo(R = 0.3, 0%-10%)[12.1376 4.67352 9.81769 4.67346 9.34698 4.67346 9.34698 4.67349 4.67346 9.34698 14.9452 5.59799 9.34698 9.34695 0 ]xsh188.889 450.064 mo
188.889 447.365 li
189.159 444.667 li
189.159 441.698 li
189.429 439 li
189.429 436.302 li
189.698 433.603 li
189.698 428.206 li
189.968 425.508 li
189.968 423.079 li
190.238 420.651 li
190.238 418.222 li
190.508 415.794 li
190.508 413.365 li
190.778 411.206 li
190.778 406.889 li
191.048 404.73 li
191.048 402.841 li
191.317 400.952 li
191.317 399.333 li
191.587 397.714 li
191.587 396.095 li
191.857 394.746 li
191.857 393.397 li
192.127 392.318 li
192.127 390.159 li
192.397 389.349 li
192.397 388.54 li
192.667 388 li
192.667 387.46 li
192.936 387.191 li
192.936 386.921 li
193.476 386.921 li
193.476 387.73 li
193.746 388.27 li
193.746 389.079 li
194.016 389.619 li
194.016 390.698 li
194.286 391.778 li
194.286 392.857 li
194.556 394.206 li
194.556 395.556 li
194.825 396.905 li
194.825 400.143 li
195.095 402.032 li
195.095 403.921 li
195.365 405.81 li
195.365 407.968 li
195.635 410.127 li
195.635 412.286 li
195.905 414.714 li
195.905 419.302 li
196.175 421.73 li
196.175 424.429 li
196.444 426.857 li
196.444 429.556 li
196.714 432.254 li
196.714 434.952 li
196.984 437.651 li
196.984 440.349 li
197.254 443.317 li
197.254 448.714 li
197.524 451.683 li
197.524 454.381 li
197.794 457.349 li
197.794 460.048 li
198.063 462.746 li
198.063 465.714 li
198.333 468.413 li
198.333 471.111 li
198.603 473.81 li
198.603 479.206 li
198.873 481.635 li
198.873 484.333 li
199.143 486.762 li
199.143 489.19 li
199.413 491.889 li
199.413 494.048 li
199.683 496.476 li
199.683 501.064 li
199.952 503.222 li
199.952 505.381 li
200.222 507.54 li
200.222 509.429 li
200.492 511.587 li
200.492 513.476 li
200.762 515.365 li
200.762 516.984 li
200.762 516.984 mo
201.032 518.873 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
.75021 .679683 .670222 .90164 cmyk
ATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf339.584 366.367 mo(= 6%)[9.81766 4.67349 9.34695 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf332.86 375.331 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf320.531 366.367 mo(/p)[4.67346 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf313.806 375.331 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf301.477 366.367 mo( p)[4.67349 0 ]xshATEDLP+Symbol*1 [16.8111 0 0 -16.8111 0 0 ]msf294.753 366.367 mo( )shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf195.008 366.367 mo(=10.0 GeV/c,  )[9.81769 9.34697 9.34698 4.67349 9.34697 4.67348 13.079 9.34695 11.2131 4.67349 8.40558 4.67346 4.67346 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf188.284 375.331 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf180.439 366.367 mo(p)sh138.429 546.397 mo
138.429 546.127 li
.597284 .512352 .507713 .201328 cmyk
@
138.731 546.149 mo
138.731 546 138.61 545.879 138.461 545.879 cv
138.312 545.879 138.191 546 138.191 546.149 cv
138.191 546.297 138.312 546.418 138.461 546.418 cv
138.61 546.418 138.731 546.297 138.731 546.149 cv
.75021 .679683 .670222 .90164 cmyk
ef
140.048 541.27 mo
140.048 540.73 li
.597284 .512352 .507713 .201328 cmyk
@
140.285 540.968 mo
140.285 540.819 140.164 540.698 140.015 540.698 cv
139.866 540.698 139.745 540.819 139.745 540.968 cv
139.745 541.117 139.866 541.237 140.015 541.237 cv
140.164 541.237 140.285 541.117 140.285 540.968 cv
.75021 .679683 .670222 .90164 cmyk
ef
141.936 540.73 mo
141.936 540.19 li
.597284 .512352 .507713 .201328 cmyk
@
142.228 540.449 mo
142.228 540.301 142.107 540.18 141.958 540.18 cv
141.809 540.18 141.688 540.301 141.688 540.449 cv
141.688 540.598 141.809 540.719 141.958 540.719 cv
142.107 540.719 142.228 540.598 142.228 540.449 cv
.75021 .679683 .670222 .90164 cmyk
ef
143.556 539.651 mo
143.556 539.111 li
.597284 .512352 .507713 .201328 cmyk
@
143.782 539.413 mo
143.782 539.264 143.661 539.143 143.512 539.143 cv
143.363 539.143 143.242 539.264 143.242 539.413 cv
143.242 539.562 143.363 539.683 143.512 539.683 cv
143.661 539.683 143.782 539.562 143.782 539.413 cv
.75021 .679683 .670222 .90164 cmyk
ef
145.175 539.111 mo
145.175 538.571 li
.597284 .512352 .507713 .201328 cmyk
@
145.466 538.895 mo
145.466 538.746 145.345 538.625 145.196 538.625 cv
145.047 538.625 144.926 538.746 144.926 538.895 cv
144.926 539.044 145.047 539.165 145.196 539.165 cv
145.345 539.165 145.466 539.044 145.466 538.895 cv
.75021 .679683 .670222 .90164 cmyk
ef
147.063 537.762 mo
147.063 537.222 li
.597284 .512352 .507713 .201328 cmyk
@
147.279 537.47 mo
147.279 537.321 147.158 537.201 147.01 537.201 cv
146.861 537.201 146.74 537.321 146.74 537.47 cv
146.74 537.619 146.861 537.74 147.01 537.74 cv
147.158 537.74 147.279 537.619 147.279 537.47 cv
.75021 .679683 .670222 .90164 cmyk
ef
148.683 536.683 mo
148.683 536.143 li
.597284 .512352 .507713 .201328 cmyk
@
148.963 536.434 mo
148.963 536.285 148.842 536.164 148.693 536.164 cv
148.544 536.164 148.423 536.285 148.423 536.434 cv
148.423 536.583 148.544 536.704 148.693 536.704 cv
148.842 536.704 148.963 536.583 148.963 536.434 cv
.75021 .679683 .670222 .90164 cmyk
ef
150.302 535.873 mo
150.302 535.333 li
.597284 .512352 .507713 .201328 cmyk
@
150.518 535.657 mo
150.518 535.508 150.397 535.387 150.248 535.387 cv
150.099 535.387 149.978 535.508 149.978 535.657 cv
149.978 535.806 150.099 535.927 150.248 535.927 cv
150.397 535.927 150.518 535.806 150.518 535.657 cv
.75021 .679683 .670222 .90164 cmyk
ef
151.921 534.794 mo
151.921 533.984 li
.597284 .512352 .507713 .201328 cmyk
@
152.201 534.232 mo
152.201 534.083 152.08 533.962 151.931 533.962 cv
151.783 533.962 151.662 534.083 151.662 534.232 cv
151.662 534.381 151.783 534.502 151.931 534.502 cv
152.08 534.502 152.201 534.381 152.201 534.232 cv
.75021 .679683 .670222 .90164 cmyk
ef
153.81 534.524 mo
153.81 533.714 li
.597284 .512352 .507713 .201328 cmyk
@
154.079 534.232 mo
154.079 534.083 153.958 533.962 153.809 533.962 cv
153.661 533.962 153.54 534.083 153.54 534.232 cv
153.54 534.381 153.661 534.502 153.809 534.502 cv
153.958 534.502 154.079 534.381 154.079 534.232 cv
.75021 .679683 .670222 .90164 cmyk
ef
155.429 533.984 mo
155.429 533.175 li
.597284 .512352 .507713 .201328 cmyk
@
155.698 533.455 mo
155.698 533.306 155.577 533.185 155.429 533.185 cv
155.28 533.185 155.159 533.306 155.159 533.455 cv
155.159 533.604 155.28 533.725 155.429 533.725 cv
155.577 533.725 155.698 533.604 155.698 533.455 cv
.75021 .679683 .670222 .90164 cmyk
ef
157.048 532.365 mo
157.048 531.556 li
.597284 .512352 .507713 .201328 cmyk
@
157.318 532.095 mo
157.318 531.946 157.197 531.825 157.048 531.825 cv
156.899 531.825 156.778 531.946 156.778 532.095 cv
156.778 532.244 156.899 532.365 157.048 532.365 cv
157.197 532.365 157.318 532.244 157.318 532.095 cv
.75021 .679683 .670222 .90164 cmyk
ef
158.667 531.556 mo
158.667 531.016 li
.597284 .512352 .507713 .201328 cmyk
@
158.936 531.253 mo
158.936 531.104 158.816 530.983 158.667 530.983 cv
158.518 530.983 158.397 531.104 158.397 531.253 cv
158.397 531.402 158.518 531.523 158.667 531.523 cv
158.816 531.523 158.936 531.402 158.936 531.253 cv
.75021 .679683 .670222 .90164 cmyk
ef
160.556 530.476 mo
160.556 529.937 li
.597284 .512352 .507713 .201328 cmyk
@
160.815 530.217 mo
160.815 530.068 160.694 529.947 160.545 529.947 cv
160.396 529.947 160.275 530.068 160.275 530.217 cv
160.275 530.366 160.396 530.487 160.545 530.487 cv
160.694 530.487 160.815 530.366 160.815 530.217 cv
.75021 .679683 .670222 .90164 cmyk
ef
162.175 529.667 mo
162.175 528.857 li
.597284 .512352 .507713 .201328 cmyk
@
162.434 529.44 mo
162.434 529.291 162.313 529.17 162.164 529.17 cv
162.015 529.17 161.894 529.291 161.894 529.44 cv
161.894 529.589 162.015 529.71 162.164 529.71 cv
162.313 529.71 162.434 529.589 162.434 529.44 cv
.75021 .679683 .670222 .90164 cmyk
ef
163.794 527.508 mo
163.794 526.968 li
.597284 .512352 .507713 .201328 cmyk
@
164.053 527.238 mo
164.053 527.089 163.932 526.968 163.783 526.968 cv
163.634 526.968 163.513 527.089 163.513 527.238 cv
163.513 527.387 163.634 527.508 163.783 527.508 cv
163.932 527.508 164.053 527.387 164.053 527.238 cv
.75021 .679683 .670222 .90164 cmyk
ef
165.683 526.159 mo
165.683 525.349 li
.597284 .512352 .507713 .201328 cmyk
@
165.931 525.619 mo
165.931 525.47 165.81 525.349 165.661 525.349 cv
165.512 525.349 165.391 525.47 165.391 525.619 cv
165.391 525.768 165.512 525.889 165.661 525.889 cv
165.81 525.889 165.931 525.768 165.931 525.619 cv
.75021 .679683 .670222 .90164 cmyk
ef
167.302 525.079 mo
167.302 524.27 li
.597284 .512352 .507713 .201328 cmyk
@
167.615 524.518 mo
167.615 524.369 167.494 524.248 167.345 524.248 cv
167.196 524.248 167.075 524.369 167.075 524.518 cv
167.075 524.667 167.196 524.788 167.345 524.788 cv
167.494 524.788 167.615 524.667 167.615 524.518 cv
.75021 .679683 .670222 .90164 cmyk
ef
168.921 523.19 mo
168.921 522.381 li
.597284 .512352 .507713 .201328 cmyk
@
169.169 522.964 mo
169.169 522.815 169.048 522.694 168.899 522.694 cv
168.75 522.694 168.629 522.815 168.629 522.964 cv
168.629 523.113 168.75 523.234 168.899 523.234 cv
169.048 523.234 169.169 523.113 169.169 522.964 cv
.75021 .679683 .670222 .90164 cmyk
ef
170.54 521.302 mo
170.54 520.222 li
.597284 .512352 .507713 .201328 cmyk
@
170.853 520.762 mo
170.853 520.613 170.732 520.492 170.583 520.492 cv
170.434 520.492 170.313 520.613 170.313 520.762 cv
170.313 520.911 170.434 521.032 170.583 521.032 cv
170.732 521.032 170.853 520.911 170.853 520.762 cv
.75021 .679683 .670222 .90164 cmyk
ef
172.429 520.762 mo
172.429 519.952 li
.597284 .512352 .507713 .201328 cmyk
@
172.666 520.503 mo
172.666 520.354 172.545 520.233 172.396 520.233 cv
172.247 520.233 172.126 520.354 172.126 520.503 cv
172.126 520.652 172.247 520.773 172.396 520.773 cv
172.545 520.773 172.666 520.652 172.666 520.503 cv
.75021 .679683 .670222 .90164 cmyk
ef
174.048 520.492 mo
174.048 519.413 li
.597284 .512352 .507713 .201328 cmyk
@
174.35 519.985 mo
174.35 519.836 174.229 519.715 174.08 519.715 cv
173.931 519.715 173.81 519.836 173.81 519.985 cv
173.81 520.134 173.931 520.255 174.08 520.255 cv
174.229 520.255 174.35 520.134 174.35 519.985 cv
.75021 .679683 .670222 .90164 cmyk
ef
175.667 518.603 mo
175.667 517.794 li
.597284 .512352 .507713 .201328 cmyk
@
175.904 518.042 mo
175.904 517.893 175.783 517.772 175.634 517.772 cv
175.485 517.772 175.364 517.893 175.364 518.042 cv
175.364 518.191 175.485 518.312 175.634 518.312 cv
175.783 518.312 175.904 518.191 175.904 518.042 cv
.75021 .679683 .670222 .90164 cmyk
ef
177.556 517.794 mo
177.556 516.714 li
.597284 .512352 .507713 .201328 cmyk
@
177.847 517.265 mo
177.847 517.116 177.726 516.995 177.577 516.995 cv
177.428 516.995 177.307 517.116 177.307 517.265 cv
177.307 517.414 177.428 517.535 177.577 517.535 cv
177.726 517.535 177.847 517.414 177.847 517.265 cv
.75021 .679683 .670222 .90164 cmyk
ef
179.175 516.714 mo
179.175 515.905 li
.597284 .512352 .507713 .201328 cmyk
@
179.401 516.488 mo
179.401 516.339 179.28 516.218 179.131 516.218 cv
178.982 516.218 178.862 516.339 178.862 516.488 cv
178.862 516.637 178.982 516.758 179.131 516.758 cv
179.28 516.758 179.401 516.637 179.401 516.488 cv
.75021 .679683 .670222 .90164 cmyk
ef
180.794 515.905 mo
180.794 515.095 li
.597284 .512352 .507713 .201328 cmyk
@
181.085 515.322 mo
181.085 515.173 180.964 515.052 180.815 515.052 cv
180.666 515.052 180.545 515.173 180.545 515.322 cv
180.545 515.471 180.666 515.592 180.815 515.592 cv
180.964 515.592 181.085 515.471 181.085 515.322 cv
.75021 .679683 .670222 .90164 cmyk
ef
182.413 515.365 mo
182.413 514.556 li
.597284 .512352 .507713 .201328 cmyk
@
182.639 514.804 mo
182.639 514.655 182.518 514.534 182.37 514.534 cv
182.221 514.534 182.1 514.655 182.1 514.804 cv
182.1 514.953 182.221 515.074 182.37 515.074 cv
182.518 515.074 182.639 514.953 182.639 514.804 cv
.75021 .679683 .670222 .90164 cmyk
ef
184.302 513.746 mo
184.302 512.667 li
.597284 .512352 .507713 .201328 cmyk
@
184.582 513.25 mo
184.582 513.101 184.461 512.98 184.312 512.98 cv
184.163 512.98 184.042 513.101 184.042 513.25 cv
184.042 513.398 184.163 513.519 184.312 513.519 cv
184.461 513.519 184.582 513.398 184.582 513.25 cv
.75021 .679683 .670222 .90164 cmyk
ef
185.921 513.206 mo
185.921 512.127 li
.597284 .512352 .507713 .201328 cmyk
@
186.137 512.667 mo
186.137 512.518 186.016 512.397 185.867 512.397 cv
185.718 512.397 185.597 512.518 185.597 512.667 cv
185.597 512.816 185.718 512.936 185.867 512.936 cv
186.016 512.936 186.137 512.816 186.137 512.667 cv
.75021 .679683 .670222 .90164 cmyk
ef
187.54 512.937 mo
187.54 512.127 li
.597284 .512352 .507713 .201328 cmyk
@
187.82 512.667 mo
187.82 512.518 187.699 512.397 187.551 512.397 cv
187.402 512.397 187.281 512.518 187.281 512.667 cv
187.281 512.816 187.402 512.936 187.551 512.936 cv
187.699 512.936 187.82 512.816 187.82 512.667 cv
.75021 .679683 .670222 .90164 cmyk
ef
189.159 511.857 mo
189.159 510.778 li
.597284 .512352 .507713 .201328 cmyk
@
189.375 511.307 mo
189.375 511.158 189.254 511.037 189.105 511.037 cv
188.956 511.037 188.835 511.158 188.835 511.307 cv
188.835 511.456 188.956 511.577 189.105 511.577 cv
189.254 511.577 189.375 511.456 189.375 511.307 cv
.75021 .679683 .670222 .90164 cmyk
ef
191.048 509.429 mo
191.048 508.619 li
.597284 .512352 .507713 .201328 cmyk
@
191.318 508.846 mo
191.318 508.697 191.197 508.576 191.048 508.576 cv
190.899 508.576 190.778 508.697 190.778 508.846 cv
190.778 508.995 190.899 509.116 191.048 509.116 cv
191.197 509.116 191.318 508.995 191.318 508.846 cv
.75021 .679683 .670222 .90164 cmyk
ef
192.667 509.429 mo
192.667 508.349 li
.597284 .512352 .507713 .201328 cmyk
@
192.936 508.846 mo
192.936 508.697 192.816 508.576 192.667 508.576 cv
192.518 508.576 192.397 508.697 192.397 508.846 cv
192.397 508.995 192.518 509.116 192.667 509.116 cv
192.816 509.116 192.936 508.995 192.936 508.846 cv
.75021 .679683 .670222 .90164 cmyk
ef
194.286 508.349 mo
194.286 507.54 li
.597284 .512352 .507713 .201328 cmyk
@
194.556 508.069 mo
194.556 507.92 194.435 507.799 194.286 507.799 cv
194.137 507.799 194.016 507.92 194.016 508.069 cv
194.016 508.217 194.137 508.338 194.286 508.338 cv
194.435 508.338 194.556 508.217 194.556 508.069 cv
.75021 .679683 .670222 .90164 cmyk
ef
196.175 508.079 mo
196.175 507 li
.597284 .512352 .507713 .201328 cmyk
@
196.434 507.551 mo
196.434 507.401 196.313 507.281 196.164 507.281 cv
196.015 507.281 195.894 507.401 195.894 507.551 cv
195.894 507.699 196.015 507.82 196.164 507.82 cv
196.313 507.82 196.434 507.699 196.434 507.551 cv
.75021 .679683 .670222 .90164 cmyk
ef
197.794 506.46 mo
197.794 505.381 li
.597284 .512352 .507713 .201328 cmyk
@
198.053 505.931 mo
198.053 505.783 197.932 505.662 197.783 505.662 cv
197.634 505.662 197.513 505.783 197.513 505.931 cv
197.513 506.08 197.634 506.201 197.783 506.201 cv
197.932 506.201 198.053 506.08 198.053 505.931 cv
.75021 .679683 .670222 .90164 cmyk
ef
199.413 505.381 mo
199.413 504.302 li
.597284 .512352 .507713 .201328 cmyk
@
199.672 504.831 mo
199.672 504.681 199.551 504.561 199.402 504.561 cv
199.253 504.561 199.132 504.681 199.132 504.831 cv
199.132 504.979 199.253 505.1 199.402 505.1 cv
199.551 505.1 199.672 504.979 199.672 504.831 cv
.75021 .679683 .670222 .90164 cmyk
ef
201.032 505.111 mo
201.032 504.032 li
.597284 .512352 .507713 .201328 cmyk
@
201.291 504.571 mo
201.291 504.422 201.17 504.302 201.021 504.302 cv
200.872 504.302 200.751 504.422 200.751 504.571 cv
200.751 504.72 200.872 504.841 201.021 504.841 cv
201.17 504.841 201.291 504.72 201.291 504.571 cv
.75021 .679683 .670222 .90164 cmyk
ef
202.921 504.032 mo
202.921 502.952 li
.597284 .512352 .507713 .201328 cmyk
@
203.234 503.535 mo
203.234 503.386 203.113 503.265 202.964 503.265 cv
202.815 503.265 202.694 503.386 202.694 503.535 cv
202.694 503.684 202.815 503.805 202.964 503.805 cv
203.113 503.805 203.234 503.684 203.234 503.535 cv
.75021 .679683 .670222 .90164 cmyk
ef
204.54 502.413 mo
204.54 501.333 li
.597284 .512352 .507713 .201328 cmyk
@
204.788 501.851 mo
204.788 501.703 204.667 501.582 204.518 501.582 cv
204.369 501.582 204.248 501.703 204.248 501.851 cv
204.248 502 204.369 502.121 204.518 502.121 cv
204.667 502.121 204.788 502 204.788 501.851 cv
.75021 .679683 .670222 .90164 cmyk
ef
206.159 501.873 mo
206.159 500.794 li
.597284 .512352 .507713 .201328 cmyk
@
206.472 501.333 mo
206.472 501.184 206.351 501.064 206.202 501.064 cv
206.053 501.064 205.932 501.184 205.932 501.333 cv
205.932 501.482 206.053 501.603 206.202 501.603 cv
206.351 501.603 206.472 501.482 206.472 501.333 cv
.75021 .679683 .670222 .90164 cmyk
ef
208.048 501.603 mo
208.048 500.524 li
.597284 .512352 .507713 .201328 cmyk
@
208.285 501.074 mo
208.285 500.925 208.164 500.804 208.015 500.804 cv
207.866 500.804 207.745 500.925 207.745 501.074 cv
207.745 501.223 207.866 501.344 208.015 501.344 cv
208.164 501.344 208.285 501.223 208.285 501.074 cv
.75021 .679683 .670222 .90164 cmyk
ef
209.667 499.984 mo
209.667 498.905 li
.597284 .512352 .507713 .201328 cmyk
@
209.969 499.455 mo
209.969 499.306 209.848 499.185 209.699 499.185 cv
209.55 499.185 209.429 499.306 209.429 499.455 cv
209.429 499.604 209.55 499.725 209.699 499.725 cv
209.848 499.725 209.969 499.604 209.969 499.455 cv
.75021 .679683 .670222 .90164 cmyk
ef
211.286 499.175 mo
211.286 498.095 li
.597284 .512352 .507713 .201328 cmyk
@
211.523 498.613 mo
211.523 498.464 211.402 498.344 211.253 498.344 cv
211.104 498.344 210.984 498.464 210.984 498.613 cv
210.984 498.762 211.104 498.883 211.253 498.883 cv
211.402 498.883 211.523 498.762 211.523 498.613 cv
.75021 .679683 .670222 .90164 cmyk
ef
212.905 498.365 mo
212.905 497.286 li
.597284 .512352 .507713 .201328 cmyk
@
213.207 497.836 mo
213.207 497.687 213.086 497.566 212.937 497.566 cv
212.788 497.566 212.667 497.687 212.667 497.836 cv
212.667 497.985 212.788 498.106 212.937 498.106 cv
213.086 498.106 213.207 497.985 213.207 497.836 cv
.75021 .679683 .670222 .90164 cmyk
ef
214.794 496.476 mo
214.794 495.397 li
.597284 .512352 .507713 .201328 cmyk
@
215.02 495.893 mo
215.02 495.744 214.899 495.624 214.751 495.624 cv
214.602 495.624 214.481 495.744 214.481 495.893 cv
214.481 496.042 214.602 496.163 214.751 496.163 cv
214.899 496.163 215.02 496.042 215.02 495.893 cv
.75021 .679683 .670222 .90164 cmyk
ef
216.413 495.667 mo
216.413 494.587 li
.597284 .512352 .507713 .201328 cmyk
@
216.704 495.116 mo
216.704 494.967 216.583 494.846 216.434 494.846 cv
216.285 494.846 216.164 494.967 216.164 495.116 cv
216.164 495.265 216.285 495.386 216.434 495.386 cv
216.583 495.386 216.704 495.265 216.704 495.116 cv
.75021 .679683 .670222 .90164 cmyk
ef
218.032 492.159 mo
218.032 491.079 li
.597284 .512352 .507713 .201328 cmyk
@
218.258 491.619 mo
218.258 491.47 218.137 491.349 217.989 491.349 cv
217.84 491.349 217.719 491.47 217.719 491.619 cv
217.719 491.768 217.84 491.889 217.989 491.889 cv
218.137 491.889 218.258 491.768 218.258 491.619 cv
.75021 .679683 .670222 .90164 cmyk
ef
219.651 489.19 mo
219.651 487.841 li
.597284 .512352 .507713 .201328 cmyk
@
219.942 488.381 mo
219.942 488.232 219.821 488.111 219.672 488.111 cv
219.523 488.111 219.402 488.232 219.402 488.381 cv
219.402 488.53 219.523 488.651 219.672 488.651 cv
219.821 488.651 219.942 488.53 219.942 488.381 cv
.75021 .679683 .670222 .90164 cmyk
ef
221.54 481.635 mo
221.54 480.286 li
.597284 .512352 .507713 .201328 cmyk
@
221.756 480.869 mo
221.756 480.72 221.635 480.599 221.486 480.599 cv
221.337 480.599 221.216 480.72 221.216 480.869 cv
221.216 481.017 221.337 481.138 221.486 481.138 cv
221.635 481.138 221.756 481.017 221.756 480.869 cv
.75021 .679683 .670222 .90164 cmyk
ef
223.159 470.571 mo
223.159 469.222 li
.597284 .512352 .507713 .201328 cmyk
@
223.439 469.729 mo
223.439 469.581 223.318 469.46 223.169 469.46 cv
223.021 469.46 222.9 469.581 222.9 469.729 cv
222.9 469.879 223.021 469.999 223.169 469.999 cv
223.318 469.999 223.439 469.879 223.439 469.729 cv
.75021 .679683 .670222 .90164 cmyk
ef
224.778 458.968 mo
224.778 457.349 li
.597284 .512352 .507713 .201328 cmyk
@
224.994 458.202 mo
224.994 458.053 224.873 457.932 224.724 457.932 cv
224.575 457.932 224.454 458.053 224.454 458.202 cv
224.454 458.351 224.575 458.472 224.724 458.472 cv
224.873 458.472 224.994 458.351 224.994 458.202 cv
.75021 .679683 .670222 .90164 cmyk
ef
226.667 451.952 mo
226.667 450.603 li
.597284 .512352 .507713 .201328 cmyk
@
226.936 451.467 mo
226.936 451.318 226.816 451.197 226.667 451.197 cv
226.518 451.197 226.397 451.318 226.397 451.467 cv
226.397 451.616 226.518 451.737 226.667 451.737 cv
226.816 451.737 226.936 451.616 226.936 451.467 cv
.75021 .679683 .670222 .90164 cmyk
ef
228.286 456 mo
228.286 454.651 li
.597284 .512352 .507713 .201328 cmyk
@
228.556 455.482 mo
228.556 455.333 228.435 455.212 228.286 455.212 cv
228.137 455.212 228.016 455.333 228.016 455.482 cv
228.016 455.631 228.137 455.752 228.286 455.752 cv
228.435 455.752 228.556 455.631 228.556 455.482 cv
.75021 .679683 .670222 .90164 cmyk
ef
229.905 469.222 mo
229.905 467.873 li
.597284 .512352 .507713 .201328 cmyk
@
230.175 468.693 mo
230.175 468.544 230.054 468.423 229.905 468.423 cv
229.756 468.423 229.635 468.544 229.635 468.693 cv
229.635 468.842 229.756 468.963 229.905 468.963 cv
230.054 468.963 230.175 468.842 230.175 468.693 cv
.75021 .679683 .670222 .90164 cmyk
ef
231.524 487.032 mo
231.524 485.683 li
.597284 .512352 .507713 .201328 cmyk
@
231.794 486.503 mo
231.794 486.354 231.673 486.233 231.524 486.233 cv
231.375 486.233 231.254 486.354 231.254 486.503 cv
231.254 486.652 231.375 486.773 231.524 486.773 cv
231.673 486.773 231.794 486.652 231.794 486.503 cv
.75021 .679683 .670222 .90164 cmyk
ef
233.413 506.73 mo
233.413 505.651 li
.597284 .512352 .507713 .201328 cmyk
@
233.672 506.19 mo
233.672 506.042 233.551 505.921 233.402 505.921 cv
233.253 505.921 233.132 506.042 233.132 506.19 cv
233.132 506.339 233.253 506.46 233.402 506.46 cv
233.551 506.46 233.672 506.339 233.672 506.19 cv
.75021 .679683 .670222 .90164 cmyk
ef
235.032 522.651 mo
235.032 521.841 li
.597284 .512352 .507713 .201328 cmyk
@
235.291 522.381 mo
235.291 522.232 235.17 522.111 235.021 522.111 cv
234.872 522.111 234.751 522.232 234.751 522.381 cv
234.751 522.53 234.872 522.651 235.021 522.651 cv
235.17 522.651 235.291 522.53 235.291 522.381 cv
.75021 .679683 .670222 .90164 cmyk
ef
236.651 533.984 mo
236.651 533.444 li
.597284 .512352 .507713 .201328 cmyk
@
236.91 533.714 mo
236.91 533.565 236.789 533.444 236.64 533.444 cv
236.491 533.444 236.37 533.565 236.37 533.714 cv
236.37 533.863 236.491 533.984 236.64 533.984 cv
236.789 533.984 236.91 533.863 236.91 533.714 cv
.75021 .679683 .670222 .90164 cmyk
ef
238.27 541 mo
238.27 540.46 li
.597284 .512352 .507713 .201328 cmyk
@
238.529 540.709 mo
238.529 540.56 238.408 540.439 238.259 540.439 cv
238.11 540.439 237.989 540.56 237.989 540.709 cv
237.989 540.857 238.11 540.978 238.259 540.978 cv
238.408 540.978 238.529 540.857 238.529 540.709 cv
.75021 .679683 .670222 .90164 cmyk
ef
240.159 545.048 mo
240.159 544.508 li
.597284 .512352 .507713 .201328 cmyk
@
240.407 544.789 mo
240.407 544.64 240.286 544.519 240.137 544.519 cv
239.988 544.519 239.867 544.64 239.867 544.789 cv
239.867 544.938 239.988 545.058 240.137 545.058 cv
240.286 545.058 240.407 544.938 240.407 544.789 cv
.75021 .679683 .670222 .90164 cmyk
ef
241.778 548.286 mo
241.778 548.016 li
.597284 .512352 .507713 .201328 cmyk
@
242.091 548.027 mo
242.091 547.878 241.97 547.757 241.821 547.757 cv
241.672 547.757 241.551 547.878 241.551 548.027 cv
241.551 548.176 241.672 548.296 241.821 548.296 cv
241.97 548.296 242.091 548.176 242.091 548.027 cv
.75021 .679683 .670222 .90164 cmyk
ef
243.397 549.635 mo
243.397 549.365 li
.597284 .512352 .507713 .201328 cmyk
@
243.645 549.646 mo
243.645 549.497 243.524 549.376 243.375 549.376 cv
243.226 549.376 243.105 549.497 243.105 549.646 cv
243.105 549.795 243.226 549.916 243.375 549.916 cv
243.524 549.916 243.645 549.795 243.645 549.646 cv
.75021 .679683 .670222 .90164 cmyk
ef
245.286 550.984 mo
245.286 550.714 li
.597284 .512352 .507713 .201328 cmyk
@
245.588 550.941 mo
245.588 550.792 245.467 550.671 245.318 550.671 cv
245.169 550.671 245.048 550.792 245.048 550.941 cv
245.048 551.09 245.169 551.211 245.318 551.211 cv
245.467 551.211 245.588 551.09 245.588 550.941 cv
.75021 .679683 .670222 .90164 cmyk
ef
246.905 551.524 mo
.597284 .512352 .507713 .201328 cmyk
@
247.142 551.524 mo
247.142 551.375 247.021 551.254 246.872 551.254 cv
246.723 551.254 246.602 551.375 246.602 551.524 cv
246.602 551.673 246.723 551.794 246.872 551.794 cv
247.021 551.794 247.142 551.673 247.142 551.524 cv
.75021 .679683 .670222 .90164 cmyk
ef
248.524 552.063 mo
248.524 551.794 li
.597284 .512352 .507713 .201328 cmyk
@
248.826 552.107 mo
248.826 551.958 248.705 551.837 248.556 551.837 cv
248.407 551.837 248.286 551.958 248.286 552.107 cv
248.286 552.256 248.407 552.376 248.556 552.376 cv
248.705 552.376 248.826 552.256 248.826 552.107 cv
.75021 .679683 .670222 .90164 cmyk
ef
250.143 552.603 mo
250.143 552.333 li
.597284 .512352 .507713 .201328 cmyk
@
250.38 552.625 mo
250.38 552.476 250.259 552.355 250.111 552.355 cv
249.962 552.355 249.841 552.476 249.841 552.625 cv
249.841 552.774 249.962 552.895 250.111 552.895 cv
250.259 552.895 250.38 552.774 250.38 552.625 cv
.75021 .679683 .670222 .90164 cmyk
ef
252.032 552.873 mo
.597284 .512352 .507713 .201328 cmyk
@
252.323 552.884 mo
252.323 552.735 252.202 552.614 252.053 552.614 cv
251.904 552.614 251.783 552.735 251.783 552.884 cv
251.783 553.033 251.904 553.154 252.053 553.154 cv
252.202 553.154 252.323 553.033 252.323 552.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
253.651 553.143 mo
.597284 .512352 .507713 .201328 cmyk
@
253.878 553.143 mo
253.878 552.994 253.757 552.873 253.608 552.873 cv
253.459 552.873 253.338 552.994 253.338 553.143 cv
253.338 553.292 253.459 553.413 253.608 553.413 cv
253.757 553.413 253.878 553.292 253.878 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
255.27 553.143 mo
.597284 .512352 .507713 .201328 cmyk
@
255.561 553.143 mo
255.561 552.994 255.44 552.873 255.291 552.873 cv
255.143 552.873 255.022 552.994 255.022 553.143 cv
255.022 553.292 255.143 553.413 255.291 553.413 cv
255.44 553.413 255.561 553.292 255.561 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
257.159 553.413 mo
.597284 .512352 .507713 .201328 cmyk
@
257.375 553.402 mo
257.375 553.253 257.254 553.132 257.105 553.132 cv
256.956 553.132 256.835 553.253 256.835 553.402 cv
256.835 553.551 256.956 553.672 257.105 553.672 cv
257.254 553.672 257.375 553.551 257.375 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
258.778 553.683 mo
258.778 553.413 li
.597284 .512352 .507713 .201328 cmyk
@
259.058 553.402 mo
259.058 553.253 258.938 553.132 258.789 553.132 cv
258.64 553.132 258.519 553.253 258.519 553.402 cv
258.519 553.551 258.64 553.672 258.789 553.672 cv
258.938 553.672 259.058 553.551 259.058 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
260.397 553.683 mo
.597284 .512352 .507713 .201328 cmyk
@
260.613 553.661 mo
260.613 553.512 260.492 553.391 260.343 553.391 cv
260.194 553.391 260.073 553.512 260.073 553.661 cv
260.073 553.81 260.194 553.931 260.343 553.931 cv
260.492 553.931 260.613 553.81 260.613 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
262.016 553.683 mo
.597284 .512352 .507713 .201328 cmyk
@
262.297 553.661 mo
262.297 553.512 262.176 553.391 262.027 553.391 cv
261.878 553.391 261.757 553.512 261.757 553.661 cv
261.757 553.81 261.878 553.931 262.027 553.931 cv
262.176 553.931 262.297 553.81 262.297 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
263.905 553.683 mo
.597284 .512352 .507713 .201328 cmyk
@
264.175 553.661 mo
264.175 553.512 264.054 553.391 263.905 553.391 cv
263.756 553.391 263.635 553.512 263.635 553.661 cv
263.635 553.81 263.756 553.931 263.905 553.931 cv
264.054 553.931 264.175 553.81 264.175 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
265.524 553.952 mo
265.524 553.683 li
.597284 .512352 .507713 .201328 cmyk
@
265.794 553.92 mo
265.794 553.771 265.673 553.65 265.524 553.65 cv
265.375 553.65 265.254 553.771 265.254 553.92 cv
265.254 554.069 265.375 554.19 265.524 554.19 cv
265.673 554.19 265.794 554.069 265.794 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
267.143 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
267.413 553.92 mo
267.413 553.771 267.292 553.65 267.143 553.65 cv
266.994 553.65 266.873 553.771 266.873 553.92 cv
266.873 554.069 266.994 554.19 267.143 554.19 cv
267.292 554.19 267.413 554.069 267.413 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
268.762 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
269.032 553.92 mo
269.032 553.771 268.911 553.65 268.762 553.65 cv
268.613 553.65 268.492 553.771 268.492 553.92 cv
268.492 554.069 268.613 554.19 268.762 554.19 cv
268.911 554.19 269.032 554.069 269.032 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
270.651 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
270.91 553.92 mo
270.91 553.771 270.789 553.65 270.64 553.65 cv
270.491 553.65 270.37 553.771 270.37 553.92 cv
270.37 554.069 270.491 554.19 270.64 554.19 cv
270.789 554.19 270.91 554.069 270.91 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
272.27 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
272.529 553.92 mo
272.529 553.771 272.408 553.65 272.259 553.65 cv
272.11 553.65 271.989 553.771 271.989 553.92 cv
271.989 554.069 272.11 554.19 272.259 554.19 cv
272.408 554.19 272.529 554.069 272.529 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
273.889 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
274.148 553.92 mo
274.148 553.771 274.027 553.65 273.878 553.65 cv
273.729 553.65 273.608 553.771 273.608 553.92 cv
273.608 554.069 273.729 554.19 273.878 554.19 cv
274.027 554.19 274.148 554.069 274.148 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
275.778 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
276.026 553.92 mo
276.026 553.771 275.905 553.65 275.756 553.65 cv
275.607 553.65 275.486 553.771 275.486 553.92 cv
275.486 554.069 275.607 554.19 275.756 554.19 cv
275.905 554.19 276.026 554.069 276.026 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
277.397 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
277.71 553.92 mo
277.71 553.771 277.589 553.65 277.44 553.65 cv
277.291 553.65 277.17 553.771 277.17 553.92 cv
277.17 554.069 277.291 554.19 277.44 554.19 cv
277.589 554.19 277.71 554.069 277.71 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
279.016 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
279.264 553.92 mo
279.264 553.771 279.143 553.65 278.994 553.65 cv
278.845 553.65 278.724 553.771 278.724 553.92 cv
278.724 554.069 278.845 554.19 278.994 554.19 cv
279.143 554.19 279.264 554.069 279.264 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
280.635 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
280.948 553.92 mo
280.948 553.771 280.827 553.65 280.678 553.65 cv
280.529 553.65 280.408 553.771 280.408 553.92 cv
280.408 554.069 280.529 554.19 280.678 554.19 cv
280.827 554.19 280.948 554.069 280.948 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
282.524 553.952 mo
.597284 .512352 .507713 .201328 cmyk
@
282.761 553.92 mo
282.761 553.771 282.64 553.65 282.491 553.65 cv
282.342 553.65 282.222 553.771 282.222 553.92 cv
282.222 554.069 282.342 554.19 282.491 554.19 cv
282.64 554.19 282.761 554.069 282.761 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
122.508 553.952 mo
137.619 553.952 li
137.619 546.127 li
139.238 546.127 li
139.238 541 li
141.127 541 li
141.127 540.46 li
142.746 540.46 li
142.746 539.381 li
144.365 539.381 li
144.365 538.841 li
145.984 538.841 li
145.984 537.492 li
147.873 537.492 li
147.873 536.413 li
149.492 536.413 li
149.492 535.603 li
151.111 535.603 li
151.111 534.254 li
154.619 534.254 li
154.619 533.444 li
156.238 533.444 li
156.238 532.095 li
157.857 532.095 li
157.857 531.286 li
159.746 531.286 li
159.746 530.206 li
161.365 530.206 li
161.365 529.397 li
162.984 529.397 li
162.984 527.238 li
164.603 527.238 li
164.603 525.619 li
166.492 525.619 li
166.492 524.54 li
168.111 524.54 li
168.111 522.921 li
169.73 522.921 li
169.73 520.762 li
171.619 520.762 li
171.619 520.492 li
173.238 520.492 li
173.238 519.952 li
174.857 519.952 li
174.857 518.063 li
176.476 518.063 li
176.476 517.254 li
178.365 517.254 li
178.365 516.444 li
179.984 516.444 li
179.984 515.365 li
181.603 515.365 li
181.603 514.825 li
183.492 514.825 li
183.492 513.206 li
185.111 513.206 li
185.111 512.667 li
188.349 512.667 li
188.349 511.317 li
190.238 511.317 li
190.238 508.889 li
193.476 508.889 li
193.476 508.079 li
195.095 508.079 li
195.095 507.54 li
196.984 507.54 li
196.984 505.921 li
198.603 505.921 li
198.603 504.841 li
200.222 504.841 li
200.222 504.571 li
202.111 504.571 li
202.111 503.492 li
203.73 503.492 li
203.73 501.873 li
205.349 501.873 li
205.349 501.333 li
206.968 501.333 li
206.968 501.064 li
208.857 501.064 li
208.857 499.444 li
210.476 499.444 li
210.476 498.635 li
212.095 498.635 li
212.095 497.825 li
213.714 497.825 li
213.714 495.937 li
215.603 495.937 li
215.603 495.127 li
217.222 495.127 li
217.222 491.619 li
218.841 491.619 li
218.841 488.381 li
220.73 488.381 li
220.73 480.825 li
222.349 480.825 li
222.349 469.762 li
223.968 469.762 li
223.968 458.159 li
225.587 458.159 li
225.587 451.413 li
227.476 451.413 li
227.476 455.46 li
229.095 455.46 li
229.095 468.683 li
230.714 468.683 li
230.714 486.492 li
232.603 486.492 li
232.603 506.19 li
234.222 506.19 li
234.222 522.381 li
235.841 522.381 li
235.841 533.714 li
237.46 533.714 li
237.46 540.73 li
239.349 540.73 li
239.349 544.778 li
240.968 544.778 li
240.968 548.016 li
242.587 548.016 li
242.587 549.635 li
244.206 549.635 li
244.206 550.984 li
246.095 550.984 li
246.095 551.524 li
247.714 551.524 li
247.714 552.063 li
249.333 552.063 li
249.333 552.603 li
251.222 552.603 li
251.222 552.873 li
252.841 552.873 li
252.841 553.143 li
256.079 553.143 li
256.079 553.413 li
259.587 553.413 li
259.587 553.683 li
264.714 553.683 li
264.714 553.952 li
501.905 553.952 li
.597284 .512352 .507713 .201328 cmyk
@
.75021 .679683 .670222 .90164 cmyk
ATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf345.186 213.947 mo(PYTHIA det. level)[11.2131 11.2131 10.2715 12.1376 4.67349 11.2131 4.67346 9.34698 9.34698 4.67346 4.67349 4.67349 3.73209 9.34692 8.40558 9.34698 0 ]xsh345.186 237.483 mo(R = 0.3, 0%-10%)[12.1376 4.67352 9.81769 4.67346 9.34698 4.67346 9.34698 4.67349 4.67346 9.34698 14.9452 5.59799 9.34698 9.34695 0 ]xsh222.619 475.159 mo
222.889 473.81 li
222.889 472.46 li
223.159 471.381 li
223.159 470.032 li
223.429 468.952 li
223.429 467.873 li
223.698 466.794 li
223.698 464.635 li
223.968 463.556 li
223.968 462.476 li
224.238 461.397 li
224.238 460.587 li
224.508 459.778 li
224.508 458.968 li
224.778 458.159 li
224.778 456.54 li
225.048 456 li
225.048 455.19 li
225.317 454.651 li
225.317 454.111 li
225.587 453.571 li
225.587 453.302 li
225.857 452.762 li
225.857 452.492 li
226.127 452.222 li
226.127 451.683 li
226.397 451.683 li
226.397 451.413 li
226.936 451.413 li
226.936 451.683 li
227.206 451.683 li
227.206 451.952 li
227.476 452.222 li
227.476 453.032 li
227.746 453.302 li
227.746 453.841 li
228.016 454.381 li
228.016 454.921 li
228.286 455.46 li
228.286 456.27 li
228.556 456.81 li
228.556 458.429 li
228.556 458.429 mo
228.825 459.238 li
228.825 460.048 li
229.095 461.127 li
229.095 461.937 li
229.365 463.016 li
229.365 464.095 li
229.635 464.905 li
229.635 465.984 li
229.905 467.333 li
229.905 469.492 li
230.175 470.841 li
230.175 471.921 li
230.444 473.27 li
230.444 474.349 li
230.714 475.698 li
230.714 477.048 li
230.984 478.397 li
230.984 479.746 li
231.254 481.095 li
231.254 483.794 li
231.524 485.143 li
231.524 486.492 li
231.794 487.841 li
231.794 489.19 li
232.063 490.81 li
232.063 492.159 li
232.333 493.508 li
232.333 494.857 li
232.603 496.206 li
232.603 498.905 li
232.873 500.524 li
232.873 501.873 li
233.143 503.222 li
233.143 504.571 li
233.413 505.921 li
233.413 507.27 li
233.683 508.349 li
233.683 511.048 li
233.952 512.397 li
233.952 513.476 li
234.222 514.825 li
234.222 515.905 li
234.492 517.254 li
234.492 518.333 li
234.762 519.413 li
234.762 519.413 mo
234.762 520.762 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
.75021 .679683 .670222 .90164 cmyk
ATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf374.326 432.49 mo(= 5%)[9.81769 4.67349 9.34695 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf367.602 441.456 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf355.273 432.49 mo(/p)[4.67346 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf348.549 441.456 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf336.222 432.49 mo( p)[4.67346 0 ]xshATEDLP+Symbol*1 [16.8111 0 0 -16.8111 0 0 ]msf329.498 432.49 mo( )shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf229.751 432.49 mo(=15.0 GeV/c,  )[9.81769 9.34697 9.34695 4.67349 9.34695 4.67352 13.079 9.34695 11.2131 4.67349 8.40555 4.67349 4.67349 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf223.027 441.456 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf215.182 432.49 mo(p)sh143.556 548.286 mo
143.556 548.016 li
.426368 .347875 .353155 .00985733 cmyk
@
143.782 548.027 mo
143.782 547.878 143.661 547.757 143.512 547.757 cv
143.363 547.757 143.242 547.878 143.242 548.027 cv
143.242 548.176 143.363 548.296 143.512 548.296 cv
143.661 548.296 143.782 548.176 143.782 548.027 cv
.75021 .679683 .670222 .90164 cmyk
ef
145.175 545.048 mo
145.175 544.778 li
.426368 .347875 .353155 .00985733 cmyk
@
145.466 544.789 mo
145.466 544.64 145.345 544.519 145.196 544.519 cv
145.047 544.519 144.926 544.64 144.926 544.789 cv
144.926 544.938 145.047 545.058 145.196 545.058 cv
145.345 545.058 145.466 544.938 145.466 544.789 cv
.75021 .679683 .670222 .90164 cmyk
ef
147.063 544.778 mo
147.063 544.238 li
.426368 .347875 .353155 .00985733 cmyk
@
147.279 544.465 mo
147.279 544.316 147.158 544.195 147.01 544.195 cv
146.861 544.195 146.74 544.316 146.74 544.465 cv
146.74 544.614 146.861 544.735 147.01 544.735 cv
147.158 544.735 147.279 544.614 147.279 544.465 cv
.75021 .679683 .670222 .90164 cmyk
ef
148.683 544.508 mo
148.683 543.968 li
.426368 .347875 .353155 .00985733 cmyk
@
148.963 544.206 mo
148.963 544.057 148.842 543.936 148.693 543.936 cv
148.544 543.936 148.423 544.057 148.423 544.206 cv
148.423 544.355 148.544 544.476 148.693 544.476 cv
148.842 544.476 148.963 544.355 148.963 544.206 cv
.75021 .679683 .670222 .90164 cmyk
ef
150.302 544.238 mo
150.302 543.698 li
.426368 .347875 .353155 .00985733 cmyk
@
150.518 543.947 mo
150.518 543.798 150.397 543.677 150.248 543.677 cv
150.099 543.677 149.978 543.798 149.978 543.947 cv
149.978 544.096 150.099 544.216 150.248 544.216 cv
150.397 544.216 150.518 544.096 150.518 543.947 cv
.75021 .679683 .670222 .90164 cmyk
ef
151.921 543.968 mo
151.921 543.429 li
.426368 .347875 .353155 .00985733 cmyk
@
152.201 543.688 mo
152.201 543.539 152.08 543.418 151.931 543.418 cv
151.783 543.418 151.662 543.539 151.662 543.688 cv
151.662 543.837 151.783 543.957 151.931 543.957 cv
152.08 543.957 152.201 543.837 152.201 543.688 cv
.75021 .679683 .670222 .90164 cmyk
ef
153.81 542.619 mo
153.81 542.079 li
.426368 .347875 .353155 .00985733 cmyk
@
154.079 542.392 mo
154.079 542.243 153.958 542.122 153.809 542.122 cv
153.661 542.122 153.54 542.243 153.54 542.392 cv
153.54 542.541 153.661 542.662 153.809 542.662 cv
153.958 542.662 154.079 542.541 154.079 542.392 cv
.75021 .679683 .670222 .90164 cmyk
ef
155.429 542.619 mo
155.429 542.079 li
.426368 .347875 .353155 .00985733 cmyk
@
155.698 542.392 mo
155.698 542.243 155.577 542.122 155.429 542.122 cv
155.28 542.122 155.159 542.243 155.159 542.392 cv
155.159 542.541 155.28 542.662 155.429 542.662 cv
155.577 542.662 155.698 542.541 155.698 542.392 cv
.75021 .679683 .670222 .90164 cmyk
ef
157.048 542.079 mo
157.048 541.54 li
.426368 .347875 .353155 .00985733 cmyk
@
157.318 541.809 mo
157.318 541.661 157.197 541.54 157.048 541.54 cv
156.899 541.54 156.778 541.661 156.778 541.809 cv
156.778 541.958 156.899 542.079 157.048 542.079 cv
157.197 542.079 157.318 541.958 157.318 541.809 cv
.75021 .679683 .670222 .90164 cmyk
ef
158.667 541.81 mo
158.667 541.27 li
.426368 .347875 .353155 .00985733 cmyk
@
158.936 541.55 mo
158.936 541.401 158.816 541.281 158.667 541.281 cv
158.518 541.281 158.397 541.401 158.397 541.55 cv
158.397 541.699 158.518 541.82 158.667 541.82 cv
158.816 541.82 158.936 541.699 158.936 541.55 cv
.75021 .679683 .670222 .90164 cmyk
ef
160.556 541 mo
160.556 540.46 li
.426368 .347875 .353155 .00985733 cmyk
@
160.815 540.709 mo
160.815 540.56 160.694 540.439 160.545 540.439 cv
160.396 540.439 160.275 540.56 160.275 540.709 cv
160.275 540.857 160.396 540.978 160.545 540.978 cv
160.694 540.978 160.815 540.857 160.815 540.709 cv
.75021 .679683 .670222 .90164 cmyk
ef
162.175 541 mo
162.175 540.46 li
.426368 .347875 .353155 .00985733 cmyk
@
162.434 540.709 mo
162.434 540.56 162.313 540.439 162.164 540.439 cv
162.015 540.439 161.894 540.56 161.894 540.709 cv
161.894 540.857 162.015 540.978 162.164 540.978 cv
162.313 540.978 162.434 540.857 162.434 540.709 cv
.75021 .679683 .670222 .90164 cmyk
ef
163.794 540.46 mo
163.794 539.921 li
.426368 .347875 .353155 .00985733 cmyk
@
164.053 540.19 mo
164.053 540.042 163.932 539.921 163.783 539.921 cv
163.634 539.921 163.513 540.042 163.513 540.19 cv
163.513 540.339 163.634 540.46 163.783 540.46 cv
163.932 540.46 164.053 540.339 164.053 540.19 cv
.75021 .679683 .670222 .90164 cmyk
ef
165.683 539.111 mo
165.683 538.571 li
.426368 .347875 .353155 .00985733 cmyk
@
165.931 538.895 mo
165.931 538.746 165.81 538.625 165.661 538.625 cv
165.512 538.625 165.391 538.746 165.391 538.895 cv
165.391 539.044 165.512 539.165 165.661 539.165 cv
165.81 539.165 165.931 539.044 165.931 538.895 cv
.75021 .679683 .670222 .90164 cmyk
ef
167.302 538.841 mo
167.302 538.302 li
.426368 .347875 .353155 .00985733 cmyk
@
167.615 538.571 mo
167.615 538.422 167.494 538.302 167.345 538.302 cv
167.196 538.302 167.075 538.422 167.075 538.571 cv
167.075 538.72 167.196 538.841 167.345 538.841 cv
167.494 538.841 167.615 538.72 167.615 538.571 cv
.75021 .679683 .670222 .90164 cmyk
ef
168.921 537.762 mo
168.921 537.222 li
.426368 .347875 .353155 .00985733 cmyk
@
169.169 537.47 mo
169.169 537.321 169.048 537.201 168.899 537.201 cv
168.75 537.201 168.629 537.321 168.629 537.47 cv
168.629 537.619 168.75 537.74 168.899 537.74 cv
169.048 537.74 169.169 537.619 169.169 537.47 cv
.75021 .679683 .670222 .90164 cmyk
ef
170.54 537.222 mo
170.54 536.413 li
.426368 .347875 .353155 .00985733 cmyk
@
170.853 536.952 mo
170.853 536.803 170.732 536.682 170.583 536.682 cv
170.434 536.682 170.313 536.803 170.313 536.952 cv
170.313 537.101 170.434 537.222 170.583 537.222 cv
170.732 537.222 170.853 537.101 170.853 536.952 cv
.75021 .679683 .670222 .90164 cmyk
ef
172.429 537.222 mo
172.429 536.683 li
.426368 .347875 .353155 .00985733 cmyk
@
172.666 536.952 mo
172.666 536.803 172.545 536.682 172.396 536.682 cv
172.247 536.682 172.126 536.803 172.126 536.952 cv
172.126 537.101 172.247 537.222 172.396 537.222 cv
172.545 537.222 172.666 537.101 172.666 536.952 cv
.75021 .679683 .670222 .90164 cmyk
ef
174.048 536.143 mo
174.048 535.603 li
.426368 .347875 .353155 .00985733 cmyk
@
174.35 535.916 mo
174.35 535.767 174.229 535.646 174.08 535.646 cv
173.931 535.646 173.81 535.767 173.81 535.916 cv
173.81 536.065 173.931 536.186 174.08 536.186 cv
174.229 536.186 174.35 536.065 174.35 535.916 cv
.75021 .679683 .670222 .90164 cmyk
ef
175.667 535.603 mo
175.667 534.794 li
.426368 .347875 .353155 .00985733 cmyk
@
175.904 535.074 mo
175.904 534.925 175.783 534.804 175.634 534.804 cv
175.485 534.804 175.364 534.925 175.364 535.074 cv
175.364 535.223 175.485 535.344 175.634 535.344 cv
175.783 535.344 175.904 535.223 175.904 535.074 cv
.75021 .679683 .670222 .90164 cmyk
ef
177.556 533.984 mo
177.556 533.444 li
.426368 .347875 .353155 .00985733 cmyk
@
177.847 533.714 mo
177.847 533.565 177.726 533.444 177.577 533.444 cv
177.428 533.444 177.307 533.565 177.307 533.714 cv
177.307 533.863 177.428 533.984 177.577 533.984 cv
177.726 533.984 177.847 533.863 177.847 533.714 cv
.75021 .679683 .670222 .90164 cmyk
ef
179.175 533.714 mo
179.175 532.905 li
.426368 .347875 .353155 .00985733 cmyk
@
179.401 533.455 mo
179.401 533.306 179.28 533.185 179.131 533.185 cv
178.982 533.185 178.862 533.306 178.862 533.455 cv
178.862 533.604 178.982 533.725 179.131 533.725 cv
179.28 533.725 179.401 533.604 179.401 533.455 cv
.75021 .679683 .670222 .90164 cmyk
ef
180.794 532.905 mo
180.794 532.365 li
.426368 .347875 .353155 .00985733 cmyk
@
181.085 532.678 mo
181.085 532.529 180.964 532.408 180.815 532.408 cv
180.666 532.408 180.545 532.529 180.545 532.678 cv
180.545 532.827 180.666 532.948 180.815 532.948 cv
180.964 532.948 181.085 532.827 181.085 532.678 cv
.75021 .679683 .670222 .90164 cmyk
ef
182.413 532.635 mo
182.413 532.095 li
.426368 .347875 .353155 .00985733 cmyk
@
182.639 532.419 mo
182.639 532.27 182.518 532.149 182.37 532.149 cv
182.221 532.149 182.1 532.27 182.1 532.419 cv
182.1 532.568 182.221 532.689 182.37 532.689 cv
182.518 532.689 182.639 532.568 182.639 532.419 cv
.75021 .679683 .670222 .90164 cmyk
ef
184.302 532.365 mo
184.302 531.825 li
.426368 .347875 .353155 .00985733 cmyk
@
184.582 532.095 mo
184.582 531.946 184.461 531.825 184.312 531.825 cv
184.163 531.825 184.042 531.946 184.042 532.095 cv
184.042 532.244 184.163 532.365 184.312 532.365 cv
184.461 532.365 184.582 532.244 184.582 532.095 cv
.75021 .679683 .670222 .90164 cmyk
ef
185.921 531.556 mo
185.921 530.746 li
.426368 .347875 .353155 .00985733 cmyk
@
186.137 531.253 mo
186.137 531.104 186.016 530.983 185.867 530.983 cv
185.718 530.983 185.597 531.104 185.597 531.253 cv
185.597 531.402 185.718 531.523 185.867 531.523 cv
186.016 531.523 186.137 531.402 186.137 531.253 cv
.75021 .679683 .670222 .90164 cmyk
ef
187.54 531.286 mo
187.54 530.476 li
.426368 .347875 .353155 .00985733 cmyk
@
187.82 530.994 mo
187.82 530.845 187.699 530.724 187.551 530.724 cv
187.402 530.724 187.281 530.845 187.281 530.994 cv
187.281 531.143 187.402 531.264 187.551 531.264 cv
187.699 531.264 187.82 531.143 187.82 530.994 cv
.75021 .679683 .670222 .90164 cmyk
ef
189.159 530.476 mo
189.159 529.667 li
.426368 .347875 .353155 .00985733 cmyk
@
189.375 530.217 mo
189.375 530.068 189.254 529.947 189.105 529.947 cv
188.956 529.947 188.835 530.068 188.835 530.217 cv
188.835 530.366 188.956 530.487 189.105 530.487 cv
189.254 530.487 189.375 530.366 189.375 530.217 cv
.75021 .679683 .670222 .90164 cmyk
ef
191.048 529.127 mo
191.048 528.317 li
.426368 .347875 .353155 .00985733 cmyk
@
191.318 528.598 mo
191.318 528.449 191.197 528.328 191.048 528.328 cv
190.899 528.328 190.778 528.449 190.778 528.598 cv
190.778 528.747 190.899 528.868 191.048 528.868 cv
191.197 528.868 191.318 528.747 191.318 528.598 cv
.75021 .679683 .670222 .90164 cmyk
ef
192.667 528.317 mo
192.667 527.508 li
.426368 .347875 .353155 .00985733 cmyk
@
192.936 527.756 mo
192.936 527.607 192.816 527.486 192.667 527.486 cv
192.518 527.486 192.397 527.607 192.397 527.756 cv
192.397 527.905 192.518 528.026 192.667 528.026 cv
192.816 528.026 192.936 527.905 192.936 527.756 cv
.75021 .679683 .670222 .90164 cmyk
ef
194.286 527.508 mo
194.286 526.698 li
.426368 .347875 .353155 .00985733 cmyk
@
194.556 526.979 mo
194.556 526.83 194.435 526.709 194.286 526.709 cv
194.137 526.709 194.016 526.83 194.016 526.979 cv
194.016 527.128 194.137 527.249 194.286 527.249 cv
194.435 527.249 194.556 527.128 194.556 526.979 cv
.75021 .679683 .670222 .90164 cmyk
ef
196.175 526.159 mo
196.175 525.349 li
.426368 .347875 .353155 .00985733 cmyk
@
196.434 525.943 mo
196.434 525.794 196.313 525.673 196.164 525.673 cv
196.015 525.673 195.894 525.794 195.894 525.943 cv
195.894 526.092 196.015 526.213 196.164 526.213 cv
196.313 526.213 196.434 526.092 196.434 525.943 cv
.75021 .679683 .670222 .90164 cmyk
ef
197.794 525.889 mo
197.794 525.079 li
.426368 .347875 .353155 .00985733 cmyk
@
198.053 525.36 mo
198.053 525.211 197.932 525.09 197.783 525.09 cv
197.634 525.09 197.513 525.211 197.513 525.36 cv
197.513 525.509 197.634 525.63 197.783 525.63 cv
197.932 525.63 198.053 525.509 198.053 525.36 cv
.75021 .679683 .670222 .90164 cmyk
ef
199.413 524.81 mo
199.413 524 li
.426368 .347875 .353155 .00985733 cmyk
@
199.672 524.259 mo
199.672 524.11 199.551 523.989 199.402 523.989 cv
199.253 523.989 199.132 524.11 199.132 524.259 cv
199.132 524.408 199.253 524.529 199.402 524.529 cv
199.551 524.529 199.672 524.408 199.672 524.259 cv
.75021 .679683 .670222 .90164 cmyk
ef
201.032 523.46 mo
201.032 522.381 li
.426368 .347875 .353155 .00985733 cmyk
@
201.291 522.964 mo
201.291 522.815 201.17 522.694 201.021 522.694 cv
200.872 522.694 200.751 522.815 200.751 522.964 cv
200.751 523.113 200.872 523.234 201.021 523.234 cv
201.17 523.234 201.291 523.113 201.291 522.964 cv
.75021 .679683 .670222 .90164 cmyk
ef
202.921 522.651 mo
202.921 521.571 li
.426368 .347875 .353155 .00985733 cmyk
@
203.234 522.122 mo
203.234 521.973 203.113 521.852 202.964 521.852 cv
202.815 521.852 202.694 521.973 202.694 522.122 cv
202.694 522.271 202.815 522.392 202.964 522.392 cv
203.113 522.392 203.234 522.271 203.234 522.122 cv
.75021 .679683 .670222 .90164 cmyk
ef
204.54 521.032 mo
204.54 519.952 li
.426368 .347875 .353155 .00985733 cmyk
@
204.788 520.503 mo
204.788 520.354 204.667 520.233 204.518 520.233 cv
204.369 520.233 204.248 520.354 204.248 520.503 cv
204.248 520.652 204.369 520.773 204.518 520.773 cv
204.667 520.773 204.788 520.652 204.788 520.503 cv
.75021 .679683 .670222 .90164 cmyk
ef
206.159 519.952 mo
206.159 519.143 li
.426368 .347875 .353155 .00985733 cmyk
@
206.472 519.467 mo
206.472 519.318 206.351 519.197 206.202 519.197 cv
206.053 519.197 205.932 519.318 205.932 519.467 cv
205.932 519.616 206.053 519.737 206.202 519.737 cv
206.351 519.737 206.472 519.616 206.472 519.467 cv
.75021 .679683 .670222 .90164 cmyk
ef
208.048 519.413 mo
208.048 518.603 li
.426368 .347875 .353155 .00985733 cmyk
@
208.285 519.143 mo
208.285 518.994 208.164 518.873 208.015 518.873 cv
207.866 518.873 207.745 518.994 207.745 519.143 cv
207.745 519.292 207.866 519.413 208.015 519.413 cv
208.164 519.413 208.285 519.292 208.285 519.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
209.667 518.873 mo
209.667 517.794 li
.426368 .347875 .353155 .00985733 cmyk
@
209.969 518.301 mo
209.969 518.152 209.848 518.031 209.699 518.031 cv
209.55 518.031 209.429 518.152 209.429 518.301 cv
209.429 518.45 209.55 518.571 209.699 518.571 cv
209.848 518.571 209.969 518.45 209.969 518.301 cv
.75021 .679683 .670222 .90164 cmyk
ef
211.286 518.603 mo
211.286 517.794 li
.426368 .347875 .353155 .00985733 cmyk
@
211.523 518.042 mo
211.523 517.893 211.402 517.772 211.253 517.772 cv
211.104 517.772 210.984 517.893 210.984 518.042 cv
210.984 518.191 211.104 518.312 211.253 518.312 cv
211.402 518.312 211.523 518.191 211.523 518.042 cv
.75021 .679683 .670222 .90164 cmyk
ef
212.905 517.794 mo
212.905 516.984 li
.426368 .347875 .353155 .00985733 cmyk
@
213.207 517.265 mo
213.207 517.116 213.086 516.995 212.937 516.995 cv
212.788 516.995 212.667 517.116 212.667 517.265 cv
212.667 517.414 212.788 517.535 212.937 517.535 cv
213.086 517.535 213.207 517.414 213.207 517.265 cv
.75021 .679683 .670222 .90164 cmyk
ef
214.794 516.175 mo
214.794 515.095 li
.426368 .347875 .353155 .00985733 cmyk
@
215.02 515.646 mo
215.02 515.497 214.899 515.376 214.751 515.376 cv
214.602 515.376 214.481 515.497 214.481 515.646 cv
214.481 515.795 214.602 515.916 214.751 515.916 cv
214.899 515.916 215.02 515.795 215.02 515.646 cv
.75021 .679683 .670222 .90164 cmyk
ef
216.413 515.095 mo
216.413 514.016 li
.426368 .347875 .353155 .00985733 cmyk
@
216.704 514.545 mo
216.704 514.396 216.583 514.275 216.434 514.275 cv
216.285 514.275 216.164 514.396 216.164 514.545 cv
216.164 514.694 216.285 514.815 216.434 514.815 cv
216.583 514.815 216.704 514.694 216.704 514.545 cv
.75021 .679683 .670222 .90164 cmyk
ef
218.032 515.365 mo
218.032 514.556 li
.426368 .347875 .353155 .00985733 cmyk
@
218.258 515.063 mo
218.258 514.914 218.137 514.793 217.989 514.793 cv
217.84 514.793 217.719 514.914 217.719 515.063 cv
217.719 515.212 217.84 515.333 217.989 515.333 cv
218.137 515.333 218.258 515.212 218.258 515.063 cv
.75021 .679683 .670222 .90164 cmyk
ef
219.651 515.365 mo
219.651 514.556 li
.426368 .347875 .353155 .00985733 cmyk
@
219.942 514.804 mo
219.942 514.655 219.821 514.534 219.672 514.534 cv
219.523 514.534 219.402 514.655 219.402 514.804 cv
219.402 514.953 219.523 515.074 219.672 515.074 cv
219.821 515.074 219.942 514.953 219.942 514.804 cv
.75021 .679683 .670222 .90164 cmyk
ef
221.54 514.556 mo
221.54 513.746 li
.426368 .347875 .353155 .00985733 cmyk
@
221.756 514.027 mo
221.756 513.878 221.635 513.757 221.486 513.757 cv
221.337 513.757 221.216 513.878 221.216 514.027 cv
221.216 514.176 221.337 514.297 221.486 514.297 cv
221.635 514.297 221.756 514.176 221.756 514.027 cv
.75021 .679683 .670222 .90164 cmyk
ef
223.159 514.556 mo
223.159 513.476 li
.426368 .347875 .353155 .00985733 cmyk
@
223.439 514.027 mo
223.439 513.878 223.318 513.757 223.169 513.757 cv
223.021 513.757 222.9 513.878 222.9 514.027 cv
222.9 514.176 223.021 514.297 223.169 514.297 cv
223.318 514.297 223.439 514.176 223.439 514.027 cv
.75021 .679683 .670222 .90164 cmyk
ef
224.778 513.746 mo
224.778 512.937 li
.426368 .347875 .353155 .00985733 cmyk
@
224.994 513.509 mo
224.994 513.36 224.873 513.239 224.724 513.239 cv
224.575 513.239 224.454 513.36 224.454 513.509 cv
224.454 513.657 224.575 513.778 224.724 513.778 cv
224.873 513.778 224.994 513.657 224.994 513.509 cv
.75021 .679683 .670222 .90164 cmyk
ef
226.667 512.127 mo
226.667 511.317 li
.426368 .347875 .353155 .00985733 cmyk
@
226.936 511.825 mo
226.936 511.676 226.816 511.555 226.667 511.555 cv
226.518 511.555 226.397 511.676 226.397 511.825 cv
226.397 511.974 226.518 512.095 226.667 512.095 cv
226.816 512.095 226.936 511.974 226.936 511.825 cv
.75021 .679683 .670222 .90164 cmyk
ef
228.286 512.127 mo
228.286 511.048 li
.426368 .347875 .353155 .00985733 cmyk
@
228.556 511.566 mo
228.556 511.417 228.435 511.296 228.286 511.296 cv
228.137 511.296 228.016 511.417 228.016 511.566 cv
228.016 511.715 228.137 511.836 228.286 511.836 cv
228.435 511.836 228.556 511.715 228.556 511.566 cv
.75021 .679683 .670222 .90164 cmyk
ef
229.905 511.857 mo
229.905 511.048 li
.426368 .347875 .353155 .00985733 cmyk
@
230.175 511.307 mo
230.175 511.158 230.054 511.037 229.905 511.037 cv
229.756 511.037 229.635 511.158 229.635 511.307 cv
229.635 511.456 229.756 511.577 229.905 511.577 cv
230.054 511.577 230.175 511.456 230.175 511.307 cv
.75021 .679683 .670222 .90164 cmyk
ef
231.524 511.048 mo
231.524 509.968 li
.426368 .347875 .353155 .00985733 cmyk
@
231.794 510.53 mo
231.794 510.381 231.673 510.26 231.524 510.26 cv
231.375 510.26 231.254 510.381 231.254 510.53 cv
231.254 510.678 231.375 510.799 231.524 510.799 cv
231.673 510.799 231.794 510.678 231.794 510.53 cv
.75021 .679683 .670222 .90164 cmyk
ef
233.413 510.508 mo
233.413 509.429 li
.426368 .347875 .353155 .00985733 cmyk
@
233.672 510.011 mo
233.672 509.862 233.551 509.742 233.402 509.742 cv
233.253 509.742 233.132 509.862 233.132 510.011 cv
233.132 510.16 233.253 510.281 233.402 510.281 cv
233.551 510.281 233.672 510.16 233.672 510.011 cv
.75021 .679683 .670222 .90164 cmyk
ef
235.032 509.698 mo
235.032 508.889 li
.426368 .347875 .353155 .00985733 cmyk
@
235.291 509.429 mo
235.291 509.28 235.17 509.159 235.021 509.159 cv
234.872 509.159 234.751 509.28 234.751 509.429 cv
234.751 509.578 234.872 509.698 235.021 509.698 cv
235.17 509.698 235.291 509.578 235.291 509.429 cv
.75021 .679683 .670222 .90164 cmyk
ef
236.651 509.159 mo
236.651 508.079 li
.426368 .347875 .353155 .00985733 cmyk
@
236.91 508.587 mo
236.91 508.438 236.789 508.317 236.64 508.317 cv
236.491 508.317 236.37 508.438 236.37 508.587 cv
236.37 508.736 236.491 508.857 236.64 508.857 cv
236.789 508.857 236.91 508.736 236.91 508.587 cv
.75021 .679683 .670222 .90164 cmyk
ef
238.27 508.889 mo
238.27 508.079 li
.426368 .347875 .353155 .00985733 cmyk
@
238.529 508.328 mo
238.529 508.179 238.408 508.058 238.259 508.058 cv
238.11 508.058 237.989 508.179 237.989 508.328 cv
237.989 508.477 238.11 508.598 238.259 508.598 cv
238.408 508.598 238.529 508.477 238.529 508.328 cv
.75021 .679683 .670222 .90164 cmyk
ef
240.159 508.889 mo
240.159 507.81 li
.426368 .347875 .353155 .00985733 cmyk
@
240.407 508.328 mo
240.407 508.179 240.286 508.058 240.137 508.058 cv
239.988 508.058 239.867 508.179 239.867 508.328 cv
239.867 508.477 239.988 508.598 240.137 508.598 cv
240.286 508.598 240.407 508.477 240.407 508.328 cv
.75021 .679683 .670222 .90164 cmyk
ef
241.778 507.81 mo
241.778 506.73 li
.426368 .347875 .353155 .00985733 cmyk
@
242.091 507.291 mo
242.091 507.142 241.97 507.022 241.821 507.022 cv
241.672 507.022 241.551 507.142 241.551 507.291 cv
241.551 507.44 241.672 507.561 241.821 507.561 cv
241.97 507.561 242.091 507.44 242.091 507.291 cv
.75021 .679683 .670222 .90164 cmyk
ef
243.397 507 mo
243.397 505.921 li
.426368 .347875 .353155 .00985733 cmyk
@
243.645 506.514 mo
243.645 506.365 243.524 506.244 243.375 506.244 cv
243.226 506.244 243.105 506.365 243.105 506.514 cv
243.105 506.663 243.226 506.784 243.375 506.784 cv
243.524 506.784 243.645 506.663 243.645 506.514 cv
.75021 .679683 .670222 .90164 cmyk
ef
245.286 507 mo
245.286 505.921 li
.426368 .347875 .353155 .00985733 cmyk
@
245.588 506.514 mo
245.588 506.365 245.467 506.244 245.318 506.244 cv
245.169 506.244 245.048 506.365 245.048 506.514 cv
245.048 506.663 245.169 506.784 245.318 506.784 cv
245.467 506.784 245.588 506.663 245.588 506.514 cv
.75021 .679683 .670222 .90164 cmyk
ef
246.905 507 mo
246.905 505.921 li
.426368 .347875 .353155 .00985733 cmyk
@
247.142 506.514 mo
247.142 506.365 247.021 506.244 246.872 506.244 cv
246.723 506.244 246.602 506.365 246.602 506.514 cv
246.602 506.663 246.723 506.784 246.872 506.784 cv
247.021 506.784 247.142 506.663 247.142 506.514 cv
.75021 .679683 .670222 .90164 cmyk
ef
248.524 505.111 mo
248.524 504.302 li
.426368 .347875 .353155 .00985733 cmyk
@
248.826 504.571 mo
248.826 504.422 248.705 504.302 248.556 504.302 cv
248.407 504.302 248.286 504.422 248.286 504.571 cv
248.286 504.72 248.407 504.841 248.556 504.841 cv
248.705 504.841 248.826 504.72 248.826 504.571 cv
.75021 .679683 .670222 .90164 cmyk
ef
250.143 504.032 mo
250.143 502.952 li
.426368 .347875 .353155 .00985733 cmyk
@
250.38 503.535 mo
250.38 503.386 250.259 503.265 250.111 503.265 cv
249.962 503.265 249.841 503.386 249.841 503.535 cv
249.841 503.684 249.962 503.805 250.111 503.805 cv
250.259 503.805 250.38 503.684 250.38 503.535 cv
.75021 .679683 .670222 .90164 cmyk
ef
252.032 502.413 mo
252.032 501.333 li
.426368 .347875 .353155 .00985733 cmyk
@
252.323 501.851 mo
252.323 501.703 252.202 501.582 252.053 501.582 cv
251.904 501.582 251.783 501.703 251.783 501.851 cv
251.783 502 251.904 502.121 252.053 502.121 cv
252.202 502.121 252.323 502 252.323 501.851 cv
.75021 .679683 .670222 .90164 cmyk
ef
253.651 499.984 mo
253.651 498.905 li
.426368 .347875 .353155 .00985733 cmyk
@
253.878 499.455 mo
253.878 499.306 253.757 499.185 253.608 499.185 cv
253.459 499.185 253.338 499.306 253.338 499.455 cv
253.338 499.604 253.459 499.725 253.608 499.725 cv
253.757 499.725 253.878 499.604 253.878 499.455 cv
.75021 .679683 .670222 .90164 cmyk
ef
255.27 496.746 mo
255.27 495.667 li
.426368 .347875 .353155 .00985733 cmyk
@
255.561 496.217 mo
255.561 496.068 255.44 495.947 255.291 495.947 cv
255.143 495.947 255.022 496.068 255.022 496.217 cv
255.022 496.366 255.143 496.487 255.291 496.487 cv
255.44 496.487 255.561 496.366 255.561 496.217 cv
.75021 .679683 .670222 .90164 cmyk
ef
257.159 492.698 mo
257.159 491.619 li
.426368 .347875 .353155 .00985733 cmyk
@
257.375 492.137 mo
257.375 491.988 257.254 491.867 257.105 491.867 cv
256.956 491.867 256.835 491.988 256.835 492.137 cv
256.835 492.286 256.956 492.407 257.105 492.407 cv
257.254 492.407 257.375 492.286 257.375 492.137 cv
.75021 .679683 .670222 .90164 cmyk
ef
258.778 488.921 mo
258.778 487.571 li
.426368 .347875 .353155 .00985733 cmyk
@
259.058 488.122 mo
259.058 487.973 258.938 487.852 258.789 487.852 cv
258.64 487.852 258.519 487.973 258.519 488.122 cv
258.519 488.271 258.64 488.392 258.789 488.392 cv
258.938 488.392 259.058 488.271 259.058 488.122 cv
.75021 .679683 .670222 .90164 cmyk
ef
260.397 488.111 mo
260.397 486.762 li
.426368 .347875 .353155 .00985733 cmyk
@
260.613 487.345 mo
260.613 487.196 260.492 487.075 260.343 487.075 cv
260.194 487.075 260.073 487.196 260.073 487.345 cv
260.073 487.494 260.194 487.615 260.343 487.615 cv
260.492 487.615 260.613 487.494 260.613 487.345 cv
.75021 .679683 .670222 .90164 cmyk
ef
262.016 490.27 mo
262.016 489.19 li
.426368 .347875 .353155 .00985733 cmyk
@
262.297 489.741 mo
262.297 489.592 262.176 489.471 262.027 489.471 cv
261.878 489.471 261.757 489.592 261.757 489.741 cv
261.757 489.89 261.878 490.011 262.027 490.011 cv
262.176 490.011 262.297 489.89 262.297 489.741 cv
.75021 .679683 .670222 .90164 cmyk
ef
263.905 495.937 mo
263.905 494.857 li
.426368 .347875 .353155 .00985733 cmyk
@
264.175 495.375 mo
264.175 495.226 264.054 495.105 263.905 495.105 cv
263.756 495.105 263.635 495.226 263.635 495.375 cv
263.635 495.524 263.756 495.645 263.905 495.645 cv
264.054 495.645 264.175 495.524 264.175 495.375 cv
.75021 .679683 .670222 .90164 cmyk
ef
265.524 505.381 mo
265.524 504.302 li
.426368 .347875 .353155 .00985733 cmyk
@
265.794 504.831 mo
265.794 504.681 265.673 504.561 265.524 504.561 cv
265.375 504.561 265.254 504.681 265.254 504.831 cv
265.254 504.979 265.375 505.1 265.524 505.1 cv
265.673 505.1 265.794 504.979 265.794 504.831 cv
.75021 .679683 .670222 .90164 cmyk
ef
267.143 515.635 mo
267.143 514.556 li
.426368 .347875 .353155 .00985733 cmyk
@
267.413 515.063 mo
267.413 514.914 267.292 514.793 267.143 514.793 cv
266.994 514.793 266.873 514.914 266.873 515.063 cv
266.873 515.212 266.994 515.333 267.143 515.333 cv
267.292 515.333 267.413 515.212 267.413 515.063 cv
.75021 .679683 .670222 .90164 cmyk
ef
268.762 525.619 mo
268.762 524.81 li
.426368 .347875 .353155 .00985733 cmyk
@
269.032 525.36 mo
269.032 525.211 268.911 525.09 268.762 525.09 cv
268.613 525.09 268.492 525.211 268.492 525.36 cv
268.492 525.509 268.613 525.63 268.762 525.63 cv
268.911 525.63 269.032 525.509 269.032 525.36 cv
.75021 .679683 .670222 .90164 cmyk
ef
270.651 532.095 mo
270.651 531.286 li
.426368 .347875 .353155 .00985733 cmyk
@
270.91 531.512 mo
270.91 531.363 270.789 531.242 270.64 531.242 cv
270.491 531.242 270.37 531.363 270.37 531.512 cv
270.37 531.661 270.491 531.782 270.64 531.782 cv
270.789 531.782 270.91 531.661 270.91 531.512 cv
.75021 .679683 .670222 .90164 cmyk
ef
272.27 538.302 mo
272.27 537.762 li
.426368 .347875 .353155 .00985733 cmyk
@
272.529 537.989 mo
272.529 537.84 272.408 537.719 272.259 537.719 cv
272.11 537.719 271.989 537.84 271.989 537.989 cv
271.989 538.137 272.11 538.258 272.259 538.258 cv
272.408 538.258 272.529 538.137 272.529 537.989 cv
.75021 .679683 .670222 .90164 cmyk
ef
273.889 541.54 mo
273.889 541 li
.426368 .347875 .353155 .00985733 cmyk
@
274.148 541.227 mo
274.148 541.078 274.027 540.957 273.878 540.957 cv
273.729 540.957 273.608 541.078 273.608 541.227 cv
273.608 541.376 273.729 541.496 273.878 541.496 cv
274.027 541.496 274.148 541.376 274.148 541.227 cv
.75021 .679683 .670222 .90164 cmyk
ef
275.778 544.508 mo
275.778 543.968 li
.426368 .347875 .353155 .00985733 cmyk
@
276.026 544.206 mo
276.026 544.057 275.905 543.936 275.756 543.936 cv
275.607 543.936 275.486 544.057 275.486 544.206 cv
275.486 544.355 275.607 544.476 275.756 544.476 cv
275.905 544.476 276.026 544.355 276.026 544.206 cv
.75021 .679683 .670222 .90164 cmyk
ef
277.397 546.397 mo
277.397 546.127 li
.426368 .347875 .353155 .00985733 cmyk
@
277.71 546.149 mo
277.71 546 277.589 545.879 277.44 545.879 cv
277.291 545.879 277.17 546 277.17 546.149 cv
277.17 546.297 277.291 546.418 277.44 546.418 cv
277.589 546.418 277.71 546.297 277.71 546.149 cv
.75021 .679683 .670222 .90164 cmyk
ef
279.016 547.746 mo
279.016 547.476 li
.426368 .347875 .353155 .00985733 cmyk
@
279.264 547.703 mo
279.264 547.554 279.143 547.433 278.994 547.433 cv
278.845 547.433 278.724 547.554 278.724 547.703 cv
278.724 547.852 278.845 547.973 278.994 547.973 cv
279.143 547.973 279.264 547.852 279.264 547.703 cv
.75021 .679683 .670222 .90164 cmyk
ef
280.635 548.825 mo
280.635 548.556 li
.426368 .347875 .353155 .00985733 cmyk
@
280.948 548.869 mo
280.948 548.72 280.827 548.599 280.678 548.599 cv
280.529 548.599 280.408 548.72 280.408 548.869 cv
280.408 549.017 280.529 549.138 280.678 549.138 cv
280.827 549.138 280.948 549.017 280.948 548.869 cv
.75021 .679683 .670222 .90164 cmyk
ef
282.524 549.905 mo
282.524 549.365 li
.426368 .347875 .353155 .00985733 cmyk
@
282.761 549.646 mo
282.761 549.497 282.64 549.376 282.491 549.376 cv
282.342 549.376 282.222 549.497 282.222 549.646 cv
282.222 549.795 282.342 549.916 282.491 549.916 cv
282.64 549.916 282.761 549.795 282.761 549.646 cv
.75021 .679683 .670222 .90164 cmyk
ef
284.143 550.444 mo
284.143 550.175 li
.426368 .347875 .353155 .00985733 cmyk
@
284.445 550.423 mo
284.445 550.274 284.324 550.153 284.175 550.153 cv
284.026 550.153 283.905 550.274 283.905 550.423 cv
283.905 550.572 284.026 550.693 284.175 550.693 cv
284.324 550.693 284.445 550.572 284.445 550.423 cv
.75021 .679683 .670222 .90164 cmyk
ef
285.762 551.254 mo
285.762 550.984 li
.426368 .347875 .353155 .00985733 cmyk
@
285.999 550.941 mo
285.999 550.792 285.879 550.671 285.729 550.671 cv
285.581 550.671 285.46 550.792 285.46 550.941 cv
285.46 551.09 285.581 551.211 285.729 551.211 cv
285.879 551.211 285.999 551.09 285.999 550.941 cv
.75021 .679683 .670222 .90164 cmyk
ef
287.651 551.254 mo
.426368 .347875 .353155 .00985733 cmyk
@
287.942 551.265 mo
287.942 551.116 287.821 550.995 287.672 550.995 cv
287.523 550.995 287.402 551.116 287.402 551.265 cv
287.402 551.414 287.523 551.535 287.672 551.535 cv
287.821 551.535 287.942 551.414 287.942 551.265 cv
.75021 .679683 .670222 .90164 cmyk
ef
289.27 551.794 mo
289.27 551.524 li
.426368 .347875 .353155 .00985733 cmyk
@
289.496 551.524 mo
289.496 551.375 289.376 551.254 289.227 551.254 cv
289.078 551.254 288.957 551.375 288.957 551.524 cv
288.957 551.673 289.078 551.794 289.227 551.794 cv
289.376 551.794 289.496 551.673 289.496 551.524 cv
.75021 .679683 .670222 .90164 cmyk
ef
290.889 552.333 mo
290.889 552.063 li
.426368 .347875 .353155 .00985733 cmyk
@
291.18 552.366 mo
291.18 552.217 291.059 552.096 290.91 552.096 cv
290.762 552.096 290.641 552.217 290.641 552.366 cv
290.641 552.515 290.762 552.636 290.91 552.636 cv
291.059 552.636 291.18 552.515 291.18 552.366 cv
.75021 .679683 .670222 .90164 cmyk
ef
292.508 552.603 mo
292.508 552.333 li
.426368 .347875 .353155 .00985733 cmyk
@
292.735 552.366 mo
292.735 552.217 292.614 552.096 292.465 552.096 cv
292.316 552.096 292.195 552.217 292.195 552.366 cv
292.195 552.515 292.316 552.636 292.465 552.636 cv
292.614 552.636 292.735 552.515 292.735 552.366 cv
.75021 .679683 .670222 .90164 cmyk
ef
294.397 552.603 mo
294.397 552.333 li
.426368 .347875 .353155 .00985733 cmyk
@
294.677 552.625 mo
294.677 552.476 294.557 552.355 294.408 552.355 cv
294.259 552.355 294.138 552.476 294.138 552.625 cv
294.138 552.774 294.259 552.895 294.408 552.895 cv
294.557 552.895 294.677 552.774 294.677 552.625 cv
.75021 .679683 .670222 .90164 cmyk
ef
296.016 553.143 mo
296.016 552.873 li
.426368 .347875 .353155 .00985733 cmyk
@
296.232 552.884 mo
296.232 552.735 296.111 552.614 295.962 552.614 cv
295.813 552.614 295.692 552.735 295.692 552.884 cv
295.692 553.033 295.813 553.154 295.962 553.154 cv
296.111 553.154 296.232 553.033 296.232 552.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
297.635 553.143 mo
297.635 552.873 li
.426368 .347875 .353155 .00985733 cmyk
@
297.916 552.884 mo
297.916 552.735 297.795 552.614 297.646 552.614 cv
297.497 552.614 297.376 552.735 297.376 552.884 cv
297.376 553.033 297.497 553.154 297.646 553.154 cv
297.795 553.154 297.916 553.033 297.916 552.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
299.254 553.143 mo
299.254 552.873 li
.426368 .347875 .353155 .00985733 cmyk
@
299.47 553.143 mo
299.47 552.994 299.349 552.873 299.2 552.873 cv
299.051 552.873 298.93 552.994 298.93 553.143 cv
298.93 553.292 299.051 553.413 299.2 553.413 cv
299.349 553.413 299.47 553.292 299.47 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
301.143 553.413 mo
301.143 553.143 li
.426368 .347875 .353155 .00985733 cmyk
@
301.413 553.143 mo
301.413 552.994 301.292 552.873 301.143 552.873 cv
300.994 552.873 300.873 552.994 300.873 553.143 cv
300.873 553.292 300.994 553.413 301.143 553.413 cv
301.292 553.413 301.413 553.292 301.413 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
302.762 553.413 mo
.426368 .347875 .353155 .00985733 cmyk
@
303.032 553.402 mo
303.032 553.253 302.911 553.132 302.762 553.132 cv
302.613 553.132 302.492 553.253 302.492 553.402 cv
302.492 553.551 302.613 553.672 302.762 553.672 cv
302.911 553.672 303.032 553.551 303.032 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
304.381 553.683 mo
304.381 553.413 li
.426368 .347875 .353155 .00985733 cmyk
@
304.651 553.402 mo
304.651 553.253 304.53 553.132 304.381 553.132 cv
304.232 553.132 304.111 553.253 304.111 553.402 cv
304.111 553.551 304.232 553.672 304.381 553.672 cv
304.53 553.672 304.651 553.551 304.651 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
306.27 553.683 mo
306.27 553.413 li
.426368 .347875 .353155 .00985733 cmyk
@
306.529 553.402 mo
306.529 553.253 306.408 553.132 306.259 553.132 cv
306.11 553.132 305.989 553.253 305.989 553.402 cv
305.989 553.551 306.11 553.672 306.259 553.672 cv
306.408 553.672 306.529 553.551 306.529 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
307.889 553.683 mo
307.889 553.413 li
.426368 .347875 .353155 .00985733 cmyk
@
308.148 553.661 mo
308.148 553.512 308.027 553.391 307.878 553.391 cv
307.729 553.391 307.608 553.512 307.608 553.661 cv
307.608 553.81 307.729 553.931 307.878 553.931 cv
308.027 553.931 308.148 553.81 308.148 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
309.508 553.683 mo
.426368 .347875 .353155 .00985733 cmyk
@
309.767 553.661 mo
309.767 553.512 309.646 553.391 309.497 553.391 cv
309.348 553.391 309.227 553.512 309.227 553.661 cv
309.227 553.81 309.348 553.931 309.497 553.931 cv
309.646 553.931 309.767 553.81 309.767 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
311.127 553.683 mo
.426368 .347875 .353155 .00985733 cmyk
@
311.386 553.661 mo
311.386 553.512 311.265 553.391 311.116 553.391 cv
310.967 553.391 310.846 553.512 310.846 553.661 cv
310.846 553.81 310.967 553.931 311.116 553.931 cv
311.265 553.931 311.386 553.81 311.386 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
313.016 553.683 mo
.426368 .347875 .353155 .00985733 cmyk
@
313.329 553.661 mo
313.329 553.512 313.208 553.391 313.059 553.391 cv
312.91 553.391 312.789 553.512 312.789 553.661 cv
312.789 553.81 312.91 553.931 313.059 553.931 cv
313.208 553.931 313.329 553.81 313.329 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
314.635 553.683 mo
.426368 .347875 .353155 .00985733 cmyk
@
314.883 553.661 mo
314.883 553.512 314.762 553.391 314.613 553.391 cv
314.464 553.391 314.344 553.512 314.344 553.661 cv
314.344 553.81 314.464 553.931 314.613 553.931 cv
314.762 553.931 314.883 553.81 314.883 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
316.254 553.952 mo
316.254 553.683 li
.426368 .347875 .353155 .00985733 cmyk
@
316.567 553.92 mo
316.567 553.771 316.446 553.65 316.297 553.65 cv
316.148 553.65 316.027 553.771 316.027 553.92 cv
316.027 554.069 316.148 554.19 316.297 554.19 cv
316.446 554.19 316.567 554.069 316.567 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
318.143 553.952 mo
318.143 553.683 li
.426368 .347875 .353155 .00985733 cmyk
@
318.38 553.661 mo
318.38 553.512 318.259 553.391 318.111 553.391 cv
317.961 553.391 317.841 553.512 317.841 553.661 cv
317.841 553.81 317.961 553.931 318.111 553.931 cv
318.259 553.931 318.38 553.81 318.38 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
319.762 553.952 mo
319.762 553.683 li
.426368 .347875 .353155 .00985733 cmyk
@
320.064 553.661 mo
320.064 553.512 319.943 553.391 319.794 553.391 cv
319.645 553.391 319.524 553.512 319.524 553.661 cv
319.524 553.81 319.645 553.931 319.794 553.931 cv
319.943 553.931 320.064 553.81 320.064 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
321.381 553.952 mo
321.381 553.683 li
.426368 .347875 .353155 .00985733 cmyk
@
321.618 553.92 mo
321.618 553.771 321.497 553.65 321.349 553.65 cv
321.2 553.65 321.079 553.771 321.079 553.92 cv
321.079 554.069 321.2 554.19 321.349 554.19 cv
321.497 554.19 321.618 554.069 321.618 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
323 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
323.302 553.92 mo
323.302 553.771 323.181 553.65 323.032 553.65 cv
322.883 553.65 322.763 553.771 322.763 553.92 cv
322.763 554.069 322.883 554.19 323.032 554.19 cv
323.181 554.19 323.302 554.069 323.302 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
324.889 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
325.116 553.92 mo
325.116 553.771 324.995 553.65 324.846 553.65 cv
324.697 553.65 324.576 553.771 324.576 553.92 cv
324.576 554.069 324.697 554.19 324.846 554.19 cv
324.995 554.19 325.116 554.069 325.116 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
326.508 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
326.799 553.92 mo
326.799 553.771 326.678 553.65 326.53 553.65 cv
326.381 553.65 326.26 553.771 326.26 553.92 cv
326.26 554.069 326.381 554.19 326.53 554.19 cv
326.678 554.19 326.799 554.069 326.799 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
328.127 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
328.354 553.92 mo
328.354 553.771 328.233 553.65 328.084 553.65 cv
327.935 553.65 327.814 553.771 327.814 553.92 cv
327.814 554.069 327.935 554.19 328.084 554.19 cv
328.233 554.19 328.354 554.069 328.354 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
329.746 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
330.038 553.92 mo
330.038 553.771 329.917 553.65 329.768 553.65 cv
329.619 553.65 329.498 553.771 329.498 553.92 cv
329.498 554.069 329.619 554.19 329.768 554.19 cv
329.917 554.19 330.038 554.069 330.038 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
331.635 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
331.851 553.92 mo
331.851 553.771 331.73 553.65 331.581 553.65 cv
331.432 553.65 331.311 553.771 331.311 553.92 cv
331.311 554.069 331.432 554.19 331.581 554.19 cv
331.73 554.19 331.851 554.069 331.851 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
333.254 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
333.535 553.92 mo
333.535 553.771 333.414 553.65 333.265 553.65 cv
333.116 553.65 332.995 553.771 332.995 553.92 cv
332.995 554.069 333.116 554.19 333.265 554.19 cv
333.414 554.19 333.535 554.069 333.535 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
334.873 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
335.089 553.92 mo
335.089 553.771 334.968 553.65 334.819 553.65 cv
334.67 553.65 334.549 553.771 334.549 553.92 cv
334.549 554.069 334.67 554.19 334.819 554.19 cv
334.968 554.19 335.089 554.069 335.089 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
336.762 553.952 mo
.426368 .347875 .353155 .00985733 cmyk
@
337.032 553.92 mo
337.032 553.771 336.911 553.65 336.762 553.65 cv
336.613 553.65 336.492 553.771 336.492 553.92 cv
336.492 554.069 336.613 554.19 336.762 554.19 cv
336.911 554.19 337.032 554.069 337.032 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
122.508 553.952 mo
142.746 553.952 li
142.746 548.016 li
144.365 548.016 li
144.365 544.778 li
145.984 544.778 li
145.984 544.508 li
147.873 544.508 li
147.873 544.238 li
149.492 544.238 li
149.492 543.968 li
151.111 543.968 li
151.111 543.698 li
153 543.698 li
153 542.349 li
156.238 542.349 li
156.238 541.81 li
157.857 541.81 li
157.857 541.54 li
159.746 541.54 li
159.746 540.73 li
162.984 540.73 li
162.984 540.19 li
164.603 540.19 li
164.603 538.841 li
166.492 538.841 li
166.492 538.571 li
168.111 538.571 li
168.111 537.492 li
169.73 537.492 li
169.73 536.952 li
173.238 536.952 li
173.238 535.873 li
174.857 535.873 li
174.857 535.063 li
176.476 535.063 li
176.476 533.714 li
178.365 533.714 li
178.365 533.444 li
179.984 533.444 li
179.984 532.635 li
181.603 532.635 li
181.603 532.365 li
183.492 532.365 li
183.492 532.095 li
185.111 532.095 li
185.111 531.286 li
186.73 531.286 li
186.73 531.016 li
188.349 531.016 li
188.349 530.206 li
190.238 530.206 li
190.238 528.587 li
191.857 528.587 li
191.857 527.778 li
193.476 527.778 li
193.476 526.968 li
195.095 526.968 li
195.095 525.889 li
196.984 525.889 li
196.984 525.349 li
198.603 525.349 li
198.603 524.27 li
200.222 524.27 li
200.222 522.921 li
202.111 522.921 li
202.111 522.111 li
203.73 522.111 li
203.73 520.492 li
205.349 520.492 li
205.349 519.413 li
206.968 519.413 li
206.968 519.143 li
208.857 519.143 li
208.857 518.333 li
210.476 518.333 li
210.476 518.063 li
212.095 518.063 li
212.095 517.254 li
213.714 517.254 li
213.714 515.635 li
215.603 515.635 li
215.603 514.556 li
217.222 514.556 li
217.222 515.095 li
218.841 515.095 li
218.841 514.825 li
220.73 514.825 li
220.73 514.016 li
223.968 514.016 li
223.968 513.476 li
225.587 513.476 li
225.587 511.857 li
227.476 511.857 li
227.476 511.587 li
229.095 511.587 li
229.095 511.317 li
230.714 511.317 li
230.714 510.508 li
232.603 510.508 li
232.603 509.968 li
234.222 509.968 li
234.222 509.429 li
235.841 509.429 li
235.841 508.619 li
237.46 508.619 li
237.46 508.349 li
240.968 508.349 li
240.968 507.27 li
242.587 507.27 li
242.587 506.46 li
247.714 506.46 li
247.714 504.571 li
249.333 504.571 li
249.333 503.492 li
251.222 503.492 li
251.222 501.873 li
252.841 501.873 li
252.841 499.444 li
254.46 499.444 li
254.46 496.206 li
256.079 496.206 li
256.079 492.159 li
257.968 492.159 li
257.968 488.111 li
259.587 488.111 li
259.587 487.302 li
261.206 487.302 li
261.206 489.73 li
263.095 489.73 li
263.095 495.397 li
264.714 495.397 li
264.714 504.841 li
266.333 504.841 li
266.333 515.095 li
267.952 515.095 li
267.952 525.349 li
269.841 525.349 li
269.841 531.556 li
271.46 531.556 li
271.46 538.032 li
273.079 538.032 li
273.079 541.27 li
274.698 541.27 li
274.698 544.238 li
276.587 544.238 li
276.587 546.127 li
278.206 546.127 li
278.206 547.746 li
279.825 547.746 li
279.825 548.825 li
281.714 548.825 li
281.714 549.635 li
283.333 549.635 li
283.333 550.444 li
284.952 550.444 li
284.952 550.984 li
286.571 550.984 li
286.571 551.254 li
288.46 551.254 li
288.46 551.524 li
290.079 551.524 li
290.079 552.333 li
293.317 552.333 li
293.317 552.603 li
295.206 552.603 li
295.206 552.873 li
298.444 552.873 li
298.444 553.143 li
301.952 553.143 li
301.952 553.413 li
307.079 553.413 li
307.079 553.683 li
315.444 553.683 li
315.444 553.952 li
317.063 553.952 li
317.063 553.683 li
320.571 553.683 li
320.571 553.952 li
501.905 553.952 li
.426368 .347875 .353155 .00985733 cmyk
@
.75021 .679683 .670222 .90164 cmyk
ATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf345.186 213.947 mo(PYTHIA det. level)[11.2131 11.2131 10.2715 12.1376 4.67349 11.2131 4.67346 9.34698 9.34698 4.67346 4.67349 4.67349 3.73209 9.34692 8.40558 9.34698 0 ]xsh345.186 237.483 mo(R = 0.3, 0%-10%)[12.1376 4.67352 9.81769 4.67346 9.34698 4.67346 9.34698 4.67349 4.67346 9.34698 14.9452 5.59799 9.34698 9.34695 0 ]xsh256.619 494.317 mo
256.619 493.778 li
256.889 493.508 li
256.889 492.968 li
257.159 492.429 li
257.159 491.889 li
257.429 491.619 li
257.429 491.079 li
257.698 490.81 li
257.698 490 li
257.968 489.73 li
257.968 489.46 li
258.238 488.921 li
258.238 488.651 li
258.508 488.381 li
258.508 488.111 li
258.778 487.841 li
258.778 487.571 li
259.587 486.762 li
260.397 486.762 li
261.206 487.571 li
261.206 487.841 li
261.476 487.841 li
261.476 488.381 li
261.746 488.651 li
261.746 488.921 li
262.016 489.46 li
262.016 489.73 li
262.286 490 li
262.286 490.27 li
262.556 490.81 li
262.556 491.619 li
262.825 491.889 li
262.825 492.429 li
263.095 492.968 li
263.095 493.508 li
263.365 493.778 li
263.365 494.317 li
263.635 494.857 li
263.635 495.397 li
263.905 495.937 li
263.905 497.286 li
264.175 497.825 li
264.175 498.365 li
264.444 498.905 li
264.444 499.714 li
264.714 500.254 li
264.714 500.794 li
264.984 501.603 li
264.984 502.143 li
265.254 502.952 li
265.254 504.302 li
265.524 504.841 li
265.524 505.651 li
265.794 506.19 li
265.794 507 li
266.063 507.54 li
266.063 508.349 li
266.333 509.159 li
266.333 510.508 li
266.603 511.317 li
266.603 511.857 li
266.873 512.667 li
266.873 513.476 li
267.143 514.016 li
267.143 514.825 li
267.413 515.635 li
267.413 516.175 li
267.682 516.984 li
267.682 518.333 li
267.952 519.143 li
267.952 519.683 li
268.222 520.492 li
268.222 521.302 li
268.492 521.841 li
268.492 522.651 li
268.492 522.651 mo
268.762 523.19 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
.75021 .679683 .670222 .90164 cmyk
ATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf404.586 471.716 mo(= 5%)[9.81769 4.67346 9.34698 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf397.862 480.682 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf385.533 471.716 mo(/p)[4.67346 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf378.809 480.682 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf366.482 471.716 mo( p)[4.67349 0 ]xshATEDLP+Symbol*1 [16.8111 0 0 -16.8111 0 0 ]msf359.758 471.716 mo( )shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf260.011 471.716 mo(=20.0 GeV/c,  )[9.81769 9.34695 9.34698 4.67346 9.34698 4.67352 13.079 9.34698 11.2131 4.67346 8.40558 4.67346 4.67349 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf253.287 480.682 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf245.442 471.716 mo(p)sh153.81 550.444 mo
153.81 550.175 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
154.079 550.423 mo
154.079 550.274 153.958 550.153 153.809 550.153 cv
153.661 550.153 153.54 550.274 153.54 550.423 cv
153.54 550.572 153.661 550.693 153.809 550.693 cv
153.958 550.693 154.079 550.572 154.079 550.423 cv
.75021 .679683 .670222 .90164 cmyk
ef
155.429 548.286 mo
155.429 547.746 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
155.698 548.027 mo
155.698 547.878 155.577 547.757 155.429 547.757 cv
155.28 547.757 155.159 547.878 155.159 548.027 cv
155.159 548.176 155.28 548.296 155.429 548.296 cv
155.577 548.296 155.698 548.176 155.698 548.027 cv
.75021 .679683 .670222 .90164 cmyk
ef
157.048 548.286 mo
157.048 547.746 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
157.318 548.027 mo
157.318 547.878 157.197 547.757 157.048 547.757 cv
156.899 547.757 156.778 547.878 156.778 548.027 cv
156.778 548.176 156.899 548.296 157.048 548.296 cv
157.197 548.296 157.318 548.176 157.318 548.027 cv
.75021 .679683 .670222 .90164 cmyk
ef
158.667 548.016 mo
158.667 547.746 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
158.936 547.703 mo
158.936 547.554 158.816 547.433 158.667 547.433 cv
158.518 547.433 158.397 547.554 158.397 547.703 cv
158.397 547.852 158.518 547.973 158.667 547.973 cv
158.816 547.973 158.936 547.852 158.936 547.703 cv
.75021 .679683 .670222 .90164 cmyk
ef
160.556 547.746 mo
160.556 547.476 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
160.815 547.444 mo
160.815 547.295 160.694 547.174 160.545 547.174 cv
160.396 547.174 160.275 547.295 160.275 547.444 cv
160.275 547.593 160.396 547.714 160.545 547.714 cv
160.694 547.714 160.815 547.593 160.815 547.444 cv
.75021 .679683 .670222 .90164 cmyk
ef
162.175 547.746 mo
162.175 547.206 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
162.434 547.444 mo
162.434 547.295 162.313 547.174 162.164 547.174 cv
162.015 547.174 161.894 547.295 161.894 547.444 cv
161.894 547.593 162.015 547.714 162.164 547.714 cv
162.313 547.714 162.434 547.593 162.434 547.444 cv
.75021 .679683 .670222 .90164 cmyk
ef
163.794 547.476 mo
163.794 547.206 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
164.053 547.185 mo
164.053 547.036 163.932 546.915 163.783 546.915 cv
163.634 546.915 163.513 547.036 163.513 547.185 cv
163.513 547.334 163.634 547.455 163.783 547.455 cv
163.932 547.455 164.053 547.334 164.053 547.185 cv
.75021 .679683 .670222 .90164 cmyk
ef
165.683 546.937 mo
165.683 546.667 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
165.931 546.667 mo
165.931 546.518 165.81 546.397 165.661 546.397 cv
165.512 546.397 165.391 546.518 165.391 546.667 cv
165.391 546.816 165.512 546.936 165.661 546.936 cv
165.81 546.936 165.931 546.816 165.931 546.667 cv
.75021 .679683 .670222 .90164 cmyk
ef
167.302 546.937 mo
167.302 546.397 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
167.615 546.667 mo
167.615 546.518 167.494 546.397 167.345 546.397 cv
167.196 546.397 167.075 546.518 167.075 546.667 cv
167.075 546.816 167.196 546.936 167.345 546.936 cv
167.494 546.936 167.615 546.816 167.615 546.667 cv
.75021 .679683 .670222 .90164 cmyk
ef
168.921 546.397 mo
168.921 545.857 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
169.169 546.149 mo
169.169 546 169.048 545.879 168.899 545.879 cv
168.75 545.879 168.629 546 168.629 546.149 cv
168.629 546.297 168.75 546.418 168.899 546.418 cv
169.048 546.418 169.169 546.297 169.169 546.149 cv
.75021 .679683 .670222 .90164 cmyk
ef
170.54 546.397 mo
170.54 545.857 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
170.853 546.149 mo
170.853 546 170.732 545.879 170.583 545.879 cv
170.434 545.879 170.313 546 170.313 546.149 cv
170.313 546.297 170.434 546.418 170.583 546.418 cv
170.732 546.418 170.853 546.297 170.853 546.149 cv
.75021 .679683 .670222 .90164 cmyk
ef
172.429 546.667 mo
172.429 546.127 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
172.666 546.408 mo
172.666 546.259 172.545 546.138 172.396 546.138 cv
172.247 546.138 172.126 546.259 172.126 546.408 cv
172.126 546.557 172.247 546.677 172.396 546.677 cv
172.545 546.677 172.666 546.557 172.666 546.408 cv
.75021 .679683 .670222 .90164 cmyk
ef
174.048 546.127 mo
174.048 545.587 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
174.35 545.889 mo
174.35 545.741 174.229 545.62 174.08 545.62 cv
173.931 545.62 173.81 545.741 173.81 545.889 cv
173.81 546.038 173.931 546.159 174.08 546.159 cv
174.229 546.159 174.35 546.038 174.35 545.889 cv
.75021 .679683 .670222 .90164 cmyk
ef
175.667 545.317 mo
175.667 544.508 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
175.904 544.789 mo
175.904 544.64 175.783 544.519 175.634 544.519 cv
175.485 544.519 175.364 544.64 175.364 544.789 cv
175.364 544.938 175.485 545.058 175.634 545.058 cv
175.783 545.058 175.904 544.938 175.904 544.789 cv
.75021 .679683 .670222 .90164 cmyk
ef
177.556 546.127 mo
177.556 545.587 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
177.847 545.889 mo
177.847 545.741 177.726 545.62 177.577 545.62 cv
177.428 545.62 177.307 545.741 177.307 545.889 cv
177.307 546.038 177.428 546.159 177.577 546.159 cv
177.726 546.159 177.847 546.038 177.847 545.889 cv
.75021 .679683 .670222 .90164 cmyk
ef
179.175 545.587 mo
179.175 545.048 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
179.401 545.371 mo
179.401 545.222 179.28 545.102 179.131 545.102 cv
178.982 545.102 178.862 545.222 178.862 545.371 cv
178.862 545.52 178.982 545.641 179.131 545.641 cv
179.28 545.641 179.401 545.52 179.401 545.371 cv
.75021 .679683 .670222 .90164 cmyk
ef
180.794 545.048 mo
180.794 544.508 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
181.085 544.789 mo
181.085 544.64 180.964 544.519 180.815 544.519 cv
180.666 544.519 180.545 544.64 180.545 544.789 cv
180.545 544.938 180.666 545.058 180.815 545.058 cv
180.964 545.058 181.085 544.938 181.085 544.789 cv
.75021 .679683 .670222 .90164 cmyk
ef
182.413 544.508 mo
182.413 543.968 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
182.639 544.206 mo
182.639 544.057 182.518 543.936 182.37 543.936 cv
182.221 543.936 182.1 544.057 182.1 544.206 cv
182.1 544.355 182.221 544.476 182.37 544.476 cv
182.518 544.476 182.639 544.355 182.639 544.206 cv
.75021 .679683 .670222 .90164 cmyk
ef
184.302 544.508 mo
184.302 543.968 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
184.582 544.206 mo
184.582 544.057 184.461 543.936 184.312 543.936 cv
184.163 543.936 184.042 544.057 184.042 544.206 cv
184.042 544.355 184.163 544.476 184.312 544.476 cv
184.461 544.476 184.582 544.355 184.582 544.206 cv
.75021 .679683 .670222 .90164 cmyk
ef
185.921 545.048 mo
185.921 544.238 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
186.137 544.465 mo
186.137 544.316 186.016 544.195 185.867 544.195 cv
185.718 544.195 185.597 544.316 185.597 544.465 cv
185.597 544.614 185.718 544.735 185.867 544.735 cv
186.016 544.735 186.137 544.614 186.137 544.465 cv
.75021 .679683 .670222 .90164 cmyk
ef
187.54 543.698 mo
187.54 543.159 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
187.82 543.429 mo
187.82 543.28 187.699 543.159 187.551 543.159 cv
187.402 543.159 187.281 543.28 187.281 543.429 cv
187.281 543.577 187.402 543.698 187.551 543.698 cv
187.699 543.698 187.82 543.577 187.82 543.429 cv
.75021 .679683 .670222 .90164 cmyk
ef
189.159 543.968 mo
189.159 543.429 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
189.375 543.688 mo
189.375 543.539 189.254 543.418 189.105 543.418 cv
188.956 543.418 188.835 543.539 188.835 543.688 cv
188.835 543.837 188.956 543.957 189.105 543.957 cv
189.254 543.957 189.375 543.837 189.375 543.688 cv
.75021 .679683 .670222 .90164 cmyk
ef
191.048 543.698 mo
191.048 542.889 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
191.318 543.169 mo
191.318 543.021 191.197 542.9 191.048 542.9 cv
190.899 542.9 190.778 543.021 190.778 543.169 cv
190.778 543.318 190.899 543.439 191.048 543.439 cv
191.197 543.439 191.318 543.318 191.318 543.169 cv
.75021 .679683 .670222 .90164 cmyk
ef
192.667 543.159 mo
192.667 542.619 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
192.936 542.91 mo
192.936 542.761 192.816 542.641 192.667 542.641 cv
192.518 542.641 192.397 542.761 192.397 542.91 cv
192.397 543.059 192.518 543.18 192.667 543.18 cv
192.816 543.18 192.936 543.059 192.936 542.91 cv
.75021 .679683 .670222 .90164 cmyk
ef
194.286 542.349 mo
194.286 541.54 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
194.556 542.133 mo
194.556 541.984 194.435 541.863 194.286 541.863 cv
194.137 541.863 194.016 541.984 194.016 542.133 cv
194.016 542.282 194.137 542.403 194.286 542.403 cv
194.435 542.403 194.556 542.282 194.556 542.133 cv
.75021 .679683 .670222 .90164 cmyk
ef
196.175 542.889 mo
196.175 542.349 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
196.434 542.651 mo
196.434 542.503 196.313 542.382 196.164 542.382 cv
196.015 542.382 195.894 542.503 195.894 542.651 cv
195.894 542.8 196.015 542.921 196.164 542.921 cv
196.313 542.921 196.434 542.8 196.434 542.651 cv
.75021 .679683 .670222 .90164 cmyk
ef
197.794 542.079 mo
197.794 541.54 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
198.053 541.809 mo
198.053 541.661 197.932 541.54 197.783 541.54 cv
197.634 541.54 197.513 541.661 197.513 541.809 cv
197.513 541.958 197.634 542.079 197.783 542.079 cv
197.932 542.079 198.053 541.958 198.053 541.809 cv
.75021 .679683 .670222 .90164 cmyk
ef
199.413 542.619 mo
199.413 542.079 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
199.672 542.392 mo
199.672 542.243 199.551 542.122 199.402 542.122 cv
199.253 542.122 199.132 542.243 199.132 542.392 cv
199.132 542.541 199.253 542.662 199.402 542.662 cv
199.551 542.662 199.672 542.541 199.672 542.392 cv
.75021 .679683 .670222 .90164 cmyk
ef
201.032 541.81 mo
201.032 541.27 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
201.291 541.55 mo
201.291 541.401 201.17 541.281 201.021 541.281 cv
200.872 541.281 200.751 541.401 200.751 541.55 cv
200.751 541.699 200.872 541.82 201.021 541.82 cv
201.17 541.82 201.291 541.699 201.291 541.55 cv
.75021 .679683 .670222 .90164 cmyk
ef
202.921 541.81 mo
202.921 541 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
203.234 541.227 mo
203.234 541.078 203.113 540.957 202.964 540.957 cv
202.815 540.957 202.694 541.078 202.694 541.227 cv
202.694 541.376 202.815 541.496 202.964 541.496 cv
203.113 541.496 203.234 541.376 203.234 541.227 cv
.75021 .679683 .670222 .90164 cmyk
ef
204.54 541 mo
204.54 540.19 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
204.788 540.449 mo
204.788 540.301 204.667 540.18 204.518 540.18 cv
204.369 540.18 204.248 540.301 204.248 540.449 cv
204.248 540.598 204.369 540.719 204.518 540.719 cv
204.667 540.719 204.788 540.598 204.788 540.449 cv
.75021 .679683 .670222 .90164 cmyk
ef
206.159 541.54 mo
206.159 541 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
206.472 541.227 mo
206.472 541.078 206.351 540.957 206.202 540.957 cv
206.053 540.957 205.932 541.078 205.932 541.227 cv
205.932 541.376 206.053 541.496 206.202 541.496 cv
206.351 541.496 206.472 541.376 206.472 541.227 cv
.75021 .679683 .670222 .90164 cmyk
ef
208.048 540.73 mo
208.048 539.921 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
208.285 540.19 mo
208.285 540.042 208.164 539.921 208.015 539.921 cv
207.866 539.921 207.745 540.042 207.745 540.19 cv
207.745 540.339 207.866 540.46 208.015 540.46 cv
208.164 540.46 208.285 540.339 208.285 540.19 cv
.75021 .679683 .670222 .90164 cmyk
ef
209.667 540.73 mo
209.667 540.19 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
209.969 540.449 mo
209.969 540.301 209.848 540.18 209.699 540.18 cv
209.55 540.18 209.429 540.301 209.429 540.449 cv
209.429 540.598 209.55 540.719 209.699 540.719 cv
209.848 540.719 209.969 540.598 209.969 540.449 cv
.75021 .679683 .670222 .90164 cmyk
ef
211.286 539.921 mo
211.286 539.111 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
211.523 539.413 mo
211.523 539.264 211.402 539.143 211.253 539.143 cv
211.104 539.143 210.984 539.264 210.984 539.413 cv
210.984 539.562 211.104 539.683 211.253 539.683 cv
211.402 539.683 211.523 539.562 211.523 539.413 cv
.75021 .679683 .670222 .90164 cmyk
ef
212.905 539.651 mo
212.905 539.111 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
213.207 539.413 mo
213.207 539.264 213.086 539.143 212.937 539.143 cv
212.788 539.143 212.667 539.264 212.667 539.413 cv
212.667 539.562 212.788 539.683 212.937 539.683 cv
213.086 539.683 213.207 539.562 213.207 539.413 cv
.75021 .679683 .670222 .90164 cmyk
ef
214.794 539.921 mo
214.794 539.111 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
215.02 539.413 mo
215.02 539.264 214.899 539.143 214.751 539.143 cv
214.602 539.143 214.481 539.264 214.481 539.413 cv
214.481 539.562 214.602 539.683 214.751 539.683 cv
214.899 539.683 215.02 539.562 215.02 539.413 cv
.75021 .679683 .670222 .90164 cmyk
ef
216.413 539.381 mo
216.413 538.571 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
216.704 539.154 mo
216.704 539.005 216.583 538.884 216.434 538.884 cv
216.285 538.884 216.164 539.005 216.164 539.154 cv
216.164 539.303 216.285 539.424 216.434 539.424 cv
216.583 539.424 216.704 539.303 216.704 539.154 cv
.75021 .679683 .670222 .90164 cmyk
ef
218.032 539.111 mo
218.032 538.302 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
218.258 538.571 mo
218.258 538.422 218.137 538.302 217.989 538.302 cv
217.84 538.302 217.719 538.422 217.719 538.571 cv
217.719 538.72 217.84 538.841 217.989 538.841 cv
218.137 538.841 218.258 538.72 218.258 538.571 cv
.75021 .679683 .670222 .90164 cmyk
ef
219.651 538.571 mo
219.651 538.032 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
219.942 538.312 mo
219.942 538.163 219.821 538.042 219.672 538.042 cv
219.523 538.042 219.402 538.163 219.402 538.312 cv
219.402 538.461 219.523 538.582 219.672 538.582 cv
219.821 538.582 219.942 538.461 219.942 538.312 cv
.75021 .679683 .670222 .90164 cmyk
ef
221.54 538.032 mo
221.54 537.222 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
221.756 537.47 mo
221.756 537.321 221.635 537.201 221.486 537.201 cv
221.337 537.201 221.216 537.321 221.216 537.47 cv
221.216 537.619 221.337 537.74 221.486 537.74 cv
221.635 537.74 221.756 537.619 221.756 537.47 cv
.75021 .679683 .670222 .90164 cmyk
ef
223.159 537.762 mo
223.159 536.952 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
223.439 537.47 mo
223.439 537.321 223.318 537.201 223.169 537.201 cv
223.021 537.201 222.9 537.321 222.9 537.47 cv
222.9 537.619 223.021 537.74 223.169 537.74 cv
223.318 537.74 223.439 537.619 223.439 537.47 cv
.75021 .679683 .670222 .90164 cmyk
ef
224.778 537.492 mo
224.778 536.683 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
224.994 537.211 mo
224.994 537.063 224.873 536.942 224.724 536.942 cv
224.575 536.942 224.454 537.063 224.454 537.211 cv
224.454 537.36 224.575 537.481 224.724 537.481 cv
224.873 537.481 224.994 537.36 224.994 537.211 cv
.75021 .679683 .670222 .90164 cmyk
ef
226.667 536.143 mo
226.667 535.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
226.936 535.657 mo
226.936 535.508 226.816 535.387 226.667 535.387 cv
226.518 535.387 226.397 535.508 226.397 535.657 cv
226.397 535.806 226.518 535.927 226.667 535.927 cv
226.816 535.927 226.936 535.806 226.936 535.657 cv
.75021 .679683 .670222 .90164 cmyk
ef
228.286 536.413 mo
228.286 535.603 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
228.556 535.916 mo
228.556 535.767 228.435 535.646 228.286 535.646 cv
228.137 535.646 228.016 535.767 228.016 535.916 cv
228.016 536.065 228.137 536.186 228.286 536.186 cv
228.435 536.186 228.556 536.065 228.556 535.916 cv
.75021 .679683 .670222 .90164 cmyk
ef
229.905 535.873 mo
229.905 535.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
230.175 535.657 mo
230.175 535.508 230.054 535.387 229.905 535.387 cv
229.756 535.387 229.635 535.508 229.635 535.657 cv
229.635 535.806 229.756 535.927 229.905 535.927 cv
230.054 535.927 230.175 535.806 230.175 535.657 cv
.75021 .679683 .670222 .90164 cmyk
ef
231.524 536.683 mo
231.524 535.873 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
231.794 536.175 mo
231.794 536.026 231.673 535.905 231.524 535.905 cv
231.375 535.905 231.254 536.026 231.254 536.175 cv
231.254 536.324 231.375 536.445 231.524 536.445 cv
231.673 536.445 231.794 536.324 231.794 536.175 cv
.75021 .679683 .670222 .90164 cmyk
ef
233.413 535.063 mo
233.413 534.254 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
233.672 534.75 mo
233.672 534.602 233.551 534.481 233.402 534.481 cv
233.253 534.481 233.132 534.602 233.132 534.75 cv
233.132 534.899 233.253 535.02 233.402 535.02 cv
233.551 535.02 233.672 534.899 233.672 534.75 cv
.75021 .679683 .670222 .90164 cmyk
ef
235.032 535.333 mo
235.032 534.524 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
235.291 534.75 mo
235.291 534.602 235.17 534.481 235.021 534.481 cv
234.872 534.481 234.751 534.602 234.751 534.75 cv
234.751 534.899 234.872 535.02 235.021 535.02 cv
235.17 535.02 235.291 534.899 235.291 534.75 cv
.75021 .679683 .670222 .90164 cmyk
ef
236.651 534.254 mo
236.651 533.175 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
236.91 533.714 mo
236.91 533.565 236.789 533.444 236.64 533.444 cv
236.491 533.444 236.37 533.565 236.37 533.714 cv
236.37 533.863 236.491 533.984 236.64 533.984 cv
236.789 533.984 236.91 533.863 236.91 533.714 cv
.75021 .679683 .670222 .90164 cmyk
ef
238.27 534.254 mo
238.27 533.444 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
238.529 533.973 mo
238.529 533.824 238.408 533.703 238.259 533.703 cv
238.11 533.703 237.989 533.824 237.989 533.973 cv
237.989 534.122 238.11 534.243 238.259 534.243 cv
238.408 534.243 238.529 534.122 238.529 533.973 cv
.75021 .679683 .670222 .90164 cmyk
ef
240.159 533.984 mo
240.159 533.175 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
240.407 533.714 mo
240.407 533.565 240.286 533.444 240.137 533.444 cv
239.988 533.444 239.867 533.565 239.867 533.714 cv
239.867 533.863 239.988 533.984 240.137 533.984 cv
240.286 533.984 240.407 533.863 240.407 533.714 cv
.75021 .679683 .670222 .90164 cmyk
ef
241.778 533.984 mo
241.778 533.175 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
242.091 533.714 mo
242.091 533.565 241.97 533.444 241.821 533.444 cv
241.672 533.444 241.551 533.565 241.551 533.714 cv
241.551 533.863 241.672 533.984 241.821 533.984 cv
241.97 533.984 242.091 533.863 242.091 533.714 cv
.75021 .679683 .670222 .90164 cmyk
ef
243.397 532.905 mo
243.397 532.095 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
243.645 532.419 mo
243.645 532.27 243.524 532.149 243.375 532.149 cv
243.226 532.149 243.105 532.27 243.105 532.419 cv
243.105 532.568 243.226 532.689 243.375 532.689 cv
243.524 532.689 243.645 532.568 243.645 532.419 cv
.75021 .679683 .670222 .90164 cmyk
ef
245.286 532.905 mo
245.286 531.825 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
245.588 532.419 mo
245.588 532.27 245.467 532.149 245.318 532.149 cv
245.169 532.149 245.048 532.27 245.048 532.419 cv
245.048 532.568 245.169 532.689 245.318 532.689 cv
245.467 532.689 245.588 532.568 245.588 532.419 cv
.75021 .679683 .670222 .90164 cmyk
ef
246.905 531.825 mo
246.905 530.746 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
247.142 531.253 mo
247.142 531.104 247.021 530.983 246.872 530.983 cv
246.723 530.983 246.602 531.104 246.602 531.253 cv
246.602 531.402 246.723 531.523 246.872 531.523 cv
247.021 531.523 247.142 531.402 247.142 531.253 cv
.75021 .679683 .670222 .90164 cmyk
ef
248.524 531.825 mo
248.524 530.746 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
248.826 531.253 mo
248.826 531.104 248.705 530.983 248.556 530.983 cv
248.407 530.983 248.286 531.104 248.286 531.253 cv
248.286 531.402 248.407 531.523 248.556 531.523 cv
248.705 531.523 248.826 531.402 248.826 531.253 cv
.75021 .679683 .670222 .90164 cmyk
ef
250.143 531.556 mo
250.143 530.476 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
250.38 530.994 mo
250.38 530.845 250.259 530.724 250.111 530.724 cv
249.962 530.724 249.841 530.845 249.841 530.994 cv
249.841 531.143 249.962 531.264 250.111 531.264 cv
250.259 531.264 250.38 531.143 250.38 530.994 cv
.75021 .679683 .670222 .90164 cmyk
ef
252.032 530.206 mo
252.032 529.127 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
252.323 529.699 mo
252.323 529.55 252.202 529.429 252.053 529.429 cv
251.904 529.429 251.783 529.55 251.783 529.699 cv
251.783 529.848 251.904 529.969 252.053 529.969 cv
252.202 529.969 252.323 529.848 252.323 529.699 cv
.75021 .679683 .670222 .90164 cmyk
ef
253.651 529.397 mo
253.651 528.587 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
253.878 529.181 mo
253.878 529.032 253.757 528.911 253.608 528.911 cv
253.459 528.911 253.338 529.032 253.338 529.181 cv
253.338 529.33 253.459 529.451 253.608 529.451 cv
253.757 529.451 253.878 529.33 253.878 529.181 cv
.75021 .679683 .670222 .90164 cmyk
ef
255.27 530.206 mo
255.27 529.397 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
255.561 529.958 mo
255.561 529.809 255.44 529.688 255.291 529.688 cv
255.143 529.688 255.022 529.809 255.022 529.958 cv
255.022 530.107 255.143 530.228 255.291 530.228 cv
255.44 530.228 255.561 530.107 255.561 529.958 cv
.75021 .679683 .670222 .90164 cmyk
ef
257.159 529.937 mo
257.159 529.127 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
257.375 529.44 mo
257.375 529.291 257.254 529.17 257.105 529.17 cv
256.956 529.17 256.835 529.291 256.835 529.44 cv
256.835 529.589 256.956 529.71 257.105 529.71 cv
257.254 529.71 257.375 529.589 257.375 529.44 cv
.75021 .679683 .670222 .90164 cmyk
ef
258.778 529.127 mo
258.778 528.048 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
259.058 528.598 mo
259.058 528.449 258.938 528.328 258.789 528.328 cv
258.64 528.328 258.519 528.449 258.519 528.598 cv
258.519 528.747 258.64 528.868 258.789 528.868 cv
258.938 528.868 259.058 528.747 259.058 528.598 cv
.75021 .679683 .670222 .90164 cmyk
ef
260.397 528.317 mo
260.397 527.238 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
260.613 527.756 mo
260.613 527.607 260.492 527.486 260.343 527.486 cv
260.194 527.486 260.073 527.607 260.073 527.756 cv
260.073 527.905 260.194 528.026 260.343 528.026 cv
260.492 528.026 260.613 527.905 260.613 527.756 cv
.75021 .679683 .670222 .90164 cmyk
ef
262.016 527.778 mo
262.016 526.968 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
262.297 527.497 mo
262.297 527.348 262.176 527.227 262.027 527.227 cv
261.878 527.227 261.757 527.348 261.757 527.497 cv
261.757 527.646 261.878 527.767 262.027 527.767 cv
262.176 527.767 262.297 527.646 262.297 527.497 cv
.75021 .679683 .670222 .90164 cmyk
ef
263.905 526.698 mo
263.905 525.619 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
264.175 526.202 mo
264.175 526.053 264.054 525.932 263.905 525.932 cv
263.756 525.932 263.635 526.053 263.635 526.202 cv
263.635 526.351 263.756 526.472 263.905 526.472 cv
264.054 526.472 264.175 526.351 264.175 526.202 cv
.75021 .679683 .670222 .90164 cmyk
ef
265.524 526.968 mo
265.524 525.889 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
265.794 526.461 mo
265.794 526.312 265.673 526.191 265.524 526.191 cv
265.375 526.191 265.254 526.312 265.254 526.461 cv
265.254 526.61 265.375 526.731 265.524 526.731 cv
265.673 526.731 265.794 526.61 265.794 526.461 cv
.75021 .679683 .670222 .90164 cmyk
ef
267.143 526.968 mo
267.143 525.889 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
267.413 526.461 mo
267.413 526.312 267.292 526.191 267.143 526.191 cv
266.994 526.191 266.873 526.312 266.873 526.461 cv
266.873 526.61 266.994 526.731 267.143 526.731 cv
267.292 526.731 267.413 526.61 267.413 526.461 cv
.75021 .679683 .670222 .90164 cmyk
ef
268.762 525.619 mo
268.762 524.54 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
269.032 525.036 mo
269.032 524.887 268.911 524.766 268.762 524.766 cv
268.613 524.766 268.492 524.887 268.492 525.036 cv
268.492 525.185 268.613 525.306 268.762 525.306 cv
268.911 525.306 269.032 525.185 269.032 525.036 cv
.75021 .679683 .670222 .90164 cmyk
ef
270.651 525.619 mo
270.651 524.54 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
270.91 525.036 mo
270.91 524.887 270.789 524.766 270.64 524.766 cv
270.491 524.766 270.37 524.887 270.37 525.036 cv
270.37 525.185 270.491 525.306 270.64 525.306 cv
270.789 525.306 270.91 525.185 270.91 525.036 cv
.75021 .679683 .670222 .90164 cmyk
ef
272.27 524.54 mo
272.27 523.46 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
272.529 524 mo
272.529 523.851 272.408 523.73 272.259 523.73 cv
272.11 523.73 271.989 523.851 271.989 524 cv
271.989 524.149 272.11 524.27 272.259 524.27 cv
272.408 524.27 272.529 524.149 272.529 524 cv
.75021 .679683 .670222 .90164 cmyk
ef
273.889 525.889 mo
273.889 524.81 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
274.148 525.36 mo
274.148 525.211 274.027 525.09 273.878 525.09 cv
273.729 525.09 273.608 525.211 273.608 525.36 cv
273.608 525.509 273.729 525.63 273.878 525.63 cv
274.027 525.63 274.148 525.509 274.148 525.36 cv
.75021 .679683 .670222 .90164 cmyk
ef
275.778 525.079 mo
275.778 524.27 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
276.026 524.518 mo
276.026 524.369 275.905 524.248 275.756 524.248 cv
275.607 524.248 275.486 524.369 275.486 524.518 cv
275.486 524.667 275.607 524.788 275.756 524.788 cv
275.905 524.788 276.026 524.667 276.026 524.518 cv
.75021 .679683 .670222 .90164 cmyk
ef
277.397 524.27 mo
277.397 523.19 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
277.71 523.741 mo
277.71 523.592 277.589 523.471 277.44 523.471 cv
277.291 523.471 277.17 523.592 277.17 523.741 cv
277.17 523.89 277.291 524.011 277.44 524.011 cv
277.589 524.011 277.71 523.89 277.71 523.741 cv
.75021 .679683 .670222 .90164 cmyk
ef
279.016 522.921 mo
279.016 521.841 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
279.264 522.381 mo
279.264 522.232 279.143 522.111 278.994 522.111 cv
278.845 522.111 278.724 522.232 278.724 522.381 cv
278.724 522.53 278.845 522.651 278.994 522.651 cv
279.143 522.651 279.264 522.53 279.264 522.381 cv
.75021 .679683 .670222 .90164 cmyk
ef
280.635 523.73 mo
280.635 522.651 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
280.948 523.223 mo
280.948 523.074 280.827 522.953 280.678 522.953 cv
280.529 522.953 280.408 523.074 280.408 523.223 cv
280.408 523.372 280.529 523.493 280.678 523.493 cv
280.827 523.493 280.948 523.372 280.948 523.223 cv
.75021 .679683 .670222 .90164 cmyk
ef
282.524 522.381 mo
282.524 521.302 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
282.761 521.798 mo
282.761 521.649 282.64 521.528 282.491 521.528 cv
282.342 521.528 282.222 521.649 282.222 521.798 cv
282.222 521.947 282.342 522.068 282.491 522.068 cv
282.64 522.068 282.761 521.947 282.761 521.798 cv
.75021 .679683 .670222 .90164 cmyk
ef
284.143 523.46 mo
284.143 522.381 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
284.445 522.964 mo
284.445 522.815 284.324 522.694 284.175 522.694 cv
284.026 522.694 283.905 522.815 283.905 522.964 cv
283.905 523.113 284.026 523.234 284.175 523.234 cv
284.324 523.234 284.445 523.113 284.445 522.964 cv
.75021 .679683 .670222 .90164 cmyk
ef
285.762 522.651 mo
285.762 521.571 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
285.999 522.122 mo
285.999 521.973 285.879 521.852 285.729 521.852 cv
285.581 521.852 285.46 521.973 285.46 522.122 cv
285.46 522.271 285.581 522.392 285.729 522.392 cv
285.879 522.392 285.999 522.271 285.999 522.122 cv
.75021 .679683 .670222 .90164 cmyk
ef
287.651 522.381 mo
287.651 521.302 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
287.942 521.798 mo
287.942 521.649 287.821 521.528 287.672 521.528 cv
287.523 521.528 287.402 521.649 287.402 521.798 cv
287.402 521.947 287.523 522.068 287.672 522.068 cv
287.821 522.068 287.942 521.947 287.942 521.798 cv
.75021 .679683 .670222 .90164 cmyk
ef
289.27 522.111 mo
289.27 521.032 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
289.496 521.539 mo
289.496 521.39 289.376 521.269 289.227 521.269 cv
289.078 521.269 288.957 521.39 288.957 521.539 cv
288.957 521.688 289.078 521.809 289.227 521.809 cv
289.376 521.809 289.496 521.688 289.496 521.539 cv
.75021 .679683 .670222 .90164 cmyk
ef
290.889 521.571 mo
290.889 520.492 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
291.18 521.021 mo
291.18 520.872 291.059 520.751 290.91 520.751 cv
290.762 520.751 290.641 520.872 290.641 521.021 cv
290.641 521.17 290.762 521.291 290.91 521.291 cv
291.059 521.291 291.18 521.17 291.18 521.021 cv
.75021 .679683 .670222 .90164 cmyk
ef
292.508 522.381 mo
292.508 521.302 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
292.735 521.798 mo
292.735 521.649 292.614 521.528 292.465 521.528 cv
292.316 521.528 292.195 521.649 292.195 521.798 cv
292.195 521.947 292.316 522.068 292.465 522.068 cv
292.614 522.068 292.735 521.947 292.735 521.798 cv
.75021 .679683 .670222 .90164 cmyk
ef
294.397 519.952 mo
294.397 518.873 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
294.677 519.467 mo
294.677 519.318 294.557 519.197 294.408 519.197 cv
294.259 519.197 294.138 519.318 294.138 519.467 cv
294.138 519.616 294.259 519.737 294.408 519.737 cv
294.557 519.737 294.677 519.616 294.677 519.467 cv
.75021 .679683 .670222 .90164 cmyk
ef
296.016 522.111 mo
296.016 520.762 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
296.232 521.28 mo
296.232 521.131 296.111 521.01 295.962 521.01 cv
295.813 521.01 295.692 521.131 295.692 521.28 cv
295.692 521.429 295.813 521.55 295.962 521.55 cv
296.111 521.55 296.232 521.429 296.232 521.28 cv
.75021 .679683 .670222 .90164 cmyk
ef
297.635 521.302 mo
297.635 520.222 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
297.916 520.762 mo
297.916 520.613 297.795 520.492 297.646 520.492 cv
297.497 520.492 297.376 520.613 297.376 520.762 cv
297.376 520.911 297.497 521.032 297.646 521.032 cv
297.795 521.032 297.916 520.911 297.916 520.762 cv
.75021 .679683 .670222 .90164 cmyk
ef
299.254 521.841 mo
299.254 520.762 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
299.47 521.28 mo
299.47 521.131 299.349 521.01 299.2 521.01 cv
299.051 521.01 298.93 521.131 298.93 521.28 cv
298.93 521.429 299.051 521.55 299.2 521.55 cv
299.349 521.55 299.47 521.429 299.47 521.28 cv
.75021 .679683 .670222 .90164 cmyk
ef
301.143 519.413 mo
301.143 518.333 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
301.413 518.884 mo
301.413 518.735 301.292 518.614 301.143 518.614 cv
300.994 518.614 300.873 518.735 300.873 518.884 cv
300.873 519.033 300.994 519.154 301.143 519.154 cv
301.292 519.154 301.413 519.033 301.413 518.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
302.762 521.032 mo
302.762 519.683 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
303.032 520.244 mo
303.032 520.095 302.911 519.974 302.762 519.974 cv
302.613 519.974 302.492 520.095 302.492 520.244 cv
302.492 520.393 302.613 520.514 302.762 520.514 cv
302.911 520.514 303.032 520.393 303.032 520.244 cv
.75021 .679683 .670222 .90164 cmyk
ef
304.381 521.032 mo
304.381 519.952 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
304.651 520.503 mo
304.651 520.354 304.53 520.233 304.381 520.233 cv
304.232 520.233 304.111 520.354 304.111 520.503 cv
304.111 520.652 304.232 520.773 304.381 520.773 cv
304.53 520.773 304.651 520.652 304.651 520.503 cv
.75021 .679683 .670222 .90164 cmyk
ef
306.27 521.302 mo
306.27 520.222 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
306.529 520.762 mo
306.529 520.613 306.408 520.492 306.259 520.492 cv
306.11 520.492 305.989 520.613 305.989 520.762 cv
305.989 520.911 306.11 521.032 306.259 521.032 cv
306.408 521.032 306.529 520.911 306.529 520.762 cv
.75021 .679683 .670222 .90164 cmyk
ef
307.889 521.302 mo
307.889 520.222 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
308.148 520.762 mo
308.148 520.613 308.027 520.492 307.878 520.492 cv
307.729 520.492 307.608 520.613 307.608 520.762 cv
307.608 520.911 307.729 521.032 307.878 521.032 cv
308.027 521.032 308.148 520.911 308.148 520.762 cv
.75021 .679683 .670222 .90164 cmyk
ef
309.508 519.413 mo
309.508 518.333 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
309.767 518.884 mo
309.767 518.735 309.646 518.614 309.497 518.614 cv
309.348 518.614 309.227 518.735 309.227 518.884 cv
309.227 519.033 309.348 519.154 309.497 519.154 cv
309.646 519.154 309.767 519.033 309.767 518.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
311.127 520.492 mo
311.127 519.413 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
311.386 519.985 mo
311.386 519.836 311.265 519.715 311.116 519.715 cv
310.967 519.715 310.846 519.836 310.846 519.985 cv
310.846 520.134 310.967 520.255 311.116 520.255 cv
311.265 520.255 311.386 520.134 311.386 519.985 cv
.75021 .679683 .670222 .90164 cmyk
ef
313.016 519.413 mo
313.016 518.333 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
313.329 518.884 mo
313.329 518.735 313.208 518.614 313.059 518.614 cv
312.91 518.614 312.789 518.735 312.789 518.884 cv
312.789 519.033 312.91 519.154 313.059 519.154 cv
313.208 519.154 313.329 519.033 313.329 518.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
314.635 520.492 mo
314.635 519.413 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
314.883 519.985 mo
314.883 519.836 314.762 519.715 314.613 519.715 cv
314.464 519.715 314.344 519.836 314.344 519.985 cv
314.344 520.134 314.464 520.255 314.613 520.255 cv
314.762 520.255 314.883 520.134 314.883 519.985 cv
.75021 .679683 .670222 .90164 cmyk
ef
316.254 519.143 mo
316.254 518.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
316.567 518.56 mo
316.567 518.411 316.446 518.29 316.297 518.29 cv
316.148 518.29 316.027 518.411 316.027 518.56 cv
316.027 518.709 316.148 518.83 316.297 518.83 cv
316.446 518.83 316.567 518.709 316.567 518.56 cv
.75021 .679683 .670222 .90164 cmyk
ef
318.143 519.143 mo
318.143 518.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
318.38 518.56 mo
318.38 518.411 318.259 518.29 318.111 518.29 cv
317.961 518.29 317.841 518.411 317.841 518.56 cv
317.841 518.709 317.961 518.83 318.111 518.83 cv
318.259 518.83 318.38 518.709 318.38 518.56 cv
.75021 .679683 .670222 .90164 cmyk
ef
319.762 518.873 mo
319.762 517.524 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
320.064 518.301 mo
320.064 518.152 319.943 518.031 319.794 518.031 cv
319.645 518.031 319.524 518.152 319.524 518.301 cv
319.524 518.45 319.645 518.571 319.794 518.571 cv
319.943 518.571 320.064 518.45 320.064 518.301 cv
.75021 .679683 .670222 .90164 cmyk
ef
321.381 519.413 mo
321.381 518.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
321.618 518.884 mo
321.618 518.735 321.497 518.614 321.349 518.614 cv
321.2 518.614 321.079 518.735 321.079 518.884 cv
321.079 519.033 321.2 519.154 321.349 519.154 cv
321.497 519.154 321.618 519.033 321.618 518.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
323 519.413 mo
323 518.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
323.302 518.56 mo
323.302 518.411 323.181 518.29 323.032 518.29 cv
322.883 518.29 322.763 518.411 322.763 518.56 cv
322.763 518.709 322.883 518.83 323.032 518.83 cv
323.181 518.83 323.302 518.709 323.302 518.56 cv
.75021 .679683 .670222 .90164 cmyk
ef
324.889 519.143 mo
324.889 518.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
325.116 518.56 mo
325.116 518.411 324.995 518.29 324.846 518.29 cv
324.697 518.29 324.576 518.411 324.576 518.56 cv
324.576 518.709 324.697 518.83 324.846 518.83 cv
324.995 518.83 325.116 518.709 325.116 518.56 cv
.75021 .679683 .670222 .90164 cmyk
ef
326.508 518.603 mo
326.508 517.524 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
326.799 518.042 mo
326.799 517.893 326.678 517.772 326.53 517.772 cv
326.381 517.772 326.26 517.893 326.26 518.042 cv
326.26 518.191 326.381 518.312 326.53 518.312 cv
326.678 518.312 326.799 518.191 326.799 518.042 cv
.75021 .679683 .670222 .90164 cmyk
ef
328.127 518.873 mo
328.127 517.524 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
328.354 518.301 mo
328.354 518.152 328.233 518.031 328.084 518.031 cv
327.935 518.031 327.814 518.152 327.814 518.301 cv
327.814 518.45 327.935 518.571 328.084 518.571 cv
328.233 518.571 328.354 518.45 328.354 518.301 cv
.75021 .679683 .670222 .90164 cmyk
ef
329.746 520.762 mo
329.746 519.683 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
330.038 520.244 mo
330.038 520.095 329.917 519.974 329.768 519.974 cv
329.619 519.974 329.498 520.095 329.498 520.244 cv
329.498 520.393 329.619 520.514 329.768 520.514 cv
329.917 520.514 330.038 520.393 330.038 520.244 cv
.75021 .679683 .670222 .90164 cmyk
ef
331.635 523.19 mo
331.635 522.111 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
331.851 522.705 mo
331.851 522.556 331.73 522.435 331.581 522.435 cv
331.432 522.435 331.311 522.556 331.311 522.705 cv
331.311 522.854 331.432 522.975 331.581 522.975 cv
331.73 522.975 331.851 522.854 331.851 522.705 cv
.75021 .679683 .670222 .90164 cmyk
ef
333.254 526.159 mo
333.254 525.079 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
333.535 525.619 mo
333.535 525.47 333.414 525.349 333.265 525.349 cv
333.116 525.349 332.995 525.47 332.995 525.619 cv
332.995 525.768 333.116 525.889 333.265 525.889 cv
333.414 525.889 333.535 525.768 333.535 525.619 cv
.75021 .679683 .670222 .90164 cmyk
ef
334.873 528.857 mo
334.873 527.778 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
335.089 528.274 mo
335.089 528.125 334.968 528.004 334.819 528.004 cv
334.67 528.004 334.549 528.125 334.549 528.274 cv
334.549 528.423 334.67 528.544 334.819 528.544 cv
334.968 528.544 335.089 528.423 335.089 528.274 cv
.75021 .679683 .670222 .90164 cmyk
ef
336.762 532.095 mo
336.762 531.286 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
337.032 531.836 mo
337.032 531.687 336.911 531.566 336.762 531.566 cv
336.613 531.566 336.492 531.687 336.492 531.836 cv
336.492 531.985 336.613 532.106 336.762 532.106 cv
336.911 532.106 337.032 531.985 337.032 531.836 cv
.75021 .679683 .670222 .90164 cmyk
ef
338.381 534.524 mo
338.381 533.444 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
338.651 533.973 mo
338.651 533.824 338.53 533.703 338.381 533.703 cv
338.232 533.703 338.111 533.824 338.111 533.973 cv
338.111 534.122 338.232 534.243 338.381 534.243 cv
338.53 534.243 338.651 534.122 338.651 533.973 cv
.75021 .679683 .670222 .90164 cmyk
ef
340 536.413 mo
340 535.603 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
340.27 536.175 mo
340.27 536.026 340.149 535.905 340 535.905 cv
339.851 535.905 339.73 536.026 339.73 536.175 cv
339.73 536.324 339.851 536.445 340 536.445 cv
340.149 536.445 340.27 536.324 340.27 536.175 cv
.75021 .679683 .670222 .90164 cmyk
ef
341.619 538.571 mo
341.619 537.762 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
341.889 538.312 mo
341.889 538.163 341.768 538.042 341.619 538.042 cv
341.47 538.042 341.349 538.163 341.349 538.312 cv
341.349 538.461 341.47 538.582 341.619 538.582 cv
341.768 538.582 341.889 538.461 341.889 538.312 cv
.75021 .679683 .670222 .90164 cmyk
ef
343.508 540.19 mo
343.508 539.381 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
343.767 539.931 mo
343.767 539.782 343.646 539.662 343.497 539.662 cv
343.348 539.662 343.227 539.782 343.227 539.931 cv
343.227 540.08 343.348 540.201 343.497 540.201 cv
343.646 540.201 343.767 540.08 343.767 539.931 cv
.75021 .679683 .670222 .90164 cmyk
ef
345.127 542.079 mo
345.127 541.54 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
345.386 541.809 mo
345.386 541.661 345.265 541.54 345.116 541.54 cv
344.967 541.54 344.846 541.661 344.846 541.809 cv
344.846 541.958 344.967 542.079 345.116 542.079 cv
345.265 542.079 345.386 541.958 345.386 541.809 cv
.75021 .679683 .670222 .90164 cmyk
ef
346.746 543.159 mo
346.746 542.619 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
347.005 542.91 mo
347.005 542.761 346.884 542.641 346.735 542.641 cv
346.586 542.641 346.465 542.761 346.465 542.91 cv
346.465 543.059 346.586 543.18 346.735 543.18 cv
346.884 543.18 347.005 543.059 347.005 542.91 cv
.75021 .679683 .670222 .90164 cmyk
ef
348.365 544.508 mo
348.365 543.968 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
348.624 544.206 mo
348.624 544.057 348.503 543.936 348.354 543.936 cv
348.205 543.936 348.084 544.057 348.084 544.206 cv
348.084 544.355 348.205 544.476 348.354 544.476 cv
348.503 544.476 348.624 544.355 348.624 544.206 cv
.75021 .679683 .670222 .90164 cmyk
ef
350.254 546.397 mo
350.254 545.857 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
350.502 546.149 mo
350.502 546 350.381 545.879 350.232 545.879 cv
350.083 545.879 349.962 546 349.962 546.149 cv
349.962 546.297 350.083 546.418 350.232 546.418 cv
350.381 546.418 350.502 546.297 350.502 546.149 cv
.75021 .679683 .670222 .90164 cmyk
ef
351.873 546.397 mo
351.873 545.857 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
352.186 546.149 mo
352.186 546 352.065 545.879 351.916 545.879 cv
351.767 545.879 351.646 546 351.646 546.149 cv
351.646 546.297 351.767 546.418 351.916 546.418 cv
352.065 546.418 352.186 546.297 352.186 546.149 cv
.75021 .679683 .670222 .90164 cmyk
ef
353.492 547.206 mo
353.492 546.667 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
353.74 546.926 mo
353.74 546.777 353.619 546.656 353.47 546.656 cv
353.322 546.656 353.201 546.777 353.201 546.926 cv
353.201 547.075 353.322 547.196 353.47 547.196 cv
353.619 547.196 353.74 547.075 353.74 546.926 cv
.75021 .679683 .670222 .90164 cmyk
ef
355.381 548.286 mo
355.381 547.746 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
355.683 548.027 mo
355.683 547.878 355.562 547.757 355.413 547.757 cv
355.264 547.757 355.143 547.878 355.143 548.027 cv
355.143 548.176 355.264 548.296 355.413 548.296 cv
355.562 548.296 355.683 548.176 355.683 548.027 cv
.75021 .679683 .670222 .90164 cmyk
ef
357 548.825 mo
357 548.286 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
357.237 548.609 mo
357.237 548.461 357.117 548.34 356.968 548.34 cv
356.819 548.34 356.698 548.461 356.698 548.609 cv
356.698 548.758 356.819 548.879 356.968 548.879 cv
357.117 548.879 357.237 548.758 357.237 548.609 cv
.75021 .679683 .670222 .90164 cmyk
ef
358.619 549.365 mo
358.619 548.825 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
358.921 549.128 mo
358.921 548.979 358.8 548.858 358.651 548.858 cv
358.503 548.858 358.382 548.979 358.382 549.128 cv
358.382 549.277 358.503 549.397 358.651 549.397 cv
358.8 549.397 358.921 549.277 358.921 549.128 cv
.75021 .679683 .670222 .90164 cmyk
ef
360.238 549.365 mo
360.238 549.095 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
360.476 549.387 mo
360.476 549.238 360.355 549.117 360.206 549.117 cv
360.057 549.117 359.936 549.238 359.936 549.387 cv
359.936 549.536 360.057 549.656 360.206 549.656 cv
360.355 549.656 360.476 549.536 360.476 549.387 cv
.75021 .679683 .670222 .90164 cmyk
ef
362.127 550.175 mo
362.127 549.635 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
362.418 549.905 mo
362.418 549.756 362.297 549.635 362.149 549.635 cv
362 549.635 361.879 549.756 361.879 549.905 cv
361.879 550.054 362 550.175 362.149 550.175 cv
362.297 550.175 362.418 550.054 362.418 549.905 cv
.75021 .679683 .670222 .90164 cmyk
ef
363.746 550.444 mo
363.746 550.175 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
363.973 550.423 mo
363.973 550.274 363.852 550.153 363.703 550.153 cv
363.554 550.153 363.433 550.274 363.433 550.423 cv
363.433 550.572 363.554 550.693 363.703 550.693 cv
363.852 550.693 363.973 550.572 363.973 550.423 cv
.75021 .679683 .670222 .90164 cmyk
ef
365.365 550.984 mo
365.365 550.444 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
365.656 550.682 mo
365.656 550.533 365.536 550.412 365.387 550.412 cv
365.238 550.412 365.117 550.533 365.117 550.682 cv
365.117 550.831 365.238 550.952 365.387 550.952 cv
365.536 550.952 365.656 550.831 365.656 550.682 cv
.75021 .679683 .670222 .90164 cmyk
ef
367.254 550.984 mo
367.254 550.444 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
367.47 550.682 mo
367.47 550.533 367.349 550.412 367.2 550.412 cv
367.051 550.412 366.93 550.533 366.93 550.682 cv
366.93 550.831 367.051 550.952 367.2 550.952 cv
367.349 550.952 367.47 550.831 367.47 550.682 cv
.75021 .679683 .670222 .90164 cmyk
ef
368.873 551.254 mo
368.873 550.984 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
369.154 551.265 mo
369.154 551.116 369.033 550.995 368.884 550.995 cv
368.735 550.995 368.614 551.116 368.614 551.265 cv
368.614 551.414 368.735 551.535 368.884 551.535 cv
369.033 551.535 369.154 551.414 369.154 551.265 cv
.75021 .679683 .670222 .90164 cmyk
ef
370.492 551.524 mo
370.492 550.984 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
370.708 551.265 mo
370.708 551.116 370.587 550.995 370.438 550.995 cv
370.289 550.995 370.168 551.116 370.168 551.265 cv
370.168 551.414 370.289 551.535 370.438 551.535 cv
370.587 551.535 370.708 551.414 370.708 551.265 cv
.75021 .679683 .670222 .90164 cmyk
ef
372.111 551.794 mo
372.111 551.524 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
372.392 551.848 mo
372.392 551.699 372.271 551.578 372.122 551.578 cv
371.973 551.578 371.852 551.699 371.852 551.848 cv
371.852 551.997 371.973 552.117 372.122 552.117 cv
372.271 552.117 372.392 551.997 372.392 551.848 cv
.75021 .679683 .670222 .90164 cmyk
ef
374 552.063 mo
374 551.794 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
374.27 552.107 mo
374.27 551.958 374.149 551.837 374 551.837 cv
373.851 551.837 373.73 551.958 373.73 552.107 cv
373.73 552.256 373.851 552.376 374 552.376 cv
374.149 552.376 374.27 552.256 374.27 552.107 cv
.75021 .679683 .670222 .90164 cmyk
ef
375.619 552.333 mo
375.619 552.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
375.889 552.107 mo
375.889 551.958 375.768 551.837 375.619 551.837 cv
375.47 551.837 375.349 551.958 375.349 552.107 cv
375.349 552.256 375.47 552.376 375.619 552.376 cv
375.768 552.376 375.889 552.256 375.889 552.107 cv
.75021 .679683 .670222 .90164 cmyk
ef
377.238 552.333 mo
377.238 552.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
377.508 552.107 mo
377.508 551.958 377.387 551.837 377.238 551.837 cv
377.089 551.837 376.968 551.958 376.968 552.107 cv
376.968 552.256 377.089 552.376 377.238 552.376 cv
377.387 552.376 377.508 552.256 377.508 552.107 cv
.75021 .679683 .670222 .90164 cmyk
ef
378.857 552.333 mo
378.857 552.063 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
379.127 552.366 mo
379.127 552.217 379.006 552.096 378.857 552.096 cv
378.708 552.096 378.587 552.217 378.587 552.366 cv
378.587 552.515 378.708 552.636 378.857 552.636 cv
379.006 552.636 379.127 552.515 379.127 552.366 cv
.75021 .679683 .670222 .90164 cmyk
ef
380.746 552.603 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
381.005 552.625 mo
381.005 552.476 380.884 552.355 380.735 552.355 cv
380.586 552.355 380.465 552.476 380.465 552.625 cv
380.465 552.774 380.586 552.895 380.735 552.895 cv
380.884 552.895 381.005 552.774 381.005 552.625 cv
.75021 .679683 .670222 .90164 cmyk
ef
382.365 552.873 mo
382.365 552.603 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
382.624 552.884 mo
382.624 552.735 382.503 552.614 382.354 552.614 cv
382.205 552.614 382.084 552.735 382.084 552.884 cv
382.084 553.033 382.205 553.154 382.354 553.154 cv
382.503 553.154 382.624 553.033 382.624 552.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
383.984 552.603 mo
383.984 552.333 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
384.243 552.625 mo
384.243 552.476 384.122 552.355 383.973 552.355 cv
383.824 552.355 383.703 552.476 383.703 552.625 cv
383.703 552.774 383.824 552.895 383.973 552.895 cv
384.122 552.895 384.243 552.774 384.243 552.625 cv
.75021 .679683 .670222 .90164 cmyk
ef
385.873 552.603 mo
385.873 552.333 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
386.121 552.625 mo
386.121 552.476 386 552.355 385.851 552.355 cv
385.703 552.355 385.582 552.476 385.582 552.625 cv
385.582 552.774 385.703 552.895 385.851 552.895 cv
386 552.895 386.121 552.774 386.121 552.625 cv
.75021 .679683 .670222 .90164 cmyk
ef
387.492 553.143 mo
387.492 552.873 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
387.805 552.884 mo
387.805 552.735 387.684 552.614 387.535 552.614 cv
387.386 552.614 387.265 552.735 387.265 552.884 cv
387.265 553.033 387.386 553.154 387.535 553.154 cv
387.684 553.154 387.805 553.033 387.805 552.884 cv
.75021 .679683 .670222 .90164 cmyk
ef
389.111 553.143 mo
389.111 552.873 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
389.359 553.143 mo
389.359 552.994 389.238 552.873 389.09 552.873 cv
388.941 552.873 388.82 552.994 388.82 553.143 cv
388.82 553.292 388.941 553.413 389.09 553.413 cv
389.238 553.413 389.359 553.292 389.359 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
390.73 553.143 mo
390.73 552.873 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
391.043 553.143 mo
391.043 552.994 390.922 552.873 390.773 552.873 cv
390.624 552.873 390.504 552.994 390.504 553.143 cv
390.504 553.292 390.624 553.413 390.773 553.413 cv
390.922 553.413 391.043 553.292 391.043 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
392.619 553.143 mo
392.619 552.873 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
392.857 553.143 mo
392.857 552.994 392.736 552.873 392.587 552.873 cv
392.438 552.873 392.317 552.994 392.317 553.143 cv
392.317 553.292 392.438 553.413 392.587 553.413 cv
392.736 553.413 392.857 553.292 392.857 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
394.238 553.143 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
394.54 553.143 mo
394.54 552.994 394.419 552.873 394.271 552.873 cv
394.121 552.873 394.001 552.994 394.001 553.143 cv
394.001 553.292 394.121 553.413 394.271 553.413 cv
394.419 553.413 394.54 553.292 394.54 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
395.857 553.413 mo
395.857 553.143 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
396.095 553.143 mo
396.095 552.994 395.974 552.873 395.825 552.873 cv
395.676 552.873 395.555 552.994 395.555 553.143 cv
395.555 553.292 395.676 553.413 395.825 553.413 cv
395.974 553.413 396.095 553.292 396.095 553.143 cv
.75021 .679683 .670222 .90164 cmyk
ef
397.746 553.413 mo
397.746 553.143 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
398.038 553.402 mo
398.038 553.253 397.917 553.132 397.768 553.132 cv
397.619 553.132 397.498 553.253 397.498 553.402 cv
397.498 553.551 397.619 553.672 397.768 553.672 cv
397.917 553.672 398.038 553.551 398.038 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
399.365 553.413 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
399.592 553.402 mo
399.592 553.253 399.471 553.132 399.322 553.132 cv
399.173 553.132 399.052 553.253 399.052 553.402 cv
399.052 553.551 399.173 553.672 399.322 553.672 cv
399.471 553.672 399.592 553.551 399.592 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
400.984 553.413 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
401.276 553.402 mo
401.276 553.253 401.155 553.132 401.006 553.132 cv
400.857 553.132 400.736 553.253 400.736 553.402 cv
400.736 553.551 400.857 553.672 401.006 553.672 cv
401.155 553.672 401.276 553.551 401.276 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
402.603 553.413 mo
402.603 553.143 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
402.83 553.402 mo
402.83 553.253 402.709 553.132 402.56 553.132 cv
402.411 553.132 402.29 553.253 402.29 553.402 cv
402.29 553.551 402.411 553.672 402.56 553.672 cv
402.709 553.672 402.83 553.551 402.83 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
404.492 553.683 mo
404.492 553.413 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
404.773 553.402 mo
404.773 553.253 404.652 553.132 404.503 553.132 cv
404.354 553.132 404.233 553.253 404.233 553.402 cv
404.233 553.551 404.354 553.672 404.503 553.672 cv
404.652 553.672 404.773 553.551 404.773 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
406.111 553.413 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
406.327 553.402 mo
406.327 553.253 406.206 553.132 406.057 553.132 cv
405.908 553.132 405.787 553.253 405.787 553.402 cv
405.787 553.551 405.908 553.672 406.057 553.672 cv
406.206 553.672 406.327 553.551 406.327 553.402 cv
.75021 .679683 .670222 .90164 cmyk
ef
407.73 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
408.011 553.661 mo
408.011 553.512 407.89 553.391 407.741 553.391 cv
407.592 553.391 407.471 553.512 407.471 553.661 cv
407.471 553.81 407.592 553.931 407.741 553.931 cv
407.89 553.931 408.011 553.81 408.011 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
409.349 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
409.565 553.661 mo
409.565 553.512 409.444 553.391 409.295 553.391 cv
409.146 553.391 409.025 553.512 409.025 553.661 cv
409.025 553.81 409.146 553.931 409.295 553.931 cv
409.444 553.931 409.565 553.81 409.565 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
411.238 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
411.508 553.661 mo
411.508 553.512 411.387 553.391 411.238 553.391 cv
411.089 553.391 410.968 553.512 410.968 553.661 cv
410.968 553.81 411.089 553.931 411.238 553.931 cv
411.387 553.931 411.508 553.81 411.508 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
412.857 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
413.127 553.661 mo
413.127 553.512 413.006 553.391 412.857 553.391 cv
412.708 553.391 412.587 553.512 412.587 553.661 cv
412.587 553.81 412.708 553.931 412.857 553.931 cv
413.006 553.931 413.127 553.81 413.127 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
414.476 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
414.746 553.661 mo
414.746 553.512 414.625 553.391 414.476 553.391 cv
414.327 553.391 414.206 553.512 414.206 553.661 cv
414.206 553.81 414.327 553.931 414.476 553.931 cv
414.625 553.931 414.746 553.81 414.746 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
416.365 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
416.624 553.661 mo
416.624 553.512 416.503 553.391 416.354 553.391 cv
416.205 553.391 416.084 553.512 416.084 553.661 cv
416.084 553.81 416.205 553.931 416.354 553.931 cv
416.503 553.931 416.624 553.81 416.624 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
417.984 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
418.243 553.661 mo
418.243 553.512 418.122 553.391 417.973 553.391 cv
417.824 553.391 417.703 553.512 417.703 553.661 cv
417.703 553.81 417.824 553.931 417.973 553.931 cv
418.122 553.931 418.243 553.81 418.243 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
419.603 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
419.862 553.661 mo
419.862 553.512 419.741 553.391 419.592 553.391 cv
419.443 553.391 419.323 553.512 419.323 553.661 cv
419.323 553.81 419.443 553.931 419.592 553.931 cv
419.741 553.931 419.862 553.81 419.862 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
421.222 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
421.481 553.661 mo
421.481 553.512 421.36 553.391 421.211 553.391 cv
421.063 553.391 420.942 553.512 420.942 553.661 cv
420.942 553.81 421.063 553.931 421.211 553.931 cv
421.36 553.931 421.481 553.81 421.481 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
423.111 553.952 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
423.424 553.92 mo
423.424 553.771 423.303 553.65 423.154 553.65 cv
423.005 553.65 422.884 553.771 422.884 553.92 cv
422.884 554.069 423.005 554.19 423.154 554.19 cv
423.303 554.19 423.424 554.069 423.424 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
424.73 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
424.978 553.661 mo
424.978 553.512 424.858 553.391 424.709 553.391 cv
424.56 553.391 424.439 553.512 424.439 553.661 cv
424.439 553.81 424.56 553.931 424.709 553.931 cv
424.858 553.931 424.978 553.81 424.978 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
426.349 553.683 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
426.662 553.661 mo
426.662 553.512 426.541 553.391 426.392 553.391 cv
426.243 553.391 426.122 553.512 426.122 553.661 cv
426.122 553.81 426.243 553.931 426.392 553.931 cv
426.541 553.931 426.662 553.81 426.662 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
427.968 553.952 mo
427.968 553.683 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
428.216 553.661 mo
428.216 553.512 428.096 553.391 427.947 553.391 cv
427.798 553.391 427.677 553.512 427.677 553.661 cv
427.677 553.81 427.798 553.931 427.947 553.931 cv
428.096 553.931 428.216 553.81 428.216 553.661 cv
.75021 .679683 .670222 .90164 cmyk
ef
429.857 553.952 mo
429.857 553.683 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
430.159 553.92 mo
430.159 553.771 430.039 553.65 429.889 553.65 cv
429.741 553.65 429.62 553.771 429.62 553.92 cv
429.62 554.069 429.741 554.19 429.889 554.19 cv
430.039 554.19 430.159 554.069 430.159 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
431.476 553.952 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
431.714 553.92 mo
431.714 553.771 431.593 553.65 431.444 553.65 cv
431.295 553.65 431.174 553.771 431.174 553.92 cv
431.174 554.069 431.295 554.19 431.444 554.19 cv
431.593 554.19 431.714 554.069 431.714 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
433.095 553.952 mo
433.095 553.683 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
433.397 553.92 mo
433.397 553.771 433.277 553.65 433.128 553.65 cv
432.979 553.65 432.858 553.771 432.858 553.92 cv
432.858 554.069 432.979 554.19 433.128 554.19 cv
433.277 554.19 433.397 554.069 433.397 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
434.984 553.952 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
435.211 553.92 mo
435.211 553.771 435.09 553.65 434.941 553.65 cv
434.792 553.65 434.671 553.771 434.671 553.92 cv
434.671 554.069 434.792 554.19 434.941 554.19 cv
435.09 554.19 435.211 554.069 435.211 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
436.603 553.952 mo
.193668 .150057 .155337 3.0518e-05 cmyk
@
436.895 553.92 mo
436.895 553.771 436.774 553.65 436.625 553.65 cv
436.476 553.65 436.355 553.771 436.355 553.92 cv
436.355 554.069 436.476 554.19 436.625 554.19 cv
436.774 554.19 436.895 554.069 436.895 553.92 cv
.75021 .679683 .670222 .90164 cmyk
ef
122.508 553.952 mo
153 553.952 li
153 550.444 li
154.619 550.444 li
154.619 548.016 li
157.857 548.016 li
157.857 547.746 li
159.746 547.746 li
159.746 547.476 li
162.984 547.476 li
162.984 547.206 li
164.603 547.206 li
164.603 546.667 li
168.111 546.667 li
168.111 546.127 li
171.619 546.127 li
171.619 546.397 li
173.238 546.397 li
173.238 545.857 li
174.857 545.857 li
174.857 544.778 li
176.476 544.778 li
176.476 545.857 li
178.365 545.857 li
178.365 545.317 li
179.984 545.317 li
179.984 544.778 li
181.603 544.778 li
181.603 544.238 li
185.111 544.238 li
185.111 544.508 li
186.73 544.508 li
186.73 543.429 li
188.349 543.429 li
188.349 543.698 li
190.238 543.698 li
190.238 543.159 li
191.857 543.159 li
191.857 542.889 li
193.476 542.889 li
193.476 542.079 li
195.095 542.079 li
195.095 542.619 li
196.984 542.619 li
196.984 541.81 li
198.603 541.81 li
198.603 542.349 li
200.222 542.349 li
200.222 541.54 li
202.111 541.54 li
202.111 541.27 li
203.73 541.27 li
203.73 540.46 li
205.349 540.46 li
205.349 541.27 li
206.968 541.27 li
206.968 540.19 li
208.857 540.19 li
208.857 540.46 li
210.476 540.46 li
210.476 539.381 li
215.603 539.381 li
215.603 539.111 li
217.222 539.111 li
217.222 538.571 li
218.841 538.571 li
218.841 538.302 li
220.73 538.302 li
220.73 537.492 li
223.968 537.492 li
223.968 537.222 li
225.587 537.222 li
225.587 535.603 li
227.476 535.603 li
227.476 535.873 li
229.095 535.873 li
229.095 535.603 li
230.714 535.603 li
230.714 536.143 li
232.603 536.143 li
232.603 534.794 li
235.841 534.794 li
235.841 533.714 li
237.46 533.714 li
237.46 533.984 li
239.349 533.984 li
239.349 533.714 li
242.587 533.714 li
242.587 532.365 li
246.095 532.365 li
246.095 531.286 li
249.333 531.286 li
249.333 531.016 li
251.222 531.016 li
251.222 529.667 li
252.841 529.667 li
252.841 529.127 li
254.46 529.127 li
254.46 529.937 li
256.079 529.937 li
256.079 529.397 li
257.968 529.397 li
257.968 528.587 li
259.587 528.587 li
259.587 527.778 li
261.206 527.778 li
261.206 527.508 li
263.095 527.508 li
263.095 526.159 li
264.714 526.159 li
264.714 526.429 li
267.952 526.429 li
267.952 525.079 li
271.46 525.079 li
271.46 524 li
273.079 524 li
273.079 525.349 li
274.698 525.349 li
274.698 524.54 li
276.587 524.54 li
276.587 523.73 li
278.206 523.73 li
278.206 522.381 li
279.825 522.381 li
279.825 523.19 li
281.714 523.19 li
281.714 521.841 li
283.333 521.841 li
283.333 522.921 li
284.952 522.921 li
284.952 522.111 li
286.571 522.111 li
286.571 521.841 li
288.46 521.841 li
288.46 521.571 li
290.079 521.571 li
290.079 521.032 li
291.698 521.032 li
291.698 521.841 li
293.317 521.841 li
293.317 519.413 li
295.206 519.413 li
295.206 521.302 li
296.825 521.302 li
296.825 520.762 li
298.444 520.762 li
298.444 521.302 li
300.333 521.302 li
300.333 518.873 li
301.952 518.873 li
301.952 520.222 li
303.571 520.222 li
303.571 520.492 li
305.19 520.492 li
305.19 520.762 li
308.698 520.762 li
308.698 518.873 li
310.317 518.873 li
310.317 519.952 li
312.206 519.952 li
312.206 518.873 li
313.825 518.873 li
313.825 519.952 li
315.444 519.952 li
315.444 518.603 li
318.952 518.603 li
318.952 518.333 li
320.571 518.333 li
320.571 518.873 li
322.19 518.873 li
322.19 518.603 li
325.698 518.603 li
325.698 518.063 li
327.317 518.063 li
327.317 518.333 li
328.936 518.333 li
328.936 520.222 li
330.825 520.222 li
330.825 522.651 li
332.444 522.651 li
332.444 525.619 li
334.063 525.619 li
334.063 528.317 li
335.682 528.317 li
335.682 531.825 li
337.571 531.825 li
337.571 533.984 li
339.19 533.984 li
339.19 536.143 li
340.809 536.143 li
340.809 538.302 li
342.698 538.302 li
342.698 539.921 li
344.317 539.921 li
344.317 541.81 li
345.936 541.81 li
345.936 542.889 li
347.556 542.889 li
347.556 544.238 li
349.444 544.238 li
349.444 546.127 li
352.682 546.127 li
352.682 546.937 li
354.302 546.937 li
354.302 548.016 li
356.19 548.016 li
356.19 548.556 li
357.809 548.556 li
357.809 549.095 li
359.429 549.095 li
359.429 549.365 li
361.317 549.365 li
361.317 549.905 li
362.936 549.905 li
362.936 550.444 li
364.556 550.444 li
364.556 550.714 li
368.063 550.714 li
368.063 551.254 li
371.302 551.254 li
371.302 551.794 li
372.921 551.794 li
372.921 552.063 li
378.048 552.063 li
378.048 552.333 li
379.936 552.333 li
379.936 552.603 li
381.556 552.603 li
381.556 552.873 li
383.175 552.873 li
383.175 552.603 li
386.682 552.603 li
386.682 552.873 li
388.302 552.873 li
388.302 553.143 li
396.667 553.143 li
396.667 553.413 li
406.921 553.413 li
406.921 553.683 li
422.302 553.683 li
422.302 553.952 li
423.921 553.952 li
423.921 553.683 li
429.048 553.683 li
429.048 553.952 li
501.905 553.952 li
.193668 .150057 .155337 3.0518e-05 cmyk
@
.75021 .679683 .670222 .90164 cmyk
ATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf345.186 213.947 mo(PYTHIA det. level)[11.2131 11.2131 10.2715 12.1376 4.67349 11.2131 4.67346 9.34698 9.34698 4.67346 4.67349 4.67349 3.73209 9.34692 8.40558 9.34698 0 ]xsh345.186 237.483 mo(R = 0.3, 0%-10%)[12.1376 4.67352 9.81769 4.67346 9.34698 4.67346 9.34698 4.67349 4.67346 9.34698 14.9452 5.59799 9.34698 9.34695 0 ]xsh324.349 516.984 mo
324.889 516.984 li
325.429 517.524 li
325.698 517.524 li
325.968 517.794 li
326.238 517.794 li
326.238 518.063 li
326.508 518.063 li
327.048 518.603 li
327.317 518.603 li
327.317 518.873 li
327.587 519.143 li
327.857 519.143 li
328.397 519.683 li
328.397 519.952 li
328.667 520.222 li
328.936 520.222 li
329.476 520.762 li
329.476 521.032 li
330.556 522.111 li
330.556 522.381 li
331.635 523.46 li
331.635 523.73 li
332.714 524.81 li
332.714 525.079 li
333.254 525.619 li
333.524 526.159 li
333.794 526.429 li
333.794 526.698 li
334.603 527.508 li
334.873 528.048 li
334.873 528.317 li
334.873 528.317 mo
335.682 529.127 li
335.952 529.667 li
336.222 529.937 li
336.222 530.206 li
336.762 530.746 li
337.032 531.286 li
337.302 531.556 li
337.302 531.825 li
338.111 532.635 li
338.381 533.175 li
338.381 533.444 li
339.19 534.254 li
339.46 534.794 li
339.46 535.063 li
340.54 536.143 li
340.54 536.683 li
341.619 537.762 li
341.619 538.032 li
342.698 539.111 li
342.698 539.651 li
343.778 540.73 li
343.778 541 li
345.936 543.159 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: TCJRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TCJRMX+Helvetica gcheck setglobal} if
1 2752 16 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>TCJRMX+Helvetica AddT42Char 
TCJRMX+Helvetica /CharStrings get begin
/eight 16 def
end
TCJRMX+Helvetica /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATEDLO+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash /zero /one /two /three /four /five /six /.notdef /eight 4{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G /H /I 6{/.notdef}rp /P /.notdef /R /.notdef /T /.notdef /V 2{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i /j /.notdef /l /.notdef /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]ATEDLO+Helvetica nfATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf443.813 505.338 mo(= 8%)[9.81769 4.67346 9.34698 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf437.089 514.304 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf424.76 505.338 mo(/p)[4.67346 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf418.035 514.304 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf405.706 505.338 mo( p)[4.67349 0 ]xshATEDLP+Symbol*1 [16.8111 0 0 -16.8111 0 0 ]msf398.982 505.338 mo( )shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf299.238 505.338 mo(=30.0 GeV/c,  )[9.81769 9.34698 9.34695 4.67349 9.34695 4.67352 13.079 9.34698 11.2131 4.67346 8.40558 4.67349 4.67349 0 ]xshATEDLO+Helvetica*1 [11.2074 0 0 -11.2074 0 0 ]msf292.513 514.304 mo(T)shATEDLO+Helvetica*1 [16.8111 0 0 -16.8111 0 0 ]msf284.669 505.338 mo(p)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ATEDLP+Symbol*1 uf/ATEDLP+Symbol uf/LMEQMX+Symbol uf/ATEDLO+Helvetica*1 uf/ATEDLO+Helvetica uf/TCJRMX+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
