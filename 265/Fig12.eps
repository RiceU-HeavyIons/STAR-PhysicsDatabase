%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Fig12.pdf
%%Creator: Adobe Acrobat 9.3.0
%%For: pmjacobs
%%CreationDate: 6/24/17, 5:02 PM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 755 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-02-02T19:43:09Z"
   xmp:CreatorTool="Preview"
   xmp:ModifyDate="2017-02-02T19:43:09Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11.6 Quartz PDFContext"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Jet_ME_sub_norm_err.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
32 792 mo
580 792 li
580 0 li
32 0 li
cp
clp
32 -.00012207 mo
580.328 -.00012207 li
580.328 792 li
32 792 li
cp
false sop
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.268657 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
32 -.00012207 mo
580.328 -.00012207 li
580.328 792 li
32 792 li
cp
@
32 72.8059 mo
549.433 72.8059 li
549.433 387.94 li
32 387.94 li
cp
ef
32 72.8059 mo
549.433 72.8059 li
549.433 387.94 li
32 387.94 li
cp
@
161.224 72.8059 mo
538.955 72.8059 li
538.955 381.761 li
161.224 381.761 li
cp
ef
161.224 72.8059 mo
538.955 72.8059 li
538.955 381.761 li
161.224 381.761 li
cp
@
.80597 lw
161.224 72.8059 mo
538.955 72.8059 li
538.955 381.761 li
161.224 381.761 li
cp
.750179 .679652 .670191 .901488 cmyk
@
161.224 72.8059 mo
538.955 72.8059 li
538.955 381.761 li
161.224 381.761 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.268657 lw
161.224 72.8059 mo
538.955 72.8059 li
538.955 381.761 li
161.224 381.761 li
cp
@
.80597 lw
161.224 72.8059 mo
538.955 72.8059 li
538.955 381.761 li
161.224 381.761 li
cp
161.224 381.761 mo
538.955 381.761 li
223.552 374.776 mo
223.552 381.761 li
240.209 378.269 mo
240.209 381.761 li
256.866 378.269 mo
256.866 381.761 li
273.254 378.269 mo
273.254 381.761 li
289.91 378.269 mo
289.91 381.761 li
306.567 374.776 mo
306.567 381.761 li
323.224 378.269 mo
323.224 381.761 li
339.881 378.269 mo
339.881 381.761 li
356.269 378.269 mo
356.269 381.761 li
372.925 378.269 mo
372.925 381.761 li
389.582 374.776 mo
389.582 381.761 li
406.239 378.269 mo
406.239 381.761 li
422.896 378.269 mo
422.896 381.761 li
439.284 378.269 mo
439.284 381.761 li
455.94 378.269 mo
455.94 381.761 li
472.597 374.776 mo
472.597 381.761 li
223.552 374.776 mo
223.552 381.761 li
206.896 378.269 mo
206.896 381.761 li
190.507 378.269 mo
190.507 381.761 li
173.851 378.269 mo
173.851 381.761 li
472.597 374.776 mo
472.597 381.761 li
489.254 378.269 mo
489.254 381.761 li
505.911 378.269 mo
505.911 381.761 li
522.299 378.269 mo
522.299 381.761 li
538.955 378.269 mo
538.955 381.761 li
161.224 72.8059 mo
538.955 72.8059 li
223.552 79.791 mo
223.552 72.8059 li
240.209 76.2984 mo
240.209 72.8059 li
256.866 76.2984 mo
256.866 72.8059 li
273.254 76.2984 mo
273.254 72.8059 li
289.91 76.2984 mo
289.91 72.8059 li
306.567 79.791 mo
306.567 72.8059 li
323.224 76.2984 mo
323.224 72.8059 li
339.881 76.2984 mo
339.881 72.8059 li
356.269 76.2984 mo
356.269 72.8059 li
372.925 76.2984 mo
372.925 72.8059 li
389.582 79.791 mo
389.582 72.8059 li
406.239 76.2984 mo
406.239 72.8059 li
422.896 76.2984 mo
422.896 72.8059 li
439.284 76.2984 mo
439.284 72.8059 li
455.94 76.2984 mo
455.94 72.8059 li
472.597 79.791 mo
472.597 72.8059 li
223.552 79.791 mo
223.552 72.8059 li
206.896 76.2984 mo
206.896 72.8059 li
190.507 76.2984 mo
190.507 72.8059 li
173.851 76.2984 mo
173.851 72.8059 li
472.597 79.791 mo
472.597 72.8059 li
489.254 76.2984 mo
489.254 72.8059 li
505.911 76.2984 mo
505.911 72.8059 li
522.299 76.2984 mo
522.299 72.8059 li
538.955 76.2984 mo
538.955 72.8059 li
161.224 381.761 mo
161.224 72.8059 li
169.015 381.761 mo
161.224 381.761 li
169.015 372.627 mo
161.224 372.627 li
169.015 366.448 mo
161.224 366.448 li
169.015 361.612 mo
161.224 361.612 li
169.015 357.582 mo
161.224 357.582 li
169.015 354.09 mo
161.224 354.09 li
169.015 351.134 mo
161.224 351.134 li
169.015 348.448 mo
161.224 348.448 li
176.537 346.298 mo
161.224 346.298 li
.750179 .679652 .670191 .901488 cmyk
@
%ADOBeginSubsetFont: TZMBAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /TZMBAA+Helvetica
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000036c6670
676d000000000000042800000a1d676c796600000000000013c4000023f0
686561640000000000000e4800000036686865610000000000000e800000
0024686d74780000000000000ea4000000b06c6f63610000000000000f54
0000005a6d6178700000000000000fb0000000206e616d65000000000000
0fd000000024707265700000000000000ff4000003cf6764697200000000
000000000000000005c0001005bd00280580001a042f001f0000ffd90000
ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe
3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c
00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af0074
00c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c0062
0084ffa200240038008600bd0039005e008e00edffa9ffb3004000520055
00aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1
ff4cffaf0012002c004200500051008400be012503daff680018003b0098
009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c0053
0053007d01b401e103af0486ff9cffeafffe001f0028002a005200600093
00a300aa00af00af00c001000145016b0174019301950240028202b40485
0517fefd00060029004700470048006f008800b400b900c400f200f901ef
02180310037403c5ff35fff3000b004b004c005200550065007600760087
0087008e00ab00bb0106013001430150017d0194019501d3022a02550258
0277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7
ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125
013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e3
01ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df
03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008
002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd
00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d
014d014e014f01660169019e01ba01ba01be01e301ef01f6020002000209
02110217021c02530262026d028002d50280031b032a034a035a03af03af
03c803d603fb03fb04050413041504470449008c046d049a049a04a604a8
04b204cf0539053e054e055605800589058c036305d105d6067e068e06b2
06ef06f00728074c076f078c00b400c900c000c100000000000000000000
00000004012400af0032006e0063014401620096014301a10161008a0074
0064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d
0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d
00820030002a002a002a002a002a40292a292827262524232221201f1e1d
1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b
2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2c20b0032552582359212d
2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b0
02602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45
b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b
482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185
592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b0
09234223688a6a606120b0005258b21a401a4523614459b0005058b21940
1945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b
2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c456920b00943b0022660
b00325b005254961b0805358b21940194523616844b21a401a4523606a44
b209191a45652345604259b00943608a103a2d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c764520b003254523616818236860442d2c7645b0032545236168231845
6860442d2c7645b0032545616823452361442d2c4569b014b0324b505821
b0205961442db8002b2c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db8002c2c2020456944b001602db8002d2cb8002c2a212d
b8002e2c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db8002f2c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800302c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80031
2c2020456944b001602020457d691844b001602db800322cb800312a2db8
00332c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800342c4b535845441b2121592d
b800352c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db800362c2020456944b001602db800372cb800362a212db800382c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db800392c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db8003a2c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db8003b2c2020456944
b001602020457d691844b001602db8003c2cb8003b2a2db8003d2c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db8003e2c4b535845441b2121592db8003f2c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800402c20
20456944b001602db800412cb800402a212db800422c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800432c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800442c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800452c2020456944b00160202045
7d691844b001602db800462cb800452a2db800472c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800482c4b535845441b2121592db800492c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db8004a2c2020456944b001
602db8004b2cb8004a2a212db8004c2c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db8004d2c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db8004e2c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db8004f2c2020456944b001602020457d691844b001
602db800502cb8004f2a2db800512c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
522c4b535845441b2121592db800532c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db800542c2020456944b001602db800552c
b800542a212db800562c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800572c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800582c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800592c2020456944b001602020457d691844b001602db8005a2c
b800592a2db8005b2c4b20b003265358b0401bb000598a8a20b003265358
2321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db8005c2c4b535845441b2121592d00000000010000
00000000493edc1e5f0f3cf500110800000000005f4d8f0000000000d154
cd90f865fc270b9108f9000000090001000000000000000100000629fe29
00000c01f865fced0b9100010000000000000000000000000000002c0512
004202390000071d004202aa008e02aa004404ac005c023900aa02aa0055
023900af0239000004730040047300c40473004004730031047300340473
00420473004d047300420473004904ac001c04ac005c0556001e06390063
05c7009c05c700b404e3002105560034047300520400003b047300380473
00480473003d0473008401c7008401c7ffda06aa0084047300840473003b
0473007602aa008904000042023900170473008004000015000000360036
00fe0146018801bc01ee020c022c025002be02e40370041c046a04fe0594
064606dc0726074e07da088208d80962099009ee0ab80b3a0ba60c700d18
0d680d960dd00e4c0ea80f200f920fd810b81108116211f8000000010000
002c00920009006b0007000200100010005d000007e80a1d000400010000
0001001200010000000000060010000044415345444a2b48656c76657469
63610000b800532bb800492bb8003f2bb800352bb8002b2b4118008001a6
009001a600a001a600030069018b0079018b0089018b0099018b00040089
018b0099018b00a9018b00b9018bb2040840ba0179001a014a400b041f54
14191f180a0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009
410a01a0019f0064001f01a50025017a00480028019ab3296c1f60410a01
a9007001a9008001a90003008001a9000101a9b21e321fbe012c00250401
001f0126001e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11e
b80201400f1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401
b61fa91d6c1f931eb8019ab21f921db80101b21f911db80101b21f751db8
0201b61f6d29961f6431b8019ab21f4c96b802abb21f391db80156400b1f
3638211f351de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb2
1f201eb8012540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b
002a019bb2254a1fba019b0025017ab349293896b8017bb348283125b801
7a403648289629482725294c1f252946272729482756c80784075b074107
32072b072807260721071b071408120810080e080c080a08080807b801ac
b23f1f06bb01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f
001f01adb70804080208000814b8ffe0b40000010014b801abb410000001
00b801abb606100000010006b801adb300000100b801ad401f0400000100
0410000001001002000001000200000001000002010802004a00b0018db8
06008516763f183f123e113946443e113946443e113946443e113946443e
113946443e11394660443e11394660443e11394660442b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d
59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b
2b4b5279b376706a66456523456023456560234560b08b766818b0806220
20b16a704565234520b003266062636820b003266165b070236544b06a23
4420b176664565234520b003266062636820b003266165b066236544b076
2344b10066455458b166406544b27640764523614459b36242725d456523
456023456560234560b089766818b080622020b172424565234520b00326
6062636820b003266165b042236544b072234420b1625d4565234520b003
266062636820b003266165b05d236544b0622344b1005d455458b15d4065
44b262406245236144592b2b2b2b456953427374b8019a2045694b20b028
53b049515a58b020615944b801a620456944750000>
[9201 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 1184 10 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>TZMBAA+Helvetica AddT42Char 
1 1404 11 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>TZMBAA+Helvetica AddT42Char 
1 2260 15 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>TZMBAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/zero 10 def
/one 11 def
/five 15 def
end
TZMBAA+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 53 /five put
pop
end
%ADOEndSubsetFont
/LCKXDL+Helvetica /TZMBAA+Helvetica findfont ct_VMDictPut/LCKXDL+Helvetica*1 [48{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [19.5376 0 0 -19.5376 0 0 ]msf144.053 345.487 mo(5)sh%ADOBeginSubsetFont: NZPPMX+Symbol Initial
ct_T42Dict begin
-0.164 -0.297 1.094 0.824
 256 array 0 1 255 {1 index exch /.notdef put} for  /NZPPMX+Symbol
Type42DictBegin
[<00010000000c000c000c000c4f532f32e67a4476000000cc000000606376
74205d0c08450000012c0000023c6670676dc62bd4b60000036800000200
676c79667741ada2000014880000012068656164dae03ef0000005680000
0036686865610cca0296000005a000000024686d74788f905207000005c4
0000031c6c6f6361241424a4000008e0000001906d61787008d609b00000
0a70000000206e616d652a2d5e5b00000a900000010370726570f12012c7
00000b94000008f367646972000000000000000000000000000304940190
0005000402bc028a0000008c02bc028a000001dd003200fa000000000000
000000000000800000eb380160ea14400000000000007079727300400000
f8ff059cfd9c0000069e0264000000010000000000000000000000200000
ee00cd003b00870089023f005600c1005e00ec01b20093018b002d018900
ee003b00ae00b200c700b20037002d006000a603c100fc00d300b800d300
5c02cb00c100660031001902c1004e005400b2009c0002021d027500c100
9601c1000e023f02ac019e009c027f01a0005a001f002704c100f4005800
b4036d003300a8025e006a04850200077300a2027500100173005e004202
4e0202099800f604370046055c00bc00b000a6006d03e7025e074400f801
75006800dd00e1003500370262008d0062028900be00d301b601d701e301
5202cf00c301fc01cd01480548054805660500001700ee00c105b6001b02
7100b60000001b003f000403480548054805480500001f0029004e002900
4e0066009301cb059e018b005001ee00ee0031009a0091004e009a004805
b000310098032d006d033300e9004a004a00290098039803330083054a00
c3008f005200d3055a009c0175007d06600098039803b603b20133009803
8305c70198039803980300001200e5011d063900210427025e068700e900
b0053d02d70277008300f6028305b401df008d05a602750012019c058302
62015e0042024e024e0052058b008d051400f60421008d055c002d001f00
f4055200ba012d021000a603aa0175006800dd00e100c905e7020c024606
6400ec05ee01f8012f062506b201f80500028300c10135063d00fc013306
be0139060e06680083006200be00857bff7f82003000002a0029003f004e
005a0077008b00870031007500bc00dd0000001dfe39000003df00020548
001e4007060504030201002c2010b002254964b040515820c859212d2cb0
02254964b040515820c859212d2c20100720b00050b00d7920b8ffff5058
041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff505804
1b0559b0051cb0032508e12d2c4b505820b80107454459212d2cb0022545
60442d2c4b5358b00225b0022545445921212d2c45442db800072c4bb800
065058b101018e59b801ff85b800441db9000600035f5e2db800082c2020
456944b001602db800092cb800082a212db8000a2c2046b0032546525823
59208a208a49648a204620686164b004254620686164525823658a592f20
b00053586920b000545821b040591b6920b000545821b0406559593a2db8
000b2c2046b00425465258238a592046206a6164b0042546206a61645258
238a592ffd2db8000c2c4b20b0032650585158b080441bb04044591b2121
2045b0c05058b0c0441b2159592db8000d2c2020456944b001602020457d
691844b001602db8000e2cb8000d2a2db8000f2c4b20b003265358b0401b
b000598a8a20b0032653582321b0808a8a1b8a235920b0032653582321b8
00c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800102c4b535845441b
2121592d00010000000100002b7973815f0f3cf50111080000000000a1cd
888000000000d1846d3bfeaafd9c08c0069e000000060001000000000000
00010000059cfd9c00000856feaafbdc0881000100000000000000000000
0000000000c704cd00660000000000fa00000200000002aa00dd0400fffa
06aa00810639006002aa005e02aa00600464005a02000058020000890239
fff20400003b040000a00400003d0400003b040000330400002b04000054
04000039040000520400004c023900a00239007904640060046400580464
0060038d007d02aa005402aa00540400ffee03d7009e019a00a003d7009e
0333007903ae00ae0464005c05b4006d0464005a0464005804640058049c
009603f4007f05b4004a0696003d046400230231ff480625006605b400d5
0464ffe30400ffec0464001f04e5002b080000d90464005803f400060156
feaa06520071046400580464006d0464005804d3011d07e5007307e50073
04d3011d085600ac05b400370625009806250098057d0252057d008f05c7
fff60556003104d3003504e3002904e3002905c7002b05ee005802aa0039
05c7003f057d001d071d003f05c700270529007105c700560625002f0473
002f04bc001204e300210585001b061b004605c70019065c0002050c0046
04640089034a000203f4004803f4002704d30012042b005e02a2009c0464
000e04640023042b000003f20021046400420464007d04d3004803830054
0383ffcf049cfff8042b003304640014057dfff8057d00460200008901fa
0083034a00930606007306060021060600cd0606008105b400c90400049c
0383001406250025062500250464005805b4003705b4003705b4003705b4
003705b4003704d300b207e5004407e5004404d300b20856007d0544004a
05b4003704d300a604d300a40625008d06e7014c06960050057d02520696
0127031200be031200be031200810312008105b400480464004a04000091
02a2003502a20035050c001205b4fff604d3003d0383006d05b400310312
008d0312008d031200250312002507e5013f03f401b603f4005a03f401b6
03f401b603f4006603f401b603f4006604f6ffec04d3022d0800ff7f0312
008d031200be031201fc031201cd0652006206520062071f013506520048
06520048064a00c1057d005e065c003d0464001f0544007d05f4ffb20200
fff202000000020000000200000002000000020000000000002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022003a003a003a
003a003a003a003a003a003a003a003a003a003a003a003a003a003a003a
003a003a003a003a003a003a003a003a003a003a003a003a003a003a003a
003a003a003a003a003a003a003a00900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
00900001000000c7007a0004000000000002001000400011000007e808f3
000100010000000800660001000000000003000d00000001000000000004
000d000d0001000000000006000d001a0003000004090001001a00270003
000004090002000e00410003000004090003001a004f0003000004090004
001a00690003000004090006001a0083464b414447472b53796d626f6c46
4b414447472b53796d626f6c464b414447472b53796d626f6c0046004b00
41004400470047002b00530079006d0062006f006c005200650067007500
6c006100720046004b0041004400470047002b00530079006d0062006f00
6c0046004b0041004400470047002b00530079006d0062006f006c004600
4b0041004400470047002b00530079006d0062006f006c00b800072b01ba
0007010f00092b01bf0111005400490039002900190000000f2bbf011200
e600d000a2005e00450000000f2bbf011300610049003900290019000000
0f2bbf0114003c002e0024001a00100000000f2bbf01150033002e002400
1a00100000000f2b00bf010b011300d000a2007d00450000000f2bbf010c
00b300930072005e002a0000000f2bbf010d0091006f0056003e002a0000
000f2bbf010e007e006f0056003e002a0000000f2bbf010f005f00490039
002900190000000f2bbf0110005200490039002900190000000f2b00ba01
160004000e2bb8010a20457d69184441ff0280010500fe0003010400fe00
030103007d0003010200fe0003010100fe0003010000fe000300ff00fe00
0300fe00fe000300fd00fe000300fc00fe000300fb00fe000300fa00fe00
0300f800fe000300f700fe000300f600fe000300f500fe000300f400fe00
0300f300fe000300f200fe000300f100fe000300f000fe000300ef00fe00
0300ee00fe000300ed00fe000300ec00fe000300eb0000000300ea00fe00
0300e900e80064000500e900fe000300e80064000300e700fe000300e600
fe000300e500fe000300e400fe000300e300fe000300e200fe000300e100
fe000300df00fe000300de00fe000300dc00fe000300db00fe000300da00
fe000300d900fe000300d800fe000300d700fe000300d60084001d000500
d60023000300d200fe000300d20023000400d100fe000300d000fe000300
d00023000400cf00fe000300ce00fe000300cc00fe000300cb00c8000300
ca00fe000300c900fe000300c800fe000300c700fe000300c60064000300
c500fe000300c400fe000300c300fe000300c100fe000300bf00fe000300
be00fe000300bd00fe000300bc00fe000300bb00fe000300ba00b9004f00
0500ba00fe000300baffd0000400b9004f000300b800b7000e000500b800
16000300b80080000400b700b60006000500b7000e000300b70040000400
b60006000300b50032000300b40082000341ff00b300a00033000500b300
5c000300b30040000400b200fe000300b10064000300b000af00ba000500
b000fe000300af00ae0076000500af00ba000300af0080000400ae00a000
33000500ae0076000300ae0040000400ab004b000300aa00fe000300a900
fe000300a800fe000300a70064000300a6003a000300a50064000300a400
fe000300a3005c000300a20064000300a100a00033000500a1003f000300
a10040000400a000330003009f003a0003009e00410003009d00d2000300
9c00fe0003009b004b0003009a00fe0003009900fe00030098007d000300
9700380003009600fe0003009500fe00030094003a00030093007d000300
92007d0003009100640003009000fe0003008f00fa0003008e003a000300
8d007d0003008c007d0003008b00c80003008a00fe0003008900fe000300
88002800030088fff00004008700fe0003008600fe000300850084001d00
050085003e00030084001d00030083008200330005008300fe00030083ff
d000040082003300030081008000dc0005008100fe0003008100c0000400
80007f008c0005008000dc0003008000800004007f007e003c0005007f00
8c0003007f00400004007e003c0003007d00fe0003007c00fe0003007b00
7a003c0005007b00fe0003007bffd00004007a003c0003007900fe000300
7800fe0003007700fe0003007600640003007541ff00fe00030073007200
450005007300fe00030073ffd000040072004500030071007000ba000500
7100fe00030070006f00760005007000ba0003007000800004006f006e00
260005006f00760003006f00400004006e00260003006b00fe0003006800
fe0003006700fe0003006500fe0003006300fe0003005f00fe0003005e00
fe0003005d00fe0003005c00fe0003005b005a00640005005b00fe000300
5a00640003005900fe0003005800fe0003005700fe0003005600fe000300
5500fe0003005400fe00030053007d0003005200fe0003005000fe000300
4f00fe0003004e00fe0003004d00fe0003004c00fe0003004b00fe000300
48ffe00004004700640003004600fe0003004400230004004300fe000300
4200fe0003004100fe0003004000260003003f00fe0003003e00fe000300
3d00fe0003003c00fe0003003b00fe0003003a00fe000300390043000300
3800fe0003003700fe0003003400fe0003003300fe0003003200fe000300
3100340003003000fe0003002f00fe0003002e00fe0003002d00fe000300
2c00480003002b00fe0003002a00fe0003002900fe000300280027003a00
05002800fe00030027003a0003002600fe0003002500fe00030024000f00
030023001b0003002200960003002100fe0003002000550003001f003a00
03001e00fe0003001d003a0003001c003a0003001b417600640003001a00
640003001900480003001800fe0003001700fe0003001600fe0003001500
fe00030015001000040014001100250005001400fe000300130012004b00
0500130096000300120011002500050012004b0003001100250003001000
fe0003001000100004000f00fa0003000e00fe0003000d00fe0003000c00
fe0003000b00fe0003000a00fe0003000900fe0003000800fe0003000700
350003000600ce0003000500fe0003000400fe0003000300fe0003000200
1d00030002001000040001006400030060001b0060001d0080000d009000
0d00a0000d00b0000d00c0000d00070001014c858d01732b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b1d0000>
[289 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 68 60 <00010058019e040c0229000300134008028c008b0400010410d4c4310010
fcec3001213521040cfc4c03b4019e8b0000>NZPPMX+Symbol AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>NZPPMX+Symbol AddT42Char 
NZPPMX+Symbol /CharStrings get begin
/g60 60 def
end
NZPPMX+Symbol /Encoding get
dup 32 /g60 put
pop
end
%ADOEndSubsetFont
/LCKXDM+Symbol /NZPPMX+Symbol findfont ct_VMDictPut/LCKXDM+Symbol*1 [32{/.notdef}rp /g60 223{/.notdef}rp]LCKXDM+Symbol nfLCKXDM+Symbol*1 [19.5376 0 0 -19.5376 0 0 ]msf133.018 345.487 mo( )shLCKXDL+Helvetica*1 [29.7312 0 0 -29.7312 0 0 ]msf100.759 359.07 mo(10)[16.5305 0 ]xsh169.015 330.985 mo
161.224 330.985 li
169.015 322.119 mo
161.224 322.119 li
169.015 315.672 mo
161.224 315.672 li
169.015 310.836 mo
161.224 310.836 li
169.015 306.806 mo
161.224 306.806 li
169.015 303.313 mo
161.224 303.313 li
169.015 300.627 mo
161.224 300.627 li
169.015 297.94 mo
161.224 297.94 li
176.537 295.522 mo
161.224 295.522 li
@
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if
1 2104 14 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/four 14 def
end
TZMBAA+Helvetica /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [48{/.notdef}rp /zero /one 2{/.notdef}rp /four /five 202{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [19.5376 0 0 -19.5376 0 0 ]msf144.053 296.253 mo(4)shLCKXDM+Symbol*1 [19.5376 0 0 -19.5376 0 0 ]msf133.018 296.253 mo( )shLCKXDL+Helvetica*1 [29.7312 0 0 -29.7312 0 0 ]msf100.759 308.985 mo(10)[16.5305 0 ]xsh169.015 280.209 mo
161.224 280.209 li
169.015 271.343 mo
161.224 271.343 li
169.015 265.164 mo
161.224 265.164 li
169.015 260.06 mo
161.224 260.06 li
169.015 256.298 mo
161.224 256.298 li
169.015 252.806 mo
161.224 252.806 li
169.015 249.851 mo
161.224 249.851 li
169.015 247.164 mo
161.224 247.164 li
176.537 245.015 mo
161.224 245.015 li
@
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if
1 1760 13 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/three 13 def
end
TZMBAA+Helvetica /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [48{/.notdef}rp /zero /one /.notdef /three /four /five 202{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [19.5376 0 0 -19.5376 0 0 ]msf144.053 244.469 mo(3)shLCKXDM+Symbol*1 [19.5376 0 0 -19.5376 0 0 ]msf133.018 244.469 mo( )shLCKXDL+Helvetica*1 [29.7312 0 0 -29.7312 0 0 ]msf100.759 258.053 mo(10)[16.5305 0 ]xsh169.015 229.701 mo
161.224 229.701 li
169.015 220.836 mo
161.224 220.836 li
169.015 214.388 mo
161.224 214.388 li
169.015 209.552 mo
161.224 209.552 li
169.015 205.522 mo
161.224 205.522 li
169.015 202.03 mo
161.224 202.03 li
169.015 199.075 mo
161.224 199.075 li
169.015 196.657 mo
161.224 196.657 li
176.537 194.239 mo
161.224 194.239 li
@
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if
1 1480 12 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/two 12 def
end
TZMBAA+Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [19.5376 0 0 -19.5376 0 0 ]msf144.053 194.386 mo(2)shLCKXDM+Symbol*1 [19.5376 0 0 -19.5376 0 0 ]msf133.018 194.386 mo( )shLCKXDL+Helvetica*1 [29.7312 0 0 -29.7312 0 0 ]msf100.759 207.118 mo(10)[16.5305 0 ]xsh169.015 178.925 mo
161.224 178.925 li
169.015 170.06 mo
161.224 170.06 li
169.015 163.881 mo
161.224 163.881 li
169.015 158.776 mo
161.224 158.776 li
169.015 154.746 mo
161.224 154.746 li
169.015 151.522 mo
161.224 151.522 li
169.015 148.567 mo
161.224 148.567 li
169.015 145.88 mo
161.224 145.88 li
176.537 143.731 mo
161.224 143.731 li
@
LCKXDL+Helvetica*1 [19.5376 0 0 -19.5376 0 0 ]msf147.448 144.301 mo(1)shLCKXDM+Symbol*1 [19.5376 0 0 -19.5376 0 0 ]msf136.413 144.301 mo( )shLCKXDL+Helvetica*1 [29.7312 0 0 -29.7312 0 0 ]msf104.155 157.035 mo(10)[16.5305 0 ]xsh169.015 128.418 mo
161.224 128.418 li
169.015 119.552 mo
161.224 119.552 li
169.015 113.104 mo
161.224 113.104 li
169.015 108.269 mo
161.224 108.269 li
169.015 104.239 mo
161.224 104.239 li
169.015 100.746 mo
161.224 100.746 li
169.015 97.791 mo
161.224 97.791 li
169.015 95.373 mo
161.224 95.373 li
176.537 92.9551 mo
161.224 92.9551 li
@
LCKXDL+Helvetica*1 [29.7312 0 0 -29.7312 0 0 ]msf138.49 105.526 mo(1)sh169.015 77.6417 mo
161.224 77.6417 li
538.955 381.761 mo
538.955 72.8059 li
531.433 381.761 mo
538.955 381.761 li
531.433 372.627 mo
538.955 372.627 li
531.433 366.448 mo
538.955 366.448 li
531.433 361.612 mo
538.955 361.612 li
531.433 357.582 mo
538.955 357.582 li
531.433 354.09 mo
538.955 354.09 li
531.433 351.134 mo
538.955 351.134 li
531.433 348.448 mo
538.955 348.448 li
523.911 346.298 mo
538.955 346.298 li
531.433 330.985 mo
538.955 330.985 li
531.433 322.119 mo
538.955 322.119 li
531.433 315.672 mo
538.955 315.672 li
531.433 310.836 mo
538.955 310.836 li
531.433 306.806 mo
538.955 306.806 li
531.433 303.313 mo
538.955 303.313 li
531.433 300.627 mo
538.955 300.627 li
531.433 297.94 mo
538.955 297.94 li
523.911 295.522 mo
538.955 295.522 li
531.433 280.209 mo
538.955 280.209 li
531.433 271.343 mo
538.955 271.343 li
531.433 265.164 mo
538.955 265.164 li
531.433 260.06 mo
538.955 260.06 li
531.433 256.298 mo
538.955 256.298 li
531.433 252.806 mo
538.955 252.806 li
531.433 249.851 mo
538.955 249.851 li
531.433 247.164 mo
538.955 247.164 li
523.911 245.015 mo
538.955 245.015 li
531.433 229.701 mo
538.955 229.701 li
531.433 220.836 mo
538.955 220.836 li
531.433 214.388 mo
538.955 214.388 li
531.433 209.552 mo
538.955 209.552 li
531.433 205.522 mo
538.955 205.522 li
531.433 202.03 mo
538.955 202.03 li
531.433 199.075 mo
538.955 199.075 li
531.433 196.657 mo
538.955 196.657 li
523.911 194.239 mo
538.955 194.239 li
531.433 178.925 mo
538.955 178.925 li
531.433 170.06 mo
538.955 170.06 li
531.433 163.881 mo
538.955 163.881 li
531.433 158.776 mo
538.955 158.776 li
531.433 154.746 mo
538.955 154.746 li
531.433 151.522 mo
538.955 151.522 li
531.433 148.567 mo
538.955 148.567 li
531.433 145.88 mo
538.955 145.88 li
523.911 143.731 mo
538.955 143.731 li
531.433 128.418 mo
538.955 128.418 li
531.433 119.552 mo
538.955 119.552 li
531.433 113.104 mo
538.955 113.104 li
531.433 108.269 mo
538.955 108.269 li
531.433 104.239 mo
538.955 104.239 li
531.433 100.746 mo
538.955 100.746 li
531.433 97.791 mo
538.955 97.791 li
531.433 95.373 mo
538.955 95.373 li
523.911 92.9551 mo
538.955 92.9551 li
531.433 77.6417 mo
538.955 77.6417 li
@
182.985 311.373 mo
187.821 381.761 li
200.985 381.761 li
205.015 204.716 li
209.045 151.254 li
213.343 126.806 li
217.373 114.985 li
221.403 112.03 li
225.702 112.03 li
229.731 114.985 li
234.03 117.94 li
238.06 124.119 li
242.358 130.03 li
246.388 134.06 li
250.687 140.776 li
254.716 147.761 li
254.716 145.881 li
250.687 138.627 li
246.388 131.91 li
242.358 127.881 li
238.06 121.701 li
234.03 115.791 li
229.731 112.299 li
225.702 109.075 li
221.403 108.806 li
217.373 111.224 li
213.343 121.701 li
209.045 142.388 li
205.015 177.313 li
200.716 236.687 li
196.687 234.806 li
192.657 381.761 li
192.119 381.761 li
188.358 317.821 li
182.985 306.269 li
182.985 311.373 li
.696254 .631098 .620691 .585717 cmyk
currentcolor
/705972792.0 
<<
/ID /705972792.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 96 4 ] 
/XStep 96 
/YStep 4 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
96 0 li
96 4 li
0 4 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[1 3 ] 0 dsh
true sadj
{2 4 mo
98 4 li
0 3 mo
96 3 li
2 2 mo
98 2 li
0 1 mo
96 1 li
}exec
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/705972792.0 /Pattern get_res
[.80597 0 0 -.80597 32 792 ]make_pattern set_pattern
ef
2 vmreclaim
.80597 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
182.985 306.269 mo
188.358 317.821 li
192.119 381.761 li
192.657 381.761 mo
196.687 234.806 li
196.687 234.806 mo
200.716 236.687 li
205.015 177.313 li
209.045 142.388 li
213.343 121.701 li
217.373 111.224 li
221.403 108.806 li
225.702 109.075 li
229.731 112.298 li
234.03 115.791 li
238.06 121.701 li
242.358 127.88 li
246.388 131.91 li
250.687 138.627 li
254.716 145.88 li
182.985 311.373 mo
187.821 381.761 li
200.985 381.761 mo
205.015 204.716 li
205.015 204.716 mo
209.045 151.254 li
213.343 126.806 li
217.373 114.985 li
221.403 112.03 li
225.702 112.03 li
229.731 114.985 li
234.03 117.94 li
238.06 124.119 li
242.358 130.03 li
246.388 134.06 li
250.687 140.776 li
254.716 147.761 li
false sop
.196414 .15378 .15378 3.0518e-05 cmyk
@
180.836 308.149 mo
179.493 308.149 li
184.866 308.149 mo
186.209 308.149 li
182.985 306.537 mo
182.985 282.627 li
182.985 309.761 mo
182.985 381.761 li
190.239 381.761 mo
190.507 381.761 li
188.358 379.881 mo
188.358 265.164 li
196.687 244.746 mo
196.687 223.791 li
196.687 247.97 mo
196.687 381.761 li
198.836 381.761 mo
198.567 381.761 li
200.716 379.881 mo
200.716 226.478 li
205.015 182.955 mo
205.015 178.388 li
205.015 186.448 mo
205.015 193.433 li
209.045 147.224 mo
209.045 147.492 li
227.582 110.149 mo
227.851 110.149 li
236.179 122.776 mo
235.91 122.776 li
244.507 132.716 mo
244.239 132.716 li
264.925 156.627 mo
265.194 156.627 li
271.373 178.657 mo
271.373 178.925 li
273.522 177.851 mo
273.254 177.851 li
279.702 186.179 mo
279.702 185.642 li
279.702 189.403 mo
279.702 190.209 li
281.851 191.552 mo
281.582 191.552 li
283.731 189.94 mo
283.731 189.672 li
283.731 193.164 mo
283.731 193.97 li
288.03 198.537 mo
288.03 198 li
288.03 202.03 mo
288.03 203.104 li
292.06 198.806 mo
292.06 198.537 li
292.06 202.298 mo
292.06 203.104 li
294.478 218.149 mo
294.209 218.149 li
298.776 218.149 mo
299.045 218.149 li
296.627 216.537 mo
296.627 215.194 li
296.627 219.761 mo
296.627 221.91 li
299.582 221.104 mo
299.045 221.104 li
303.612 221.104 mo
304.149 221.104 li
301.731 219.492 mo
301.731 218.149 li
301.731 222.716 mo
301.731 224.597 li
304.418 225.403 mo
304.149 225.403 li
308.716 225.403 mo
308.985 225.403 li
306.567 223.522 mo
306.567 222.448 li
306.567 227.015 mo
306.567 228.627 li
309.522 228.895 mo
308.985 228.895 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
313.552 228.895 mo
314.09 228.895 li
311.672 227.284 mo
311.672 225.94 li
311.672 230.507 mo
311.672 232.388 li
314.627 236.687 mo
314.09 236.687 li
318.657 236.687 mo
318.925 236.687 li
316.508 235.075 mo
316.508 233.194 li
316.508 238.298 mo
316.508 240.716 li
320 241.254 mo
318.925 241.254 li
324.03 241.254 mo
324.836 241.254 li
321.881 239.642 mo
321.881 238.03 li
321.881 242.866 mo
321.881 245.015 li
325.642 243.672 mo
324.836 243.672 li
329.672 243.672 mo
330.746 243.672 li
327.791 242.06 mo
327.791 240.448 li
327.791 245.552 mo
327.791 247.701 li
331.821 249.851 mo
330.746 249.851 li
336.119 249.851 mo
337.194 249.851 li
333.97 247.97 mo
333.97 246.358 li
333.97 251.463 mo
333.97 254.149 li
338.537 250.388 mo
337.194 250.388 li
342.567 250.388 mo
343.91 250.388 li
340.687 248.776 mo
340.687 246.895 li
340.687 252 mo
340.687 254.687 li
345.522 262.478 mo
343.91 262.478 li
349.821 262.478 mo
351.433 262.478 li
347.672 260.597 mo
347.672 258.179 li
347.672 264.089 mo
347.672 267.851 li
356 279.403 mo
351.433 279.403 li
360.03 279.403 mo
364.597 279.403 li
358.149 277.791 mo
358.149 274.567 li
358.149 281.015 mo
358.149 285.313 li
370.239 283.164 mo
364.597 283.164 li
374.269 283.164 mo
379.642 283.164 li
372.119 281.284 mo
372.119 278.328 li
372.119 284.776 mo
372.119 289.075 li
387.433 290.686 mo
379.642 290.686 li
391.731 290.686 mo
399.522 290.686 li
389.582 289.075 mo
389.582 285.851 li
389.582 292.298 mo
389.582 297.134 li
425.313 317.821 mo
399.522 317.821 li
429.343 317.821 mo
455.134 317.821 li
427.463 316.209 mo
427.463 312.448 li
427.463 319.701 mo
427.463 325.075 li
495.164 352.746 mo
455.134 352.746 li
499.194 352.746 mo
538.955 352.746 li
497.045 351.134 mo
497.045 343.881 li
497.045 354.627 mo
497.045 368.06 li
@
178.821 306.761 mo
187.149 306.761 li
180.411 311.657 li
182.985 303.736 li
185.559 311.657 li
.750179 .679652 .670191 .901488 cmyk
f
192.522 244.97 mo
200.851 244.97 li
194.113 249.866 li
196.687 241.945 li
199.26 249.866 li
f
492.881 351.358 mo
501.209 351.358 li
494.471 356.254 li
497.045 348.333 li
499.618 356.254 li
f
423.298 316.432 mo
431.627 316.432 li
424.889 321.328 li
427.463 313.407 li
430.036 321.328 li
f
385.418 289.298 mo
393.746 289.298 li
387.008 294.194 li
389.582 286.273 li
392.156 294.194 li
f
367.955 281.776 mo
376.284 281.776 li
369.546 286.672 li
372.119 278.751 li
374.693 286.672 li
f
353.985 278.015 mo
362.313 278.015 li
355.576 282.911 li
358.149 274.99 li
360.723 282.911 li
f
343.508 261.089 mo
351.836 261.089 li
345.098 265.985 li
347.672 258.064 li
350.245 265.985 li
f
336.522 249 mo
344.851 249 li
338.113 253.896 li
340.687 245.975 li
343.26 253.896 li
f
329.806 248.462 mo
338.134 248.462 li
331.396 253.358 li
333.97 245.437 li
336.544 253.358 li
f
323.627 242.283 mo
331.955 242.283 li
325.217 247.179 li
327.791 239.258 li
330.365 247.179 li
f
317.716 239.865 mo
326.045 239.865 li
319.307 244.761 li
321.881 236.84 li
324.454 244.761 li
f
312.343 235.298 mo
320.672 235.298 li
313.934 240.194 li
316.508 232.273 li
319.081 240.194 li
f
307.508 227.507 mo
315.836 227.507 li
309.098 232.403 li
311.672 224.482 li
314.245 232.403 li
f
302.403 224.015 mo
310.731 224.015 li
303.993 228.911 li
306.567 220.99 li
309.141 228.911 li
f
297.567 219.716 mo
305.896 219.716 li
299.158 224.612 li
301.731 216.691 li
304.305 224.612 li
f
292.463 216.761 mo
300.791 216.761 li
294.053 221.657 li
296.627 213.736 li
299.201 221.657 li
f
287.896 199.298 mo
296.224 199.298 li
289.486 204.194 li
292.06 196.273 li
294.633 204.194 li
f
283.866 199.029 mo
292.194 199.029 li
285.456 203.925 li
288.03 196.004 li
290.604 203.925 li
f
279.567 190.164 mo
287.896 190.164 li
281.158 195.06 li
283.731 187.139 li
286.305 195.06 li
f
275.537 186.403 mo
283.866 186.403 li
277.128 191.299 li
279.702 183.378 li
282.275 191.299 li
f
271.239 176.462 mo
279.567 176.462 li
272.829 181.358 li
275.403 173.437 li
277.977 181.358 li
f
267.209 175.656 mo
275.537 175.656 li
268.799 180.552 li
271.373 172.631 li
273.947 180.552 li
f
262.91 167.328 mo
271.239 167.328 li
264.501 172.224 li
267.075 164.303 li
269.648 172.224 li
f
258.881 155.238 mo
267.209 155.238 li
260.471 160.134 li
263.045 152.213 li
265.618 160.134 li
f
254.582 149.865 mo
262.91 149.865 li
256.172 154.761 li
258.746 146.84 li
261.32 154.761 li
f
250.552 145.298 mo
258.881 145.298 li
252.143 150.194 li
254.716 142.273 li
257.29 150.194 li
f
246.522 138.044 mo
254.851 138.044 li
248.113 142.94 li
250.687 135.019 li
253.26 142.94 li
f
242.224 131.328 mo
250.552 131.328 li
243.814 136.224 li
246.388 128.303 li
248.962 136.224 li
f
238.194 127.298 mo
246.522 127.298 li
239.785 132.194 li
242.358 124.273 li
244.932 132.194 li
f
233.895 121.388 mo
242.224 121.388 li
235.486 126.284 li
238.06 118.363 li
240.633 126.284 li
f
229.866 115.209 mo
238.194 115.209 li
231.456 120.105 li
234.03 112.183 li
236.604 120.105 li
f
225.567 111.985 mo
233.895 111.985 li
227.158 116.881 li
229.731 108.96 li
232.305 116.881 li
f
221.537 108.761 mo
229.866 108.761 li
223.128 113.657 li
225.702 105.736 li
228.275 113.657 li
f
217.239 108.761 mo
225.567 108.761 li
218.829 113.657 li
221.403 105.736 li
223.977 113.657 li
f
213.209 111.179 mo
221.537 111.179 li
214.799 116.075 li
217.373 108.154 li
219.947 116.075 li
f
209.179 122.194 mo
217.508 122.194 li
210.77 127.09 li
213.343 119.169 li
215.917 127.09 li
f
204.881 143.955 mo
213.209 143.955 li
206.471 148.851 li
209.045 140.93 li
211.618 148.851 li
f
200.851 183.179 mo
209.179 183.179 li
202.441 188.075 li
205.015 180.154 li
207.589 188.075 li
f
181.373 308.149 mo
179.493 308.149 li
184.328 308.149 mo
186.209 308.149 li
182.985 306.806 mo
182.985 282.627 li
182.985 309.492 mo
182.985 381.761 li
186.746 381.761 mo
186.209 381.761 li
189.97 381.761 mo
190.507 381.761 li
188.358 380.418 mo
188.358 265.164 li
191.045 381.761 mo
190.507 381.761 li
194 381.761 mo
194.537 381.761 li
195.075 246.358 mo
194.537 246.358 li
198.03 246.358 mo
198.567 246.358 li
196.687 245.015 mo
196.687 223.791 li
196.687 247.701 mo
196.687 381.761 li
199.104 381.761 mo
198.567 381.761 li
202.328 381.761 mo
202.866 381.761 li
200.716 380.418 mo
200.716 226.478 li
203.403 184.567 mo
202.866 184.567 li
206.358 184.567 mo
206.896 184.567 li
205.015 183.224 mo
205.015 178.388 li
205.015 185.91 mo
205.015 193.433 li
207.433 145.343 mo
206.896 145.343 li
210.657 145.343 mo
211.194 145.343 li
209.045 144.269 mo
209.045 143.731 li
209.045 146.686 mo
209.045 147.492 li
211.731 123.582 mo
211.194 123.582 li
214.687 123.582 mo
215.224 123.582 li
215.761 112.567 mo
215.224 112.567 li
218.985 112.567 mo
219.522 112.567 li
220.06 110.149 mo
219.522 110.149 li
223.015 110.149 mo
223.552 110.149 li
224.09 110.149 mo
223.552 110.149 li
227.313 110.149 mo
227.851 110.149 li
228.388 113.373 mo
227.851 113.373 li
231.343 113.373 mo
231.881 113.373 li
232.418 116.597 mo
231.881 116.597 li
235.373 116.597 mo
235.91 116.597 li
236.716 122.776 mo
235.91 122.776 li
239.672 122.776 mo
240.209 122.776 li
240.746 128.686 mo
240.209 128.686 li
243.702 128.686 mo
244.239 128.686 li
244.776 132.716 mo
244.239 132.716 li
248 132.716 mo
248.537 132.716 li
249.075 139.433 mo
248.537 139.433 li
252.03 139.433 mo
252.567 139.433 li
253.105 146.686 mo
252.567 146.686 li
256.328 146.686 mo
256.866 146.686 li
257.403 151.254 mo
256.866 151.254 li
260.358 151.254 mo
260.896 151.254 li
261.433 156.627 mo
260.896 156.627 li
264.657 156.627 mo
265.194 156.627 li
265.731 168.716 mo
265.194 168.716 li
268.687 168.716 mo
269.224 168.716 li
267.075 167.373 mo
267.075 167.104 li
267.075 170.06 mo
267.075 170.328 li
269.761 177.045 mo
269.224 177.045 li
272.716 177.045 mo
273.254 177.045 li
271.373 175.701 mo
271.373 175.164 li
271.373 178.119 mo
271.373 178.925 li
274.06 177.851 mo
273.254 177.851 li
277.015 177.851 mo
277.552 177.851 li
275.403 176.776 mo
275.403 176.239 li
275.403 179.194 mo
275.403 179.731 li
278.09 187.791 mo
277.552 187.791 li
281.045 187.791 mo
281.582 187.791 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
279.702 186.448 mo
279.702 185.642 li
279.702 189.134 mo
279.702 190.209 li
282.119 191.552 mo
281.582 191.552 li
285.343 191.552 mo
285.881 191.552 li
283.731 190.209 mo
283.731 189.672 li
283.731 192.895 mo
283.731 193.97 li
286.418 200.418 mo
285.881 200.418 li
289.373 200.418 mo
289.91 200.418 li
288.03 199.075 mo
288.03 198 li
288.03 201.492 mo
288.03 203.104 li
290.448 200.687 mo
289.91 200.687 li
293.672 200.687 mo
294.209 200.687 li
292.06 199.343 mo
292.06 198.537 li
292.06 201.761 mo
292.06 203.104 li
295.015 218.149 mo
294.209 218.149 li
298.239 218.149 mo
299.045 218.149 li
296.627 216.806 mo
296.627 215.194 li
296.627 219.492 mo
296.627 221.91 li
300.119 221.104 mo
299.045 221.104 li
303.075 221.104 mo
304.149 221.104 li
301.731 219.761 mo
301.731 218.149 li
301.731 222.448 mo
301.731 224.597 li
304.955 225.403 mo
304.149 225.403 li
308.179 225.403 mo
308.985 225.403 li
306.567 224.06 mo
306.567 222.448 li
306.567 226.478 mo
306.567 228.627 li
310.06 228.895 mo
308.985 228.895 li
313.015 228.895 mo
314.09 228.895 li
311.672 227.552 mo
311.672 225.94 li
311.672 230.239 mo
311.672 232.388 li
314.896 236.687 mo
314.09 236.687 li
318.119 236.687 mo
318.925 236.687 li
316.508 235.343 mo
316.508 233.194 li
316.508 238.03 mo
316.508 240.716 li
320.537 241.254 mo
318.925 241.254 li
323.493 241.254 mo
324.836 241.254 li
321.881 239.91 mo
321.881 238.03 li
321.881 242.597 mo
321.881 245.015 li
326.179 243.672 mo
324.836 243.672 li
329.403 243.672 mo
330.746 243.672 li
327.791 242.597 mo
327.791 240.448 li
327.791 245.015 mo
327.791 247.701 li
332.358 249.851 mo
330.746 249.851 li
335.582 249.851 mo
337.194 249.851 li
333.97 248.507 mo
333.97 246.358 li
333.97 251.194 mo
333.97 254.149 li
339.075 250.388 mo
337.194 250.388 li
342.03 250.388 mo
343.91 250.388 li
340.687 249.045 mo
340.687 246.895 li
340.687 251.731 mo
340.687 254.687 li
346.06 262.478 mo
343.91 262.478 li
349.284 262.478 mo
351.433 262.478 li
347.672 261.134 mo
347.672 258.179 li
347.672 263.821 mo
347.672 267.851 li
356.537 279.403 mo
351.433 279.403 li
359.493 279.403 mo
364.597 279.403 li
358.149 278.06 mo
358.149 274.567 li
358.149 280.746 mo
358.149 285.313 li
370.508 283.164 mo
364.597 283.164 li
373.731 283.164 mo
379.642 283.164 li
372.119 281.821 mo
372.119 278.328 li
372.119 284.239 mo
372.119 289.075 li
387.97 290.686 mo
379.642 290.686 li
391.194 290.686 mo
399.522 290.686 li
@
389.582 289.343 mo
389.582 285.851 li
389.582 292.03 mo
389.582 297.134 li
425.851 317.821 mo
399.522 317.821 li
428.806 317.821 mo
455.134 317.821 li
427.463 316.478 mo
427.463 312.448 li
427.463 319.164 mo
427.463 325.075 li
495.433 352.746 mo
455.134 352.746 li
498.657 352.746 mo
538.955 352.746 li
497.045 351.672 mo
497.045 343.881 li
497.045 354.09 mo
497.045 368.06 li
@
180.298 307.254 mo
185.672 307.254 li
181.325 310.412 li
182.985 305.302 li
184.645 310.412 li
f
194 245.463 mo
199.373 245.463 li
195.026 248.621 li
196.687 243.51 li
198.347 248.621 li
f
494.358 351.851 mo
499.731 351.851 li
495.384 355.009 li
497.045 349.898 li
498.705 355.009 li
f
424.776 316.926 mo
430.149 316.926 li
425.802 320.084 li
427.463 314.973 li
429.123 320.084 li
f
386.896 289.791 mo
392.269 289.791 li
387.922 292.95 li
389.582 287.839 li
391.242 292.95 li
f
369.433 282.269 mo
374.806 282.269 li
370.459 285.427 li
372.119 280.316 li
373.78 285.427 li
f
355.463 278.508 mo
360.836 278.508 li
356.489 281.666 li
358.149 276.555 li
359.81 281.666 li
f
344.985 261.582 mo
350.358 261.582 li
346.011 264.741 li
347.672 259.63 li
349.332 264.741 li
f
338 249.493 mo
343.373 249.493 li
339.026 252.651 li
340.687 247.54 li
342.347 252.651 li
f
331.284 248.956 mo
336.657 248.956 li
332.31 252.114 li
333.97 247.003 li
335.63 252.114 li
f
325.104 242.776 mo
330.478 242.776 li
326.131 245.935 li
327.791 240.824 li
329.451 245.935 li
f
319.194 240.359 mo
324.567 240.359 li
320.22 243.517 li
321.881 238.406 li
323.541 243.517 li
f
313.821 235.791 mo
319.194 235.791 li
314.847 238.95 li
316.508 233.839 li
318.168 238.95 li
f
308.985 228 mo
314.358 228 li
310.011 231.159 li
311.672 226.048 li
313.332 231.159 li
f
303.881 224.508 mo
309.254 224.508 li
304.907 227.666 li
306.567 222.555 li
308.228 227.665 li
f
299.045 220.209 mo
304.418 220.209 li
300.071 223.368 li
301.731 218.257 li
303.392 223.368 li
f
293.94 217.254 mo
299.313 217.254 li
294.967 220.412 li
296.627 215.302 li
298.287 220.412 li
f
289.373 199.791 mo
294.746 199.791 li
290.399 202.95 li
292.06 197.839 li
293.72 202.95 li
f
285.343 199.523 mo
290.716 199.523 li
286.37 202.681 li
288.03 197.57 li
289.69 202.681 li
f
281.045 190.657 mo
286.418 190.657 li
282.071 193.815 li
283.731 188.705 li
285.392 193.815 li
f
277.015 186.896 mo
282.388 186.896 li
278.041 190.054 li
279.702 184.943 li
281.362 190.054 li
f
272.716 176.956 mo
278.09 176.956 li
273.743 180.114 li
275.403 175.003 li
277.063 180.114 li
f
268.687 176.15 mo
274.06 176.15 li
269.713 179.308 li
271.373 174.197 li
273.033 179.308 li
f
264.388 167.821 mo
269.761 167.821 li
265.414 170.98 li
267.075 165.869 li
268.735 170.98 li
f
260.358 155.732 mo
265.731 155.732 li
261.384 158.89 li
263.045 153.779 li
264.705 158.89 li
f
256.06 150.359 mo
261.433 150.359 li
257.086 153.517 li
258.746 148.406 li
260.407 153.517 li
f
252.03 145.791 mo
257.403 145.791 li
253.056 148.95 li
254.716 143.839 li
256.377 148.95 li
f
248 138.538 mo
253.373 138.538 li
249.026 141.696 li
250.687 136.585 li
252.347 141.696 li
f
243.702 131.821 mo
249.075 131.821 li
244.728 134.98 li
246.388 129.869 li
248.048 134.98 li
f
239.672 127.791 mo
245.045 127.791 li
240.698 130.95 li
242.358 125.839 li
244.018 130.95 li
f
235.373 121.881 mo
240.746 121.881 li
236.399 125.039 li
238.06 119.928 li
239.72 125.039 li
f
231.343 115.702 mo
236.716 115.702 li
232.37 118.86 li
234.03 113.749 li
235.69 118.86 li
f
227.045 112.478 mo
232.418 112.478 li
228.071 115.636 li
229.731 110.525 li
231.392 115.636 li
f
223.015 109.254 mo
228.388 109.254 li
224.041 112.412 li
225.702 107.302 li
227.362 112.412 li
f
218.716 109.254 mo
224.09 109.254 li
219.743 112.412 li
221.403 107.302 li
223.063 112.412 li
f
214.687 111.672 mo
220.06 111.672 li
215.713 114.83 li
217.373 109.719 li
219.033 114.83 li
f
210.657 122.687 mo
216.03 122.687 li
211.683 125.845 li
213.343 120.734 li
215.004 125.845 li
f
206.358 144.448 mo
211.731 144.448 li
207.385 147.606 li
209.045 142.495 li
210.705 147.606 li
f
202.328 183.672 mo
207.702 183.672 li
203.355 186.83 li
205.015 181.719 li
206.675 186.83 li
f
181.373 308.149 mo
179.493 308.149 li
184.328 308.149 mo
186.209 308.149 li
182.985 306.806 mo
182.985 282.627 li
182.985 309.492 mo
182.985 381.761 li
186.746 381.761 mo
186.209 381.761 li
189.97 381.761 mo
190.507 381.761 li
188.358 380.418 mo
188.358 265.164 li
191.045 381.761 mo
190.507 381.761 li
194 381.761 mo
194.537 381.761 li
195.075 246.358 mo
194.537 246.358 li
198.03 246.358 mo
198.567 246.358 li
196.687 245.015 mo
196.687 223.791 li
196.687 247.701 mo
196.687 381.761 li
199.104 381.761 mo
198.567 381.761 li
202.328 381.761 mo
202.866 381.761 li
200.716 380.418 mo
200.716 226.478 li
203.403 184.567 mo
202.866 184.567 li
206.358 184.567 mo
206.896 184.567 li
205.015 183.224 mo
205.015 178.388 li
205.015 185.91 mo
205.015 193.433 li
207.433 145.343 mo
206.896 145.343 li
210.657 145.343 mo
211.194 145.343 li
209.045 144.269 mo
209.045 143.731 li
209.045 146.686 mo
209.045 147.492 li
211.731 123.582 mo
211.194 123.582 li
214.687 123.582 mo
215.224 123.582 li
215.761 112.567 mo
215.224 112.567 li
218.985 112.567 mo
219.522 112.567 li
220.06 110.149 mo
219.522 110.149 li
223.015 110.149 mo
223.552 110.149 li
224.09 110.149 mo
223.552 110.149 li
227.313 110.149 mo
227.851 110.149 li
228.388 113.373 mo
227.851 113.373 li
231.343 113.373 mo
231.881 113.373 li
232.418 116.597 mo
231.881 116.597 li
235.373 116.597 mo
235.91 116.597 li
236.716 122.776 mo
235.91 122.776 li
239.672 122.776 mo
240.209 122.776 li
240.746 128.686 mo
240.209 128.686 li
243.702 128.686 mo
244.239 128.686 li
244.776 132.716 mo
244.239 132.716 li
248 132.716 mo
248.537 132.716 li
249.075 139.433 mo
248.537 139.433 li
252.03 139.433 mo
252.567 139.433 li
253.105 146.686 mo
252.567 146.686 li
256.328 146.686 mo
256.866 146.686 li
257.403 151.254 mo
256.866 151.254 li
260.358 151.254 mo
260.896 151.254 li
261.433 156.627 mo
260.896 156.627 li
264.657 156.627 mo
265.194 156.627 li
265.731 168.716 mo
265.194 168.716 li
268.687 168.716 mo
269.224 168.716 li
267.075 167.373 mo
267.075 167.104 li
267.075 170.06 mo
267.075 170.328 li
269.761 177.045 mo
269.224 177.045 li
272.716 177.045 mo
273.254 177.045 li
271.373 175.701 mo
271.373 175.164 li
271.373 178.119 mo
271.373 178.925 li
274.06 177.851 mo
273.254 177.851 li
277.015 177.851 mo
277.552 177.851 li
275.403 176.776 mo
275.403 176.239 li
275.403 179.194 mo
275.403 179.731 li
278.09 187.791 mo
277.552 187.791 li
281.045 187.791 mo
281.582 187.791 li
.750179 .679652 .670191 .901488 cmyk
@
279.702 186.448 mo
279.702 185.642 li
279.702 189.134 mo
279.702 190.209 li
282.119 191.552 mo
281.582 191.552 li
285.343 191.552 mo
285.881 191.552 li
283.731 190.209 mo
283.731 189.672 li
283.731 192.895 mo
283.731 193.97 li
286.418 200.418 mo
285.881 200.418 li
289.373 200.418 mo
289.91 200.418 li
288.03 199.075 mo
288.03 198 li
288.03 201.492 mo
288.03 203.104 li
290.448 200.687 mo
289.91 200.687 li
293.672 200.687 mo
294.209 200.687 li
292.06 199.343 mo
292.06 198.537 li
292.06 201.761 mo
292.06 203.104 li
295.015 218.149 mo
294.209 218.149 li
298.239 218.149 mo
299.045 218.149 li
296.627 216.806 mo
296.627 215.194 li
296.627 219.492 mo
296.627 221.91 li
300.119 221.104 mo
299.045 221.104 li
303.075 221.104 mo
304.149 221.104 li
301.731 219.761 mo
301.731 218.149 li
301.731 222.448 mo
301.731 224.597 li
304.955 225.403 mo
304.149 225.403 li
308.179 225.403 mo
308.985 225.403 li
306.567 224.06 mo
306.567 222.448 li
306.567 226.478 mo
306.567 228.627 li
310.06 228.895 mo
308.985 228.895 li
313.015 228.895 mo
314.09 228.895 li
311.672 227.552 mo
311.672 225.94 li
311.672 230.239 mo
311.672 232.388 li
314.896 236.687 mo
314.09 236.687 li
318.119 236.687 mo
318.925 236.687 li
316.508 235.343 mo
316.508 233.194 li
316.508 238.03 mo
316.508 240.716 li
320.537 241.254 mo
318.925 241.254 li
323.493 241.254 mo
324.836 241.254 li
321.881 239.91 mo
321.881 238.03 li
321.881 242.597 mo
321.881 245.015 li
326.179 243.672 mo
324.836 243.672 li
329.403 243.672 mo
330.746 243.672 li
327.791 242.597 mo
327.791 240.448 li
327.791 245.015 mo
327.791 247.701 li
332.358 249.851 mo
330.746 249.851 li
335.582 249.851 mo
337.194 249.851 li
333.97 248.507 mo
333.97 246.358 li
333.97 251.194 mo
333.97 254.149 li
339.075 250.388 mo
337.194 250.388 li
342.03 250.388 mo
343.91 250.388 li
340.687 249.045 mo
340.687 246.895 li
340.687 251.731 mo
340.687 254.687 li
346.06 262.478 mo
343.91 262.478 li
349.284 262.478 mo
351.433 262.478 li
347.672 261.134 mo
347.672 258.179 li
347.672 263.821 mo
347.672 267.851 li
356.537 279.403 mo
351.433 279.403 li
359.493 279.403 mo
364.597 279.403 li
358.149 278.06 mo
358.149 274.567 li
358.149 280.746 mo
358.149 285.313 li
370.508 283.164 mo
364.597 283.164 li
373.731 283.164 mo
379.642 283.164 li
372.119 281.821 mo
372.119 278.328 li
372.119 284.239 mo
372.119 289.075 li
387.97 290.686 mo
379.642 290.686 li
391.194 290.686 mo
399.522 290.686 li
@
389.582 289.343 mo
389.582 285.851 li
389.582 292.03 mo
389.582 297.134 li
425.851 317.821 mo
399.522 317.821 li
428.806 317.821 mo
455.134 317.821 li
427.463 316.478 mo
427.463 312.448 li
427.463 319.164 mo
427.463 325.075 li
495.433 352.746 mo
455.134 352.746 li
498.657 352.746 mo
538.955 352.746 li
497.045 351.672 mo
497.045 343.881 li
497.045 354.09 mo
497.045 368.06 li
@
180.298 307.254 mo
185.672 307.254 li
181.325 310.412 li
182.985 305.302 li
184.645 310.412 li
3.0518e-05 .990631 1 .000396735 cmyk
f
194 245.463 mo
199.373 245.463 li
195.026 248.621 li
196.687 243.51 li
198.347 248.621 li
f
494.358 351.851 mo
499.731 351.851 li
495.384 355.009 li
497.045 349.898 li
498.705 355.009 li
f
424.776 316.926 mo
430.149 316.926 li
425.802 320.084 li
427.463 314.973 li
429.123 320.084 li
f
386.896 289.791 mo
392.269 289.791 li
387.922 292.95 li
389.582 287.839 li
391.242 292.95 li
f
369.433 282.269 mo
374.806 282.269 li
370.459 285.427 li
372.119 280.316 li
373.78 285.427 li
f
355.463 278.508 mo
360.836 278.508 li
356.489 281.666 li
358.149 276.555 li
359.81 281.666 li
f
344.985 261.582 mo
350.358 261.582 li
346.011 264.741 li
347.672 259.63 li
349.332 264.741 li
f
338 249.493 mo
343.373 249.493 li
339.026 252.651 li
340.687 247.54 li
342.347 252.651 li
f
331.284 248.956 mo
336.657 248.956 li
332.31 252.114 li
333.97 247.003 li
335.63 252.114 li
f
325.104 242.776 mo
330.478 242.776 li
326.131 245.935 li
327.791 240.824 li
329.451 245.935 li
f
319.194 240.359 mo
324.567 240.359 li
320.22 243.517 li
321.881 238.406 li
323.541 243.517 li
f
313.821 235.791 mo
319.194 235.791 li
314.847 238.95 li
316.508 233.839 li
318.168 238.95 li
f
308.985 228 mo
314.358 228 li
310.011 231.159 li
311.672 226.048 li
313.332 231.159 li
f
303.881 224.508 mo
309.254 224.508 li
304.907 227.666 li
306.567 222.555 li
308.228 227.665 li
f
299.045 220.209 mo
304.418 220.209 li
300.071 223.368 li
301.731 218.257 li
303.392 223.368 li
f
293.94 217.254 mo
299.313 217.254 li
294.967 220.412 li
296.627 215.302 li
298.287 220.412 li
f
289.373 199.791 mo
294.746 199.791 li
290.399 202.95 li
292.06 197.839 li
293.72 202.95 li
f
285.343 199.523 mo
290.716 199.523 li
286.37 202.681 li
288.03 197.57 li
289.69 202.681 li
f
281.045 190.657 mo
286.418 190.657 li
282.071 193.815 li
283.731 188.705 li
285.392 193.815 li
f
277.015 186.896 mo
282.388 186.896 li
278.041 190.054 li
279.702 184.943 li
281.362 190.054 li
f
272.716 176.956 mo
278.09 176.956 li
273.743 180.114 li
275.403 175.003 li
277.063 180.114 li
f
268.687 176.15 mo
274.06 176.15 li
269.713 179.308 li
271.373 174.197 li
273.033 179.308 li
f
264.388 167.821 mo
269.761 167.821 li
265.414 170.98 li
267.075 165.869 li
268.735 170.98 li
f
260.358 155.732 mo
265.731 155.732 li
261.384 158.89 li
263.045 153.779 li
264.705 158.89 li
f
256.06 150.359 mo
261.433 150.359 li
257.086 153.517 li
258.746 148.406 li
260.407 153.517 li
f
252.03 145.791 mo
257.403 145.791 li
253.056 148.95 li
254.716 143.839 li
256.377 148.95 li
f
248 138.538 mo
253.373 138.538 li
249.026 141.696 li
250.687 136.585 li
252.347 141.696 li
f
243.702 131.821 mo
249.075 131.821 li
244.728 134.98 li
246.388 129.869 li
248.048 134.98 li
f
239.672 127.791 mo
245.045 127.791 li
240.698 130.95 li
242.358 125.839 li
244.018 130.95 li
f
235.373 121.881 mo
240.746 121.881 li
236.399 125.039 li
238.06 119.928 li
239.72 125.039 li
f
231.343 115.702 mo
236.716 115.702 li
232.37 118.86 li
234.03 113.749 li
235.69 118.86 li
f
227.045 112.478 mo
232.418 112.478 li
228.071 115.636 li
229.731 110.525 li
231.392 115.636 li
f
223.015 109.254 mo
228.388 109.254 li
224.041 112.412 li
225.702 107.302 li
227.362 112.412 li
f
218.716 109.254 mo
224.09 109.254 li
219.743 112.412 li
221.403 107.302 li
223.063 112.412 li
f
214.687 111.672 mo
220.06 111.672 li
215.713 114.83 li
217.373 109.719 li
219.033 114.83 li
f
210.657 122.687 mo
216.03 122.687 li
211.683 125.845 li
213.343 120.734 li
215.004 125.845 li
f
206.358 144.448 mo
211.731 144.448 li
207.385 147.606 li
209.045 142.495 li
210.705 147.606 li
f
202.328 183.672 mo
207.702 183.672 li
203.355 186.83 li
205.015 181.719 li
206.675 186.83 li
f
224.09 381.761 mo
224.895 143.463 li
225.702 93.4925 li
226.508 93.2239 li
227.313 90.806 li
228.119 96.1791 li
228.925 102.358 li
229.731 102.09 li
230.537 99.6716 li
231.343 101.284 li
232.418 105.851 li
233.224 107.194 li
234.03 111.761 li
234.836 111.761 li
235.642 110.955 li
236.985 116.597 li
238.597 122.239 li
240.478 127.075 li
243.164 130.836 li
246.119 142.119 li
249.612 149.642 li
254.179 155.821 li
254.179 155.552 li
249.612 149.104 li
246.119 141.045 li
243.164 129.492 li
240.478 125.194 li
238.597 119.821 li
236.985 113.642 li
235.642 108 li
234.836 108 li
234.03 107.463 li
233.224 102.896 li
232.418 101.284 li
231.343 96.7164 li
230.537 94.5672 li
229.731 95.1045 li
228.925 94.0299 li
228.119 88.3881 li
227.313 83.5522 li
226.508 83.8209 li
225.702 83.0149 li
224.09 147.224 li
223.284 240.179 li
221.94 381.761 li
.696254 .631098 .620691 .585717 cmyk
currentcolor
/705973184.0 
<<
/ID /705973184.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 96 4 ] 
/XStep 96 
/YStep 4 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
96 0 li
96 4 li
0 4 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[1 3 ] 0 dsh
true sadj
{2 4 mo
98 4 li
0 3 mo
96 3 li
2 2 mo
98 2 li
0 1 mo
96 1 li
}exec
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/705973184.0 /Pattern get_res
[.80597 0 0 -.80597 32 792 ]make_pattern set_pattern
ef
2 vmreclaim
.80597 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
221.94 381.761 mo
223.284 240.179 li
223.284 240.179 mo
224.09 147.224 li
225.702 83.0148 li
226.507 83.8208 li
227.313 83.5521 li
228.119 88.388 li
228.925 94.0298 li
229.731 95.1044 li
230.537 94.5671 li
231.343 96.7163 li
232.418 101.284 li
233.224 102.895 li
234.03 107.463 li
234.836 108 li
235.642 108 li
236.985 113.642 li
238.597 119.821 li
240.478 125.194 li
243.164 129.492 li
246.119 141.045 li
249.612 149.104 li
254.179 155.552 li
224.09 381.761 mo
224.896 143.463 li
224.896 143.463 mo
225.702 93.4924 li
226.507 93.2238 li
227.313 90.8059 li
228.119 96.179 li
228.925 102.358 li
229.731 102.089 li
230.537 99.6716 li
231.343 101.284 li
232.418 105.851 li
233.224 107.194 li
234.03 111.761 li
234.836 111.761 li
235.642 110.955 li
236.985 116.597 li
238.597 122.239 li
240.478 127.075 li
243.164 130.836 li
246.119 142.119 li
249.612 149.642 li
254.179 155.821 li
false sop
.196414 .15378 .15378 3.0518e-05 cmyk
@
221.94 379.075 mo
221.94 245.284 li
223.284 379.075 mo
223.284 224.328 li
224.09 184.298 mo
224.09 157.164 li
224.09 189.403 mo
224.09 381.761 li
224.896 121.97 mo
224.896 119.821 li
224.896 127.075 mo
224.896 130.567 li
257.672 163.881 mo
256.866 163.881 li
262.776 163.881 mo
263.313 163.881 li
264.925 174.089 mo
263.313 174.089 li
270.03 174.089 mo
271.642 174.089 li
274.06 182.955 mo
271.642 182.955 li
279.164 182.955 mo
281.582 182.955 li
285.343 191.284 mo
281.582 191.284 li
290.448 191.284 mo
294.209 191.284 li
299.582 204.448 mo
294.209 204.448 li
304.687 204.448 mo
309.791 204.448 li
302 207.134 mo
302 207.403 li
317.313 214.657 mo
309.791 214.657 li
322.418 214.657 mo
329.94 214.657 li
320 217.075 mo
320 217.612 li
339.612 233.194 mo
329.94 233.194 li
344.716 233.194 mo
354.657 233.194 li
342.299 230.776 mo
342.299 229.701 li
342.299 235.881 mo
342.299 237.492 li
367.552 249.313 mo
354.657 249.313 li
372.657 249.313 mo
385.552 249.313 li
369.97 246.627 mo
369.97 244.478 li
369.97 251.731 mo
369.97 255.492 li
402.478 275.91 mo
385.552 275.91 li
407.582 275.91 mo
424.508 275.91 li
404.896 273.224 mo
404.896 268.925 li
404.896 278.328 mo
404.896 286.388 li
446 309.761 mo
424.508 309.761 li
451.105 309.761 mo
472.597 309.761 li
448.418 307.075 mo
448.418 297.94 li
448.418 312.179 mo
448.418 336.895 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
451.083 309.772 mo
451.083 308.289 449.879 307.085 448.396 307.085 cv
446.913 307.085 445.71 308.289 445.71 309.772 cv
445.71 311.255 446.913 312.458 448.396 312.458 cv
449.879 312.458 451.083 311.255 451.083 309.772 cv
.750179 .679652 .670191 .901488 cmyk
ef
407.561 275.921 mo
407.561 274.438 406.357 273.235 404.874 273.235 cv
403.391 273.235 402.188 274.438 402.188 275.921 cv
402.188 277.404 403.391 278.608 404.874 278.608 cv
406.357 278.608 407.561 277.404 407.561 275.921 cv
ef
372.614 249.356 mo
372.614 247.873 371.41 246.67 369.927 246.67 cv
368.444 246.67 367.241 247.873 367.241 249.356 cv
367.241 250.839 368.444 252.043 369.927 252.043 cv
371.41 252.043 372.614 250.839 372.614 249.356 cv
ef
345.017 233.237 mo
345.017 231.754 343.814 230.55 342.331 230.55 cv
340.848 230.55 339.644 231.754 339.644 233.237 cv
339.644 234.72 340.848 235.924 342.331 235.924 cv
343.814 235.924 345.017 234.72 345.017 233.237 cv
ef
322.708 214.667 mo
322.708 213.185 321.504 211.981 320.022 211.981 cv
318.539 211.981 317.335 213.185 317.335 214.667 cv
317.335 216.15 318.539 217.354 320.022 217.354 cv
321.504 217.354 322.708 216.15 322.708 214.667 cv
ef
304.654 204.48 mo
304.654 202.997 303.451 201.793 301.968 201.793 cv
300.485 201.793 299.281 202.997 299.281 204.48 cv
299.281 205.963 300.485 207.167 301.968 207.167 cv
303.451 207.167 304.654 205.963 304.654 204.48 cv
ef
290.727 191.327 mo
290.727 189.844 289.524 188.64 288.041 188.64 cv
286.558 188.64 285.354 189.844 285.354 191.327 cv
285.354 192.81 286.558 194.013 288.041 194.013 cv
289.524 194.013 290.727 192.81 290.727 191.327 cv
ef
279.444 182.945 mo
279.444 181.461 278.24 180.258 276.757 180.258 cv
275.274 180.258 274.07 181.461 274.07 182.945 cv
274.07 184.427 275.274 185.631 276.757 185.631 cv
278.24 185.631 279.444 184.427 279.444 182.945 cv
ef
270.288 174.111 mo
270.288 172.628 269.084 171.424 267.601 171.424 cv
266.118 171.424 264.915 172.628 264.915 174.111 cv
264.915 175.594 266.118 176.798 267.601 176.798 cv
269.084 176.798 270.288 175.594 270.288 174.111 cv
ef
262.744 163.859 mo
262.744 162.376 261.54 161.172 260.057 161.172 cv
258.574 161.172 257.371 162.376 257.371 163.859 cv
257.371 165.342 258.574 166.546 260.057 166.546 cv
261.54 166.546 262.744 165.342 262.744 163.859 cv
ef
256.876 155.542 mo
256.876 154.058 255.673 152.855 254.19 152.855 cv
252.707 152.855 251.503 154.058 251.503 155.542 cv
251.503 157.024 252.707 158.228 254.19 158.228 cv
255.673 158.228 256.876 157.024 256.876 155.542 cv
ef
252.298 149.416 mo
252.298 147.933 251.095 146.73 249.612 146.73 cv
248.129 146.73 246.925 147.933 246.925 149.416 cv
246.925 150.899 248.129 152.103 249.612 152.103 cv
251.095 152.103 252.298 150.899 252.298 149.416 cv
ef
248.817 141.55 mo
248.817 140.067 247.613 138.863 246.13 138.863 cv
244.647 138.863 243.444 140.067 243.444 141.55 cv
243.444 143.033 244.647 144.236 246.13 144.236 cv
247.613 144.236 248.817 143.033 248.817 141.55 cv
ef
245.851 130.331 mo
245.851 128.848 244.647 127.644 243.164 127.644 cv
241.681 127.644 240.478 128.848 240.478 130.331 cv
240.478 131.814 241.681 133.017 243.164 133.017 cv
244.647 133.017 245.851 131.814 245.851 130.331 cv
ef
243.143 126.011 mo
243.143 124.528 241.939 123.324 240.456 123.324 cv
238.973 123.324 237.77 124.528 237.77 126.011 cv
237.77 127.494 238.973 128.697 240.456 128.697 cv
241.939 128.697 243.143 127.494 243.143 126.011 cv
ef
241.273 120.917 mo
241.273 119.434 240.069 118.23 238.586 118.23 cv
237.103 118.23 235.9 119.434 235.9 120.917 cv
235.9 122.4 237.103 123.604 238.586 123.604 cv
240.069 123.604 241.273 122.4 241.273 120.917 cv
ef
239.661 114.985 mo
239.661 113.502 238.457 112.299 236.974 112.299 cv
235.491 112.299 234.288 113.502 234.288 114.985 cv
234.288 116.468 235.491 117.672 236.974 117.672 cv
238.457 117.672 239.661 116.468 239.661 114.985 cv
ef
238.307 109.311 mo
238.307 107.828 237.103 106.625 235.62 106.625 cv
234.137 106.625 232.934 107.828 232.934 109.311 cv
232.934 110.794 234.137 111.998 235.62 111.998 cv
237.103 111.998 238.307 110.794 238.307 109.311 cv
ef
237.533 109.891 mo
237.533 108.408 236.33 107.205 234.847 107.205 cv
233.364 107.205 232.16 108.408 232.16 109.891 cv
232.16 111.374 233.364 112.578 234.847 112.578 cv
236.33 112.578 237.533 111.374 237.533 109.891 cv
ef
236.695 109.311 mo
236.695 107.828 235.491 106.625 234.008 106.625 cv
232.525 106.625 231.322 107.828 231.322 109.311 cv
231.322 110.794 232.525 111.998 234.008 111.998 cv
235.491 111.998 236.695 110.794 236.695 109.311 cv
ef
235.921 104.798 mo
235.921 103.315 234.718 102.111 233.235 102.111 cv
231.752 102.111 230.548 103.315 230.548 104.798 cv
230.548 106.281 231.752 107.484 233.235 107.484 cv
234.718 107.484 235.921 106.281 235.921 104.798 cv
ef
235.083 103.444 mo
235.083 101.961 233.879 100.757 232.396 100.757 cv
230.913 100.757 229.71 101.961 229.71 103.444 cv
229.71 104.927 230.913 106.13 232.396 106.13 cv
233.879 106.13 235.083 104.927 235.083 103.444 cv
ef
233.987 98.8657 mo
233.987 97.3827 232.783 96.1791 231.3 96.1791 cv
229.817 96.1791 228.614 97.3827 228.614 98.8657 cv
228.614 100.349 229.817 101.552 231.3 101.552 cv
232.783 101.552 233.987 100.349 233.987 98.8657 cv
ef
233.213 96.9958 mo
233.213 95.5128 232.01 94.3093 230.527 94.3093 cv
229.044 94.3093 227.84 95.5128 227.84 96.9958 cv
227.84 98.4788 229.044 99.6824 230.527 99.6824 cv
232.01 99.6824 233.213 98.4788 233.213 96.9958 cv
ef
232.439 98.3499 mo
232.439 96.8669 231.236 95.6633 229.753 95.6633 cv
228.27 95.6633 227.066 96.8669 227.066 98.3499 cv
227.066 99.8328 228.27 101.036 229.753 101.036 cv
231.236 101.036 232.439 99.8328 232.439 98.3499 cv
ef
231.601 97.5116 mo
231.601 96.0287 230.398 94.8251 228.915 94.8251 cv
227.432 94.8251 226.228 96.0287 226.228 97.5116 cv
226.228 98.9946 227.432 100.198 228.915 100.198 cv
230.398 100.198 231.601 98.9946 231.601 97.5116 cv
ef
230.763 91.9021 mo
230.763 90.4191 229.559 89.2155 228.076 89.2155 cv
226.593 89.2155 225.39 90.4191 225.39 91.9021 cv
225.39 93.3851 226.593 94.5887 228.076 94.5887 cv
229.559 94.5887 230.763 93.3851 230.763 91.9021 cv
ef
229.989 86.7439 mo
229.989 85.2609 228.786 84.0573 227.303 84.0573 cv
225.82 84.0573 224.616 85.2609 224.616 86.7439 cv
224.616 88.2269 225.82 89.4304 227.303 89.4304 cv
228.786 89.4304 229.989 88.2269 229.989 86.7439 cv
ef
229.215 87.84 mo
229.215 86.357 228.012 85.1534 226.529 85.1534 cv
225.046 85.1534 223.842 86.357 223.842 87.84 cv
223.842 89.323 225.046 90.5266 226.529 90.5266 cv
228.012 90.5266 229.215 89.323 229.215 87.84 cv
ef
228.377 87.5821 mo
228.377 86.0991 227.174 84.8955 225.691 84.8955 cv
224.208 84.8955 223.004 86.0991 223.004 87.5821 cv
223.004 89.0651 224.208 90.2687 225.691 90.2687 cv
227.174 90.2687 228.377 89.0651 228.377 87.5821 cv
ef
227.539 124.657 mo
227.539 123.174 226.335 121.97 224.852 121.97 cv
223.37 121.97 222.166 123.174 222.166 124.657 cv
222.166 126.14 223.37 127.343 224.852 127.343 cv
226.335 127.343 227.539 126.14 227.539 124.657 cv
ef
226.765 187.007 mo
226.765 185.524 225.562 184.32 224.079 184.32 cv
222.596 184.32 221.392 185.524 221.392 187.007 cv
221.392 188.49 222.596 189.693 224.079 189.693 cv
225.562 189.693 226.765 188.49 226.765 187.007 cv
ef
221.94 379.881 mo
221.94 245.284 li
223.284 379.881 mo
223.284 224.328 li
224.09 185.104 mo
224.09 157.164 li
224.09 188.597 mo
224.09 381.761 li
224.896 122.776 mo
224.896 119.821 li
224.896 126.269 mo
224.896 130.567 li
228.925 99.4029 mo
228.925 99.6716 li
229.731 99.9402 mo
229.731 100.209 li
232.418 101.821 mo
232.418 101.552 li
232.418 105.045 mo
232.418 105.313 li
234.03 107.731 mo
234.03 107.463 li
234.03 111.224 mo
234.03 111.492 li
234.836 111.492 mo
234.836 111.761 li
248 149.373 mo
247.731 149.373 li
251.493 149.373 mo
251.761 149.373 li
252.567 155.552 mo
251.761 155.552 li
256.06 155.552 mo
256.866 155.552 li
258.478 163.881 mo
256.866 163.881 li
261.702 163.881 mo
263.313 163.881 li
266 174.089 mo
263.313 174.089 li
269.224 174.089 mo
271.642 174.089 li
267.612 175.701 mo
267.612 175.97 li
275.134 182.955 mo
271.642 182.955 li
278.358 182.955 mo
281.582 182.955 li
276.746 181.343 mo
276.746 181.075 li
276.746 184.836 mo
276.746 185.104 li
286.149 191.284 mo
281.582 191.284 li
289.642 191.284 mo
294.209 191.284 li
288.03 189.672 mo
288.03 189.403 li
288.03 193.164 mo
288.03 193.701 li
300.388 204.448 mo
294.209 204.448 li
303.612 204.448 mo
309.791 204.448 li
302 202.836 mo
302 202.03 li
302 206.328 mo
302 207.403 li
318.119 214.657 mo
309.791 214.657 li
321.612 214.657 mo
329.94 214.657 li
320 213.045 mo
320 211.97 li
320 216.269 mo
320 217.612 li
340.687 233.194 mo
329.94 233.194 li
343.91 233.194 mo
354.657 233.194 li
342.299 231.582 mo
342.299 229.701 li
342.299 235.075 mo
342.299 237.492 li
368.358 249.313 mo
354.657 249.313 li
371.851 249.313 mo
385.552 249.313 li
369.97 247.433 mo
369.97 244.478 li
369.97 250.925 mo
369.97 255.492 li
403.284 275.91 mo
385.552 275.91 li
406.776 275.91 mo
424.508 275.91 li
404.896 274.298 mo
404.896 268.925 li
404.896 277.522 mo
404.896 286.388 li
446.806 309.761 mo
424.508 309.761 li
450.299 309.761 mo
472.597 309.761 li
448.418 307.881 mo
448.418 297.94 li
448.418 311.373 mo
448.418 336.895 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
450.411 309.772 mo
450.411 308.66 449.509 307.757 448.396 307.757 cv
447.284 307.757 446.382 308.66 446.382 309.772 cv
446.382 310.884 447.284 311.787 448.396 311.787 cv
449.509 311.787 450.411 310.884 450.411 309.772 cv
ef
406.953 275.921 mo
406.953 274.809 406.051 273.906 404.939 273.906 cv
403.826 273.906 402.924 274.809 402.924 275.921 cv
402.924 277.033 403.826 277.936 404.939 277.936 cv
406.051 277.936 406.953 277.033 406.953 275.921 cv
ef
372.007 249.292 mo
372.007 248.18 371.104 247.277 369.992 247.277 cv
368.879 247.277 367.977 248.18 367.977 249.292 cv
367.977 250.404 368.879 251.307 369.992 251.307 cv
371.104 251.307 372.007 250.404 372.007 249.292 cv
ef
344.281 233.172 mo
344.281 232.06 343.379 231.158 342.266 231.158 cv
341.154 231.158 340.251 232.06 340.251 233.172 cv
340.251 234.285 341.154 235.188 342.266 235.188 cv
343.379 235.188 344.281 234.285 344.281 233.172 cv
ef
321.972 214.667 mo
321.972 213.555 321.069 212.653 319.957 212.653 cv
318.845 212.653 317.942 213.555 317.942 214.667 cv
317.942 215.78 318.845 216.682 319.957 216.682 cv
321.069 216.682 321.972 215.78 321.972 214.667 cv
ef
304.047 204.416 mo
304.047 203.303 303.145 202.401 302.032 202.401 cv
300.92 202.401 300.017 203.303 300.017 204.416 cv
300.017 205.528 300.92 206.43 302.032 206.43 cv
303.145 206.43 304.047 205.528 304.047 204.416 cv
ef
290.056 191.262 mo
290.056 190.15 289.153 189.247 288.041 189.247 cv
286.928 189.247 286.026 190.15 286.026 191.262 cv
286.026 192.374 286.928 193.277 288.041 193.277 cv
289.153 193.277 290.056 192.374 290.056 191.262 cv
ef
278.772 182.945 mo
278.772 181.832 277.869 180.93 276.757 180.93 cv
275.645 180.93 274.742 181.832 274.742 182.945 cv
274.742 184.057 275.645 184.959 276.757 184.959 cv
277.869 184.959 278.772 184.057 278.772 182.945 cv
ef
269.616 174.111 mo
269.616 172.999 268.713 172.096 267.601 172.096 cv
266.489 172.096 265.586 172.999 265.586 174.111 cv
265.586 175.223 266.489 176.126 267.601 176.126 cv
268.713 176.126 269.616 175.223 269.616 174.111 cv
ef
262.137 163.924 mo
262.137 162.811 261.234 161.909 260.122 161.909 cv
259.01 161.909 258.107 162.811 258.107 163.924 cv
258.107 165.036 259.01 165.938 260.122 165.938 cv
261.234 165.938 262.137 165.036 262.137 163.924 cv
ef
256.205 155.542 mo
256.205 154.429 255.302 153.527 254.19 153.527 cv
253.078 153.527 252.175 154.429 252.175 155.542 cv
252.175 156.654 253.078 157.556 254.19 157.556 cv
255.302 157.556 256.205 156.654 256.205 155.542 cv
ef
251.627 149.352 mo
251.627 148.239 250.724 147.337 249.612 147.337 cv
248.5 147.337 247.597 148.239 247.597 149.352 cv
247.597 150.464 248.5 151.367 249.612 151.367 cv
250.724 151.367 251.627 150.464 251.627 149.352 cv
ef
248.145 141.614 mo
248.145 140.502 247.242 139.599 246.13 139.599 cv
245.018 139.599 244.115 140.502 244.115 141.614 cv
244.115 142.727 245.018 143.629 246.13 143.629 cv
247.242 143.629 248.145 142.727 248.145 141.614 cv
ef
245.179 130.266 mo
245.179 129.154 244.276 128.251 243.164 128.251 cv
242.052 128.251 241.149 129.154 241.149 130.266 cv
241.149 131.378 242.052 132.281 243.164 132.281 cv
244.276 132.281 245.179 131.378 245.179 130.266 cv
ef
242.536 126.011 mo
242.536 124.898 241.633 123.996 240.521 123.996 cv
239.408 123.996 238.506 124.898 238.506 126.011 cv
238.506 127.123 239.408 128.026 240.521 128.026 cv
241.633 128.026 242.536 127.123 242.536 126.011 cv
ef
240.601 120.852 mo
240.601 119.74 239.699 118.838 238.586 118.838 cv
237.474 118.838 236.571 119.74 236.571 120.852 cv
236.571 121.965 237.474 122.867 238.586 122.867 cv
239.699 122.867 240.601 121.965 240.601 120.852 cv
ef
238.989 114.985 mo
238.989 113.873 238.087 112.97 236.974 112.97 cv
235.862 112.97 234.959 113.873 234.959 114.985 cv
234.959 116.097 235.862 117 236.974 117 cv
238.087 117 238.989 116.097 238.989 114.985 cv
ef
237.635 109.375 mo
237.635 108.263 236.732 107.361 235.62 107.361 cv
234.508 107.361 233.605 108.263 233.605 109.375 cv
233.605 110.488 234.508 111.39 235.62 111.39 cv
236.732 111.39 237.635 110.488 237.635 109.375 cv
ef
236.861 109.891 mo
236.861 108.779 235.959 107.876 234.847 107.876 cv
233.734 107.876 232.832 108.779 232.832 109.891 cv
232.832 111.004 233.734 111.906 234.847 111.906 cv
235.959 111.906 236.861 111.004 236.861 109.891 cv
ef
236.088 109.375 mo
236.088 108.263 235.185 107.361 234.073 107.361 cv
232.961 107.361 232.058 108.263 232.058 109.375 cv
232.058 110.488 232.961 111.39 234.073 111.39 cv
235.185 111.39 236.088 110.488 236.088 109.375 cv
ef
235.25 104.733 mo
235.25 103.621 234.347 102.718 233.235 102.718 cv
232.122 102.718 231.22 103.621 231.22 104.733 cv
231.22 105.845 232.122 106.748 233.235 106.748 cv
234.347 106.748 235.25 105.845 235.25 104.733 cv
ef
234.411 103.444 mo
234.411 102.331 233.509 101.429 232.396 101.429 cv
231.284 101.429 230.382 102.331 230.382 103.444 cv
230.382 104.556 231.284 105.458 232.396 105.458 cv
233.509 105.458 234.411 104.556 234.411 103.444 cv
ef
233.38 98.8657 mo
233.38 97.7534 232.477 96.8507 231.365 96.8507 cv
230.253 96.8507 229.35 97.7534 229.35 98.8657 cv
229.35 99.9779 230.253 100.881 231.365 100.881 cv
232.477 100.881 233.38 99.9779 233.38 98.8657 cv
ef
232.542 96.9958 mo
232.542 95.8836 231.639 94.9809 230.527 94.9809 cv
229.414 94.9809 228.512 95.8836 228.512 96.9958 cv
228.512 98.1081 229.414 99.0107 230.527 99.0107 cv
231.639 99.0107 232.542 98.1081 232.542 96.9958 cv
ef
231.703 98.2854 mo
231.703 97.1731 230.801 96.2704 229.688 96.2704 cv
228.576 96.2704 227.673 97.1731 227.673 98.2854 cv
227.673 99.3976 228.576 100.3 229.688 100.3 cv
230.801 100.3 231.703 99.3976 231.703 98.2854 cv
ef
230.93 97.5116 mo
230.93 96.3994 230.027 95.4967 228.915 95.4967 cv
227.802 95.4967 226.9 96.3994 226.9 97.5116 cv
226.9 98.6239 227.802 99.5266 228.915 99.5266 cv
230.027 99.5266 230.93 98.6239 230.93 97.5116 cv
ef
230.156 91.8376 mo
230.156 90.7254 229.253 89.8227 228.141 89.8227 cv
227.029 89.8227 226.126 90.7254 226.126 91.8376 cv
226.126 92.9499 227.029 93.8525 228.141 93.8525 cv
229.253 93.8525 230.156 92.9499 230.156 91.8376 cv
ef
229.318 86.8084 mo
229.318 85.6961 228.415 84.7934 227.303 84.7934 cv
226.19 84.7934 225.288 85.6961 225.288 86.8084 cv
225.288 87.9206 226.19 88.8233 227.303 88.8233 cv
228.415 88.8233 229.318 87.9206 229.318 86.8084 cv
ef
228.479 87.84 mo
228.479 86.7278 227.577 85.8251 226.464 85.8251 cv
225.352 85.8251 224.45 86.7278 224.45 87.84 cv
224.45 88.9522 225.352 89.8549 226.464 89.8549 cv
227.577 89.8549 228.479 88.9522 228.479 87.84 cv
ef
227.706 87.5821 mo
227.706 86.4699 226.803 85.5672 225.691 85.5672 cv
224.579 85.5672 223.676 86.4699 223.676 87.5821 cv
223.676 88.6943 224.579 89.597 225.691 89.597 cv
226.803 89.597 227.706 88.6943 227.706 87.5821 cv
ef
226.932 124.657 mo
226.932 123.544 226.029 122.642 224.917 122.642 cv
223.805 122.642 222.902 123.544 222.902 124.657 cv
222.902 125.769 223.805 126.672 224.917 126.672 cv
226.029 126.672 226.932 125.769 226.932 124.657 cv
ef
226.094 187.007 mo
226.094 185.894 225.191 184.992 224.079 184.992 cv
222.967 184.992 222.064 185.894 222.064 187.007 cv
222.064 188.119 222.967 189.021 224.079 189.021 cv
225.191 189.021 226.094 188.119 226.094 187.007 cv
ef
221.94 379.881 mo
221.94 245.284 li
223.284 379.881 mo
223.284 224.328 li
224.09 185.104 mo
224.09 157.164 li
224.09 188.597 mo
224.09 381.761 li
224.896 122.776 mo
224.896 119.821 li
224.896 126.269 mo
224.896 130.567 li
228.925 99.4029 mo
228.925 99.6716 li
229.731 99.9402 mo
229.731 100.209 li
232.418 101.821 mo
232.418 101.552 li
232.418 105.045 mo
232.418 105.313 li
234.03 107.731 mo
234.03 107.463 li
234.03 111.224 mo
234.03 111.492 li
234.836 111.492 mo
234.836 111.761 li
248 149.373 mo
247.731 149.373 li
251.493 149.373 mo
251.761 149.373 li
252.567 155.552 mo
251.761 155.552 li
256.06 155.552 mo
256.866 155.552 li
258.478 163.881 mo
256.866 163.881 li
261.702 163.881 mo
263.313 163.881 li
266 174.089 mo
263.313 174.089 li
269.224 174.089 mo
271.642 174.089 li
267.612 175.701 mo
267.612 175.97 li
275.134 182.955 mo
271.642 182.955 li
278.358 182.955 mo
281.582 182.955 li
276.746 181.343 mo
276.746 181.075 li
276.746 184.836 mo
276.746 185.104 li
286.149 191.284 mo
281.582 191.284 li
289.642 191.284 mo
294.209 191.284 li
288.03 189.672 mo
288.03 189.403 li
288.03 193.164 mo
288.03 193.701 li
300.388 204.448 mo
294.209 204.448 li
303.612 204.448 mo
309.791 204.448 li
302 202.836 mo
302 202.03 li
302 206.328 mo
302 207.403 li
318.119 214.657 mo
309.791 214.657 li
321.612 214.657 mo
329.94 214.657 li
320 213.045 mo
320 211.97 li
320 216.269 mo
320 217.612 li
340.687 233.194 mo
329.94 233.194 li
343.91 233.194 mo
354.657 233.194 li
342.299 231.582 mo
342.299 229.701 li
342.299 235.075 mo
342.299 237.492 li
368.358 249.313 mo
354.657 249.313 li
371.851 249.313 mo
385.552 249.313 li
369.97 247.433 mo
369.97 244.478 li
369.97 250.925 mo
369.97 255.492 li
403.284 275.91 mo
385.552 275.91 li
406.776 275.91 mo
424.508 275.91 li
404.896 274.298 mo
404.896 268.925 li
404.896 277.522 mo
404.896 286.388 li
446.806 309.761 mo
424.508 309.761 li
450.299 309.761 mo
472.597 309.761 li
448.418 307.881 mo
448.418 297.94 li
448.418 311.373 mo
448.418 336.895 li
.750179 .679652 .670191 .901488 cmyk
@
450.411 309.772 mo
450.411 308.66 449.509 307.757 448.396 307.757 cv
447.284 307.757 446.382 308.66 446.382 309.772 cv
446.382 310.884 447.284 311.787 448.396 311.787 cv
449.509 311.787 450.411 310.884 450.411 309.772 cv
.783902 .622919 3.0518e-05 3.0518e-05 cmyk
ef
406.953 275.921 mo
406.953 274.809 406.051 273.906 404.939 273.906 cv
403.826 273.906 402.924 274.809 402.924 275.921 cv
402.924 277.033 403.826 277.936 404.939 277.936 cv
406.051 277.936 406.953 277.033 406.953 275.921 cv
ef
372.007 249.292 mo
372.007 248.18 371.104 247.277 369.992 247.277 cv
368.879 247.277 367.977 248.18 367.977 249.292 cv
367.977 250.404 368.879 251.307 369.992 251.307 cv
371.104 251.307 372.007 250.404 372.007 249.292 cv
ef
344.281 233.172 mo
344.281 232.06 343.379 231.158 342.266 231.158 cv
341.154 231.158 340.251 232.06 340.251 233.172 cv
340.251 234.285 341.154 235.188 342.266 235.188 cv
343.379 235.188 344.281 234.285 344.281 233.172 cv
ef
321.972 214.667 mo
321.972 213.555 321.069 212.653 319.957 212.653 cv
318.845 212.653 317.942 213.555 317.942 214.667 cv
317.942 215.78 318.845 216.682 319.957 216.682 cv
321.069 216.682 321.972 215.78 321.972 214.667 cv
ef
304.047 204.416 mo
304.047 203.303 303.145 202.401 302.032 202.401 cv
300.92 202.401 300.017 203.303 300.017 204.416 cv
300.017 205.528 300.92 206.43 302.032 206.43 cv
303.145 206.43 304.047 205.528 304.047 204.416 cv
ef
290.056 191.262 mo
290.056 190.15 289.153 189.247 288.041 189.247 cv
286.928 189.247 286.026 190.15 286.026 191.262 cv
286.026 192.374 286.928 193.277 288.041 193.277 cv
289.153 193.277 290.056 192.374 290.056 191.262 cv
ef
278.772 182.945 mo
278.772 181.832 277.869 180.93 276.757 180.93 cv
275.645 180.93 274.742 181.832 274.742 182.945 cv
274.742 184.057 275.645 184.959 276.757 184.959 cv
277.869 184.959 278.772 184.057 278.772 182.945 cv
ef
269.616 174.111 mo
269.616 172.999 268.713 172.096 267.601 172.096 cv
266.489 172.096 265.586 172.999 265.586 174.111 cv
265.586 175.223 266.489 176.126 267.601 176.126 cv
268.713 176.126 269.616 175.223 269.616 174.111 cv
ef
262.137 163.924 mo
262.137 162.811 261.234 161.909 260.122 161.909 cv
259.01 161.909 258.107 162.811 258.107 163.924 cv
258.107 165.036 259.01 165.938 260.122 165.938 cv
261.234 165.938 262.137 165.036 262.137 163.924 cv
ef
256.205 155.542 mo
256.205 154.429 255.302 153.527 254.19 153.527 cv
253.078 153.527 252.175 154.429 252.175 155.542 cv
252.175 156.654 253.078 157.556 254.19 157.556 cv
255.302 157.556 256.205 156.654 256.205 155.542 cv
ef
251.627 149.352 mo
251.627 148.239 250.724 147.337 249.612 147.337 cv
248.5 147.337 247.597 148.239 247.597 149.352 cv
247.597 150.464 248.5 151.367 249.612 151.367 cv
250.724 151.367 251.627 150.464 251.627 149.352 cv
ef
248.145 141.614 mo
248.145 140.502 247.242 139.599 246.13 139.599 cv
245.018 139.599 244.115 140.502 244.115 141.614 cv
244.115 142.727 245.018 143.629 246.13 143.629 cv
247.242 143.629 248.145 142.727 248.145 141.614 cv
ef
245.179 130.266 mo
245.179 129.154 244.276 128.251 243.164 128.251 cv
242.052 128.251 241.149 129.154 241.149 130.266 cv
241.149 131.378 242.052 132.281 243.164 132.281 cv
244.276 132.281 245.179 131.378 245.179 130.266 cv
ef
242.536 126.011 mo
242.536 124.898 241.633 123.996 240.521 123.996 cv
239.408 123.996 238.506 124.898 238.506 126.011 cv
238.506 127.123 239.408 128.026 240.521 128.026 cv
241.633 128.026 242.536 127.123 242.536 126.011 cv
ef
240.601 120.852 mo
240.601 119.74 239.699 118.838 238.586 118.838 cv
237.474 118.838 236.571 119.74 236.571 120.852 cv
236.571 121.965 237.474 122.867 238.586 122.867 cv
239.699 122.867 240.601 121.965 240.601 120.852 cv
ef
238.989 114.985 mo
238.989 113.873 238.087 112.97 236.974 112.97 cv
235.862 112.97 234.959 113.873 234.959 114.985 cv
234.959 116.097 235.862 117 236.974 117 cv
238.087 117 238.989 116.097 238.989 114.985 cv
ef
237.635 109.375 mo
237.635 108.263 236.732 107.361 235.62 107.361 cv
234.508 107.361 233.605 108.263 233.605 109.375 cv
233.605 110.488 234.508 111.39 235.62 111.39 cv
236.732 111.39 237.635 110.488 237.635 109.375 cv
ef
236.861 109.891 mo
236.861 108.779 235.959 107.876 234.847 107.876 cv
233.734 107.876 232.832 108.779 232.832 109.891 cv
232.832 111.004 233.734 111.906 234.847 111.906 cv
235.959 111.906 236.861 111.004 236.861 109.891 cv
ef
236.088 109.375 mo
236.088 108.263 235.185 107.361 234.073 107.361 cv
232.961 107.361 232.058 108.263 232.058 109.375 cv
232.058 110.488 232.961 111.39 234.073 111.39 cv
235.185 111.39 236.088 110.488 236.088 109.375 cv
ef
235.25 104.733 mo
235.25 103.621 234.347 102.718 233.235 102.718 cv
232.122 102.718 231.22 103.621 231.22 104.733 cv
231.22 105.845 232.122 106.748 233.235 106.748 cv
234.347 106.748 235.25 105.845 235.25 104.733 cv
ef
234.411 103.444 mo
234.411 102.331 233.509 101.429 232.396 101.429 cv
231.284 101.429 230.382 102.331 230.382 103.444 cv
230.382 104.556 231.284 105.458 232.396 105.458 cv
233.509 105.458 234.411 104.556 234.411 103.444 cv
ef
233.38 98.8657 mo
233.38 97.7534 232.477 96.8507 231.365 96.8507 cv
230.253 96.8507 229.35 97.7534 229.35 98.8657 cv
229.35 99.9779 230.253 100.881 231.365 100.881 cv
232.477 100.881 233.38 99.9779 233.38 98.8657 cv
ef
232.542 96.9958 mo
232.542 95.8836 231.639 94.9809 230.527 94.9809 cv
229.414 94.9809 228.512 95.8836 228.512 96.9958 cv
228.512 98.1081 229.414 99.0107 230.527 99.0107 cv
231.639 99.0107 232.542 98.1081 232.542 96.9958 cv
ef
231.703 98.2854 mo
231.703 97.1731 230.801 96.2704 229.688 96.2704 cv
228.576 96.2704 227.673 97.1731 227.673 98.2854 cv
227.673 99.3976 228.576 100.3 229.688 100.3 cv
230.801 100.3 231.703 99.3976 231.703 98.2854 cv
ef
230.93 97.5116 mo
230.93 96.3994 230.027 95.4967 228.915 95.4967 cv
227.802 95.4967 226.9 96.3994 226.9 97.5116 cv
226.9 98.6239 227.802 99.5266 228.915 99.5266 cv
230.027 99.5266 230.93 98.6239 230.93 97.5116 cv
ef
230.156 91.8376 mo
230.156 90.7254 229.253 89.8227 228.141 89.8227 cv
227.029 89.8227 226.126 90.7254 226.126 91.8376 cv
226.126 92.9499 227.029 93.8525 228.141 93.8525 cv
229.253 93.8525 230.156 92.9499 230.156 91.8376 cv
ef
229.318 86.8084 mo
229.318 85.6961 228.415 84.7934 227.303 84.7934 cv
226.19 84.7934 225.288 85.6961 225.288 86.8084 cv
225.288 87.9206 226.19 88.8233 227.303 88.8233 cv
228.415 88.8233 229.318 87.9206 229.318 86.8084 cv
ef
228.479 87.84 mo
228.479 86.7278 227.577 85.8251 226.464 85.8251 cv
225.352 85.8251 224.45 86.7278 224.45 87.84 cv
224.45 88.9522 225.352 89.8549 226.464 89.8549 cv
227.577 89.8549 228.479 88.9522 228.479 87.84 cv
ef
227.706 87.5821 mo
227.706 86.4699 226.803 85.5672 225.691 85.5672 cv
224.579 85.5672 223.676 86.4699 223.676 87.5821 cv
223.676 88.6943 224.579 89.597 225.691 89.597 cv
226.803 89.597 227.706 88.6943 227.706 87.5821 cv
ef
226.932 124.657 mo
226.932 123.544 226.029 122.642 224.917 122.642 cv
223.805 122.642 222.902 123.544 222.902 124.657 cv
222.902 125.769 223.805 126.672 224.917 126.672 cv
226.029 126.672 226.932 125.769 226.932 124.657 cv
ef
226.094 187.007 mo
226.094 185.894 225.191 184.992 224.079 184.992 cv
222.967 184.992 222.064 185.894 222.064 187.007 cv
222.064 188.119 222.967 189.021 224.079 189.021 cv
225.191 189.021 226.094 188.119 226.094 187.007 cv
ef
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if

1 0 1 <> TZMBAA+Helvetica AddT42Char 
1 3660 20 <0002005c00de046f03360003000700274015012000cd07200604001a0907
021908095c213f52182b2b4ef43c10f63c002f4dedfdfd31300115213501
152135046ffbed0413fbed0336a8a8fe53abab00>TZMBAA+Helvetica AddT42Char 
1 4020 22 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>TZMBAA+Helvetica AddT42Char 
1 4356 23 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>TZMBAA+Helvetica AddT42Char 
1 4896 26 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>TZMBAA+Helvetica AddT42Char 
1 5964 30 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>TZMBAA+Helvetica AddT42Char 
1 8112 40 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/space 1 def
/equal 20 def
/G 22 def
/N 23 def
/V 26 def
/e 30 def
/s 40 def
end
TZMBAA+Helvetica /Encoding get
dup 32 /space put
dup 61 /equal put
dup 71 /G put
dup 78 /N put
dup 86 /V put
dup 101 /e put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four /five 7{/.notdef}rp /equal 9{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [20.3871 0 0 -20.3871 0 0 ]msf423.336 106.949 mo(=200 GeV)[11.906 11.3352 11.3352 11.3352 5.6676 15.8611 11.3352 0 ]xshLCKXDL+Helvetica*1 [13.5913 0 0 -13.5913 0 0 ]msf404.659 113.741 mo(NN)[9.81296 0 ]xshLCKXDL+Helvetica*1 [20.3871 0 0 -20.3871 0 0 ]msf394.474 106.949 mo(s)sh1.61194 lw
386.896 95.9103 mo
389.313 113.642 li
@
0 lw
389.313 113.642 mo
392.806 89.9999 li
423.433 89.9999 li
@
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if
1 508 3 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>TZMBAA+Helvetica AddT42Char 
1 652 4 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>TZMBAA+Helvetica AddT42Char 
1 784 5 <0001005c0000046f0415000b0037401c037a050220080b7a0a0a0d17171a
067a040920030a7a00190c3f52182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3cf431301335211133112115211123115c01b4ab01b4fe4cab
01b6a801b7fe49a8fe4a01b60000>TZMBAA+Helvetica AddT42Char 
1 888 6 <000100aafed0018000da000e002d401600230e0a64080a1017171a07340a
640008190f6365182b4e10f44d3cfded4e456544e6003f4dedd4ed313017
3637363534262723353315140607aa451c0f01026dd66076d10c552d2a07
0b07daca77b415000000>TZMBAA+Helvetica AddT42Char 
1 988 7 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>TZMBAA+Helvetica AddT42Char 
1 1048 8 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>TZMBAA+Helvetica AddT42Char 
1 1112 9 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>TZMBAA+Helvetica AddT42Char 
1 3212 18 <00020049ffd80411059a001b002700ab402e19052b052816480658056805
8919881a981a09460807212727350a0a182135100504351bc7180d07023c
071e3114b80155400b0d00291b8124380d2947281076c418d4edf4ed10f5
fd397d4b52787a2f18003feded3fed12392fed1112393130437940341f26
191a0b13010312250226220f24280020111e28010319002800260b242800
230e2128011f13212801011a042800250c2728002b2b2b2b012b2b2b2b2b
2b81818181015d01161716333236130e0123220235341233201316151007
02212226350036353426232206151416330110086b374581b6263cb166cf
f1eee8013977424f83fec7d2da0232b19f7b849b8895015a95391ed70149
5f4d0102cbc30128fee69be9fef9cbfeaedca601268db09e9bb1948ca500
>TZMBAA+Helvetica AddT42Char 
1 3512 19 <0001001cffed04ad04280006006a40405703670387030300201203030202
20120100010620120304030420120505060306040200030505010106050a
03000104020503011a08060019070888215fb5182b2b4ef43c10f6173c11
1239003d3f3f111217392f044d1887102b10872b87102b87102b3130015d
130115090115011c0491fc4403bcfb6f025e01cab4fe97fe96b401cb>TZMBAA+Helvetica AddT42Char 
1 3740 21 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>TZMBAA+Helvetica AddT42Char 
1 4528 24 <000200b40000057805bd0009002700944012070d49014805590158056905
641478050816bb01300119001b011c40422321202660127112751403121e
1f141c1503211e161404261224251e0009091b071e0b02261c1b08202515
1f251603310f691b1a29082625270a192829d6219566182b2b4ef43c4dfd
3c4e10f64df4edd4edd4ed003f3c3c3ffd12392f3cfd3c39111739011112
39391239395d1112392b3130015d01323635342726232111032132171615
1406071e011f011617161715232e012f012627262321112303478ca3723d
66fe1ac702a8a86dcf6d6256570507030b122ef40a0c040c0764397afe3b
c7031c70929d391efe0a02a1315efd84a833237280c55429461421133c56
f590311bfd8a>TZMBAA+Helvetica AddT42Char 
1 4804 25 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>TZMBAA+Helvetica AddT42Char 
1 5488 28 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>TZMBAA+Helvetica AddT42Char 
1 5748 29 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>TZMBAA+Helvetica AddT42Char 
1 6368 31 <0003003dfe3b03e80449001f002d002e00b7404d36144908490958085909
880ca91ba81da927a62bb91b0b4008031622290ec40a221d1f070406291d
190a121d0a0f2e072e2e051c032e162e2d29051a300c0e270d3e26271c19
2f3087217242182b2b4ef44dedf4ed394e10f64dfde4f51112392f003f3f
ed3fed3f3fed10ed1112393931304379402c23281a1e0b1124251026231e
262600281a262600110b0e21000f0e0c0d251d222601271b2926000f0c12
2100002b2b2b01103c103c2b2b2b2b2b818181005d001716173533111407
06212226273316171633323736270e012322241110003300262322070615
1416333237363501027c5e3335a63c70fec9adec0eb70d273d83cf402603
36987daefefb0107ba0144a47fbe4625937cc24f2cfed104423e234387fc
32cc76da9ba548273c9256dd5250f7011d010d012efea1c0b25f9ab5bdaf
6384022d0000>TZMBAA+Helvetica AddT42Char 
1 6864 33 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>TZMBAA+Helvetica AddT42Char 
1 6956 34 <0002ffdafe50013805bd00030011002fb800532bba0000000100562bb800
0110b80007d0b8000010b80009d000b8000e2fb800112fba000300000056
2b303101233533013e0135113311140706232226270138b4b4fea27931b4
263fb00d1d1f04edd0f93404235c04b6fb37753a620203000000>TZMBAA+Helvetica AddT42Char 
1 7744 38 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>TZMBAA+Helvetica AddT42Char 
1 7972 39 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>TZMBAA+Helvetica AddT42Char 
1 8560 41 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>TZMBAA+Helvetica AddT42Char 
1 8720 42 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/parenleft 3 def
/parenright 4 def
/plus 5 def
/comma 6 def
/hyphen 7 def
/period 8 def
/slash 9 def
/nine 18 def
/less 19 def
/A 21 def
/R 24 def
/T 25 def
/c 28 def
/d 29 def
/g 31 def
/i 33 def
/j 34 def
/p 38 def
/r 39 def
/t 41 def
/u 42 def
end
TZMBAA+Helvetica /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 57 /nine put
dup 60 /less put
dup 65 /A put
dup 82 /R put
dup 84 /T put
dup 99 /c put
dup 100 /d put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five 3{/.notdef}rp /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp /N 3{/.notdef}rp /R /.notdef /T /.notdef /V 12{/.notdef}rp /c /d /e /.notdef /g /.notdef /i /j 5{/.notdef}rp /p /.notdef /r /s /t /u 138{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [20.3871 0 0 -20.3871 0 0 ]msf311.282 106.949 mo(Au+Au, )[13.5983 11.3352 11.9061 13.5983 11.3352 5.6676 0 ]xsh392.777 135.813 mo( < 30.0 GeV/c)[5.6676 11.906 5.6676 11.3352 11.3352 5.6676 11.3352 5.6676 15.8611 11.3352 13.5983 5.6676 0 ]xshLCKXDL+Helvetica*1 [13.5913 0 0 -13.5913 0 0 ]msf374.099 123.08 mo(trig)[3.77835 4.52585 3.01727 0 ]xsh374.099 146.848 mo(T)shLCKXDL+Helvetica*1 [20.3871 0 0 -20.3871 0 0 ]msf311.282 135.814 mo(9.0 < p)[11.3352 5.6676 11.3352 5.6676 11.9061 5.6676 0 ]xsh311.282 163.828 mo(R=0.2)[14.7195 11.9061 11.3352 5.6676 0 ]xshLCKXDL+Helvetica*1 [0 -18.6881 -18.6881 0 0 0 ]msf49.8266 218.154 mo(-1)[-6.22296 0 ]yshLCKXDL+Helvetica*1 [0 -28.0322 -28.0322 0 0 0 ]msf62.5597 337.846 mo(\)  \(GeV/c\))[-9.33453 -7.79294 -7.79294 -9.3345 -21.809 -15.5859 -18.6977 -7.79297 -14.0161 0 ]yshLCKXDL+Helvetica*1 [0 -18.6881 -18.6881 0 0 0 ]msf77.8398 358.221 mo(jet)[-4.14877 -10.3906 0 ]ysh%ADOBeginSubsetFont: NZPPMX+Symbol AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NZPPMX+Symbol gcheck setglobal} if
1 116 100 <00010012fe4e042703ac0022004340231b2101070408100a110d04a7111e
18b000b1081215101b0907002c211015072c21092310d4c4ecd4c410ee11
123911123931002fe5f63cc6ee3211393912173930011134262322021511
231134262322061d01232e01353436333216173e01333216151103683f50
7fa6c02a2c3031290101655c6e6e0132ac849481fe4e04108d67feb8fefe
f402a05c5654521d081211757db5babdb2c7edfc5600>NZPPMX+Symbol AddT42Char 
NZPPMX+Symbol /CharStrings get begin
/g100 100 def
end
NZPPMX+Symbol /Encoding get
dup 33 /g100 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDM+Symbol*1 [32{/.notdef}rp /g60 /g100 222{/.notdef}rp]LCKXDM+Symbol nfLCKXDM+Symbol*1 [0 -28.0322 -28.0322 0 0 0 ]msf62.5597 373.5 mo(!)shLCKXDL+Helvetica*1 [0 -28.0322 -28.0322 0 0 0 ]msf62.5597 387.931 mo(d)sh32 387.94 mo
549.433 387.94 li
549.433 792 li
32 792 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.268657 lw
32 387.94 mo
549.433 387.94 li
549.433 792 li
32 792 li
cp
@
161.224 387.94 mo
538.955 387.94 li
538.955 701.194 li
161.224 701.194 li
cp
ef
161.224 387.94 mo
538.955 387.94 li
538.955 701.194 li
161.224 701.194 li
cp
@
.80597 lw
161.224 387.94 mo
538.955 387.94 li
538.955 701.194 li
161.224 701.194 li
cp
.750179 .679652 .670191 .901488 cmyk
@
161.224 387.94 mo
538.955 387.94 li
538.955 701.194 li
161.224 701.194 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.268657 lw
161.224 387.94 mo
538.955 387.94 li
538.955 701.194 li
161.224 701.194 li
cp
@
.80597 lw
161.224 387.94 mo
538.955 387.94 li
538.955 701.194 li
161.224 701.194 li
cp
161.224 701.194 mo
538.955 701.194 li
.750179 .679652 .670191 .901488 cmyk
@
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if
1 6704 32 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>TZMBAA+Helvetica AddT42Char 
1 7504 37 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/h 32 def
/o 37 def
end
TZMBAA+Helvetica /Encoding get
dup 104 /h put
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five 3{/.notdef}rp /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp /N 3{/.notdef}rp /R /.notdef /T /.notdef /V 12{/.notdef}rp /c /d /e /.notdef /g /h /i /j 4{/.notdef}rp /o /p /.notdef /r /s /t /u 138{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf329.959 759.742 mo(  \(GeV/c\))[8.27658 8.27661 9.91388 23.1626 16.5532 19.8581 8.27664 14.886 0 ]xshLCKXDL+Helvetica*1 [19.5644 0 0 -19.5644 0 0 ]msf267.141 746.16 mo(reco,ch)[6.5148 10.8778 9.78223 10.8778 5.4389 9.78223 0 ]xsh267.141 775.022 mo(T,jet)[11.9537 5.43893 4.34329 10.8778 0 ]xshLCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf251.012 759.742 mo(p)sh223.552 692.328 mo
223.552 701.194 li
240.209 696.896 mo
240.209 701.194 li
256.866 696.896 mo
256.866 701.194 li
273.254 696.896 mo
273.254 701.194 li
289.91 696.896 mo
289.91 701.194 li
306.567 692.328 mo
306.567 701.194 li
323.224 696.896 mo
323.224 701.194 li
339.881 696.896 mo
339.881 701.194 li
356.269 696.896 mo
356.269 701.194 li
372.925 696.896 mo
372.925 701.194 li
389.582 692.328 mo
389.582 701.194 li
406.239 696.896 mo
406.239 701.194 li
422.896 696.896 mo
422.896 701.194 li
439.284 696.896 mo
439.284 701.194 li
455.94 696.896 mo
455.94 701.194 li
472.597 692.328 mo
472.597 701.194 li
223.552 692.328 mo
223.552 701.194 li
206.896 696.896 mo
206.896 701.194 li
190.507 696.896 mo
190.507 701.194 li
173.851 696.896 mo
173.851 701.194 li
472.597 692.328 mo
472.597 701.194 li
489.254 696.896 mo
489.254 701.194 li
505.911 696.896 mo
505.911 701.194 li
522.299 696.896 mo
522.299 701.194 li
538.955 696.896 mo
538.955 701.194 li
@
LCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf215.359 728.334 mo(0102030)[74.698 16.5532 66.6268 16.5532 66.6298 16.5532 0 ]xsh161.224 387.94 mo
538.955 387.94 li
223.552 396.806 mo
223.552 387.94 li
240.209 392.507 mo
240.209 387.94 li
256.866 392.507 mo
256.866 387.94 li
273.254 392.507 mo
273.254 387.94 li
289.91 392.507 mo
289.91 387.94 li
306.567 396.806 mo
306.567 387.94 li
323.224 392.507 mo
323.224 387.94 li
339.881 392.507 mo
339.881 387.94 li
356.269 392.507 mo
356.269 387.94 li
372.925 392.507 mo
372.925 387.94 li
389.582 396.806 mo
389.582 387.94 li
406.239 392.507 mo
406.239 387.94 li
422.896 392.507 mo
422.896 387.94 li
439.284 392.507 mo
439.284 387.94 li
455.94 392.507 mo
455.94 387.94 li
472.597 396.806 mo
472.597 387.94 li
223.552 396.806 mo
223.552 387.94 li
206.896 392.507 mo
206.896 387.94 li
190.507 392.507 mo
190.507 387.94 li
173.851 392.507 mo
173.851 387.94 li
472.597 396.806 mo
472.597 387.94 li
489.254 392.507 mo
489.254 387.94 li
505.911 392.507 mo
505.911 387.94 li
522.299 392.507 mo
522.299 387.94 li
538.955 392.507 mo
538.955 387.94 li
161.224 701.194 mo
161.224 387.94 li
167.403 701.194 mo
161.224 701.194 li
167.403 697.701 mo
161.224 697.701 li
173.313 694.478 mo
161.224 694.478 li
@
LCKXDL+Helvetica*1 [19.5644 0 0 -19.5644 0 0 ]msf144.902 693.529 mo(5)shLCKXDM+Symbol*1 [19.5644 0 0 -19.5644 0 0 ]msf133.865 693.529 mo( )shLCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf101.608 707.112 mo(10)[16.5532 0 ]xsh167.403 672.716 mo
161.224 672.716 li
167.403 660.09 mo
161.224 660.09 li
167.403 651.224 mo
161.224 651.224 li
167.403 644.239 mo
161.224 644.239 li
167.403 638.597 mo
161.224 638.597 li
167.403 633.761 mo
161.224 633.761 li
167.403 629.731 mo
161.224 629.731 li
167.403 625.97 mo
161.224 625.97 li
173.313 622.746 mo
161.224 622.746 li
@
LCKXDL+Helvetica*1 [19.5644 0 0 -19.5644 0 0 ]msf144.902 623.072 mo(4)shLCKXDM+Symbol*1 [19.5644 0 0 -19.5644 0 0 ]msf133.865 623.072 mo( )shLCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf101.608 635.805 mo(10)[16.5532 0 ]xsh167.403 601.254 mo
161.224 601.254 li
167.403 588.627 mo
161.224 588.627 li
167.403 579.761 mo
161.224 579.761 li
167.403 572.776 mo
161.224 572.776 li
167.403 567.134 mo
161.224 567.134 li
167.403 562.298 mo
161.224 562.298 li
167.403 558 mo
161.224 558 li
167.403 554.507 mo
161.224 554.507 li
173.313 551.015 mo
161.224 551.015 li
@
LCKXDL+Helvetica*1 [19.5644 0 0 -19.5644 0 0 ]msf144.902 550.917 mo(3)shLCKXDM+Symbol*1 [19.5644 0 0 -19.5644 0 0 ]msf133.865 550.917 mo( )shLCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf101.608 564.499 mo(10)[16.5532 0 ]xsh167.403 529.522 mo
161.224 529.522 li
167.403 516.895 mo
161.224 516.895 li
167.403 508.03 mo
161.224 508.03 li
167.403 501.045 mo
161.224 501.045 li
167.403 495.403 mo
161.224 495.403 li
167.403 490.567 mo
161.224 490.567 li
167.403 486.537 mo
161.224 486.537 li
167.403 482.776 mo
161.224 482.776 li
173.313 479.552 mo
161.224 479.552 li
@
LCKXDL+Helvetica*1 [19.5644 0 0 -19.5644 0 0 ]msf144.902 479.611 mo(2)shLCKXDM+Symbol*1 [19.5644 0 0 -19.5644 0 0 ]msf133.865 479.611 mo( )shLCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf101.608 492.343 mo(10)[16.5532 0 ]xsh167.403 458.06 mo
161.224 458.06 li
167.403 445.433 mo
161.224 445.433 li
167.403 436.298 mo
161.224 436.298 li
167.403 429.582 mo
161.224 429.582 li
167.403 423.672 mo
161.224 423.672 li
167.403 419.104 mo
161.224 419.104 li
167.403 414.806 mo
161.224 414.806 li
167.403 411.313 mo
161.224 411.313 li
173.313 407.821 mo
161.224 407.821 li
@
LCKXDL+Helvetica*1 [19.5644 0 0 -19.5644 0 0 ]msf148.297 408.304 mo(1)shLCKXDM+Symbol*1 [19.5644 0 0 -19.5644 0 0 ]msf137.261 408.304 mo( )shLCKXDL+Helvetica*1 [29.772 0 0 -29.772 0 0 ]msf105.004 421.039 mo(10)[16.5532 0 ]xsh538.955 701.194 mo
538.955 387.94 li
533.045 701.194 mo
538.955 701.194 li
533.045 697.701 mo
538.955 697.701 li
526.866 694.478 mo
538.955 694.478 li
533.045 672.716 mo
538.955 672.716 li
533.045 660.09 mo
538.955 660.09 li
533.045 651.224 mo
538.955 651.224 li
533.045 644.239 mo
538.955 644.239 li
533.045 638.597 mo
538.955 638.597 li
533.045 633.761 mo
538.955 633.761 li
533.045 629.731 mo
538.955 629.731 li
533.045 625.97 mo
538.955 625.97 li
526.866 622.746 mo
538.955 622.746 li
533.045 601.254 mo
538.955 601.254 li
533.045 588.627 mo
538.955 588.627 li
533.045 579.761 mo
538.955 579.761 li
533.045 572.776 mo
538.955 572.776 li
533.045 567.134 mo
538.955 567.134 li
533.045 562.298 mo
538.955 562.298 li
533.045 558 mo
538.955 558 li
533.045 554.507 mo
538.955 554.507 li
526.866 551.015 mo
538.955 551.015 li
533.045 529.522 mo
538.955 529.522 li
533.045 516.895 mo
538.955 516.895 li
533.045 508.03 mo
538.955 508.03 li
533.045 501.045 mo
538.955 501.045 li
533.045 495.403 mo
538.955 495.403 li
533.045 490.567 mo
538.955 490.567 li
533.045 486.537 mo
538.955 486.537 li
533.045 482.776 mo
538.955 482.776 li
526.866 479.552 mo
538.955 479.552 li
533.045 458.06 mo
538.955 458.06 li
533.045 445.433 mo
538.955 445.433 li
533.045 436.298 mo
538.955 436.298 li
533.045 429.582 mo
538.955 429.582 li
533.045 423.672 mo
538.955 423.672 li
533.045 419.104 mo
538.955 419.104 li
533.045 414.806 mo
538.955 414.806 li
533.045 411.313 mo
538.955 411.313 li
526.866 407.821 mo
538.955 407.821 li
@
171.97 701.194 mo
177.075 543.761 li
185.403 539.194 li
193.731 511.254 li
202.06 493.791 li
210.388 484.119 li
218.716 471.492 li
226.776 464.776 li
235.105 464.239 li
243.433 465.045 li
251.761 462.09 li
260.09 461.015 li
268.418 467.463 li
276.746 465.582 li
285.075 467.731 li
293.403 480.358 li
302 481.702 li
311.672 484.925 li
321.612 493.791 li
331.821 503.463 li
342.567 507.761 li
353.851 518.239 li
365.403 527.104 li
377.224 553.701 li
377.224 552.895 li
365.403 526.298 li
353.851 517.164 li
342.567 506.418 li
331.821 501.582 li
321.612 491.91 li
311.672 482.776 li
302 479.284 li
293.403 477.403 li
285.075 465.045 li
276.746 462.627 li
268.418 463.433 li
260.09 457.522 li
251.761 457.791 li
243.433 460.209 li
235.105 459.134 li
226.776 459.672 li
218.716 465.313 li
210.388 475.791 li
202.06 483.851 li
193.731 497.552 li
185.403 516.09 li
177.075 522.269 li
168.746 574.388 li
163.91 701.194 li
.696254 .631098 .620691 .585717 cmyk
currentcolor
/705973576.0 
<<
/ID /705973576.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 96 4 ] 
/XStep 96 
/YStep 4 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
96 0 li
96 4 li
0 4 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[1 3 ] 0 dsh
true sadj
{2 4 mo
98 4 li
0 3 mo
96 3 li
2 2 mo
98 2 li
0 1 mo
96 1 li
}exec
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/705973576.0 /Pattern get_res
[.80597 0 0 -.80597 32 792 ]make_pattern set_pattern
ef
2 vmreclaim
.80597 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
163.91 701.194 mo
168.746 574.388 li
168.746 574.388 mo
177.075 522.269 li
185.403 516.089 li
193.731 497.552 li
202.06 483.851 li
210.388 475.791 li
218.716 465.313 li
226.776 459.672 li
235.105 459.134 li
243.433 460.209 li
251.761 457.791 li
260.09 457.522 li
268.418 463.433 li
276.746 462.627 li
285.075 465.045 li
293.403 477.403 li
302 479.284 li
311.672 482.776 li
321.612 491.91 li
331.821 501.582 li
342.567 506.418 li
353.851 517.164 li
365.403 526.298 li
377.224 552.895 li
171.97 701.194 mo
177.075 543.761 li
177.075 543.761 mo
185.403 539.194 li
193.731 511.254 li
202.06 493.791 li
210.388 484.119 li
218.716 471.492 li
226.776 464.776 li
235.105 464.239 li
243.433 465.045 li
251.761 462.09 li
260.09 461.015 li
268.418 467.463 li
276.746 465.582 li
285.075 467.731 li
293.403 480.358 li
302 481.701 li
311.672 484.925 li
321.612 493.791 li
331.821 503.463 li
342.567 507.761 li
353.851 518.239 li
365.403 527.104 li
377.224 553.701 li
false sop
.196414 .15378 .15378 3.0518e-05 cmyk
@
162.567 701.194 mo
164.716 701.194 li
166.866 701.194 mo
164.716 701.194 li
170.896 701.194 mo
173.045 701.194 li
168.746 699.582 mo
168.746 560.955 li
175.194 533.552 mo
173.045 533.552 li
179.224 533.552 mo
181.373 533.552 li
177.075 531.94 mo
177.075 519.582 li
177.075 535.433 mo
177.075 559.612 li
183.254 528.179 mo
181.373 528.179 li
187.552 528.179 mo
189.433 528.179 li
185.403 526.298 mo
185.403 514.746 li
185.403 529.791 mo
185.403 552.089 li
191.582 505.343 mo
189.433 505.343 li
195.612 505.343 mo
197.761 505.343 li
193.731 503.463 mo
193.731 497.284 li
193.731 506.955 mo
193.731 515.821 li
199.91 489.492 mo
197.761 489.492 li
203.94 489.492 mo
206.09 489.492 li
202.06 487.881 mo
202.06 484.119 li
202.06 491.373 mo
202.06 496.209 li
208.239 480.627 mo
206.09 480.627 li
212.269 480.627 mo
214.418 480.627 li
210.388 479.015 mo
210.388 476.06 li
210.388 482.239 mo
210.388 486 li
216.567 468.806 mo
214.418 468.806 li
220.597 468.806 mo
222.746 468.806 li
218.716 467.194 mo
218.716 465.582 li
218.716 470.687 mo
218.716 472.567 li
224.896 462.627 mo
222.746 462.627 li
228.925 462.627 mo
231.075 462.627 li
226.776 461.015 mo
226.776 459.94 li
226.776 464.507 mo
226.776 465.851 li
233.224 462.09 mo
231.075 462.09 li
237.254 462.09 mo
239.403 462.09 li
235.105 460.478 mo
235.105 459.403 li
235.105 463.701 mo
235.105 465.045 li
241.552 463.164 mo
239.403 463.164 li
245.582 463.164 mo
247.731 463.164 li
243.433 461.284 mo
243.433 460.209 li
243.433 464.776 mo
243.433 466.119 li
249.881 460.478 mo
247.731 460.478 li
253.91 460.478 mo
256.06 460.478 li
251.761 458.597 mo
251.761 457.791 li
251.761 462.09 mo
251.761 463.164 li
257.94 459.672 mo
256.06 459.672 li
262.239 459.672 mo
264.388 459.672 li
260.09 457.791 mo
260.09 457.254 li
260.09 461.284 mo
260.09 462.09 li
266.269 465.851 mo
264.388 465.851 li
270.567 465.851 mo
272.448 465.851 li
268.418 464.239 mo
268.418 463.164 li
268.418 467.463 mo
268.418 468.806 li
274.597 464.507 mo
272.448 464.507 li
278.627 464.507 mo
280.776 464.507 li
276.746 462.627 mo
276.746 462.09 li
276.746 466.119 mo
276.746 466.925 li
282.925 466.657 mo
280.776 466.657 li
286.955 466.657 mo
289.104 466.657 li
285.075 465.045 mo
285.075 464.239 li
285.075 468.269 mo
285.075 469.343 li
291.254 479.284 mo
289.104 479.284 li
295.284 479.284 mo
297.433 479.284 li
293.403 477.403 mo
293.403 476.06 li
293.403 480.895 mo
293.403 482.507 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
299.851 480.627 mo
297.433 480.627 li
304.149 480.627 mo
306.567 480.627 li
302 479.015 mo
302 477.94 li
302 482.507 mo
302 483.582 li
309.522 484.119 mo
306.567 484.119 li
313.552 484.119 mo
316.508 484.119 li
311.672 482.507 mo
311.672 481.433 li
311.672 485.731 mo
311.672 487.075 li
319.463 493.254 mo
316.508 493.254 li
323.493 493.254 mo
326.448 493.254 li
321.612 491.373 mo
321.612 490.298 li
321.612 494.866 mo
321.612 496.478 li
329.94 502.657 mo
326.448 502.657 li
333.97 502.657 mo
337.194 502.657 li
331.821 501.045 mo
331.821 499.701 li
331.821 504.537 mo
331.821 506.149 li
340.687 507.224 mo
337.194 507.224 li
344.716 507.224 mo
348.209 507.224 li
342.567 505.612 mo
342.567 504 li
342.567 508.836 mo
342.567 510.716 li
351.97 517.701 mo
348.209 517.701 li
356 517.701 mo
359.761 517.701 li
353.851 516.089 mo
353.851 514.478 li
353.851 519.313 mo
353.851 521.463 li
363.522 526.836 mo
359.761 526.836 li
367.552 526.836 mo
371.313 526.836 li
365.403 524.955 mo
365.403 523.075 li
365.403 528.448 mo
365.403 530.866 li
375.075 553.433 mo
371.313 553.433 li
379.105 553.433 mo
382.866 553.433 li
377.224 551.821 mo
377.224 547.791 li
377.224 555.045 mo
377.224 560.418 li
386.627 549.134 mo
382.866 549.134 li
390.925 549.134 mo
394.687 549.134 li
388.776 547.522 mo
388.776 544.567 li
388.776 550.746 mo
388.776 554.507 li
398.448 572.507 mo
394.687 572.507 li
402.478 572.507 mo
406.239 572.507 li
400.328 570.895 mo
400.328 566.06 li
400.328 574.388 mo
400.328 581.104 li
410.269 586.746 mo
406.239 586.746 li
414.567 586.746 mo
418.597 586.746 li
412.418 584.866 mo
412.418 578.955 li
412.418 588.358 mo
412.418 596.687 li
422.896 594 mo
418.597 594 li
426.925 594 mo
431.224 594 li
424.776 592.388 mo
424.776 585.94 li
424.776 595.612 mo
424.776 605.015 li
441.433 618.448 mo
431.224 618.448 li
445.463 618.448 mo
455.94 618.448 li
443.582 616.836 mo
443.582 610.388 li
443.582 620.328 mo
443.582 630 li
495.97 673.522 mo
455.94 673.522 li
500 673.522 mo
538.955 673.522 li
497.851 671.91 mo
497.851 663.313 li
497.851 675.134 mo
497.851 688.836 li
@
493.687 672.134 mo
502.015 672.134 li
495.277 677.03 li
497.851 669.109 li
500.424 677.03 li
.750179 .679652 .670191 .901488 cmyk
f
439.418 617.059 mo
447.746 617.059 li
441.008 621.955 li
443.582 614.034 li
446.156 621.955 li
f
420.612 592.612 mo
428.94 592.612 li
422.202 597.508 li
424.776 589.586 li
427.35 597.508 li
f
408.254 585.358 mo
416.582 585.358 li
409.844 590.254 li
412.418 582.333 li
414.992 590.254 li
f
396.164 571.119 mo
404.492 571.119 li
397.755 576.015 li
400.328 568.094 li
402.902 576.015 li
f
384.612 547.746 mo
392.94 547.746 li
386.202 552.642 li
388.776 544.721 li
391.35 552.642 li
f
373.06 552.044 mo
381.388 552.044 li
374.65 556.94 li
377.224 549.019 li
379.798 556.94 li
f
361.239 525.447 mo
369.567 525.447 li
362.829 530.343 li
365.403 522.422 li
367.977 530.343 li
f
349.687 516.313 mo
358.015 516.313 li
351.277 521.209 li
353.851 513.288 li
356.424 521.209 li
f
338.403 505.836 mo
346.731 505.836 li
339.993 510.732 li
342.567 502.81 li
345.141 510.732 li
f
327.657 501.268 mo
335.985 501.268 li
329.247 506.164 li
331.821 498.243 li
334.395 506.164 li
f
317.448 491.865 mo
325.776 491.865 li
319.038 496.761 li
321.612 488.84 li
324.186 496.761 li
f
307.508 482.731 mo
315.836 482.731 li
309.098 487.627 li
311.672 479.706 li
314.245 487.627 li
f
297.836 479.238 mo
306.164 479.238 li
299.426 484.134 li
302 476.213 li
304.574 484.134 li
f
289.239 477.895 mo
297.567 477.895 li
290.829 482.791 li
293.403 474.87 li
295.977 482.791 li
f
280.91 465.268 mo
289.239 465.268 li
282.501 470.164 li
285.075 462.243 li
287.648 470.164 li
f
272.582 463.119 mo
280.91 463.119 li
274.172 468.015 li
276.746 460.094 li
279.32 468.015 li
f
264.254 464.462 mo
272.582 464.462 li
265.844 469.358 li
268.418 461.437 li
270.992 469.358 li
f
255.925 458.283 mo
264.254 458.283 li
257.516 463.179 li
260.09 455.258 li
262.663 463.179 li
f
247.597 459.089 mo
255.925 459.089 li
249.188 463.985 li
251.761 456.064 li
254.335 463.985 li
f
239.269 461.776 mo
247.597 461.776 li
240.859 466.672 li
243.433 458.751 li
246.007 466.672 li
f
230.94 460.701 mo
239.269 460.701 li
232.531 465.597 li
235.105 457.676 li
237.678 465.597 li
f
222.612 461.238 mo
230.94 461.238 li
224.202 466.134 li
226.776 458.213 li
229.35 466.134 li
f
214.552 467.418 mo
222.881 467.418 li
216.143 472.314 li
218.716 464.392 li
221.29 472.314 li
f
206.224 479.238 mo
214.552 479.238 li
207.814 484.134 li
210.388 476.213 li
212.962 484.134 li
f
197.895 488.104 mo
206.224 488.104 li
199.486 493 li
202.06 485.079 li
204.633 493 li
f
189.567 503.955 mo
197.895 503.955 li
191.158 508.851 li
193.731 500.93 li
196.305 508.851 li
f
181.239 526.791 mo
189.567 526.791 li
182.829 531.687 li
185.403 523.766 li
187.977 531.687 li
f
172.91 532.164 mo
181.239 532.164 li
174.501 537.06 li
177.075 529.139 li
179.648 537.06 li
f
162.03 701.194 mo
164.716 701.194 li
167.403 701.194 mo
164.716 701.194 li
170.358 701.194 mo
173.045 701.194 li
168.746 700.119 mo
168.746 560.955 li
175.463 533.552 mo
173.045 533.552 li
178.687 533.552 mo
181.373 533.552 li
177.075 532.478 mo
177.075 519.582 li
177.075 534.896 mo
177.075 559.612 li
183.791 528.179 mo
181.373 528.179 li
187.015 528.179 mo
189.433 528.179 li
185.403 526.836 mo
185.403 514.746 li
185.403 529.254 mo
185.403 552.089 li
192.119 505.343 mo
189.433 505.343 li
195.343 505.343 mo
197.761 505.343 li
193.731 504 mo
193.731 497.284 li
193.731 506.418 mo
193.731 515.821 li
200.448 489.492 mo
197.761 489.492 li
203.403 489.492 mo
206.09 489.492 li
202.06 488.418 mo
202.06 484.119 li
202.06 490.836 mo
202.06 496.209 li
208.776 480.627 mo
206.09 480.627 li
211.731 480.627 mo
214.418 480.627 li
210.388 479.284 mo
210.388 476.06 li
210.388 481.97 mo
210.388 486 li
217.105 468.806 mo
214.418 468.806 li
220.06 468.806 mo
222.746 468.806 li
218.716 467.731 mo
218.716 465.582 li
218.716 470.149 mo
218.716 472.567 li
225.433 462.627 mo
222.746 462.627 li
228.388 462.627 mo
231.075 462.627 li
226.776 461.284 mo
226.776 459.94 li
226.776 463.97 mo
226.776 465.851 li
233.761 462.09 mo
231.075 462.09 li
236.716 462.09 mo
239.403 462.09 li
235.105 460.746 mo
235.105 459.403 li
235.105 463.433 mo
235.105 465.045 li
242.09 463.164 mo
239.403 463.164 li
245.045 463.164 mo
247.731 463.164 li
243.433 461.821 mo
243.433 460.209 li
243.433 464.239 mo
243.433 466.119 li
250.149 460.478 mo
247.731 460.478 li
253.373 460.478 mo
256.06 460.478 li
251.761 459.134 mo
251.761 457.791 li
251.761 461.552 mo
251.761 463.164 li
258.478 459.672 mo
256.06 459.672 li
261.702 459.672 mo
264.388 459.672 li
260.09 458.328 mo
260.09 457.254 li
260.09 461.015 mo
260.09 462.09 li
266.806 465.851 mo
264.388 465.851 li
270.03 465.851 mo
272.448 465.851 li
268.418 464.507 mo
268.418 463.164 li
268.418 467.194 mo
268.418 468.806 li
275.134 464.507 mo
272.448 464.507 li
278.358 464.507 mo
280.776 464.507 li
276.746 463.164 mo
276.746 462.09 li
276.746 465.582 mo
276.746 466.925 li
283.463 466.657 mo
280.776 466.657 li
286.418 466.657 mo
289.104 466.657 li
285.075 465.313 mo
285.075 464.239 li
285.075 468 mo
285.075 469.343 li
291.791 479.284 mo
289.104 479.284 li
294.746 479.284 mo
297.433 479.284 li
293.403 477.94 mo
293.403 476.06 li
293.403 480.358 mo
293.403 482.507 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
300.388 480.627 mo
297.433 480.627 li
303.612 480.627 mo
306.567 480.627 li
302 479.552 mo
302 477.94 li
302 481.97 mo
302 483.582 li
310.06 484.119 mo
306.567 484.119 li
313.015 484.119 mo
316.508 484.119 li
311.672 482.776 mo
311.672 481.433 li
311.672 485.463 mo
311.672 487.075 li
320 493.254 mo
316.508 493.254 li
322.955 493.254 mo
326.448 493.254 li
321.612 491.91 mo
321.612 490.298 li
321.612 494.328 mo
321.612 496.478 li
330.478 502.657 mo
326.448 502.657 li
333.433 502.657 mo
337.194 502.657 li
331.821 501.582 mo
331.821 499.701 li
331.821 504 mo
331.821 506.149 li
341.224 507.224 mo
337.194 507.224 li
344.179 507.224 mo
348.209 507.224 li
342.567 505.881 mo
342.567 504 li
342.567 508.567 mo
342.567 510.716 li
352.239 517.701 mo
348.209 517.701 li
355.463 517.701 mo
359.761 517.701 li
353.851 516.358 mo
353.851 514.478 li
353.851 519.045 mo
353.851 521.463 li
364.06 526.836 mo
359.761 526.836 li
367.015 526.836 mo
371.313 526.836 li
365.403 525.492 mo
365.403 523.075 li
365.403 527.91 mo
365.403 530.866 li
375.612 553.433 mo
371.313 553.433 li
378.567 553.433 mo
382.866 553.433 li
377.224 552.089 mo
377.224 547.791 li
377.224 554.776 mo
377.224 560.418 li
387.164 549.134 mo
382.866 549.134 li
390.388 549.134 mo
394.687 549.134 li
388.776 547.791 mo
388.776 544.567 li
388.776 550.478 mo
388.776 554.507 li
398.985 572.507 mo
394.687 572.507 li
401.94 572.507 mo
406.239 572.507 li
400.328 571.433 mo
400.328 566.06 li
400.328 573.851 mo
400.328 581.104 li
410.806 586.746 mo
406.239 586.746 li
414.03 586.746 mo
418.597 586.746 li
412.418 585.403 mo
412.418 578.955 li
412.418 587.821 mo
412.418 596.687 li
423.433 594 mo
418.597 594 li
426.388 594 mo
431.224 594 li
424.776 592.657 mo
424.776 585.94 li
424.776 595.343 mo
424.776 605.015 li
441.97 618.448 mo
431.224 618.448 li
445.194 618.448 mo
455.94 618.448 li
443.582 617.373 mo
443.582 610.388 li
443.582 619.791 mo
443.582 630 li
496.508 673.522 mo
455.94 673.522 li
499.463 673.522 mo
538.955 673.522 li
497.851 672.179 mo
497.851 663.313 li
497.851 674.866 mo
497.851 688.836 li
@
495.164 672.627 mo
500.537 672.627 li
496.19 675.786 li
497.851 670.675 li
499.511 675.786 li
f
440.896 617.553 mo
446.269 617.553 li
441.922 620.711 li
443.582 615.6 li
445.242 620.711 li
f
422.09 593.105 mo
427.463 593.105 li
423.116 596.263 li
424.776 591.152 li
426.436 596.263 li
f
409.731 585.851 mo
415.104 585.851 li
410.758 589.009 li
412.418 583.898 li
414.078 589.009 li
f
397.642 571.612 mo
403.015 571.612 li
398.668 574.771 li
400.328 569.66 li
401.989 574.771 li
f
386.09 548.239 mo
391.463 548.239 li
387.116 551.397 li
388.776 546.287 li
390.436 551.397 li
f
374.537 552.538 mo
379.91 552.538 li
375.564 555.696 li
377.224 550.585 li
378.884 555.696 li
f
362.716 525.941 mo
368.09 525.941 li
363.743 529.099 li
365.403 523.988 li
367.063 529.099 li
f
351.164 516.806 mo
356.537 516.806 li
352.19 519.965 li
353.851 514.854 li
355.511 519.965 li
f
339.881 506.329 mo
345.254 506.329 li
340.907 509.487 li
342.567 504.376 li
344.228 509.487 li
f
329.134 501.762 mo
334.508 501.762 li
330.161 504.92 li
331.821 499.809 li
333.481 504.92 li
f
318.925 492.359 mo
324.298 492.359 li
319.952 495.517 li
321.612 490.406 li
323.272 495.517 li
f
308.985 483.224 mo
314.358 483.224 li
310.011 486.383 li
311.672 481.272 li
313.332 486.383 li
f
299.313 479.732 mo
304.687 479.732 li
300.34 482.89 li
302 477.779 li
303.66 482.89 li
f
290.716 478.388 mo
296.09 478.388 li
291.743 481.547 li
293.403 476.436 li
295.063 481.547 li
f
282.388 465.762 mo
287.761 465.762 li
283.414 468.92 li
285.075 463.809 li
286.735 468.92 li
f
274.06 463.612 mo
279.433 463.612 li
275.086 466.771 li
276.746 461.66 li
278.407 466.771 li
f
265.731 464.956 mo
271.104 464.956 li
266.758 468.114 li
268.418 463.003 li
270.078 468.114 li
f
257.403 458.776 mo
262.776 458.776 li
258.429 461.935 li
260.09 456.824 li
261.75 461.935 li
f
249.075 459.582 mo
254.448 459.582 li
250.101 462.741 li
251.761 457.63 li
253.421 462.741 li
f
240.746 462.269 mo
246.119 462.269 li
241.773 465.427 li
243.433 460.316 li
245.093 465.427 li
f
232.418 461.194 mo
237.791 461.194 li
233.444 464.353 li
235.105 459.242 li
236.765 464.353 li
f
224.09 461.732 mo
229.463 461.732 li
225.116 464.89 li
226.776 459.779 li
228.436 464.89 li
f
216.03 467.911 mo
221.403 467.911 li
217.056 471.069 li
218.716 465.958 li
220.377 471.069 li
f
207.702 479.732 mo
213.075 479.732 li
208.728 482.89 li
210.388 477.779 li
212.048 482.89 li
f
199.373 488.597 mo
204.746 488.597 li
200.399 491.756 li
202.06 486.645 li
203.72 491.756 li
f
191.045 504.448 mo
196.418 504.448 li
192.071 507.606 li
193.731 502.496 li
195.392 507.606 li
f
182.716 527.284 mo
188.09 527.284 li
183.743 530.442 li
185.403 525.331 li
187.063 530.442 li
f
174.388 532.657 mo
179.761 532.657 li
175.414 535.815 li
177.075 530.704 li
178.735 535.815 li
f
162.03 701.194 mo
164.716 701.194 li
167.403 701.194 mo
164.716 701.194 li
170.358 701.194 mo
173.045 701.194 li
168.746 700.119 mo
168.746 560.955 li
175.463 533.552 mo
173.045 533.552 li
178.687 533.552 mo
181.373 533.552 li
177.075 532.478 mo
177.075 519.582 li
177.075 534.896 mo
177.075 559.612 li
183.791 528.179 mo
181.373 528.179 li
187.015 528.179 mo
189.433 528.179 li
185.403 526.836 mo
185.403 514.746 li
185.403 529.254 mo
185.403 552.089 li
192.119 505.343 mo
189.433 505.343 li
195.343 505.343 mo
197.761 505.343 li
193.731 504 mo
193.731 497.284 li
193.731 506.418 mo
193.731 515.821 li
200.448 489.492 mo
197.761 489.492 li
203.403 489.492 mo
206.09 489.492 li
202.06 488.418 mo
202.06 484.119 li
202.06 490.836 mo
202.06 496.209 li
208.776 480.627 mo
206.09 480.627 li
211.731 480.627 mo
214.418 480.627 li
210.388 479.284 mo
210.388 476.06 li
210.388 481.97 mo
210.388 486 li
217.105 468.806 mo
214.418 468.806 li
220.06 468.806 mo
222.746 468.806 li
218.716 467.731 mo
218.716 465.582 li
218.716 470.149 mo
218.716 472.567 li
225.433 462.627 mo
222.746 462.627 li
228.388 462.627 mo
231.075 462.627 li
226.776 461.284 mo
226.776 459.94 li
226.776 463.97 mo
226.776 465.851 li
233.761 462.09 mo
231.075 462.09 li
236.716 462.09 mo
239.403 462.09 li
235.105 460.746 mo
235.105 459.403 li
235.105 463.433 mo
235.105 465.045 li
242.09 463.164 mo
239.403 463.164 li
245.045 463.164 mo
247.731 463.164 li
243.433 461.821 mo
243.433 460.209 li
243.433 464.239 mo
243.433 466.119 li
250.149 460.478 mo
247.731 460.478 li
253.373 460.478 mo
256.06 460.478 li
251.761 459.134 mo
251.761 457.791 li
251.761 461.552 mo
251.761 463.164 li
258.478 459.672 mo
256.06 459.672 li
261.702 459.672 mo
264.388 459.672 li
260.09 458.328 mo
260.09 457.254 li
260.09 461.015 mo
260.09 462.09 li
266.806 465.851 mo
264.388 465.851 li
270.03 465.851 mo
272.448 465.851 li
268.418 464.507 mo
268.418 463.164 li
268.418 467.194 mo
268.418 468.806 li
275.134 464.507 mo
272.448 464.507 li
278.358 464.507 mo
280.776 464.507 li
276.746 463.164 mo
276.746 462.09 li
276.746 465.582 mo
276.746 466.925 li
283.463 466.657 mo
280.776 466.657 li
286.418 466.657 mo
289.104 466.657 li
285.075 465.313 mo
285.075 464.239 li
285.075 468 mo
285.075 469.343 li
291.791 479.284 mo
289.104 479.284 li
294.746 479.284 mo
297.433 479.284 li
293.403 477.94 mo
293.403 476.06 li
293.403 480.358 mo
293.403 482.507 li
.750179 .679652 .670191 .901488 cmyk
@
300.388 480.627 mo
297.433 480.627 li
303.612 480.627 mo
306.567 480.627 li
302 479.552 mo
302 477.94 li
302 481.97 mo
302 483.582 li
310.06 484.119 mo
306.567 484.119 li
313.015 484.119 mo
316.508 484.119 li
311.672 482.776 mo
311.672 481.433 li
311.672 485.463 mo
311.672 487.075 li
320 493.254 mo
316.508 493.254 li
322.955 493.254 mo
326.448 493.254 li
321.612 491.91 mo
321.612 490.298 li
321.612 494.328 mo
321.612 496.478 li
330.478 502.657 mo
326.448 502.657 li
333.433 502.657 mo
337.194 502.657 li
331.821 501.582 mo
331.821 499.701 li
331.821 504 mo
331.821 506.149 li
341.224 507.224 mo
337.194 507.224 li
344.179 507.224 mo
348.209 507.224 li
342.567 505.881 mo
342.567 504 li
342.567 508.567 mo
342.567 510.716 li
352.239 517.701 mo
348.209 517.701 li
355.463 517.701 mo
359.761 517.701 li
353.851 516.358 mo
353.851 514.478 li
353.851 519.045 mo
353.851 521.463 li
364.06 526.836 mo
359.761 526.836 li
367.015 526.836 mo
371.313 526.836 li
365.403 525.492 mo
365.403 523.075 li
365.403 527.91 mo
365.403 530.866 li
375.612 553.433 mo
371.313 553.433 li
378.567 553.433 mo
382.866 553.433 li
377.224 552.089 mo
377.224 547.791 li
377.224 554.776 mo
377.224 560.418 li
387.164 549.134 mo
382.866 549.134 li
390.388 549.134 mo
394.687 549.134 li
388.776 547.791 mo
388.776 544.567 li
388.776 550.478 mo
388.776 554.507 li
398.985 572.507 mo
394.687 572.507 li
401.94 572.507 mo
406.239 572.507 li
400.328 571.433 mo
400.328 566.06 li
400.328 573.851 mo
400.328 581.104 li
410.806 586.746 mo
406.239 586.746 li
414.03 586.746 mo
418.597 586.746 li
412.418 585.403 mo
412.418 578.955 li
412.418 587.821 mo
412.418 596.687 li
423.433 594 mo
418.597 594 li
426.388 594 mo
431.224 594 li
424.776 592.657 mo
424.776 585.94 li
424.776 595.343 mo
424.776 605.015 li
441.97 618.448 mo
431.224 618.448 li
445.194 618.448 mo
455.94 618.448 li
443.582 617.373 mo
443.582 610.388 li
443.582 619.791 mo
443.582 630 li
496.508 673.522 mo
455.94 673.522 li
499.463 673.522 mo
538.955 673.522 li
497.851 672.179 mo
497.851 663.313 li
497.851 674.866 mo
497.851 688.836 li
@
495.164 672.627 mo
500.537 672.627 li
496.19 675.786 li
497.851 670.675 li
499.511 675.786 li
3.0518e-05 .990631 1 .000396735 cmyk
f
440.896 617.553 mo
446.269 617.553 li
441.922 620.711 li
443.582 615.6 li
445.242 620.711 li
f
422.09 593.105 mo
427.463 593.105 li
423.116 596.263 li
424.776 591.152 li
426.436 596.263 li
f
409.731 585.851 mo
415.104 585.851 li
410.758 589.009 li
412.418 583.898 li
414.078 589.009 li
f
397.642 571.612 mo
403.015 571.612 li
398.668 574.771 li
400.328 569.66 li
401.989 574.771 li
f
386.09 548.239 mo
391.463 548.239 li
387.116 551.397 li
388.776 546.287 li
390.436 551.397 li
f
374.537 552.538 mo
379.91 552.538 li
375.564 555.696 li
377.224 550.585 li
378.884 555.696 li
f
362.716 525.941 mo
368.09 525.941 li
363.743 529.099 li
365.403 523.988 li
367.063 529.099 li
f
351.164 516.806 mo
356.537 516.806 li
352.19 519.965 li
353.851 514.854 li
355.511 519.965 li
f
339.881 506.329 mo
345.254 506.329 li
340.907 509.487 li
342.567 504.376 li
344.228 509.487 li
f
329.134 501.762 mo
334.508 501.762 li
330.161 504.92 li
331.821 499.809 li
333.481 504.92 li
f
318.925 492.359 mo
324.298 492.359 li
319.952 495.517 li
321.612 490.406 li
323.272 495.517 li
f
308.985 483.224 mo
314.358 483.224 li
310.011 486.383 li
311.672 481.272 li
313.332 486.383 li
f
299.313 479.732 mo
304.687 479.732 li
300.34 482.89 li
302 477.779 li
303.66 482.89 li
f
290.716 478.388 mo
296.09 478.388 li
291.743 481.547 li
293.403 476.436 li
295.063 481.547 li
f
282.388 465.762 mo
287.761 465.762 li
283.414 468.92 li
285.075 463.809 li
286.735 468.92 li
f
274.06 463.612 mo
279.433 463.612 li
275.086 466.771 li
276.746 461.66 li
278.407 466.771 li
f
265.731 464.956 mo
271.104 464.956 li
266.758 468.114 li
268.418 463.003 li
270.078 468.114 li
f
257.403 458.776 mo
262.776 458.776 li
258.429 461.935 li
260.09 456.824 li
261.75 461.935 li
f
249.075 459.582 mo
254.448 459.582 li
250.101 462.741 li
251.761 457.63 li
253.421 462.741 li
f
240.746 462.269 mo
246.119 462.269 li
241.773 465.427 li
243.433 460.316 li
245.093 465.427 li
f
232.418 461.194 mo
237.791 461.194 li
233.444 464.353 li
235.105 459.242 li
236.765 464.353 li
f
224.09 461.732 mo
229.463 461.732 li
225.116 464.89 li
226.776 459.779 li
228.436 464.89 li
f
216.03 467.911 mo
221.403 467.911 li
217.056 471.069 li
218.716 465.958 li
220.377 471.069 li
f
207.702 479.732 mo
213.075 479.732 li
208.728 482.89 li
210.388 477.779 li
212.048 482.89 li
f
199.373 488.597 mo
204.746 488.597 li
200.399 491.756 li
202.06 486.645 li
203.72 491.756 li
f
191.045 504.448 mo
196.418 504.448 li
192.071 507.606 li
193.731 502.496 li
195.392 507.606 li
f
182.716 527.284 mo
188.09 527.284 li
183.743 530.442 li
185.403 525.331 li
187.063 530.442 li
f
174.388 532.657 mo
179.761 532.657 li
175.414 535.815 li
177.075 530.704 li
178.735 535.815 li
f
215.224 601.254 mo
217.642 701.194 li
225.164 701.194 li
225.702 454.836 li
226.508 467.731 li
227.313 450.806 li
228.657 469.343 li
230.269 444.09 li
232.418 442.478 li
234.836 435.224 li
237.791 413.463 li
241.552 417.492 li
246.119 414.806 li
251.761 418.298 li
259.284 428.776 li
268.418 440.866 li
279.702 448.657 li
293.672 462.09 li
293.672 461.821 li
279.702 448.119 li
268.418 439.522 li
259.284 425.821 li
251.761 413.731 li
246.119 407.552 li
241.552 406.478 li
237.791 401.373 li
234.836 412.657 li
232.418 415.343 li
230.269 416.955 li
228.657 427.97 li
227.313 424.746 li
226.508 433.612 li
225.702 431.731 li
224.895 526.298 li
224.09 495.134 li
223.552 701.194 li
222.746 701.194 li
221.94 546.179 li
219.791 584.328 li
215.224 562.836 li
215.224 601.254 li
.696254 .631098 .620691 .585717 cmyk
currentcolor
/26168368.0 
<<
/ID /26168368.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 96 4 ] 
/XStep 96 
/YStep 4 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
96 0 li
96 4 li
0 4 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[1 3 ] 0 dsh
true sadj
{2 4 mo
98 4 li
0 3 mo
96 3 li
2 2 mo
98 2 li
0 1 mo
96 1 li
}exec
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/26168368.0 /Pattern get_res
[.80597 0 0 -.80597 32 792 ]make_pattern set_pattern
ef
2 vmreclaim
.80597 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
215.224 562.836 mo
219.791 584.328 li
221.94 546.179 li
222.746 701.194 li
223.552 701.194 mo
224.09 495.134 li
224.09 495.134 mo
224.896 526.298 li
225.702 431.731 li
226.507 433.612 li
227.313 424.746 li
228.657 427.97 li
230.269 416.955 li
232.418 415.343 li
234.836 412.657 li
237.791 401.373 li
241.552 406.478 li
246.119 407.552 li
251.761 413.731 li
259.284 425.821 li
268.418 439.522 li
279.702 448.119 li
293.672 461.821 li
215.224 601.254 mo
217.642 701.194 li
225.164 701.194 mo
225.702 454.836 li
225.702 454.836 mo
226.507 467.731 li
227.313 450.806 li
228.657 469.343 li
230.269 444.09 li
232.418 442.478 li
234.836 435.224 li
237.791 413.463 li
241.552 417.492 li
246.119 414.806 li
251.761 418.298 li
259.284 428.776 li
268.418 440.866 li
279.702 448.657 li
293.672 462.09 li
false sop
.196414 .15378 .15378 3.0518e-05 cmyk
@
212.806 573.851 mo
212 573.851 li
217.91 573.851 mo
218.716 573.851 li
215.224 571.164 mo
215.224 542.955 li
215.224 576.269 mo
215.224 701.194 li
219.791 698.776 mo
219.791 531.403 li
221.94 698.776 mo
221.94 510.985 li
223.284 698.776 mo
223.284 533.821 li
224.09 516.089 mo
224.09 475.522 li
224.09 521.194 mo
224.09 701.194 li
224.896 698.776 mo
224.896 490.03 li
225.702 436.836 mo
225.702 426.358 li
225.702 441.94 mo
225.702 462.09 li
226.507 441.403 mo
226.507 428.776 li
226.507 446.507 mo
226.507 474.985 li
227.313 430.657 mo
227.313 420.985 li
227.313 435.761 mo
227.313 453.761 li
228.657 437.104 mo
228.657 428.507 li
228.657 442.209 mo
228.657 457.522 li
230.269 423.134 mo
230.269 417.492 li
230.269 428.239 mo
230.269 437.104 li
232.418 421.522 mo
232.418 417.224 li
232.418 426.627 mo
232.418 432.806 li
234.836 417.761 mo
234.836 414.269 li
234.836 422.866 mo
234.836 427.97 li
237.791 403.254 mo
237.791 402.448 li
237.791 408.358 mo
237.791 409.97 li
241.552 408.09 mo
241.552 407.284 li
241.552 413.194 mo
241.552 414.269 li
246.119 408.09 mo
246.119 407.821 li
246.119 413.194 mo
246.119 413.463 li
249.343 415.612 mo
248.537 415.612 li
254.448 415.612 mo
255.254 415.612 li
256.597 426.895 mo
255.254 426.895 li
261.702 426.895 mo
263.313 426.895 li
265.731 440.06 mo
263.313 440.06 li
270.836 440.06 mo
273.254 440.06 li
277.015 448.388 mo
273.254 448.388 li
282.119 448.388 mo
285.881 448.388 li
291.254 461.821 mo
285.881 461.821 li
296.358 461.821 mo
301.731 461.821 li
293.672 464.507 mo
293.672 464.776 li
308.985 473.642 mo
301.731 473.642 li
314.09 473.642 mo
321.612 473.642 li
311.672 471.224 mo
311.672 470.955 li
311.672 476.328 mo
311.672 476.866 li
331.552 490.567 mo
321.612 490.567 li
336.657 490.567 mo
346.328 490.567 li
333.97 488.149 mo
333.97 487.343 li
333.97 493.254 mo
333.97 494.328 li
359.224 531.94 mo
346.328 531.94 li
364.328 531.94 mo
377.224 531.94 li
361.91 529.254 mo
361.91 526.298 li
361.91 534.358 mo
361.91 538.657 li
394.149 558.537 mo
377.224 558.537 li
399.254 558.537 mo
416.179 558.537 li
396.567 556.119 mo
396.567 551.284 li
396.567 561.224 mo
396.567 568.478 li
437.672 595.612 mo
416.179 595.612 li
442.776 595.612 mo
464.269 595.612 li
440.09 593.194 mo
440.09 584.06 li
440.09 598.298 mo
440.09 614.149 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
217.867 573.872 mo
217.867 572.389 216.664 571.186 215.181 571.186 cv
213.698 571.186 212.494 572.389 212.494 573.872 cv
212.494 575.355 213.698 576.559 215.181 576.559 cv
216.664 576.559 217.867 575.355 217.867 573.872 cv
.750179 .679652 .670191 .901488 cmyk
ef
226.765 518.744 mo
226.765 517.261 225.562 516.057 224.079 516.057 cv
222.596 516.057 221.392 517.261 221.392 518.744 cv
221.392 520.227 222.596 521.43 224.079 521.43 cv
225.562 521.43 226.765 520.227 226.765 518.744 cv
ef
442.765 595.601 mo
442.765 594.118 441.562 592.915 440.079 592.915 cv
438.596 592.915 437.392 594.118 437.392 595.601 cv
437.392 597.084 438.596 598.288 440.079 598.288 cv
441.562 598.288 442.765 597.084 442.765 595.601 cv
ef
399.243 558.527 mo
399.243 557.044 398.039 555.84 396.556 555.84 cv
395.073 555.84 393.87 557.044 393.87 558.527 cv
393.87 560.01 395.073 561.213 396.556 561.213 cv
398.039 561.213 399.243 560.01 399.243 558.527 cv
ef
364.618 531.962 mo
364.618 530.479 363.415 529.275 361.932 529.275 cv
360.449 529.275 359.245 530.479 359.245 531.962 cv
359.245 533.445 360.449 534.648 361.932 534.648 cv
363.415 534.648 364.618 533.445 364.618 531.962 cv
ef
336.635 490.567 mo
336.635 489.084 335.432 487.881 333.949 487.881 cv
332.466 487.881 331.262 489.084 331.262 490.567 cv
331.262 492.05 332.466 493.254 333.949 493.254 cv
335.432 493.254 336.635 492.05 336.635 490.567 cv
ef
314.326 473.61 mo
314.326 472.127 313.122 470.923 311.639 470.923 cv
310.156 470.923 308.953 472.127 308.953 473.61 cv
308.953 475.092 310.156 476.296 311.639 476.296 cv
313.122 476.296 314.326 475.092 314.326 473.61 cv
ef
296.337 461.81 mo
296.337 460.327 295.133 459.124 293.65 459.124 cv
292.167 459.124 290.964 460.327 290.964 461.81 cv
290.964 463.293 292.167 464.497 293.65 464.497 cv
295.133 464.497 296.337 463.293 296.337 461.81 cv
ef
282.345 448.399 mo
282.345 446.916 281.142 445.712 279.659 445.712 cv
278.176 445.712 276.972 446.916 276.972 448.399 cv
276.972 449.882 278.176 451.085 279.659 451.085 cv
281.142 451.085 282.345 449.882 282.345 448.399 cv
ef
271.126 440.081 mo
271.126 438.598 269.922 437.395 268.439 437.395 cv
266.956 437.395 265.753 438.598 265.753 440.081 cv
265.753 441.564 266.956 442.768 268.439 442.768 cv
269.922 442.768 271.126 441.564 271.126 440.081 cv
ef
261.97 426.928 mo
261.97 425.445 260.767 424.241 259.284 424.241 cv
257.801 424.241 256.597 425.445 256.597 426.928 cv
256.597 428.411 257.801 429.614 259.284 429.614 cv
260.767 429.614 261.97 428.411 261.97 426.928 cv
ef
254.426 415.58 mo
254.426 414.097 253.223 412.893 251.74 412.893 cv
250.257 412.893 249.053 414.097 249.053 415.58 cv
249.053 417.063 250.257 418.266 251.74 418.266 cv
253.223 418.266 254.426 417.063 254.426 415.58 cv
ef
248.817 410.55 mo
248.817 409.068 247.613 407.864 246.13 407.864 cv
244.647 407.864 243.444 409.068 243.444 410.55 cv
243.444 412.033 244.647 413.237 246.13 413.237 cv
247.613 413.237 248.817 412.033 248.817 410.55 cv
ef
244.239 410.55 mo
244.239 409.068 243.035 407.864 241.552 407.864 cv
240.069 407.864 238.866 409.068 238.866 410.55 cv
238.866 412.033 240.069 413.237 241.552 413.237 cv
243.035 413.237 244.239 412.033 244.239 410.55 cv
ef
240.435 405.908 mo
240.435 404.425 239.231 403.221 237.748 403.221 cv
236.265 403.221 235.061 404.425 235.061 405.908 cv
235.061 407.391 236.265 408.595 237.748 408.595 cv
239.231 408.595 240.435 407.391 240.435 405.908 cv
ef
237.533 420.222 mo
237.533 418.739 236.33 417.535 234.847 417.535 cv
233.364 417.535 232.16 418.739 232.16 420.222 cv
232.16 421.705 233.364 422.909 234.847 422.909 cv
236.33 422.909 237.533 421.705 237.533 420.222 cv
ef
235.083 424.22 mo
235.083 422.737 233.879 421.533 232.396 421.533 cv
230.913 421.533 229.71 422.737 229.71 424.22 cv
229.71 425.703 230.913 426.906 232.396 426.906 cv
233.879 426.906 235.083 425.703 235.083 424.22 cv
ef
232.955 425.832 mo
232.955 424.349 231.752 423.145 230.269 423.145 cv
228.786 423.145 227.582 424.349 227.582 425.832 cv
227.582 427.315 228.786 428.518 230.269 428.518 cv
231.752 428.518 232.955 427.315 232.955 425.832 cv
ef
231.343 439.823 mo
231.343 438.34 230.14 437.137 228.657 437.137 cv
227.174 437.137 225.97 438.34 225.97 439.823 cv
225.97 441.306 227.174 442.51 228.657 442.51 cv
230.14 442.51 231.343 441.306 231.343 439.823 cv
ef
229.989 433.118 mo
229.989 431.635 228.786 430.431 227.303 430.431 cv
225.82 430.431 224.616 431.635 224.616 433.118 cv
224.616 434.601 225.82 435.804 227.303 435.804 cv
228.786 435.804 229.989 434.601 229.989 433.118 cv
ef
229.215 444.079 mo
229.215 442.596 228.012 441.392 226.529 441.392 cv
225.046 441.392 223.842 442.596 223.842 444.079 cv
223.842 445.562 225.046 446.765 226.529 446.765 cv
228.012 446.765 229.215 445.562 229.215 444.079 cv
ef
228.377 439.565 mo
228.377 438.082 227.174 436.879 225.691 436.879 cv
224.208 436.879 223.004 438.082 223.004 439.565 cv
223.004 441.048 224.208 442.252 225.691 442.252 cv
227.174 442.252 228.377 441.048 228.377 439.565 cv
ef
213.612 573.851 mo
212 573.851 li
217.105 573.851 mo
218.716 573.851 li
215.224 572.239 mo
215.224 542.955 li
215.224 575.463 mo
215.224 701.194 li
219.791 699.582 mo
219.791 531.403 li
221.94 699.582 mo
221.94 510.985 li
223.284 699.582 mo
223.284 533.821 li
224.09 516.895 mo
224.09 475.522 li
224.09 520.388 mo
224.09 701.194 li
224.896 699.582 mo
224.896 490.03 li
225.702 437.642 mo
225.702 426.358 li
225.702 441.134 mo
225.702 462.09 li
226.507 442.209 mo
226.507 428.776 li
226.507 445.701 mo
226.507 474.985 li
227.313 431.463 mo
227.313 420.985 li
227.313 434.955 mo
227.313 453.761 li
228.657 437.91 mo
228.657 428.507 li
228.657 441.403 mo
228.657 457.522 li
230.269 424.209 mo
230.269 417.492 li
230.269 427.433 mo
230.269 437.104 li
232.418 422.328 mo
232.418 417.224 li
232.418 425.821 mo
232.418 432.806 li
234.836 418.567 mo
234.836 414.269 li
234.836 422.06 mo
234.836 427.97 li
237.791 404.328 mo
237.791 402.448 li
237.791 407.552 mo
237.791 409.97 li
239.672 410.507 mo
239.403 410.507 li
243.164 410.507 mo
243.433 410.507 li
241.552 408.895 mo
241.552 407.284 li
241.552 412.388 mo
241.552 414.269 li
244.239 410.507 mo
243.433 410.507 li
247.731 410.507 mo
248.537 410.507 li
246.119 408.895 mo
246.119 407.821 li
246.119 412.119 mo
246.119 413.463 li
250.149 415.612 mo
248.537 415.612 li
253.373 415.612 mo
255.254 415.612 li
251.761 414 mo
251.761 413.194 li
251.761 417.224 mo
251.761 418.03 li
257.672 426.895 mo
255.254 426.895 li
260.896 426.895 mo
263.313 426.895 li
259.284 425.284 mo
259.284 424.746 li
259.284 428.776 mo
259.284 429.582 li
266.806 440.06 mo
263.313 440.06 li
270.03 440.06 mo
273.254 440.06 li
268.418 438.448 mo
268.418 437.642 li
268.418 441.94 mo
268.418 442.746 li
277.821 448.388 mo
273.254 448.388 li
281.313 448.388 mo
285.881 448.388 li
279.702 446.776 mo
279.702 445.97 li
279.702 450 mo
279.702 451.075 li
292.06 461.821 mo
285.881 461.821 li
295.552 461.821 mo
301.731 461.821 li
293.672 460.209 mo
293.672 459.403 li
293.672 463.701 mo
293.672 464.776 li
309.791 473.642 mo
301.731 473.642 li
313.284 473.642 mo
321.612 473.642 li
311.672 472.03 mo
311.672 470.955 li
311.672 475.254 mo
311.672 476.866 li
332.358 490.567 mo
321.612 490.567 li
335.582 490.567 mo
346.328 490.567 li
333.97 488.955 mo
333.97 487.343 li
333.97 492.179 mo
333.97 494.328 li
360.03 531.94 mo
346.328 531.94 li
363.522 531.94 mo
377.224 531.94 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
361.91 530.06 mo
361.91 526.298 li
361.91 533.552 mo
361.91 538.657 li
394.955 558.537 mo
377.224 558.537 li
398.448 558.537 mo
416.179 558.537 li
396.567 556.925 mo
396.567 551.284 li
396.567 560.418 mo
396.567 568.478 li
438.478 595.612 mo
416.179 595.612 li
441.97 595.612 mo
464.269 595.612 li
440.09 594 mo
440.09 584.06 li
440.09 597.224 mo
440.09 614.149 li
@
217.26 573.872 mo
217.26 572.76 216.358 571.857 215.245 571.857 cv
214.133 571.857 213.23 572.76 213.23 573.872 cv
213.23 574.984 214.133 575.887 215.245 575.887 cv
216.358 575.887 217.26 574.984 217.26 573.872 cv
ef
226.094 518.808 mo
226.094 517.696 225.191 516.793 224.079 516.793 cv
222.967 516.793 222.064 517.696 222.064 518.808 cv
222.064 519.921 222.967 520.823 224.079 520.823 cv
225.191 520.823 226.094 519.921 226.094 518.808 cv
ef
442.094 595.601 mo
442.094 594.489 441.191 593.586 440.079 593.586 cv
438.967 593.586 438.064 594.489 438.064 595.601 cv
438.064 596.713 438.967 597.616 440.079 597.616 cv
441.191 597.616 442.094 596.713 442.094 595.601 cv
ef
398.571 558.527 mo
398.571 557.414 397.669 556.512 396.556 556.512 cv
395.444 556.512 394.542 557.414 394.542 558.527 cv
394.542 559.639 395.444 560.542 396.556 560.542 cv
397.669 560.542 398.571 559.639 398.571 558.527 cv
ef
363.882 531.962 mo
363.882 530.85 362.98 529.947 361.867 529.947 cv
360.755 529.947 359.853 530.85 359.853 531.962 cv
359.853 533.074 360.755 533.977 361.867 533.977 cv
362.98 533.977 363.882 533.074 363.882 531.962 cv
ef
336.028 490.567 mo
336.028 489.455 335.125 488.552 334.013 488.552 cv
332.901 488.552 331.998 489.455 331.998 490.567 cv
331.998 491.679 332.901 492.582 334.013 492.582 cv
335.125 492.582 336.028 491.679 336.028 490.567 cv
ef
313.719 473.674 mo
313.719 472.562 312.816 471.659 311.704 471.659 cv
310.592 471.659 309.689 472.562 309.689 473.674 cv
309.689 474.786 310.592 475.689 311.704 475.689 cv
312.816 475.689 313.719 474.786 313.719 473.674 cv
ef
295.665 461.81 mo
295.665 460.698 294.762 459.795 293.65 459.795 cv
292.538 459.795 291.635 460.698 291.635 461.81 cv
291.635 462.922 292.538 463.825 293.65 463.825 cv
294.762 463.825 295.665 462.922 295.665 461.81 cv
ef
281.738 448.399 mo
281.738 447.287 280.835 446.384 279.723 446.384 cv
278.611 446.384 277.708 447.287 277.708 448.399 cv
277.708 449.511 278.611 450.414 279.723 450.414 cv
280.835 450.414 281.738 449.511 281.738 448.399 cv
ef
270.39 440.017 mo
270.39 438.905 269.487 438.002 268.375 438.002 cv
267.263 438.002 266.36 438.905 266.36 440.017 cv
266.36 441.129 267.263 442.032 268.375 442.032 cv
269.487 442.032 270.39 441.129 270.39 440.017 cv
ef
261.298 426.863 mo
261.298 425.751 260.396 424.848 259.284 424.848 cv
258.171 424.848 257.269 425.751 257.269 426.863 cv
257.269 427.975 258.171 428.878 259.284 428.878 cv
260.396 428.878 261.298 427.975 261.298 426.863 cv
ef
253.755 415.644 mo
253.755 414.532 252.852 413.629 251.74 413.629 cv
250.628 413.629 249.725 414.532 249.725 415.644 cv
249.725 416.756 250.628 417.659 251.74 417.659 cv
252.852 417.659 253.755 416.756 253.755 415.644 cv
ef
248.145 410.486 mo
248.145 409.374 247.242 408.471 246.13 408.471 cv
245.018 408.471 244.115 409.374 244.115 410.486 cv
244.115 411.598 245.018 412.501 246.13 412.501 cv
247.242 412.501 248.145 411.598 248.145 410.486 cv
ef
243.567 410.486 mo
243.567 409.374 242.665 408.471 241.552 408.471 cv
240.44 408.471 239.537 409.374 239.537 410.486 cv
239.537 411.598 240.44 412.501 241.552 412.501 cv
242.665 412.501 243.567 411.598 243.567 410.486 cv
ef
239.827 405.973 mo
239.827 404.86 238.925 403.958 237.813 403.958 cv
236.7 403.958 235.798 404.86 235.798 405.973 cv
235.798 407.085 236.7 407.987 237.813 407.987 cv
238.925 407.987 239.827 407.085 239.827 405.973 cv
ef
236.861 420.158 mo
236.861 419.045 235.959 418.143 234.847 418.143 cv
233.734 418.143 232.832 419.045 232.832 420.158 cv
232.832 421.27 233.734 422.172 234.847 422.172 cv
235.959 422.172 236.861 421.27 236.861 420.158 cv
ef
234.411 424.22 mo
234.411 423.108 233.509 422.205 232.396 422.205 cv
231.284 422.205 230.382 423.108 230.382 424.22 cv
230.382 425.332 231.284 426.235 232.396 426.235 cv
233.509 426.235 234.411 425.332 234.411 424.22 cv
ef
232.284 425.832 mo
232.284 424.719 231.381 423.817 230.269 423.817 cv
229.156 423.817 228.254 424.719 228.254 425.832 cv
228.254 426.944 229.156 427.847 230.269 427.847 cv
231.381 427.847 232.284 426.944 232.284 425.832 cv
ef
230.672 439.759 mo
230.672 438.647 229.769 437.744 228.657 437.744 cv
227.544 437.744 226.642 438.647 226.642 439.759 cv
226.642 440.871 227.544 441.774 228.657 441.774 cv
229.769 441.774 230.672 440.871 230.672 439.759 cv
ef
229.318 433.053 mo
229.318 431.941 228.415 431.038 227.303 431.038 cv
226.19 431.038 225.288 431.941 225.288 433.053 cv
225.288 434.165 226.19 435.068 227.303 435.068 cv
228.415 435.068 229.318 434.165 229.318 433.053 cv
ef
228.479 444.079 mo
228.479 442.967 227.577 442.064 226.464 442.064 cv
225.352 442.064 224.45 442.967 224.45 444.079 cv
224.45 445.191 225.352 446.094 226.464 446.094 cv
227.577 446.094 228.479 445.191 228.479 444.079 cv
ef
227.706 439.501 mo
227.706 438.389 226.803 437.486 225.691 437.486 cv
224.579 437.486 223.676 438.389 223.676 439.501 cv
223.676 440.613 224.579 441.516 225.691 441.516 cv
226.803 441.516 227.706 440.613 227.706 439.501 cv
ef
213.612 573.851 mo
212 573.851 li
217.105 573.851 mo
218.716 573.851 li
215.224 572.239 mo
215.224 542.955 li
215.224 575.463 mo
215.224 701.194 li
219.791 699.582 mo
219.791 531.403 li
221.94 699.582 mo
221.94 510.985 li
223.284 699.582 mo
223.284 533.821 li
224.09 516.895 mo
224.09 475.522 li
224.09 520.388 mo
224.09 701.194 li
224.896 699.582 mo
224.896 490.03 li
225.702 437.642 mo
225.702 426.358 li
225.702 441.134 mo
225.702 462.09 li
226.507 442.209 mo
226.507 428.776 li
226.507 445.701 mo
226.507 474.985 li
227.313 431.463 mo
227.313 420.985 li
227.313 434.955 mo
227.313 453.761 li
228.657 437.91 mo
228.657 428.507 li
228.657 441.403 mo
228.657 457.522 li
230.269 424.209 mo
230.269 417.492 li
230.269 427.433 mo
230.269 437.104 li
232.418 422.328 mo
232.418 417.224 li
232.418 425.821 mo
232.418 432.806 li
234.836 418.567 mo
234.836 414.269 li
234.836 422.06 mo
234.836 427.97 li
237.791 404.328 mo
237.791 402.448 li
237.791 407.552 mo
237.791 409.97 li
239.672 410.507 mo
239.403 410.507 li
243.164 410.507 mo
243.433 410.507 li
241.552 408.895 mo
241.552 407.284 li
241.552 412.388 mo
241.552 414.269 li
244.239 410.507 mo
243.433 410.507 li
247.731 410.507 mo
248.537 410.507 li
246.119 408.895 mo
246.119 407.821 li
246.119 412.119 mo
246.119 413.463 li
250.149 415.612 mo
248.537 415.612 li
253.373 415.612 mo
255.254 415.612 li
251.761 414 mo
251.761 413.194 li
251.761 417.224 mo
251.761 418.03 li
257.672 426.895 mo
255.254 426.895 li
260.896 426.895 mo
263.313 426.895 li
259.284 425.284 mo
259.284 424.746 li
259.284 428.776 mo
259.284 429.582 li
266.806 440.06 mo
263.313 440.06 li
270.03 440.06 mo
273.254 440.06 li
268.418 438.448 mo
268.418 437.642 li
268.418 441.94 mo
268.418 442.746 li
277.821 448.388 mo
273.254 448.388 li
281.313 448.388 mo
285.881 448.388 li
279.702 446.776 mo
279.702 445.97 li
279.702 450 mo
279.702 451.075 li
292.06 461.821 mo
285.881 461.821 li
295.552 461.821 mo
301.731 461.821 li
293.672 460.209 mo
293.672 459.403 li
293.672 463.701 mo
293.672 464.776 li
309.791 473.642 mo
301.731 473.642 li
313.284 473.642 mo
321.612 473.642 li
311.672 472.03 mo
311.672 470.955 li
311.672 475.254 mo
311.672 476.866 li
332.358 490.567 mo
321.612 490.567 li
335.582 490.567 mo
346.328 490.567 li
333.97 488.955 mo
333.97 487.343 li
333.97 492.179 mo
333.97 494.328 li
360.03 531.94 mo
346.328 531.94 li
363.522 531.94 mo
377.224 531.94 li
.750179 .679652 .670191 .901488 cmyk
@
361.91 530.06 mo
361.91 526.298 li
361.91 533.552 mo
361.91 538.657 li
394.955 558.537 mo
377.224 558.537 li
398.448 558.537 mo
416.179 558.537 li
396.567 556.925 mo
396.567 551.284 li
396.567 560.418 mo
396.567 568.478 li
438.478 595.612 mo
416.179 595.612 li
441.97 595.612 mo
464.269 595.612 li
440.09 594 mo
440.09 584.06 li
440.09 597.224 mo
440.09 614.149 li
@
217.26 573.872 mo
217.26 572.76 216.358 571.857 215.245 571.857 cv
214.133 571.857 213.23 572.76 213.23 573.872 cv
213.23 574.984 214.133 575.887 215.245 575.887 cv
216.358 575.887 217.26 574.984 217.26 573.872 cv
.783902 .622919 3.0518e-05 3.0518e-05 cmyk
ef
226.094 518.808 mo
226.094 517.696 225.191 516.793 224.079 516.793 cv
222.967 516.793 222.064 517.696 222.064 518.808 cv
222.064 519.921 222.967 520.823 224.079 520.823 cv
225.191 520.823 226.094 519.921 226.094 518.808 cv
ef
442.094 595.601 mo
442.094 594.489 441.191 593.586 440.079 593.586 cv
438.967 593.586 438.064 594.489 438.064 595.601 cv
438.064 596.713 438.967 597.616 440.079 597.616 cv
441.191 597.616 442.094 596.713 442.094 595.601 cv
ef
398.571 558.527 mo
398.571 557.414 397.669 556.512 396.556 556.512 cv
395.444 556.512 394.542 557.414 394.542 558.527 cv
394.542 559.639 395.444 560.542 396.556 560.542 cv
397.669 560.542 398.571 559.639 398.571 558.527 cv
ef
363.882 531.962 mo
363.882 530.85 362.98 529.947 361.867 529.947 cv
360.755 529.947 359.853 530.85 359.853 531.962 cv
359.853 533.074 360.755 533.977 361.867 533.977 cv
362.98 533.977 363.882 533.074 363.882 531.962 cv
ef
336.028 490.567 mo
336.028 489.455 335.125 488.552 334.013 488.552 cv
332.901 488.552 331.998 489.455 331.998 490.567 cv
331.998 491.679 332.901 492.582 334.013 492.582 cv
335.125 492.582 336.028 491.679 336.028 490.567 cv
ef
313.719 473.674 mo
313.719 472.562 312.816 471.659 311.704 471.659 cv
310.592 471.659 309.689 472.562 309.689 473.674 cv
309.689 474.786 310.592 475.689 311.704 475.689 cv
312.816 475.689 313.719 474.786 313.719 473.674 cv
ef
295.665 461.81 mo
295.665 460.698 294.762 459.795 293.65 459.795 cv
292.538 459.795 291.635 460.698 291.635 461.81 cv
291.635 462.922 292.538 463.825 293.65 463.825 cv
294.762 463.825 295.665 462.922 295.665 461.81 cv
ef
281.738 448.399 mo
281.738 447.287 280.835 446.384 279.723 446.384 cv
278.611 446.384 277.708 447.287 277.708 448.399 cv
277.708 449.511 278.611 450.414 279.723 450.414 cv
280.835 450.414 281.738 449.511 281.738 448.399 cv
ef
270.39 440.017 mo
270.39 438.905 269.487 438.002 268.375 438.002 cv
267.263 438.002 266.36 438.905 266.36 440.017 cv
266.36 441.129 267.263 442.032 268.375 442.032 cv
269.487 442.032 270.39 441.129 270.39 440.017 cv
ef
261.298 426.863 mo
261.298 425.751 260.396 424.848 259.284 424.848 cv
258.171 424.848 257.269 425.751 257.269 426.863 cv
257.269 427.975 258.171 428.878 259.284 428.878 cv
260.396 428.878 261.298 427.975 261.298 426.863 cv
ef
253.755 415.644 mo
253.755 414.532 252.852 413.629 251.74 413.629 cv
250.628 413.629 249.725 414.532 249.725 415.644 cv
249.725 416.756 250.628 417.659 251.74 417.659 cv
252.852 417.659 253.755 416.756 253.755 415.644 cv
ef
248.145 410.486 mo
248.145 409.374 247.242 408.471 246.13 408.471 cv
245.018 408.471 244.115 409.374 244.115 410.486 cv
244.115 411.598 245.018 412.501 246.13 412.501 cv
247.242 412.501 248.145 411.598 248.145 410.486 cv
ef
243.567 410.486 mo
243.567 409.374 242.665 408.471 241.552 408.471 cv
240.44 408.471 239.537 409.374 239.537 410.486 cv
239.537 411.598 240.44 412.501 241.552 412.501 cv
242.665 412.501 243.567 411.598 243.567 410.486 cv
ef
239.827 405.973 mo
239.827 404.86 238.925 403.958 237.813 403.958 cv
236.7 403.958 235.798 404.86 235.798 405.973 cv
235.798 407.085 236.7 407.987 237.813 407.987 cv
238.925 407.987 239.827 407.085 239.827 405.973 cv
ef
236.861 420.158 mo
236.861 419.045 235.959 418.143 234.847 418.143 cv
233.734 418.143 232.832 419.045 232.832 420.158 cv
232.832 421.27 233.734 422.172 234.847 422.172 cv
235.959 422.172 236.861 421.27 236.861 420.158 cv
ef
234.411 424.22 mo
234.411 423.108 233.509 422.205 232.396 422.205 cv
231.284 422.205 230.382 423.108 230.382 424.22 cv
230.382 425.332 231.284 426.235 232.396 426.235 cv
233.509 426.235 234.411 425.332 234.411 424.22 cv
ef
232.284 425.832 mo
232.284 424.719 231.381 423.817 230.269 423.817 cv
229.156 423.817 228.254 424.719 228.254 425.832 cv
228.254 426.944 229.156 427.847 230.269 427.847 cv
231.381 427.847 232.284 426.944 232.284 425.832 cv
ef
230.672 439.759 mo
230.672 438.647 229.769 437.744 228.657 437.744 cv
227.544 437.744 226.642 438.647 226.642 439.759 cv
226.642 440.871 227.544 441.774 228.657 441.774 cv
229.769 441.774 230.672 440.871 230.672 439.759 cv
ef
229.318 433.053 mo
229.318 431.941 228.415 431.038 227.303 431.038 cv
226.19 431.038 225.288 431.941 225.288 433.053 cv
225.288 434.165 226.19 435.068 227.303 435.068 cv
228.415 435.068 229.318 434.165 229.318 433.053 cv
ef
228.479 444.079 mo
228.479 442.967 227.577 442.064 226.464 442.064 cv
225.352 442.064 224.45 442.967 224.45 444.079 cv
224.45 445.191 225.352 446.094 226.464 446.094 cv
227.577 446.094 228.479 445.191 228.479 444.079 cv
ef
227.706 439.501 mo
227.706 438.389 226.803 437.486 225.691 437.486 cv
224.579 437.486 223.676 438.389 223.676 439.501 cv
223.676 440.613 224.579 441.516 225.691 441.516 cv
226.803 441.516 227.706 440.613 227.706 439.501 cv
ef
.750179 .679652 .670191 .901488 cmyk
LCKXDL+Helvetica*1 [20.4151 0 0 -20.4151 0 0 ]msf373.25 484.705 mo(R=0.5)[14.7397 11.9224 11.3508 5.67542 0 ]xsh352.776 396 mo
430.418 396 li
430.418 468.806 li
352.776 468.806 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.268657 lw
352.776 396 mo
430.418 396 li
430.418 468.806 li
352.776 468.806 li
cp
@
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if
1 5084 27 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>TZMBAA+Helvetica AddT42Char 
1 7072 35 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>TZMBAA+Helvetica AddT42Char 
1 7320 36 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>TZMBAA+Helvetica AddT42Char 
1 8900 43 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/a 27 def
/m 35 def
/n 36 def
/y 43 def
end
TZMBAA+Helvetica /Encoding get
dup 97 /a put
dup 109 /m put
dup 110 /n put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five 3{/.notdef}rp /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp /N 3{/.notdef}rp /R /.notdef /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /j 2{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [20.4151 0 0 -20.4151 0 0 ]msf371.553 413.398 mo(norm. uncertainty)[11.3508 11.3508 6.79807 17.0057 5.67538 5.67542 11.3508 11.3508 10.2076 11.3508 6.7981 5.67542 11.3508 4.53217 11.3508 5.67542 0 ]xsh355.731 399.761 mo
369.164 399.761 li
369.164 416.687 li
355.731 416.687 li
cp
.696254 .631098 .620691 .585717 cmyk
currentcolor
/26168760.0 
<<
/ID /26168760.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 96 4 ] 
/XStep 96 
/YStep 4 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
96 0 li
96 4 li
0 4 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[1 3 ] 0 dsh
true sadj
{2 4 mo
98 4 li
0 3 mo
96 3 li
2 2 mo
98 2 li
0 1 mo
96 1 li
}exec
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/26168760.0 /Pattern get_res
[.80597 0 0 -.80597 32 792 ]make_pattern set_pattern
f
2 vmreclaim
.80597 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
355.731 399.761 mo
369.164 399.761 li
355.731 416.687 mo
369.164 416.687 li
369.164 416.687 mo
369.164 399.761 li
355.731 416.687 mo
355.731 399.761 li
false sop
.750179 .679652 .670191 .901488 cmyk
@
%ADOBeginSubsetFont: TZMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TZMBAA+Helvetica gcheck setglobal} if
1 108 2 <00050042ffda06d00592000b000f001b0027003300f04052060c250c0237
0e580c670c960ca70cc60cd70cf60c0868080d0e0e46120f0f0c0e0f1218
0c0d2a301b2421f215240d272d240bf23324050a0f0e3517171a2a2402f2
302408ea12241ef218242419343f52182b4e10f44dedfcedf6edfced4e45
6544e6002f3c4d3fedfcfd2fc4edf4ed011112393911123939872e2b7d10
c43130184379405200322e0a301b002c002a1b011a22181b001020121b01
1626181b00141c121b013206301b0028042a1b012f092d1b012b012d1b01
19231b1b00111f1b1b001725151b01131d151b013107331b002903331b00
002b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b81015d710016151406232226
353436330333012312363534262322061514163312161514062322263534
36330036353426232206151416330604cccc9091cccc91916ffcdf6f3279
79565579795591cccc9190cccc90042b7979555679795602b8cc9090cccc
9090cc02dafa4803687955557978565579022bcd9090cccc9090cdfb2179
55557979555579000000>TZMBAA+Helvetica AddT42Char 
1 2556 16 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>TZMBAA+Helvetica AddT42Char 
1 2856 17 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>TZMBAA+Helvetica AddT42Char 
TZMBAA+Helvetica /CharStrings get begin
/percent 2 def
/six 16 def
/eight 17 def
end
TZMBAA+Helvetica /Encoding get
dup 37 /percent put
dup 54 /six put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDL+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /.notdef /eight /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp /N 3{/.notdef}rp /R /.notdef /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /j 2{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]LCKXDL+Helvetica nfLCKXDL+Helvetica*1 [20.4151 0 0 -20.4151 0 0 ]msf371.553 437.166 mo(0%-10%)[11.3508 18.1492 6.79807 11.3508 11.3508 0 ]xsh371.553 461.783 mo(60%-80%)[11.3508 11.3508 18.1492 6.7981 11.3508 11.3508 0 ]xsh358.821 431.686 mo
367.149 431.686 li
360.411 436.582 li
362.985 428.661 li
365.559 436.582 li
f
360.298 432.18 mo
365.672 432.18 li
361.325 435.338 li
362.985 430.227 li
364.645 435.338 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
360.298 432.18 mo
365.672 432.18 li
361.325 435.338 li
362.985 430.227 li
364.645 435.338 li
3.0518e-05 .990631 1 .000396735 cmyk
f
365.65 453.492 mo
365.65 452.01 364.447 450.806 362.964 450.806 cv
361.481 450.806 360.277 452.01 360.277 453.492 cv
360.277 454.975 361.481 456.179 362.964 456.179 cv
364.447 456.179 365.65 454.975 365.65 453.492 cv
.750179 .679652 .670191 .901488 cmyk
ef
365.043 453.492 mo
365.043 452.38 364.14 451.478 363.028 451.478 cv
361.916 451.478 361.013 452.38 361.013 453.492 cv
361.013 454.605 361.916 455.508 363.028 455.508 cv
364.14 455.508 365.043 454.605 365.043 453.492 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
365.043 453.492 mo
365.043 452.38 364.14 451.478 363.028 451.478 cv
361.916 451.478 361.013 452.38 361.013 453.492 cv
361.013 454.605 361.916 455.508 363.028 455.508 cv
364.14 455.508 365.043 454.605 365.043 453.492 cv
.783902 .622919 3.0518e-05 3.0518e-05 cmyk
ef
.750179 .679652 .670191 .901488 cmyk
LCKXDL+Helvetica*1 [0 -18.7138 -18.7138 0 0 0 ]msf77.8398 447.354 mo(T,jet)[-11.434 -5.20239 -4.15448 -10.4048 0 ]ysh46.4306 447.354 mo(reco,c)[-6.23154 -10.4048 -9.3569 -10.4048 -5.20245 0 ]yshgrestore
gsave
32 387.94 mo
549.433 387.94 li
549.433 791.935 li
32 791.935 li
cp
clp
gsave
32 792 mo
580 792 li
580 0 li
32 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
LCKXDL+Helvetica*1 [0 -18.7138 -18.7138 0 0 0 ]msf46.4311 396.393 mo(h)shgrestore
grestore
gsave
32 792 mo
580 792 li
580 0 li
32 0 li
cp
clp
false sop
1 /0 /CSD get_res sepcs
1 sep
LCKXDL+Helvetica*1 [0 -28.0707 -28.0707 0 0 0 ]msf62.5597 495.739 mo(/\(dp)[-7.80365 -9.34732 -15.6072 0 ]yshLCKXDL+Helvetica*1 [0 -18.7138 -18.7138 0 0 0 ]msf71.0487 525.451 mo(jets)[-4.15448 -10.4048 -5.20245 0 ]yshLCKXDL+Helvetica*1 [0 -28.0707 -28.0707 0 0 0 ]msf62.5597 544.126 mo(N)shLCKXDL+Helvetica*1 [0 -18.7138 -18.7138 0 0 0 ]msf49.8266 554.313 mo(2)shLCKXDL+Helvetica*1 [0 -28.0707 -28.0707 0 0 0 ]msf62.5597 585.721 mo(\) d)[-9.34735 -7.80365 0 ]yshLCKXDL+Helvetica*1 [0 -18.7138 -18.7138 0 0 0 ]msf76.9909 611.188 mo(trig)[-5.20245 -6.23151 -4.15448 0 ]yshLCKXDL+Helvetica*1 [0 -28.0707 -28.0707 0 0 0 ]msf62.5597 662.121 mo(\(1/N)[-9.34729 -15.6073 -7.80359 0 ]yshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Pattern [/705972792.0 /705973184.0 /705973576.0 /26168368.0 /26168760.0 ]]
] del_res
/LCKXDL+Helvetica*1 uf/LCKXDL+Helvetica uf/TZMBAA+Helvetica uf/LCKXDM+Symbol*1 uf/LCKXDM+Symbol uf/NZPPMX+Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
