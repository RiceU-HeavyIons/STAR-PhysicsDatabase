%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Fig7d.pdf
%%Creator: Adobe Acrobat 9.3.0
%%For: pmjacobs
%%CreationDate: 6/24/17, 5:00 PM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 784 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-02-02T19:42:12Z"
   xmp:CreatorTool="Preview"
   xmp:ModifyDate="2017-02-02T19:42:12Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11.6 Quartz PDFContext"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">c_jet_pt_sub_leading_pt_9_pm_0_cent_1_r_1_norm_1.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 757 mo
612 757 li
612 35 li
0 35 li
cp
clp
0 34.3652 mo
612 34.3652 li
612 757 li
0 757 li
cp
false sop
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.269841 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 34.3652 mo
612 34.3652 li
612 757 li
0 757 li
cp
@
0 34.3652 mo
562.889 34.3652 li
562.889 468 li
0 468 li
cp
ef
0 34.3652 mo
562.889 34.3652 li
562.889 468 li
0 468 li
cp
@
140.857 77.5397 mo
562.889 77.5397 li
562.889 468 li
140.857 468 li
cp
ef
140.857 77.5397 mo
562.889 77.5397 li
562.889 468 li
140.857 468 li
cp
@
.809524 lw
140.857 77.5397 mo
562.889 77.5397 li
562.889 468 li
140.857 468 li
cp
.750179 .679652 .670191 .901488 cmyk
@
140.857 77.5397 mo
562.889 77.5397 li
562.889 468 li
140.857 468 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.269841 lw
140.857 77.5397 mo
562.889 77.5397 li
562.889 468 li
140.857 468 li
cp
@
.809524 lw
140.857 77.5397 mo
562.889 77.5397 li
562.889 468 li
140.857 468 li
cp
140.857 468 mo
562.889 468 li
183.222 458.286 mo
183.222 468 li
195.365 463.143 mo
195.365 468 li
207.508 463.143 mo
207.508 468 li
219.651 463.143 mo
219.651 468 li
231.794 463.143 mo
231.794 468 li
243.936 458.286 mo
243.936 468 li
256.079 463.143 mo
256.079 468 li
268.222 463.143 mo
268.222 468 li
280.365 463.143 mo
280.365 468 li
292.508 463.143 mo
292.508 468 li
304.651 458.286 mo
304.651 468 li
316.794 463.143 mo
316.794 468 li
328.936 463.143 mo
328.936 468 li
340.809 463.143 mo
340.809 468 li
352.952 463.143 mo
352.952 468 li
365.095 458.286 mo
365.095 468 li
377.238 463.143 mo
377.238 468 li
389.381 463.143 mo
389.381 468 li
401.524 463.143 mo
401.524 468 li
413.667 463.143 mo
413.667 468 li
425.809 458.286 mo
425.809 468 li
437.952 463.143 mo
437.952 468 li
450.095 463.143 mo
450.095 468 li
462.238 463.143 mo
462.238 468 li
474.381 463.143 mo
474.381 468 li
486.524 458.286 mo
486.524 468 li
498.667 463.143 mo
498.667 468 li
510.809 463.143 mo
510.809 468 li
522.952 463.143 mo
522.952 468 li
535.095 463.143 mo
535.095 468 li
547.238 458.286 mo
547.238 468 li
183.222 458.286 mo
183.222 468 li
171.079 463.143 mo
171.079 468 li
158.936 463.143 mo
158.936 468 li
146.794 463.143 mo
146.794 468 li
547.238 458.286 mo
547.238 468 li
559.381 463.143 mo
559.381 468 li
140.857 77.5397 mo
562.889 77.5397 li
183.222 87.5239 mo
183.222 77.5397 li
195.365 82.6667 mo
195.365 77.5397 li
207.508 82.6667 mo
207.508 77.5397 li
219.651 82.6667 mo
219.651 77.5397 li
231.794 82.6667 mo
231.794 77.5397 li
243.936 87.5239 mo
243.936 77.5397 li
256.079 82.6667 mo
256.079 77.5397 li
268.222 82.6667 mo
268.222 77.5397 li
280.365 82.6667 mo
280.365 77.5397 li
292.508 82.6667 mo
292.508 77.5397 li
304.651 87.5239 mo
304.651 77.5397 li
316.794 82.6667 mo
316.794 77.5397 li
328.936 82.6667 mo
328.936 77.5397 li
340.809 82.6667 mo
340.809 77.5397 li
352.952 82.6667 mo
352.952 77.5397 li
365.095 87.5239 mo
365.095 77.5397 li
377.238 82.6667 mo
377.238 77.5397 li
389.381 82.6667 mo
389.381 77.5397 li
401.524 82.6667 mo
401.524 77.5397 li
413.667 82.6667 mo
413.667 77.5397 li
425.809 87.5239 mo
425.809 77.5397 li
437.952 82.6667 mo
437.952 77.5397 li
450.095 82.6667 mo
450.095 77.5397 li
.750179 .679652 .670191 .901488 cmyk
@
462.238 82.6667 mo
462.238 77.5397 li
474.381 82.6667 mo
474.381 77.5397 li
486.524 87.5239 mo
486.524 77.5397 li
498.667 82.6667 mo
498.667 77.5397 li
510.809 82.6667 mo
510.809 77.5397 li
522.952 82.6667 mo
522.952 77.5397 li
535.095 82.6667 mo
535.095 77.5397 li
547.238 87.5239 mo
547.238 77.5397 li
183.222 87.5239 mo
183.222 77.5397 li
171.079 82.6667 mo
171.079 77.5397 li
158.936 82.6667 mo
158.936 77.5397 li
146.794 82.6667 mo
146.794 77.5397 li
547.238 87.5239 mo
547.238 77.5397 li
559.381 82.6667 mo
559.381 77.5397 li
140.857 468 mo
140.857 77.5397 li
148.413 468 mo
140.857 468 li
148.413 455.857 mo
140.857 455.857 li
148.413 447.222 mo
140.857 447.222 li
148.413 440.746 mo
140.857 440.746 li
148.413 435.349 mo
140.857 435.349 li
148.413 430.762 mo
140.857 430.762 li
148.413 426.714 mo
140.857 426.714 li
148.413 423.206 mo
140.857 423.206 li
155.968 419.968 mo
140.857 419.968 li
@
%ADOBeginSubsetFont: STYPMX+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /STYPMX+Helvetica
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000036c6670
676d000000000000042800000a1d676c796600000000000013ec00002ab0
686561640000000000000e4800000036686865610000000000000e800000
0024686d74780000000000000ea4000000cc6c6f63610000000000000f70
000000686d6178700000000000000fd8000000206e616d65000000000000
0ff80000002470726570000000000000101c000003cf6764697200000000
000000000000000005c0001005bd00280580001a042f001f0000ffd90000
ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe
3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c
00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af0074
00c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c0062
0084ffa200240038008600bd0039005e008e00edffa9ffb3004000520055
00aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1
ff4cffaf0012002c004200500051008400be012503daff680018003b0098
009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c0053
0053007d01b401e103af0486ff9cffeafffe001f0028002a005200600093
00a300aa00af00af00c001000145016b0174019301950240028202b40485
0517fefd00060029004700470048006f008800b400b900c400f200f901ef
02180310037403c5ff35fff3000b004b004c005200550065007600760087
0087008e00ab00bb0106013001430150017d0194019501d3022a02550258
0277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7
ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125
013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e3
01ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df
03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008
002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd
00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d
014d014e014f01660169019e01ba01ba01be01e301ef01f6020002000209
02110217021c02530262026d028002d50280031b032a034a035a03af03af
03c803d603fb03fb04050413041504470449008c046d049a049a04a604a8
04b204cf0539053e054e055605800589058c036305d105d6067e068e06b2
06ef06f00728074c076f078c00b400c900c000c100000000000000000000
00000004012400af0032006e0063014401620096014301a10161008a0074
0064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d
0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d
00820030002a002a002a002a002a40292a292827262524232221201f1e1d
1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b
2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2c20b0032552582359212d
2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b0
02602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45
b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b
482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185
592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b0
09234223688a6a606120b0005258b21a401a4523614459b0005058b21940
1945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b
2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c456920b00943b0022660
b00325b005254961b0805358b21940194523616844b21a401a4523606a44
b209191a45652345604259b00943608a103a2d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c764520b003254523616818236860442d2c7645b0032545236168231845
6860442d2c7645b0032545616823452361442d2c4569b014b0324b505821
b0205961442db8002b2c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db8002c2c2020456944b001602db8002d2cb8002c2a212d
b8002e2c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db8002f2c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800302c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80031
2c2020456944b001602020457d691844b001602db800322cb800312a2db8
00332c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800342c4b535845441b2121592d
b800352c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db800362c2020456944b001602db800372cb800362a212db800382c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db800392c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db8003a2c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db8003b2c2020456944
b001602020457d691844b001602db8003c2cb8003b2a2db8003d2c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db8003e2c4b535845441b2121592db8003f2c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800402c20
20456944b001602db800412cb800402a212db800422c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800432c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800442c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800452c2020456944b00160202045
7d691844b001602db800462cb800452a2db800472c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800482c4b535845441b2121592db800492c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db8004a2c2020456944b001
602db8004b2cb8004a2a212db8004c2c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db8004d2c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db8004e2c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db8004f2c2020456944b001602020457d691844b001
602db800502cb8004f2a2db800512c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
522c4b535845441b2121592db800532c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db800542c2020456944b001602db800552c
b800542a212db800562c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800572c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800582c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800592c2020456944b001602020457d691844b001602db8005a2c
b800592a2db8005b2c4b20b003265358b0401bb000598a8a20b003265358
2321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db8005c2c4b535845441b2121592d00000000010000
00000000493edc1e5f0f3cf500110800000000005f4d8f0000000000d154
cd90f865fc270b9108f9000000090001000000000000000100000629fe29
00000c01f865fced0b910001000000000000000000000000000000330512
004202390000071d004202aa008e02aa004404ac005c023900aa02aa0055
023900af0239000004730040047300c40473004004730031047300340473
00420473004d047300420473004904ac001c04ac005c04ac001c081f00e1
0556001e055600af0639006306aa009705c7009c05c700b40556006004e3
002105560034047300520400003b04730038047300480473003d04730084
01c7008401c7ffda0400008006aa0084047300840473003b0473007602aa
00890400004202390017047300800400000b0400000b00000036003600fe
0146018801bc01ee020c022c025002be02e40370041c046a04fe05940646
06dc0726074e079a087208fe094209ea0a760acc0b560c220c500cae0d78
0dfa0e660f300fd81028105610901100117c11d8125012c2130813e81438
14921528155800010000003300920009006b0007000200100010005d0000
07e80a1d0004000100000001001200010000000000060010000051464f49
44492b48656c7665746963610000b800532bb800492bb8003f2bb800352b
b8002b2b4118008001a6009001a600a001a600030069018b0079018b0089
018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba01
79001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119
000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028
019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b2
1e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b2
1fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27
b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f
911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802ab
b21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f
2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45
273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896
b8017bb348283125b8017a403648289629482725294c1f25294627272948
2756c80784075b07410732072b072807260721071b071408120810080e08
0c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801
aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b4000001
0014b801abb41000000100b801abb606100000010006b801adb300000100
b801ad401f04000001000410000001001002000001000200000001000002
010802004a00b0018db806008516763f183f123e113946443e113946443e
113946443e113946443e113946443e11394660443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b65422b2b4b5279b376706a664565234560234565602345
60b08b766818b080622020b16a704565234520b003266062636820b00326
6165b070236544b06a234420b176664565234520b003266062636820b003
266165b066236544b0762344b10066455458b166406544b2764076452361
4459b36242725d456523456023456560234560b089766818b080622020b1
72424565234520b003266062636820b003266165b042236544b072234420
b1625d4565234520b003266062636820b003266165b05d236544b0622344
b1005d455458b15d406544b262406245236144592b2b2b2b456953427374
b8019a2045694b20b02853b049515a58b020615944b801a6204569447500
00>
[10929 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 1184 10 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>STYPMX+Helvetica AddT42Char 
1 1404 11 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>STYPMX+Helvetica AddT42Char 
1 2104 14 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>STYPMX+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>STYPMX+Helvetica AddT42Char 
STYPMX+Helvetica /CharStrings get begin
/zero 10 def
/one 11 def
/four 14 def
end
STYPMX+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 52 /four put
pop
end
%ADOEndSubsetFont
/LCKXDB+Helvetica /STYPMX+Helvetica findfont ct_VMDictPut/LCKXDB+Helvetica*1 [48{/.notdef}rp /zero /one 2{/.notdef}rp /four 203{/.notdef}rp]LCKXDB+Helvetica nfLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf124.846 420.265 mo(4)sh%ADOBeginSubsetFont: BWWAAA+Symbol Initial
ct_T42Dict begin
-0.164 -0.297 1.094 0.824
 256 array 0 1 255 {1 index exch /.notdef put} for  /BWWAAA+Symbol
Type42DictBegin
[<00010000000c000c000c000c4f532f32e67a4476000000cc000000606376
74205d0c08450000012c0000023c6670676dc62bd4b60000036800000200
676c79667741ada2000014880000012068656164dae03ef0000005680000
0036686865610cca0296000005a000000024686d74788f905207000005c4
0000031c6c6f6361241424a4000008e0000001906d61787008d609b00000
0a70000000206e616d653233585a00000a900000010370726570f12012c7
00000b94000008f367646972000000000000000000000000000304940190
0005000402bc028a0000008c02bc028a000001dd003200fa000000000000
000000000000800000eb380160ea14400000000000007079727300400000
f8ff059cfd9c0000069e0264000000010000000000000000000000200000
ee00cd003b00870089023f005600c1005e00ec01b20093018b002d018900
ee003b00ae00b200c700b20037002d006000a603c100fc00d300b800d300
5c02cb00c100660031001902c1004e005400b2009c0002021d027500c100
9601c1000e023f02ac019e009c027f01a0005a001f002704c100f4005800
b4036d003300a8025e006a04850200077300a2027500100173005e004202
4e0202099800f604370046055c00bc00b000a6006d03e7025e074400f801
75006800dd00e1003500370262008d0062028900be00d301b601d701e301
5202cf00c301fc01cd01480548054805660500001700ee00c105b6001b02
7100b60000001b003f000403480548054805480500001f0029004e002900
4e0066009301cb059e018b005001ee00ee0031009a0091004e009a004805
b000310098032d006d033300e9004a004a00290098039803330083054a00
c3008f005200d3055a009c0175007d06600098039803b603b20133009803
8305c70198039803980300001200e5011d063900210427025e068700e900
b0053d02d70277008300f6028305b401df008d05a602750012019c058302
62015e0042024e024e0052058b008d051400f60421008d055c002d001f00
f4055200ba012d021000a603aa0175006800dd00e100c905e7020c024606
6400ec05ee01f8012f062506b201f80500028300c10135063d00fc013306
be0139060e06680083006200be00857bff7f82003000002a0029003f004e
005a0077008b00870031007500bc00dd0000001dfe39000003df00020548
001e4007060504030201002c2010b002254964b040515820c859212d2cb0
02254964b040515820c859212d2c20100720b00050b00d7920b8ffff5058
041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff505804
1b0559b0051cb0032508e12d2c4b505820b80107454459212d2cb0022545
60442d2c4b5358b00225b0022545445921212d2c45442db800072c4bb800
065058b101018e59b801ff85b800441db9000600035f5e2db800082c2020
456944b001602db800092cb800082a212db8000a2c2046b0032546525823
59208a208a49648a204620686164b004254620686164525823658a592f20
b00053586920b000545821b040591b6920b000545821b0406559593a2db8
000b2c2046b00425465258238a592046206a6164b0042546206a61645258
238a592ffd2db8000c2c4b20b0032650585158b080441bb04044591b2121
2045b0c05058b0c0441b2159592db8000d2c2020456944b001602020457d
691844b001602db8000e2cb8000d2a2db8000f2c4b20b003265358b0401b
b000598a8a20b0032653582321b0808a8a1b8a235920b0032653582321b8
00c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800102c4b535845441b
2121592d00010000000100001b6d7f835f0f3cf50111080000000000a1cd
888000000000d1846d3bfeaafd9c08c0069e000000060001000000000000
00010000059cfd9c00000856feaafbdc0881000100000000000000000000
0000000000c704cd00660000000000fa00000200000002aa00dd0400fffa
06aa00810639006002aa005e02aa00600464005a02000058020000890239
fff20400003b040000a00400003d0400003b040000330400002b04000054
04000039040000520400004c023900a00239007904640060046400580464
0060038d007d02aa005402aa00540400ffee03d7009e019a00a003d7009e
0333007903ae00ae0464005c05b4006d0464005a0464005804640058049c
009603f4007f05b4004a0696003d046400230231ff480625006605b400d5
0464ffe30400ffec0464001f04e5002b080000d90464005803f400060156
feaa06520071046400580464006d0464005804d3011d07e5007307e50073
04d3011d085600ac05b400370625009806250098057d0252057d008f05c7
fff60556003104d3003504e3002904e3002905c7002b05ee005802aa0039
05c7003f057d001d071d003f05c700270529007105c700560625002f0473
002f04bc001204e300210585001b061b004605c70019065c0002050c0046
04640089034a000203f4004803f4002704d30012042b005e02a2009c0464
000e04640023042b000003f20021046400420464007d04d3004803830054
0383ffcf049cfff8042b003304640014057dfff8057d00460200008901fa
0083034a00930606007306060021060600cd0606008105b400c90400049c
0383001406250025062500250464005805b4003705b4003705b4003705b4
003705b4003704d300b207e5004407e5004404d300b20856007d0544004a
05b4003704d300a604d300a40625008d06e7014c06960050057d02520696
0127031200be031200be031200810312008105b400480464004a04000091
02a2003502a20035050c001205b4fff604d3003d0383006d05b400310312
008d0312008d031200250312002507e5013f03f401b603f4005a03f401b6
03f401b603f4006603f401b603f4006604f6ffec04d3022d0800ff7f0312
008d031200be031201fc031201cd0652006206520062071f013506520048
06520048064a00c1057d005e065c003d0464001f0544007d05f4ffb20200
fff202000000020000000200000002000000020000000000002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022003a003a003a
003a003a003a003a003a003a003a003a003a003a003a003a003a003a003a
003a003a003a003a003a003a003a003a003a003a003a003a003a003a003a
003a003a003a003a003a003a003a00900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
009000900090009000900090009000900090009000900090009000900090
00900001000000c7007a0004000000000002001000400011000007e808f3
000100010000000800660001000000000003000d00000001000000000004
000d000d0001000000000006000d001a0003000004090001001a00270003
000004090002000e00410003000004090003001a004f0003000004090004
001a00690003000004090006001a0083464a4346424a2b53796d626f6c46
4a4346424a2b53796d626f6c464a4346424a2b53796d626f6c0046004a00
4300460042004a002b00530079006d0062006f006c005200650067007500
6c006100720046004a004300460042004a002b00530079006d0062006f00
6c0046004a004300460042004a002b00530079006d0062006f006c004600
4a004300460042004a002b00530079006d0062006f006c00b800072b01ba
0007010f00092b01bf0111005400490039002900190000000f2bbf011200
e600d000a2005e00450000000f2bbf011300610049003900290019000000
0f2bbf0114003c002e0024001a00100000000f2bbf01150033002e002400
1a00100000000f2b00bf010b011300d000a2007d00450000000f2bbf010c
00b300930072005e002a0000000f2bbf010d0091006f0056003e002a0000
000f2bbf010e007e006f0056003e002a0000000f2bbf010f005f00490039
002900190000000f2bbf0110005200490039002900190000000f2b00ba01
160004000e2bb8010a20457d69184441ff0280010500fe0003010400fe00
030103007d0003010200fe0003010100fe0003010000fe000300ff00fe00
0300fe00fe000300fd00fe000300fc00fe000300fb00fe000300fa00fe00
0300f800fe000300f700fe000300f600fe000300f500fe000300f400fe00
0300f300fe000300f200fe000300f100fe000300f000fe000300ef00fe00
0300ee00fe000300ed00fe000300ec00fe000300eb0000000300ea00fe00
0300e900e80064000500e900fe000300e80064000300e700fe000300e600
fe000300e500fe000300e400fe000300e300fe000300e200fe000300e100
fe000300df00fe000300de00fe000300dc00fe000300db00fe000300da00
fe000300d900fe000300d800fe000300d700fe000300d60084001d000500
d60023000300d200fe000300d20023000400d100fe000300d000fe000300
d00023000400cf00fe000300ce00fe000300cc00fe000300cb00c8000300
ca00fe000300c900fe000300c800fe000300c700fe000300c60064000300
c500fe000300c400fe000300c300fe000300c100fe000300bf00fe000300
be00fe000300bd00fe000300bc00fe000300bb00fe000300ba00b9004f00
0500ba00fe000300baffd0000400b9004f000300b800b7000e000500b800
16000300b80080000400b700b60006000500b7000e000300b70040000400
b60006000300b50032000300b40082000341ff00b300a00033000500b300
5c000300b30040000400b200fe000300b10064000300b000af00ba000500
b000fe000300af00ae0076000500af00ba000300af0080000400ae00a000
33000500ae0076000300ae0040000400ab004b000300aa00fe000300a900
fe000300a800fe000300a70064000300a6003a000300a50064000300a400
fe000300a3005c000300a20064000300a100a00033000500a1003f000300
a10040000400a000330003009f003a0003009e00410003009d00d2000300
9c00fe0003009b004b0003009a00fe0003009900fe00030098007d000300
9700380003009600fe0003009500fe00030094003a00030093007d000300
92007d0003009100640003009000fe0003008f00fa0003008e003a000300
8d007d0003008c007d0003008b00c80003008a00fe0003008900fe000300
88002800030088fff00004008700fe0003008600fe000300850084001d00
050085003e00030084001d00030083008200330005008300fe00030083ff
d000040082003300030081008000dc0005008100fe0003008100c0000400
80007f008c0005008000dc0003008000800004007f007e003c0005007f00
8c0003007f00400004007e003c0003007d00fe0003007c00fe0003007b00
7a003c0005007b00fe0003007bffd00004007a003c0003007900fe000300
7800fe0003007700fe0003007600640003007541ff00fe00030073007200
450005007300fe00030073ffd000040072004500030071007000ba000500
7100fe00030070006f00760005007000ba0003007000800004006f006e00
260005006f00760003006f00400004006e00260003006b00fe0003006800
fe0003006700fe0003006500fe0003006300fe0003005f00fe0003005e00
fe0003005d00fe0003005c00fe0003005b005a00640005005b00fe000300
5a00640003005900fe0003005800fe0003005700fe0003005600fe000300
5500fe0003005400fe00030053007d0003005200fe0003005000fe000300
4f00fe0003004e00fe0003004d00fe0003004c00fe0003004b00fe000300
48ffe00004004700640003004600fe0003004400230004004300fe000300
4200fe0003004100fe0003004000260003003f00fe0003003e00fe000300
3d00fe0003003c00fe0003003b00fe0003003a00fe000300390043000300
3800fe0003003700fe0003003400fe0003003300fe0003003200fe000300
3100340003003000fe0003002f00fe0003002e00fe0003002d00fe000300
2c00480003002b00fe0003002a00fe0003002900fe000300280027003a00
05002800fe00030027003a0003002600fe0003002500fe00030024000f00
030023001b0003002200960003002100fe0003002000550003001f003a00
03001e00fe0003001d003a0003001c003a0003001b417600640003001a00
640003001900480003001800fe0003001700fe0003001600fe0003001500
fe00030015001000040014001100250005001400fe000300130012004b00
0500130096000300120011002500050012004b0003001100250003001000
fe0003001000100004000f00fa0003000e00fe0003000d00fe0003000c00
fe0003000b00fe0003000a00fe0003000900fe0003000800fe0003000700
350003000600ce0003000500fe0003000400fe0003000300fe0003000200
1d00030002001000040001006400030060001b0060001d0080000d009000
0d00a0000d00b0000d00c0000d00070001014c858d01732b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b1d0000>
[289 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 68 60 <00010058019e040c0229000300134008028c008b0400010410d4c4310010
fcec3001213521040cfc4c03b4019e8b0000>BWWAAA+Symbol AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>BWWAAA+Symbol AddT42Char 
BWWAAA+Symbol /CharStrings get begin
/g60 60 def
end
BWWAAA+Symbol /Encoding get
dup 32 /g60 put
pop
end
%ADOEndSubsetFont
/LCKXDC+Symbol /BWWAAA+Symbol findfont ct_VMDictPut/LCKXDC+Symbol*1 [32{/.notdef}rp /g60 223{/.notdef}rp]LCKXDC+Symbol nfLCKXDC+Symbol*1 [18.4707 0 0 -18.4707 0 0 ]msf114.296 420.265 mo( )shLCKXDB+Helvetica*1 [28.1458 0 0 -28.1458 0 0 ]msf83.524 431.696 mo(10)[15.6491 0 ]xsh148.413 399.46 mo
140.857 399.46 li
148.413 387.318 mo
140.857 387.318 li
148.413 378.952 mo
140.857 378.952 li
148.413 372.206 mo
140.857 372.206 li
148.413 366.81 mo
140.857 366.81 li
148.413 362.222 mo
140.857 362.222 li
148.413 358.175 mo
140.857 358.175 li
148.413 354.667 mo
140.857 354.667 li
155.968 351.698 mo
140.857 351.698 li
@
%ADOBeginSubsetFont: STYPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal STYPMX+Helvetica gcheck setglobal} if
1 1760 13 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>STYPMX+Helvetica AddT42Char 
STYPMX+Helvetica /CharStrings get begin
/three 13 def
end
STYPMX+Helvetica /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDB+Helvetica*1 [48{/.notdef}rp /zero /one /.notdef /three /four 203{/.notdef}rp]LCKXDB+Helvetica nfLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf124.846 350.811 mo(3)shLCKXDC+Symbol*1 [18.4707 0 0 -18.4707 0 0 ]msf114.296 350.811 mo( )shLCKXDB+Helvetica*1 [28.1458 0 0 -28.1458 0 0 ]msf83.524 363.118 mo(10)[15.6491 0 ]xsh148.413 330.921 mo
140.857 330.921 li
148.413 318.778 mo
140.857 318.778 li
148.413 310.413 mo
140.857 310.413 li
148.413 303.667 mo
140.857 303.667 li
148.413 298.27 mo
140.857 298.27 li
148.413 293.683 mo
140.857 293.683 li
148.413 289.635 mo
140.857 289.635 li
148.413 286.127 mo
140.857 286.127 li
155.968 283.159 mo
140.857 283.159 li
@
%ADOBeginSubsetFont: STYPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal STYPMX+Helvetica gcheck setglobal} if
1 1480 12 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>STYPMX+Helvetica AddT42Char 
STYPMX+Helvetica /CharStrings get begin
/two 12 def
end
STYPMX+Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDB+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]LCKXDB+Helvetica nfLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf124.846 283.11 mo(2)shLCKXDC+Symbol*1 [18.4707 0 0 -18.4707 0 0 ]msf114.296 283.11 mo( )shLCKXDB+Helvetica*1 [28.1458 0 0 -28.1458 0 0 ]msf83.524 294.541 mo(10)[15.6491 0 ]xsh148.413 262.381 mo
140.857 262.381 li
148.413 250.508 mo
140.857 250.508 li
148.413 241.873 mo
140.857 241.873 li
148.413 235.127 mo
140.857 235.127 li
148.413 229.73 mo
140.857 229.73 li
148.413 225.143 mo
140.857 225.143 li
148.413 221.365 mo
140.857 221.365 li
148.413 217.857 mo
140.857 217.857 li
155.968 214.619 mo
140.857 214.619 li
@
LCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf127.484 215.412 mo(1)shLCKXDC+Symbol*1 [18.4707 0 0 -18.4707 0 0 ]msf116.934 215.412 mo( )shLCKXDB+Helvetica*1 [28.1458 0 0 -28.1458 0 0 ]msf86.1616 226.843 mo(10)[15.6491 0 ]xsh148.413 194.111 mo
140.857 194.111 li
148.413 181.968 mo
140.857 181.968 li
148.413 173.333 mo
140.857 173.333 li
148.413 166.857 mo
140.857 166.857 li
148.413 161.46 mo
140.857 161.46 li
148.413 156.873 mo
140.857 156.873 li
148.413 152.825 mo
140.857 152.825 li
148.413 149.318 mo
140.857 149.318 li
155.968 146.079 mo
140.857 146.079 li
@
LCKXDB+Helvetica*1 [28.1458 0 0 -28.1458 0 0 ]msf119.124 158.095 mo(1)sh148.413 125.571 mo
140.857 125.571 li
148.413 113.429 mo
140.857 113.429 li
148.413 104.794 mo
140.857 104.794 li
148.413 98.3175 mo
140.857 98.3175 li
148.413 92.9207 mo
140.857 92.9207 li
148.413 88.3334 mo
140.857 88.3334 li
148.413 84.2858 mo
140.857 84.2858 li
148.413 80.7778 mo
140.857 80.7778 li
155.968 77.5397 mo
140.857 77.5397 li
@
LCKXDB+Helvetica*1 [28.1458 0 0 -28.1458 0 0 ]msf103.473 89.6179 mo(10)[15.6491 0 ]xsh562.889 468 mo
562.889 77.5397 li
555.333 468 mo
562.889 468 li
555.333 455.857 mo
562.889 455.857 li
555.333 447.222 mo
562.889 447.222 li
555.333 440.746 mo
562.889 440.746 li
555.333 435.349 mo
562.889 435.349 li
555.333 430.762 mo
562.889 430.762 li
555.333 426.714 mo
562.889 426.714 li
555.333 423.206 mo
562.889 423.206 li
547.778 419.968 mo
562.889 419.968 li
555.333 399.46 mo
562.889 399.46 li
555.333 387.318 mo
562.889 387.318 li
555.333 378.952 mo
562.889 378.952 li
555.333 372.206 mo
562.889 372.206 li
555.333 366.81 mo
562.889 366.81 li
555.333 362.222 mo
562.889 362.222 li
555.333 358.175 mo
562.889 358.175 li
555.333 354.667 mo
562.889 354.667 li
547.778 351.698 mo
562.889 351.698 li
555.333 330.921 mo
562.889 330.921 li
555.333 318.778 mo
562.889 318.778 li
555.333 310.413 mo
562.889 310.413 li
555.333 303.667 mo
562.889 303.667 li
555.333 298.27 mo
562.889 298.27 li
555.333 293.683 mo
562.889 293.683 li
555.333 289.635 mo
562.889 289.635 li
555.333 286.127 mo
562.889 286.127 li
547.778 283.159 mo
562.889 283.159 li
555.333 262.381 mo
562.889 262.381 li
555.333 250.508 mo
562.889 250.508 li
555.333 241.873 mo
562.889 241.873 li
555.333 235.127 mo
562.889 235.127 li
555.333 229.73 mo
562.889 229.73 li
555.333 225.143 mo
562.889 225.143 li
555.333 221.365 mo
562.889 221.365 li
555.333 217.857 mo
562.889 217.857 li
547.778 214.619 mo
562.889 214.619 li
555.333 194.111 mo
562.889 194.111 li
555.333 181.968 mo
562.889 181.968 li
555.333 173.333 mo
562.889 173.333 li
555.333 166.857 mo
562.889 166.857 li
555.333 161.46 mo
562.889 161.46 li
555.333 156.873 mo
562.889 156.873 li
555.333 152.825 mo
562.889 152.825 li
555.333 149.318 mo
562.889 149.318 li
547.778 146.079 mo
562.889 146.079 li
555.333 125.571 mo
562.889 125.571 li
555.333 113.429 mo
562.889 113.429 li
555.333 104.794 mo
562.889 104.794 li
555.333 98.3175 mo
562.889 98.3175 li
555.333 92.9207 mo
562.889 92.9207 li
555.333 88.3334 mo
562.889 88.3334 li
555.333 84.2858 mo
562.889 84.2858 li
555.333 80.7778 mo
562.889 80.7778 li
547.778 77.5397 mo
562.889 77.5397 li
@
%ADOBeginSubsetFont: STYPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal STYPMX+Helvetica gcheck setglobal} if

1 0 1 <> STYPMX+Helvetica AddT42Char 
1 508 3 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>STYPMX+Helvetica AddT42Char 
1 652 4 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>STYPMX+Helvetica AddT42Char 
1 888 6 <000100aafed0018000da000e002d401600230e0a64080a1017171a07340a
640008190f6365182b4e10f44d3cfded4e456544e6003f4dedd4ed313017
3637363534262723353315140607aa451c0f01026dd66076d10c552d2a07
0b07daca77b415000000>STYPMX+Helvetica AddT42Char 
1 988 7 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>STYPMX+Helvetica AddT42Char 
1 1112 9 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>STYPMX+Helvetica AddT42Char 
1 4740 25 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>STYPMX+Helvetica AddT42Char 
1 5356 27 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>STYPMX+Helvetica AddT42Char 
1 6212 30 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>STYPMX+Helvetica AddT42Char 
1 6304 31 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>STYPMX+Helvetica AddT42Char 
1 6896 33 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>STYPMX+Helvetica AddT42Char 
1 7156 34 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>STYPMX+Helvetica AddT42Char 
1 7372 35 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>STYPMX+Helvetica AddT42Char 
1 7776 36 <0003003dfe3b03e80449001f002d002e00b7404d36144908490958085909
880ca91ba81da927a62bb91b0b4008031622290ec40a221d1f070406291d
190a121d0a0f2e072e2e051c032e162e2d29051a300c0e270d3e26271c19
2f3087217242182b2b4ef44dedf4ed394e10f64dfde4f51112392f003f3f
ed3fed3f3fed10ed1112393931304379402c23281a1e0b1124251026231e
262600281a262600110b0e21000f0e0c0d251d222601271b2926000f0c12
2100002b2b2b01103c103c2b2b2b2b2b818181005d001716173533111407
06212226273316171633323736270e012322241110003300262322070615
1416333237363501027c5e3335a63c70fec9adec0eb70d273d83cf402603
36987daefefb0107ba0144a47fbe4625937cc24f2cfed104423e234387fc
32cc76da9ba548273c9256dd5250f7011d010d012efea1c0b25f9ab5bdaf
6384022d0000>STYPMX+Helvetica AddT42Char 
1 8112 37 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>STYPMX+Helvetica AddT42Char 
1 8272 38 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>STYPMX+Helvetica AddT42Char 
1 8364 39 <0002ffdafe50013805bd00030011002fb800532bba0000000100562bb800
0110b80007d0b8000010b80009d000b8000e2fb800112fba000300000056
2b303101233533013e0135113311140706232226270138b4b4fea27931b4
263fb00d1d1f04edd0f93404235c04b6fb37753a620203000000>STYPMX+Helvetica AddT42Char 
1 9136 43 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>STYPMX+Helvetica AddT42Char 
1 9376 44 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>STYPMX+Helvetica AddT42Char 
1 9604 45 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>STYPMX+Helvetica AddT42Char 
1 9744 46 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>STYPMX+Helvetica AddT42Char 
1 10192 47 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>STYPMX+Helvetica AddT42Char 
STYPMX+Helvetica /CharStrings get begin
/space 1 def
/parenleft 3 def
/parenright 4 def
/comma 6 def
/hyphen 7 def
/slash 9 def
/G 25 def
/N 27 def
/T 30 def
/V 31 def
/c 33 def
/d 34 def
/e 35 def
/g 36 def
/h 37 def
/i 38 def
/j 39 def
/o 43 def
/p 44 def
/r 45 def
/s 46 def
/t 47 def
end
STYPMX+Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 47 /slash put
dup 71 /G put
dup 78 /N put
dup 84 /T put
dup 86 /V put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDB+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /.notdef /slash /zero /one /two /three /four 18{/.notdef}rp /G 6{/.notdef}rp /N 5{/.notdef}rp /T /.notdef /V 12{/.notdef}rp /c /d /e /.notdef /g /h /i /j 4{/.notdef}rp /o /p /.notdef /r /s /t 139{/.notdef}rp]LCKXDB+Helvetica nfLCKXDB+Helvetica*1 [0 -14.9524 -14.9524 0 0 0 ]msf50.9935 105.511 mo(-1)[-4.97906 0 ]yshLCKXDB+Helvetica*1 [0 -21.9889 -21.9889 0 0 0 ]msf61.544 199.586 mo(\)  \(GeV/c\))[-7.32214 -6.11292 -6.11292 -7.32214 -17.1074 -12.2258 -14.6667 -6.11298 -10.9944 0 ]yshLCKXDB+Helvetica*1 [0 -14.9524 -14.9524 0 0 0 ]msf72.9737 216.292 mo(jet)[-3.31946 -8.31354 0 ]ysh%ADOBeginSubsetFont: BWWAAA+Symbol AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BWWAAA+Symbol gcheck setglobal} if
1 116 100 <00010012fe4e042703ac0022004340231b2101070408100a110d04a7111e
18b000b1081215101b0907002c211015072c21092310d4c4ecd4c410ee11
123911123931002fe5f63cc6ee3211393912173930011134262322021511
231134262322061d01232e01353436333216173e01333216151103683f50
7fa6c02a2c3031290101655c6e6e0132ac849481fe4e04108d67feb8fefe
f402a05c5654521d081211757db5babdb2c7edfc5600>BWWAAA+Symbol AddT42Char 
BWWAAA+Symbol /CharStrings get begin
/g100 100 def
end
BWWAAA+Symbol /Encoding get
dup 33 /g100 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDC+Symbol*1 [32{/.notdef}rp /g60 /g100 222{/.notdef}rp]LCKXDC+Symbol nfLCKXDC+Symbol*1 [0 -21.9889 -21.9889 0 0 0 ]msf61.544 228.6 mo(!)shLCKXDB+Helvetica*1 [0 -21.9889 -21.9889 0 0 0 ]msf61.544 240.029 mo(d)shLCKXDB+Helvetica*1 [0 -14.9524 -14.9524 0 0 0 ]msf72.9737 288.386 mo(T,jet)[-9.13583 -4.15677 -3.31943 -8.31357 0 ]ysh48.356 288.386 mo(reco,ch)[-4.97903 -8.31357 -7.4762 -8.31357 -4.1568 -7.47623 0 ]yshLCKXDB+Helvetica*1 [0 -21.9889 -21.9889 0 0 0 ]msf61.544 327.07 mo(/\(dp)[-6.11295 -7.32214 -12.2258 0 ]yshLCKXDB+Helvetica*1 [0 -14.9524 -14.9524 0 0 0 ]msf67.6983 350.811 mo(jets)[-3.31946 -8.31354 -4.15677 0 ]yshLCKXDB+Helvetica*1 [0 -21.9889 -21.9889 0 0 0 ]msf61.544 365.757 mo(N)shLCKXDB+Helvetica*1 [0 -14.9524 -14.9524 0 0 0 ]msf50.9935 373.669 mo(2)shLCKXDB+Helvetica*1 [0 -21.9889 -21.9889 0 0 0 ]msf61.544 398.287 mo(\) d)[-7.32214 -6.11295 0 ]yshLCKXDB+Helvetica*1 [0 -14.9524 -14.9524 0 0 0 ]msf72.9737 418.508 mo(trig)[-4.1568 -4.97903 -3.31946 0 ]yshLCKXDB+Helvetica*1 [0 -21.9889 -21.9889 0 0 0 ]msf61.544 458.952 mo(\(1/N)[-7.32214 -12.2259 -6.11288 0 ]ysh174.587 468 mo
174.587 333.349 li
178.365 249.159 li
181.333 190.603 li
182.682 173.873 li
183.762 164.968 li
185.111 162.54 li
186.191 131.778 li
187.54 131.508 li
188.619 133.397 li
189.968 135.825 li
191.048 138.794 li
192.397 142.302 li
193.476 145.81 li
194.825 149.587 li
195.905 153.635 li
197.254 157.413 li
198.333 161.46 li
199.682 165.778 li
200.762 169.825 li
202.651 176.032 li
205.079 184.667 li
208.048 195.46 li
211.825 208.413 li
215.873 224.063 li
221.54 244.841 li
228.016 271.286 li
236.651 305.286 li
247.444 350.079 li
260.936 406.476 li
275.238 468 li
511.889 468 li
.598749 .514733 .509422 .206455 cmyk
currentcolor
/24852884.0 
<<
/ID /24852884.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 100 100 ] 
/XStep 100 
/YStep 100 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
100 0 li
100 100 li
0 100 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 0 mo
100 100 li
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/24852884.0 /Pattern get_res
[.0647619 0 0 -.0647619 0 757 ]make_pattern set_pattern
ef
2 vmreclaim
1.61905 lw
0 lc
0 lj
10 ml
[3.2381 3.2381 ] 0 dsh
true sadj
174.587 468 mo
174.587 333.349 li
178.365 249.159 li
181.333 190.603 li
182.683 173.873 li
183.762 164.968 li
185.111 162.54 li
186.19 131.778 li
187.54 131.508 li
188.619 133.397 li
189.968 135.825 li
191.048 138.794 li
192.397 142.302 li
193.476 145.81 li
194.825 149.587 li
195.905 153.635 li
197.254 157.413 li
198.333 161.46 li
199.683 165.778 li
200.762 169.825 li
202.651 176.032 li
205.079 184.667 li
208.048 195.46 li
211.825 208.413 li
215.873 224.064 li
221.54 244.841 li
228.016 271.286 li
236.651 305.286 li
247.444 350.079 li
260.936 406.476 li
275.238 468 li
356.73 468 mo
cp
356.73 468 mo
511.889 468 li
false sop
.750179 .679652 .670191 .901488 cmyk
@
174.587 468 mo
174.587 333.349 li
178.365 249.159 li
181.333 190.603 li
181.333 468 li
.865354 .616693 3.0518e-05 3.0518e-05 cmyk
currentcolor
gsave
grestore
/24852688.0 
<<
/ID /24852688.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 100 100 ] 
/XStep 100 
/YStep 100 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
100 0 li
100 100 li
0 100 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 0 mo
100 100 li
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/24852688.0 /Pattern get_res
[.0647619 0 0 -.0647619 0 757 ]make_pattern set_pattern
ef
2 vmreclaim
.809524 lw
0 lc
0 lj
10 ml
[3.2381 3.2381 ] 0 dsh
true sadj
174.587 468 mo
174.587 333.349 li
178.365 249.159 li
181.333 190.603 li
181.333 468 li
false sop
.750179 .679652 .670191 .901488 cmyk
@
[] 0 dsh
174.587 315.54 mo
172.159 315.54 li
172.159 318.238 mo
172.159 312.841 li
174.587 315.54 mo
177.016 315.54 li
177.016 318.238 mo
177.016 312.841 li
174.587 315.54 mo
174.587 306.635 li
172.159 306.635 mo
177.286 306.635 li
174.587 315.54 mo
174.587 328.492 li
172.159 328.492 mo
177.286 328.492 li
178.365 254.286 mo
177.016 254.286 li
177.016 256.984 mo
177.016 251.587 li
178.365 254.286 mo
179.444 254.286 li
179.444 256.984 mo
179.444 251.587 li
178.365 254.286 mo
178.365 249.429 li
175.667 249.429 mo
181.063 249.429 li
178.365 254.286 mo
178.365 260.222 li
175.667 260.222 mo
181.063 260.222 li
180.254 219.206 mo
179.444 219.206 li
179.444 221.905 mo
179.444 216.508 li
180.254 219.206 mo
180.794 219.206 li
180.794 221.905 mo
180.794 216.508 li
180.254 219.206 mo
180.254 215.159 li
177.556 215.159 mo
182.683 215.159 li
180.254 219.206 mo
180.254 223.524 li
177.556 223.524 mo
182.683 223.524 li
181.333 187.095 mo
180.794 187.095 li
180.794 189.794 mo
180.794 184.397 li
181.333 187.095 mo
181.873 187.095 li
181.873 189.794 mo
181.873 184.397 li
181.333 187.095 mo
181.333 184.937 li
178.635 184.937 mo
184.032 184.937 li
181.333 187.095 mo
181.333 189.794 li
178.635 189.794 mo
184.032 189.794 li
182.683 175.222 mo
181.873 175.222 li
181.873 177.921 mo
181.873 172.524 li
182.683 175.222 mo
183.222 175.222 li
183.222 177.921 mo
183.222 172.524 li
182.683 175.222 mo
182.683 173.333 li
179.984 173.333 mo
185.111 173.333 li
182.683 175.222 mo
182.683 177.381 li
179.984 177.381 mo
185.111 177.381 li
183.762 166.857 mo
183.222 166.857 li
183.222 169.556 mo
183.222 164.159 li
183.762 166.857 mo
184.302 166.857 li
184.302 169.556 mo
184.302 164.159 li
183.762 166.857 mo
183.762 165.238 li
181.063 165.238 mo
186.46 165.238 li
183.762 166.857 mo
183.762 168.746 li
181.063 168.746 mo
186.46 168.746 li
185.111 163.079 mo
184.302 163.079 li
184.302 165.778 mo
184.302 160.651 li
185.111 163.079 mo
185.651 163.079 li
185.651 165.778 mo
185.651 160.651 li
185.111 163.079 mo
185.111 161.73 li
182.413 161.73 mo
187.54 161.73 li
185.111 163.079 mo
185.111 164.968 li
182.413 164.968 mo
187.54 164.968 li
186.19 128.27 mo
185.651 128.27 li
185.651 130.968 mo
185.651 125.841 li
186.19 128.27 mo
186.73 128.27 li
186.73 130.968 mo
186.73 125.841 li
186.19 128.27 mo
186.19 127.46 li
183.492 127.46 mo
188.889 127.46 li
186.19 128.27 mo
186.19 129.349 li
183.492 129.349 mo
188.889 129.349 li
@
187.54 126.921 mo
186.73 126.921 li
186.73 129.619 mo
186.73 124.222 li
187.54 126.921 mo
188.079 126.921 li
188.079 129.619 mo
188.079 124.222 li
187.54 126.921 mo
187.54 125.841 li
184.841 125.841 mo
189.968 125.841 li
187.54 126.921 mo
187.54 127.73 li
184.841 127.73 mo
189.968 127.73 li
188.619 128 mo
188.079 128 li
188.079 130.429 mo
188.079 125.302 li
188.619 128 mo
189.159 128 li
189.159 130.429 mo
189.159 125.302 li
188.619 128 mo
188.619 126.921 li
185.921 126.921 mo
191.317 126.921 li
188.619 128 mo
188.619 128.81 li
185.921 128.81 mo
191.317 128.81 li
189.968 130.429 mo
189.159 130.429 li
189.159 133.127 mo
189.159 127.73 li
189.968 130.429 mo
190.508 130.429 li
190.508 133.127 mo
190.508 127.73 li
189.968 130.429 mo
189.968 129.619 li
187.27 129.619 mo
192.397 129.619 li
189.968 130.429 mo
189.968 131.508 li
187.27 131.508 mo
192.397 131.508 li
191.048 133.127 mo
190.508 133.127 li
190.508 135.825 mo
190.508 130.698 li
191.048 133.127 mo
191.587 133.127 li
191.587 135.825 mo
191.587 130.698 li
191.048 133.127 mo
191.048 132.318 li
188.349 132.318 mo
193.746 132.318 li
191.048 133.127 mo
191.048 134.206 li
188.349 134.206 mo
193.746 134.206 li
192.397 135.556 mo
191.587 135.556 li
191.587 138.254 mo
191.587 132.857 li
192.397 135.556 mo
192.936 135.556 li
192.936 138.254 mo
192.936 132.857 li
192.397 135.556 mo
192.397 134.476 li
189.698 134.476 mo
194.825 134.476 li
192.397 135.556 mo
192.397 136.635 li
189.698 136.635 mo
194.825 136.635 li
193.476 137.175 mo
192.936 137.175 li
192.936 139.873 mo
192.936 134.476 li
193.476 137.175 mo
194.016 137.175 li
194.016 139.873 mo
194.016 134.476 li
193.476 137.175 mo
193.476 136.095 li
190.778 136.095 mo
196.175 136.095 li
193.476 137.175 mo
193.476 138.254 li
190.778 138.254 mo
196.175 138.254 li
194.825 138.794 mo
194.016 138.794 li
194.016 141.492 mo
194.016 136.365 li
194.825 138.794 mo
195.365 138.794 li
195.365 141.492 mo
195.365 136.365 li
194.825 138.794 mo
194.825 137.714 li
192.127 137.714 mo
197.254 137.714 li
194.825 138.794 mo
194.825 140.143 li
192.127 140.143 mo
197.254 140.143 li
195.905 142.571 mo
195.365 142.571 li
195.365 145.27 mo
195.365 139.873 li
195.905 142.571 mo
196.444 142.571 li
196.444 145.27 mo
196.444 139.873 li
195.905 142.571 mo
195.905 141.222 li
193.206 141.222 mo
198.603 141.222 li
195.905 142.571 mo
195.905 143.651 li
193.206 143.651 mo
198.603 143.651 li
@
197.254 146.619 mo
196.444 146.619 li
196.444 149.318 mo
196.444 143.921 li
197.254 146.619 mo
197.794 146.619 li
197.794 149.318 mo
197.794 143.921 li
197.254 146.619 mo
197.254 145.27 li
194.556 145.27 mo
199.683 145.27 li
197.254 146.619 mo
197.254 147.968 li
194.556 147.968 mo
199.683 147.968 li
198.333 149.048 mo
197.794 149.048 li
197.794 151.476 mo
197.794 146.349 li
198.333 149.048 mo
198.873 149.048 li
198.873 151.476 mo
198.873 146.349 li
198.333 149.048 mo
198.333 147.698 li
195.635 147.698 mo
201.032 147.698 li
198.333 149.048 mo
198.333 150.397 li
195.635 150.397 mo
201.032 150.397 li
199.683 153.095 mo
198.873 153.095 li
198.873 155.794 mo
198.873 150.667 li
199.683 153.095 mo
200.222 153.095 li
200.222 155.794 mo
200.222 150.667 li
199.683 153.095 mo
199.683 151.746 li
196.984 151.746 mo
202.111 151.746 li
199.683 153.095 mo
199.683 154.714 li
196.984 154.714 mo
202.111 154.714 li
200.762 155.524 mo
200.222 155.524 li
200.222 158.222 mo
200.222 152.825 li
200.762 155.524 mo
201.302 155.524 li
201.302 158.222 mo
201.302 152.825 li
200.762 155.524 mo
200.762 154.175 li
198.063 154.175 mo
203.46 154.175 li
200.762 155.524 mo
200.762 157.143 li
198.063 157.143 mo
203.46 157.143 li
202.651 161.46 mo
201.302 161.46 li
201.302 163.889 mo
201.302 158.762 li
202.651 161.46 mo
203.73 161.46 li
203.73 163.889 mo
203.73 158.762 li
202.651 161.46 mo
202.651 160.111 li
199.952 160.111 mo
205.349 160.111 li
202.651 161.46 mo
202.651 162.54 li
199.952 162.54 mo
205.349 162.54 li
205.079 167.397 mo
203.73 167.397 li
203.73 169.825 mo
203.73 164.698 li
205.079 167.397 mo
206.159 167.397 li
206.159 169.825 mo
206.159 164.698 li
205.079 167.397 mo
205.079 166.048 li
202.381 166.048 mo
207.778 166.048 li
205.079 167.397 mo
205.079 168.746 li
202.381 168.746 mo
207.778 168.746 li
208.048 173.333 mo
206.159 173.333 li
206.159 176.032 mo
206.159 170.635 li
208.048 173.333 mo
209.936 173.333 li
209.936 176.032 mo
209.936 170.635 li
208.048 173.333 mo
208.048 172.254 li
205.349 172.254 mo
210.746 172.254 li
208.048 173.333 mo
208.048 174.413 li
205.349 174.413 mo
210.746 174.413 li
211.825 185.476 mo
209.936 185.476 li
209.936 188.175 mo
209.936 182.778 li
211.825 185.476 mo
213.444 185.476 li
213.444 188.175 mo
213.444 182.778 li
211.825 185.476 mo
211.825 184.127 li
209.127 184.127 mo
214.254 184.127 li
211.825 185.476 mo
211.825 187.095 li
209.127 187.095 mo
214.254 187.095 li
@
215.873 195.73 mo
213.444 195.73 li
213.444 198.159 mo
213.444 193.032 li
215.873 195.73 mo
218.302 195.73 li
218.302 198.159 mo
218.302 193.032 li
215.873 195.73 mo
215.873 194.111 li
213.444 194.111 mo
218.571 194.111 li
215.873 195.73 mo
215.873 197.079 li
213.444 197.079 mo
218.571 197.079 li
@
221.54 206.794 mo
218.302 206.794 li
218.302 209.492 mo
218.302 204.365 li
221.54 206.794 mo
224.508 206.794 li
224.508 209.492 mo
224.508 204.365 li
221.54 206.794 mo
221.54 205.445 li
218.841 205.445 mo
223.968 205.445 li
221.54 206.794 mo
221.54 208.413 li
218.841 208.413 mo
223.968 208.413 li
228.016 224.064 mo
224.508 224.064 li
224.508 226.492 mo
224.508 221.365 li
228.016 224.064 mo
231.794 224.064 li
231.794 226.492 mo
231.794 221.365 li
228.016 224.064 mo
228.016 222.175 li
225.587 222.175 mo
230.714 222.175 li
228.016 224.064 mo
228.016 225.952 li
225.587 225.952 mo
230.714 225.952 li
236.651 236.476 mo
231.794 236.476 li
231.794 238.905 mo
231.794 233.778 li
236.651 236.476 mo
241.508 236.476 li
241.508 238.905 mo
241.508 233.778 li
236.651 236.476 mo
236.651 234.318 li
233.952 234.318 mo
239.349 234.318 li
236.651 236.476 mo
236.651 238.635 li
233.952 238.635 mo
239.349 238.635 li
247.444 252.397 mo
241.508 252.397 li
241.508 255.095 mo
241.508 249.698 li
247.444 252.397 mo
253.651 252.397 li
253.651 255.095 mo
253.651 249.698 li
247.444 252.397 mo
247.444 249.968 li
244.746 249.968 mo
250.143 249.968 li
247.444 252.397 mo
247.444 254.825 li
244.746 254.825 mo
250.143 254.825 li
260.936 257.254 mo
253.651 257.254 li
253.651 259.683 mo
253.651 254.556 li
260.936 257.254 mo
268.222 257.254 li
268.222 259.683 mo
268.222 254.556 li
260.936 257.254 mo
260.936 254.825 li
258.238 254.825 mo
263.365 254.825 li
260.936 257.254 mo
260.936 259.683 li
258.238 259.683 mo
263.365 259.683 li
277.127 275.064 mo
268.222 275.064 li
268.222 277.762 mo
268.222 272.365 li
277.127 275.064 mo
286.302 275.064 li
286.302 277.762 mo
286.302 272.365 li
277.127 275.064 mo
277.127 272.365 li
274.698 272.365 mo
279.825 272.365 li
277.127 275.064 mo
277.127 278.032 li
274.698 278.032 mo
279.825 278.032 li
297.905 286.397 mo
286.302 286.397 li
286.302 289.095 mo
286.302 283.968 li
297.905 286.397 mo
309.508 286.397 li
309.508 289.095 mo
309.508 283.968 li
297.905 286.397 mo
297.905 283.429 li
295.206 283.429 mo
300.603 283.429 li
297.905 286.397 mo
297.905 289.905 li
295.206 289.905 mo
300.603 289.905 li
324.079 299.889 mo
309.508 299.889 li
309.508 302.318 mo
309.508 297.191 li
324.079 299.889 mo
338.381 299.889 li
338.381 302.318 mo
338.381 297.191 li
324.079 299.889 mo
324.079 296.381 li
321.381 296.381 mo
326.508 296.381 li
324.079 299.889 mo
324.079 303.397 li
321.381 303.397 mo
326.508 303.397 li
@
356.73 317.429 mo
338.381 317.429 li
338.381 319.857 mo
338.381 314.73 li
356.73 317.429 mo
374.809 317.429 li
374.809 319.857 mo
374.809 314.73 li
356.73 317.429 mo
356.73 313.381 li
354.032 313.381 mo
359.429 313.381 li
356.73 317.429 mo
356.73 321.746 li
354.032 321.746 mo
359.429 321.746 li
397.476 358.444 mo
374.809 358.444 li
374.809 361.143 mo
374.809 355.746 li
397.476 358.444 mo
419.873 358.444 li
419.873 361.143 mo
419.873 355.746 li
397.476 358.444 mo
397.476 351.698 li
394.778 351.698 mo
399.905 351.698 li
397.476 358.444 mo
397.476 367.079 li
394.778 367.079 mo
399.905 367.079 li
448.206 389.476 mo
419.873 389.476 li
419.873 392.175 mo
419.873 386.778 li
448.206 389.476 mo
476.809 389.476 li
476.809 392.175 mo
476.809 386.778 li
448.206 389.476 mo
448.206 380.032 li
445.778 380.032 mo
450.905 380.032 li
448.206 389.476 mo
448.206 403.508 li
445.778 403.508 mo
450.905 403.508 li
511.889 419.429 mo
476.809 419.429 li
476.809 422.127 mo
476.809 416.73 li
511.889 419.429 mo
547.238 419.429 li
547.238 422.127 mo
547.238 416.73 li
511.889 419.429 mo
511.889 405.667 li
509.46 405.667 mo
514.587 405.667 li
511.889 419.429 mo
511.889 445.603 li
509.46 445.603 mo
514.587 445.603 li
@
174.587 312.841 mo
174.587 306.635 li
174.587 318.238 mo
174.587 328.492 li
178.365 251.587 mo
178.365 249.429 li
178.365 256.984 mo
178.365 260.222 li
180.254 216.508 mo
180.254 215.159 li
180.254 221.905 mo
180.254 223.524 li
225.048 224.064 mo
224.508 224.064 li
231.254 224.064 mo
231.794 224.064 li
233.413 236.476 mo
231.794 236.476 li
239.889 236.476 mo
241.508 236.476 li
244.476 252.397 mo
241.508 252.397 li
250.683 252.397 mo
253.651 252.397 li
257.698 257.254 mo
253.651 257.254 li
263.905 257.254 mo
268.222 257.254 li
274.159 275.064 mo
268.222 275.064 li
280.365 275.064 mo
286.302 275.064 li
277.127 277.762 mo
277.127 278.032 li
294.667 286.397 mo
286.302 286.397 li
301.143 286.397 mo
309.508 286.397 li
297.905 283.968 mo
297.905 283.429 li
297.905 289.095 mo
297.905 289.905 li
320.841 299.889 mo
309.508 299.889 li
327.048 299.889 mo
338.381 299.889 li
324.079 297.191 mo
324.079 296.381 li
324.079 302.318 mo
324.079 303.397 li
353.492 317.429 mo
338.381 317.429 li
359.968 317.429 mo
374.809 317.429 li
356.73 314.73 mo
356.73 313.381 li
356.73 319.857 mo
356.73 321.746 li
394.238 358.444 mo
374.809 358.444 li
400.444 358.444 mo
419.873 358.444 li
397.476 355.746 mo
397.476 351.698 li
397.476 361.143 mo
397.476 367.079 li
445.238 389.476 mo
419.873 389.476 li
451.444 389.476 mo
476.809 389.476 li
448.206 386.778 mo
448.206 380.032 li
448.206 392.175 mo
448.206 403.508 li
508.921 419.429 mo
476.809 419.429 li
515.127 419.429 mo
547.238 419.429 li
511.889 416.73 mo
511.889 405.667 li
511.889 422.127 mo
511.889 445.603 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
505.952 417.45 mo
517.825 417.45 li
508.22 424.428 li
511.889 413.137 li
515.558 424.428 li
.750179 .679652 .670191 .901488 cmyk
f
442.27 387.498 mo
454.143 387.498 li
444.538 394.476 li
448.206 383.185 li
451.875 394.476 li
f
391.54 356.466 mo
403.413 356.466 li
393.807 363.444 li
397.476 352.153 li
401.145 363.444 li
f
350.794 315.45 mo
362.667 315.45 li
353.061 322.428 li
356.73 311.137 li
360.399 322.428 li
f
318.143 297.91 mo
330.016 297.91 li
320.411 304.888 li
324.079 293.597 li
327.748 304.888 li
f
291.968 284.418 mo
303.841 284.418 li
294.236 291.396 li
297.905 280.105 li
301.573 291.396 li
f
271.19 273.085 mo
283.064 273.085 li
273.458 280.063 li
277.127 268.772 li
280.796 280.063 li
f
255 255.276 mo
266.873 255.276 li
257.268 262.254 li
260.936 250.962 li
264.605 262.254 li
f
241.508 250.418 mo
253.381 250.418 li
243.776 257.396 li
247.444 246.105 li
251.113 257.396 li
f
230.714 234.498 mo
242.587 234.498 li
232.982 241.476 li
236.651 230.185 li
240.32 241.476 li
f
222.079 222.085 mo
233.952 222.085 li
224.347 229.063 li
228.016 217.772 li
231.685 229.063 li
f
215.603 204.815 mo
227.476 204.815 li
217.871 211.793 li
221.54 200.502 li
225.208 211.793 li
f
209.936 193.752 mo
221.809 193.752 li
212.204 200.73 li
215.873 189.438 li
219.542 200.73 li
f
205.889 183.498 mo
217.762 183.498 li
208.157 190.476 li
211.825 179.185 li
215.494 190.476 li
f
202.111 171.355 mo
213.984 171.355 li
204.379 178.333 li
208.048 167.042 li
211.716 178.333 li
f
199.143 165.418 mo
211.016 165.418 li
201.411 172.396 li
205.079 161.105 li
208.748 172.396 li
f
196.714 159.482 mo
208.587 159.482 li
198.982 166.46 li
202.651 155.169 li
206.32 166.46 li
f
194.825 153.545 mo
206.698 153.545 li
197.093 160.523 li
200.762 149.232 li
204.431 160.523 li
f
193.746 151.117 mo
205.619 151.117 li
196.014 158.095 li
199.682 146.804 li
203.351 158.095 li
f
192.397 147.069 mo
204.27 147.069 li
194.665 154.047 li
198.333 142.756 li
202.002 154.047 li
f
191.318 144.641 mo
203.191 144.641 li
193.585 151.619 li
197.254 140.327 li
200.923 151.619 li
f
189.968 140.593 mo
201.841 140.593 li
192.236 147.571 li
195.905 136.28 li
199.574 147.571 li
f
188.889 136.815 mo
200.762 136.815 li
191.157 143.793 li
194.825 132.502 li
198.494 143.793 li
f
187.54 135.196 mo
199.413 135.196 li
189.807 142.174 li
193.476 130.883 li
197.145 142.174 li
f
186.46 133.577 mo
198.333 133.577 li
188.728 140.555 li
192.397 129.264 li
196.066 140.555 li
f
185.111 131.148 mo
196.984 131.148 li
187.379 138.127 li
191.048 126.835 li
194.716 138.127 li
f
184.032 128.45 mo
195.905 128.45 li
186.299 135.428 li
189.968 124.137 li
193.637 135.428 li
f
182.682 126.021 mo
194.556 126.021 li
184.95 133 li
188.619 121.708 li
192.288 133 li
f
181.603 124.942 mo
193.476 124.942 li
183.871 131.92 li
187.54 120.629 li
191.208 131.92 li
f
180.254 126.291 mo
192.127 126.291 li
182.522 133.269 li
186.191 121.978 li
189.859 133.269 li
f
179.175 161.101 mo
191.048 161.101 li
181.442 168.079 li
185.111 156.788 li
188.78 168.079 li
f
177.825 164.879 mo
189.698 164.879 li
180.093 171.857 li
183.762 160.565 li
187.431 171.857 li
f
176.746 173.244 mo
188.619 173.244 li
179.014 180.222 li
182.682 168.931 li
186.351 180.222 li
f
175.397 185.117 mo
187.27 185.117 li
177.665 192.095 li
181.333 180.804 li
185.002 192.095 li
f
174.318 217.228 mo
186.191 217.228 li
176.585 224.206 li
180.254 212.915 li
183.923 224.206 li
f
172.429 252.307 mo
184.302 252.307 li
174.696 259.285 li
178.365 247.994 li
182.034 259.285 li
f
168.651 313.561 mo
180.524 313.561 li
170.919 320.539 li
174.587 309.248 li
178.256 320.539 li
f
172.698 315.54 mo
172.159 315.54 li
176.746 315.54 mo
177.016 315.54 li
174.587 313.921 mo
174.587 306.635 li
174.587 317.429 mo
174.587 328.492 li
178.365 252.397 mo
178.365 249.429 li
178.365 255.905 mo
178.365 260.222 li
180.254 217.318 mo
180.254 215.159 li
180.254 220.825 mo
180.254 223.524 li
181.333 185.476 mo
181.333 184.937 li
181.333 188.984 mo
181.333 189.794 li
182.683 176.841 mo
182.683 177.381 li
213.984 195.73 mo
213.444 195.73 li
218.032 195.73 mo
218.302 195.73 li
219.381 206.794 mo
218.302 206.794 li
223.429 206.794 mo
224.508 206.794 li
225.857 224.064 mo
224.508 224.064 li
230.175 224.064 mo
231.794 224.064 li
228.016 225.683 mo
228.016 225.952 li
234.492 236.476 mo
231.794 236.476 li
238.81 236.476 mo
241.508 236.476 li
236.651 234.587 mo
236.651 234.318 li
236.651 238.095 mo
236.651 238.635 li
245.286 252.397 mo
241.508 252.397 li
249.603 252.397 mo
253.651 252.397 li
247.444 250.508 mo
247.444 249.968 li
247.444 254.016 mo
247.444 254.825 li
258.778 257.254 mo
253.651 257.254 li
263.095 257.254 mo
268.222 257.254 li
260.936 255.365 mo
260.936 254.825 li
260.936 258.873 mo
260.936 259.683 li
275.238 275.064 mo
268.222 275.064 li
279.286 275.064 mo
286.302 275.064 li
277.127 273.175 mo
277.127 272.365 li
277.127 276.683 mo
277.127 278.032 li
295.746 286.397 mo
286.302 286.397 li
300.063 286.397 mo
309.508 286.397 li
297.905 284.778 mo
297.905 283.429 li
297.905 288.286 mo
297.905 289.905 li
321.921 299.889 mo
309.508 299.889 li
325.968 299.889 mo
338.381 299.889 li
324.079 298 mo
324.079 296.381 li
324.079 301.508 mo
324.079 303.397 li
354.571 317.429 mo
338.381 317.429 li
358.889 317.429 mo
374.809 317.429 li
356.73 315.54 mo
356.73 313.381 li
356.73 319.048 mo
356.73 321.746 li
395.317 358.444 mo
374.809 358.444 li
399.365 358.444 mo
419.873 358.444 li
397.476 356.556 mo
397.476 351.698 li
397.476 360.064 mo
397.476 367.079 li
446.317 389.476 mo
419.873 389.476 li
450.365 389.476 mo
476.809 389.476 li
448.206 387.587 mo
448.206 380.032 li
448.206 391.095 mo
448.206 403.508 li
510 419.429 mo
476.809 419.429 li
514.048 419.429 mo
547.238 419.429 li
511.889 417.81 mo
511.889 405.667 li
511.889 421.318 mo
511.889 445.603 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
507.976 418.125 mo
515.802 418.125 li
509.471 422.724 li
511.889 415.282 li
514.307 422.724 li
f
444.294 388.172 mo
452.119 388.172 li
445.789 392.772 li
448.206 385.329 li
450.624 392.772 li
f
393.564 357.141 mo
401.389 357.141 li
395.058 361.74 li
397.476 354.297 li
399.894 361.74 li
f
352.818 316.125 mo
360.643 316.125 li
354.312 320.724 li
356.73 313.282 li
359.148 320.724 li
f
320.167 298.585 mo
327.992 298.585 li
321.662 303.184 li
324.079 295.742 li
326.497 303.184 li
f
293.992 285.093 mo
301.818 285.093 li
295.487 289.692 li
297.905 282.25 li
300.323 289.692 li
f
273.214 273.76 mo
281.04 273.76 li
274.709 278.359 li
277.127 270.917 li
279.545 278.359 li
f
257.024 255.95 mo
264.849 255.95 li
258.519 260.549 li
260.936 253.107 li
263.354 260.549 li
f
243.532 251.093 mo
251.357 251.093 li
245.027 255.692 li
247.444 248.25 li
249.862 255.692 li
f
232.738 235.172 mo
240.564 235.172 li
234.233 239.771 li
236.651 232.329 li
239.069 239.771 li
f
224.103 222.76 mo
231.929 222.76 li
225.598 227.359 li
228.016 219.917 li
230.434 227.359 li
f
217.627 205.49 mo
225.452 205.49 li
219.122 210.089 li
221.54 202.647 li
223.958 210.089 li
f
211.96 194.426 mo
219.786 194.426 li
213.455 199.026 li
215.873 191.583 li
218.291 199.026 li
f
207.913 184.172 mo
215.738 184.172 li
209.408 188.771 li
211.825 181.329 li
214.243 188.771 li
f
204.135 172.029 mo
211.96 172.029 li
205.63 176.629 li
208.048 169.186 li
210.465 176.629 li
f
201.167 166.093 mo
208.992 166.093 li
202.662 170.692 li
205.079 163.25 li
207.497 170.692 li
f
198.738 160.156 mo
206.564 160.156 li
200.233 164.756 li
202.651 157.313 li
205.069 164.756 li
f
196.849 154.22 mo
204.675 154.22 li
198.344 158.819 li
200.762 151.377 li
203.18 158.819 li
f
195.77 151.791 mo
203.595 151.791 li
197.265 156.391 li
199.682 148.948 li
202.1 156.391 li
f
194.421 147.744 mo
202.246 147.744 li
195.916 152.343 li
198.333 144.901 li
200.751 152.343 li
f
193.341 145.315 mo
201.167 145.315 li
194.836 149.914 li
197.254 142.472 li
199.672 149.914 li
f
191.992 141.268 mo
199.818 141.268 li
193.487 145.867 li
195.905 138.424 li
198.322 145.867 li
f
190.913 137.49 mo
198.738 137.49 li
192.408 142.089 li
194.825 134.647 li
197.243 142.089 li
f
189.564 135.871 mo
197.389 135.871 li
191.058 140.47 li
193.476 133.028 li
195.894 140.47 li
f
188.484 134.252 mo
196.309 134.252 li
189.979 138.851 li
192.397 131.409 li
194.815 138.851 li
f
187.135 131.823 mo
194.96 131.823 li
188.63 136.422 li
191.048 128.98 li
193.465 136.422 li
f
186.056 129.125 mo
193.881 129.125 li
187.551 133.724 li
189.968 126.282 li
192.386 133.724 li
f
184.706 126.696 mo
192.532 126.696 li
186.201 131.295 li
188.619 123.853 li
191.037 131.295 li
f
183.627 125.617 mo
191.452 125.617 li
185.122 130.216 li
187.54 122.774 li
189.958 130.216 li
f
182.278 126.966 mo
190.103 126.966 li
183.773 131.565 li
186.191 124.123 li
188.608 131.565 li
f
181.198 161.776 mo
189.024 161.776 li
182.693 166.375 li
185.111 158.932 li
187.529 166.375 li
f
179.849 165.553 mo
187.675 165.553 li
181.344 170.152 li
183.762 162.71 li
186.18 170.152 li
f
178.77 173.918 mo
186.595 173.918 li
180.265 178.518 li
182.682 171.075 li
185.1 178.518 li
f
177.421 185.791 mo
185.246 185.791 li
178.916 190.391 li
181.333 182.948 li
183.751 190.391 li
f
176.341 217.903 mo
184.167 217.903 li
177.836 222.502 li
180.254 215.059 li
182.672 222.502 li
f
174.452 252.982 mo
182.278 252.982 li
175.947 257.581 li
178.365 250.139 li
180.783 257.581 li
f
170.675 314.236 mo
178.5 314.236 li
172.169 318.835 li
174.587 311.393 li
177.005 318.835 li
f
172.698 315.54 mo
172.159 315.54 li
176.746 315.54 mo
177.016 315.54 li
174.587 313.921 mo
174.587 306.635 li
174.587 317.429 mo
174.587 328.492 li
178.365 252.397 mo
178.365 249.429 li
178.365 255.905 mo
178.365 260.222 li
180.254 217.318 mo
180.254 215.159 li
180.254 220.825 mo
180.254 223.524 li
181.333 185.476 mo
181.333 184.937 li
181.333 188.984 mo
181.333 189.794 li
182.683 176.841 mo
182.683 177.381 li
213.984 195.73 mo
213.444 195.73 li
218.032 195.73 mo
218.302 195.73 li
219.381 206.794 mo
218.302 206.794 li
223.429 206.794 mo
224.508 206.794 li
225.857 224.064 mo
224.508 224.064 li
230.175 224.064 mo
231.794 224.064 li
228.016 225.683 mo
228.016 225.952 li
234.492 236.476 mo
231.794 236.476 li
238.81 236.476 mo
241.508 236.476 li
236.651 234.587 mo
236.651 234.318 li
236.651 238.095 mo
236.651 238.635 li
245.286 252.397 mo
241.508 252.397 li
249.603 252.397 mo
253.651 252.397 li
247.444 250.508 mo
247.444 249.968 li
247.444 254.016 mo
247.444 254.825 li
258.778 257.254 mo
253.651 257.254 li
263.095 257.254 mo
268.222 257.254 li
260.936 255.365 mo
260.936 254.825 li
260.936 258.873 mo
260.936 259.683 li
275.238 275.064 mo
268.222 275.064 li
279.286 275.064 mo
286.302 275.064 li
277.127 273.175 mo
277.127 272.365 li
277.127 276.683 mo
277.127 278.032 li
295.746 286.397 mo
286.302 286.397 li
300.063 286.397 mo
309.508 286.397 li
297.905 284.778 mo
297.905 283.429 li
297.905 288.286 mo
297.905 289.905 li
321.921 299.889 mo
309.508 299.889 li
325.968 299.889 mo
338.381 299.889 li
324.079 298 mo
324.079 296.381 li
324.079 301.508 mo
324.079 303.397 li
354.571 317.429 mo
338.381 317.429 li
358.889 317.429 mo
374.809 317.429 li
356.73 315.54 mo
356.73 313.381 li
356.73 319.048 mo
356.73 321.746 li
395.317 358.444 mo
374.809 358.444 li
399.365 358.444 mo
419.873 358.444 li
397.476 356.556 mo
397.476 351.698 li
397.476 360.064 mo
397.476 367.079 li
446.317 389.476 mo
419.873 389.476 li
450.365 389.476 mo
476.809 389.476 li
448.206 387.587 mo
448.206 380.032 li
448.206 391.095 mo
448.206 403.508 li
510 419.429 mo
476.809 419.429 li
514.048 419.429 mo
547.238 419.429 li
511.889 417.81 mo
511.889 405.667 li
511.889 421.318 mo
511.889 445.603 li
.750179 .679652 .670191 .901488 cmyk
@
507.976 418.125 mo
515.802 418.125 li
509.471 422.724 li
511.889 415.282 li
514.307 422.724 li
3.0518e-05 .990631 1 .000396735 cmyk
f
444.294 388.172 mo
452.119 388.172 li
445.789 392.772 li
448.206 385.329 li
450.624 392.772 li
f
393.564 357.141 mo
401.389 357.141 li
395.058 361.74 li
397.476 354.297 li
399.894 361.74 li
f
352.818 316.125 mo
360.643 316.125 li
354.312 320.724 li
356.73 313.282 li
359.148 320.724 li
f
320.167 298.585 mo
327.992 298.585 li
321.662 303.184 li
324.079 295.742 li
326.497 303.184 li
f
293.992 285.093 mo
301.818 285.093 li
295.487 289.692 li
297.905 282.25 li
300.323 289.692 li
f
273.214 273.76 mo
281.04 273.76 li
274.709 278.359 li
277.127 270.917 li
279.545 278.359 li
f
257.024 255.95 mo
264.849 255.95 li
258.519 260.549 li
260.936 253.107 li
263.354 260.549 li
f
243.532 251.093 mo
251.357 251.093 li
245.027 255.692 li
247.444 248.25 li
249.862 255.692 li
f
232.738 235.172 mo
240.564 235.172 li
234.233 239.771 li
236.651 232.329 li
239.069 239.771 li
f
224.103 222.76 mo
231.929 222.76 li
225.598 227.359 li
228.016 219.917 li
230.434 227.359 li
f
217.627 205.49 mo
225.452 205.49 li
219.122 210.089 li
221.54 202.647 li
223.958 210.089 li
f
211.96 194.426 mo
219.786 194.426 li
213.455 199.026 li
215.873 191.583 li
218.291 199.026 li
f
207.913 184.172 mo
215.738 184.172 li
209.408 188.771 li
211.825 181.329 li
214.243 188.771 li
f
204.135 172.029 mo
211.96 172.029 li
205.63 176.629 li
208.048 169.186 li
210.465 176.629 li
f
201.167 166.093 mo
208.992 166.093 li
202.662 170.692 li
205.079 163.25 li
207.497 170.692 li
f
198.738 160.156 mo
206.564 160.156 li
200.233 164.756 li
202.651 157.313 li
205.069 164.756 li
f
196.849 154.22 mo
204.675 154.22 li
198.344 158.819 li
200.762 151.377 li
203.18 158.819 li
f
195.77 151.791 mo
203.595 151.791 li
197.265 156.391 li
199.682 148.948 li
202.1 156.391 li
f
194.421 147.744 mo
202.246 147.744 li
195.916 152.343 li
198.333 144.901 li
200.751 152.343 li
f
193.341 145.315 mo
201.167 145.315 li
194.836 149.914 li
197.254 142.472 li
199.672 149.914 li
f
191.992 141.268 mo
199.818 141.268 li
193.487 145.867 li
195.905 138.424 li
198.322 145.867 li
f
190.913 137.49 mo
198.738 137.49 li
192.408 142.089 li
194.825 134.647 li
197.243 142.089 li
f
189.564 135.871 mo
197.389 135.871 li
191.058 140.47 li
193.476 133.028 li
195.894 140.47 li
f
188.484 134.252 mo
196.309 134.252 li
189.979 138.851 li
192.397 131.409 li
194.815 138.851 li
f
187.135 131.823 mo
194.96 131.823 li
188.63 136.422 li
191.048 128.98 li
193.465 136.422 li
f
186.056 129.125 mo
193.881 129.125 li
187.551 133.724 li
189.968 126.282 li
192.386 133.724 li
f
184.706 126.696 mo
192.532 126.696 li
186.201 131.295 li
188.619 123.853 li
191.037 131.295 li
f
183.627 125.617 mo
191.452 125.617 li
185.122 130.216 li
187.54 122.774 li
189.958 130.216 li
f
182.278 126.966 mo
190.103 126.966 li
183.773 131.565 li
186.191 124.123 li
188.608 131.565 li
f
181.198 161.776 mo
189.024 161.776 li
182.693 166.375 li
185.111 158.932 li
187.529 166.375 li
f
179.849 165.553 mo
187.675 165.553 li
181.344 170.152 li
183.762 162.71 li
186.18 170.152 li
f
178.77 173.918 mo
186.595 173.918 li
180.265 178.518 li
182.682 171.075 li
185.1 178.518 li
f
177.421 185.791 mo
185.246 185.791 li
178.916 190.391 li
181.333 182.948 li
183.751 190.391 li
f
176.341 217.903 mo
184.167 217.903 li
177.836 222.502 li
180.254 215.059 li
182.672 222.502 li
f
174.452 252.982 mo
182.278 252.982 li
175.947 257.581 li
178.365 250.139 li
180.783 257.581 li
f
170.675 314.236 mo
178.5 314.236 li
172.169 318.835 li
174.587 311.393 li
177.005 318.835 li
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: STYPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal STYPMX+Helvetica gcheck setglobal} if
1 108 2 <00050042ffda06d00592000b000f001b0027003300f04052060c250c0237
0e580c670c960ca70cc60cd70cf60c0868080d0e0e46120f0f0c0e0f1218
0c0d2a301b2421f215240d272d240bf23324050a0f0e3517171a2a2402f2
302408ea12241ef218242419343f52182b4e10f44dedfcedf6edfced4e45
6544e6002f3c4d3fedfcfd2fc4edf4ed011112393911123939872e2b7d10
c43130184379405200322e0a301b002c002a1b011a22181b001020121b01
1626181b00141c121b013206301b0028042a1b012f092d1b012b012d1b01
19231b1b00111f1b1b001725151b01131d151b013107331b002903331b00
002b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b81015d710016151406232226
353436330333012312363534262322061514163312161514062322263534
36330036353426232206151416330604cccc9091cccc91916ffcdf6f3279
79565579795591cccc9190cccc90042b7979555679795602b8cc9090cccc
9090cc02dafa4803687955557978565579022bcd9090cccc9090cdfb2179
55557979555579000000>STYPMX+Helvetica AddT42Char 
1 784 5 <0001005c0000046f0415000b0037401c037a050220080b7a0a0a0d17171a
067a040920030a7a00190c3f52182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3cf431301335211133112115211123115c01b4ab01b4fe4cab
01b6a801b7fe49a8fe4a01b60000>STYPMX+Helvetica AddT42Char 
1 1048 8 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>STYPMX+Helvetica AddT42Char 
1 2556 16 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>STYPMX+Helvetica AddT42Char 
1 2856 17 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>STYPMX+Helvetica AddT42Char 
1 3212 18 <00020049ffd80411059a001b002700ab402e19052b052816480658056805
8919881a981a09460807212727350a0a182135100504351bc7180d07023c
071e3114b80155400b0d00291b8124380d2947281076c418d4edf4ed10f5
fd397d4b52787a2f18003feded3fed12392fed1112393130437940341f26
191a0b13010312250226220f24280020111e28010319002800260b242800
230e2128011f13212801011a042800250c2728002b2b2b2b012b2b2b2b2b
2b81818181015d01161716333236130e0123220235341233201316151007
02212226350036353426232206151416330110086b374581b6263cb166cf
f1eee8013977424f83fec7d2da0232b19f7b849b8895015a95391ed70149
5f4d0102cbc30128fee69be9fef9cbfeaedca601268db09e9bb1948ca500
>STYPMX+Helvetica AddT42Char 
1 3512 19 <0001001cffed04ad04280006006a40405703670387030300201203030202
20120100010620120304030420120505060306040200030505010106050a
03000104020503011a08060019070888215fb5182b2b4ef43c10f6173c11
1239003d3f3f111217392f044d1887102b10872b87102b87102b3130015d
130115090115011c0491fc4403bcfb6f025e01cab4fe97fe96b401cb>STYPMX+Helvetica AddT42Char 
1 3660 20 <0002005c00de046f03360003000700274015012000cd07200604001a0907
021908095c213f52182b2b4ef43c10f63c002f4dedfdfd31300115213501
152135046ffbed0413fbed0336a8a8fe53abab00>STYPMX+Helvetica AddT42Char 
1 3740 21 <0001001cffed04ad04280006006c40425800580368038803040020120302
030620120303040420120506050220120101000306040200030501050506
010a03000106001a08010405030219070888215fb5182b2b4ef4173c10f6
3c1112393d003f3f111217392f044d8710182b10872b87102b87102b3130
015d0901350901350104adfb6f03bbfc45049101b6fe37b4016a0169b4fe
3600>STYPMX+Helvetica AddT42Char 
1 3892 22 <000200e1ffd5073b05e5000b004a00ca4059363634484621554868096727
6a3e6742783dc819c6450b192b1939283d3803380e3721060839150a2742
460b47115800550358216616c80dc80ed714d715d7410e0b0a190a260a56
0a04fe0a010a2d2e2f2c200a0302083508b80190b31a234a02b80190b22d
293bb80190b51303474a4643b8019040114a090a052d2e1d2e3832053526
32260f38bd018f0017003f018f000f0732852feddded1239392fed2f1239
dd2edd1239003ffdd412393fedd4c4ed10d43cfdc411121739870510c001
5d7131305d005d5d00262322021514163332123500032611103736212017
16111400232226353436370e01232226353400333216173733030e011514
163332363534002120070611141716213224371706042304e1534972a756
418797fd97e2b5dcf4019b0164ccbffeefa9635e040335a2567b99010596
6685043293850f0e372372b5febcfeeefe84c9aca4c00163a6011e77425a
fe9ad703bb63fef3856267013b7ffc580105d101120146e4feb4aafef1e4
febd5f430b180d735fb28cc701307653a8fe4a333e182d29eec0e80109de
bdfee2faaac969595a508c00>STYPMX+Helvetica AddT42Char 
1 4324 23 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>STYPMX+Helvetica AddT42Char 
1 5528 28 <000200b40000057805bd0009002700944012070d49014805590158056905
641478050816bb01300119001b011c40422321202660127112751403121e
1f141c1503211e161404261224251e0009091b071e0b02261c1b08202515
1f251603310f691b1a29082625270a192829d6219566182b2b4ef43c4dfd
3c4e10f64df4edd4edd4ed003f3c3c3ffd12392f3cfd3c39111739011112
39391239395d1112392b3130015d01323635342726232111032132171615
1406071e011f011617161715232e012f012627262321112303478ca3723d
66fe1ac702a8a86dcf6d6256570507030b122ef40a0c040c0764397afe3b
c7031c70929d391efe0a02a1315efd84a833237280c55429461421133c56
f590311bfd8a>STYPMX+Helvetica AddT42Char 
1 6492 32 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>STYPMX+Helvetica AddT42Char 
1 8480 40 <00010080000003f805bd000b00a740645902013a08011902010706170657
056705790678078705b903c903da030a05050608080709030284029402a4
020302391209090405060504066d12070708080705040305060908050204
030a00000403060a07060a061a0d09020a29000b190c0db22162b9011600
182b2b4ef43c4dfd3c3c194e10e618003f3c3c3f3c3f1112173901121739
874d2e2b087d10c104872e182b5d057d10c010083c083c3130015d00715d
7213331101330901230107112380ad01cee6fe6601b1e6feb297ad05bdfc
ab01c7fe6ffd62021c8afe6e0000>STYPMX+Helvetica AddT42Char 
1 8952 42 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>STYPMX+Helvetica AddT42Char 
1 10352 48 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>STYPMX+Helvetica AddT42Char 
STYPMX+Helvetica /CharStrings get begin
/percent 2 def
/plus 5 def
/period 8 def
/six 16 def
/eight 17 def
/nine 18 def
/less 19 def
/equal 20 def
/greater 21 def
/at 22 def
/A 23 def
/R 28 def
/a 32 def
/k 40 def
/n 42 def
/u 48 def
end
STYPMX+Helvetica /Encoding get
dup 37 /percent put
dup 43 /plus put
dup 46 /period put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 64 /at put
dup 65 /A put
dup 82 /R put
dup 97 /a put
dup 107 /k put
dup 110 /n put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDB+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /.notdef /six /.notdef /eight /nine 2{/.notdef}rp /less /equal /greater /.notdef /at /A 5{/.notdef}rp /G 6{/.notdef}rp /N 3{/.notdef}rp /R /.notdef /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /j /k 2{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]LCKXDB+Helvetica nfLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf291.895 104.634 mo(Au+Au @ 200 GeV, 60%-80%)[12.3201 10.2697 10.7869 12.3202 10.2697 5.13486 18.7478 5.13486 10.2697 10.2697 10.2697 5.13486 14.3702 10.2697 12.3201 5.13486 5.13489 10.2697 10.2697 16.4207 6.1506 10.2697 10.2697 0 ]xshLCKXDB+Helvetica*1 [12.3138 0 0 -12.3138 0 0 ]msf531.916 141.56 mo(T)shLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf349.042 131.888 mo( > 0.20, R = 0.3, anti-k)[5.13486 10.7869 5.13489 10.2697 5.13489 10.2697 10.2697 5.13489 5.13486 13.3358 5.13486 10.7869 5.13486 10.2697 5.13486 10.2697 5.13486 5.13489 10.2697 10.2697 5.13486 4.10052 6.15063 0 ]xshLCKXDB+Helvetica*1 [12.3138 0 0 -12.3138 0 0 ]msf334.976 138.044 mo(jet)[2.73364 6.8465 0 ]xshLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf322.665 131.888 mo(A)sh426.412 166.177 mo( < 30.0 GeV/c)[5.13486 10.7869 5.13489 10.2697 10.2697 5.13486 10.2697 5.13489 14.3702 10.2697 12.3201 5.13489 0 ]xshLCKXDB+Helvetica*1 [12.3138 0 0 -12.3138 0 0 ]msf409.708 154.747 mo(trig)[3.42325 4.10043 2.73364 0 ]xsh409.708 175.849 mo(T)shLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf352.558 166.177 mo(9.0 < p)[10.2697 5.13489 10.2697 5.13486 10.7869 5.13486 0 ]xsh399.635 177.381 mo
444.698 177.381 li
444.698 246.73 li
399.635 246.73 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.269841 lw
399.635 177.381 mo
444.698 177.381 li
444.698 246.73 li
399.635 246.73 li
cp
@
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: STYPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal STYPMX+Helvetica gcheck setglobal} if
1 4604 24 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>STYPMX+Helvetica AddT42Char 
1 5076 26 <000100970000061705bd001300cb405944014b03020601090316011903d7
010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d450286
02045102970202290a280d380a380d4702570276020725640d0a02031203
01020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd
0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918
e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201
020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc4313000
5d727101725d71132109012111231134363501230115141615112397011d
01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb29
04d72d36dd34fc9d0000>STYPMX+Helvetica AddT42Char 
1 5804 29 <00020060ffd504f605e5002f003000fe405e290f27232626360e35214726
62267a0e7724096b08180e172502590e680eaa22030a0e3a2224220a0304
1c1886142f2f2b1c3a1403043a2b0930020a0e081124221f283030111825
17490825281a321f25114900252f193132a0216a89182b2b4ef44dedf4ed
4e10f64dedf4ed12392f1211393912113939003f3fed3fed12392f10ed11
1217392efd335d7131304379404d282e111f0008022602262d2506251a26
032c002b002d2e032c002b00052a082b011d131f2b001b15182b01191801
2d042b0009270b2b01250b012e042b000729042b001e121c2b0119161c2b
01002b2b2b2b10102b2b01103c2b2b2b2b103c2b2b2b2b2b2b818181005d
0116171633323736353427262f0126272635342433320415232627262322
06151417161f01161716151404232027263701011e073463fa705cb24b4c
a2c7c3518c0112fbe70143bb0f315bdab09a5a3bd0ce95518cfe9debfeee
9b9b03024d01da7d4e92203ea0783332252d2c355cb7c6fedff5763f7394
626c3220302f223b67c4f4d28c8bee040b00>STYPMX+Helvetica AddT42Char 
1 8704 41 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>STYPMX+Helvetica AddT42Char 
1 10532 49 <0001000b000003ea042f00060102402e4201c50102006700680268036706
87048805a700a802084700480245044a0586048905c704c8050849287328
0708b80109b321677e182b2b4b5279b8ff70b40105042004b80183b70303
6d1202010205b80183401e06066d12000001050604030101050203060300
0605040a0817171a03af02ba018400000184b301af0619194ef4184dfde0
e0fd194e456544e618003f3c3f173c1239011112391239074d2e2b104ee4
4d072e2b104ee44d2b4b5179402502291203030400291206060501050203
0603000605040a0817171a020403af050001af0619194ef4184dfd3939fd
3939194e456544e618003f3c3f173c12390507102b07102b313001715d00
5d7113090133012301dc011e012bc5fe6cc0fe75042ffc980368fbd1042f
>STYPMX+Helvetica AddT42Char 
1 10832 50 <0001000b000003e1042f000b002300b10a083fb00633b100063fb0033301
b00c2fb00dd600b1000a1112b102083939303113331b0117090123090123
011ee9f6f9dbfe970179e6fef6fefee40179042ffe87017905fdfbfddb01
92fe6e022500>STYPMX+Helvetica AddT42Char 
STYPMX+Helvetica /CharStrings get begin
/E 24 def
/M 26 def
/S 29 def
/m 41 def
/v 49 def
/x 50 def
end
STYPMX+Helvetica /Encoding get
dup 69 /E put
dup 77 /M put
dup 83 /S put
dup 109 /m put
dup 118 /v put
dup 120 /x put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDB+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /.notdef /six /.notdef /eight /nine 2{/.notdef}rp /less /equal /greater /.notdef /at /A 3{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M /N 3{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /j /k /.notdef /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]LCKXDB+Helvetica nfLCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf410.588 193.434 mo(same event \(SE\))[9.23538 10.2697 15.386 10.2697 5.13486 10.2697 9.23532 10.2697 10.2697 5.13486 5.13489 6.15063 12.3201 12.3201 0 ]xsh410.588 217.172 mo(mixed event \(ME\))[15.386 4.10052 9.23532 10.2697 10.2697 5.13489 10.2697 9.23538 10.2697 10.2697 5.13486 5.13483 6.1507 15.3859 12.3201 0 ]xsh401.524 204.095 mo
409.349 204.095 li
409.349 220.286 li
401.524 220.286 li
cp
.598749 .514733 .509422 .206455 cmyk
currentcolor
/24853668.0 
<<
/ID /24853668.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 100 100 ] 
/XStep 100 
/YStep 100 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
100 0 li
100 100 li
0 100 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 0 mo
100 100 li
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/24853668.0 /Pattern get_res
[.0647619 0 0 -.0647619 0 757 ]make_pattern set_pattern
f
2 vmreclaim
1.61905 lw
0 lc
0 lj
10 ml
[3.2381 3.2381 ] 0 dsh
true sadj
401.524 212.191 mo
409.349 212.191 li
false sop
.750179 .679652 .670191 .901488 cmyk
@
LCKXDB+Helvetica*1 [18.4707 0 0 -18.4707 0 0 ]msf410.588 240.03 mo(norm. region)[10.2697 10.2697 6.1506 15.386 5.13486 5.13489 6.15063 10.2697 10.2697 4.10052 10.2697 0 ]xsh401.524 227.032 mo
409.349 227.032 li
409.349 243.222 li
401.524 243.222 li
cp
.865354 .616693 3.0518e-05 3.0518e-05 cmyk
currentcolor
/9305180.0 
<<
/ID /9305180.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 100 100 ] 
/XStep 100 
/YStep 100 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
100 0 li
100 100 li
0 100 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 0 mo
100 100 li
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/9305180.0 /Pattern get_res
[.0647619 0 0 -.0647619 0 757 ]make_pattern set_pattern
f
2 vmreclaim
.809524 lw
0 lc
0 lj
10 ml
[3.2381 3.2381 ] 0 dsh
true sadj
401.524 235.127 mo
409.349 235.127 li
false sop
.750179 .679652 .670191 .901488 cmyk
@
397.206 188.085 mo
409.079 188.085 li
399.474 195.063 li
403.143 183.772 li
406.812 195.063 li
f
399.23 188.76 mo
407.056 188.76 li
400.725 193.359 li
403.143 185.917 li
405.561 193.359 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
399.23 188.76 mo
407.056 188.76 li
400.725 193.359 li
403.143 185.917 li
405.561 193.359 li
3.0518e-05 .990631 1 .000396735 cmyk
f
0 468 mo
562.889 468 li
562.889 757 li
0 757 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.269841 lw
[] 0 dsh
0 468 mo
562.889 468 li
562.889 757 li
0 757 li
cp
@
140.857 468 mo
562.889 468 li
562.889 670.381 li
140.857 670.381 li
cp
ef
140.857 468 mo
562.889 468 li
562.889 670.381 li
140.857 670.381 li
cp
@
.809524 lw
140.857 468 mo
562.889 468 li
562.889 670.381 li
140.857 670.381 li
cp
.750179 .679652 .670191 .901488 cmyk
@
140.857 468 mo
562.889 468 li
562.889 670.381 li
140.857 670.381 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.269841 lw
140.857 468 mo
562.889 468 li
562.889 670.381 li
140.857 670.381 li
cp
@
.809524 lw
140.857 468 mo
562.889 468 li
562.889 670.381 li
140.857 670.381 li
cp
.750179 .679652 .670191 .901488 cmyk
@
0 lw
140.857 670.381 mo
562.889 670.381 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
.809524 lw
140.857 670.381 mo
562.889 670.381 li
.750179 .679652 .670191 .901488 cmyk
@
LCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf338.492 719.194 mo(  \(GeV/c\))[6.12537 6.12534 7.33701 17.1422 12.2507 14.6966 6.12534 11.0168 0 ]xshLCKXDB+Helvetica*1 [14.9829 0 0 -14.9829 0 0 ]msf290.136 708.644 mo(reco,ch)[4.9892 8.33047 7.49146 8.33044 4.16525 7.49146 0 ]xsh290.136 731.503 mo(T,jet)[9.15445 4.16522 3.3262 8.33047 0 ]xshLCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf277.829 719.194 mo(p)sh182.952 663.905 mo
182.952 670.381 li
207.238 667.143 mo
207.238 670.381 li
231.524 667.143 mo
231.524 670.381 li
255.809 667.143 mo
255.809 670.381 li
279.825 667.143 mo
279.825 670.381 li
304.111 663.905 mo
304.111 670.381 li
328.397 667.143 mo
328.397 670.381 li
352.413 667.143 mo
352.413 670.381 li
376.698 667.143 mo
376.698 670.381 li
400.984 667.143 mo
400.984 670.381 li
425 663.905 mo
425 670.381 li
449.286 667.143 mo
449.286 670.381 li
473.571 667.143 mo
473.571 670.381 li
497.587 667.143 mo
497.587 670.381 li
521.873 667.143 mo
521.873 670.381 li
546.159 663.905 mo
546.159 670.381 li
182.952 663.905 mo
182.952 670.381 li
158.936 667.143 mo
158.936 670.381 li
546.159 663.905 mo
546.159 670.381 li
@
LCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf176.719 690.181 mo(0102030)[114.293 12.2507 109.071 12.2507 109.073 12.2507 0 ]xsh140.857 468 mo
562.889 468 li
182.952 474.476 mo
182.952 468 li
207.238 471.238 mo
207.238 468 li
231.524 471.238 mo
231.524 468 li
255.809 471.238 mo
255.809 468 li
279.825 471.238 mo
279.825 468 li
304.111 474.476 mo
304.111 468 li
328.397 471.238 mo
328.397 468 li
352.413 471.238 mo
352.413 468 li
376.698 471.238 mo
376.698 468 li
400.984 471.238 mo
400.984 468 li
425 474.476 mo
425 468 li
449.286 471.238 mo
449.286 468 li
473.571 471.238 mo
473.571 468 li
497.587 471.238 mo
497.587 468 li
521.873 471.238 mo
521.873 468 li
546.159 474.476 mo
546.159 468 li
182.952 474.476 mo
182.952 468 li
158.936 471.238 mo
158.936 468 li
546.159 474.476 mo
546.159 468 li
140.857 670.381 mo
140.857 468 li
@
LCKXDB+Helvetica*1 [0 -22.0336 -22.0336 0 0 0 ]msf69.4568 602.261 mo(SE/ME)[-14.6965 -14.6966 -6.12537 -18.3538 0 ]ysh146.524 670.381 mo
140.857 670.381 li
146.524 666.873 mo
140.857 666.873 li
146.524 664.175 mo
140.857 664.175 li
146.524 661.746 mo
140.857 661.746 li
146.524 659.857 mo
140.857 659.857 li
146.524 658.238 mo
140.857 658.238 li
146.524 656.889 mo
140.857 656.889 li
152.46 655.54 mo
140.857 655.54 li
@
LCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf122.069 665.12 mo(1)sh146.524 647.175 mo
140.857 647.175 li
146.524 642.317 mo
140.857 642.317 li
146.524 638.81 mo
140.857 638.81 li
146.524 636.111 mo
140.857 636.111 li
146.524 633.952 mo
140.857 633.952 li
146.524 632.063 mo
140.857 632.063 li
146.524 630.444 mo
140.857 630.444 li
146.524 628.825 mo
140.857 628.825 li
152.46 627.476 mo
140.857 627.476 li
@
LCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf109.656 637.1 mo(10)[12.2507 0 ]xsh146.524 619.111 mo
140.857 619.111 li
146.524 614.254 mo
140.857 614.254 li
146.524 610.746 mo
140.857 610.746 li
146.524 608.048 mo
140.857 608.048 li
146.524 605.889 mo
140.857 605.889 li
146.524 604 mo
140.857 604 li
146.524 602.381 mo
140.857 602.381 li
146.524 600.762 mo
140.857 600.762 li
152.46 599.683 mo
140.857 599.683 li
@
LCKXDB+Helvetica*1 [14.9829 0 0 -14.9829 0 0 ]msf125.726 599.623 mo(2)shLCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf101.987 609.294 mo(10)[12.2507 0 ]xsh146.524 591.048 mo
140.857 591.048 li
146.524 586.19 mo
140.857 586.19 li
146.524 582.683 mo
140.857 582.683 li
146.524 579.984 mo
140.857 579.984 li
146.524 577.825 mo
140.857 577.825 li
146.524 575.937 mo
140.857 575.937 li
146.524 574.317 mo
140.857 574.317 li
146.524 572.968 mo
140.857 572.968 li
152.46 571.619 mo
140.857 571.619 li
@
LCKXDB+Helvetica*1 [14.9829 0 0 -14.9829 0 0 ]msf125.726 571.489 mo(3)shLCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf101.987 582.039 mo(10)[12.2507 0 ]xsh146.524 563.254 mo
140.857 563.254 li
146.524 558.127 mo
140.857 558.127 li
146.524 554.619 mo
140.857 554.619 li
146.524 551.921 mo
140.857 551.921 li
146.524 549.762 mo
140.857 549.762 li
146.524 547.873 mo
140.857 547.873 li
146.524 546.254 mo
140.857 546.254 li
146.524 544.905 mo
140.857 544.905 li
152.46 543.556 mo
140.857 543.556 li
@
LCKXDB+Helvetica*1 [14.9829 0 0 -14.9829 0 0 ]msf125.726 544.233 mo(4)shLCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf101.987 553.905 mo(10)[12.2507 0 ]xsh146.524 535.19 mo
140.857 535.19 li
146.524 530.063 mo
140.857 530.063 li
146.524 526.556 mo
140.857 526.556 li
146.524 523.857 mo
140.857 523.857 li
146.524 521.698 mo
140.857 521.698 li
146.524 519.81 mo
140.857 519.81 li
146.524 518.19 mo
140.857 518.19 li
146.524 516.841 mo
140.857 516.841 li
152.46 515.492 mo
140.857 515.492 li
@
%ADOBeginSubsetFont: STYPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal STYPMX+Helvetica gcheck setglobal} if
1 2260 15 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>STYPMX+Helvetica AddT42Char 
STYPMX+Helvetica /CharStrings get begin
/five 15 def
end
STYPMX+Helvetica /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LCKXDB+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /.notdef /eight /nine 2{/.notdef}rp /less /equal /greater /.notdef /at /A 3{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M /N 3{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /j /k /.notdef /m /n /o /p /.notdef /r /s /t /u /v /.notdef /x 135{/.notdef}rp]LCKXDB+Helvetica nfLCKXDB+Helvetica*1 [14.9829 0 0 -14.9829 0 0 ]msf125.726 515.22 mo(5)shLCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf101.987 525.77 mo(10)[12.2507 0 ]xsh146.524 507.127 mo
140.857 507.127 li
146.524 502.27 mo
140.857 502.27 li
146.524 498.762 mo
140.857 498.762 li
146.524 496.064 mo
140.857 496.064 li
146.524 493.635 mo
140.857 493.635 li
146.524 491.746 mo
140.857 491.746 li
146.524 490.127 mo
140.857 490.127 li
146.524 488.778 mo
140.857 488.778 li
152.46 487.429 mo
140.857 487.429 li
@
LCKXDB+Helvetica*1 [14.9829 0 0 -14.9829 0 0 ]msf125.726 487.086 mo(6)shLCKXDB+Helvetica*1 [22.0336 0 0 -22.0336 0 0 ]msf101.987 497.636 mo(10)[12.2507 0 ]xsh146.524 479.064 mo
140.857 479.064 li
146.524 474.206 mo
140.857 474.206 li
146.524 470.698 mo
140.857 470.698 li
146.524 468 mo
140.857 468 li
562.889 670.381 mo
562.889 468 li
556.952 670.381 mo
562.889 670.381 li
556.952 666.873 mo
562.889 666.873 li
556.952 664.175 mo
562.889 664.175 li
556.952 661.746 mo
562.889 661.746 li
556.952 659.857 mo
562.889 659.857 li
556.952 658.238 mo
562.889 658.238 li
556.952 656.889 mo
562.889 656.889 li
551.016 655.54 mo
562.889 655.54 li
556.952 647.175 mo
562.889 647.175 li
556.952 642.317 mo
562.889 642.317 li
556.952 638.81 mo
562.889 638.81 li
556.952 636.111 mo
562.889 636.111 li
556.952 633.952 mo
562.889 633.952 li
556.952 632.063 mo
562.889 632.063 li
556.952 630.444 mo
562.889 630.444 li
556.952 628.825 mo
562.889 628.825 li
551.016 627.476 mo
562.889 627.476 li
556.952 619.111 mo
562.889 619.111 li
556.952 614.254 mo
562.889 614.254 li
556.952 610.746 mo
562.889 610.746 li
556.952 608.048 mo
562.889 608.048 li
556.952 605.889 mo
562.889 605.889 li
556.952 604 mo
562.889 604 li
556.952 602.381 mo
562.889 602.381 li
556.952 600.762 mo
562.889 600.762 li
551.016 599.683 mo
562.889 599.683 li
556.952 591.048 mo
562.889 591.048 li
556.952 586.19 mo
562.889 586.19 li
556.952 582.683 mo
562.889 582.683 li
556.952 579.984 mo
562.889 579.984 li
556.952 577.825 mo
562.889 577.825 li
556.952 575.937 mo
562.889 575.937 li
556.952 574.317 mo
562.889 574.317 li
556.952 572.968 mo
562.889 572.968 li
551.016 571.619 mo
562.889 571.619 li
556.952 563.254 mo
562.889 563.254 li
556.952 558.127 mo
562.889 558.127 li
556.952 554.619 mo
562.889 554.619 li
556.952 551.921 mo
562.889 551.921 li
556.952 549.762 mo
562.889 549.762 li
556.952 547.873 mo
562.889 547.873 li
556.952 546.254 mo
562.889 546.254 li
556.952 544.905 mo
562.889 544.905 li
551.016 543.556 mo
562.889 543.556 li
556.952 535.19 mo
562.889 535.19 li
556.952 530.063 mo
562.889 530.063 li
556.952 526.556 mo
562.889 526.556 li
556.952 523.857 mo
562.889 523.857 li
556.952 521.698 mo
562.889 521.698 li
556.952 519.81 mo
562.889 519.81 li
556.952 518.19 mo
562.889 518.19 li
556.952 516.841 mo
562.889 516.841 li
551.016 515.492 mo
562.889 515.492 li
556.952 507.127 mo
562.889 507.127 li
556.952 502.27 mo
562.889 502.27 li
556.952 498.762 mo
562.889 498.762 li
556.952 496.064 mo
562.889 496.064 li
556.952 493.635 mo
562.889 493.635 li
556.952 491.746 mo
562.889 491.746 li
@
556.952 490.127 mo
562.889 490.127 li
556.952 488.778 mo
562.889 488.778 li
551.016 487.429 mo
562.889 487.429 li
556.952 479.064 mo
562.889 479.064 li
556.952 474.206 mo
562.889 474.206 li
556.952 470.698 mo
562.889 470.698 li
556.952 468 mo
562.889 468 li
@
[3.2381 3.2381 ] 0 dsh
140.857 655.54 mo
550.746 655.54 li
@
[] 0 dsh
174.587 645.825 mo
174.587 644.746 li
174.587 650.952 mo
174.587 653.651 li
224.778 636.111 mo
224.238 636.111 li
230.984 636.111 mo
231.524 636.111 li
233.143 627.476 mo
231.524 627.476 li
239.349 627.476 mo
241.238 627.476 li
243.936 615.603 mo
241.238 615.603 li
250.413 615.603 mo
253.381 615.603 li
257.429 594.556 mo
253.381 594.556 li
263.635 594.556 mo
267.682 594.556 li
273.619 572.968 mo
267.682 572.968 li
280.095 572.968 mo
286.032 572.968 li
294.127 541.397 mo
286.032 541.397 li
300.603 541.397 mo
308.968 541.397 li
320.302 501.73 mo
308.968 501.73 li
326.508 501.73 mo
337.841 501.73 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
317.603 499.752 mo
329.476 499.752 li
319.871 506.73 li
323.54 495.439 li
327.208 506.73 li
.750179 .679652 .670191 .901488 cmyk
f
291.429 539.418 mo
303.302 539.418 li
293.696 546.396 li
297.365 535.105 li
301.034 546.396 li
f
270.921 570.99 mo
282.794 570.99 li
273.188 577.968 li
276.857 566.677 li
280.526 577.968 li
f
254.46 592.577 mo
266.333 592.577 li
256.728 599.555 li
260.397 588.264 li
264.066 599.555 li
f
241.238 613.625 mo
253.111 613.625 li
243.506 620.603 li
247.175 609.312 li
250.843 620.603 li
f
230.444 625.498 mo
242.318 625.498 li
232.712 632.476 li
236.381 621.185 li
240.05 632.476 li
f
221.809 634.133 mo
233.682 634.133 li
224.077 641.111 li
227.746 629.819 li
231.415 641.111 li
f
215.333 638.18 mo
227.206 638.18 li
217.601 645.158 li
221.27 633.867 li
224.939 645.158 li
f
209.936 641.958 mo
221.809 641.958 li
212.204 648.936 li
215.873 637.645 li
219.542 648.936 li
f
205.619 644.387 mo
217.492 644.387 li
207.887 651.365 li
211.556 640.073 li
215.224 651.365 li
f
201.841 644.656 mo
213.714 644.656 li
204.109 651.634 li
207.778 640.343 li
211.447 651.634 li
f
198.873 646.545 mo
210.746 646.545 li
201.141 653.523 li
204.809 642.232 li
208.478 653.523 li
f
196.444 647.625 mo
208.318 647.625 li
198.712 654.603 li
202.381 643.312 li
206.05 654.603 li
f
194.825 647.894 mo
206.698 647.894 li
197.093 654.873 li
200.762 643.581 li
204.431 654.873 li
f
193.476 648.434 mo
205.349 648.434 li
195.744 655.412 li
199.413 644.121 li
203.081 655.412 li
f
192.397 648.434 mo
204.27 648.434 li
194.665 655.412 li
198.333 644.121 li
202.002 655.412 li
f
191.048 649.244 mo
202.921 649.244 li
193.315 656.222 li
196.984 644.931 li
200.653 656.222 li
f
189.968 649.244 mo
201.841 649.244 li
192.236 656.222 li
195.905 644.931 li
199.574 656.222 li
f
188.619 649.244 mo
200.492 649.244 li
190.887 656.222 li
194.556 644.931 li
198.224 656.222 li
f
187.54 650.053 mo
199.413 650.053 li
189.807 657.031 li
193.476 645.74 li
197.145 657.031 li
f
186.191 650.863 mo
198.064 650.863 li
188.458 657.841 li
192.127 646.55 li
195.796 657.841 li
f
185.111 651.402 mo
196.984 651.402 li
187.379 658.381 li
191.048 647.089 li
194.716 658.381 li
f
183.762 651.402 mo
195.635 651.402 li
186.03 658.381 li
189.698 647.089 li
193.367 658.381 li
f
182.682 651.402 mo
194.556 651.402 li
184.95 658.381 li
188.619 647.089 li
192.288 658.381 li
f
181.333 651.672 mo
193.206 651.672 li
183.601 658.65 li
187.27 647.359 li
190.939 658.65 li
f
180.254 652.212 mo
192.127 652.212 li
182.522 659.19 li
186.191 647.899 li
189.859 659.19 li
f
178.905 653.831 mo
190.778 653.831 li
181.173 660.809 li
184.841 649.518 li
188.51 660.809 li
f
177.825 654.371 mo
189.698 654.371 li
180.093 661.349 li
183.762 650.058 li
187.431 661.349 li
f
176.476 654.101 mo
188.349 654.101 li
178.744 661.079 li
182.413 649.788 li
186.081 661.079 li
f
175.397 652.212 mo
187.27 652.212 li
177.665 659.19 li
181.333 647.899 li
185.002 659.19 li
f
174.048 656.529 mo
185.921 656.529 li
176.315 663.508 li
179.984 652.216 li
183.653 663.508 li
f
172.429 655.72 mo
184.302 655.72 li
174.696 662.698 li
178.365 651.407 li
182.034 662.698 li
f
168.651 646.545 mo
180.524 646.545 li
170.919 653.523 li
174.587 642.232 li
178.256 653.523 li
f
172.429 648.524 mo
172.159 648.524 li
176.746 648.524 mo
177.016 648.524 li
174.587 646.635 mo
174.587 644.746 li
174.587 650.143 mo
174.587 653.651 li
178.365 655.81 mo
178.365 655.54 li
178.365 659.317 mo
178.365 660.127 li
213.714 643.937 mo
213.444 643.937 li
217.762 643.937 mo
218.302 643.937 li
219.111 640.159 mo
218.302 640.159 li
223.429 640.159 mo
224.238 640.159 li
225.857 636.111 mo
224.238 636.111 li
229.905 636.111 mo
231.524 636.111 li
234.222 627.476 mo
231.524 627.476 li
238.54 627.476 mo
241.238 627.476 li
245.016 615.603 mo
241.238 615.603 li
249.333 615.603 mo
253.381 615.603 li
258.508 594.556 mo
253.381 594.556 li
262.556 594.556 mo
267.682 594.556 li
274.698 572.968 mo
267.682 572.968 li
279.016 572.968 mo
286.032 572.968 li
295.206 541.397 mo
286.032 541.397 li
299.524 541.397 mo
308.968 541.397 li
321.381 501.73 mo
308.968 501.73 li
325.429 501.73 mo
337.841 501.73 li
323.54 500.111 mo
323.54 499.841 li
323.54 503.619 mo
323.54 504.159 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
319.627 500.426 mo
327.452 500.426 li
321.122 505.026 li
323.54 497.583 li
325.957 505.026 li
f
293.452 540.093 mo
301.278 540.093 li
294.947 544.692 li
297.365 537.25 li
299.783 544.692 li
f
272.944 571.664 mo
280.77 571.664 li
274.439 576.264 li
276.857 568.821 li
279.275 576.264 li
f
256.484 593.252 mo
264.31 593.252 li
257.979 597.851 li
260.397 590.409 li
262.815 597.851 li
f
243.262 614.299 mo
251.087 614.299 li
244.757 618.898 li
247.175 611.456 li
249.592 618.898 li
f
232.468 626.172 mo
240.294 626.172 li
233.963 630.771 li
236.381 623.329 li
238.799 630.771 li
f
223.833 634.807 mo
231.659 634.807 li
225.328 639.406 li
227.746 631.964 li
230.164 639.406 li
f
217.357 638.855 mo
225.182 638.855 li
218.852 643.454 li
221.27 636.012 li
223.688 643.454 li
f
211.96 642.633 mo
219.786 642.633 li
213.455 647.232 li
215.873 639.79 li
218.291 647.232 li
f
207.643 645.061 mo
215.468 645.061 li
209.138 649.66 li
211.556 642.218 li
213.973 649.66 li
f
203.865 645.331 mo
211.691 645.331 li
205.36 649.93 li
207.778 642.488 li
210.196 649.93 li
f
200.897 647.22 mo
208.722 647.22 li
202.392 651.819 li
204.809 644.377 li
207.227 651.819 li
f
198.468 648.299 mo
206.294 648.299 li
199.963 652.898 li
202.381 645.456 li
204.799 652.898 li
f
196.849 648.569 mo
204.675 648.569 li
198.344 653.168 li
200.762 645.726 li
203.18 653.168 li
f
195.5 649.109 mo
203.325 649.109 li
196.995 653.708 li
199.413 646.266 li
201.831 653.708 li
f
194.421 649.109 mo
202.246 649.109 li
195.916 653.708 li
198.333 646.266 li
200.751 653.708 li
f
193.071 649.918 mo
200.897 649.918 li
194.566 654.517 li
196.984 647.075 li
199.402 654.517 li
f
191.992 649.918 mo
199.818 649.918 li
193.487 654.517 li
195.905 647.075 li
198.322 654.517 li
f
190.643 649.918 mo
198.468 649.918 li
192.138 654.517 li
194.556 647.075 li
196.973 654.517 li
f
189.564 650.728 mo
197.389 650.728 li
191.058 655.327 li
193.476 647.885 li
195.894 655.327 li
f
188.214 651.537 mo
196.04 651.537 li
189.709 656.137 li
192.127 648.694 li
194.545 656.137 li
f
187.135 652.077 mo
194.96 652.077 li
188.63 656.676 li
191.048 649.234 li
193.465 656.676 li
f
185.786 652.077 mo
193.611 652.077 li
187.281 656.676 li
189.698 649.234 li
192.116 656.676 li
f
184.706 652.077 mo
192.532 652.077 li
186.201 656.676 li
188.619 649.234 li
191.037 656.676 li
f
183.357 652.347 mo
191.182 652.347 li
184.852 656.946 li
187.27 649.504 li
189.688 656.946 li
f
182.278 652.887 mo
190.103 652.887 li
183.773 657.486 li
186.191 650.044 li
188.608 657.486 li
f
180.929 654.506 mo
188.754 654.506 li
182.423 659.105 li
184.841 651.663 li
187.259 659.105 li
f
179.849 655.045 mo
187.675 655.045 li
181.344 659.644 li
183.762 652.202 li
186.18 659.644 li
f
178.5 654.775 mo
186.325 654.775 li
179.995 659.375 li
182.413 651.932 li
184.831 659.375 li
f
177.421 652.887 mo
185.246 652.887 li
178.916 657.486 li
181.333 650.044 li
183.751 657.486 li
f
176.071 657.204 mo
183.897 657.204 li
177.566 661.803 li
179.984 654.361 li
182.402 661.803 li
f
174.452 656.394 mo
182.278 656.394 li
175.947 660.994 li
178.365 653.551 li
180.783 660.994 li
f
170.675 647.22 mo
178.5 647.22 li
172.169 651.819 li
174.587 644.377 li
177.005 651.819 li
f
172.429 648.524 mo
172.159 648.524 li
176.746 648.524 mo
177.016 648.524 li
174.587 646.635 mo
174.587 644.746 li
174.587 650.143 mo
174.587 653.651 li
178.365 655.81 mo
178.365 655.54 li
178.365 659.317 mo
178.365 660.127 li
213.714 643.937 mo
213.444 643.937 li
217.762 643.937 mo
218.302 643.937 li
219.111 640.159 mo
218.302 640.159 li
223.429 640.159 mo
224.238 640.159 li
225.857 636.111 mo
224.238 636.111 li
229.905 636.111 mo
231.524 636.111 li
234.222 627.476 mo
231.524 627.476 li
238.54 627.476 mo
241.238 627.476 li
245.016 615.603 mo
241.238 615.603 li
249.333 615.603 mo
253.381 615.603 li
258.508 594.556 mo
253.381 594.556 li
262.556 594.556 mo
267.682 594.556 li
274.698 572.968 mo
267.682 572.968 li
279.016 572.968 mo
286.032 572.968 li
295.206 541.397 mo
286.032 541.397 li
299.524 541.397 mo
308.968 541.397 li
321.381 501.73 mo
308.968 501.73 li
325.429 501.73 mo
337.841 501.73 li
323.54 500.111 mo
323.54 499.841 li
323.54 503.619 mo
323.54 504.159 li
.750179 .679652 .670191 .901488 cmyk
@
319.627 500.426 mo
327.452 500.426 li
321.122 505.026 li
323.54 497.583 li
325.957 505.026 li
.783902 .622919 3.0518e-05 3.0518e-05 cmyk
f
293.452 540.093 mo
301.278 540.093 li
294.947 544.692 li
297.365 537.25 li
299.783 544.692 li
f
272.944 571.664 mo
280.77 571.664 li
274.439 576.264 li
276.857 568.821 li
279.275 576.264 li
f
256.484 593.252 mo
264.31 593.252 li
257.979 597.851 li
260.397 590.409 li
262.815 597.851 li
f
243.262 614.299 mo
251.087 614.299 li
244.757 618.898 li
247.175 611.456 li
249.592 618.898 li
f
232.468 626.172 mo
240.294 626.172 li
233.963 630.771 li
236.381 623.329 li
238.799 630.771 li
f
223.833 634.807 mo
231.659 634.807 li
225.328 639.406 li
227.746 631.964 li
230.164 639.406 li
f
217.357 638.855 mo
225.182 638.855 li
218.852 643.454 li
221.27 636.012 li
223.688 643.454 li
f
211.96 642.633 mo
219.786 642.633 li
213.455 647.232 li
215.873 639.79 li
218.291 647.232 li
f
207.643 645.061 mo
215.468 645.061 li
209.138 649.66 li
211.556 642.218 li
213.973 649.66 li
f
203.865 645.331 mo
211.691 645.331 li
205.36 649.93 li
207.778 642.488 li
210.196 649.93 li
f
200.897 647.22 mo
208.722 647.22 li
202.392 651.819 li
204.809 644.377 li
207.227 651.819 li
f
198.468 648.299 mo
206.294 648.299 li
199.963 652.898 li
202.381 645.456 li
204.799 652.898 li
f
196.849 648.569 mo
204.675 648.569 li
198.344 653.168 li
200.762 645.726 li
203.18 653.168 li
f
195.5 649.109 mo
203.325 649.109 li
196.995 653.708 li
199.413 646.266 li
201.831 653.708 li
f
194.421 649.109 mo
202.246 649.109 li
195.916 653.708 li
198.333 646.266 li
200.751 653.708 li
f
193.071 649.918 mo
200.897 649.918 li
194.566 654.517 li
196.984 647.075 li
199.402 654.517 li
f
191.992 649.918 mo
199.818 649.918 li
193.487 654.517 li
195.905 647.075 li
198.322 654.517 li
f
190.643 649.918 mo
198.468 649.918 li
192.138 654.517 li
194.556 647.075 li
196.973 654.517 li
f
189.564 650.728 mo
197.389 650.728 li
191.058 655.327 li
193.476 647.885 li
195.894 655.327 li
f
188.214 651.537 mo
196.04 651.537 li
189.709 656.137 li
192.127 648.694 li
194.545 656.137 li
f
187.135 652.077 mo
194.96 652.077 li
188.63 656.676 li
191.048 649.234 li
193.465 656.676 li
f
185.786 652.077 mo
193.611 652.077 li
187.281 656.676 li
189.698 649.234 li
192.116 656.676 li
f
184.706 652.077 mo
192.532 652.077 li
186.201 656.676 li
188.619 649.234 li
191.037 656.676 li
f
183.357 652.347 mo
191.182 652.347 li
184.852 656.946 li
187.27 649.504 li
189.688 656.946 li
f
182.278 652.887 mo
190.103 652.887 li
183.773 657.486 li
186.191 650.044 li
188.608 657.486 li
f
180.929 654.506 mo
188.754 654.506 li
182.423 659.105 li
184.841 651.663 li
187.259 659.105 li
f
179.849 655.045 mo
187.675 655.045 li
181.344 659.644 li
183.762 652.202 li
186.18 659.644 li
f
178.5 654.775 mo
186.325 654.775 li
179.995 659.375 li
182.413 651.932 li
184.831 659.375 li
f
177.421 652.887 mo
185.246 652.887 li
178.916 657.486 li
181.333 650.044 li
183.751 657.486 li
f
176.071 657.204 mo
183.897 657.204 li
177.566 661.803 li
179.984 654.361 li
182.402 661.803 li
f
174.452 656.394 mo
182.278 656.394 li
175.947 660.994 li
178.365 653.551 li
180.783 660.994 li
f
170.675 647.22 mo
178.5 647.22 li
172.169 651.819 li
174.587 644.377 li
177.005 651.819 li
f
315.175 537.349 mo
540.492 537.349 li
540.492 650.143 li
315.175 650.143 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.269841 lw
315.175 537.349 mo
540.492 537.349 li
540.492 650.143 li
315.175 650.143 li
cp
@
349.175 538.429 mo
538.333 538.429 li
538.333 616.143 li
349.175 616.143 li
cp
ef
349.175 538.429 mo
538.333 538.429 li
538.333 616.143 li
349.175 616.143 li
cp
@
.809524 lw
349.175 538.429 mo
538.333 538.429 li
538.333 616.143 li
349.175 616.143 li
cp
.750179 .679652 .670191 .901488 cmyk
@
349.175 538.429 mo
538.333 538.429 li
538.333 616.143 li
349.175 616.143 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.269841 lw
349.175 538.429 mo
538.333 538.429 li
538.333 616.143 li
349.175 616.143 li
cp
@
.809524 lw
349.175 538.429 mo
538.333 538.429 li
538.333 616.143 li
349.175 616.143 li
cp
.750179 .679652 .670191 .901488 cmyk
@
349.175 616.143 mo
538.333 616.143 li
1 .961212 .0682689 .0831006 cmyk
@
349.175 616.143 mo
538.333 616.143 li
.750179 .679652 .670191 .901488 cmyk
@
LCKXDB+Helvetica*1 [12.3311 0 0 -12.3311 0 0 ]msf436.962 640.946 mo(  \(GeV/c\))[3.42807 3.42801 4.1062 9.59357 6.85611 8.22491 3.42807 6.16553 0 ]xshLCKXDB+Helvetica*1 [8.80794 0 0 -8.80794 0 0 ]msf407.949 634.791 mo(reco,ch)[2.93298 4.89722 4.40396 4.89722 2.44861 4.40396 0 ]xsh407.949 648.858 mo(T)shgrestore
gsave
315.175 537.349 mo
540.492 537.349 li
540.492 650.143 li
315.175 650.143 li
cp
clp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
LCKXDB+Helvetica*1 [8.80794 0 0 -8.80794 0 0 ]msf413.329 648.858 mo(,j)[2.44861 0 ]xshgrestore
gsave
0 757 mo
612 757 li
612 35 li
0 35 li
cp
clp
false sop
1 /0 /CSD get_res sepcs
1 sep
LCKXDB+Helvetica*1 [8.80794 0 0 -8.80794 0 0 ]msf417.733 648.858 mo(et)[4.89725 0 ]xshLCKXDB+Helvetica*1 [12.3311 0 0 -12.3311 0 0 ]msf400.917 640.946 mo(p)sh.809524 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
373.19 613.444 mo
373.19 616.143 li
385.063 614.794 mo
385.063 616.143 li
396.667 614.794 mo
396.667 616.143 li
408.54 614.794 mo
408.54 616.143 li
420.143 613.444 mo
420.143 616.143 li
432.016 614.794 mo
432.016 616.143 li
443.619 614.794 mo
443.619 616.143 li
455.222 614.794 mo
455.222 616.143 li
467.095 613.444 mo
467.095 616.143 li
478.698 614.794 mo
478.698 616.143 li
490.571 614.794 mo
490.571 616.143 li
502.175 614.794 mo
502.175 616.143 li
514.048 613.444 mo
514.048 616.143 li
373.19 613.444 mo
373.19 616.143 li
361.587 614.794 mo
361.587 616.143 li
349.714 614.794 mo
349.714 616.143 li
514.048 613.444 mo
514.048 616.143 li
525.651 614.794 mo
525.651 616.143 li
537.524 614.794 mo
537.524 616.143 li
@
LCKXDB+Helvetica*1 [12.3311 0 0 -12.3311 0 0 ]msf367.505 626.878 mo(0.8)[6.85611 3.42804 0 ]xshLCKXDC+Symbol*1 [12.3311 0 0 -12.3311 0 0 ]msf360.473 626.878 mo( )shLCKXDB+Helvetica*1 [12.3311 0 0 -12.3311 0 0 ]msf414.103 626.878 mo(0.6)[6.85608 3.42807 0 ]xshLCKXDC+Symbol*1 [12.3311 0 0 -12.3311 0 0 ]msf407.068 626.878 mo( )shLCKXDB+Helvetica*1 [12.3311 0 0 -12.3311 0 0 ]msf461.579 626.878 mo(0.4)[6.85608 3.42807 0 ]xshLCKXDC+Symbol*1 [12.3311 0 0 -12.3311 0 0 ]msf454.546 626.878 mo( )shLCKXDB+Helvetica*1 [12.3311 0 0 -12.3311 0 0 ]msf508.177 626.878 mo(0.2)[6.85608 3.42804 0 ]xshLCKXDC+Symbol*1 [12.3311 0 0 -12.3311 0 0 ]msf501.142 626.878 mo( )sh349.175 538.429 mo
538.333 538.429 li
373.19 541.397 mo
373.19 538.429 li
385.063 539.778 mo
385.063 538.429 li
396.667 539.778 mo
396.667 538.429 li
408.54 539.778 mo
408.54 538.429 li
420.143 541.397 mo
420.143 538.429 li
432.016 539.778 mo
432.016 538.429 li
443.619 539.778 mo
443.619 538.429 li
455.222 539.778 mo
455.222 538.429 li
467.095 541.397 mo
467.095 538.429 li
478.698 539.778 mo
478.698 538.429 li
490.571 539.778 mo
490.571 538.429 li
502.175 539.778 mo
502.175 538.429 li
514.048 541.397 mo
514.048 538.429 li
373.19 541.397 mo
373.19 538.429 li
361.587 539.778 mo
361.587 538.429 li
349.714 539.778 mo
349.714 538.429 li
514.048 541.397 mo
514.048 538.429 li
525.651 539.778 mo
525.651 538.429 li
537.524 539.778 mo
537.524 538.429 li
349.175 616.143 mo
349.175 538.429 li
@
LCKXDB+Helvetica*1 [0 -12.3311 -12.3311 0 0 0 ]msf327.941 595.227 mo(SE/ME)[-8.22498 -8.22491 -3.42804 -10.2717 0 ]ysh353.762 608.048 mo
349.175 608.048 li
351.333 604 mo
349.175 604 li
351.333 599.952 mo
349.175 599.952 li
351.333 595.635 mo
349.175 595.635 li
351.333 591.587 mo
349.175 591.587 li
353.762 587.54 mo
349.175 587.54 li
351.333 583.492 mo
349.175 583.492 li
351.333 579.444 mo
349.175 579.444 li
351.333 575.397 mo
349.175 575.397 li
351.333 571.079 mo
349.175 571.079 li
353.762 567.032 mo
349.175 567.032 li
351.333 562.984 mo
349.175 562.984 li
351.333 558.937 mo
349.175 558.937 li
351.333 554.889 mo
349.175 554.889 li
351.333 550.841 mo
349.175 550.841 li
353.762 546.524 mo
349.175 546.524 li
353.762 608.048 mo
349.175 608.048 li
351.333 612.095 mo
349.175 612.095 li
353.762 546.524 mo
349.175 546.524 li
351.333 542.476 mo
349.175 542.476 li
351.333 538.429 mo
349.175 538.429 li
@
LCKXDB+Helvetica*1 [12.3311 0 0 -12.3311 0 0 ]msf330.58 611.932 mo(0.5)[6.85608 3.42807 0 ]xsh342.887 592.589 mo(1)sh330.58 570.609 mo(1.5)[6.85608 3.42807 0 ]xsh340.251 551.267 mo(2)sh538.333 616.143 mo
538.333 538.429 li
533.476 608.048 mo
538.333 608.048 li
535.905 604 mo
538.333 604 li
535.905 599.952 mo
538.333 599.952 li
535.905 595.635 mo
538.333 595.635 li
535.905 591.587 mo
538.333 591.587 li
533.476 587.54 mo
538.333 587.54 li
535.905 583.492 mo
538.333 583.492 li
535.905 579.444 mo
538.333 579.444 li
535.905 575.397 mo
538.333 575.397 li
535.905 571.079 mo
538.333 571.079 li
533.476 567.032 mo
538.333 567.032 li
535.905 562.984 mo
538.333 562.984 li
535.905 558.937 mo
538.333 558.937 li
535.905 554.889 mo
538.333 554.889 li
535.905 550.841 mo
538.333 550.841 li
533.476 546.524 mo
538.333 546.524 li
533.476 608.048 mo
538.333 608.048 li
535.905 612.095 mo
538.333 612.095 li
533.476 546.524 mo
538.333 546.524 li
535.905 542.476 mo
538.333 542.476 li
535.905 538.429 mo
538.333 538.429 li
@
349.714 585.381 mo
537.524 585.381 li
537.524 589.698 li
349.714 589.698 li
cp
.423072 .343328 .347478 .0106203 cmyk
currentcolor
/9305768.0 
<<
/ID /9305768.0 
/EmittedGSCS true /PaintType 2
/PatternType 1
/TilingType 2
/BBox [0 0 98 4 ] 
/XStep 98 
/YStep 4 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 2 put
gsave
0 0 mo
98 0 li
98 4 li
0 4 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[1 1 ] 0 dsh
true sadj
{2 4 mo
99 4 li
1 3 mo
98 3 li
2 2 mo
99 2 li
1 1 mo
98 1 li
}exec
false sop
@
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/9305768.0 /Pattern get_res
[1.07937 0 0 -1.07937 0 757 ]make_pattern set_pattern
f
2 vmreclaim
.809524 lw
0 lc
0 lj
10 ml
[3.2381 3.2381 ] 0 dsh
true sadj
349.714 587.54 mo
537.524 587.54 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
[] 0 dsh
393.429 554.349 mo
349.714 554.349 li
399.905 554.349 mo
443.619 554.349 li
396.667 551.651 mo
396.667 538.429 li
396.667 557.048 mo
396.667 580.524 li
463.857 593.746 mo
443.619 593.746 li
470.333 593.746 mo
490.571 593.746 li
467.095 591.317 mo
467.095 587.54 li
467.095 596.444 mo
467.095 599.952 li
499.206 596.444 mo
490.571 596.444 li
505.413 596.444 mo
514.048 596.444 li
502.175 593.746 mo
502.175 591.857 li
502.175 598.873 mo
502.175 600.762 li
522.682 582.683 mo
514.048 582.683 li
528.889 582.683 mo
537.524 582.683 li
525.651 579.984 mo
525.651 578.905 li
525.651 585.381 mo
525.651 586.46 li
538.333 589.159 mo
537.524 589.159 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
519.579 580.659 mo
531.722 580.659 li
521.899 587.797 li
525.651 576.247 li
529.403 587.797 li
.750179 .679652 .670191 .901488 cmyk
f
496.103 594.421 mo
508.246 594.421 li
498.423 601.558 li
502.175 590.009 li
505.927 601.558 li
f
461.024 591.722 mo
473.167 591.722 li
463.342 598.86 li
467.095 587.311 li
470.847 598.86 li
f
390.595 552.325 mo
402.738 552.325 li
392.915 559.463 li
396.667 547.914 li
400.418 559.463 li
f
394.508 554.349 mo
349.714 554.349 li
398.825 554.349 mo
443.619 554.349 li
396.667 552.46 mo
396.667 538.429 li
396.667 555.968 mo
396.667 580.524 li
464.936 593.746 mo
443.619 593.746 li
469.254 593.746 mo
490.571 593.746 li
467.095 592.127 mo
467.095 587.54 li
467.095 595.635 mo
467.095 599.952 li
500.286 596.444 mo
490.571 596.444 li
504.333 596.444 mo
514.048 596.444 li
502.175 594.556 mo
502.175 591.857 li
502.175 598.063 mo
502.175 600.762 li
523.492 582.683 mo
514.048 582.683 li
527.809 582.683 mo
537.524 582.683 li
525.651 580.794 mo
525.651 578.905 li
525.651 584.302 mo
525.651 586.46 li
538.333 589.159 mo
537.524 589.159 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
521.738 581.379 mo
529.563 581.379 li
523.233 585.978 li
525.651 578.536 li
528.069 585.978 li
f
498.262 595.141 mo
506.087 595.141 li
499.757 599.74 li
502.175 592.297 li
504.592 599.74 li
f
463.182 592.442 mo
471.008 592.442 li
464.677 597.041 li
467.095 589.599 li
469.513 597.041 li
f
392.754 553.045 mo
400.579 553.045 li
394.249 557.644 li
396.667 550.202 li
399.084 557.644 li
f
394.508 554.349 mo
349.714 554.349 li
398.825 554.349 mo
443.619 554.349 li
396.667 552.46 mo
396.667 538.429 li
396.667 555.968 mo
396.667 580.524 li
464.936 593.746 mo
443.619 593.746 li
469.254 593.746 mo
490.571 593.746 li
467.095 592.127 mo
467.095 587.54 li
467.095 595.635 mo
467.095 599.952 li
500.286 596.444 mo
490.571 596.444 li
504.333 596.444 mo
514.048 596.444 li
502.175 594.556 mo
502.175 591.857 li
502.175 598.063 mo
502.175 600.762 li
523.492 582.683 mo
514.048 582.683 li
527.809 582.683 mo
537.524 582.683 li
525.651 580.794 mo
525.651 578.905 li
525.651 584.302 mo
525.651 586.46 li
538.333 589.159 mo
537.524 589.159 li
.750179 .679652 .670191 .901488 cmyk
@
521.738 581.379 mo
529.563 581.379 li
523.233 585.978 li
525.651 578.536 li
528.069 585.978 li
.783902 .622919 3.0518e-05 3.0518e-05 cmyk
f
498.262 595.141 mo
506.087 595.141 li
499.757 599.74 li
502.175 592.297 li
504.592 599.74 li
f
463.182 592.442 mo
471.008 592.442 li
464.677 597.041 li
467.095 589.599 li
469.513 597.041 li
f
392.754 553.045 mo
400.579 553.045 li
394.249 557.644 li
396.667 550.202 li
399.084 557.644 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Pattern [/24852884.0 /24852688.0 /24853668.0 /9305180.0 /9305768.0 ]]
] del_res
/LCKXDC+Symbol*1 uf/LCKXDC+Symbol uf/BWWAAA+Symbol uf/LCKXDB+Helvetica*1 uf/LCKXDB+Helvetica uf/STYPMX+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
