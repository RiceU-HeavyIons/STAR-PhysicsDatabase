%!PS-Adobe-3.1 EPSF-3.0
%%Title: dAuFig3_NewGlauberAnd30.0mb_06Aug2003.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0
%AI9_PrintingDataBegin
%%For: Thomas S. Ullrich
%%CreationDate: 8/6/2003
%%BoundingBox: 0 0 457 363
%%HiResBoundingBox: 0 0 456.4634 362.4698
%%CropBox: 0 0 456.4634 362.4698
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/exec_file
	statusdict /currentfilenameextend known{
		{
			0 () /SubFileDecode filter cvx exec
		}
	}{
		
		{cvx exec}
	}ifelse
def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		currentdict /lw_initializepage known not
			{
			/lw_initializepage /initializepage load def
			/initializepage
				{
				lw_initializepage
				/initializepage {} def
				}def
			}if
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: dAuFig3_NewGlauberAnd30.0mb_06Aug2003.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -362.47 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 362.47 li
456.463 362.47 li
456.463 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
1.5 lw
0 lc
0 lj
10 ml
[5 5 ] 0 dsh
true sadj
46.7642 172.875 mo
454.764 172.875 li
false sop
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/FontInfo 4 dict dup begin
/FSType 0 def
  /OrigFontType /TrueType def
end readonly def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 48 /zero put
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
48{/.notdef}repeat /zero /.notdef /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
41.5142 332.625 mov
71.536 0 (02) ash
.75 lw
[] 0 dsh
46.7642 316.625 mo
454.764 316.625 li
454.764 316.625 mo
454.764 .375 li
454.764 .375 mo
46.7642 .375 li
46.7642 .375 mo
46.7642 316.625 li
0 0 0 rgb
s
46.7642 316.625 mo
454.764 316.625 li
454.764 .375 mo
46.7642 .375 li
46.7642 316.625 mo
454.764 316.625 li
0 0 0 rgb
s
1 1 1 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666d66d67924090fad2e
914020d503aadf9240d9b1c6a63953b30ccff5415597f5a6c26fdee68dec
bc331692c1b3543bfce7c82b9d704f4fab4f> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0b35ceb7dd46fb51adbfd88390
4d8bf636baa28a31c262d1a3078da5849c1c2b98c958c72994f2c3f78ea4
d099458941ceee627e3f06f9f9a16a1d0c> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e2faf83af778bdd7ec0c55098b
e0e9b7739ea63012a93f617db4a54ea175a87f3963b18d82408a4b4aca07
c62fb2e9535e5b6e8c7ae61eda2a1953530b7a1c20e1c613736eaa239c10
515a07f3aa0b6d64123373a1e5a99a624259a238e115671adf7333dd41a7
8ab39a78f4284786c4df0d20429167addc89fc078c7c417063dcfe0d52c4
81387bcf48cb4c7455f1384c6dd065c8e657f42b246b3a7cb37a89589130
dac20b879178be4ff3a9d7cba8> ND 
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e23266ce63f299decbd88902
a58f50d327fa84a3893c0fe3af9d5b8d8ece1349c10cbf> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79e55a006319a903b4934e0296676
bb7a5df970714192f29a85860f4cb191aa4b83ebc5b58328ecf58ed9d6ff
d0d3a63dd21733d64450e3abce2a149390b0894b2fb0fce1ee78d045f446
04c31c787e13fdae7e79785a1956f734ed54b976e123646b63ce5bee0b68
59b26a26c2ad993325ab7bd77cdd1be893a8ccd1451854fed772889a0d7d
7791ac97d81ac7> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 71 /G put
dup 84 /T put
dup 86 /V put
dup 99 /c put
dup 101 /e put
dup 112 /p put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 5{/.notdef}repeat /slash /zero 
/.notdef /two 20{/.notdef}repeat /G 12{/.notdef}repeat /T /.notdef /V 
12{/.notdef}repeat /c /.notdef /e 10{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
389.264 349.875 mov
( \(GeV/c\)) sh
/ArialMT*1 findfont [11 0 0 -11 0 0 ]mfnt sfnt
382.514 353.625 mov
(T) sh
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
373.014 349.875 mov
(p) sh
66.7642 312.125 mo
66.7642 316.625 li
86.7642 312.125 mo
86.7642 316.625 li
106.764 312.125 mo
106.764 316.625 li
126.764 307.625 mo
126.764 316.625 li
146.764 312.125 mo
146.764 316.625 li
166.764 312.125 mo
166.764 316.625 li
186.764 312.125 mo
186.764 316.625 li
206.764 307.625 mo
206.764 316.625 li
226.764 312.125 mo
226.764 316.625 li
246.764 312.125 mo
246.764 316.625 li
266.764 312.125 mo
266.764 316.625 li
286.764 307.625 mo
286.764 316.625 li
306.764 312.125 mo
306.764 316.625 li
326.764 312.125 mo
326.764 316.625 li
346.764 312.125 mo
346.764 316.625 li
366.764 307.625 mo
366.764 316.625 li
386.764 312.125 mo
386.764 316.625 li
406.764 312.125 mo
406.764 316.625 li
426.764 312.125 mo
426.764 316.625 li
446.764 307.625 mo
446.764 316.625 li
446.764 307.625 mo
446.764 316.625 li
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 49 /one put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 5{/.notdef}repeat /slash /zero 
/one /two /.notdef /four /.notdef /six /.notdef /eight 
14{/.notdef}repeat /G 12{/.notdef}repeat /T /.notdef /V 12{/.notdef}repeat /c 
/.notdef /e 10{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
201.514 332.625 mov
71.774 0 (46) ash
361.764 332.625 mov
(8) sh
437.502 332.625 mov
(1) sh
445.485 332.625 mov
(0) sh
53.2642 302.125 mo
46.7642 302.125 li
53.2642 287.875 mo
46.7642 287.875 li
53.2642 273.375 mo
46.7642 273.375 li
53.2642 259.125 mo
46.7642 259.125 li
59.7642 244.625 mo
46.7642 244.625 li
53.2642 230.375 mo
46.7642 230.375 li
53.2642 215.875 mo
46.7642 215.875 li
53.2642 201.625 mo
46.7642 201.625 li
53.2642 187.125 mo
46.7642 187.125 li
53.2642 158.625 mo
46.7642 158.625 li
53.2642 144.125 mo
46.7642 144.125 li
53.2642 129.875 mo
46.7642 129.875 li
53.2642 115.375 mo
46.7642 115.375 li
59.7642 101.125 mo
46.7642 101.125 li
53.2642 86.625 mo
46.7642 86.625 li
53.2642 72.375 mo
46.7642 72.375 li
53.2642 57.875 mo
46.7642 57.875 li
53.2642 43.625 mo
46.7642 43.625 li
59.7642 29.125 mo
46.7642 29.125 li
59.7642 29.125 mo
46.7642 29.125 li
53.2642 14.875 mo
46.7642 14.875 li
53.2642 .375 mo
46.7642 .375 li
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
dup 53 /five put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 4{/.notdef}repeat /period /slash 
/zero /one /two /.notdef /four /five /six /.notdef 
/eight 14{/.notdef}repeat /G 12{/.notdef}repeat /T /.notdef /V 12{/.notdef}repeat 
/c /.notdef /e 10{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
35.2642 321.125 mov
(0) sh
20.0142 248.875 mov
(0.5) sh
36.7642 177.125 mov
(1) sh
19.2642 105.375 mov
(1.5) sh
34.7642 33.625 mov
(2) sh
448.264 302.125 mo
454.764 302.125 li
448.264 287.875 mo
454.764 287.875 li
448.264 273.375 mo
454.764 273.375 li
448.264 259.125 mo
454.764 259.125 li
441.764 244.625 mo
454.764 244.625 li
448.264 230.375 mo
454.764 230.375 li
448.264 215.875 mo
454.764 215.875 li
448.264 201.625 mo
454.764 201.625 li
448.264 187.125 mo
454.764 187.125 li
448.264 158.625 mo
454.764 158.625 li
448.264 144.125 mo
454.764 144.125 li
448.264 129.875 mo
454.764 129.875 li
448.264 115.375 mo
454.764 115.375 li
441.764 101.125 mo
454.764 101.125 li
448.264 86.625 mo
454.764 86.625 li
448.264 72.375 mo
454.764 72.375 li
448.264 57.875 mo
454.764 57.875 li
448.264 43.625 mo
454.764 43.625 li
441.764 29.125 mo
454.764 29.125 li
441.764 29.125 mo
454.764 29.125 li
448.264 14.875 mo
454.764 14.875 li
448.264 .375 mo
454.764 .375 li
0 0 0 rgb
s
92.5142 184.875 mo
92.5142 178.625 li
92.5142 191.375 mo
92.5142 197.625 li
96.5142 176.875 mo
96.5142 170.375 li
96.5142 183.625 mo
96.5142 190.375 li
100.514 169.375 mo
100.514 161.875 li
100.514 176.125 mo
100.514 183.625 li
104.514 164.125 mo
104.514 156.625 li
104.514 170.875 mo
104.514 178.375 li
108.514 158.625 mo
108.514 150.625 li
108.514 165.375 mo
108.514 173.375 li
112.514 152.875 mo
112.514 144.375 li
112.514 159.625 mo
112.514 168.375 li
116.514 143.625 mo
116.514 133.125 li
116.514 150.375 mo
116.514 161.125 li
120.514 138.625 mo
120.514 126.625 li
120.514 145.375 mo
120.514 157.375 li
124.514 133.625 mo
124.514 120.875 li
124.514 140.375 mo
124.514 153.125 li
128.514 129.375 mo
128.514 115.125 li
128.514 136.125 mo
128.514 150.375 li
132.514 121.125 mo
132.514 103.125 li
132.514 127.875 mo
132.514 146.125 li
136.514 121.375 mo
136.514 102.875 li
136.514 127.875 mo
136.514 146.375 li
140.514 115.625 mo
140.514 94.375 li
140.514 122.375 mo
140.514 143.625 li
144.514 115.125 mo
144.514 92.125 li
144.514 121.875 mo
144.514 144.875 li
150.514 106.875 mo
150.514 78.625 li
150.514 113.625 mo
150.514 141.875 li
158.514 106.625 mo
158.514 79.125 li
158.514 113.125 mo
158.514 140.625 li
166.514 111.625 mo
166.514 89.875 li
166.514 118.375 mo
166.514 140.125 li
177.264 109.125 mo
177.264 92.875 li
177.264 115.875 mo
177.264 132.125 li
193.014 100.125 mo
193.014 82.625 li
193.014 106.875 mo
193.014 124.125 li
213.514 101.875 mo
213.514 82.875 li
213.514 108.625 mo
213.514 127.625 li
239.264 103.625 mo
239.264 80.875 li
239.264 110.375 mo
239.264 132.875 li
270.514 118.125 mo
270.514 92.375 li
270.514 124.875 mo
270.514 150.625 li
308.514 118.375 mo
308.514 87.625 li
308.514 124.875 mo
308.514 155.625 li
348.764 173.625 mo
348.764 146.625 li
348.764 180.375 mo
348.764 207.375 li
389.014 173.875 mo
389.014 135.875 li
389.014 180.625 mo
389.014 218.875 li
429.014 204.875 mo
429.014 169.875 li
429.014 211.625 mo
429.014 246.375 li
.137255 .556863 .137255 rgb
s
429.014 204 mo
424.889 212.25 li
433.139 212.25 li
429.014 204 li
.137255 .556863 .137255 rgb
ef
389.014 173.25 mo
384.889 181.5 li
393.139 181.5 li
389.014 173.25 li
.137255 .556863 .137255 rgb
ef
348.764 173 mo
344.639 181.25 li
352.889 181.25 li
348.764 173 li
.137255 .556863 .137255 rgb
ef
308.514 117.5 mo
304.389 125.75 li
312.639 125.75 li
308.514 117.5 li
.137255 .556863 .137255 rgb
ef
270.514 117.25 mo
266.389 125.5 li
274.639 125.5 li
270.514 117.25 li
.137255 .556863 .137255 rgb
ef
239.264 102.75 mo
235.139 111 li
243.389 111 li
239.264 102.75 li
.137255 .556863 .137255 rgb
ef
213.514 101 mo
209.389 109.25 li
217.639 109.25 li
213.514 101 li
.137255 .556863 .137255 rgb
ef
193.014 99.25 mo
188.889 107.5 li
197.139 107.5 li
193.014 99.25 li
.137255 .556863 .137255 rgb
ef
177.264 108.25 mo
173.139 116.5 li
181.389 116.5 li
177.264 108.25 li
.137255 .556863 .137255 rgb
ef
166.514 110.75 mo
162.389 119 li
170.639 119 li
166.514 110.75 li
.137255 .556863 .137255 rgb
ef
158.514 105.75 mo
154.389 114 li
162.639 114 li
158.514 105.75 li
.137255 .556863 .137255 rgb
ef
150.514 106.25 mo
146.389 114.5 li
154.639 114.5 li
150.514 106.25 li
.137255 .556863 .137255 rgb
ef
144.514 114.25 mo
140.389 122.5 li
148.639 122.5 li
144.514 114.25 li
.137255 .556863 .137255 rgb
ef
140.514 115 mo
136.389 123.25 li
144.639 123.25 li
140.514 115 li
.137255 .556863 .137255 rgb
ef
136.514 120.5 mo
132.389 128.75 li
140.639 128.75 li
136.514 120.5 li
.137255 .556863 .137255 rgb
ef
132.514 120.5 mo
128.389 128.75 li
136.639 128.75 li
132.514 120.5 li
.137255 .556863 .137255 rgb
ef
128.514 128.75 mo
124.389 137 li
132.639 137 li
128.514 128.75 li
.137255 .556863 .137255 rgb
ef
124.514 133 mo
120.389 141.25 li
128.639 141.25 li
124.514 133 li
.137255 .556863 .137255 rgb
ef
120.514 138 mo
116.389 146.25 li
124.639 146.25 li
120.514 138 li
.137255 .556863 .137255 rgb
ef
116.514 143 mo
112.389 151.25 li
120.639 151.25 li
116.514 143 li
.137255 .556863 .137255 rgb
ef
112.514 152.25 mo
108.389 160.5 li
116.639 160.5 li
112.514 152.25 li
.137255 .556863 .137255 rgb
ef
108.514 157.75 mo
104.389 166 li
112.639 166 li
108.514 157.75 li
.137255 .556863 .137255 rgb
ef
104.514 163.25 mo
100.389 171.5 li
108.639 171.5 li
104.514 163.25 li
.137255 .556863 .137255 rgb
ef
100.514 168.5 mo
96.3892 176.75 li
104.639 176.75 li
100.514 168.5 li
.137255 .556863 .137255 rgb
ef
96.5142 176.25 mo
92.3892 184.5 li
100.639 184.5 li
96.5142 176.25 li
.137255 .556863 .137255 rgb
ef
92.5142 184 mo
88.3892 192.25 li
96.6392 192.25 li
92.5142 184 li
.137255 .556863 .137255 rgb
ef
88.5142 186.375 mo
88.5142 176.375 li
88.5142 193.125 mo
88.5142 203.125 li
92.5142 177.375 mo
92.5142 166.625 li
92.5142 184.125 mo
92.5142 194.875 li
96.5142 168.375 mo
96.5142 156.875 li
96.5142 175.125 mo
96.5142 186.875 li
100.514 162.375 mo
100.514 150.625 li
100.514 169.125 mo
100.514 180.875 li
104.514 155.875 mo
104.514 143.875 li
104.514 162.625 mo
104.514 174.625 li
108.514 149.375 mo
108.514 137.125 li
108.514 155.875 mo
108.514 168.125 li
112.514 138.375 mo
112.514 124.875 li
112.514 145.125 mo
112.514 158.625 li
116.514 132.875 mo
116.514 118.625 li
116.514 139.625 mo
116.514 153.875 li
120.514 127.375 mo
120.514 113.125 li
120.514 134.125 mo
120.514 148.625 li
124.514 121.875 mo
124.514 106.625 li
124.514 128.625 mo
124.514 143.625 li
128.514 112.875 mo
128.514 94.625 li
128.514 119.625 mo
128.514 137.875 li
132.514 112.375 mo
132.514 94.125 li
132.514 119.125 mo
132.514 137.625 li
136.514 108.375 mo
136.514 86.875 li
136.514 115.125 mo
136.514 136.375 li
140.514 105.625 mo
140.514 82.125 li
140.514 112.375 mo
140.514 135.875 li
146.514 97.375 mo
146.514 68.375 li
146.514 104.125 mo
146.514 132.875 li
154.514 97.375 mo
154.514 69.625 li
154.514 104.125 mo
154.514 131.875 li
162.514 102.125 mo
162.514 80.875 li
162.514 108.875 mo
162.514 130.125 li
173.264 100.875 mo
173.264 85.375 li
173.264 107.625 mo
173.264 123.375 li
189.014 93.875 mo
189.014 75.625 li
189.014 100.625 mo
189.014 118.625 li
209.514 96.625 mo
209.514 76.375 li
209.514 103.375 mo
209.514 123.375 li
235.264 104.625 mo
235.264 80.625 li
235.264 111.125 mo
235.264 135.125 li
266.514 124.375 mo
266.514 99.625 li
266.514 131.125 mo
266.514 156.125 li
304.514 149.875 mo
304.514 123.625 li
304.514 156.375 mo
304.514 182.625 li
344.764 184.125 mo
344.764 158.875 li
344.764 190.875 mo
344.764 216.375 li
385.014 199.875 mo
385.014 166.375 li
385.014 206.625 mo
385.014 240.125 li
425.014 233.625 mo
425.014 203.625 li
425.014 240.375 mo
425.014 270.375 li
1 0 0 rgb
s
429.109 237.055 mo
429.109 234.778 427.261 232.93 424.984 232.93 cv
422.708 232.93 420.859 234.778 420.859 237.055 cv
420.859 239.332 422.708 241.18 424.984 241.18 cv
427.261 241.18 429.109 239.332 429.109 237.055 cv
1 0 0 rgb
ef
389.149 203.095 mo
389.149 200.818 387.301 198.97 385.024 198.97 cv
382.748 198.97 380.899 200.818 380.899 203.095 cv
380.899 205.372 382.748 207.22 385.024 207.22 cv
387.301 207.22 389.149 205.372 389.149 203.095 cv
1 0 0 rgb
ef
348.83 187.615 mo
348.83 185.338 346.981 183.49 344.705 183.49 cv
342.427 183.49 340.58 185.338 340.58 187.615 cv
340.58 189.892 342.427 191.74 344.705 191.74 cv
346.981 191.74 348.83 189.892 348.83 187.615 cv
1 0 0 rgb
ef
308.629 153.055 mo
308.629 150.778 306.781 148.93 304.504 148.93 cv
302.227 148.93 300.379 150.778 300.379 153.055 cv
300.379 155.332 302.227 157.18 304.504 157.18 cv
306.781 157.18 308.629 155.332 308.629 153.055 cv
1 0 0 rgb
ef
270.589 127.855 mo
270.589 125.578 268.741 123.73 266.464 123.73 cv
264.187 123.73 262.339 125.578 262.339 127.855 cv
262.339 130.132 264.187 131.98 266.464 131.98 cv
268.741 131.98 270.589 130.132 270.589 127.855 cv
1 0 0 rgb
ef
239.389 107.935 mo
239.389 105.658 237.542 103.81 235.264 103.81 cv
232.987 103.81 231.139 105.658 231.139 107.935 cv
231.139 110.212 232.987 112.06 235.264 112.06 cv
237.542 112.06 239.389 110.212 239.389 107.935 cv
1 0 0 rgb
ef
213.709 99.895 mo
213.709 97.6182 211.861 95.77 209.584 95.77 cv
207.307 95.77 205.459 97.6182 205.459 99.895 cv
205.459 102.172 207.307 104.02 209.584 104.02 cv
211.861 104.02 213.709 102.172 213.709 99.895 cv
1 0 0 rgb
ef
193.069 97.1348 mo
193.069 94.8579 191.221 93.0098 188.944 93.0098 cv
186.667 93.0098 184.819 94.8579 184.819 97.1348 cv
184.819 99.4121 186.667 101.26 188.944 101.26 cv
191.221 101.26 193.069 99.4121 193.069 97.1348 cv
1 0 0 rgb
ef
177.349 104.335 mo
177.349 102.058 175.501 100.21 173.224 100.21 cv
170.947 100.21 169.099 102.058 169.099 104.335 cv
169.099 106.612 170.947 108.46 173.224 108.46 cv
175.501 108.46 177.349 106.612 177.349 104.335 cv
1 0 0 rgb
ef
166.669 105.415 mo
166.669 103.138 164.821 101.29 162.544 101.29 cv
160.267 101.29 158.419 103.138 158.419 105.415 cv
158.419 107.692 160.267 109.54 162.544 109.54 cv
164.821 109.54 166.669 107.692 166.669 105.415 cv
1 0 0 rgb
ef
158.629 100.855 mo
158.629 98.5781 156.781 96.73 154.504 96.73 cv
152.227 96.73 150.379 98.5781 150.379 100.855 cv
150.379 103.132 152.227 104.98 154.504 104.98 cv
156.781 104.98 158.629 103.132 158.629 100.855 cv
1 0 0 rgb
ef
150.589 100.615 mo
150.589 98.3379 148.741 96.4897 146.464 96.4897 cv
144.187 96.4897 142.339 98.3379 142.339 100.615 cv
142.339 102.892 144.187 104.74 146.464 104.74 cv
148.741 104.74 150.589 102.892 150.589 100.615 cv
1 0 0 rgb
ef
144.589 108.895 mo
144.589 106.618 142.741 104.77 140.464 104.77 cv
138.187 104.77 136.339 106.618 136.339 108.895 cv
136.339 111.172 138.187 113.02 140.464 113.02 cv
142.741 113.02 144.589 111.172 144.589 108.895 cv
1 0 0 rgb
ef
140.629 111.655 mo
140.629 109.378 138.781 107.53 136.504 107.53 cv
134.227 107.53 132.379 109.378 132.379 111.655 cv
132.379 113.932 134.227 115.78 136.504 115.78 cv
138.781 115.78 140.629 113.932 140.629 111.655 cv
1 0 0 rgb
ef
136.669 115.855 mo
136.669 113.578 134.821 111.73 132.544 111.73 cv
130.267 111.73 128.419 113.578 128.419 115.855 cv
128.419 118.132 130.267 119.98 132.544 119.98 cv
134.821 119.98 136.669 118.132 136.669 115.855 cv
1 0 0 rgb
ef
132.589 116.095 mo
132.589 113.818 130.741 111.97 128.464 111.97 cv
126.187 111.97 124.339 113.818 124.339 116.095 cv
124.339 118.372 126.187 120.22 128.464 120.22 cv
130.741 120.22 132.589 118.372 132.589 116.095 cv
1 0 0 rgb
ef
128.629 125.095 mo
128.629 122.818 126.781 120.97 124.504 120.97 cv
122.227 120.97 120.379 122.818 120.379 125.095 cv
120.379 127.372 122.227 129.22 124.504 129.22 cv
126.781 129.22 128.629 127.372 128.629 125.095 cv
1 0 0 rgb
ef
124.669 130.855 mo
124.669 128.578 122.821 126.73 120.544 126.73 cv
118.267 126.73 116.419 128.578 116.419 130.855 cv
116.419 133.132 118.267 134.98 120.544 134.98 cv
122.821 134.98 124.669 133.132 124.669 130.855 cv
1 0 0 rgb
ef
120.589 136.375 mo
120.589 134.098 118.741 132.25 116.464 132.25 cv
114.187 132.25 112.339 134.098 112.339 136.375 cv
112.339 138.652 114.187 140.5 116.464 140.5 cv
118.741 140.5 120.589 138.652 120.589 136.375 cv
1 0 0 rgb
ef
116.629 141.895 mo
116.629 139.618 114.781 137.77 112.504 137.77 cv
110.227 137.77 108.379 139.618 108.379 141.895 cv
108.379 144.172 110.227 146.02 112.504 146.02 cv
114.781 146.02 116.629 144.172 116.629 141.895 cv
1 0 0 rgb
ef
112.669 152.575 mo
112.669 150.298 110.821 148.45 108.544 148.45 cv
106.267 148.45 104.419 150.298 104.419 152.575 cv
104.419 154.852 106.267 156.7 108.544 156.7 cv
110.821 156.7 112.669 154.852 112.669 152.575 cv
1 0 0 rgb
ef
108.589 159.415 mo
108.589 157.138 106.741 155.29 104.464 155.29 cv
102.187 155.29 100.339 157.138 100.339 159.415 cv
100.339 161.692 102.187 163.54 104.464 163.54 cv
106.741 163.54 108.589 161.692 108.589 159.415 cv
1 0 0 rgb
ef
104.629 165.895 mo
104.629 163.618 102.781 161.77 100.504 161.77 cv
98.2271 161.77 96.3794 163.618 96.3794 165.895 cv
96.3794 168.172 98.2271 170.02 100.504 170.02 cv
102.781 170.02 104.629 168.172 104.629 165.895 cv
1 0 0 rgb
ef
100.669 171.895 mo
100.669 169.618 98.8213 167.77 96.5439 167.77 cv
94.2671 167.77 92.4189 169.618 92.4189 171.895 cv
92.4189 174.172 94.2671 176.02 96.5439 176.02 cv
98.8213 176.02 100.669 174.172 100.669 171.895 cv
1 0 0 rgb
ef
96.5894 180.895 mo
96.5894 178.618 94.7412 176.77 92.4644 176.77 cv
90.187 176.77 88.3394 178.618 88.3394 180.895 cv
88.3394 183.172 90.187 185.02 92.4644 185.02 cv
94.7412 185.02 96.5894 183.172 96.5894 180.895 cv
1 0 0 rgb
ef
92.6294 189.895 mo
92.6294 187.618 90.7813 185.77 88.5044 185.77 cv
86.2271 185.77 84.3794 187.618 84.3794 189.895 cv
84.3794 192.172 86.2271 194.02 88.5044 194.02 cv
90.7813 194.02 92.6294 192.172 92.6294 189.895 cv
1 0 0 rgb
ef
64.7642 272.625 mo
64.7642 270.625 li
64.7642 275.875 mo
64.7642 277.875 li
68.7642 268.375 mo
68.7642 266.125 li
68.7642 271.625 mo
68.7642 273.875 li
72.7642 263.625 mo
72.7642 261.375 li
72.7642 267.125 mo
72.7642 269.375 li
76.7642 258.625 mo
76.7642 255.875 li
76.7642 261.875 mo
76.7642 264.625 li
80.7642 253.875 mo
80.7642 250.625 li
80.7642 257.125 mo
80.7642 260.125 li
84.7642 248.875 mo
84.7642 245.375 li
84.7642 252.125 mo
84.7642 255.625 li
88.7642 244.375 mo
88.7642 240.625 li
88.7642 247.625 mo
88.7642 251.375 li
92.7642 239.125 mo
92.7642 235.125 li
92.7642 242.375 mo
92.7642 246.375 li
96.7642 234.125 mo
96.7642 229.375 li
96.7642 237.375 mo
96.7642 242.125 li
100.764 230.875 mo
100.764 226.125 li
100.764 234.125 mo
100.764 238.875 li
104.764 228.125 mo
104.764 222.875 li
104.764 231.375 mo
104.764 236.625 li
108.764 225.375 mo
108.764 219.625 li
108.764 228.625 mo
108.764 234.375 li
112.514 222.375 mo
112.514 215.875 li
112.514 225.875 mo
112.514 232.375 li
116.514 220.375 mo
116.514 213.125 li
116.514 223.875 mo
116.514 230.875 li
120.514 219.375 mo
120.514 211.625 li
120.514 222.625 mo
120.514 230.125 li
124.514 217.875 mo
124.514 209.875 li
124.514 221.375 mo
124.514 229.375 li
128.514 215.875 mo
128.514 206.375 li
128.514 219.375 mo
128.514 228.875 li
132.514 216.625 mo
132.514 207.125 li
132.514 219.875 mo
132.514 229.375 li
136.514 214.875 mo
136.514 204.375 li
136.514 218.125 mo
136.514 228.625 li
140.514 215.625 mo
140.514 204.625 li
140.514 218.875 mo
140.514 229.875 li
146.514 214.875 mo
146.514 202.125 li
146.514 218.125 mo
146.514 230.875 li
154.514 222.125 mo
154.514 210.875 li
154.514 225.375 mo
154.514 236.625 li
162.514 234.125 mo
162.514 226.625 li
162.514 237.375 mo
162.514 245.125 li
173.264 244.375 mo
173.264 239.375 li
173.264 247.625 mo
173.264 252.375 li
188.764 251.875 mo
188.764 247.375 li
188.764 255.125 mo
188.764 259.625 li
209.264 260.375 mo
209.264 256.375 li
209.264 263.875 mo
209.264 267.875 li
235.014 269.125 mo
235.014 265.875 li
235.014 272.625 mo
235.014 275.875 li
266.014 275.875 mo
266.014 272.875 li
266.014 279.125 mo
266.014 282.125 li
303.764 277.125 mo
303.764 273.375 li
303.764 280.625 mo
303.764 284.375 li
344.014 288.375 mo
344.014 285.375 li
344.014 291.875 mo
344.014 294.875 li
384.264 282.875 mo
384.264 276.125 li
384.264 286.125 mo
384.264 292.875 li
424.264 287.875 mo
424.264 280.625 li
424.264 291.125 mo
424.264 298.375 li
0 0 1 rgb
s
420.139 288 mo
428.389 288 li
421.714 292.85 li
424.264 285.003 li
426.814 292.85 li
420.139 288 li
0 0 0 rgb
f
380.139 283.25 mo
388.389 283.25 li
381.714 288.1 li
384.264 280.253 li
386.814 288.1 li
380.139 283.25 li
0 0 0 rgb
f
339.889 288.75 mo
348.139 288.75 li
341.464 293.6 li
344.014 285.753 li
346.563 293.6 li
339.889 288.75 li
0 0 0 rgb
f
299.639 277.5 mo
307.889 277.5 li
301.214 282.35 li
303.764 274.503 li
306.314 282.35 li
299.639 277.5 li
0 0 0 rgb
f
261.889 276.25 mo
270.139 276.25 li
263.464 281.1 li
266.014 273.253 li
268.564 281.1 li
261.889 276.25 li
0 0 0 rgb
f
230.889 269.5 mo
239.139 269.5 li
232.465 274.35 li
235.014 266.503 li
237.563 274.35 li
230.889 269.5 li
0 0 0 rgb
f
205.139 260.75 mo
213.389 260.75 li
206.715 265.6 li
209.264 257.753 li
211.813 265.6 li
205.139 260.75 li
0 0 0 rgb
f
184.639 252.25 mo
192.889 252.25 li
186.215 257.1 li
188.764 249.253 li
191.313 257.1 li
184.639 252.25 li
0 0 0 rgb
f
169.139 244.5 mo
177.389 244.5 li
170.715 249.35 li
173.264 241.503 li
175.813 249.35 li
169.139 244.5 li
0 0 0 rgb
f
158.389 234.5 mo
166.639 234.5 li
159.965 239.35 li
162.514 231.503 li
165.063 239.35 li
158.389 234.5 li
0 0 0 rgb
f
150.389 222.25 mo
158.639 222.25 li
151.965 227.1 li
154.514 219.253 li
157.063 227.1 li
150.389 222.25 li
0 0 0 rgb
f
142.389 215 mo
150.639 215 li
143.965 219.85 li
146.514 212.003 li
149.063 219.85 li
142.389 215 li
0 0 0 rgb
f
136.389 216 mo
144.639 216 li
137.965 220.85 li
140.514 213.003 li
143.063 220.85 li
136.389 216 li
0 0 0 rgb
f
132.389 215.25 mo
140.639 215.25 li
133.965 220.1 li
136.514 212.253 li
139.063 220.1 li
132.389 215.25 li
0 0 0 rgb
f
128.389 217 mo
136.639 217 li
129.965 221.85 li
132.514 214.003 li
135.063 221.85 li
128.389 217 li
0 0 0 rgb
f
124.389 216.25 mo
132.639 216.25 li
125.965 221.1 li
128.514 213.253 li
131.063 221.1 li
124.389 216.25 li
0 0 0 rgb
f
120.389 218.25 mo
128.639 218.25 li
121.965 223.1 li
124.514 215.253 li
127.063 223.1 li
120.389 218.25 li
0 0 0 rgb
f
116.389 219.5 mo
124.639 219.5 li
117.965 224.35 li
120.514 216.503 li
123.063 224.35 li
116.389 219.5 li
0 0 0 rgb
f
112.389 220.75 mo
120.639 220.75 li
113.965 225.6 li
116.514 217.753 li
119.063 225.6 li
112.389 220.75 li
0 0 0 rgb
f
108.389 222.75 mo
116.639 222.75 li
109.965 227.6 li
112.514 219.753 li
115.063 227.6 li
108.389 222.75 li
0 0 0 rgb
f
104.639 225.75 mo
112.889 225.75 li
106.215 230.6 li
108.764 222.753 li
111.313 230.6 li
104.639 225.75 li
0 0 0 rgb
f
100.639 228.5 mo
108.889 228.5 li
102.215 233.35 li
104.764 225.503 li
107.313 233.35 li
100.639 228.5 li
0 0 0 rgb
f
96.6392 231.25 mo
104.889 231.25 li
98.2148 236.1 li
100.764 228.253 li
103.313 236.1 li
96.6392 231.25 li
0 0 0 rgb
f
92.6392 234.25 mo
100.889 234.25 li
94.2148 239.1 li
96.7642 231.253 li
99.3135 239.1 li
92.6392 234.25 li
0 0 0 rgb
f
88.6392 239.5 mo
96.8892 239.5 li
90.2148 244.35 li
92.7642 236.503 li
95.3135 244.35 li
88.6392 239.5 li
0 0 0 rgb
f
84.6392 244.5 mo
92.8892 244.5 li
86.2148 249.35 li
88.7642 241.503 li
91.3135 249.35 li
84.6392 244.5 li
0 0 0 rgb
f
80.6392 249.25 mo
88.8892 249.25 li
82.2148 254.1 li
84.7642 246.253 li
87.3135 254.1 li
80.6392 249.25 li
0 0 0 rgb
f
76.6392 254 mo
84.8892 254 li
78.2148 258.85 li
80.7642 251.003 li
83.3135 258.85 li
76.6392 254 li
0 0 0 rgb
f
72.6392 258.75 mo
80.8892 258.75 li
74.2148 263.6 li
76.7642 255.753 li
79.3135 263.6 li
72.6392 258.75 li
0 0 0 rgb
f
68.6392 264 mo
76.8892 264 li
70.2148 268.85 li
72.7642 261.003 li
75.3135 268.85 li
68.6392 264 li
0 0 0 rgb
f
64.6392 268.5 mo
72.8892 268.5 li
66.2148 273.35 li
68.7642 265.503 li
71.3135 273.35 li
64.6392 268.5 li
0 0 0 rgb
f
60.6392 273 mo
68.8892 273 li
62.2148 277.85 li
64.7642 270.003 li
67.3135 277.85 li
60.6392 273 li
0 0 0 rgb
f
64.7642 272.625 mo
64.7642 272.125 li
64.7642 275.875 mo
64.7642 276.375 li
68.7642 268.375 mo
68.7642 267.625 li
68.7642 271.625 mo
68.7642 272.375 li
72.7642 263.625 mo
72.7642 262.625 li
72.7642 267.125 mo
72.7642 267.875 li
76.7642 258.625 mo
76.7642 257.375 li
76.7642 261.875 mo
76.7642 263.125 li
80.7642 253.875 mo
80.7642 252.375 li
80.7642 257.125 mo
80.7642 258.625 li
84.7642 248.875 mo
84.7642 247.125 li
84.7642 252.125 mo
84.7642 253.875 li
88.7642 244.375 mo
88.7642 242.375 li
88.7642 247.625 mo
88.7642 249.625 li
92.7642 239.125 mo
92.7642 236.875 li
92.7642 242.375 mo
92.7642 244.625 li
96.7642 234.125 mo
96.7642 231.625 li
96.7642 237.375 mo
96.7642 239.875 li
100.764 230.875 mo
100.764 228.375 li
100.764 234.125 mo
100.764 236.875 li
104.764 228.125 mo
104.764 225.375 li
104.764 231.375 mo
104.764 234.125 li
108.764 225.375 mo
108.764 222.125 li
108.764 228.625 mo
108.764 231.875 li
112.514 222.375 mo
112.514 219.125 li
112.514 225.875 mo
112.514 229.125 li
116.514 220.375 mo
116.514 216.875 li
116.514 223.875 mo
116.514 227.125 li
120.514 219.375 mo
120.514 215.875 li
120.514 222.625 mo
120.514 226.125 li
124.514 217.875 mo
124.514 214.375 li
124.514 221.375 mo
124.514 224.875 li
128.514 215.875 mo
128.514 212.375 li
128.514 219.375 mo
128.514 222.875 li
132.514 216.625 mo
132.514 213.125 li
132.514 219.875 mo
132.514 223.625 li
136.514 214.875 mo
136.514 211.125 li
136.514 218.125 mo
136.514 221.875 li
140.514 215.625 mo
140.514 211.875 li
140.514 218.875 mo
140.514 222.625 li
146.514 214.875 mo
146.514 211.125 li
146.514 218.125 mo
146.514 221.875 li
154.514 222.125 mo
154.514 218.625 li
154.514 225.375 mo
154.514 228.625 li
162.514 234.125 mo
162.514 231.375 li
162.514 237.375 mo
162.514 240.125 li
173.264 244.375 mo
173.264 242.125 li
173.264 247.625 mo
173.264 249.875 li
188.764 251.875 mo
188.764 250.125 li
188.764 255.125 mo
188.764 256.875 li
209.264 260.375 mo
209.264 258.375 li
209.264 263.875 mo
209.264 265.875 li
235.014 269.125 mo
235.014 267.625 li
235.014 272.625 mo
235.014 274.125 li
266.014 275.875 mo
266.014 274.625 li
266.014 279.125 mo
266.014 280.375 li
303.764 277.125 mo
303.764 275.625 li
303.764 280.625 mo
303.764 282.125 li
344.014 288.375 mo
344.014 287.625 li
344.014 291.875 mo
344.014 292.625 li
384.264 282.875 mo
384.264 281.125 li
384.264 286.125 mo
384.264 287.875 li
424.264 287.875 mo
424.264 286.125 li
424.264 291.125 mo
424.264 292.875 li
0 0 1 rgb
s
420.139 288 mo
428.389 288 li
421.714 292.85 li
424.264 285.003 li
426.814 292.85 li
420.139 288 li
0 0 1 rgb
f
380.139 283.25 mo
388.389 283.25 li
381.714 288.1 li
384.264 280.253 li
386.814 288.1 li
380.139 283.25 li
0 0 1 rgb
f
339.889 288.75 mo
348.139 288.75 li
341.464 293.6 li
344.014 285.753 li
346.563 293.6 li
339.889 288.75 li
0 0 1 rgb
f
299.639 277.5 mo
307.889 277.5 li
301.214 282.35 li
303.764 274.503 li
306.314 282.35 li
299.639 277.5 li
0 0 1 rgb
f
261.889 276.25 mo
270.139 276.25 li
263.464 281.1 li
266.014 273.253 li
268.564 281.1 li
261.889 276.25 li
0 0 1 rgb
f
230.889 269.5 mo
239.139 269.5 li
232.465 274.35 li
235.014 266.503 li
237.563 274.35 li
230.889 269.5 li
0 0 1 rgb
f
205.139 260.75 mo
213.389 260.75 li
206.715 265.6 li
209.264 257.753 li
211.813 265.6 li
205.139 260.75 li
0 0 1 rgb
f
184.639 252.25 mo
192.889 252.25 li
186.215 257.1 li
188.764 249.253 li
191.313 257.1 li
184.639 252.25 li
0 0 1 rgb
f
169.139 244.5 mo
177.389 244.5 li
170.715 249.35 li
173.264 241.503 li
175.813 249.35 li
169.139 244.5 li
0 0 1 rgb
f
158.389 234.5 mo
166.639 234.5 li
159.965 239.35 li
162.514 231.503 li
165.063 239.35 li
158.389 234.5 li
0 0 1 rgb
f
150.389 222.25 mo
158.639 222.25 li
151.965 227.1 li
154.514 219.253 li
157.063 227.1 li
150.389 222.25 li
0 0 1 rgb
f
142.389 215 mo
150.639 215 li
143.965 219.85 li
146.514 212.003 li
149.063 219.85 li
142.389 215 li
0 0 1 rgb
f
136.389 216 mo
144.639 216 li
137.965 220.85 li
140.514 213.003 li
143.063 220.85 li
136.389 216 li
0 0 1 rgb
f
132.389 215.25 mo
140.639 215.25 li
133.965 220.1 li
136.514 212.253 li
139.063 220.1 li
132.389 215.25 li
0 0 1 rgb
f
128.389 217 mo
136.639 217 li
129.965 221.85 li
132.514 214.003 li
135.063 221.85 li
128.389 217 li
0 0 1 rgb
f
124.389 216.25 mo
132.639 216.25 li
125.965 221.1 li
128.514 213.253 li
131.063 221.1 li
124.389 216.25 li
0 0 1 rgb
f
120.389 218.25 mo
128.639 218.25 li
121.965 223.1 li
124.514 215.253 li
127.063 223.1 li
120.389 218.25 li
0 0 1 rgb
f
116.389 219.5 mo
124.639 219.5 li
117.965 224.35 li
120.514 216.503 li
123.063 224.35 li
116.389 219.5 li
0 0 1 rgb
f
112.389 220.75 mo
120.639 220.75 li
113.965 225.6 li
116.514 217.753 li
119.063 225.6 li
112.389 220.75 li
0 0 1 rgb
f
108.389 222.75 mo
116.639 222.75 li
109.965 227.6 li
112.514 219.753 li
115.063 227.6 li
108.389 222.75 li
0 0 1 rgb
f
104.639 225.75 mo
112.889 225.75 li
106.215 230.6 li
108.764 222.753 li
111.313 230.6 li
104.639 225.75 li
0 0 1 rgb
f
100.639 228.5 mo
108.889 228.5 li
102.215 233.35 li
104.764 225.503 li
107.313 233.35 li
100.639 228.5 li
0 0 1 rgb
f
96.6392 231.25 mo
104.889 231.25 li
98.2148 236.1 li
100.764 228.253 li
103.313 236.1 li
96.6392 231.25 li
0 0 1 rgb
f
92.6392 234.25 mo
100.889 234.25 li
94.2148 239.1 li
96.7642 231.253 li
99.3135 239.1 li
92.6392 234.25 li
0 0 1 rgb
f
88.6392 239.5 mo
96.8892 239.5 li
90.2148 244.35 li
92.7642 236.503 li
95.3135 244.35 li
88.6392 239.5 li
0 0 1 rgb
f
84.6392 244.5 mo
92.8892 244.5 li
86.2148 249.35 li
88.7642 241.503 li
91.3135 249.35 li
84.6392 244.5 li
0 0 1 rgb
f
80.6392 249.25 mo
88.8892 249.25 li
82.2148 254.1 li
84.7642 246.253 li
87.3135 254.1 li
80.6392 249.25 li
0 0 1 rgb
f
76.6392 254 mo
84.8892 254 li
78.2148 258.85 li
80.7642 251.003 li
83.3135 258.85 li
76.6392 254 li
0 0 1 rgb
f
72.6392 258.75 mo
80.8892 258.75 li
74.2148 263.6 li
76.7642 255.753 li
79.3135 263.6 li
72.6392 258.75 li
0 0 1 rgb
f
68.6392 264 mo
76.8892 264 li
70.2148 268.85 li
72.7642 261.003 li
75.3135 268.85 li
68.6392 264 li
0 0 1 rgb
f
64.6392 268.5 mo
72.8892 268.5 li
66.2148 273.35 li
68.7642 265.503 li
71.3135 273.35 li
64.6392 268.5 li
0 0 1 rgb
f
60.6392 273 mo
68.8892 273 li
62.2148 277.85 li
64.7642 270.003 li
67.3135 277.85 li
60.6392 273 li
0 0 1 rgb
f
1.5 lw
64.7642 267.625 mo
68.7642 262.625 li
72.7642 257.375 li
76.7642 251.375 li
80.7642 245.875 li
84.7642 240.125 li
88.7642 235.125 li
92.7642 228.875 li
96.7642 223.125 li
100.764 219.625 li
104.764 216.375 li
108.764 213.125 li
112.514 209.625 li
116.514 207.375 li
120.514 206.125 li
124.514 204.625 li
128.514 202.125 li
132.514 203.125 li
136.514 201.125 li
140.514 201.875 li
146.514 200.875 li
154.514 209.375 li
162.514 223.375 li
173.264 234.875 li
188.764 243.625 li
209.264 253.625 li
235.014 263.625 li
266.014 271.375 li
303.764 273.125 li
344.014 285.875 li
384.264 279.625 li
424.264 285.375 li
64.7642 280.875 mo
68.7642 277.125 li
72.7642 273.375 li
76.7642 268.875 li
80.7642 264.875 li
84.7642 260.875 li
88.7642 256.875 li
92.7642 252.625 li
96.7642 248.375 li
100.764 245.625 li
104.764 243.375 li
108.764 240.875 li
112.514 238.375 li
116.514 236.875 li
120.514 235.875 li
124.514 234.625 li
128.514 233.125 li
132.514 233.625 li
136.514 232.125 li
140.514 232.625 li
146.514 232.125 li
154.514 238.125 li
162.514 248.375 li
173.264 256.875 li
188.764 263.375 li
209.264 270.625 li
235.014 277.875 li
266.014 283.625 li
303.764 284.625 li
344.014 294.125 li
384.264 289.625 li
424.264 293.625 li
0 0 1 rgb
s
87.1392 291 mo
95.3892 291 li
88.7148 295.85 li
91.2642 288.003 li
93.8135 295.85 li
87.1392 291 li
0 0 1 rgb
f
[4 4 ] 0 dsh
92.5142 165.875 mo
96.5142 156.625 li
100.514 147.625 li
104.514 141.375 li
108.514 135.125 li
112.514 128.375 li
116.514 117.625 li
120.514 111.625 li
124.514 105.875 li
128.514 100.875 li
132.514 91.125 li
136.514 91.125 li
140.514 84.625 li
144.514 84.125 li
150.514 74.375 li
158.514 73.875 li
166.514 79.875 li
177.264 76.875 li
193.014 66.375 li
213.514 68.375 li
239.264 70.375 li
270.514 87.625 li
308.514 87.625 li
348.764 152.875 li
389.014 153.125 li
429.014 189.375 li
92.5142 210.375 mo
96.5142 204.125 li
100.514 197.625 li
104.514 193.375 li
108.514 188.875 li
112.514 184.125 li
116.514 176.625 li
120.514 172.375 li
124.514 168.375 li
128.514 164.625 li
132.514 157.875 li
136.514 158.125 li
140.514 153.375 li
144.514 152.875 li
150.514 146.125 li
158.514 145.875 li
166.514 150.125 li
177.264 147.875 li
193.014 140.625 li
213.514 141.875 li
239.264 143.375 li
270.514 155.375 li
308.514 155.625 li
348.764 201.375 li
389.014 201.625 li
429.014 227.125 li
.137255 .556863 .137255 rgb
s
[] 0 dsh
88.5142 167.875 mo
92.5142 157.125 li
96.5142 146.625 li
100.514 139.625 li
104.514 131.875 li
108.514 124.125 li
112.514 111.375 li
116.514 104.875 li
120.514 98.625 li
124.514 91.875 li
128.514 81.375 li
132.514 80.875 li
136.514 76.125 li
140.514 72.875 li
146.514 63.125 li
154.514 63.375 li
162.514 68.625 li
173.264 67.375 li
189.014 59.125 li
209.514 62.375 li
235.264 71.625 li
266.514 94.875 li
304.514 124.625 li
344.764 165.125 li
385.014 183.625 li
425.014 223.125 li
88.5142 211.875 mo
92.5142 204.375 li
96.5142 197.125 li
100.514 192.125 li
104.514 186.625 li
108.514 181.125 li
112.514 172.125 li
116.514 167.625 li
120.514 163.125 li
124.514 158.625 li
128.514 151.125 li
132.514 150.625 li
136.514 147.375 li
140.514 145.125 li
146.514 138.125 li
154.514 138.375 li
162.514 142.125 li
173.264 141.125 li
189.014 135.375 li
209.514 137.625 li
235.264 144.125 li
266.514 160.625 li
304.514 181.625 li
344.764 209.875 li
385.014 222.875 li
425.014 250.875 li
1 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent 
<10bf317037023d4c0d7ec55f50e0d703cd7cc105c35d70b97d9489f0de07
1f70e38783ce8e9659e1fefb002060a7a90b5cb341b84da319570fed6eb1
3c12736330866a12140091578a9079f81c1e9ef006fa4621a4c29d25db0a
b058888fced51fc8bebd1a50501fcc89f54d4ee1414d565dbbd612ca2590
d905e6eb5d353948cd6733d4356a2ddfe46e46c7517e7690d44bd5f41df2
b9cfb0904cbb29cfedfae23e19961f73f5f45aaee51f2b5e13e122291911
3b18e6fc580c2aa968414a081af12dbe515ca377c334103e76ca0e06727b
f4bfe9d3cf45104cce59563993bcb7254fcd1dfbd8832a1a621076705e0b
638f8ed9640e236482bf53dd2d05ea8be78a6a206ba51b06d485d58b1de6
14513677> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d
7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546
282a3c313b2605b04804> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
/F 
<10bf31702f7c4b31b7f92f61f70a9032d1addef58c81f5b8fed9651d8c00
81acb06eda84b504e7> ND 
/P 
<10bf31702a85d5ccd794b0f82fad1df586d5fbd89610cffce961ef0c01e8
0dd41794780f980f6fae77f9030913b26e9faf7c4997be350b070860e734
b58d1af4e1f6fdede1ce393d1a10ecb0df5eb5d5689fc4b0c8ea8e8ea551
86c9a594f8c2368e99f819874a733380254b54725709f6d7ae5e> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f67877e80be643ef8
5a01cff57f62859595ad9c2a1ef16f4c22144c6fc4d200f23642de52d57f
47e47c78a8b6713f5cb6dcd4a475047f70e7386f0baddd9f1c37f1598f60
1bc5b6005acf2115ed4aa52ed6ed621e5045f115e6c8ed146247e81ce086
3c881ef71e6e234403d5f37c528c6ebb0616bbdc05a29ca9d830ed27448f
> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 37 /percent put
dup 43 /plus put
dup 45 /hyphen put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 80 /P put
dup 100 /d put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 4{/.notdef}repeat /percent 2{/.notdef}repeat /parenleft /parenright /.notdef 
/plus /.notdef /hyphen /period /slash /zero /one /two 
/.notdef /four /five /six /.notdef /eight 8{/.notdef}repeat /A 
/.notdef /C 2{/.notdef}repeat /F /G 8{/.notdef}repeat /P 3{/.notdef}repeat 
/T /.notdef /V 12{/.notdef}repeat /c /d /e 10{/.notdef}repeat 
/p 4{/.notdef}repeat /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
261.014 24.125 mov
(d+Au FTPC-Au 0-20%) sh
.75 lw
235.014 18.875 mo
258.014 18.875 li
1 0 0 rgb
s
250.589 18.8848 mo
250.589 16.6079 248.741 14.7598 246.464 14.7598 cv
244.187 14.7598 242.339 16.6079 242.339 18.8848 cv
242.339 21.1621 244.187 23.0098 246.464 23.0098 cv
248.741 23.0098 250.589 21.1621 250.589 18.8848 cv
1 0 0 rgb
ef
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B 
<10bf317026ba62063ac1fc9b1b7e78ffd02405a6073c267edcf7d4772d8b
d58886357b255f6a34ffdb28ea7dd3bcde9e8d86152df16bbf95464b3da5
81a80241ab3a15cb834fac879964bca12ae45a2346542b45e7f82e769dc6
0e9db083a82e08534c9f6f82aa9d811f6505bf0b1bb832cbb587ac8320f0
ae1ae42aea897a566c4e8001af359257dc731487787c0d93ef9b2f1ed840
41901425e5e82bd0ae3793e0dd4c50ff12905ccd193e1ae08c7b651a3ee6
9ac2a8d60e0001b1e2cb724d65cbbbc80d6c9cf4edb8b286a76ac8c6d7e6
c234df3f063f1d91> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638a69fbd75880845cec3cf05cb08dd78863
8da26e9aec39bfd95b1a> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996aeea18b52bf494757c5251c9374c
9401f98b0cace0d4875f7ed6fd1c3b2afb70e988b112b201a9d47e0c13f4
1047852d209bb94beef969307b8c216c427c9903125ecb96a03389115b44
edc7e2e2478a1fd25f07acc3624f3ed1b5defe5adc0d2b5c9f2461afba44
82f331b79ca3a770e50164bc5ea7976dee8e016d390d83fcc1fa4202137b
503516f93235eba4c56226d091ad7f8be6c874f34a5fb2592031776db147
88325910cfdd12dfbef218194f528860b4df22c468e92140ddaed77110f7
ac35f3eb45ccb9aa77fa9fad75c6eb6c0fb7ca> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 66 /B put
dup 77 /M put
dup 97 /a put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 115 /s put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 4{/.notdef}repeat /percent 2{/.notdef}repeat /parenleft /parenright /.notdef 
/plus /.notdef /hyphen /period /slash /zero /one /two 
/.notdef /four /five /six /.notdef /eight 8{/.notdef}repeat /A 
/B /C 2{/.notdef}repeat /F /G 5{/.notdef}repeat /M 2{/.notdef}repeat 
/P 3{/.notdef}repeat /T /.notdef /V 10{/.notdef}repeat /a /.notdef 
/c /d /e 3{/.notdef}repeat /i 3{/.notdef}repeat /m /n 
/.notdef /p 2{/.notdef}repeat /s /.notdef /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
261.014 46.875 mov
(d+Au Minimum Bias) sh
235.014 41.375 mo
258.014 41.375 li
.137255 .556863 .137255 rgb
s
246.514 37.25 mo
242.389 45.5 li
250.639 45.5 li
246.514 37.25 li
.137255 .556863 .137255 rgb
ef
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 108 /l put
dup 114 /r put
dup 116 /t put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 4{/.notdef}repeat /percent 2{/.notdef}repeat /parenleft /parenright /.notdef 
/plus /.notdef /hyphen /period /slash /zero /one /two 
/.notdef /four /five /six /.notdef /eight 8{/.notdef}repeat /A 
/B /C 2{/.notdef}repeat /F /G 5{/.notdef}repeat /M 2{/.notdef}repeat 
/P 3{/.notdef}repeat /T /.notdef /V 10{/.notdef}repeat /a /.notdef 
/c /d /e 3{/.notdef}repeat /i 2{/.notdef}repeat /l /m 
/n /.notdef /p /.notdef /r /s /t /u 
138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [18 0 0 -18 0 0 ]mfnt sfnt
368.014 350.625 mov
( ) sh
373.015 350.625 mov
(p) sh
/ArialMT*1 findfont [12 0 0 -12 0 0 ]mfnt sfnt
382.126 356.625 mov
(T) sh
/ArialMT*1 findfont [18 0 0 -18 0 0 ]mfnt sfnt
389.456 350.625 mov
( \(GeV/c\)) sh
/ArialMT*1 findfont [17 0 0 -17 0 0 ]mfnt sfnt
102.116 298.51 mov
(Au+Au Central) sh
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R 
<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67
f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57
ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a
71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c
a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370
3042b60d2181c6c1afb0bef5eb> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 82 /R put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 4{/.notdef}repeat /percent 2{/.notdef}repeat /parenleft /parenright /.notdef 
/plus /.notdef /hyphen /period /slash /zero /one /two 
/.notdef /four /five /six /.notdef /eight 8{/.notdef}repeat /A 
/B /C 2{/.notdef}repeat /F /G 5{/.notdef}repeat /M 2{/.notdef}repeat 
/P /.notdef /R /.notdef /T /.notdef /V 10{/.notdef}repeat 
/a /.notdef /c /d /e 3{/.notdef}repeat /i 2{/.notdef}repeat 
/l /m /n /.notdef /p /.notdef /r /s 
/t /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [0 -18 -18 0 0 0 ]mfnt sfnt
18 59.0215 mov
(R) sh
/ArialMT*1 findfont [0 -12 -12 0 0 0 ]mfnt sfnt
24 46.9225 mov
0 0.599991 (AB ) ash
/ArialMT*1 findfont [0 -18 -18 0 0 0 ]mfnt sfnt
18 29.3807 mov
(\() sh
18 23.3865 mov
(p) sh
/ArialMT*1 findfont [0 -12 -12 0 0 0 ]mfnt sfnt
24 14.2758 mov
(T) sh
/ArialMT*1 findfont [0 -18 -18 0 0 0 ]mfnt sfnt
18 6.94571 mov
(\)) sh
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF