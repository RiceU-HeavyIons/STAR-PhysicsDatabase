%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: balance_eta_hui.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Gary Westfall
%%CreationDate: 1/12/15
%%BoundingBox: 0 0 600 370
%%HiResBoundingBox: 0 0 599.4517 369.4883
%%CropBox: 0 0 599.4517 369.4883
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.4%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.4 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2014-03-26T16:10:27-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2014-03-26T16:10:27-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2014-03-26T16:10:27-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxHzZ53utD1aK0is0&#xA;nt4oYbm+d3ZH9O4u0tFWBQrBnVn5HkR0A/aqFWN+fvPl3LF5p8vLYhbBbHULBb5i3JrtNKa+YKoG&#xA;4EbAU28a9sSWUYmRAG5KfeWvLv5Wa/pMV/p2jaNfRf3cs8WnQxL6qU5j0pELp4hW7EbnrkIZIzFg&#xA;uRrNFm00+DLHhlz/ABSaf8q88gf9SzpX/SDbf80ZNxUFrnkTyDbaPeXP6E0mxFvC8z3Z061k9NYx&#xA;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&#xA;VdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica-Oblique</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Oblique</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>1.0</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">balance_eta_hui.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:01801174072068118083D9B9D7C7383E</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:01801174072068118083D9B9D7C7383E</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:27182d75-1626-1841-8915-014e1d10f200</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:08853917-626c-1043-a384-59660213dcc8</stRef:instanceID>
            <stRef:documentID>uuid:27182d75-1626-1841-8915-014e1d10f200</stRef:documentID>
            <stRef:originalDocumentID>uuid:27182d75-1626-1841-8915-014e1d10f200</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068118083D9B9D7C7383E</stEvt:instanceID>
                  <stEvt:when>2014-03-26T16:10:27-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -369.488 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 369.488 li
599.452 369.488 li
599.452 0 li
cp
clp
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
55.5767 165.75 mo
55.5767 .75 li
189.577 161.5 mo
189.577 165.75 li
186.327 163.5 mo
186.327 165.75 li
182.827 163.5 mo
182.827 165.75 li
179.577 163.5 mo
179.577 165.75 li
176.327 161.5 mo
176.327 165.75 li
172.827 163.5 mo
172.827 165.75 li
169.577 163.5 mo
169.577 165.75 li
166.077 163.5 mo
166.077 165.75 li
162.827 161.5 mo
162.827 165.75 li
159.577 163.5 mo
159.577 165.75 li
156.077 163.5 mo
156.077 165.75 li
152.827 163.5 mo
152.827 165.75 li
149.327 161.5 mo
149.327 165.75 li
146.077 163.5 mo
146.077 165.75 li
142.577 163.5 mo
142.577 165.75 li
139.327 163.5 mo
139.327 165.75 li
136.077 161.5 mo
136.077 165.75 li
132.577 163.5 mo
132.577 165.75 li
129.327 163.5 mo
129.327 165.75 li
125.827 163.5 mo
125.827 165.75 li
122.577 161.5 mo
122.577 165.75 li
119.327 163.5 mo
119.327 165.75 li
115.827 163.5 mo
115.827 165.75 li
112.577 163.5 mo
112.577 165.75 li
109.077 161.5 mo
109.077 165.75 li
105.827 163.5 mo
105.827 165.75 li
102.327 163.5 mo
102.327 165.75 li
99.0767 163.5 mo
99.0767 165.75 li
95.8267 161.5 mo
95.8267 165.75 li
92.3267 163.5 mo
92.3267 165.75 li
89.0767 163.5 mo
89.0767 165.75 li
85.5767 163.5 mo
85.5767 165.75 li
82.3267 161.5 mo
82.3267 165.75 li
79.0767 163.5 mo
79.0767 165.75 li
75.5767 163.5 mo
75.5767 165.75 li
72.3267 163.5 mo
72.3267 165.75 li
68.8267 161.5 mo
68.8267 165.75 li
65.5767 163.5 mo
65.5767 165.75 li
62.0767 163.5 mo
62.0767 165.75 li
58.8267 163.5 mo
58.8267 165.75 li
55.5767 161.5 mo
55.5767 165.75 li
55.5767 165.75 mo
189.577 165.75 li
55.5767 165.75 mo
55.5767 .75 li
189.577 .75 li
189.577 165.75 li
55.5767 165.75 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
57.8267 8.5 mo
55.5767 8.5 li
60.0767 16.25 mo
55.5767 16.25 li
57.8267 162.75 mo
55.5767 162.75 li
57.8267 155 mo
55.5767 155 li
57.8267 147.25 mo
55.5767 147.25 li
60.0767 139.5 mo
55.5767 139.5 li
60.0767 16.25 mo
55.5767 16.25 li
57.8267 24 mo
55.5767 24 li
57.8267 31.5 mo
55.5767 31.5 li
57.8267 39.25 mo
55.5767 39.25 li
60.0767 47 mo
55.5767 47 li
57.8267 54.75 mo
55.5767 54.75 li
57.8267 62.5 mo
55.5767 62.5 li
57.8267 70.25 mo
55.5767 70.25 li
60.0767 78 mo
55.5767 78 li
57.8267 85.5 mo
55.5767 85.5 li
57.8267 93.25 mo
55.5767 93.25 li
57.8267 101 mo
55.5767 101 li
60.0767 108.75 mo
55.5767 108.75 li
57.8267 116.5 mo
55.5767 116.5 li
57.8267 124.25 mo
55.5767 124.25 li
57.8267 132 mo
55.5767 132 li
60.0767 139.5 mo
55.5767 139.5 li
@
190.007 108.05 mo
190.007 105.98 188.327 104.3 186.257 104.3 cv
184.187 104.3 182.507 105.98 182.507 108.05 cv
182.507 110.12 184.187 111.8 186.257 111.8 cv
188.327 111.8 190.007 110.12 190.007 108.05 cv
1 0 0 rgb
ef
183.287 109.01 mo
183.287 106.94 181.606 105.26 179.537 105.26 cv
177.467 105.26 175.787 106.94 175.787 109.01 cv
175.787 111.08 177.467 112.76 179.537 112.76 cv
181.606 112.76 183.287 111.08 183.287 109.01 cv
ef
176.567 106.73 mo
176.567 104.66 174.887 102.98 172.817 102.98 cv
170.747 102.98 169.067 104.66 169.067 106.73 cv
169.067 108.8 170.747 110.48 172.817 110.48 cv
174.887 110.48 176.567 108.8 176.567 106.73 cv
ef
169.847 106.25 mo
169.847 104.18 168.167 102.5 166.097 102.5 cv
164.027 102.5 162.347 104.18 162.347 106.25 cv
162.347 108.32 164.027 110 166.097 110 cv
168.167 110 169.847 108.32 169.847 106.25 cv
ef
163.367 105.77 mo
163.367 103.7 161.687 102.02 159.617 102.02 cv
157.547 102.02 155.867 103.7 155.867 105.77 cv
155.867 107.84 157.547 109.52 159.617 109.52 cv
161.687 109.52 163.367 107.84 163.367 105.77 cv
ef
156.646 103.01 mo
156.646 100.94 154.967 99.2598 152.896 99.2598 cv
150.827 99.2598 149.146 100.94 149.146 103.01 cv
149.146 105.08 150.827 106.76 152.896 106.76 cv
154.967 106.76 156.646 105.08 156.646 103.01 cv
ef
149.807 101.81 mo
149.807 99.7402 148.126 98.0601 146.057 98.0601 cv
143.987 98.0601 142.307 99.7402 142.307 101.81 cv
142.307 103.88 143.987 105.56 146.057 105.56 cv
148.126 105.56 149.807 103.88 149.807 101.81 cv
ef
143.086 96.77 mo
143.086 94.7002 141.407 93.02 139.336 93.02 cv
137.267 93.02 135.586 94.7002 135.586 96.77 cv
135.586 98.8398 137.267 100.52 139.336 100.52 cv
141.407 100.52 143.086 98.8398 143.086 96.77 cv
ef
136.247 93.4102 mo
136.247 91.3398 134.567 89.6602 132.497 89.6602 cv
130.427 89.6602 128.747 91.3398 128.747 93.4102 cv
128.747 95.48 130.427 97.1602 132.497 97.1602 cv
134.567 97.1602 136.247 95.48 136.247 93.4102 cv
ef
129.527 90.29 mo
129.527 88.2197 127.847 86.54 125.777 86.54 cv
123.707 86.54 122.027 88.2197 122.027 90.29 cv
122.027 92.3599 123.707 94.04 125.777 94.04 cv
127.847 94.04 129.527 92.3599 129.527 90.29 cv
ef
123.047 85.25 mo
123.047 83.1802 121.367 81.5 119.297 81.5 cv
117.227 81.5 115.547 83.1802 115.547 85.25 cv
115.547 87.3198 117.227 89 119.297 89 cv
121.367 89 123.047 87.3198 123.047 85.25 cv
ef
116.327 79.25 mo
116.327 77.1802 114.646 75.5 112.577 75.5 cv
110.507 75.5 108.827 77.1802 108.827 79.25 cv
108.827 81.3198 110.507 83 112.577 83 cv
114.646 83 116.327 81.3198 116.327 79.25 cv
ef
109.606 76.25 mo
109.606 74.1802 107.927 72.5 105.856 72.5 cv
103.787 72.5 102.106 74.1802 102.106 76.25 cv
102.106 78.3198 103.787 80 105.856 80 cv
107.927 80 109.606 78.3198 109.606 76.25 cv
ef
102.887 70.4902 mo
102.887 68.4199 101.207 66.7402 99.1367 66.7402 cv
97.0669 66.7402 95.3867 68.4199 95.3867 70.4902 cv
95.3867 72.5601 97.0669 74.2402 99.1367 74.2402 cv
101.207 74.2402 102.887 72.5601 102.887 70.4902 cv
ef
96.1665 62.6899 mo
96.1665 60.6201 94.4868 58.9399 92.4165 58.9399 cv
90.3467 58.9399 88.6665 60.6201 88.6665 62.6899 cv
88.6665 64.7598 90.3467 66.4399 92.4165 66.4399 cv
94.4868 66.4399 96.1665 64.7598 96.1665 62.6899 cv
ef
89.3267 55.9697 mo
89.3267 53.8999 87.6465 52.2197 85.5767 52.2197 cv
83.5068 52.2197 81.8267 53.8999 81.8267 55.9697 cv
81.8267 58.04 83.5068 59.7197 85.5767 59.7197 cv
87.6465 59.7197 89.3267 58.04 89.3267 55.9697 cv
ef
82.8467 47.8101 mo
82.8467 45.7402 81.1665 44.0601 79.0967 44.0601 cv
77.0269 44.0601 75.3467 45.7402 75.3467 47.8101 cv
75.3467 49.8799 77.0269 51.5601 79.0967 51.5601 cv
81.1665 51.5601 82.8467 49.8799 82.8467 47.8101 cv
ef
76.0068 44.4502 mo
76.0068 42.3799 74.3267 40.7002 72.2568 40.7002 cv
70.1865 40.7002 68.5068 42.3799 68.5068 44.4502 cv
68.5068 46.52 70.1865 48.2002 72.2568 48.2002 cv
74.3267 48.2002 76.0068 46.52 76.0068 44.4502 cv
ef
69.2866 39.1699 mo
69.2866 37.1001 67.6064 35.4199 65.5366 35.4199 cv
63.4668 35.4199 61.7866 37.1001 61.7866 39.1699 cv
61.7866 41.2402 63.4668 42.9199 65.5366 42.9199 cv
67.6064 42.9199 69.2866 41.2402 69.2866 39.1699 cv
ef
62.5669 18.0498 mo
62.5669 15.98 60.8867 14.2998 58.8169 14.2998 cv
56.7466 14.2998 55.0669 15.98 55.0669 18.0498 cv
55.0669 20.1201 56.7466 21.7998 58.8169 21.7998 cv
60.8867 21.7998 62.5669 20.1201 62.5669 18.0498 cv
ef
1 lw
[3 3 ] 0 dsh
55.5767 108.75 mo
189.577 108.75 li
.501961 .501961 .501961 rgb
@
[] 0 dsh
62.5669 50.21 mo
62.5669 48.1401 60.8867 46.46 58.8169 46.46 cv
56.7466 46.46 55.0669 48.1401 55.0669 50.21 cv
55.0669 52.2798 56.7466 53.96 58.8169 53.96 cv
60.8867 53.96 62.5669 52.2798 62.5669 50.21 cv
69.2866 54.29 mo
69.2866 52.2197 67.6064 50.54 65.5366 50.54 cv
63.4668 50.54 61.7866 52.2197 61.7866 54.29 cv
61.7866 56.3599 63.4668 58.04 65.5366 58.04 cv
67.6064 58.04 69.2866 56.3599 69.2866 54.29 cv
76.0068 54.5298 mo
76.0068 52.46 74.3267 50.7798 72.2568 50.7798 cv
70.1865 50.7798 68.5068 52.46 68.5068 54.5298 cv
68.5068 56.6001 70.1865 58.2798 72.2568 58.2798 cv
74.3267 58.2798 76.0068 56.6001 76.0068 54.5298 cv
82.8467 59.0898 mo
82.8467 57.02 81.1665 55.3398 79.0967 55.3398 cv
77.0269 55.3398 75.3467 57.02 75.3467 59.0898 cv
75.3467 61.1602 77.0269 62.8398 79.0967 62.8398 cv
81.1665 62.8398 82.8467 61.1602 82.8467 59.0898 cv
89.3267 63.1699 mo
89.3267 61.1001 87.6465 59.4199 85.5767 59.4199 cv
83.5068 59.4199 81.8267 61.1001 81.8267 63.1699 cv
81.8267 65.2402 83.5068 66.9199 85.5767 66.9199 cv
87.6465 66.9199 89.3267 65.2402 89.3267 63.1699 cv
96.1665 64.25 mo
96.1665 62.1802 94.4868 60.5 92.4165 60.5 cv
90.3467 60.5 88.6665 62.1802 88.6665 64.25 cv
88.6665 66.3198 90.3467 68 92.4165 68 cv
94.4868 68 96.1665 66.3198 96.1665 64.25 cv
102.887 65.8101 mo
102.887 63.7402 101.207 62.0601 99.1367 62.0601 cv
97.0669 62.0601 95.3867 63.7402 95.3867 65.8101 cv
95.3867 67.8799 97.0669 69.5601 99.1367 69.5601 cv
101.207 69.5601 102.887 67.8799 102.887 65.8101 cv
109.606 69.4102 mo
109.606 67.3398 107.927 65.6602 105.856 65.6602 cv
103.787 65.6602 102.106 67.3398 102.106 69.4102 cv
102.106 71.48 103.787 73.1602 105.856 73.1602 cv
107.927 73.1602 109.606 71.48 109.606 69.4102 cv
116.327 75.77 mo
116.327 73.7002 114.646 72.02 112.577 72.02 cv
110.507 72.02 108.827 73.7002 108.827 75.77 cv
108.827 77.8398 110.507 79.52 112.577 79.52 cv
114.646 79.52 116.327 77.8398 116.327 75.77 cv
123.047 77.8101 mo
123.047 75.7402 121.367 74.0601 119.297 74.0601 cv
117.227 74.0601 115.547 75.7402 115.547 77.8101 cv
115.547 79.8799 117.227 81.5601 119.297 81.5601 cv
121.367 81.5601 123.047 79.8799 123.047 77.8101 cv
129.527 81.77 mo
129.527 79.7002 127.847 78.02 125.777 78.02 cv
123.707 78.02 122.027 79.7002 122.027 81.77 cv
122.027 83.8398 123.707 85.52 125.777 85.52 cv
127.847 85.52 129.527 83.8398 129.527 81.77 cv
136.247 85.73 mo
136.247 83.6602 134.567 81.98 132.497 81.98 cv
130.427 81.98 128.747 83.6602 128.747 85.73 cv
128.747 87.7998 130.427 89.48 132.497 89.48 cv
134.567 89.48 136.247 87.7998 136.247 85.73 cv
143.086 90.0498 mo
143.086 87.98 141.407 86.2998 139.336 86.2998 cv
137.267 86.2998 135.586 87.98 135.586 90.0498 cv
135.586 92.1201 137.267 93.7998 139.336 93.7998 cv
141.407 93.7998 143.086 92.1201 143.086 90.0498 cv
149.807 93.4102 mo
149.807 91.3398 148.126 89.6602 146.057 89.6602 cv
143.987 89.6602 142.307 91.3398 142.307 93.4102 cv
142.307 95.48 143.987 97.1602 146.057 97.1602 cv
148.126 97.1602 149.807 95.48 149.807 93.4102 cv
156.646 96.5298 mo
156.646 94.46 154.967 92.7798 152.896 92.7798 cv
150.827 92.7798 149.146 94.46 149.146 96.5298 cv
149.146 98.6001 150.827 100.28 152.896 100.28 cv
154.967 100.28 156.646 98.6001 156.646 96.5298 cv
163.367 98.21 mo
163.367 96.1401 161.687 94.46 159.617 94.46 cv
157.547 94.46 155.867 96.1401 155.867 98.21 cv
155.867 100.28 157.547 101.96 159.617 101.96 cv
161.687 101.96 163.367 100.28 163.367 98.21 cv
169.847 101.33 mo
169.847 99.2598 168.167 97.5801 166.097 97.5801 cv
164.027 97.5801 162.347 99.2598 162.347 101.33 cv
162.347 103.4 164.027 105.08 166.097 105.08 cv
168.167 105.08 169.847 103.4 169.847 101.33 cv
176.567 104.21 mo
176.567 102.14 174.887 100.46 172.817 100.46 cv
170.747 100.46 169.067 102.14 169.067 104.21 cv
169.067 106.28 170.747 107.96 172.817 107.96 cv
174.887 107.96 176.567 106.28 176.567 104.21 cv
183.287 106.01 mo
183.287 103.94 181.606 102.26 179.537 102.26 cv
177.467 102.26 175.787 103.94 175.787 106.01 cv
175.787 108.08 177.467 109.76 179.537 109.76 cv
181.606 109.76 183.287 108.08 183.287 106.01 cv
190.007 107.81 mo
190.007 105.74 188.327 104.06 186.257 104.06 cv
184.187 104.06 182.507 105.74 182.507 107.81 cv
182.507 109.88 184.187 111.56 186.257 111.56 cv
188.327 111.56 190.007 109.88 190.007 107.81 cv
0 .701961 0 rgb
@
186.327 113.938 mo
183.514 113.938 li
183.514 119.563 li
189.139 119.563 li
189.139 113.938 li
186.327 113.938 li
cp
0 0 1 rgb
ef
179.577 128.188 mo
176.764 128.188 li
176.764 133.813 li
182.389 133.813 li
182.389 128.188 li
179.577 128.188 li
cp
ef
172.827 139.438 mo
170.014 139.438 li
170.014 145.063 li
175.639 145.063 li
175.639 139.438 li
172.827 139.438 li
cp
ef
166.077 145.438 mo
163.264 145.438 li
163.264 151.063 li
168.889 151.063 li
168.889 145.438 li
166.077 145.438 li
cp
ef
159.577 145.438 mo
156.764 145.438 li
156.764 151.063 li
162.389 151.063 li
162.389 145.438 li
159.577 145.438 li
cp
ef
152.827 143.938 mo
150.014 143.938 li
150.014 149.563 li
155.639 149.563 li
155.639 143.938 li
152.827 143.938 li
cp
ef
146.077 137.938 mo
143.264 137.938 li
143.264 143.563 li
148.889 143.563 li
148.889 137.938 li
146.077 137.938 li
cp
ef
139.327 129.688 mo
136.514 129.688 li
136.514 135.313 li
142.139 135.313 li
142.139 129.688 li
139.327 129.688 li
cp
ef
132.577 119.438 mo
129.764 119.438 li
129.764 125.063 li
135.389 125.063 li
135.389 119.438 li
132.577 119.438 li
cp
ef
125.827 109.438 mo
123.014 109.438 li
123.014 115.063 li
128.639 115.063 li
128.639 109.438 li
125.827 109.438 li
cp
ef
119.327 97.6875 mo
116.514 97.6875 li
116.514 103.313 li
122.139 103.313 li
122.139 97.6875 li
119.327 97.6875 li
cp
ef
112.577 87.1875 mo
109.764 87.1875 li
109.764 92.8125 li
115.389 92.8125 li
115.389 87.1875 li
112.577 87.1875 li
cp
ef
105.827 79.1875 mo
103.014 79.1875 li
103.014 84.8125 li
108.639 84.8125 li
108.639 79.1875 li
105.827 79.1875 li
cp
ef
99.0767 70.9375 mo
96.2642 70.9375 li
96.2642 76.5625 li
101.889 76.5625 li
101.889 70.9375 li
99.0767 70.9375 li
cp
ef
92.3267 65.4375 mo
89.5142 65.4375 li
89.5142 71.0625 li
95.1392 71.0625 li
95.1392 65.4375 li
92.3267 65.4375 li
cp
ef
85.5767 67.1875 mo
82.7642 67.1875 li
82.7642 72.8125 li
88.3892 72.8125 li
88.3892 67.1875 li
85.5767 67.1875 li
cp
ef
79.0767 69.9375 mo
76.2642 69.9375 li
76.2642 75.5625 li
81.8892 75.5625 li
81.8892 69.9375 li
79.0767 69.9375 li
cp
ef
72.3267 74.9375 mo
69.5142 74.9375 li
69.5142 80.5625 li
75.1392 80.5625 li
75.1392 74.9375 li
72.3267 74.9375 li
cp
ef
65.5767 87.4375 mo
62.7642 87.4375 li
62.7642 93.0625 li
68.3892 93.0625 li
68.3892 87.4375 li
65.5767 87.4375 li
cp
ef
58.8267 105.438 mo
56.0142 105.438 li
56.0142 111.063 li
61.6392 111.063 li
61.6392 105.438 li
58.8267 105.438 li
cp
ef
190.007 108.05 mo
190.007 105.98 188.327 104.3 186.257 104.3 cv
184.187 104.3 182.507 105.98 182.507 108.05 cv
182.507 110.12 184.187 111.8 186.257 111.8 cv
188.327 111.8 190.007 110.12 190.007 108.05 cv
1 0 0 rgb
ef
183.287 109.01 mo
183.287 106.94 181.606 105.26 179.537 105.26 cv
177.467 105.26 175.787 106.94 175.787 109.01 cv
175.787 111.08 177.467 112.76 179.537 112.76 cv
181.606 112.76 183.287 111.08 183.287 109.01 cv
ef
176.567 106.73 mo
176.567 104.66 174.887 102.98 172.817 102.98 cv
170.747 102.98 169.067 104.66 169.067 106.73 cv
169.067 108.8 170.747 110.48 172.817 110.48 cv
174.887 110.48 176.567 108.8 176.567 106.73 cv
ef
169.847 106.25 mo
169.847 104.18 168.167 102.5 166.097 102.5 cv
164.027 102.5 162.347 104.18 162.347 106.25 cv
162.347 108.32 164.027 110 166.097 110 cv
168.167 110 169.847 108.32 169.847 106.25 cv
ef
163.367 105.77 mo
163.367 103.7 161.687 102.02 159.617 102.02 cv
157.547 102.02 155.867 103.7 155.867 105.77 cv
155.867 107.84 157.547 109.52 159.617 109.52 cv
161.687 109.52 163.367 107.84 163.367 105.77 cv
ef
156.646 103.01 mo
156.646 100.94 154.967 99.2598 152.896 99.2598 cv
150.827 99.2598 149.146 100.94 149.146 103.01 cv
149.146 105.08 150.827 106.76 152.896 106.76 cv
154.967 106.76 156.646 105.08 156.646 103.01 cv
ef
149.807 101.81 mo
149.807 99.7402 148.126 98.0601 146.057 98.0601 cv
143.987 98.0601 142.307 99.7402 142.307 101.81 cv
142.307 103.88 143.987 105.56 146.057 105.56 cv
148.126 105.56 149.807 103.88 149.807 101.81 cv
ef
143.086 96.77 mo
143.086 94.7002 141.407 93.02 139.336 93.02 cv
137.267 93.02 135.586 94.7002 135.586 96.77 cv
135.586 98.8398 137.267 100.52 139.336 100.52 cv
141.407 100.52 143.086 98.8398 143.086 96.77 cv
ef
136.247 93.4102 mo
136.247 91.3398 134.567 89.6602 132.497 89.6602 cv
130.427 89.6602 128.747 91.3398 128.747 93.4102 cv
128.747 95.48 130.427 97.1602 132.497 97.1602 cv
134.567 97.1602 136.247 95.48 136.247 93.4102 cv
ef
129.527 90.29 mo
129.527 88.2197 127.847 86.54 125.777 86.54 cv
123.707 86.54 122.027 88.2197 122.027 90.29 cv
122.027 92.3599 123.707 94.04 125.777 94.04 cv
127.847 94.04 129.527 92.3599 129.527 90.29 cv
ef
123.047 85.25 mo
123.047 83.1802 121.367 81.5 119.297 81.5 cv
117.227 81.5 115.547 83.1802 115.547 85.25 cv
115.547 87.3198 117.227 89 119.297 89 cv
121.367 89 123.047 87.3198 123.047 85.25 cv
ef
116.327 79.25 mo
116.327 77.1802 114.646 75.5 112.577 75.5 cv
110.507 75.5 108.827 77.1802 108.827 79.25 cv
108.827 81.3198 110.507 83 112.577 83 cv
114.646 83 116.327 81.3198 116.327 79.25 cv
ef
109.606 76.25 mo
109.606 74.1802 107.927 72.5 105.856 72.5 cv
103.787 72.5 102.106 74.1802 102.106 76.25 cv
102.106 78.3198 103.787 80 105.856 80 cv
107.927 80 109.606 78.3198 109.606 76.25 cv
ef
102.887 70.4902 mo
102.887 68.4199 101.207 66.7402 99.1367 66.7402 cv
97.0669 66.7402 95.3867 68.4199 95.3867 70.4902 cv
95.3867 72.5601 97.0669 74.2402 99.1367 74.2402 cv
101.207 74.2402 102.887 72.5601 102.887 70.4902 cv
ef
96.1665 62.6899 mo
96.1665 60.6201 94.4868 58.9399 92.4165 58.9399 cv
90.3467 58.9399 88.6665 60.6201 88.6665 62.6899 cv
88.6665 64.7598 90.3467 66.4399 92.4165 66.4399 cv
94.4868 66.4399 96.1665 64.7598 96.1665 62.6899 cv
ef
89.3267 55.9697 mo
89.3267 53.8999 87.6465 52.2197 85.5767 52.2197 cv
83.5068 52.2197 81.8267 53.8999 81.8267 55.9697 cv
81.8267 58.04 83.5068 59.7197 85.5767 59.7197 cv
87.6465 59.7197 89.3267 58.04 89.3267 55.9697 cv
ef
82.8467 47.8101 mo
82.8467 45.7402 81.1665 44.0601 79.0967 44.0601 cv
77.0269 44.0601 75.3467 45.7402 75.3467 47.8101 cv
75.3467 49.8799 77.0269 51.5601 79.0967 51.5601 cv
81.1665 51.5601 82.8467 49.8799 82.8467 47.8101 cv
ef
76.0068 44.4502 mo
76.0068 42.3799 74.3267 40.7002 72.2568 40.7002 cv
70.1865 40.7002 68.5068 42.3799 68.5068 44.4502 cv
68.5068 46.52 70.1865 48.2002 72.2568 48.2002 cv
74.3267 48.2002 76.0068 46.52 76.0068 44.4502 cv
ef
69.2866 39.1699 mo
69.2866 37.1001 67.6064 35.4199 65.5366 35.4199 cv
63.4668 35.4199 61.7866 37.1001 61.7866 39.1699 cv
61.7866 41.2402 63.4668 42.9199 65.5366 42.9199 cv
67.6064 42.9199 69.2866 41.2402 69.2866 39.1699 cv
ef
62.5669 18.0498 mo
62.5669 15.98 60.8867 14.2998 58.8169 14.2998 cv
56.7466 14.2998 55.0669 15.98 55.0669 18.0498 cv
55.0669 20.1201 56.7466 21.7998 58.8169 21.7998 cv
60.8867 21.7998 62.5669 20.1201 62.5669 18.0498 cv
ef
503.747 241.061 mo
503.747 238.99 502.067 237.311 499.997 237.311 cv
497.926 237.311 496.247 238.99 496.247 241.061 cv
496.247 243.13 497.926 244.811 499.997 244.811 cv
502.067 244.811 503.747 243.13 503.747 241.061 cv
ef
499.997 257.368 mo
497.184 257.368 li
497.184 262.993 li
502.809 262.993 li
502.809 257.368 li
499.997 257.368 li
cp
0 0 1 rgb
ef
503.747 279.301 mo
503.747 277.23 502.067 275.551 499.997 275.551 cv
497.926 275.551 496.247 277.23 496.247 279.301 cv
496.247 281.37 497.926 283.051 499.997 283.051 cv
502.067 283.051 503.747 281.37 503.747 279.301 cv
0 .701961 0 rgb
@
1.5 lw
55.5767 331 mo
189.577 331 li
55.5767 331 mo
55.5767 165.75 li
189.577 165.75 li
189.577 331 li
55.5767 331 li
cp
0 0 0 rgb
@
189.577 326 mo
189.577 331 li
186.327 328.5 mo
186.327 331 li
182.827 328.5 mo
182.827 331 li
179.577 328.5 mo
179.577 331 li
176.327 326 mo
176.327 331 li
172.827 328.5 mo
172.827 331 li
169.577 328.5 mo
169.577 331 li
166.077 328.5 mo
166.077 331 li
162.827 326 mo
162.827 331 li
159.577 328.5 mo
159.577 331 li
156.077 328.5 mo
156.077 331 li
152.827 328.5 mo
152.827 331 li
149.327 326 mo
149.327 331 li
146.077 328.5 mo
146.077 331 li
142.577 328.5 mo
142.577 331 li
139.327 328.5 mo
139.327 331 li
136.077 326 mo
136.077 331 li
132.577 328.5 mo
132.577 331 li
129.327 328.5 mo
129.327 331 li
125.827 328.5 mo
125.827 331 li
122.577 326 mo
122.577 331 li
119.327 328.5 mo
119.327 331 li
115.827 328.5 mo
115.827 331 li
112.577 328.5 mo
112.577 331 li
109.077 326 mo
109.077 331 li
105.827 328.5 mo
105.827 331 li
102.327 328.5 mo
102.327 331 li
99.0767 328.5 mo
99.0767 331 li
95.8267 326 mo
95.8267 331 li
92.3267 328.5 mo
92.3267 331 li
89.0767 328.5 mo
89.0767 331 li
85.5767 328.5 mo
85.5767 331 li
82.3267 326 mo
82.3267 331 li
79.0767 328.5 mo
79.0767 331 li
75.5767 328.5 mo
75.5767 331 li
72.3267 328.5 mo
72.3267 331 li
68.8267 326 mo
68.8267 331 li
65.5767 328.5 mo
65.5767 331 li
62.0767 328.5 mo
62.0767 331 li
58.8267 328.5 mo
58.8267 331 li
55.5767 326 mo
55.5767 331 li
@
55.5767 331 mo
55.5767 165.75 li
@
57.5767 173.5 mo
55.5767 173.5 li
59.5767 181.25 mo
55.5767 181.25 li
57.5767 327.75 mo
55.5767 327.75 li
57.5767 320 mo
55.5767 320 li
57.5767 312.5 mo
55.5767 312.5 li
59.5767 304.75 mo
55.5767 304.75 li
59.5767 181.25 mo
55.5767 181.25 li
57.5767 189 mo
55.5767 189 li
57.5767 196.75 mo
55.5767 196.75 li
57.5767 204.5 mo
55.5767 204.5 li
59.5767 212 mo
55.5767 212 li
57.5767 219.75 mo
55.5767 219.75 li
57.5767 227.5 mo
55.5767 227.5 li
57.5767 235.25 mo
55.5767 235.25 li
59.5767 243 mo
55.5767 243 li
57.5767 250.75 mo
55.5767 250.75 li
57.5767 258.5 mo
55.5767 258.5 li
57.5767 266 mo
55.5767 266 li
59.5767 273.75 mo
55.5767 273.75 li
57.5767 281.5 mo
55.5767 281.5 li
57.5767 289.25 mo
55.5767 289.25 li
57.5767 297 mo
55.5767 297 li
59.5767 304.75 mo
55.5767 304.75 li
@
190.007 273.77 mo
190.007 271.7 188.327 270.02 186.257 270.02 cv
184.187 270.02 182.507 271.7 182.507 273.77 cv
182.507 275.84 184.187 277.52 186.257 277.52 cv
188.327 277.52 190.007 275.84 190.007 273.77 cv
1 0 0 rgb
ef
183.287 272.93 mo
183.287 270.86 181.606 269.18 179.537 269.18 cv
177.467 269.18 175.787 270.86 175.787 272.93 cv
175.787 275 177.467 276.68 179.537 276.68 cv
181.606 276.68 183.287 275 183.287 272.93 cv
ef
176.567 272.69 mo
176.567 270.62 174.887 268.94 172.817 268.94 cv
170.747 268.94 169.067 270.62 169.067 272.69 cv
169.067 274.76 170.747 276.44 172.817 276.44 cv
174.887 276.44 176.567 274.76 176.567 272.69 cv
ef
169.847 271.73 mo
169.847 269.66 168.167 267.98 166.097 267.98 cv
164.027 267.98 162.347 269.66 162.347 271.73 cv
162.347 273.8 164.027 275.48 166.097 275.48 cv
168.167 275.48 169.847 273.8 169.847 271.73 cv
ef
163.367 270.77 mo
163.367 268.7 161.687 267.02 159.617 267.02 cv
157.547 267.02 155.867 268.7 155.867 270.77 cv
155.867 272.84 157.547 274.52 159.617 274.52 cv
161.687 274.52 163.367 272.84 163.367 270.77 cv
ef
156.646 270.05 mo
156.646 267.98 154.967 266.3 152.896 266.3 cv
150.827 266.3 149.146 267.98 149.146 270.05 cv
149.146 272.12 150.827 273.8 152.896 273.8 cv
154.967 273.8 156.646 272.12 156.646 270.05 cv
ef
149.807 266.93 mo
149.807 264.86 148.126 263.18 146.057 263.18 cv
143.987 263.18 142.307 264.86 142.307 266.93 cv
142.307 269 143.987 270.68 146.057 270.68 cv
148.126 270.68 149.807 269 149.807 266.93 cv
ef
143.086 265.73 mo
143.086 263.66 141.407 261.98 139.336 261.98 cv
137.267 261.98 135.586 263.66 135.586 265.73 cv
135.586 267.8 137.267 269.48 139.336 269.48 cv
141.407 269.48 143.086 267.8 143.086 265.73 cv
ef
136.247 261.17 mo
136.247 259.1 134.567 257.42 132.497 257.42 cv
130.427 257.42 128.747 259.1 128.747 261.17 cv
128.747 263.24 130.427 264.92 132.497 264.92 cv
134.567 264.92 136.247 263.24 136.247 261.17 cv
ef
129.527 259.49 mo
129.527 257.42 127.847 255.74 125.777 255.74 cv
123.707 255.74 122.027 257.42 122.027 259.49 cv
122.027 261.56 123.707 263.24 125.777 263.24 cv
127.847 263.24 129.527 261.56 129.527 259.49 cv
ef
123.047 253.25 mo
123.047 251.18 121.367 249.5 119.297 249.5 cv
117.227 249.5 115.547 251.18 115.547 253.25 cv
115.547 255.32 117.227 257 119.297 257 cv
121.367 257 123.047 255.32 123.047 253.25 cv
ef
116.327 250.49 mo
116.327 248.42 114.646 246.74 112.577 246.74 cv
110.507 246.74 108.827 248.42 108.827 250.49 cv
108.827 252.56 110.507 254.24 112.577 254.24 cv
114.646 254.24 116.327 252.56 116.327 250.49 cv
ef
109.606 245.33 mo
109.606 243.26 107.927 241.58 105.856 241.58 cv
103.787 241.58 102.106 243.26 102.106 245.33 cv
102.106 247.4 103.787 249.08 105.856 249.08 cv
107.927 249.08 109.606 247.4 109.606 245.33 cv
ef
102.887 238.49 mo
102.887 236.42 101.207 234.74 99.1367 234.74 cv
97.0669 234.74 95.3867 236.42 95.3867 238.49 cv
95.3867 240.56 97.0669 242.24 99.1367 242.24 cv
101.207 242.24 102.887 240.56 102.887 238.49 cv
ef
96.1665 232.73 mo
96.1665 230.66 94.4868 228.98 92.4165 228.98 cv
90.3467 228.98 88.6665 230.66 88.6665 232.73 cv
88.6665 234.8 90.3467 236.48 92.4165 236.48 cv
94.4868 236.48 96.1665 234.8 96.1665 232.73 cv
ef
89.3267 223.01 mo
89.3267 220.94 87.6465 219.26 85.5767 219.26 cv
83.5068 219.26 81.8267 220.94 81.8267 223.01 cv
81.8267 225.08 83.5068 226.76 85.5767 226.76 cv
87.6465 226.76 89.3267 225.08 89.3267 223.01 cv
ef
82.8467 216.05 mo
82.8467 213.98 81.1665 212.3 79.0967 212.3 cv
77.0269 212.3 75.3467 213.98 75.3467 216.05 cv
75.3467 218.12 77.0269 219.8 79.0967 219.8 cv
81.1665 219.8 82.8467 218.12 82.8467 216.05 cv
ef
76.0068 206.93 mo
76.0068 204.86 74.3267 203.18 72.2568 203.18 cv
70.1865 203.18 68.5068 204.86 68.5068 206.93 cv
68.5068 209 70.1865 210.68 72.2568 210.68 cv
74.3267 210.68 76.0068 209 76.0068 206.93 cv
ef
69.2866 199.73 mo
69.2866 197.66 67.6064 195.98 65.5366 195.98 cv
63.4668 195.98 61.7866 197.66 61.7866 199.73 cv
61.7866 201.8 63.4668 203.48 65.5366 203.48 cv
67.6064 203.48 69.2866 201.8 69.2866 199.73 cv
ef
62.5669 191.81 mo
62.5669 189.74 60.8867 188.06 58.8169 188.06 cv
56.7466 188.06 55.0669 189.74 55.0669 191.81 cv
55.0669 193.88 56.7466 195.56 58.8169 195.56 cv
60.8867 195.56 62.5669 193.88 62.5669 191.81 cv
ef
1 lw
[3 3 ] 0 dsh
55.5767 273.75 mo
189.577 273.75 li
.501961 .501961 .501961 rgb
@
[] 0 dsh
62.5669 220.49 mo
62.5669 218.42 60.8867 216.74 58.8169 216.74 cv
56.7466 216.74 55.0669 218.42 55.0669 220.49 cv
55.0669 222.56 56.7466 224.24 58.8169 224.24 cv
60.8867 224.24 62.5669 222.56 62.5669 220.49 cv
69.2866 222.53 mo
69.2866 220.46 67.6064 218.78 65.5366 218.78 cv
63.4668 218.78 61.7866 220.46 61.7866 222.53 cv
61.7866 224.6 63.4668 226.28 65.5366 226.28 cv
67.6064 226.28 69.2866 224.6 69.2866 222.53 cv
76.0068 226.01 mo
76.0068 223.94 74.3267 222.26 72.2568 222.26 cv
70.1865 222.26 68.5068 223.94 68.5068 226.01 cv
68.5068 228.08 70.1865 229.76 72.2568 229.76 cv
74.3267 229.76 76.0068 228.08 76.0068 226.01 cv
82.8467 229.49 mo
82.8467 227.42 81.1665 225.74 79.0967 225.74 cv
77.0269 225.74 75.3467 227.42 75.3467 229.49 cv
75.3467 231.56 77.0269 233.24 79.0967 233.24 cv
81.1665 233.24 82.8467 231.56 82.8467 229.49 cv
89.3267 232.01 mo
89.3267 229.94 87.6465 228.26 85.5767 228.26 cv
83.5068 228.26 81.8267 229.94 81.8267 232.01 cv
81.8267 234.08 83.5068 235.76 85.5767 235.76 cv
87.6465 235.76 89.3267 234.08 89.3267 232.01 cv
96.1665 233.33 mo
96.1665 231.26 94.4868 229.58 92.4165 229.58 cv
90.3467 229.58 88.6665 231.26 88.6665 233.33 cv
88.6665 235.4 90.3467 237.08 92.4165 237.08 cv
94.4868 237.08 96.1665 235.4 96.1665 233.33 cv
102.887 238.25 mo
102.887 236.18 101.207 234.5 99.1367 234.5 cv
97.0669 234.5 95.3867 236.18 95.3867 238.25 cv
95.3867 240.32 97.0669 242 99.1367 242 cv
101.207 242 102.887 240.32 102.887 238.25 cv
109.606 241.49 mo
109.606 239.42 107.927 237.74 105.856 237.74 cv
103.787 237.74 102.106 239.42 102.106 241.49 cv
102.106 243.56 103.787 245.24 105.856 245.24 cv
107.927 245.24 109.606 243.56 109.606 241.49 cv
116.327 242.69 mo
116.327 240.62 114.646 238.94 112.577 238.94 cv
110.507 238.94 108.827 240.62 108.827 242.69 cv
108.827 244.76 110.507 246.44 112.577 246.44 cv
114.646 246.44 116.327 244.76 116.327 242.69 cv
123.047 245.81 mo
123.047 243.74 121.367 242.06 119.297 242.06 cv
117.227 242.06 115.547 243.74 115.547 245.81 cv
115.547 247.88 117.227 249.56 119.297 249.56 cv
121.367 249.56 123.047 247.88 123.047 245.81 cv
129.527 247.49 mo
129.527 245.42 127.847 243.74 125.777 243.74 cv
123.707 243.74 122.027 245.42 122.027 247.49 cv
122.027 249.56 123.707 251.24 125.777 251.24 cv
127.847 251.24 129.527 249.56 129.527 247.49 cv
136.247 251.57 mo
136.247 249.5 134.567 247.82 132.497 247.82 cv
130.427 247.82 128.747 249.5 128.747 251.57 cv
128.747 253.64 130.427 255.32 132.497 255.32 cv
134.567 255.32 136.247 253.64 136.247 251.57 cv
143.086 255.41 mo
143.086 253.34 141.407 251.66 139.336 251.66 cv
137.267 251.66 135.586 253.34 135.586 255.41 cv
135.586 257.48 137.267 259.16 139.336 259.16 cv
141.407 259.16 143.086 257.48 143.086 255.41 cv
149.807 257.09 mo
149.807 255.02 148.126 253.34 146.057 253.34 cv
143.987 253.34 142.307 255.02 142.307 257.09 cv
142.307 259.16 143.987 260.84 146.057 260.84 cv
148.126 260.84 149.807 259.16 149.807 257.09 cv
156.646 259.25 mo
156.646 257.18 154.967 255.5 152.896 255.5 cv
150.827 255.5 149.146 257.18 149.146 259.25 cv
149.146 261.32 150.827 263 152.896 263 cv
154.967 263 156.646 261.32 156.646 259.25 cv
163.367 262.49 mo
163.367 260.42 161.687 258.74 159.617 258.74 cv
157.547 258.74 155.867 260.42 155.867 262.49 cv
155.867 264.56 157.547 266.24 159.617 266.24 cv
161.687 266.24 163.367 264.56 163.367 262.49 cv
169.847 265.01 mo
169.847 262.94 168.167 261.26 166.097 261.26 cv
164.027 261.26 162.347 262.94 162.347 265.01 cv
162.347 267.08 164.027 268.76 166.097 268.76 cv
168.167 268.76 169.847 267.08 169.847 265.01 cv
176.567 268.25 mo
176.567 266.18 174.887 264.5 172.817 264.5 cv
170.747 264.5 169.067 266.18 169.067 268.25 cv
169.067 270.32 170.747 272 172.817 272 cv
174.887 272 176.567 270.32 176.567 268.25 cv
183.287 270.53 mo
183.287 268.46 181.606 266.78 179.537 266.78 cv
177.467 266.78 175.787 268.46 175.787 270.53 cv
175.787 272.6 177.467 274.28 179.537 274.28 cv
181.606 274.28 183.287 272.6 183.287 270.53 cv
190.007 272.93 mo
190.007 270.86 188.327 269.18 186.257 269.18 cv
184.187 269.18 182.507 270.86 182.507 272.93 cv
182.507 275 184.187 276.68 186.257 276.68 cv
188.327 276.68 190.007 275 190.007 272.93 cv
0 .701961 0 rgb
@
186.327 271.688 mo
183.514 271.688 li
183.514 277.313 li
189.139 277.313 li
189.139 271.688 li
186.327 271.688 li
cp
0 0 1 rgb
ef
179.577 273.438 mo
176.764 273.438 li
176.764 279.063 li
182.389 279.063 li
182.389 273.438 li
179.577 273.438 li
cp
ef
172.827 273.938 mo
170.014 273.938 li
170.014 279.563 li
175.639 279.563 li
175.639 273.938 li
172.827 273.938 li
cp
ef
166.077 274.188 mo
163.264 274.188 li
163.264 279.813 li
168.889 279.813 li
168.889 274.188 li
166.077 274.188 li
cp
ef
159.577 274.438 mo
156.764 274.438 li
156.764 280.063 li
162.389 280.063 li
162.389 274.438 li
159.577 274.438 li
cp
ef
152.827 273.688 mo
150.014 273.688 li
150.014 279.313 li
155.639 279.313 li
155.639 273.688 li
152.827 273.688 li
cp
ef
146.077 274.188 mo
143.264 274.188 li
143.264 279.813 li
148.889 279.813 li
148.889 274.188 li
146.077 274.188 li
cp
ef
139.327 272.188 mo
136.514 272.188 li
136.514 277.813 li
142.139 277.813 li
142.139 272.188 li
139.327 272.188 li
cp
ef
132.577 272.188 mo
129.764 272.188 li
129.764 277.813 li
135.389 277.813 li
135.389 272.188 li
132.577 272.188 li
cp
ef
125.827 269.938 mo
123.014 269.938 li
123.014 275.563 li
128.639 275.563 li
128.639 269.938 li
125.827 269.938 li
cp
ef
119.327 270.688 mo
116.514 270.688 li
116.514 276.313 li
122.139 276.313 li
122.139 270.688 li
119.327 270.688 li
cp
ef
112.577 267.938 mo
109.764 267.938 li
109.764 273.563 li
115.389 273.563 li
115.389 267.938 li
112.577 267.938 li
cp
ef
105.827 267.938 mo
103.014 267.938 li
103.014 273.563 li
108.639 273.563 li
108.639 267.938 li
105.827 267.938 li
cp
ef
99.0767 268.188 mo
96.2642 268.188 li
96.2642 273.813 li
101.889 273.813 li
101.889 268.188 li
99.0767 268.188 li
cp
ef
92.3267 267.688 mo
89.5142 267.688 li
89.5142 273.313 li
95.1392 273.313 li
95.1392 267.688 li
92.3267 267.688 li
cp
ef
85.5767 267.188 mo
82.7642 267.188 li
82.7642 272.813 li
88.3892 272.813 li
88.3892 267.188 li
85.5767 267.188 li
cp
ef
79.0767 268.188 mo
76.2642 268.188 li
76.2642 273.813 li
81.8892 273.813 li
81.8892 268.188 li
79.0767 268.188 li
cp
ef
72.3267 269.188 mo
69.5142 269.188 li
69.5142 274.813 li
75.1392 274.813 li
75.1392 269.188 li
72.3267 269.188 li
cp
ef
65.5767 270.188 mo
62.7642 270.188 li
62.7642 275.813 li
68.3892 275.813 li
68.3892 270.188 li
65.5767 270.188 li
cp
ef
58.8267 271.938 mo
56.0142 271.938 li
56.0142 277.563 li
61.6392 277.563 li
61.6392 271.938 li
58.8267 271.938 li
cp
ef
190.007 273.77 mo
190.007 271.7 188.327 270.02 186.257 270.02 cv
184.187 270.02 182.507 271.7 182.507 273.77 cv
182.507 275.84 184.187 277.52 186.257 277.52 cv
188.327 277.52 190.007 275.84 190.007 273.77 cv
1 0 0 rgb
ef
183.287 272.93 mo
183.287 270.86 181.606 269.18 179.537 269.18 cv
177.467 269.18 175.787 270.86 175.787 272.93 cv
175.787 275 177.467 276.68 179.537 276.68 cv
181.606 276.68 183.287 275 183.287 272.93 cv
ef
176.567 272.69 mo
176.567 270.62 174.887 268.94 172.817 268.94 cv
170.747 268.94 169.067 270.62 169.067 272.69 cv
169.067 274.76 170.747 276.44 172.817 276.44 cv
174.887 276.44 176.567 274.76 176.567 272.69 cv
ef
169.847 271.73 mo
169.847 269.66 168.167 267.98 166.097 267.98 cv
164.027 267.98 162.347 269.66 162.347 271.73 cv
162.347 273.8 164.027 275.48 166.097 275.48 cv
168.167 275.48 169.847 273.8 169.847 271.73 cv
ef
163.367 270.77 mo
163.367 268.7 161.687 267.02 159.617 267.02 cv
157.547 267.02 155.867 268.7 155.867 270.77 cv
155.867 272.84 157.547 274.52 159.617 274.52 cv
161.687 274.52 163.367 272.84 163.367 270.77 cv
ef
156.646 270.05 mo
156.646 267.98 154.967 266.3 152.896 266.3 cv
150.827 266.3 149.146 267.98 149.146 270.05 cv
149.146 272.12 150.827 273.8 152.896 273.8 cv
154.967 273.8 156.646 272.12 156.646 270.05 cv
ef
149.807 266.93 mo
149.807 264.86 148.126 263.18 146.057 263.18 cv
143.987 263.18 142.307 264.86 142.307 266.93 cv
142.307 269 143.987 270.68 146.057 270.68 cv
148.126 270.68 149.807 269 149.807 266.93 cv
ef
143.086 265.73 mo
143.086 263.66 141.407 261.98 139.336 261.98 cv
137.267 261.98 135.586 263.66 135.586 265.73 cv
135.586 267.8 137.267 269.48 139.336 269.48 cv
141.407 269.48 143.086 267.8 143.086 265.73 cv
ef
136.247 261.17 mo
136.247 259.1 134.567 257.42 132.497 257.42 cv
130.427 257.42 128.747 259.1 128.747 261.17 cv
128.747 263.24 130.427 264.92 132.497 264.92 cv
134.567 264.92 136.247 263.24 136.247 261.17 cv
ef
129.527 259.49 mo
129.527 257.42 127.847 255.74 125.777 255.74 cv
123.707 255.74 122.027 257.42 122.027 259.49 cv
122.027 261.56 123.707 263.24 125.777 263.24 cv
127.847 263.24 129.527 261.56 129.527 259.49 cv
ef
123.047 253.25 mo
123.047 251.18 121.367 249.5 119.297 249.5 cv
117.227 249.5 115.547 251.18 115.547 253.25 cv
115.547 255.32 117.227 257 119.297 257 cv
121.367 257 123.047 255.32 123.047 253.25 cv
ef
116.327 250.49 mo
116.327 248.42 114.646 246.74 112.577 246.74 cv
110.507 246.74 108.827 248.42 108.827 250.49 cv
108.827 252.56 110.507 254.24 112.577 254.24 cv
114.646 254.24 116.327 252.56 116.327 250.49 cv
ef
109.606 245.33 mo
109.606 243.26 107.927 241.58 105.856 241.58 cv
103.787 241.58 102.106 243.26 102.106 245.33 cv
102.106 247.4 103.787 249.08 105.856 249.08 cv
107.927 249.08 109.606 247.4 109.606 245.33 cv
ef
102.887 238.49 mo
102.887 236.42 101.207 234.74 99.1367 234.74 cv
97.0669 234.74 95.3867 236.42 95.3867 238.49 cv
95.3867 240.56 97.0669 242.24 99.1367 242.24 cv
101.207 242.24 102.887 240.56 102.887 238.49 cv
ef
96.1665 232.73 mo
96.1665 230.66 94.4868 228.98 92.4165 228.98 cv
90.3467 228.98 88.6665 230.66 88.6665 232.73 cv
88.6665 234.8 90.3467 236.48 92.4165 236.48 cv
94.4868 236.48 96.1665 234.8 96.1665 232.73 cv
ef
89.3267 223.01 mo
89.3267 220.94 87.6465 219.26 85.5767 219.26 cv
83.5068 219.26 81.8267 220.94 81.8267 223.01 cv
81.8267 225.08 83.5068 226.76 85.5767 226.76 cv
87.6465 226.76 89.3267 225.08 89.3267 223.01 cv
ef
82.8467 216.05 mo
82.8467 213.98 81.1665 212.3 79.0967 212.3 cv
77.0269 212.3 75.3467 213.98 75.3467 216.05 cv
75.3467 218.12 77.0269 219.8 79.0967 219.8 cv
81.1665 219.8 82.8467 218.12 82.8467 216.05 cv
ef
76.0068 206.93 mo
76.0068 204.86 74.3267 203.18 72.2568 203.18 cv
70.1865 203.18 68.5068 204.86 68.5068 206.93 cv
68.5068 209 70.1865 210.68 72.2568 210.68 cv
74.3267 210.68 76.0068 209 76.0068 206.93 cv
ef
69.2866 199.73 mo
69.2866 197.66 67.6064 195.98 65.5366 195.98 cv
63.4668 195.98 61.7866 197.66 61.7866 199.73 cv
61.7866 201.8 63.4668 203.48 65.5366 203.48 cv
67.6064 203.48 69.2866 201.8 69.2866 199.73 cv
ef
62.5669 191.81 mo
62.5669 189.74 60.8867 188.06 58.8169 188.06 cv
56.7466 188.06 55.0669 189.74 55.0669 191.81 cv
55.0669 193.88 56.7466 195.56 58.8169 195.56 cv
60.8867 195.56 62.5669 193.88 62.5669 191.81 cv
ef
1.5 lw
191.577 8.5 mo
189.577 8.5 li
193.577 16.25 mo
189.577 16.25 li
191.577 162.75 mo
189.577 162.75 li
191.577 155 mo
189.577 155 li
191.577 147.25 mo
189.577 147.25 li
193.577 139.5 mo
189.577 139.5 li
193.577 16.25 mo
189.577 16.25 li
191.577 24 mo
189.577 24 li
191.577 31.5 mo
189.577 31.5 li
191.577 39.25 mo
189.577 39.25 li
193.577 47 mo
189.577 47 li
191.577 54.75 mo
189.577 54.75 li
191.577 62.5 mo
189.577 62.5 li
191.577 70.25 mo
189.577 70.25 li
193.577 78 mo
189.577 78 li
191.577 85.5 mo
189.577 85.5 li
191.577 93.25 mo
189.577 93.25 li
191.577 101 mo
189.577 101 li
193.577 108.75 mo
189.577 108.75 li
191.577 116.5 mo
189.577 116.5 li
191.577 124.25 mo
189.577 124.25 li
191.577 132 mo
189.577 132 li
193.577 139.5 mo
189.577 139.5 li
189.577 165.75 mo
189.577 .75 li
324.577 161 mo
324.577 165.75 li
321.077 163.25 mo
321.077 165.75 li
317.827 163.25 mo
317.827 165.75 li
314.327 163.25 mo
314.327 165.75 li
311.077 161 mo
311.077 165.75 li
307.577 163.25 mo
307.577 165.75 li
304.327 163.25 mo
304.327 165.75 li
300.827 163.25 mo
300.827 165.75 li
297.577 161 mo
297.577 165.75 li
294.077 163.25 mo
294.077 165.75 li
290.827 163.25 mo
290.827 165.75 li
287.327 163.25 mo
287.327 165.75 li
284.077 161 mo
284.077 165.75 li
280.577 163.25 mo
280.577 165.75 li
277.327 163.25 mo
277.327 165.75 li
273.827 163.25 mo
273.827 165.75 li
270.577 161 mo
270.577 165.75 li
267.327 163.25 mo
267.327 165.75 li
263.827 163.25 mo
263.827 165.75 li
260.577 163.25 mo
260.577 165.75 li
257.077 161 mo
257.077 165.75 li
253.827 163.25 mo
253.827 165.75 li
250.327 163.25 mo
250.327 165.75 li
247.077 163.25 mo
247.077 165.75 li
243.577 161 mo
243.577 165.75 li
240.327 163.25 mo
240.327 165.75 li
236.827 163.25 mo
236.827 165.75 li
233.577 163.25 mo
233.577 165.75 li
230.077 161 mo
230.077 165.75 li
226.827 163.25 mo
226.827 165.75 li
223.327 163.25 mo
223.327 165.75 li
220.077 163.25 mo
220.077 165.75 li
216.577 161 mo
216.577 165.75 li
213.327 163.25 mo
213.327 165.75 li
209.827 163.25 mo
209.827 165.75 li
206.577 163.25 mo
206.577 165.75 li
203.077 161 mo
203.077 165.75 li
199.827 163.25 mo
199.827 165.75 li
196.327 163.25 mo
196.327 165.75 li
193.077 163.25 mo
193.077 165.75 li
189.577 161 mo
189.577 165.75 li
189.577 165.75 mo
324.577 165.75 li
189.577 165.75 mo
189.577 .75 li
324.577 .75 li
324.577 165.75 li
189.577 165.75 li
cp
0 0 0 rgb
@
324.892 109.01 mo
324.892 106.871 323.156 105.135 321.016 105.135 cv
318.877 105.135 317.141 106.871 317.141 109.01 cv
317.141 111.149 318.877 112.885 321.016 112.885 cv
323.156 112.885 324.892 111.149 324.892 109.01 cv
1 0 0 rgb
ef
318.172 107.69 mo
318.172 105.551 316.436 103.815 314.297 103.815 cv
312.158 103.815 310.422 105.551 310.422 107.69 cv
310.422 109.829 312.158 111.565 314.297 111.565 cv
316.436 111.565 318.172 109.829 318.172 107.69 cv
ef
311.452 107.21 mo
311.452 105.071 309.715 103.335 307.577 103.335 cv
305.438 103.335 303.702 105.071 303.702 107.21 cv
303.702 109.349 305.438 111.085 307.577 111.085 cv
309.715 111.085 311.452 109.349 311.452 107.21 cv
ef
304.731 106.25 mo
304.731 104.111 302.996 102.375 300.856 102.375 cv
298.718 102.375 296.981 104.111 296.981 106.25 cv
296.981 108.389 298.718 110.125 300.856 110.125 cv
302.996 110.125 304.731 108.389 304.731 106.25 cv
ef
298.012 105.29 mo
298.012 103.151 296.276 101.415 294.137 101.415 cv
291.998 101.415 290.262 103.151 290.262 105.29 cv
290.262 107.429 291.998 109.165 294.137 109.165 cv
296.276 109.165 298.012 107.429 298.012 105.29 cv
ef
291.172 103.01 mo
291.172 100.871 289.436 99.1348 287.297 99.1348 cv
285.158 99.1348 283.422 100.871 283.422 103.01 cv
283.422 105.149 285.158 106.885 287.297 106.885 cv
289.436 106.885 291.172 105.149 291.172 103.01 cv
ef
284.452 100.49 mo
284.452 98.3511 282.716 96.6152 280.577 96.6152 cv
278.438 96.6152 276.702 98.3511 276.702 100.49 cv
276.702 102.629 278.438 104.365 280.577 104.365 cv
282.716 104.365 284.452 102.629 284.452 100.49 cv
ef
277.731 99.5298 mo
277.731 97.3911 275.996 95.6548 273.856 95.6548 cv
271.718 95.6548 269.981 97.3911 269.981 99.5298 cv
269.981 101.669 271.718 103.405 273.856 103.405 cv
275.996 103.405 277.731 101.669 277.731 99.5298 cv
ef
271.132 95.4502 mo
271.132 93.311 269.396 91.5752 267.257 91.5752 cv
265.118 91.5752 263.382 93.311 263.382 95.4502 cv
263.382 97.5889 265.118 99.3252 267.257 99.3252 cv
269.396 99.3252 271.132 97.5889 271.132 95.4502 cv
ef
264.412 93.0498 mo
264.412 90.9111 262.676 89.1748 260.537 89.1748 cv
258.397 89.1748 256.662 90.9111 256.662 93.0498 cv
256.662 95.189 258.397 96.9248 260.537 96.9248 cv
262.676 96.9248 264.412 95.189 264.412 93.0498 cv
ef
257.692 87.29 mo
257.692 85.1509 255.956 83.415 253.817 83.415 cv
251.678 83.415 249.942 85.1509 249.942 87.29 cv
249.942 89.4287 251.678 91.165 253.817 91.165 cv
255.956 91.165 257.692 89.4287 257.692 87.29 cv
ef
250.972 83.6899 mo
250.972 81.5508 249.236 79.8149 247.097 79.8149 cv
244.958 79.8149 243.222 81.5508 243.222 83.6899 cv
243.222 85.8291 244.958 87.5649 247.097 87.5649 cv
249.236 87.5649 250.972 85.8291 250.972 83.6899 cv
ef
244.251 75.29 mo
244.251 73.1509 242.516 71.415 240.376 71.415 cv
238.238 71.415 236.501 73.1509 236.501 75.29 cv
236.501 77.4287 238.238 79.165 240.376 79.165 cv
242.516 79.165 244.251 77.4287 244.251 75.29 cv
ef
237.532 70.9697 mo
237.532 68.8311 235.795 67.0947 233.657 67.0947 cv
231.518 67.0947 229.782 68.8311 229.782 70.9697 cv
229.782 73.1089 231.518 74.8447 233.657 74.8447 cv
235.795 74.8447 237.532 73.1089 237.532 70.9697 cv
ef
230.692 66.1699 mo
230.692 64.0308 228.956 62.2949 226.817 62.2949 cv
224.678 62.2949 222.942 64.0308 222.942 66.1699 cv
222.942 68.3091 224.678 70.0449 226.817 70.0449 cv
228.956 70.0449 230.692 68.3091 230.692 66.1699 cv
ef
223.972 59.6899 mo
223.972 57.5508 222.236 55.8149 220.097 55.8149 cv
217.958 55.8149 216.222 57.5508 216.222 59.6899 cv
216.222 61.8291 217.958 63.5649 220.097 63.5649 cv
222.236 63.5649 223.972 61.8291 223.972 59.6899 cv
ef
217.132 49.9697 mo
217.132 47.8311 215.396 46.0947 213.257 46.0947 cv
211.118 46.0947 209.382 47.8311 209.382 49.9697 cv
209.382 52.1089 211.118 53.8447 213.257 53.8447 cv
215.396 53.8447 217.132 52.1089 217.132 49.9697 cv
ef
210.412 41.4502 mo
210.412 39.311 208.676 37.5752 206.537 37.5752 cv
204.397 37.5752 202.662 39.311 202.662 41.4502 cv
202.662 43.5889 204.397 45.3252 206.537 45.3252 cv
208.676 45.3252 210.412 43.5889 210.412 41.4502 cv
ef
203.692 38.5698 mo
203.692 36.4312 201.956 34.6948 199.817 34.6948 cv
197.678 34.6948 195.942 36.4312 195.942 38.5698 cv
195.942 40.709 197.678 42.4448 199.817 42.4448 cv
201.956 42.4448 203.692 40.709 203.692 38.5698 cv
ef
196.972 25.0098 mo
196.972 22.8711 195.236 21.1348 193.097 21.1348 cv
190.958 21.1348 189.222 22.8711 189.222 25.0098 cv
189.222 27.1489 190.958 28.8848 193.097 28.8848 cv
195.236 28.8848 196.972 27.1489 196.972 25.0098 cv
ef
1 lw
[3 3 ] 0 dsh
189.577 108.75 mo
324.577 108.75 li
.501961 .501961 .501961 rgb
@
[] 0 dsh
196.972 55.25 mo
196.972 53.1108 195.236 51.375 193.097 51.375 cv
190.958 51.375 189.222 53.1108 189.222 55.25 cv
189.222 57.3892 190.958 59.125 193.097 59.125 cv
195.236 59.125 196.972 57.3892 196.972 55.25 cv
203.692 55.9697 mo
203.692 53.8311 201.956 52.0947 199.817 52.0947 cv
197.678 52.0947 195.942 53.8311 195.942 55.9697 cv
195.942 58.1089 197.678 59.8447 199.817 59.8447 cv
201.956 59.8447 203.692 58.1089 203.692 55.9697 cv
210.412 61.9697 mo
210.412 59.8311 208.676 58.0947 206.537 58.0947 cv
204.397 58.0947 202.662 59.8311 202.662 61.9697 cv
202.662 64.1089 204.397 65.8447 206.537 65.8447 cv
208.676 65.8447 210.412 64.1089 210.412 61.9697 cv
217.132 61.4902 mo
217.132 59.3511 215.396 57.6152 213.257 57.6152 cv
211.118 57.6152 209.382 59.3511 209.382 61.4902 cv
209.382 63.6289 211.118 65.3652 213.257 65.3652 cv
215.396 65.3652 217.132 63.6289 217.132 61.4902 cv
223.972 61.9697 mo
223.972 59.8311 222.236 58.0947 220.097 58.0947 cv
217.958 58.0947 216.222 59.8311 216.222 61.9697 cv
216.222 64.1089 217.958 65.8447 220.097 65.8447 cv
222.236 65.8447 223.972 64.1089 223.972 61.9697 cv
230.692 67.25 mo
230.692 65.1108 228.956 63.375 226.817 63.375 cv
224.678 63.375 222.942 65.1108 222.942 67.25 cv
222.942 69.3892 224.678 71.125 226.817 71.125 cv
228.956 71.125 230.692 69.3892 230.692 67.25 cv
237.532 69.77 mo
237.532 67.6309 235.795 65.895 233.657 65.895 cv
231.518 65.895 229.782 67.6309 229.782 69.77 cv
229.782 71.9092 231.518 73.645 233.657 73.645 cv
235.795 73.645 237.532 71.9092 237.532 69.77 cv
244.251 73.0098 mo
244.251 70.8711 242.516 69.1348 240.376 69.1348 cv
238.238 69.1348 236.501 70.8711 236.501 73.0098 cv
236.501 75.1489 238.238 76.8848 240.376 76.8848 cv
242.516 76.8848 244.251 75.1489 244.251 73.0098 cv
250.972 77.6899 mo
250.972 75.5508 249.236 73.8149 247.097 73.8149 cv
244.958 73.8149 243.222 75.5508 243.222 77.6899 cv
243.222 79.8291 244.958 81.5649 247.097 81.5649 cv
249.236 81.5649 250.972 79.8291 250.972 77.6899 cv
257.692 79.25 mo
257.692 77.1108 255.956 75.375 253.817 75.375 cv
251.678 75.375 249.942 77.1108 249.942 79.25 cv
249.942 81.3892 251.678 83.125 253.817 83.125 cv
255.956 83.125 257.692 81.3892 257.692 79.25 cv
264.412 83.4502 mo
264.412 81.311 262.676 79.5752 260.537 79.5752 cv
258.397 79.5752 256.662 81.311 256.662 83.4502 cv
256.662 85.5889 258.397 87.3252 260.537 87.3252 cv
262.676 87.3252 264.412 85.5889 264.412 83.4502 cv
271.132 86.3301 mo
271.132 84.1909 269.396 82.4551 267.257 82.4551 cv
265.118 82.4551 263.382 84.1909 263.382 86.3301 cv
263.382 88.4688 265.118 90.2051 267.257 90.2051 cv
269.396 90.2051 271.132 88.4688 271.132 86.3301 cv
277.731 88.25 mo
277.731 86.1108 275.996 84.375 273.856 84.375 cv
271.718 84.375 269.981 86.1108 269.981 88.25 cv
269.981 90.3892 271.718 92.125 273.856 92.125 cv
275.996 92.125 277.731 90.3892 277.731 88.25 cv
284.452 91.9697 mo
284.452 89.8311 282.716 88.0947 280.577 88.0947 cv
278.438 88.0947 276.702 89.8311 276.702 91.9697 cv
276.702 94.1089 278.438 95.8447 280.577 95.8447 cv
282.716 95.8447 284.452 94.1089 284.452 91.9697 cv
291.172 94.0098 mo
291.172 91.8711 289.436 90.1348 287.297 90.1348 cv
285.158 90.1348 283.422 91.8711 283.422 94.0098 cv
283.422 96.1489 285.158 97.8848 287.297 97.8848 cv
289.436 97.8848 291.172 96.1489 291.172 94.0098 cv
298.012 97.4902 mo
298.012 95.3511 296.276 93.6152 294.137 93.6152 cv
291.998 93.6152 290.262 95.3511 290.262 97.4902 cv
290.262 99.6289 291.998 101.365 294.137 101.365 cv
296.276 101.365 298.012 99.6289 298.012 97.4902 cv
304.731 100.25 mo
304.731 98.1108 302.996 96.375 300.856 96.375 cv
298.718 96.375 296.981 98.1108 296.981 100.25 cv
296.981 102.389 298.718 104.125 300.856 104.125 cv
302.996 104.125 304.731 102.389 304.731 100.25 cv
311.452 103.01 mo
311.452 100.871 309.715 99.1348 307.577 99.1348 cv
305.438 99.1348 303.702 100.871 303.702 103.01 cv
303.702 105.149 305.438 106.885 307.577 106.885 cv
309.715 106.885 311.452 105.149 311.452 103.01 cv
318.172 105.53 mo
318.172 103.391 316.436 101.655 314.297 101.655 cv
312.158 101.655 310.422 103.391 310.422 105.53 cv
310.422 107.669 312.158 109.405 314.297 109.405 cv
316.436 109.405 318.172 107.669 318.172 105.53 cv
324.892 107.69 mo
324.892 105.551 323.156 103.815 321.016 103.815 cv
318.877 103.815 317.141 105.551 317.141 107.69 cv
317.141 109.829 318.877 111.565 321.016 111.565 cv
323.156 111.565 324.892 109.829 324.892 107.69 cv
0 .701961 0 rgb
@
321.077 110.094 mo
318.17 110.094 li
318.17 115.906 li
323.983 115.906 li
323.983 110.094 li
321.077 110.094 li
cp
0 0 1 rgb
ef
314.327 118.344 mo
311.42 118.344 li
311.42 124.156 li
317.233 124.156 li
317.233 118.344 li
314.327 118.344 li
cp
ef
307.577 124.344 mo
304.67 124.344 li
304.67 130.156 li
310.483 130.156 li
310.483 124.344 li
307.577 124.344 li
cp
ef
300.827 127.094 mo
297.92 127.094 li
297.92 132.906 li
303.733 132.906 li
303.733 127.094 li
300.827 127.094 li
cp
ef
294.077 126.344 mo
291.17 126.344 li
291.17 132.156 li
296.983 132.156 li
296.983 126.344 li
294.077 126.344 li
cp
ef
287.327 125.594 mo
284.42 125.594 li
284.42 131.406 li
290.233 131.406 li
290.233 125.594 li
287.327 125.594 li
cp
ef
280.577 121.844 mo
277.67 121.844 li
277.67 127.656 li
283.483 127.656 li
283.483 121.844 li
280.577 121.844 li
cp
ef
273.827 116.844 mo
270.92 116.844 li
270.92 122.656 li
276.733 122.656 li
276.733 116.844 li
273.827 116.844 li
cp
ef
267.327 111.844 mo
264.42 111.844 li
264.42 117.656 li
270.233 117.656 li
270.233 111.844 li
267.327 111.844 li
cp
ef
260.577 104.844 mo
257.67 104.844 li
257.67 110.656 li
263.483 110.656 li
263.483 104.844 li
260.577 104.844 li
cp
ef
253.827 99.8438 mo
250.92 99.8438 li
250.92 105.656 li
256.733 105.656 li
256.733 99.8438 li
253.827 99.8438 li
cp
ef
247.077 94.0938 mo
244.17 94.0938 li
244.17 99.9063 li
249.983 99.9063 li
249.983 94.0938 li
247.077 94.0938 li
cp
ef
240.327 92.0938 mo
237.42 92.0938 li
237.42 97.9063 li
243.233 97.9063 li
243.233 92.0938 li
240.327 92.0938 li
cp
ef
233.577 88.8438 mo
230.67 88.8438 li
230.67 94.6563 li
236.483 94.6563 li
236.483 88.8438 li
233.577 88.8438 li
cp
ef
226.827 84.5938 mo
223.92 84.5938 li
223.92 90.4063 li
229.733 90.4063 li
229.733 84.5938 li
226.827 84.5938 li
cp
ef
220.077 84.3438 mo
217.17 84.3438 li
217.17 90.1563 li
222.983 90.1563 li
222.983 84.3438 li
220.077 84.3438 li
cp
ef
213.327 85.8438 mo
210.42 85.8438 li
210.42 91.6563 li
216.233 91.6563 li
216.233 85.8438 li
213.327 85.8438 li
cp
ef
206.577 91.5938 mo
203.67 91.5938 li
203.67 97.4063 li
209.483 97.4063 li
209.483 91.5938 li
206.577 91.5938 li
cp
ef
199.827 97.5938 mo
196.92 97.5938 li
196.92 103.406 li
202.733 103.406 li
202.733 97.5938 li
199.827 97.5938 li
cp
ef
193.077 107.344 mo
190.17 107.344 li
190.17 113.156 li
195.983 113.156 li
195.983 107.344 li
193.077 107.344 li
cp
ef
324.892 109.01 mo
324.892 106.871 323.156 105.135 321.016 105.135 cv
318.877 105.135 317.141 106.871 317.141 109.01 cv
317.141 111.149 318.877 112.885 321.016 112.885 cv
323.156 112.885 324.892 111.149 324.892 109.01 cv
1 0 0 rgb
ef
318.172 107.69 mo
318.172 105.551 316.436 103.815 314.297 103.815 cv
312.158 103.815 310.422 105.551 310.422 107.69 cv
310.422 109.829 312.158 111.565 314.297 111.565 cv
316.436 111.565 318.172 109.829 318.172 107.69 cv
ef
311.452 107.21 mo
311.452 105.071 309.715 103.335 307.577 103.335 cv
305.438 103.335 303.702 105.071 303.702 107.21 cv
303.702 109.349 305.438 111.085 307.577 111.085 cv
309.715 111.085 311.452 109.349 311.452 107.21 cv
ef
304.731 106.25 mo
304.731 104.111 302.996 102.375 300.856 102.375 cv
298.718 102.375 296.981 104.111 296.981 106.25 cv
296.981 108.389 298.718 110.125 300.856 110.125 cv
302.996 110.125 304.731 108.389 304.731 106.25 cv
ef
298.012 105.29 mo
298.012 103.151 296.276 101.415 294.137 101.415 cv
291.998 101.415 290.262 103.151 290.262 105.29 cv
290.262 107.429 291.998 109.165 294.137 109.165 cv
296.276 109.165 298.012 107.429 298.012 105.29 cv
ef
291.172 103.01 mo
291.172 100.871 289.436 99.1348 287.297 99.1348 cv
285.158 99.1348 283.422 100.871 283.422 103.01 cv
283.422 105.149 285.158 106.885 287.297 106.885 cv
289.436 106.885 291.172 105.149 291.172 103.01 cv
ef
284.452 100.49 mo
284.452 98.3511 282.716 96.6152 280.577 96.6152 cv
278.438 96.6152 276.702 98.3511 276.702 100.49 cv
276.702 102.629 278.438 104.365 280.577 104.365 cv
282.716 104.365 284.452 102.629 284.452 100.49 cv
ef
277.731 99.5298 mo
277.731 97.3911 275.996 95.6548 273.856 95.6548 cv
271.718 95.6548 269.981 97.3911 269.981 99.5298 cv
269.981 101.669 271.718 103.405 273.856 103.405 cv
275.996 103.405 277.731 101.669 277.731 99.5298 cv
ef
271.132 95.4502 mo
271.132 93.311 269.396 91.5752 267.257 91.5752 cv
265.118 91.5752 263.382 93.311 263.382 95.4502 cv
263.382 97.5889 265.118 99.3252 267.257 99.3252 cv
269.396 99.3252 271.132 97.5889 271.132 95.4502 cv
ef
264.412 93.0498 mo
264.412 90.9111 262.676 89.1748 260.537 89.1748 cv
258.397 89.1748 256.662 90.9111 256.662 93.0498 cv
256.662 95.189 258.397 96.9248 260.537 96.9248 cv
262.676 96.9248 264.412 95.189 264.412 93.0498 cv
ef
257.692 87.29 mo
257.692 85.1509 255.956 83.415 253.817 83.415 cv
251.678 83.415 249.942 85.1509 249.942 87.29 cv
249.942 89.4287 251.678 91.165 253.817 91.165 cv
255.956 91.165 257.692 89.4287 257.692 87.29 cv
ef
250.972 83.6899 mo
250.972 81.5508 249.236 79.8149 247.097 79.8149 cv
244.958 79.8149 243.222 81.5508 243.222 83.6899 cv
243.222 85.8291 244.958 87.5649 247.097 87.5649 cv
249.236 87.5649 250.972 85.8291 250.972 83.6899 cv
ef
244.251 75.29 mo
244.251 73.1509 242.516 71.415 240.376 71.415 cv
238.238 71.415 236.501 73.1509 236.501 75.29 cv
236.501 77.4287 238.238 79.165 240.376 79.165 cv
242.516 79.165 244.251 77.4287 244.251 75.29 cv
ef
237.532 70.9697 mo
237.532 68.8311 235.795 67.0947 233.657 67.0947 cv
231.518 67.0947 229.782 68.8311 229.782 70.9697 cv
229.782 73.1089 231.518 74.8447 233.657 74.8447 cv
235.795 74.8447 237.532 73.1089 237.532 70.9697 cv
ef
230.692 66.1699 mo
230.692 64.0308 228.956 62.2949 226.817 62.2949 cv
224.678 62.2949 222.942 64.0308 222.942 66.1699 cv
222.942 68.3091 224.678 70.0449 226.817 70.0449 cv
228.956 70.0449 230.692 68.3091 230.692 66.1699 cv
ef
223.972 59.6899 mo
223.972 57.5508 222.236 55.8149 220.097 55.8149 cv
217.958 55.8149 216.222 57.5508 216.222 59.6899 cv
216.222 61.8291 217.958 63.5649 220.097 63.5649 cv
222.236 63.5649 223.972 61.8291 223.972 59.6899 cv
ef
217.132 49.9697 mo
217.132 47.8311 215.396 46.0947 213.257 46.0947 cv
211.118 46.0947 209.382 47.8311 209.382 49.9697 cv
209.382 52.1089 211.118 53.8447 213.257 53.8447 cv
215.396 53.8447 217.132 52.1089 217.132 49.9697 cv
ef
210.412 41.4502 mo
210.412 39.311 208.676 37.5752 206.537 37.5752 cv
204.397 37.5752 202.662 39.311 202.662 41.4502 cv
202.662 43.5889 204.397 45.3252 206.537 45.3252 cv
208.676 45.3252 210.412 43.5889 210.412 41.4502 cv
ef
203.692 38.5698 mo
203.692 36.4312 201.956 34.6948 199.817 34.6948 cv
197.678 34.6948 195.942 36.4312 195.942 38.5698 cv
195.942 40.709 197.678 42.4448 199.817 42.4448 cv
201.956 42.4448 203.692 40.709 203.692 38.5698 cv
ef
196.972 25.0098 mo
196.972 22.8711 195.236 21.1348 193.097 21.1348 cv
190.958 21.1348 189.222 22.8711 189.222 25.0098 cv
189.222 27.1489 190.958 28.8848 193.097 28.8848 cv
195.236 28.8848 196.972 27.1489 196.972 25.0098 cv
ef
1.5 lw
189.577 331 mo
324.577 331 li
189.577 331 mo
189.577 165.75 li
324.577 165.75 li
324.577 331 li
189.577 331 li
cp
0 0 0 rgb
@
324.577 325.5 mo
324.577 331 li
321.077 328.25 mo
321.077 331 li
317.827 328.25 mo
317.827 331 li
314.327 328.25 mo
314.327 331 li
311.077 325.5 mo
311.077 331 li
307.577 328.25 mo
307.577 331 li
304.327 328.25 mo
304.327 331 li
300.827 328.25 mo
300.827 331 li
297.577 325.5 mo
297.577 331 li
294.077 328.25 mo
294.077 331 li
290.827 328.25 mo
290.827 331 li
287.327 328.25 mo
287.327 331 li
284.077 325.5 mo
284.077 331 li
280.577 328.25 mo
280.577 331 li
277.327 328.25 mo
277.327 331 li
273.827 328.25 mo
273.827 331 li
270.577 325.5 mo
270.577 331 li
267.327 328.25 mo
267.327 331 li
263.827 328.25 mo
263.827 331 li
260.577 328.25 mo
260.577 331 li
257.077 325.5 mo
257.077 331 li
253.827 328.25 mo
253.827 331 li
250.327 328.25 mo
250.327 331 li
247.077 328.25 mo
247.077 331 li
243.577 325.5 mo
243.577 331 li
240.327 328.25 mo
240.327 331 li
236.827 328.25 mo
236.827 331 li
233.577 328.25 mo
233.577 331 li
230.077 325.5 mo
230.077 331 li
226.827 328.25 mo
226.827 331 li
223.327 328.25 mo
223.327 331 li
220.077 328.25 mo
220.077 331 li
216.577 325.5 mo
216.577 331 li
213.327 328.25 mo
213.327 331 li
209.827 328.25 mo
209.827 331 li
206.577 328.25 mo
206.577 331 li
203.077 325.5 mo
203.077 331 li
199.827 328.25 mo
199.827 331 li
196.327 328.25 mo
196.327 331 li
193.077 328.25 mo
193.077 331 li
189.577 325.5 mo
189.577 331 li
@
191.577 173.5 mo
189.577 173.5 li
193.327 181.25 mo
189.577 181.25 li
191.577 327.75 mo
189.577 327.75 li
191.577 320 mo
189.577 320 li
191.577 312.5 mo
189.577 312.5 li
193.327 304.75 mo
189.577 304.75 li
193.327 181.25 mo
189.577 181.25 li
191.577 189 mo
189.577 189 li
191.577 196.75 mo
189.577 196.75 li
191.577 204.5 mo
189.577 204.5 li
193.327 212 mo
189.577 212 li
191.577 219.75 mo
189.577 219.75 li
191.577 227.5 mo
189.577 227.5 li
191.577 235.25 mo
189.577 235.25 li
193.327 243 mo
189.577 243 li
191.577 250.75 mo
189.577 250.75 li
191.577 258.5 mo
189.577 258.5 li
191.577 266 mo
189.577 266 li
193.327 273.75 mo
189.577 273.75 li
191.577 281.5 mo
189.577 281.5 li
191.577 289.25 mo
189.577 289.25 li
191.577 297 mo
189.577 297 li
193.327 304.75 mo
189.577 304.75 li
189.577 331 mo
189.577 165.75 li
@
324.892 273.77 mo
324.892 271.631 323.156 269.895 321.016 269.895 cv
318.877 269.895 317.141 271.631 317.141 273.77 cv
317.141 275.909 318.877 277.645 321.016 277.645 cv
323.156 277.645 324.892 275.909 324.892 273.77 cv
1 0 0 rgb
ef
318.172 273.29 mo
318.172 271.151 316.436 269.415 314.297 269.415 cv
312.158 269.415 310.422 271.151 310.422 273.29 cv
310.422 275.429 312.158 277.165 314.297 277.165 cv
316.436 277.165 318.172 275.429 318.172 273.29 cv
ef
311.452 273.29 mo
311.452 271.151 309.715 269.415 307.577 269.415 cv
305.438 269.415 303.702 271.151 303.702 273.29 cv
303.702 275.429 305.438 277.165 307.577 277.165 cv
309.715 277.165 311.452 275.429 311.452 273.29 cv
ef
304.731 272.57 mo
304.731 270.431 302.996 268.695 300.856 268.695 cv
298.718 268.695 296.981 270.431 296.981 272.57 cv
296.981 274.709 298.718 276.445 300.856 276.445 cv
302.996 276.445 304.731 274.709 304.731 272.57 cv
ef
298.012 270.53 mo
298.012 268.391 296.276 266.655 294.137 266.655 cv
291.998 266.655 290.262 268.391 290.262 270.53 cv
290.262 272.669 291.998 274.405 294.137 274.405 cv
296.276 274.405 298.012 272.669 298.012 270.53 cv
ef
291.172 269.45 mo
291.172 267.311 289.436 265.575 287.297 265.575 cv
285.158 265.575 283.422 267.311 283.422 269.45 cv
283.422 271.589 285.158 273.325 287.297 273.325 cv
289.436 273.325 291.172 271.589 291.172 269.45 cv
ef
284.452 267.53 mo
284.452 265.391 282.716 263.655 280.577 263.655 cv
278.438 263.655 276.702 265.391 276.702 267.53 cv
276.702 269.669 278.438 271.405 280.577 271.405 cv
282.716 271.405 284.452 269.669 284.452 267.53 cv
ef
277.731 264.77 mo
277.731 262.631 275.996 260.895 273.856 260.895 cv
271.718 260.895 269.981 262.631 269.981 264.77 cv
269.981 266.909 271.718 268.645 273.856 268.645 cv
275.996 268.645 277.731 266.909 277.731 264.77 cv
ef
271.132 264.17 mo
271.132 262.031 269.396 260.295 267.257 260.295 cv
265.118 260.295 263.382 262.031 263.382 264.17 cv
263.382 266.309 265.118 268.045 267.257 268.045 cv
269.396 268.045 271.132 266.309 271.132 264.17 cv
ef
264.412 257.69 mo
264.412 255.551 262.676 253.815 260.537 253.815 cv
258.397 253.815 256.662 255.551 256.662 257.69 cv
256.662 259.829 258.397 261.565 260.537 261.565 cv
262.676 261.565 264.412 259.829 264.412 257.69 cv
ef
257.692 255.53 mo
257.692 253.391 255.956 251.655 253.817 251.655 cv
251.678 251.655 249.942 253.391 249.942 255.53 cv
249.942 257.669 251.678 259.405 253.817 259.405 cv
255.956 259.405 257.692 257.669 257.692 255.53 cv
ef
250.972 250.25 mo
250.972 248.111 249.236 246.375 247.097 246.375 cv
244.958 246.375 243.222 248.111 243.222 250.25 cv
243.222 252.389 244.958 254.125 247.097 254.125 cv
249.236 254.125 250.972 252.389 250.972 250.25 cv
ef
244.251 246.17 mo
244.251 244.031 242.516 242.295 240.376 242.295 cv
238.238 242.295 236.501 244.031 236.501 246.17 cv
236.501 248.309 238.238 250.045 240.376 250.045 cv
242.516 250.045 244.251 248.309 244.251 246.17 cv
ef
237.532 239.21 mo
237.532 237.071 235.795 235.335 233.657 235.335 cv
231.518 235.335 229.782 237.071 229.782 239.21 cv
229.782 241.349 231.518 243.085 233.657 243.085 cv
235.795 243.085 237.532 241.349 237.532 239.21 cv
ef
230.692 232.25 mo
230.692 230.111 228.956 228.375 226.817 228.375 cv
224.678 228.375 222.942 230.111 222.942 232.25 cv
222.942 234.389 224.678 236.125 226.817 236.125 cv
228.956 236.125 230.692 234.389 230.692 232.25 cv
ef
223.972 226.73 mo
223.972 224.591 222.236 222.855 220.097 222.855 cv
217.958 222.855 216.222 224.591 216.222 226.73 cv
216.222 228.869 217.958 230.605 220.097 230.605 cv
222.236 230.605 223.972 228.869 223.972 226.73 cv
ef
217.132 217.97 mo
217.132 215.831 215.396 214.095 213.257 214.095 cv
211.118 214.095 209.382 215.831 209.382 217.97 cv
209.382 220.109 211.118 221.845 213.257 221.845 cv
215.396 221.845 217.132 220.109 217.132 217.97 cv
ef
210.412 208.73 mo
210.412 206.591 208.676 204.855 206.537 204.855 cv
204.397 204.855 202.662 206.591 202.662 208.73 cv
202.662 210.869 204.397 212.605 206.537 212.605 cv
208.676 212.605 210.412 210.869 210.412 208.73 cv
ef
203.692 200.57 mo
203.692 198.431 201.956 196.695 199.817 196.695 cv
197.678 196.695 195.942 198.431 195.942 200.57 cv
195.942 202.709 197.678 204.445 199.817 204.445 cv
201.956 204.445 203.692 202.709 203.692 200.57 cv
ef
196.972 202.73 mo
196.972 200.591 195.236 198.855 193.097 198.855 cv
190.958 198.855 189.222 200.591 189.222 202.73 cv
189.222 204.869 190.958 206.605 193.097 206.605 cv
195.236 206.605 196.972 204.869 196.972 202.73 cv
ef
1 lw
[3 3 ] 0 dsh
189.577 273.75 mo
324.577 273.75 li
.501961 .501961 .501961 rgb
@
[] 0 dsh
196.972 222.17 mo
196.972 220.031 195.236 218.295 193.097 218.295 cv
190.958 218.295 189.222 220.031 189.222 222.17 cv
189.222 224.309 190.958 226.045 193.097 226.045 cv
195.236 226.045 196.972 224.309 196.972 222.17 cv
203.692 225.77 mo
203.692 223.631 201.956 221.895 199.817 221.895 cv
197.678 221.895 195.942 223.631 195.942 225.77 cv
195.942 227.909 197.678 229.645 199.817 229.645 cv
201.956 229.645 203.692 227.909 203.692 225.77 cv
210.412 229.01 mo
210.412 226.871 208.676 225.135 206.537 225.135 cv
204.397 225.135 202.662 226.871 202.662 229.01 cv
202.662 231.149 204.397 232.885 206.537 232.885 cv
208.676 232.885 210.412 231.149 210.412 229.01 cv
217.132 230.33 mo
217.132 228.191 215.396 226.455 213.257 226.455 cv
211.118 226.455 209.382 228.191 209.382 230.33 cv
209.382 232.469 211.118 234.205 213.257 234.205 cv
215.396 234.205 217.132 232.469 217.132 230.33 cv
223.972 233.69 mo
223.972 231.551 222.236 229.815 220.097 229.815 cv
217.958 229.815 216.222 231.551 216.222 233.69 cv
216.222 235.829 217.958 237.565 220.097 237.565 cv
222.236 237.565 223.972 235.829 223.972 233.69 cv
230.692 237.05 mo
230.692 234.911 228.956 233.175 226.817 233.175 cv
224.678 233.175 222.942 234.911 222.942 237.05 cv
222.942 239.189 224.678 240.925 226.817 240.925 cv
228.956 240.925 230.692 239.189 230.692 237.05 cv
237.532 238.97 mo
237.532 236.831 235.795 235.095 233.657 235.095 cv
231.518 235.095 229.782 236.831 229.782 238.97 cv
229.782 241.109 231.518 242.845 233.657 242.845 cv
235.795 242.845 237.532 241.109 237.532 238.97 cv
244.251 241.73 mo
244.251 239.591 242.516 237.855 240.376 237.855 cv
238.238 237.855 236.501 239.591 236.501 241.73 cv
236.501 243.869 238.238 245.605 240.376 245.605 cv
242.516 245.605 244.251 243.869 244.251 241.73 cv
250.972 243.29 mo
250.972 241.151 249.236 239.415 247.097 239.415 cv
244.958 239.415 243.222 241.151 243.222 243.29 cv
243.222 245.429 244.958 247.165 247.097 247.165 cv
249.236 247.165 250.972 245.429 250.972 243.29 cv
257.692 246.77 mo
257.692 244.631 255.956 242.895 253.817 242.895 cv
251.678 242.895 249.942 244.631 249.942 246.77 cv
249.942 248.909 251.678 250.645 253.817 250.645 cv
255.956 250.645 257.692 248.909 257.692 246.77 cv
264.412 249.53 mo
264.412 247.391 262.676 245.655 260.537 245.655 cv
258.397 245.655 256.662 247.391 256.662 249.53 cv
256.662 251.669 258.397 253.405 260.537 253.405 cv
262.676 253.405 264.412 251.669 264.412 249.53 cv
271.132 252.17 mo
271.132 250.031 269.396 248.295 267.257 248.295 cv
265.118 248.295 263.382 250.031 263.382 252.17 cv
263.382 254.309 265.118 256.045 267.257 256.045 cv
269.396 256.045 271.132 254.309 271.132 252.17 cv
277.731 253.97 mo
277.731 251.831 275.996 250.095 273.856 250.095 cv
271.718 250.095 269.981 251.831 269.981 253.97 cv
269.981 256.109 271.718 257.845 273.856 257.845 cv
275.996 257.845 277.731 256.109 277.731 253.97 cv
284.452 256.97 mo
284.452 254.831 282.716 253.095 280.577 253.095 cv
278.438 253.095 276.702 254.831 276.702 256.97 cv
276.702 259.109 278.438 260.845 280.577 260.845 cv
282.716 260.845 284.452 259.109 284.452 256.97 cv
291.172 260.57 mo
291.172 258.431 289.436 256.695 287.297 256.695 cv
285.158 256.695 283.422 258.431 283.422 260.57 cv
283.422 262.709 285.158 264.445 287.297 264.445 cv
289.436 264.445 291.172 262.709 291.172 260.57 cv
298.012 263.21 mo
298.012 261.071 296.276 259.335 294.137 259.335 cv
291.998 259.335 290.262 261.071 290.262 263.21 cv
290.262 265.349 291.998 267.085 294.137 267.085 cv
296.276 267.085 298.012 265.349 298.012 263.21 cv
304.731 265.97 mo
304.731 263.831 302.996 262.095 300.856 262.095 cv
298.718 262.095 296.981 263.831 296.981 265.97 cv
296.981 268.109 298.718 269.845 300.856 269.845 cv
302.996 269.845 304.731 268.109 304.731 265.97 cv
311.452 268.25 mo
311.452 266.111 309.715 264.375 307.577 264.375 cv
305.438 264.375 303.702 266.111 303.702 268.25 cv
303.702 270.389 305.438 272.125 307.577 272.125 cv
309.715 272.125 311.452 270.389 311.452 268.25 cv
318.172 271.01 mo
318.172 268.871 316.436 267.135 314.297 267.135 cv
312.158 267.135 310.422 268.871 310.422 271.01 cv
310.422 273.149 312.158 274.885 314.297 274.885 cv
316.436 274.885 318.172 273.149 318.172 271.01 cv
324.892 273.29 mo
324.892 271.151 323.156 269.415 321.016 269.415 cv
318.877 269.415 317.141 271.151 317.141 273.29 cv
317.141 275.429 318.877 277.165 321.016 277.165 cv
323.156 277.165 324.892 275.429 324.892 273.29 cv
0 .701961 0 rgb
@
321.077 271.344 mo
318.17 271.344 li
318.17 277.156 li
323.983 277.156 li
323.983 271.344 li
321.077 271.344 li
cp
0 0 1 rgb
ef
314.327 271.844 mo
311.42 271.844 li
311.42 277.656 li
317.233 277.656 li
317.233 271.844 li
314.327 271.844 li
cp
ef
307.577 272.094 mo
304.67 272.094 li
304.67 277.906 li
310.483 277.906 li
310.483 272.094 li
307.577 272.094 li
cp
ef
300.827 272.094 mo
297.92 272.094 li
297.92 277.906 li
303.733 277.906 li
303.733 272.094 li
300.827 272.094 li
cp
ef
294.077 272.844 mo
291.17 272.844 li
291.17 278.656 li
296.983 278.656 li
296.983 272.844 li
294.077 272.844 li
cp
ef
287.327 272.344 mo
284.42 272.344 li
284.42 278.156 li
290.233 278.156 li
290.233 272.344 li
287.327 272.344 li
cp
ef
280.577 272.094 mo
277.67 272.094 li
277.67 277.906 li
283.483 277.906 li
283.483 272.094 li
280.577 272.094 li
cp
ef
273.827 271.844 mo
270.92 271.844 li
270.92 277.656 li
276.733 277.656 li
276.733 271.844 li
273.827 271.844 li
cp
ef
267.327 270.344 mo
264.42 270.344 li
264.42 276.156 li
270.233 276.156 li
270.233 270.344 li
267.327 270.344 li
cp
ef
260.577 271.594 mo
257.67 271.594 li
257.67 277.406 li
263.483 277.406 li
263.483 271.594 li
260.577 271.594 li
cp
ef
253.827 270.844 mo
250.92 270.844 li
250.92 276.656 li
256.733 276.656 li
256.733 270.844 li
253.827 270.844 li
cp
ef
247.077 270.344 mo
244.17 270.344 li
244.17 276.156 li
249.983 276.156 li
249.983 270.344 li
247.077 270.344 li
cp
ef
240.327 269.344 mo
237.42 269.344 li
237.42 275.156 li
243.233 275.156 li
243.233 269.344 li
240.327 269.344 li
cp
ef
233.577 269.344 mo
230.67 269.344 li
230.67 275.156 li
236.483 275.156 li
236.483 269.344 li
233.577 269.344 li
cp
ef
226.827 268.844 mo
223.92 268.844 li
223.92 274.656 li
229.733 274.656 li
229.733 268.844 li
226.827 268.844 li
cp
ef
220.077 269.094 mo
217.17 269.094 li
217.17 274.906 li
222.983 274.906 li
222.983 269.094 li
220.077 269.094 li
cp
ef
213.327 270.094 mo
210.42 270.094 li
210.42 275.906 li
216.233 275.906 li
216.233 270.094 li
213.327 270.094 li
cp
ef
206.577 269.344 mo
203.67 269.344 li
203.67 275.156 li
209.483 275.156 li
209.483 269.344 li
206.577 269.344 li
cp
ef
199.827 270.844 mo
196.92 270.844 li
196.92 276.656 li
202.733 276.656 li
202.733 270.844 li
199.827 270.844 li
cp
ef
193.077 269.344 mo
190.17 269.344 li
190.17 275.156 li
195.983 275.156 li
195.983 269.344 li
193.077 269.344 li
cp
ef
324.892 273.77 mo
324.892 271.631 323.156 269.895 321.016 269.895 cv
318.877 269.895 317.141 271.631 317.141 273.77 cv
317.141 275.909 318.877 277.645 321.016 277.645 cv
323.156 277.645 324.892 275.909 324.892 273.77 cv
1 0 0 rgb
ef
318.172 273.29 mo
318.172 271.151 316.436 269.415 314.297 269.415 cv
312.158 269.415 310.422 271.151 310.422 273.29 cv
310.422 275.429 312.158 277.165 314.297 277.165 cv
316.436 277.165 318.172 275.429 318.172 273.29 cv
ef
311.452 273.29 mo
311.452 271.151 309.715 269.415 307.577 269.415 cv
305.438 269.415 303.702 271.151 303.702 273.29 cv
303.702 275.429 305.438 277.165 307.577 277.165 cv
309.715 277.165 311.452 275.429 311.452 273.29 cv
ef
304.731 272.57 mo
304.731 270.431 302.996 268.695 300.856 268.695 cv
298.718 268.695 296.981 270.431 296.981 272.57 cv
296.981 274.709 298.718 276.445 300.856 276.445 cv
302.996 276.445 304.731 274.709 304.731 272.57 cv
ef
298.012 270.53 mo
298.012 268.391 296.276 266.655 294.137 266.655 cv
291.998 266.655 290.262 268.391 290.262 270.53 cv
290.262 272.669 291.998 274.405 294.137 274.405 cv
296.276 274.405 298.012 272.669 298.012 270.53 cv
ef
291.172 269.45 mo
291.172 267.311 289.436 265.575 287.297 265.575 cv
285.158 265.575 283.422 267.311 283.422 269.45 cv
283.422 271.589 285.158 273.325 287.297 273.325 cv
289.436 273.325 291.172 271.589 291.172 269.45 cv
ef
284.452 267.53 mo
284.452 265.391 282.716 263.655 280.577 263.655 cv
278.438 263.655 276.702 265.391 276.702 267.53 cv
276.702 269.669 278.438 271.405 280.577 271.405 cv
282.716 271.405 284.452 269.669 284.452 267.53 cv
ef
277.731 264.77 mo
277.731 262.631 275.996 260.895 273.856 260.895 cv
271.718 260.895 269.981 262.631 269.981 264.77 cv
269.981 266.909 271.718 268.645 273.856 268.645 cv
275.996 268.645 277.731 266.909 277.731 264.77 cv
ef
271.132 264.17 mo
271.132 262.031 269.396 260.295 267.257 260.295 cv
265.118 260.295 263.382 262.031 263.382 264.17 cv
263.382 266.309 265.118 268.045 267.257 268.045 cv
269.396 268.045 271.132 266.309 271.132 264.17 cv
ef
264.412 257.69 mo
264.412 255.551 262.676 253.815 260.537 253.815 cv
258.397 253.815 256.662 255.551 256.662 257.69 cv
256.662 259.829 258.397 261.565 260.537 261.565 cv
262.676 261.565 264.412 259.829 264.412 257.69 cv
ef
257.692 255.53 mo
257.692 253.391 255.956 251.655 253.817 251.655 cv
251.678 251.655 249.942 253.391 249.942 255.53 cv
249.942 257.669 251.678 259.405 253.817 259.405 cv
255.956 259.405 257.692 257.669 257.692 255.53 cv
ef
250.972 250.25 mo
250.972 248.111 249.236 246.375 247.097 246.375 cv
244.958 246.375 243.222 248.111 243.222 250.25 cv
243.222 252.389 244.958 254.125 247.097 254.125 cv
249.236 254.125 250.972 252.389 250.972 250.25 cv
ef
244.251 246.17 mo
244.251 244.031 242.516 242.295 240.376 242.295 cv
238.238 242.295 236.501 244.031 236.501 246.17 cv
236.501 248.309 238.238 250.045 240.376 250.045 cv
242.516 250.045 244.251 248.309 244.251 246.17 cv
ef
237.532 239.21 mo
237.532 237.071 235.795 235.335 233.657 235.335 cv
231.518 235.335 229.782 237.071 229.782 239.21 cv
229.782 241.349 231.518 243.085 233.657 243.085 cv
235.795 243.085 237.532 241.349 237.532 239.21 cv
ef
230.692 232.25 mo
230.692 230.111 228.956 228.375 226.817 228.375 cv
224.678 228.375 222.942 230.111 222.942 232.25 cv
222.942 234.389 224.678 236.125 226.817 236.125 cv
228.956 236.125 230.692 234.389 230.692 232.25 cv
ef
223.972 226.73 mo
223.972 224.591 222.236 222.855 220.097 222.855 cv
217.958 222.855 216.222 224.591 216.222 226.73 cv
216.222 228.869 217.958 230.605 220.097 230.605 cv
222.236 230.605 223.972 228.869 223.972 226.73 cv
ef
217.132 217.97 mo
217.132 215.831 215.396 214.095 213.257 214.095 cv
211.118 214.095 209.382 215.831 209.382 217.97 cv
209.382 220.109 211.118 221.845 213.257 221.845 cv
215.396 221.845 217.132 220.109 217.132 217.97 cv
ef
210.412 208.73 mo
210.412 206.591 208.676 204.855 206.537 204.855 cv
204.397 204.855 202.662 206.591 202.662 208.73 cv
202.662 210.869 204.397 212.605 206.537 212.605 cv
208.676 212.605 210.412 210.869 210.412 208.73 cv
ef
203.692 200.57 mo
203.692 198.431 201.956 196.695 199.817 196.695 cv
197.678 196.695 195.942 198.431 195.942 200.57 cv
195.942 202.709 197.678 204.445 199.817 204.445 cv
201.956 204.445 203.692 202.709 203.692 200.57 cv
ef
196.972 202.73 mo
196.972 200.591 195.236 198.855 193.097 198.855 cv
190.958 198.855 189.222 200.591 189.222 202.73 cv
189.222 204.869 190.958 206.605 193.097 206.605 cv
195.236 206.605 196.972 204.869 196.972 202.73 cv
ef
1.5 lw
326.577 8.5 mo
324.577 8.5 li
328.577 16.25 mo
324.577 16.25 li
326.577 162.75 mo
324.577 162.75 li
326.577 155 mo
324.577 155 li
326.577 147.25 mo
324.577 147.25 li
328.577 139.5 mo
324.577 139.5 li
328.577 16.25 mo
324.577 16.25 li
326.577 24 mo
324.577 24 li
326.577 31.5 mo
324.577 31.5 li
326.577 39.25 mo
324.577 39.25 li
328.577 47 mo
324.577 47 li
326.577 54.75 mo
324.577 54.75 li
326.577 62.5 mo
324.577 62.5 li
326.577 70.25 mo
324.577 70.25 li
328.577 78 mo
324.577 78 li
326.577 85.5 mo
324.577 85.5 li
326.577 93.25 mo
324.577 93.25 li
326.577 101 mo
324.577 101 li
328.577 108.75 mo
324.577 108.75 li
326.577 116.5 mo
324.577 116.5 li
326.577 124.25 mo
324.577 124.25 li
326.577 132 mo
324.577 132 li
328.577 139.5 mo
324.577 139.5 li
324.577 165.75 mo
324.577 .75 li
459.327 161 mo
459.327 165.75 li
456.077 163.25 mo
456.077 165.75 li
452.577 163.25 mo
452.577 165.75 li
449.327 163.25 mo
449.327 165.75 li
445.827 161 mo
445.827 165.75 li
442.577 163.25 mo
442.577 165.75 li
439.077 163.25 mo
439.077 165.75 li
435.827 163.25 mo
435.827 165.75 li
432.327 161 mo
432.327 165.75 li
429.077 163.25 mo
429.077 165.75 li
425.827 163.25 mo
425.827 165.75 li
422.327 163.25 mo
422.327 165.75 li
419.077 161 mo
419.077 165.75 li
415.577 163.25 mo
415.577 165.75 li
412.327 163.25 mo
412.327 165.75 li
408.827 163.25 mo
408.827 165.75 li
405.577 161 mo
405.577 165.75 li
402.077 163.25 mo
402.077 165.75 li
398.827 163.25 mo
398.827 165.75 li
395.327 163.25 mo
395.327 165.75 li
392.077 161 mo
392.077 165.75 li
388.577 163.25 mo
388.577 165.75 li
385.327 163.25 mo
385.327 165.75 li
381.827 163.25 mo
381.827 165.75 li
378.577 161 mo
378.577 165.75 li
375.077 163.25 mo
375.077 165.75 li
371.827 163.25 mo
371.827 165.75 li
368.327 163.25 mo
368.327 165.75 li
365.077 161 mo
365.077 165.75 li
361.577 163.25 mo
361.577 165.75 li
358.327 163.25 mo
358.327 165.75 li
354.827 163.25 mo
354.827 165.75 li
351.577 161 mo
351.577 165.75 li
348.077 163.25 mo
348.077 165.75 li
344.827 163.25 mo
344.827 165.75 li
341.327 163.25 mo
341.327 165.75 li
338.077 161 mo
338.077 165.75 li
334.577 163.25 mo
334.577 165.75 li
331.327 163.25 mo
331.327 165.75 li
327.827 163.25 mo
327.827 165.75 li
324.577 161 mo
324.577 165.75 li
324.577 165.75 mo
459.327 165.75 li
324.577 165.75 mo
324.577 .75 li
459.327 .75 li
459.327 165.75 li
324.577 165.75 li
cp
0 0 0 rgb
@
459.767 108.53 mo
459.767 106.46 458.086 104.78 456.017 104.78 cv
453.947 104.78 452.267 106.46 452.267 108.53 cv
452.267 110.6 453.947 112.28 456.017 112.28 cv
458.086 112.28 459.767 110.6 459.767 108.53 cv
1 0 0 rgb
ef
453.046 108.05 mo
453.046 105.98 451.367 104.3 449.296 104.3 cv
447.227 104.3 445.546 105.98 445.546 108.05 cv
445.546 110.12 447.227 111.8 449.296 111.8 cv
451.367 111.8 453.046 110.12 453.046 108.05 cv
ef
446.327 108.05 mo
446.327 105.98 444.647 104.3 442.577 104.3 cv
440.506 104.3 438.827 105.98 438.827 108.05 cv
438.827 110.12 440.506 111.8 442.577 111.8 cv
444.647 111.8 446.327 110.12 446.327 108.05 cv
ef
439.607 106.49 mo
439.607 104.42 437.926 102.74 435.857 102.74 cv
433.787 102.74 432.107 104.42 432.107 106.49 cv
432.107 108.56 433.787 110.24 435.857 110.24 cv
437.926 110.24 439.607 108.56 439.607 106.49 cv
ef
432.886 105.17 mo
432.886 103.1 431.207 101.42 429.136 101.42 cv
427.067 101.42 425.386 103.1 425.386 105.17 cv
425.386 107.24 427.067 108.92 429.136 108.92 cv
431.207 108.92 432.886 107.24 432.886 105.17 cv
ef
426.167 102.53 mo
426.167 100.46 424.487 98.7798 422.417 98.7798 cv
420.346 98.7798 418.667 100.46 418.667 102.53 cv
418.667 104.6 420.346 106.28 422.417 106.28 cv
424.487 106.28 426.167 104.6 426.167 102.53 cv
ef
419.327 100.49 mo
419.327 98.4199 417.647 96.7402 415.577 96.7402 cv
413.506 96.7402 411.827 98.4199 411.827 100.49 cv
411.827 102.56 413.506 104.24 415.577 104.24 cv
417.647 104.24 419.327 102.56 419.327 100.49 cv
ef
412.487 99.4102 mo
412.487 97.3398 410.807 95.6602 408.737 95.6602 cv
406.667 95.6602 404.987 97.3398 404.987 99.4102 cv
404.987 101.48 406.667 103.16 408.737 103.16 cv
410.807 103.16 412.487 101.48 412.487 99.4102 cv
ef
405.767 97.0098 mo
405.767 94.9399 404.086 93.2598 402.017 93.2598 cv
399.947 93.2598 398.267 94.9399 398.267 97.0098 cv
398.267 99.0801 399.947 100.76 402.017 100.76 cv
404.086 100.76 405.767 99.0801 405.767 97.0098 cv
ef
399.046 92.6899 mo
399.046 90.6201 397.367 88.9399 395.296 88.9399 cv
393.227 88.9399 391.546 90.6201 391.546 92.6899 cv
391.546 94.7598 393.227 96.4399 395.296 96.4399 cv
397.367 96.4399 399.046 94.7598 399.046 92.6899 cv
ef
392.327 89.0898 mo
392.327 87.02 390.647 85.3398 388.577 85.3398 cv
386.506 85.3398 384.827 87.02 384.827 89.0898 cv
384.827 91.1602 386.506 92.8398 388.577 92.8398 cv
390.647 92.8398 392.327 91.1602 392.327 89.0898 cv
ef
385.607 83.3301 mo
385.607 81.2598 383.926 79.5801 381.857 79.5801 cv
379.787 79.5801 378.107 81.2598 378.107 83.3301 cv
378.107 85.3999 379.787 87.0801 381.857 87.0801 cv
383.926 87.0801 385.607 85.3999 385.607 83.3301 cv
ef
378.886 78.0498 mo
378.886 75.98 377.207 74.2998 375.136 74.2998 cv
373.067 74.2998 371.386 75.98 371.386 78.0498 cv
371.386 80.1201 373.067 81.7998 375.136 81.7998 cv
377.207 81.7998 378.886 80.1201 378.886 78.0498 cv
ef
372.167 70.4902 mo
372.167 68.4199 370.487 66.7402 368.417 66.7402 cv
366.346 66.7402 364.667 68.4199 364.667 70.4902 cv
364.667 72.5601 366.346 74.2402 368.417 74.2402 cv
370.487 74.2402 372.167 72.5601 372.167 70.4902 cv
ef
365.327 61.73 mo
365.327 59.6602 363.647 57.98 361.577 57.98 cv
359.506 57.98 357.827 59.6602 357.827 61.73 cv
357.827 63.7998 359.506 65.48 361.577 65.48 cv
363.647 65.48 365.327 63.7998 365.327 61.73 cv
ef
358.487 56.4502 mo
358.487 54.3799 356.807 52.7002 354.737 52.7002 cv
352.667 52.7002 350.987 54.3799 350.987 56.4502 cv
350.987 58.52 352.667 60.2002 354.737 60.2002 cv
356.807 60.2002 358.487 58.52 358.487 56.4502 cv
ef
351.767 48.29 mo
351.767 46.2197 350.086 44.54 348.017 44.54 cv
345.947 44.54 344.267 46.2197 344.267 48.29 cv
344.267 50.3599 345.947 52.04 348.017 52.04 cv
350.086 52.04 351.767 50.3599 351.767 48.29 cv
ef
345.046 40.25 mo
345.046 38.1797 343.367 36.5 341.296 36.5 cv
339.227 36.5 337.546 38.1797 337.546 40.25 cv
337.546 42.3198 339.227 44 341.296 44 cv
343.367 44 345.046 42.3198 345.046 40.25 cv
ef
338.327 34.25 mo
338.327 32.1797 336.647 30.5 334.577 30.5 cv
332.506 30.5 330.827 32.1797 330.827 34.25 cv
330.827 36.3198 332.506 38 334.577 38 cv
336.647 38 338.327 36.3198 338.327 34.25 cv
ef
331.607 19.0098 mo
331.607 16.9399 329.926 15.2598 327.857 15.2598 cv
325.787 15.2598 324.107 16.9399 324.107 19.0098 cv
324.107 21.0801 325.787 22.7598 327.857 22.7598 cv
329.926 22.7598 331.607 21.0801 331.607 19.0098 cv
ef
1 lw
[3 3 ] 0 dsh
324.577 108.75 mo
459.327 108.75 li
.501961 .501961 .501961 rgb
@
[] 0 dsh
331.607 53.8101 mo
331.607 51.7402 329.926 50.0601 327.857 50.0601 cv
325.787 50.0601 324.107 51.7402 324.107 53.8101 cv
324.107 55.8799 325.787 57.5601 327.857 57.5601 cv
329.926 57.5601 331.607 55.8799 331.607 53.8101 cv
338.327 55.73 mo
338.327 53.6602 336.647 51.98 334.577 51.98 cv
332.506 51.98 330.827 53.6602 330.827 55.73 cv
330.827 57.7998 332.506 59.48 334.577 59.48 cv
336.647 59.48 338.327 57.7998 338.327 55.73 cv
345.046 58.25 mo
345.046 56.1802 343.367 54.5 341.296 54.5 cv
339.227 54.5 337.546 56.1802 337.546 58.25 cv
337.546 60.3198 339.227 62 341.296 62 cv
343.367 62 345.046 60.3198 345.046 58.25 cv
351.767 61.4902 mo
351.767 59.4199 350.086 57.7402 348.017 57.7402 cv
345.947 57.7402 344.267 59.4199 344.267 61.4902 cv
344.267 63.5601 345.947 65.2402 348.017 65.2402 cv
350.086 65.2402 351.767 63.5601 351.767 61.4902 cv
358.487 63.4102 mo
358.487 61.3398 356.807 59.6602 354.737 59.6602 cv
352.667 59.6602 350.987 61.3398 350.987 63.4102 cv
350.987 65.48 352.667 67.1602 354.737 67.1602 cv
356.807 67.1602 358.487 65.48 358.487 63.4102 cv
365.327 66.5298 mo
365.327 64.46 363.647 62.7798 361.577 62.7798 cv
359.506 62.7798 357.827 64.46 357.827 66.5298 cv
357.827 68.6001 359.506 70.2798 361.577 70.2798 cv
363.647 70.2798 365.327 68.6001 365.327 66.5298 cv
372.167 69.77 mo
372.167 67.7002 370.487 66.02 368.417 66.02 cv
366.346 66.02 364.667 67.7002 364.667 69.77 cv
364.667 71.8398 366.346 73.52 368.417 73.52 cv
370.487 73.52 372.167 71.8398 372.167 69.77 cv
378.886 74.4502 mo
378.886 72.3799 377.207 70.7002 375.136 70.7002 cv
373.067 70.7002 371.386 72.3799 371.386 74.4502 cv
371.386 76.52 373.067 78.2002 375.136 78.2002 cv
377.207 78.2002 378.886 76.52 378.886 74.4502 cv
385.607 76.25 mo
385.607 74.1802 383.926 72.5 381.857 72.5 cv
379.787 72.5 378.107 74.1802 378.107 76.25 cv
378.107 78.3198 379.787 80 381.857 80 cv
383.926 80 385.607 78.3198 385.607 76.25 cv
392.327 79.25 mo
392.327 77.1802 390.647 75.5 388.577 75.5 cv
386.506 75.5 384.827 77.1802 384.827 79.25 cv
384.827 81.3198 386.506 83 388.577 83 cv
390.647 83 392.327 81.3198 392.327 79.25 cv
399.046 82.0098 mo
399.046 79.9399 397.367 78.2598 395.296 78.2598 cv
393.227 78.2598 391.546 79.9399 391.546 82.0098 cv
391.546 84.0801 393.227 85.7598 395.296 85.7598 cv
397.367 85.7598 399.046 84.0801 399.046 82.0098 cv
405.767 84.0498 mo
405.767 81.98 404.086 80.2998 402.017 80.2998 cv
399.947 80.2998 398.267 81.98 398.267 84.0498 cv
398.267 86.1201 399.947 87.7998 402.017 87.7998 cv
404.086 87.7998 405.767 86.1201 405.767 84.0498 cv
412.487 88.4902 mo
412.487 86.4199 410.807 84.7402 408.737 84.7402 cv
406.667 84.7402 404.987 86.4199 404.987 88.4902 cv
404.987 90.5601 406.667 92.2402 408.737 92.2402 cv
410.807 92.2402 412.487 90.5601 412.487 88.4902 cv
419.327 91.25 mo
419.327 89.1802 417.647 87.5 415.577 87.5 cv
413.506 87.5 411.827 89.1802 411.827 91.25 cv
411.827 93.3198 413.506 95 415.577 95 cv
417.647 95 419.327 93.3198 419.327 91.25 cv
426.167 93.4102 mo
426.167 91.3398 424.487 89.6602 422.417 89.6602 cv
420.346 89.6602 418.667 91.3398 418.667 93.4102 cv
418.667 95.48 420.346 97.1602 422.417 97.1602 cv
424.487 97.1602 426.167 95.48 426.167 93.4102 cv
432.886 96.77 mo
432.886 94.7002 431.207 93.02 429.136 93.02 cv
427.067 93.02 425.386 94.7002 425.386 96.77 cv
425.386 98.8398 427.067 100.52 429.136 100.52 cv
431.207 100.52 432.886 98.8398 432.886 96.77 cv
439.607 99.77 mo
439.607 97.7002 437.926 96.02 435.857 96.02 cv
433.787 96.02 432.107 97.7002 432.107 99.77 cv
432.107 101.84 433.787 103.52 435.857 103.52 cv
437.926 103.52 439.607 101.84 439.607 99.77 cv
446.327 102.53 mo
446.327 100.46 444.647 98.7798 442.577 98.7798 cv
440.506 98.7798 438.827 100.46 438.827 102.53 cv
438.827 104.6 440.506 106.28 442.577 106.28 cv
444.647 106.28 446.327 104.6 446.327 102.53 cv
453.046 104.93 mo
453.046 102.86 451.367 101.18 449.296 101.18 cv
447.227 101.18 445.546 102.86 445.546 104.93 cv
445.546 107 447.227 108.68 449.296 108.68 cv
451.367 108.68 453.046 107 453.046 104.93 cv
459.767 107.81 mo
459.767 105.74 458.086 104.06 456.017 104.06 cv
453.947 104.06 452.267 105.74 452.267 107.81 cv
452.267 109.88 453.947 111.56 456.017 111.56 cv
458.086 111.56 459.767 109.88 459.767 107.81 cv
0 .701961 0 rgb
@
456.077 107.938 mo
453.264 107.938 li
453.264 113.563 li
458.889 113.563 li
458.889 107.938 li
456.077 107.938 li
cp
0 0 1 rgb
ef
449.327 112.188 mo
446.514 112.188 li
446.514 117.813 li
452.139 117.813 li
452.139 112.188 li
449.327 112.188 li
cp
ef
442.577 114.438 mo
439.764 114.438 li
439.764 120.063 li
445.389 120.063 li
445.389 114.438 li
442.577 114.438 li
cp
ef
435.827 115.938 mo
433.014 115.938 li
433.014 121.563 li
438.639 121.563 li
438.639 115.938 li
435.827 115.938 li
cp
ef
429.077 115.938 mo
426.264 115.938 li
426.264 121.563 li
431.889 121.563 li
431.889 115.938 li
429.077 115.938 li
cp
ef
422.327 115.688 mo
419.514 115.688 li
419.514 121.313 li
425.139 121.313 li
425.139 115.688 li
422.327 115.688 li
cp
ef
415.577 113.688 mo
412.764 113.688 li
412.764 119.313 li
418.389 119.313 li
418.389 113.688 li
415.577 113.688 li
cp
ef
408.827 110.438 mo
406.014 110.438 li
406.014 116.063 li
411.639 116.063 li
411.639 110.438 li
408.827 110.438 li
cp
ef
402.077 108.188 mo
399.264 108.188 li
399.264 113.813 li
404.889 113.813 li
404.889 108.188 li
402.077 108.188 li
cp
ef
395.327 105.438 mo
392.514 105.438 li
392.514 111.063 li
398.139 111.063 li
398.139 105.438 li
395.327 105.438 li
cp
ef
388.577 102.438 mo
385.764 102.438 li
385.764 108.063 li
391.389 108.063 li
391.389 102.438 li
388.577 102.438 li
cp
ef
381.827 99.9375 mo
379.014 99.9375 li
379.014 105.563 li
384.639 105.563 li
384.639 99.9375 li
381.827 99.9375 li
cp
ef
375.077 97.6875 mo
372.264 97.6875 li
372.264 103.313 li
377.889 103.313 li
377.889 97.6875 li
375.077 97.6875 li
cp
ef
368.327 97.6875 mo
365.514 97.6875 li
365.514 103.313 li
371.139 103.313 li
371.139 97.6875 li
368.327 97.6875 li
cp
ef
361.577 97.1875 mo
358.764 97.1875 li
358.764 102.813 li
364.389 102.813 li
364.389 97.1875 li
361.577 97.1875 li
cp
ef
354.827 96.6875 mo
352.014 96.6875 li
352.014 102.313 li
357.639 102.313 li
357.639 96.6875 li
354.827 96.6875 li
cp
ef
348.077 96.6875 mo
345.264 96.6875 li
345.264 102.313 li
350.889 102.313 li
350.889 96.6875 li
348.077 96.6875 li
cp
ef
341.327 99.4375 mo
338.514 99.4375 li
338.514 105.063 li
344.139 105.063 li
344.139 99.4375 li
341.327 99.4375 li
cp
ef
334.577 103.188 mo
331.764 103.188 li
331.764 108.813 li
337.389 108.813 li
337.389 103.188 li
334.577 103.188 li
cp
ef
327.827 107.438 mo
325.014 107.438 li
325.014 113.063 li
330.639 113.063 li
330.639 107.438 li
327.827 107.438 li
cp
ef
459.767 108.53 mo
459.767 106.46 458.086 104.78 456.017 104.78 cv
453.947 104.78 452.267 106.46 452.267 108.53 cv
452.267 110.6 453.947 112.28 456.017 112.28 cv
458.086 112.28 459.767 110.6 459.767 108.53 cv
1 0 0 rgb
ef
453.046 108.05 mo
453.046 105.98 451.367 104.3 449.296 104.3 cv
447.227 104.3 445.546 105.98 445.546 108.05 cv
445.546 110.12 447.227 111.8 449.296 111.8 cv
451.367 111.8 453.046 110.12 453.046 108.05 cv
ef
446.327 108.05 mo
446.327 105.98 444.647 104.3 442.577 104.3 cv
440.506 104.3 438.827 105.98 438.827 108.05 cv
438.827 110.12 440.506 111.8 442.577 111.8 cv
444.647 111.8 446.327 110.12 446.327 108.05 cv
ef
439.607 106.49 mo
439.607 104.42 437.926 102.74 435.857 102.74 cv
433.787 102.74 432.107 104.42 432.107 106.49 cv
432.107 108.56 433.787 110.24 435.857 110.24 cv
437.926 110.24 439.607 108.56 439.607 106.49 cv
ef
432.886 105.17 mo
432.886 103.1 431.207 101.42 429.136 101.42 cv
427.067 101.42 425.386 103.1 425.386 105.17 cv
425.386 107.24 427.067 108.92 429.136 108.92 cv
431.207 108.92 432.886 107.24 432.886 105.17 cv
ef
426.167 102.53 mo
426.167 100.46 424.487 98.7798 422.417 98.7798 cv
420.346 98.7798 418.667 100.46 418.667 102.53 cv
418.667 104.6 420.346 106.28 422.417 106.28 cv
424.487 106.28 426.167 104.6 426.167 102.53 cv
ef
419.327 100.49 mo
419.327 98.4199 417.647 96.7402 415.577 96.7402 cv
413.506 96.7402 411.827 98.4199 411.827 100.49 cv
411.827 102.56 413.506 104.24 415.577 104.24 cv
417.647 104.24 419.327 102.56 419.327 100.49 cv
ef
412.487 99.4102 mo
412.487 97.3398 410.807 95.6602 408.737 95.6602 cv
406.667 95.6602 404.987 97.3398 404.987 99.4102 cv
404.987 101.48 406.667 103.16 408.737 103.16 cv
410.807 103.16 412.487 101.48 412.487 99.4102 cv
ef
405.767 97.0098 mo
405.767 94.9399 404.086 93.2598 402.017 93.2598 cv
399.947 93.2598 398.267 94.9399 398.267 97.0098 cv
398.267 99.0801 399.947 100.76 402.017 100.76 cv
404.086 100.76 405.767 99.0801 405.767 97.0098 cv
ef
399.046 92.6899 mo
399.046 90.6201 397.367 88.9399 395.296 88.9399 cv
393.227 88.9399 391.546 90.6201 391.546 92.6899 cv
391.546 94.7598 393.227 96.4399 395.296 96.4399 cv
397.367 96.4399 399.046 94.7598 399.046 92.6899 cv
ef
392.327 89.0898 mo
392.327 87.02 390.647 85.3398 388.577 85.3398 cv
386.506 85.3398 384.827 87.02 384.827 89.0898 cv
384.827 91.1602 386.506 92.8398 388.577 92.8398 cv
390.647 92.8398 392.327 91.1602 392.327 89.0898 cv
ef
385.607 83.3301 mo
385.607 81.2598 383.926 79.5801 381.857 79.5801 cv
379.787 79.5801 378.107 81.2598 378.107 83.3301 cv
378.107 85.3999 379.787 87.0801 381.857 87.0801 cv
383.926 87.0801 385.607 85.3999 385.607 83.3301 cv
ef
378.886 78.0498 mo
378.886 75.98 377.207 74.2998 375.136 74.2998 cv
373.067 74.2998 371.386 75.98 371.386 78.0498 cv
371.386 80.1201 373.067 81.7998 375.136 81.7998 cv
377.207 81.7998 378.886 80.1201 378.886 78.0498 cv
ef
372.167 70.4902 mo
372.167 68.4199 370.487 66.7402 368.417 66.7402 cv
366.346 66.7402 364.667 68.4199 364.667 70.4902 cv
364.667 72.5601 366.346 74.2402 368.417 74.2402 cv
370.487 74.2402 372.167 72.5601 372.167 70.4902 cv
ef
365.327 61.73 mo
365.327 59.6602 363.647 57.98 361.577 57.98 cv
359.506 57.98 357.827 59.6602 357.827 61.73 cv
357.827 63.7998 359.506 65.48 361.577 65.48 cv
363.647 65.48 365.327 63.7998 365.327 61.73 cv
ef
358.487 56.4502 mo
358.487 54.3799 356.807 52.7002 354.737 52.7002 cv
352.667 52.7002 350.987 54.3799 350.987 56.4502 cv
350.987 58.52 352.667 60.2002 354.737 60.2002 cv
356.807 60.2002 358.487 58.52 358.487 56.4502 cv
ef
351.767 48.29 mo
351.767 46.2197 350.086 44.54 348.017 44.54 cv
345.947 44.54 344.267 46.2197 344.267 48.29 cv
344.267 50.3599 345.947 52.04 348.017 52.04 cv
350.086 52.04 351.767 50.3599 351.767 48.29 cv
ef
345.046 40.25 mo
345.046 38.1797 343.367 36.5 341.296 36.5 cv
339.227 36.5 337.546 38.1797 337.546 40.25 cv
337.546 42.3198 339.227 44 341.296 44 cv
343.367 44 345.046 42.3198 345.046 40.25 cv
ef
338.327 34.25 mo
338.327 32.1797 336.647 30.5 334.577 30.5 cv
332.506 30.5 330.827 32.1797 330.827 34.25 cv
330.827 36.3198 332.506 38 334.577 38 cv
336.647 38 338.327 36.3198 338.327 34.25 cv
ef
331.607 19.0098 mo
331.607 16.9399 329.926 15.2598 327.857 15.2598 cv
325.787 15.2598 324.107 16.9399 324.107 19.0098 cv
324.107 21.0801 325.787 22.7598 327.857 22.7598 cv
329.926 22.7598 331.607 21.0801 331.607 19.0098 cv
ef
1.5 lw
324.577 331 mo
459.327 331 li
324.577 331 mo
324.577 165.75 li
459.327 165.75 li
459.327 331 li
324.577 331 li
cp
0 0 0 rgb
@
459.327 325.5 mo
459.327 331 li
456.077 328.25 mo
456.077 331 li
452.577 328.25 mo
452.577 331 li
449.327 328.25 mo
449.327 331 li
445.827 325.5 mo
445.827 331 li
442.577 328.25 mo
442.577 331 li
439.077 328.25 mo
439.077 331 li
435.827 328.25 mo
435.827 331 li
432.327 325.5 mo
432.327 331 li
429.077 328.25 mo
429.077 331 li
425.827 328.25 mo
425.827 331 li
422.327 328.25 mo
422.327 331 li
419.077 325.5 mo
419.077 331 li
415.577 328.25 mo
415.577 331 li
412.327 328.25 mo
412.327 331 li
408.827 328.25 mo
408.827 331 li
405.577 325.5 mo
405.577 331 li
402.077 328.25 mo
402.077 331 li
398.827 328.25 mo
398.827 331 li
395.327 328.25 mo
395.327 331 li
392.077 325.5 mo
392.077 331 li
388.577 328.25 mo
388.577 331 li
385.327 328.25 mo
385.327 331 li
381.827 328.25 mo
381.827 331 li
378.577 325.5 mo
378.577 331 li
375.077 328.25 mo
375.077 331 li
371.827 328.25 mo
371.827 331 li
368.327 328.25 mo
368.327 331 li
365.077 325.5 mo
365.077 331 li
361.577 328.25 mo
361.577 331 li
358.327 328.25 mo
358.327 331 li
354.827 328.25 mo
354.827 331 li
351.577 325.5 mo
351.577 331 li
348.077 328.25 mo
348.077 331 li
344.827 328.25 mo
344.827 331 li
341.327 328.25 mo
341.327 331 li
338.077 325.5 mo
338.077 331 li
334.577 328.25 mo
334.577 331 li
331.327 328.25 mo
331.327 331 li
327.827 328.25 mo
327.827 331 li
324.577 325.5 mo
324.577 331 li
@
326.327 173.5 mo
324.577 173.5 li
328.077 181.25 mo
324.577 181.25 li
326.327 327.75 mo
324.577 327.75 li
326.327 320 mo
324.577 320 li
326.327 312.5 mo
324.577 312.5 li
328.077 304.75 mo
324.577 304.75 li
328.077 181.25 mo
324.577 181.25 li
326.327 189 mo
324.577 189 li
326.327 196.75 mo
324.577 196.75 li
326.327 204.5 mo
324.577 204.5 li
328.077 212 mo
324.577 212 li
326.327 219.75 mo
324.577 219.75 li
326.327 227.5 mo
324.577 227.5 li
326.327 235.25 mo
324.577 235.25 li
328.077 243 mo
324.577 243 li
326.327 250.75 mo
324.577 250.75 li
326.327 258.5 mo
324.577 258.5 li
326.327 266 mo
324.577 266 li
328.077 273.75 mo
324.577 273.75 li
326.327 281.5 mo
324.577 281.5 li
326.327 289.25 mo
324.577 289.25 li
326.327 297 mo
324.577 297 li
328.077 304.75 mo
324.577 304.75 li
324.577 331 mo
324.577 165.75 li
@
459.767 273.41 mo
459.767 271.34 458.086 269.66 456.017 269.66 cv
453.947 269.66 452.267 271.34 452.267 273.41 cv
452.267 275.48 453.947 277.16 456.017 277.16 cv
458.086 277.16 459.767 275.48 459.767 273.41 cv
1 0 0 rgb
ef
453.046 273.77 mo
453.046 271.7 451.367 270.02 449.296 270.02 cv
447.227 270.02 445.546 271.7 445.546 273.77 cv
445.546 275.84 447.227 277.52 449.296 277.52 cv
451.367 277.52 453.046 275.84 453.046 273.77 cv
ef
446.327 272.93 mo
446.327 270.86 444.647 269.18 442.577 269.18 cv
440.506 269.18 438.827 270.86 438.827 272.93 cv
438.827 275 440.506 276.68 442.577 276.68 cv
444.647 276.68 446.327 275 446.327 272.93 cv
ef
439.607 272.69 mo
439.607 270.62 437.926 268.94 435.857 268.94 cv
433.787 268.94 432.107 270.62 432.107 272.69 cv
432.107 274.76 433.787 276.44 435.857 276.44 cv
437.926 276.44 439.607 274.76 439.607 272.69 cv
ef
432.886 271.97 mo
432.886 269.9 431.207 268.22 429.136 268.22 cv
427.067 268.22 425.386 269.9 425.386 271.97 cv
425.386 274.04 427.067 275.72 429.136 275.72 cv
431.207 275.72 432.886 274.04 432.886 271.97 cv
ef
426.167 270.05 mo
426.167 267.98 424.487 266.3 422.417 266.3 cv
420.346 266.3 418.667 267.98 418.667 270.05 cv
418.667 272.12 420.346 273.8 422.417 273.8 cv
424.487 273.8 426.167 272.12 426.167 270.05 cv
ef
419.327 269.33 mo
419.327 267.26 417.647 265.58 415.577 265.58 cv
413.506 265.58 411.827 267.26 411.827 269.33 cv
411.827 271.4 413.506 273.08 415.577 273.08 cv
417.647 273.08 419.327 271.4 419.327 269.33 cv
ef
412.487 267.77 mo
412.487 265.7 410.807 264.02 408.737 264.02 cv
406.667 264.02 404.987 265.7 404.987 267.77 cv
404.987 269.84 406.667 271.52 408.737 271.52 cv
410.807 271.52 412.487 269.84 412.487 267.77 cv
ef
405.767 265.25 mo
405.767 263.18 404.086 261.5 402.017 261.5 cv
399.947 261.5 398.267 263.18 398.267 265.25 cv
398.267 267.32 399.947 269 402.017 269 cv
404.086 269 405.767 267.32 405.767 265.25 cv
ef
399.046 261.41 mo
399.046 259.34 397.367 257.66 395.296 257.66 cv
393.227 257.66 391.546 259.34 391.546 261.41 cv
391.546 263.48 393.227 265.16 395.296 265.16 cv
397.367 265.16 399.046 263.48 399.046 261.41 cv
ef
392.327 258.53 mo
392.327 256.46 390.647 254.78 388.577 254.78 cv
386.506 254.78 384.827 256.46 384.827 258.53 cv
384.827 260.6 386.506 262.28 388.577 262.28 cv
390.647 262.28 392.327 260.6 392.327 258.53 cv
ef
385.607 253.97 mo
385.607 251.9 383.926 250.22 381.857 250.22 cv
379.787 250.22 378.107 251.9 378.107 253.97 cv
378.107 256.04 379.787 257.72 381.857 257.72 cv
383.926 257.72 385.607 256.04 385.607 253.97 cv
ef
378.886 249.41 mo
378.886 247.34 377.207 245.66 375.136 245.66 cv
373.067 245.66 371.386 247.34 371.386 249.41 cv
371.386 251.48 373.067 253.16 375.136 253.16 cv
377.207 253.16 378.886 251.48 378.886 249.41 cv
ef
372.167 242.45 mo
372.167 240.38 370.487 238.7 368.417 238.7 cv
366.346 238.7 364.667 240.38 364.667 242.45 cv
364.667 244.52 366.346 246.2 368.417 246.2 cv
370.487 246.2 372.167 244.52 372.167 242.45 cv
ef
365.327 235.97 mo
365.327 233.9 363.647 232.22 361.577 232.22 cv
359.506 232.22 357.827 233.9 357.827 235.97 cv
357.827 238.04 359.506 239.72 361.577 239.72 cv
363.647 239.72 365.327 238.04 365.327 235.97 cv
ef
358.487 228.53 mo
358.487 226.46 356.807 224.78 354.737 224.78 cv
352.667 224.78 350.987 226.46 350.987 228.53 cv
350.987 230.6 352.667 232.28 354.737 232.28 cv
356.807 232.28 358.487 230.6 358.487 228.53 cv
ef
351.767 221.81 mo
351.767 219.74 350.086 218.06 348.017 218.06 cv
345.947 218.06 344.267 219.74 344.267 221.81 cv
344.267 223.88 345.947 225.56 348.017 225.56 cv
350.086 225.56 351.767 223.88 351.767 221.81 cv
ef
345.046 210.29 mo
345.046 208.22 343.367 206.54 341.296 206.54 cv
339.227 206.54 337.546 208.22 337.546 210.29 cv
337.546 212.36 339.227 214.04 341.296 214.04 cv
343.367 214.04 345.046 212.36 345.046 210.29 cv
ef
338.327 202.25 mo
338.327 200.18 336.647 198.5 334.577 198.5 cv
332.506 198.5 330.827 200.18 330.827 202.25 cv
330.827 204.32 332.506 206 334.577 206 cv
336.647 206 338.327 204.32 338.327 202.25 cv
ef
331.607 228.05 mo
331.607 225.98 329.926 224.3 327.857 224.3 cv
325.787 224.3 324.107 225.98 324.107 228.05 cv
324.107 230.12 325.787 231.8 327.857 231.8 cv
329.926 231.8 331.607 230.12 331.607 228.05 cv
ef
1 lw
[3 3 ] 0 dsh
324.577 273.75 mo
459.327 273.75 li
.501961 .501961 .501961 rgb
@
[] 0 dsh
331.607 229.49 mo
331.607 227.42 329.926 225.74 327.857 225.74 cv
325.787 225.74 324.107 227.42 324.107 229.49 cv
324.107 231.56 325.787 233.24 327.857 233.24 cv
329.926 233.24 331.607 231.56 331.607 229.49 cv
338.327 231.41 mo
338.327 229.34 336.647 227.66 334.577 227.66 cv
332.506 227.66 330.827 229.34 330.827 231.41 cv
330.827 233.48 332.506 235.16 334.577 235.16 cv
336.647 235.16 338.327 233.48 338.327 231.41 cv
345.046 234.05 mo
345.046 231.98 343.367 230.3 341.296 230.3 cv
339.227 230.3 337.546 231.98 337.546 234.05 cv
337.546 236.12 339.227 237.8 341.296 237.8 cv
343.367 237.8 345.046 236.12 345.046 234.05 cv
351.767 235.73 mo
351.767 233.66 350.086 231.98 348.017 231.98 cv
345.947 231.98 344.267 233.66 344.267 235.73 cv
344.267 237.8 345.947 239.48 348.017 239.48 cv
350.086 239.48 351.767 237.8 351.767 235.73 cv
358.487 239.81 mo
358.487 237.74 356.807 236.06 354.737 236.06 cv
352.667 236.06 350.987 237.74 350.987 239.81 cv
350.987 241.88 352.667 243.56 354.737 243.56 cv
356.807 243.56 358.487 241.88 358.487 239.81 cv
365.327 241.49 mo
365.327 239.42 363.647 237.74 361.577 237.74 cv
359.506 237.74 357.827 239.42 357.827 241.49 cv
357.827 243.56 359.506 245.24 361.577 245.24 cv
363.647 245.24 365.327 243.56 365.327 241.49 cv
372.167 243.77 mo
372.167 241.7 370.487 240.02 368.417 240.02 cv
366.346 240.02 364.667 241.7 364.667 243.77 cv
364.667 245.84 366.346 247.52 368.417 247.52 cv
370.487 247.52 372.167 245.84 372.167 243.77 cv
378.886 245.57 mo
378.886 243.5 377.207 241.82 375.136 241.82 cv
373.067 241.82 371.386 243.5 371.386 245.57 cv
371.386 247.64 373.067 249.32 375.136 249.32 cv
377.207 249.32 378.886 247.64 378.886 245.57 cv
385.607 248.45 mo
385.607 246.38 383.926 244.7 381.857 244.7 cv
379.787 244.7 378.107 246.38 378.107 248.45 cv
378.107 250.52 379.787 252.2 381.857 252.2 cv
383.926 252.2 385.607 250.52 385.607 248.45 cv
392.327 250.73 mo
392.327 248.66 390.647 246.98 388.577 246.98 cv
386.506 246.98 384.827 248.66 384.827 250.73 cv
384.827 252.8 386.506 254.48 388.577 254.48 cv
390.647 254.48 392.327 252.8 392.327 250.73 cv
399.046 253.01 mo
399.046 250.94 397.367 249.26 395.296 249.26 cv
393.227 249.26 391.546 250.94 391.546 253.01 cv
391.546 255.08 393.227 256.76 395.296 256.76 cv
397.367 256.76 399.046 255.08 399.046 253.01 cv
405.767 255.17 mo
405.767 253.1 404.086 251.42 402.017 251.42 cv
399.947 251.42 398.267 253.1 398.267 255.17 cv
398.267 257.24 399.947 258.92 402.017 258.92 cv
404.086 258.92 405.767 257.24 405.767 255.17 cv
412.487 257.81 mo
412.487 255.74 410.807 254.06 408.737 254.06 cv
406.667 254.06 404.987 255.74 404.987 257.81 cv
404.987 259.88 406.667 261.56 408.737 261.56 cv
410.807 261.56 412.487 259.88 412.487 257.81 cv
419.327 259.25 mo
419.327 257.18 417.647 255.5 415.577 255.5 cv
413.506 255.5 411.827 257.18 411.827 259.25 cv
411.827 261.32 413.506 263 415.577 263 cv
417.647 263 419.327 261.32 419.327 259.25 cv
426.167 262.49 mo
426.167 260.42 424.487 258.74 422.417 258.74 cv
420.346 258.74 418.667 260.42 418.667 262.49 cv
418.667 264.56 420.346 266.24 422.417 266.24 cv
424.487 266.24 426.167 264.56 426.167 262.49 cv
432.886 264.29 mo
432.886 262.22 431.207 260.54 429.136 260.54 cv
427.067 260.54 425.386 262.22 425.386 264.29 cv
425.386 266.36 427.067 268.04 429.136 268.04 cv
431.207 268.04 432.886 266.36 432.886 264.29 cv
439.607 266.69 mo
439.607 264.62 437.926 262.94 435.857 262.94 cv
433.787 262.94 432.107 264.62 432.107 266.69 cv
432.107 268.76 433.787 270.44 435.857 270.44 cv
437.926 270.44 439.607 268.76 439.607 266.69 cv
446.327 269.33 mo
446.327 267.26 444.647 265.58 442.577 265.58 cv
440.506 265.58 438.827 267.26 438.827 269.33 cv
438.827 271.4 440.506 273.08 442.577 273.08 cv
444.647 273.08 446.327 271.4 446.327 269.33 cv
453.046 271.49 mo
453.046 269.42 451.367 267.74 449.296 267.74 cv
447.227 267.74 445.546 269.42 445.546 271.49 cv
445.546 273.56 447.227 275.24 449.296 275.24 cv
451.367 275.24 453.046 273.56 453.046 271.49 cv
459.767 273.17 mo
459.767 271.1 458.086 269.42 456.017 269.42 cv
453.947 269.42 452.267 271.1 452.267 273.17 cv
452.267 275.24 453.947 276.92 456.017 276.92 cv
458.086 276.92 459.767 275.24 459.767 273.17 cv
0 .701961 0 rgb
@
456.077 271.188 mo
453.264 271.188 li
453.264 276.813 li
458.889 276.813 li
458.889 271.188 li
456.077 271.188 li
cp
0 0 1 rgb
ef
449.327 270.938 mo
446.514 270.938 li
446.514 276.563 li
452.139 276.563 li
452.139 270.938 li
449.327 270.938 li
cp
ef
442.577 271.188 mo
439.764 271.188 li
439.764 276.813 li
445.389 276.813 li
445.389 271.188 li
442.577 271.188 li
cp
ef
435.827 271.188 mo
433.014 271.188 li
433.014 276.813 li
438.639 276.813 li
438.639 271.188 li
435.827 271.188 li
cp
ef
429.077 270.938 mo
426.264 270.938 li
426.264 276.563 li
431.889 276.563 li
431.889 270.938 li
429.077 270.938 li
cp
ef
422.327 271.438 mo
419.514 271.438 li
419.514 277.063 li
425.139 277.063 li
425.139 271.438 li
422.327 271.438 li
cp
ef
415.577 271.188 mo
412.764 271.188 li
412.764 276.813 li
418.389 276.813 li
418.389 271.188 li
415.577 271.188 li
cp
ef
408.827 270.938 mo
406.014 270.938 li
406.014 276.563 li
411.639 276.563 li
411.639 270.938 li
408.827 270.938 li
cp
ef
402.077 271.188 mo
399.264 271.188 li
399.264 276.813 li
404.889 276.813 li
404.889 271.188 li
402.077 271.188 li
cp
ef
395.327 271.688 mo
392.514 271.688 li
392.514 277.313 li
398.139 277.313 li
398.139 271.688 li
395.327 271.688 li
cp
ef
388.577 270.938 mo
385.764 270.938 li
385.764 276.563 li
391.389 276.563 li
391.389 270.938 li
388.577 270.938 li
cp
ef
381.827 271.438 mo
379.014 271.438 li
379.014 277.063 li
384.639 277.063 li
384.639 271.438 li
381.827 271.438 li
cp
ef
375.077 270.688 mo
372.264 270.688 li
372.264 276.313 li
377.889 276.313 li
377.889 270.688 li
375.077 270.688 li
cp
ef
368.327 271.188 mo
365.514 271.188 li
365.514 276.813 li
371.139 276.813 li
371.139 271.188 li
368.327 271.188 li
cp
ef
361.577 271.188 mo
358.764 271.188 li
358.764 276.813 li
364.389 276.813 li
364.389 271.188 li
361.577 271.188 li
cp
ef
354.827 270.938 mo
352.014 270.938 li
352.014 276.563 li
357.639 276.563 li
357.639 270.938 li
354.827 270.938 li
cp
ef
348.077 270.688 mo
345.264 270.688 li
345.264 276.313 li
350.889 276.313 li
350.889 270.688 li
348.077 270.688 li
cp
ef
341.327 271.938 mo
338.514 271.938 li
338.514 277.563 li
344.139 277.563 li
344.139 271.938 li
341.327 271.938 li
cp
ef
334.577 271.188 mo
331.764 271.188 li
331.764 276.813 li
337.389 276.813 li
337.389 271.188 li
334.577 271.188 li
cp
ef
327.827 271.438 mo
325.014 271.438 li
325.014 277.063 li
330.639 277.063 li
330.639 271.438 li
327.827 271.438 li
cp
ef
459.767 273.41 mo
459.767 271.34 458.086 269.66 456.017 269.66 cv
453.947 269.66 452.267 271.34 452.267 273.41 cv
452.267 275.48 453.947 277.16 456.017 277.16 cv
458.086 277.16 459.767 275.48 459.767 273.41 cv
1 0 0 rgb
ef
453.046 273.77 mo
453.046 271.7 451.367 270.02 449.296 270.02 cv
447.227 270.02 445.546 271.7 445.546 273.77 cv
445.546 275.84 447.227 277.52 449.296 277.52 cv
451.367 277.52 453.046 275.84 453.046 273.77 cv
ef
446.327 272.93 mo
446.327 270.86 444.647 269.18 442.577 269.18 cv
440.506 269.18 438.827 270.86 438.827 272.93 cv
438.827 275 440.506 276.68 442.577 276.68 cv
444.647 276.68 446.327 275 446.327 272.93 cv
ef
439.607 272.69 mo
439.607 270.62 437.926 268.94 435.857 268.94 cv
433.787 268.94 432.107 270.62 432.107 272.69 cv
432.107 274.76 433.787 276.44 435.857 276.44 cv
437.926 276.44 439.607 274.76 439.607 272.69 cv
ef
432.886 271.97 mo
432.886 269.9 431.207 268.22 429.136 268.22 cv
427.067 268.22 425.386 269.9 425.386 271.97 cv
425.386 274.04 427.067 275.72 429.136 275.72 cv
431.207 275.72 432.886 274.04 432.886 271.97 cv
ef
426.167 270.05 mo
426.167 267.98 424.487 266.3 422.417 266.3 cv
420.346 266.3 418.667 267.98 418.667 270.05 cv
418.667 272.12 420.346 273.8 422.417 273.8 cv
424.487 273.8 426.167 272.12 426.167 270.05 cv
ef
419.327 269.33 mo
419.327 267.26 417.647 265.58 415.577 265.58 cv
413.506 265.58 411.827 267.26 411.827 269.33 cv
411.827 271.4 413.506 273.08 415.577 273.08 cv
417.647 273.08 419.327 271.4 419.327 269.33 cv
ef
412.487 267.77 mo
412.487 265.7 410.807 264.02 408.737 264.02 cv
406.667 264.02 404.987 265.7 404.987 267.77 cv
404.987 269.84 406.667 271.52 408.737 271.52 cv
410.807 271.52 412.487 269.84 412.487 267.77 cv
ef
405.767 265.25 mo
405.767 263.18 404.086 261.5 402.017 261.5 cv
399.947 261.5 398.267 263.18 398.267 265.25 cv
398.267 267.32 399.947 269 402.017 269 cv
404.086 269 405.767 267.32 405.767 265.25 cv
ef
399.046 261.41 mo
399.046 259.34 397.367 257.66 395.296 257.66 cv
393.227 257.66 391.546 259.34 391.546 261.41 cv
391.546 263.48 393.227 265.16 395.296 265.16 cv
397.367 265.16 399.046 263.48 399.046 261.41 cv
ef
392.327 258.53 mo
392.327 256.46 390.647 254.78 388.577 254.78 cv
386.506 254.78 384.827 256.46 384.827 258.53 cv
384.827 260.6 386.506 262.28 388.577 262.28 cv
390.647 262.28 392.327 260.6 392.327 258.53 cv
ef
385.607 253.97 mo
385.607 251.9 383.926 250.22 381.857 250.22 cv
379.787 250.22 378.107 251.9 378.107 253.97 cv
378.107 256.04 379.787 257.72 381.857 257.72 cv
383.926 257.72 385.607 256.04 385.607 253.97 cv
ef
378.886 249.41 mo
378.886 247.34 377.207 245.66 375.136 245.66 cv
373.067 245.66 371.386 247.34 371.386 249.41 cv
371.386 251.48 373.067 253.16 375.136 253.16 cv
377.207 253.16 378.886 251.48 378.886 249.41 cv
ef
372.167 242.45 mo
372.167 240.38 370.487 238.7 368.417 238.7 cv
366.346 238.7 364.667 240.38 364.667 242.45 cv
364.667 244.52 366.346 246.2 368.417 246.2 cv
370.487 246.2 372.167 244.52 372.167 242.45 cv
ef
365.327 235.97 mo
365.327 233.9 363.647 232.22 361.577 232.22 cv
359.506 232.22 357.827 233.9 357.827 235.97 cv
357.827 238.04 359.506 239.72 361.577 239.72 cv
363.647 239.72 365.327 238.04 365.327 235.97 cv
ef
358.487 228.53 mo
358.487 226.46 356.807 224.78 354.737 224.78 cv
352.667 224.78 350.987 226.46 350.987 228.53 cv
350.987 230.6 352.667 232.28 354.737 232.28 cv
356.807 232.28 358.487 230.6 358.487 228.53 cv
ef
351.767 221.81 mo
351.767 219.74 350.086 218.06 348.017 218.06 cv
345.947 218.06 344.267 219.74 344.267 221.81 cv
344.267 223.88 345.947 225.56 348.017 225.56 cv
350.086 225.56 351.767 223.88 351.767 221.81 cv
ef
345.046 210.29 mo
345.046 208.22 343.367 206.54 341.296 206.54 cv
339.227 206.54 337.546 208.22 337.546 210.29 cv
337.546 212.36 339.227 214.04 341.296 214.04 cv
343.367 214.04 345.046 212.36 345.046 210.29 cv
ef
338.327 202.25 mo
338.327 200.18 336.647 198.5 334.577 198.5 cv
332.506 198.5 330.827 200.18 330.827 202.25 cv
330.827 204.32 332.506 206 334.577 206 cv
336.647 206 338.327 204.32 338.327 202.25 cv
ef
331.607 228.05 mo
331.607 225.98 329.926 224.3 327.857 224.3 cv
325.787 224.3 324.107 225.98 324.107 228.05 cv
324.107 230.12 325.787 231.8 327.857 231.8 cv
329.926 231.8 331.607 230.12 331.607 228.05 cv
ef
1.5 lw
461.577 8.5 mo
459.327 8.5 li
463.577 16.25 mo
459.327 16.25 li
461.577 162.75 mo
459.327 162.75 li
461.577 155 mo
459.327 155 li
461.577 147.25 mo
459.327 147.25 li
463.577 139.5 mo
459.327 139.5 li
463.577 16.25 mo
459.327 16.25 li
461.577 24 mo
459.327 24 li
461.577 31.5 mo
459.327 31.5 li
461.577 39.25 mo
459.327 39.25 li
463.577 47 mo
459.327 47 li
461.577 54.75 mo
459.327 54.75 li
461.577 62.5 mo
459.327 62.5 li
461.577 70.25 mo
459.327 70.25 li
463.577 78 mo
459.327 78 li
461.577 85.5 mo
459.327 85.5 li
461.577 93.25 mo
459.327 93.25 li
461.577 101 mo
459.327 101 li
463.577 108.75 mo
459.327 108.75 li
461.577 116.5 mo
459.327 116.5 li
461.577 124.25 mo
459.327 124.25 li
461.577 132 mo
459.327 132 li
463.577 139.5 mo
459.327 139.5 li
459.327 165.75 mo
459.327 .75 li
594.327 161 mo
594.327 165.75 li
590.827 163.25 mo
590.827 165.75 li
587.577 163.25 mo
587.577 165.75 li
584.327 163.25 mo
584.327 165.75 li
580.827 161 mo
580.827 165.75 li
577.577 163.25 mo
577.577 165.75 li
574.077 163.25 mo
574.077 165.75 li
570.827 163.25 mo
570.827 165.75 li
567.327 161 mo
567.327 165.75 li
564.077 163.25 mo
564.077 165.75 li
560.577 163.25 mo
560.577 165.75 li
557.327 163.25 mo
557.327 165.75 li
553.827 161 mo
553.827 165.75 li
550.577 163.25 mo
550.577 165.75 li
547.077 163.25 mo
547.077 165.75 li
543.827 163.25 mo
543.827 165.75 li
540.327 161 mo
540.327 165.75 li
537.077 163.25 mo
537.077 165.75 li
533.577 163.25 mo
533.577 165.75 li
530.327 163.25 mo
530.327 165.75 li
526.827 161 mo
526.827 165.75 li
523.577 163.25 mo
523.577 165.75 li
520.077 163.25 mo
520.077 165.75 li
516.827 163.25 mo
516.827 165.75 li
513.327 161 mo
513.327 165.75 li
510.077 163.25 mo
510.077 165.75 li
506.577 163.25 mo
506.577 165.75 li
503.327 163.25 mo
503.327 165.75 li
499.827 161 mo
499.827 165.75 li
496.577 163.25 mo
496.577 165.75 li
493.077 163.25 mo
493.077 165.75 li
489.827 163.25 mo
489.827 165.75 li
486.327 161 mo
486.327 165.75 li
483.077 163.25 mo
483.077 165.75 li
479.577 163.25 mo
479.577 165.75 li
476.327 163.25 mo
476.327 165.75 li
472.827 161 mo
472.827 165.75 li
469.577 163.25 mo
469.577 165.75 li
466.077 163.25 mo
466.077 165.75 li
462.827 163.25 mo
462.827 165.75 li
459.327 161 mo
459.327 165.75 li
459.327 165.75 mo
594.327 165.75 li
459.327 165.75 mo
459.327 .75 li
594.327 .75 li
594.327 165.75 li
459.327 165.75 li
cp
0 0 0 rgb
@
594.652 108.77 mo
594.652 106.631 592.916 104.895 590.777 104.895 cv
588.637 104.895 586.902 106.631 586.902 108.77 cv
586.902 110.909 588.637 112.645 590.777 112.645 cv
592.916 112.645 594.652 110.909 594.652 108.77 cv
1 0 0 rgb
ef
588.171 108.17 mo
588.171 106.031 586.436 104.295 584.296 104.295 cv
582.158 104.295 580.421 106.031 580.421 108.17 cv
580.421 110.309 582.158 112.045 584.296 112.045 cv
586.436 112.045 588.171 110.309 588.171 108.17 cv
ef
581.452 107.21 mo
581.452 105.071 579.715 103.335 577.577 103.335 cv
575.438 103.335 573.702 105.071 573.702 107.21 cv
573.702 109.349 575.438 111.085 577.577 111.085 cv
579.715 111.085 581.452 109.349 581.452 107.21 cv
ef
574.732 106.01 mo
574.732 103.871 572.996 102.135 570.857 102.135 cv
568.717 102.135 566.982 103.871 566.982 106.01 cv
566.982 108.149 568.717 109.885 570.857 109.885 cv
572.996 109.885 574.732 108.149 574.732 106.01 cv
ef
568.011 105.29 mo
568.011 103.151 566.276 101.415 564.136 101.415 cv
561.998 101.415 560.261 103.151 560.261 105.29 cv
560.261 107.429 561.998 109.165 564.136 109.165 cv
566.276 109.165 568.011 107.429 568.011 105.29 cv
ef
561.171 103.49 mo
561.171 101.351 559.436 99.6152 557.296 99.6152 cv
555.158 99.6152 553.421 101.351 553.421 103.49 cv
553.421 105.629 555.158 107.365 557.296 107.365 cv
559.436 107.365 561.171 105.629 561.171 103.49 cv
ef
554.452 101.45 mo
554.452 99.311 552.715 97.5752 550.577 97.5752 cv
548.438 97.5752 546.702 99.311 546.702 101.45 cv
546.702 103.589 548.438 105.325 550.577 105.325 cv
552.715 105.325 554.452 103.589 554.452 101.45 cv
ef
547.732 100.25 mo
547.732 98.1108 545.996 96.375 543.857 96.375 cv
541.717 96.375 539.982 98.1108 539.982 100.25 cv
539.982 102.389 541.717 104.125 543.857 104.125 cv
545.996 104.125 547.732 102.389 547.732 100.25 cv
ef
540.892 96.5298 mo
540.892 94.3911 539.156 92.6548 537.017 92.6548 cv
534.877 92.6548 533.142 94.3911 533.142 96.5298 cv
533.142 98.6689 534.877 100.405 537.017 100.405 cv
539.156 100.405 540.892 98.6689 540.892 96.5298 cv
ef
534.171 93.0498 mo
534.171 90.9111 532.436 89.1748 530.296 89.1748 cv
528.158 89.1748 526.421 90.9111 526.421 93.0498 cv
526.421 95.189 528.158 96.9248 530.296 96.9248 cv
532.436 96.9248 534.171 95.189 534.171 93.0498 cv
ef
527.452 88.4902 mo
527.452 86.3511 525.715 84.6152 523.577 84.6152 cv
521.438 84.6152 519.702 86.3511 519.702 88.4902 cv
519.702 90.6289 521.438 92.3652 523.577 92.3652 cv
525.715 92.3652 527.452 90.6289 527.452 88.4902 cv
ef
520.732 83.6899 mo
520.732 81.5508 518.996 79.8149 516.857 79.8149 cv
514.717 79.8149 512.982 81.5508 512.982 83.6899 cv
512.982 85.8291 514.717 87.5649 516.857 87.5649 cv
518.996 87.5649 520.732 85.8291 520.732 83.6899 cv
ef
514.011 78.5298 mo
514.011 76.3911 512.276 74.6548 510.136 74.6548 cv
507.998 74.6548 506.261 76.3911 506.261 78.5298 cv
506.261 80.6689 507.998 82.4048 510.136 82.4048 cv
512.276 82.4048 514.011 80.6689 514.011 78.5298 cv
ef
507.171 71.6899 mo
507.171 69.5508 505.436 67.8149 503.296 67.8149 cv
501.158 67.8149 499.421 69.5508 499.421 71.6899 cv
499.421 73.8291 501.158 75.5649 503.296 75.5649 cv
505.436 75.5649 507.171 73.8291 507.171 71.6899 cv
ef
500.452 64.73 mo
500.452 62.5908 498.715 60.855 496.577 60.855 cv
494.438 60.855 492.702 62.5908 492.702 64.73 cv
492.702 66.8691 494.438 68.605 496.577 68.605 cv
498.715 68.605 500.452 66.8691 500.452 64.73 cv
ef
493.732 57.77 mo
493.732 55.6309 491.996 53.895 489.857 53.895 cv
487.717 53.895 485.982 55.6309 485.982 57.77 cv
485.982 59.9092 487.717 61.645 489.857 61.645 cv
491.996 61.645 493.732 59.9092 493.732 57.77 cv
ef
486.892 48.77 mo
486.892 46.6309 485.156 44.895 483.017 44.895 cv
480.877 44.895 479.142 46.6309 479.142 48.77 cv
479.142 50.9092 480.877 52.645 483.017 52.645 cv
485.156 52.645 486.892 50.9092 486.892 48.77 cv
ef
480.171 40.0098 mo
480.171 37.8711 478.436 36.1348 476.296 36.1348 cv
474.158 36.1348 472.421 37.8711 472.421 40.0098 cv
472.421 42.1489 474.158 43.8848 476.296 43.8848 cv
478.436 43.8848 480.171 42.1489 480.171 40.0098 cv
ef
473.452 33.0498 mo
473.452 30.9111 471.715 29.1748 469.577 29.1748 cv
467.438 29.1748 465.702 30.9111 465.702 33.0498 cv
465.702 35.189 467.438 36.9248 469.577 36.9248 cv
471.715 36.9248 473.452 35.189 473.452 33.0498 cv
ef
466.732 21.5298 mo
466.732 19.3911 464.996 17.6548 462.857 17.6548 cv
460.717 17.6548 458.982 19.3911 458.982 21.5298 cv
458.982 23.6689 460.717 25.4048 462.857 25.4048 cv
464.996 25.4048 466.732 23.6689 466.732 21.5298 cv
ef
1 lw
[3 3 ] 0 dsh
459.327 108.75 mo
594.327 108.75 li
.501961 .501961 .501961 rgb
@
[] 0 dsh
466.732 55.0098 mo
466.732 52.8711 464.996 51.1348 462.857 51.1348 cv
460.717 51.1348 458.982 52.8711 458.982 55.0098 cv
458.982 57.1489 460.717 58.8848 462.857 58.8848 cv
464.996 58.8848 466.732 57.1489 466.732 55.0098 cv
473.452 57.5298 mo
473.452 55.3911 471.715 53.6548 469.577 53.6548 cv
467.438 53.6548 465.702 55.3911 465.702 57.5298 cv
465.702 59.6689 467.438 61.4048 469.577 61.4048 cv
471.715 61.4048 473.452 59.6689 473.452 57.5298 cv
480.171 58.9697 mo
480.171 56.8311 478.436 55.0947 476.296 55.0947 cv
474.158 55.0947 472.421 56.8311 472.421 58.9697 cv
472.421 61.1089 474.158 62.8447 476.296 62.8447 cv
478.436 62.8447 480.171 61.1089 480.171 58.9697 cv
486.892 62.5698 mo
486.892 60.4312 485.156 58.6948 483.017 58.6948 cv
480.877 58.6948 479.142 60.4312 479.142 62.5698 cv
479.142 64.709 480.877 66.4448 483.017 66.4448 cv
485.156 66.4448 486.892 64.709 486.892 62.5698 cv
493.732 64.73 mo
493.732 62.5908 491.996 60.855 489.857 60.855 cv
487.717 60.855 485.982 62.5908 485.982 64.73 cv
485.982 66.8691 487.717 68.605 489.857 68.605 cv
491.996 68.605 493.732 66.8691 493.732 64.73 cv
500.452 67.25 mo
500.452 65.1108 498.715 63.375 496.577 63.375 cv
494.438 63.375 492.702 65.1108 492.702 67.25 cv
492.702 69.3892 494.438 71.125 496.577 71.125 cv
498.715 71.125 500.452 69.3892 500.452 67.25 cv
507.171 70.9697 mo
507.171 68.8311 505.436 67.0947 503.296 67.0947 cv
501.158 67.0947 499.421 68.8311 499.421 70.9697 cv
499.421 73.1089 501.158 74.8447 503.296 74.8447 cv
505.436 74.8447 507.171 73.1089 507.171 70.9697 cv
514.011 73.9697 mo
514.011 71.8311 512.276 70.0947 510.136 70.0947 cv
507.998 70.0947 506.261 71.8311 506.261 73.9697 cv
506.261 76.1089 507.998 77.8447 510.136 77.8447 cv
512.276 77.8447 514.011 76.1089 514.011 73.9697 cv
520.732 75.77 mo
520.732 73.6309 518.996 71.895 516.857 71.895 cv
514.717 71.895 512.982 73.6309 512.982 75.77 cv
512.982 77.9092 514.717 79.645 516.857 79.645 cv
518.996 79.645 520.732 77.9092 520.732 75.77 cv
527.452 79.25 mo
527.452 77.1108 525.715 75.375 523.577 75.375 cv
521.438 75.375 519.702 77.1108 519.702 79.25 cv
519.702 81.3892 521.438 83.125 523.577 83.125 cv
525.715 83.125 527.452 81.3892 527.452 79.25 cv
534.171 82.25 mo
534.171 80.1108 532.436 78.375 530.296 78.375 cv
528.158 78.375 526.421 80.1108 526.421 82.25 cv
526.421 84.3892 528.158 86.125 530.296 86.125 cv
532.436 86.125 534.171 84.3892 534.171 82.25 cv
540.892 85.25 mo
540.892 83.1108 539.156 81.375 537.017 81.375 cv
534.877 81.375 533.142 83.1108 533.142 85.25 cv
533.142 87.3892 534.877 89.125 537.017 89.125 cv
539.156 89.125 540.892 87.3892 540.892 85.25 cv
547.732 88.25 mo
547.732 86.1108 545.996 84.375 543.857 84.375 cv
541.717 84.375 539.982 86.1108 539.982 88.25 cv
539.982 90.3892 541.717 92.125 543.857 92.125 cv
545.996 92.125 547.732 90.3892 547.732 88.25 cv
554.452 91.73 mo
554.452 89.5908 552.715 87.855 550.577 87.855 cv
548.438 87.855 546.702 89.5908 546.702 91.73 cv
546.702 93.8691 548.438 95.605 550.577 95.605 cv
552.715 95.605 554.452 93.8691 554.452 91.73 cv
561.171 93.5298 mo
561.171 91.3911 559.436 89.6548 557.296 89.6548 cv
555.158 89.6548 553.421 91.3911 553.421 93.5298 cv
553.421 95.6689 555.158 97.4048 557.296 97.4048 cv
559.436 97.4048 561.171 95.6689 561.171 93.5298 cv
568.011 96.77 mo
568.011 94.6309 566.276 92.895 564.136 92.895 cv
561.998 92.895 560.261 94.6309 560.261 96.77 cv
560.261 98.9092 561.998 100.645 564.136 100.645 cv
566.276 100.645 568.011 98.9092 568.011 96.77 cv
574.732 100.01 mo
574.732 97.8711 572.996 96.1348 570.857 96.1348 cv
568.717 96.1348 566.982 97.8711 566.982 100.01 cv
566.982 102.149 568.717 103.885 570.857 103.885 cv
572.996 103.885 574.732 102.149 574.732 100.01 cv
581.452 102.77 mo
581.452 100.631 579.715 98.895 577.577 98.895 cv
575.438 98.895 573.702 100.631 573.702 102.77 cv
573.702 104.909 575.438 106.645 577.577 106.645 cv
579.715 106.645 581.452 104.909 581.452 102.77 cv
588.171 105.53 mo
588.171 103.391 586.436 101.655 584.296 101.655 cv
582.158 101.655 580.421 103.391 580.421 105.53 cv
580.421 107.669 582.158 109.405 584.296 109.405 cv
586.436 109.405 588.171 107.669 588.171 105.53 cv
594.652 107.69 mo
594.652 105.551 592.916 103.815 590.777 103.815 cv
588.637 103.815 586.902 105.551 586.902 107.69 cv
586.902 109.829 588.637 111.565 590.777 111.565 cv
592.916 111.565 594.652 109.829 594.652 107.69 cv
0 .701961 0 rgb
@
590.827 106.844 mo
587.92 106.844 li
587.92 112.656 li
593.733 112.656 li
593.733 106.844 li
590.827 106.844 li
cp
0 0 1 rgb
ef
584.327 108.844 mo
581.42 108.844 li
581.42 114.656 li
587.233 114.656 li
587.233 108.844 li
584.327 108.844 li
cp
ef
577.577 110.344 mo
574.67 110.344 li
574.67 116.156 li
580.483 116.156 li
580.483 110.344 li
577.577 110.344 li
cp
ef
570.827 111.344 mo
567.92 111.344 li
567.92 117.156 li
573.733 117.156 li
573.733 111.344 li
570.827 111.344 li
cp
ef
564.077 110.594 mo
561.17 110.594 li
561.17 116.406 li
566.983 116.406 li
566.983 110.594 li
564.077 110.594 li
cp
ef
557.327 110.094 mo
554.42 110.094 li
554.42 115.906 li
560.233 115.906 li
560.233 110.094 li
557.327 110.094 li
cp
ef
550.577 109.094 mo
547.67 109.094 li
547.67 114.906 li
553.483 114.906 li
553.483 109.094 li
550.577 109.094 li
cp
ef
543.827 106.844 mo
540.92 106.844 li
540.92 112.656 li
546.733 112.656 li
546.733 106.844 li
543.827 106.844 li
cp
ef
537.077 106.594 mo
534.17 106.594 li
534.17 112.406 li
539.983 112.406 li
539.983 106.594 li
537.077 106.594 li
cp
ef
530.327 104.844 mo
527.42 104.844 li
527.42 110.656 li
533.233 110.656 li
533.233 104.844 li
530.327 104.844 li
cp
ef
523.577 103.844 mo
520.67 103.844 li
520.67 109.656 li
526.483 109.656 li
526.483 103.844 li
523.577 103.844 li
cp
ef
516.827 103.844 mo
513.92 103.844 li
513.92 109.656 li
519.733 109.656 li
519.733 103.844 li
516.827 103.844 li
cp
ef
510.077 101.844 mo
507.17 101.844 li
507.17 107.656 li
512.983 107.656 li
512.983 101.844 li
510.077 101.844 li
cp
ef
503.327 101.594 mo
500.42 101.594 li
500.42 107.406 li
506.233 107.406 li
506.233 101.594 li
503.327 101.594 li
cp
ef
496.577 102.094 mo
493.67 102.094 li
493.67 107.906 li
499.483 107.906 li
499.483 102.094 li
496.577 102.094 li
cp
ef
489.827 101.094 mo
486.92 101.094 li
486.92 106.906 li
492.733 106.906 li
492.733 101.094 li
489.827 101.094 li
cp
ef
483.077 101.094 mo
480.17 101.094 li
480.17 106.906 li
485.983 106.906 li
485.983 101.094 li
483.077 101.094 li
cp
ef
476.327 103.844 mo
473.42 103.844 li
473.42 109.656 li
479.233 109.656 li
479.233 103.844 li
476.327 103.844 li
cp
ef
469.577 104.594 mo
466.67 104.594 li
466.67 110.406 li
472.483 110.406 li
472.483 104.594 li
469.577 104.594 li
cp
ef
462.827 107.344 mo
459.92 107.344 li
459.92 113.156 li
465.733 113.156 li
465.733 107.344 li
462.827 107.344 li
cp
ef
594.652 108.77 mo
594.652 106.631 592.916 104.895 590.777 104.895 cv
588.637 104.895 586.902 106.631 586.902 108.77 cv
586.902 110.909 588.637 112.645 590.777 112.645 cv
592.916 112.645 594.652 110.909 594.652 108.77 cv
1 0 0 rgb
ef
588.171 108.17 mo
588.171 106.031 586.436 104.295 584.296 104.295 cv
582.158 104.295 580.421 106.031 580.421 108.17 cv
580.421 110.309 582.158 112.045 584.296 112.045 cv
586.436 112.045 588.171 110.309 588.171 108.17 cv
ef
581.452 107.21 mo
581.452 105.071 579.715 103.335 577.577 103.335 cv
575.438 103.335 573.702 105.071 573.702 107.21 cv
573.702 109.349 575.438 111.085 577.577 111.085 cv
579.715 111.085 581.452 109.349 581.452 107.21 cv
ef
574.732 106.01 mo
574.732 103.871 572.996 102.135 570.857 102.135 cv
568.717 102.135 566.982 103.871 566.982 106.01 cv
566.982 108.149 568.717 109.885 570.857 109.885 cv
572.996 109.885 574.732 108.149 574.732 106.01 cv
ef
568.011 105.29 mo
568.011 103.151 566.276 101.415 564.136 101.415 cv
561.998 101.415 560.261 103.151 560.261 105.29 cv
560.261 107.429 561.998 109.165 564.136 109.165 cv
566.276 109.165 568.011 107.429 568.011 105.29 cv
ef
561.171 103.49 mo
561.171 101.351 559.436 99.6152 557.296 99.6152 cv
555.158 99.6152 553.421 101.351 553.421 103.49 cv
553.421 105.629 555.158 107.365 557.296 107.365 cv
559.436 107.365 561.171 105.629 561.171 103.49 cv
ef
554.452 101.45 mo
554.452 99.311 552.715 97.5752 550.577 97.5752 cv
548.438 97.5752 546.702 99.311 546.702 101.45 cv
546.702 103.589 548.438 105.325 550.577 105.325 cv
552.715 105.325 554.452 103.589 554.452 101.45 cv
ef
547.732 100.25 mo
547.732 98.1108 545.996 96.375 543.857 96.375 cv
541.717 96.375 539.982 98.1108 539.982 100.25 cv
539.982 102.389 541.717 104.125 543.857 104.125 cv
545.996 104.125 547.732 102.389 547.732 100.25 cv
ef
540.892 96.5298 mo
540.892 94.3911 539.156 92.6548 537.017 92.6548 cv
534.877 92.6548 533.142 94.3911 533.142 96.5298 cv
533.142 98.6689 534.877 100.405 537.017 100.405 cv
539.156 100.405 540.892 98.6689 540.892 96.5298 cv
ef
534.171 93.0498 mo
534.171 90.9111 532.436 89.1748 530.296 89.1748 cv
528.158 89.1748 526.421 90.9111 526.421 93.0498 cv
526.421 95.189 528.158 96.9248 530.296 96.9248 cv
532.436 96.9248 534.171 95.189 534.171 93.0498 cv
ef
527.452 88.4902 mo
527.452 86.3511 525.715 84.6152 523.577 84.6152 cv
521.438 84.6152 519.702 86.3511 519.702 88.4902 cv
519.702 90.6289 521.438 92.3652 523.577 92.3652 cv
525.715 92.3652 527.452 90.6289 527.452 88.4902 cv
ef
520.732 83.6899 mo
520.732 81.5508 518.996 79.8149 516.857 79.8149 cv
514.717 79.8149 512.982 81.5508 512.982 83.6899 cv
512.982 85.8291 514.717 87.5649 516.857 87.5649 cv
518.996 87.5649 520.732 85.8291 520.732 83.6899 cv
ef
514.011 78.5298 mo
514.011 76.3911 512.276 74.6548 510.136 74.6548 cv
507.998 74.6548 506.261 76.3911 506.261 78.5298 cv
506.261 80.6689 507.998 82.4048 510.136 82.4048 cv
512.276 82.4048 514.011 80.6689 514.011 78.5298 cv
ef
507.171 71.6899 mo
507.171 69.5508 505.436 67.8149 503.296 67.8149 cv
501.158 67.8149 499.421 69.5508 499.421 71.6899 cv
499.421 73.8291 501.158 75.5649 503.296 75.5649 cv
505.436 75.5649 507.171 73.8291 507.171 71.6899 cv
ef
500.452 64.73 mo
500.452 62.5908 498.715 60.855 496.577 60.855 cv
494.438 60.855 492.702 62.5908 492.702 64.73 cv
492.702 66.8691 494.438 68.605 496.577 68.605 cv
498.715 68.605 500.452 66.8691 500.452 64.73 cv
ef
493.732 57.77 mo
493.732 55.6309 491.996 53.895 489.857 53.895 cv
487.717 53.895 485.982 55.6309 485.982 57.77 cv
485.982 59.9092 487.717 61.645 489.857 61.645 cv
491.996 61.645 493.732 59.9092 493.732 57.77 cv
ef
486.892 48.77 mo
486.892 46.6309 485.156 44.895 483.017 44.895 cv
480.877 44.895 479.142 46.6309 479.142 48.77 cv
479.142 50.9092 480.877 52.645 483.017 52.645 cv
485.156 52.645 486.892 50.9092 486.892 48.77 cv
ef
480.171 40.0098 mo
480.171 37.8711 478.436 36.1348 476.296 36.1348 cv
474.158 36.1348 472.421 37.8711 472.421 40.0098 cv
472.421 42.1489 474.158 43.8848 476.296 43.8848 cv
478.436 43.8848 480.171 42.1489 480.171 40.0098 cv
ef
473.452 33.0498 mo
473.452 30.9111 471.715 29.1748 469.577 29.1748 cv
467.438 29.1748 465.702 30.9111 465.702 33.0498 cv
465.702 35.189 467.438 36.9248 469.577 36.9248 cv
471.715 36.9248 473.452 35.189 473.452 33.0498 cv
ef
466.732 21.5298 mo
466.732 19.3911 464.996 17.6548 462.857 17.6548 cv
460.717 17.6548 458.982 19.3911 458.982 21.5298 cv
458.982 23.6689 460.717 25.4048 462.857 25.4048 cv
464.996 25.4048 466.732 23.6689 466.732 21.5298 cv
ef
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 46 /period putdup 48 /zero putdup 50 /two putdup 52 /four putdup 54 /six putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFJBGH+Helvetica /Helvetica findfont ct_VMDictPut/JFJBGH+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]JFJBGH+Helvetica nfJFJBGH+Helvetica*1 [18 0 0 -18 0 0 ]msf21.042 144.5 mo(-0.2)sh39.7134 113.825 mo(0)sh26.3701 83.1504 mo(0.2)sh26.3701 52.4746 mo(0.4)sh26.3701 21.7998 mo(0.6)sh0 0 0 rgb
%ADOBeginSubsetFont: Helvetica-Oblique Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica-Oblique def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 66 /B putdef/FontBBox {-933 -481 1571 1138} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/B <1C60D8A8C9B64EDFF440682FFC01E299D663D9838F44C423AD31E8830E9B9DFDE2E33A579860EF902CD85C732710640334D7DD7A60DD2D797CA5FBEEE3144F99101770B56556F726D96605645D2D2FED6F4006F22362626E1BE69695D9A3609F6810B5F2B0C6E44C45A5DA03F15B439658B1C3DD396532CFC43BBE3DA409DF2951D580E2B9AE17E7F667CC2A65BD736E3D697220A11EBE3307C2E01E9DC8> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFJBGI+Helvetica-Oblique /Helvetica-Oblique findfont ct_VMDictPut/JFJBGI+Helvetica-Oblique*1 [66{/.notdef}rp /B 189{/.notdef}rp]JFJBGI+Helvetica-Oblique nfJFJBGI+Helvetica-Oblique*1 [0 -20 -20 0 0 0 ]msf17.5747 190.698 mo(B)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginJFJBGH+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-systemdict /gcheck known {setglobal} if end {end} ifendJFJBGH+Helvetica /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putpop%ADOEndSubsetFont
/JFJBGH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]JFJBGH+Helvetica nfJFJBGH+Helvetica*1 [0 -20 -20 0 0 0 ]msf17.5747 177.358 mo(\(    \))[-6.66016 -5.55664 -5.55664 -5.55664 -5.55664 0 ]ysh.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 104 /eta putdef/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7A73DB682175B0E07AC8369CB0493D2376E9AF29A65D14A7A15C9916673AED9A3> |-/eta <1C60D8A8C9B7C054197DE88F84DDA7203D636872FBC04F1D0CB427F089848F02580A1FCEB1D5540E174E28813989C9ED36B390D0CAEA7E974195C3050C0EC7A99328B5C0A09B0F3DB1FC3D34D9D31CF1FCC6FE6575A9FA5E6BE6152829AF27CC230AD085101D66E886A9129C221A95B959099642B0CD747C34535F22D3B0782D572A54A23A5E86A792C719FFD717BAF6E7D55B80951915FE373858E67FC3BF43C1BF3845E6351456AE6B80B4F74072417B47B428BFAF112C72485058AE7E63973625CAAC8808D66AF3429326F8666FC032C40076826A43D9CD81D150193CF4E79069E427970B82C42435F10F467944C36F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFJBGJ+Symbol /Symbol findfont ct_VMDictPut/JFJBGJ+Symbol*1 [104{/.notdef}rp /eta 151{/.notdef}rp]JFJBGJ+Symbol nfJFJBGJ+Symbol*1 [0 -19.5327 -19.5327 -4.29718 0 0 ]msf17.5142 160.293 mo(h)sh0 0 0 rgb
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginJFJBGJ+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/increment <1C60D8A8C9B7D7E8F71679DC4D9CE3B4AB74665DBC540207F65FC1CA529169A3C56561E8749B> |-systemdict /gcheck known {setglobal} if end {end} ifendJFJBGJ+Symbol /Encoding getdup 68 /increment putpop%ADOEndSubsetFont
/JFJBGJ+Symbol*1 [68{/.notdef}rp /increment 35{/.notdef}rp /eta 151{/.notdef}rp]JFJBGJ+Symbol nfJFJBGJ+Symbol*1 [0 -20 -20 0 0 0 ]msf17.6001 169.503 mo(D)sh.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginJFJBGH+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B59F85E959DC9E62959B5B049387399C5A88EDF2D5DFBD776DAFCB889B62AC98B872299D239B948311090C1C069798A7F20A8D7BE29B8C384DB55F663943C1B42044C054991C856F3C3AA085C2B4902C8215DC2701EFD5FA664B5C9C44640813B5AC440B37B70CE58EFC65A9AFC0BCC84F3CDC68795E4995966F74639212F5372957A607AD4B6B94BBB7C36A3A6EF325381FE12C0468B5DD1F216D01C174551A50AC78A5328CDA24DAC0484DFF3993D32A7CA064F169906996AA1E2F6A555998F55A1AFCE2776BEE589EC3162F968A180A5713C4537EF11B8529CE22F8373BC7632472323D1F8491B48E948870255C9E830736EE70F30EE309DFBBB8294CCC2BB5ECB81667BEB60155> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/seven <1C60D8A8C9B7EF326C86E2C8FFDAFAAAF8B2EE45CDE12ADFFACC9341D807009D1D241E6029AF890199C52728BBB0F3ADB8945AB4753C3621AAE632A8EC4FD7F79CCD78EF> |-/nine <1C60D8A8C9B7EF326B464DF43714564059769E71FFFC685FC18F48C77D53AC88FCBBC12F494C4F63EED0BC4E888DFF584BE7D2D816586B9A4264CD850BFF6D2740D48815051A0D66B2C6D52B7F71CA6A6822ACB78F611F031D0F31B29F8F7C82DE8795DAD0A78F20A0C158D57307DA2BB022E8173A55705FD29D68A57A980A4A8A50AA38F194766F67D892E4FFF95162BD634B3243B2EC97981B62535F84C02C407EE586AAFD00BF4926CA361322725073A4D1FB7F2047C32550A5DE15> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/M <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/V <1C60D8A8C9B64EDFA60949676B75C625C6948873966B83A549B84A6BD5D6EE9C83058CE085EB61> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/f <1C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58ED82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |-/h <1C60D8A8C9B7EF3217E3BC2FA8B1DA462FB5094608F57CE7723860E586F183A8CEF3068A0C010301729338C182E1C8129546DF528AA710511DF02DFE7ACA98F8F6531E02F7C3E3DBAF3320F3D602AE65A66CA41E6984> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-/x <1C60D8A8C9B7A73DB974843DC052273B2236A049EB6E5FE1C55CD985D3062CB5B3D8A046808C9F7D76A5170CE8699B434328F999D97554357E6BC34F0469> |-systemdict /gcheck known {setglobal} if end {end} ifendJFJBGH+Helvetica /Encoding getdup 37 /percent putdup 49 /one putdup 51 /three putdup 53 /five putdup 55 /seven putdup 57 /nine putdup 68 /D putdup 71 /G putdup 77 /M putdup 83 /S putdup 86 /V putdup 97 /a putdup 100 /d putdup 101 /e putdup 102 /f putdup 104 /h putdup 105 /i putdup 108 /l putdup 116 /t putdup 117 /u putdup 120 /x putpop%ADOEndSubsetFont
/JFJBGH+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 10{/.notdef}rp /D 2{/.notdef}rp /G 5{/.notdef}rp /M 5{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /f /.notdef /h /i 2{/.notdef}rp /l 7{/.notdef}rp /t /u 2{/.notdef}rp /x 135{/.notdef}rp]JFJBGH+Helvetica nfJFJBGH+Helvetica*1 [18 0 0 -18 0 0 ]msf21.042 309.725 mo(-0.2)sh39.7134 279.051 mo(0)sh26.3701 248.375 mo(0.2)sh26.3701 217.699 mo(0.4)sh26.3701 187.025 mo(0.6)sh496.203 220.26 mo(0-5%)sh510.392 246.181 mo(Data)sh510.392 267.781 mo(Mixed)sh510.392 289.381 mo(Shuffled)sh108.297 18.5 mo(7.7 GeV)sh236.097 18.5 mo(11.5 GeV)sh376.379 18.5 mo(19.6 GeV)sh516.42 18.5 mo(27 GeV)sh108.297 188.06 mo(39 GeV)sh236.097 188.061 mo(62.4 GeV)sh376.379 188.06 mo(200 GeV)sh253.094 347.063 mo(1)sh320.401 347.063 mo(0)sh387.709 347.063 mo(1)shJFJBGJ+Symbol*1 [19.5327 0 4.29718 -19.5327 0 0 ]msf321.592 363.542 mo(h)sh0 0 0 rgb
JFJBGJ+Symbol*1 [20 0 0 -20 0 0 ]msf312.382 363.629 mo(D)sh.137255 .121569 .12549 rgb
JFJBGH+Helvetica*1 [18 0 0 -18 0 0 ]msf118.478 347.063 mo(1)sh185.786 347.063 mo(0)sh51.1704 347.063 mo(0)sh1.5 lw
461.543 173.699 mo
459.293 173.699 li
463.543 181.449 mo
459.293 181.449 li
461.543 327.949 mo
459.293 327.949 li
461.543 320.199 mo
459.293 320.199 li
461.543 312.449 mo
459.293 312.449 li
463.543 304.699 mo
459.293 304.699 li
463.543 181.449 mo
459.293 181.449 li
461.543 189.199 mo
459.293 189.199 li
461.543 196.699 mo
459.293 196.699 li
461.543 204.449 mo
459.293 204.449 li
463.543 212.199 mo
459.293 212.199 li
461.543 219.949 mo
459.293 219.949 li
461.543 227.699 mo
459.293 227.699 li
461.543 235.449 mo
459.293 235.449 li
463.543 243.199 mo
459.293 243.199 li
461.543 250.699 mo
459.293 250.699 li
461.543 258.449 mo
459.293 258.449 li
461.543 266.199 mo
459.293 266.199 li
463.543 273.949 mo
459.293 273.949 li
461.543 281.699 mo
459.293 281.699 li
461.543 289.449 mo
459.293 289.449 li
461.543 297.199 mo
459.293 297.199 li
463.543 304.699 mo
459.293 304.699 li
459.293 330.949 mo
459.293 165.95 li
594.293 326.199 mo
594.293 330.949 li
590.793 328.449 mo
590.793 330.949 li
587.543 328.449 mo
587.543 330.949 li
584.293 328.449 mo
584.293 330.949 li
580.793 326.199 mo
580.793 330.949 li
577.543 328.449 mo
577.543 330.949 li
574.043 328.449 mo
574.043 330.949 li
570.793 328.449 mo
570.793 330.949 li
567.293 326.199 mo
567.293 330.949 li
564.043 328.449 mo
564.043 330.949 li
560.543 328.449 mo
560.543 330.949 li
557.293 328.449 mo
557.293 330.949 li
553.793 326.199 mo
553.793 330.949 li
550.543 328.449 mo
550.543 330.949 li
547.043 328.449 mo
547.043 330.949 li
543.793 328.449 mo
543.793 330.949 li
540.293 326.199 mo
540.293 330.949 li
537.043 328.449 mo
537.043 330.949 li
533.543 328.449 mo
533.543 330.949 li
530.293 328.449 mo
530.293 330.949 li
526.793 326.199 mo
526.793 330.949 li
523.543 328.449 mo
523.543 330.949 li
520.043 328.449 mo
520.043 330.949 li
516.793 328.449 mo
516.793 330.949 li
513.293 326.199 mo
513.293 330.949 li
510.043 328.449 mo
510.043 330.949 li
506.543 328.449 mo
506.543 330.949 li
503.293 328.449 mo
503.293 330.949 li
499.793 326.199 mo
499.793 330.949 li
496.543 328.449 mo
496.543 330.949 li
493.043 328.449 mo
493.043 330.949 li
489.793 328.449 mo
489.793 330.949 li
486.293 326.199 mo
486.293 330.949 li
483.043 328.449 mo
483.043 330.949 li
479.543 328.449 mo
479.543 330.949 li
476.293 328.449 mo
476.293 330.949 li
472.793 326.199 mo
472.793 330.949 li
469.543 328.449 mo
469.543 330.949 li
466.043 328.449 mo
466.043 330.949 li
462.793 328.449 mo
462.793 330.949 li
459.293 326.199 mo
459.293 330.949 li
459.293 330.949 mo
594.293 330.949 li
459.293 330.949 mo
459.293 165.95 li
594.293 165.95 li
594.293 330.949 li
459.293 330.949 li
cp
0 0 0 rgb
@
.137255 .121569 .12549 rgb
JFJBGH+Helvetica*1 [18 0 0 -18 0 0 ]msf589.44 347.063 mo(2)sh454.824 347.063 mo(0)sh522.133 347.063 mo(1)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JFJBGJ+Symbol*1 uf/JFJBGJ+Symbol uf/Symbol uf/JFJBGH+Helvetica*1 uf/JFJBGH+Helvetica uf/Helvetica uf/JFJBGI+Helvetica-Oblique*1 uf/JFJBGI+Helvetica-Oblique uf/Helvetica-Oblique ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.4%%For: (Gary Westfall) ()%%Title: (balance_eta_hui.eps)%%CreationDate: 1/12/15 1:55 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&kB\U<djTN[J9q9[1JLUkdpO+'-J:A?Rp^7=1UFe;qq@+,c:o\'m.^JP1XC:HXfdgZV+OXbbi[^S[$`I'ZeY8H\DF.(@X`aX%kL54'!M.nK?8RIjY_=Ig%g7KgSL5&i,5P+ek(uPoi!$m9*s1mF[c>i*fGs5<G"`kcq<_oi*od%oTA`7H*R;HaTtX1$<nkC^\^bZ3%jLp.`2b26%9W\4;Nf3E=4E>K"gpPOEYs/iafB/^uBY39;gH=kHWs(5g!_2l4eAi@U!oK1,iDG[34[/Wck3qJ.Mq-n]ZlTfi>T\u7%nE3%Y%B4aU@faK!TAe+YrmMe`dNjiC5V(1`!5mS?jnNA:"GZs0^)Fq+EB'-!j'oXrZ.!+&m;>'4QNsNn)"[&<0gG?47BC^6iK6BH%&FbB9+akIKL4?b[FA";!e-_-!K4#a16%(!kUn2R)6i=>7re=Aj:'d#W5aFMj(]OSlKE[!Y!RP3=8`R0%aS'3Hl&,<NUI\5;:5BWu%cb>IDL9gt<8<!F=2/!H@)0#cf[9]?]\E!E6K)q(D1AjL)5/AWM[2lMdD*+\_mQ``;aFWUSH@I%M"qq[ST>Ck_&:=ZJaIpJ]^D(2a%#=;k78&24U_*$8h`GDf9e")Eh9B9R!c!A8kO&CI(s#j69s"WYcWhWtGa!7j_3t?K^?fgg.cVnZ^N5a$e^Kj4T+2G?*R/@EOMq)u?%4_$^O-fF[H:A:Rm`4Yurp.-/'X;.FiKtT9_p_Nsdn'+TC"::Y>]NGk0p?'E6A?f;I]uAt*F<nN&8&2Wf\&L8RH/%[)6`S6>61YT,%$PIEtF@H,f*HH"qpP0%LQiTsT2g&GYHBmF%9!GKO..@VEc%=PZ_7&#>n2g$(C:g=rDL$*.CtgPlPnV^?6o@,I9m,;+gNG?Bbm;`Z%!?EEkmhjF+HT2Z!$BF+2N$6eu8#Omp3-od9&lN*rpOY?T_p)`!!`UAk\cgA,hXPd`#;F9tkQU9o6GSlNV>A!%o5(kU#r2*bMr*/r%2*B**lqb7Dl*+K1:0]%+h`o'!]0;($et'3YrnWa$.02[c2?`rj*Zi>!(&Yp*(kUXZlp.isi#jE%^GfKYTCH[+7NVYT!TCKh0<f@h%_#dqZcFYe5,&]oO\&T4<4`]F.8cZ-0fYN[lG/H&nbu0afV4!>BVs)r'*na4PQb:6TrIYq)O;J"0^/-N22stnTa3!>E"_811BIqE?%m&)9mUh6uY,.FMKBVhs37c+b:SThXF"/a`R@.s!gT'ZY9#b#OHSW/@/K'a]W!h(1ngX?2-LsDLOZ"T9o3D4?]OmQD9,0^eoq\,T-%T@cV/<21A^W5aJ1N4VQeBN$M:Hn]F&d0.bEiNVhBhPMW/4WKZIhgr"%c%]`8+K-S\X_=8LIbN##jCu:GSrR2!DE#M^4!'"JFKHaM%TV:OtlN":]>lP-P;L/J&WT%O&Kk<VUhe1Ii:[NUV\Y$Q?"%lD!4t/`^p+]tI/b2<:rp5HaYqepW6I#+K_>NL[J+8Q4U5TH![K-*%%:L<mA%@Fl60LgsS4Ve?K!@n`Ydr5K)KY<;g'SqA$+.e"6duPCIrBLc76c1Q</;c_R"6A6W0jIEge#=/UI>po1muH0u:1GCM(BEG,%b&[PH)Y;P2`,)C(@Bkn1#X'RlJ>F(P%X6ibJ*:4WU>>sV!`kg5$doCt#akW82D[\g&,K\o'j/'>_#%"S%oHm'"#AF.5=04dHelLc%d=-Ld!fot7p9]2#9Xd&eG-W,#q@4(o5[s[&1""TB^Yk#UDaP9V+<8a:Ri2"H[dabB41c[rTXIEY:H\i!U9DeUl>IJp.BjPtf;W,8%S%jd0G/j^.rW7b.rd@?*e3V\f_p+:mUYf4qPm,P3oc]tB#FkTb"&ND&m%F@TMs6`;JO0Iq,7TH`a#Pj>Jabn.Yc4hCN`3]l_eY:+%F[bS:jQSAM\$k$+$Wd%YKhhZ,IYI1h4)i]s$_,k),1&=s\q(\30WP0=Y^k<q(r4&hB'B%6Y[ERG[hqa]OEf&[U7PZ-=@hp5%Vq)s%Ge_b%?llM-jr[uMXu0"X*nV;paN5uC`AYuULWAqtZ5A_>XsXob+.N>(BRk0&Dk7_7Jg8Wc]n>hTI<.U-&SN$%3K@9$=b%Zof_E>>%m8fPL(V^NVSj8q@p]i34SbH[t$siKo*sX(GCr)?]?\`D`n'ZKN$fF2^bYt.JVXo)MYt3Lh!KLDE'(SsC!msgi"?o3TYtt`&GZZ*J%&&DU,58FU$?i6U*9`His0b1?^s7$>AGm5@>_,#RH0qZ1[s8)9M-fF0K#&<o69Lh^&-Zj[-4f@4FM&lcT)Z3splU]r`=/WgKYJ\iS%pnQV]?;LZt\cFL0+sER#6UQ]aUB1#'kP+j^5er//R7P7d<dV#)R9h*r#O?tOEn-FQ*s1%0Gj#]SIAFE_icl.UouI*rcJhgrZ*'[.%]>7meA>N<,3;s>VN=n+Y7O2A*l4G=P+di:jrYY\Kr?qc<mOJqt.h%J+S[n3#^&uB*h\O<!*0PfuGG!ah"<Q6(oI^O<mjtc/m!u!!%gFPo+s%'j>M+5DZ#ac@?[m:F(oe#A4pfVN&_)<c(70-g.'GcJ[CA=\f,a[!_W;9!<+Z[q[J<ATU"`P^e#=JMdDhEF328^gN5Z256%e1WM]ki:W=&?FBj6/b4[W,E1SfNIjrcZCBEo4rd]@r^[^WW\XaJa"^Ko3D;.oNuc$LhJUG79&:Z'YMd<<or9Pbg$lDj.?Y`rgV=f%.pLr[5hu:Gr!':^BLP1f1l\cEa6/"?R3CoPqh1SB.u#E4^cDZ?"Ac!5!rb_M6I-LpEe`PlIKRS69#.PBc)bHfh!.9@-l`Qt6:srk%`.VkCo!*6feZQ=_Nma%2F>0NC(*AQn/;uZj[B:(iZc5kqI_\c2+=#h+j)?fOgIL5"6SoYPMq<RUmH/E0EYu]%R-I=P`X-4._q6kA%62@Z.Z5!=!&f^MPO=:%(_,)s$PX1>5[Tep8'hTI!g2`^Wg/J/eTQUC^n:uR)0*;q!N7ZZX1`"%ERL5HbTqR4$_IeCKWXNT&4V/$g%aDu3j=KV/0Su!A1A7<?0E-m6bOaK+20EAB6PR5D`FDI:q_e9QB'M;+eIANQ6>7/1>hO]`]e>ig(Ge542kDdBl`^?E@oY]3g.+(cs%k`PXqm\'<L>'U:o6W-h`l1iSN[/l?E!!9\JSW6B>q"jAb#&snC]N4(g@Po;H/nX7$GmaQkft"@j2M_9=6h6>sB`W\3^P4;+UYcS;%m5@(la#%o:YGVkL!!j$e=`)2P\Am&J_mI&i@pV7"d/n02@iE>kR%m7"(6/1cpoX!ArARUU;l#)DnLpQgUkS>=BD$c'6BD/CH)\]Y%s'^qB_],3Xa6i^f/'7cR5)^S<d#3[.)d$QQg$rEV(JSRur7?&Ps+OI!R/[%kXH!7tbM]U.N;pB1i]oKc#tCZj`laSdl^Tl>eYdZ;%1W]T;j+=2jJfu\>2Qje2PN,okYipiAfho"_*kC6g[R[!6O9\9G[a[fjrm$"<ON`POQ)XYUAT3.ue"`V^EN5#[+&0WD^I%`@WRops%a>&5UXT$8J5L<:-kq9&oj)>'YTj.C+]<NHt#otVJ_G7b`!necT@dHYF5`gI-qX%Vm\V"=<L=nu<-kL"#HoIQh7%ob9n?<Vc3UF1E%;6/YjEF8i99FPpH>Bm+(Qrr$d]->p*A=rMIdrDF,%,l1m2K6Tqa^BF,V#'0W35+(q;*UhaC)*0i%U4/h=?hBb.+#48;<+$m2r"E8%*>[ti$H5YlbQM,YR@Ssb4NAt:(\%6_*,Z7u+^fij+4-q)"@-IO&Fp));-@"I5NpclCXX.SPc30!A:am\Gdp.7N7S*\VS!D;[UhON%K`f^&gQL4ra:C4Z%1c^&&/38pSRL+cn]qg7cOWO('cY>\j7;_TYlc"s?Hk]\GW9ihfVo_2M5"'B`,Y4[crhdqBXm%'m683FjR]>S%bSp[qS%f4C7dUUCMo-P())(2kql19m`G)I;c>rrTmm*RTZWh)+:pV3UH\ps+eFU,J\<&29I[)n:fu8TRR"p[1(:cA=VrJ8g+Q[fl%1ct#.A[n/!i.831G/l/NBJAAr7g"_$=!/Eg0&bJ8!_/(CZ%'_u*qVp7EEH&]!&ln4Rj*u^qPFN'VmY@NAkDTs$3q]/9J/Mf0K]K!%`O*ICig!%cUlBoOd(>6cgd^PWAjZFE,f\T`jKa"!"aNp1K3!R$1s*GN%d1:BA\hV3\*X!);]CR$g85X;OIFi*HuZeF-cG(Nn*7Ti%gS<[]UOF\#I53mt:PCUleK"QW<)9RT!_>GNfg-l.cZ](A6a=p!CGOfH?!^21701Dl>^eh4i!Rn)\-E,$4ktG,_T`lt-hCn1JsV80%4AQ@VL-V,aS(?ddR\nl[O.]L2h8tLm)N8DtM*iq=101%-CBI8[ZmIQ(e>\,cMtNrj1;Us[FJ9mm,8A[/Pu>J2d\NVkBVQ:O:IHam%Dh)]5S5lRrCle^RV^%R=+j)<h,I*SVUqFIsO_4p+'<o\mU/%7:K6W0PQ#`qCEj6R7+YJJ#9\^%g&!."tG)oU?$1+H&/)b=-#(a9I%@piRrU7kC-,Zs(6')Hl8Jqk08h!#7_6449T.<H=8N(P-(S>nU8l/B/C9IP^q_[O@\BE;J8gN/C:Q?RM920cdfB^XAfU)>qu;8Bmh%2<VRl8N2jR%bo@_Be(.o1IdkD*A<Yr*]5us`K0%f;7T^8Ql4h5WBf0@*k+3X5SmC;8TO#>+k^1"D5e'^9ln*c5QFONUHeSV$1nk0%4:)SAL+c*D&WK4YPAeAeRKBE>n'$Fd0N#0_8OonE$`P[2-H'=Ig[JHI^XDZpd8:o1LoB9U\e#tYOd7AMdGhZJ9Eu".9/%CLUL''(%\/po>!#lYHr=K5O'ZL2YZ5R6VZ_V;qo1QM=-_;p#J=4sNSrU>>'^4-DQM_hnh.9dWkehd?]R[634Gq?Q\+tsFZV%\f^f+DF/Ceon%.?F!QhQ=eIjJ<L>B"S`1ro,iV`JPaGOVo7.Vq#aa:'\A$6Jm!np!Q3Di's9#gkDj?n>r]<c:,u,3R',a/ai\*5;%u_;Y'TMP0sgu%"X5!k=$g%8h/P,,e\R6em7sJa1kc]1gT*.UH0:OEOMW]tBLj0Yk)gS`OF]OeU7q+>2^Gf>4<5*$D2k\*&9^E.A%!<pg@Dfu[>LiN%UM$l1(3rlK*BDqnPiNj$FuYJKob`dZUB;@s?\F#.$X/K)d+2-_k_!M8b_FmZD4*l??mfA`XWlB4G!Ol"P[U[J#]7YS0U/1/KBFqD%G;0X9<.^*c,E2835i5[184!uuMFbkbIs)l!FHDDtMcu7=.#NagF]'f(ig)@eBJ%;r5a7^5XrVZ_;7RuLCPjP!l,]R6n!%Orh2N/F%$>ONVQuUV`Ek3Mo.XGCRbQ.Xj6![!R<n#N0XM?,])qoRM3(67jTQc-[%C8JImAls^C9GBtbqk]&D,8WUIj[_$m0>i97/q+>^=VZ-%G5Ycs($BBBX>ulo-Y5Ys2UK-@C_XAg_4b?1j7OJtVjQ(TH^q,s`KZ3.Yq4CH!8i"I+KP=_-&&)oput$X[c8A*.d9Q<R2:.o1d@iM%iaV*D`BV;@:68D+Bdeeu;k^$#9I>Os@3.6?g/eXD;_M-Y]EVtq_O&WXM>/A?-7U]j.4XU7F^1&b0Xg\f*U.?$q#$fJ2LUrTbQ:NE%_k7aPV4*5cN-kn9@)8=:0_($:1]R(]%2B/iqs\#J?*eo=POFR``:1\;*3drJ\I;VEcf;?ki>FSaCtAMnkW,$Im;aptN+^k@<&L&'%=2(fe%!`a]n=mZ92.OIqdH<S*IL@ruc]h#n4H<+`[6%n/07L+MS4QZg,h(uQR%'Au.[ah/B]^+lWH#c7Z-LWk<@2"%02fU1n]5A-%=SVj:"[ChGm!;krA=o=2\MFsYT(#(noUbqc=l4Aa_US<BOp#BS`28[BgXgYXQ1oC]On.8GIko+lrf`0\4DSTGANo(]dU]@6,@]Va%IdL+%rk(aAX3BiR50_?5q0D$7'9H^3.?(OS5*JZEh^LOXbD1I`f%YdPQ@7_+nmohPUVE[Bdr!l:IJ=XS:-*I_fB+%ha.YFrINIi'%P$)kAilo*I#0op!g;`a&acYjN)s<(JGdrF!(=(pH18cg954:0l/kgomUA$dlXitL[Rrj+OZB_:u&,U:k,bF0"SN35(r+*+&Z$#G]%X<tTBp%RJj'(I$?JLig1_OSe/`^1X]Sdui,[YU3)]E`hJp`f/IK)*BcO#FJ*aK6ZZ2)Tu'`LP%7-&q@^="JFnoCDMg2Pq\oD9nX:%9YTNcOmr[-9l8*^5cM!*#cH`6r#U=A5WY`^97,;cZY!iJnR4Z%C;Du*>&],cPD!&Tn3IRN5tuH5hrs#JLd!n!G`r&jHnW31c1A*t%J-+m%qO[cRIe]G4<70e\Uh>`FSG1'7@e0EM6Sli-(r33668TJ)./1r/i.pUuAp\@07RRgd(,FqXI73?%EC^>PTAe[I[T3*F(8frT%I;q6RRW@@aq^ki-J$cPiI'-eC2Ac87r[0nYR<-2^X%s?!1HbIap+^2-(];A*nA=X@5JQt&HP=l9H%tL[%L`n&22FX=P:_PCg>&l=%ZF,SM"Y\LU0,/7?6;tN-B)fC4]K+H3iLUra.NBI@'!:1][e5#1SI\F_=WSTNM>/2&%&bLT3OSc^B.eX.bVT8AR4e:(mn<_d5]Vt)%$\1;Y/n]&@l\Xds86Pr11(urn:3q@K+Y&&JnEKRM.:rD&(ugpYF-da%[cr\tlV"ZMrH;*m8TdElNps"[,B0,`B@"oANFgL?n_bCb%Jd'NW64)*l:*>=(^nP":^sJ&6r+o\%6k\O',9-IN^Ph9J?=%aWYTHJ+[qc\ARZc<dGff9qfiE7T";3$r/*&29V,VA194#5.2_kPp%VWddM9>TmRk8`ft]tR+sL!ZaTR48[$3\r]I0WOXW0,?m:>hE?J+G&RharM9b>4<#FNnj)CZHfR1SSbems"FHb02<:uY3=TRqJhET%ns+&ck>q*+O!PTc<p#XRZkoUjEZ"Fl4/\l^Z1Ch)6o[I$o$[s(RG$U*'_$al-oc_&[a!ibYam)pBRR"W^FOL@8Mj0S!%cpsmB\I6%>M=6.4B]O;4PB_eE")P!!P3q3X>/Vr<4"gVh`4CUH3uXbG)XX1pP@tboB<uXGWJNL`#]jb3UF-Lau0LNH2;5+43/\jGn4RDkQ!&.%Z/i.8;a9#![=[14e/67]nA@:SNoLmi[eT1;gJ+P\q+[Y>S_:5EYFQ,)%&P60kr`"h=#08Db4f/X*dtsTT#P$DI%(!c`P%s$F"PeC%n7rMk_E<,VI18+cr\sWEOa<K_OGCU4-t(`()io[-KndAB\LYND8^nT+/a1DppN!Lc.gLjH!q?R_AD#2*fJaGA$1(A,Fbq,V(3N#X%7`2#+$p,3'Q`D_5>64icYTOKd&i!Z-,=PsBGYK(aq_iaJ!M?,qUcD>Ik,<V@'fWJ;)bYc0U*kjF.@N:Oqne2QR+a&;68T-.(?uo2%/.OQV#,7<C*04c4gfFW;`E\Si6Ul)I.J5-`\r8hX&1OElY7t1@aY1[OZ>9O\=4gAiX<L4eoDik$3O'X)Z(dN$OQ2HB1Mg<[,-#=Q%Z35QN-mfiZU.JSq+t`.UT#FCnZj8*qbcNqAakU\=Ai7PI/SYbEOd0#u$+>V3<d7G7MB:,[++_+qeB7]@8<0X)+O`G",ll?>fVNj2%)cBVOXs$D@U-:KP;9W?6T.'9J@A(o`5G(9kc]N'e?8d&J9!j,F5P=U_7P).P\oLif#M!]32`NobMnsC%)/\h#!R%=Dbe+nLZi$QL%cP4FC]nK?q4ED]gXNS43I'^`dNnbN1M[:CBeBu.WD,4*-?iA+Gc073=\)fDX3`]H95<h"h$SO11*.L5a5*9\u$FNR67ui*']?730%+VlHr*TF9:<Bo^hi*5_Mmt:QH32)mKEU7FcF((Emc1;mZgh9_2*5s[G><tpHq%Vip6X+!Vd2L>Riu8TG22/b]CkZf*P^.EVi$/M6%F)SbB`ci3l$Wp$:=q?&<iga\$9q\>)UN<0G25.-9Q:'JIBU$[kn9oXVc9mGk4CjkOK=6%sgIE@33Fp-MFQ,Ra^ZAT@8"/tGb27o>%>hBApfLNK]ba0RKB)Xe7Eu9dlL]j:D^'J3F<;=F2Gl!C.3O/\3!YUM?Is+bNFB4Z-[aom.ljd&D`LL1'jI?R7SuH\]_(L79DAAak%+mWKJk3W->NY8`dBk\p0np3sGTZ.grEZIfbLJ]Vb9E\^V?n4!-9%$='Qr:B'auI5lZTU3aUhfs'gCU,CeWtgf`**@FS::M$d[6YV%)rdO.rB<%759;L`%p8_>A^q),OnpoU/s&&7%!oI\s3\VF@%#geT<)*X3).^#+$#k/PJqGN$RLE!IN1hi\2f+?kr6Z6;2V\b-LY"m%19Nb&hWbuO/\:7L\tc1+3W&O(lp+pIH1:ePTP;'Hp`do1W:$_Q4KHo(7Z\h<oVrVa^,KYpR:SrP6^%%a0OB0',6S<[3\c0A?/@N"%je$e%CV*h3(Hgf,R&bWh#j1'GQ]3:th!BYoE:6q?OY9aWA]TYi1@DBYJj<SS"96@uf`:Eh_"#.p0S^k^A<N_E-M.6![)D.QjoQsG%fIu6*Sod.(@$KK$B@8N-GjLr1%)iq2P$Pg(@+nYb5Ff,(%1(uJC?mgo"W`k00<ZU>o`A3643]DgM_L)>\A&rrkMeZYJuHN/kCJ%;%!6rcih>f6:?<4!r*/b_cc&^Vkojd]lMbU-aI!g41'IN.5Md\g("7Xdg^-]PMUm.!gCIi`L5QDN^H[cICM1LARku=g4F":#g"$i=p%A9R1\'ZSaJoV^@1RD2#MB84Vof<__#CX2JkOLeka),MON"Ei"k3:_MNKJj7%fO)^DVtG1D"tZUlHZdpSl>EV5,T/!C`EmE2#I[2*%$Cn*/3-P/4ZU%g^%>_dn-tNe5kQAgu1>TAQT%8h'>c@8QahBe#ZYZDu"J/'(>l'<<QIplORjsXhH1VlD^+'V+Cc"s%+J"]jWQn"<%(/kn8)_Km_'[SA>MOIe(B:I_3N#Qs-,>2KX?36^S4X?o%k$.t%&1GrGU$-TOVgS.AkA&VpoeIQ:n]51BJ17'-_T*#?!1Y$DH/+!A%<eKl*X-BDGYkf)'BWJnsBma?;WreL1Q,O-eZ9rA?Jp&<8cCF[_IXN_(l8Tukj$ZVk,XM(h9,'mS^WmIMU20X_!Qc1qZHWs[;d(7`%<nQi,OYCEQA39it;Opa@9KN)Kb.m(#Bb>:1],.:%$^f39#+4JqSnB(lTR7eGhY3SdN&EpHk.h)Mk=[f4M!rO/_Q"7.N*prEHU^A2%g)Or#M[*/d0Qs[dh5$XN;EP*F"YsA#45RrV;_OH=`JZC;6uL&S]]l"6D&LbB4$f:)a[U_+YD$\,i%9Bj7uN1pZ!Yr5!d_W5c#2]%%#G@HG=]f_OIJr:h%m#u)ic.QT0cZ9aOOu<mCh4ir"u7.pL$@=mBOj_7d(M"MnU1%CL?CA!7bREi4_8-[AQHB6f(#6o[%<"sZ>emt%#"W4`6RMe-bVIQdfgg&(F"G,#F.g&F>Z@>2*@YR^$)&V;X6SE,MNl7K^[+/u?$;qD5Yr4,0MMKN\Du2(ktG;/*pcl$q,Hi?-LOS*%olnM6cG?,Rp]9:5l)bbF\aHfNHd/[Dp(NPF](4.'hLHb,&`f.N>WW\C]u-Q%)WAZ2h.1C*?L7*$lWPc[c7a)H5^b4KTr"!hCd?8L%c+m:oGmi(:$(O09FNn$@:PYQ.ac%0F18M1!/53OK7tP/Z5\n[3E,XnAcVN!jDY_ZY$T&>;0G$mF=LdVUGN&.KQLdElAL;qa&IVMl%fQ$*G^k,;=[\q5/F=t>%N;+e4aW>O=:/9(8A9N5"%\#U"+qsF\.OtC/CKN1hh!FYgP>(A&r3aV56/^51bG1g#i;*k[g;.5VjF2B,%Jc\$SJf:>Cp2GLS;C=WcPtc6<g&T?7O'R?>enh-b`PEO9le-,uC6QX=./spF"(;;_PA_5?3WhX2[O_VW.ojCYe@`jW4r\nD*Piq;%D6c?T)Lhi_2=M@$>r#C#P]qJOZ"j^V\hM)oV/Bn!2@aHe_YO!)q95TDcoOD%<?u'@XouG#)2=Ug&]Y4#MalJb9p4j6q&tQ/g$[%c%<kEq(J`h9:Vm]+7OY:G1>OXJf0_HR#)A7!j_?`)9I+cNJE\+_8q[$a]/Pg2dq>(8'YnY4hi?.""(eD:VD3W#Z`kL6,+@eFH?!Akq%D>t&d[ZH.G:^%KDkWtCAYUJ-<M>*aNAp".Vp=r:-;H9q0?VCGUmZGAf1UFUK1W^ALkM+p(?qpH>#FFpDs&t?jO@!ra%\GIN3!*e#%L\,8,ZZi*uo'0Ktj%7stAK'P+PrB+^A9aArI*@K$B^'Jh>Mj>Rp?_5.Z1e$U+QA\E(j!U?a.1keOVJ16EdCCbV<'-F*URH$Q%0#*%kM*3LCqZr(0g-,E=S-JO"Y]<RG%2@DNQrO#A$IAb\!o@KR/nXQSlueMrXC*M(XW9[!EHp!ms\Z*,cfUq.g+pFk1K1.+Qb58:CmD?%eEqO3#%:WP?9fNJLg4mZR=mZhT2%5+cBn.oYK6n=YT>RA[m7.dnreB.2iGYY!IG4s>)J`d:E,[lOZ02an(NhRPlFtiSNGY=)lq>t%5R7lb1'd]s6fI,e!8-.qgIV]NB%Ocr)/8b>)k@kRbWckTU$tFtFo#Et;gV"HGX7?QT#AZ+2mW"2'hsW\U?1$YFt2bmk@5k0:dAXu%5Y$:oOlg2D"P3@ne8o]Ic1kg)DT2QA7m4>%A$+2"kJmeNb;%%+o;F">^!R-.r1)p=["T7j7dc8:'gr_OT55U^R[9J&WRq(Y-GF??%DFUr7/)(1<Hi>nNJ\3cS!jE\Q]_5*NJ6arBCMtTg.E,fcfiC2_ib0-4Apu7<jQh"Ua:_Brn.&FIc?IA+P-6rR9GA'hB2,fANeM\I%FELr2fr43C_Qtf/=O:5_%3dgT1Qt11GXZ"6ji6!-9,VW6cFT)IIR0=W*e88R^(S?Xm4[s8]u=>7?Ar_;`SSYJ%0V^'/(&_UDV)UO%BaI_S^L^j6p1%Q9*/EpT>h*_!6oIhZ:?[OmUX=!FmoOKZ?t[r$dG9f-El%L#RlC5&SnjX/'b68nrahIG"MV,M3*/[FLl[8LGQd>D%'OO$>IMQ36O3q&haK5\.B.X?4n<T\Z-LSb".fV,!q*+i5[h6*_jJ$$glCY42Du>2HGaOa)$g<(pMPF3,`(<E!k"fYMPU@kebsY)d%@jn2UIH5os,)j(NMo3B7/%\@llM/0gj+iQO]C9X(qRGrJYku,P;m"g\a$89&0GX_f9gld3['Y)Oc+rZJ1X?OBI.Lk@iOJDJe'Xmd%XR@]@SM@A6S1_%#>)2)s<<f,MQCTJU/q03tZZk=PK:\?:>i*rQ[cZTpm,S+;Yt#4VkM?R0FqRN[H;CTl#p&-bP5>(<mD2_Oo`Eu_%mV(NeJep9E\G>*D\uoI-*#.B,+WTbo!q;SWJdB]"_@G))Ws+]P,(8%2kt#s/foG7VG"i[ZIrD8YmEX!%8fd0IIMIOc&UO_1*h?A>%M!h1NW4+DfE@S[:U"T_QSMtEUnnaOEQ/JTq8"qk*X[el>@\l1)oO(^(;Q=6TLY-0E'3!fWQQa,nbG\*3G-khD%`2tak.1*d?@OVQ%lg6Oik0>&H70nf@$>qJYT)s'.kAk;Ehn"c6_KRZ,-%,;n;MnelJ<KCr+X)Jq7"OYnIUGH9.o(,08kA8IU+r_n^q5&!-F\nYWC8Gj%n;VWu)X6@_%1G)i^&WDI"?IaO$"o[e(sTP%nBQZEhq)h>N06`0`V@no$rd>?JtA1f9(1.8'5"LSnlc'[ESSp-h/fcu,\KZ\rMh`K%>X`jB!<\:,_TO+9mbOcIkf7/Dd$RGO5bZAer))#Ag?r.-=\q_WYA:p$GIb?:pQW"^`(!IE9Q!A<,?4tM>u&b)[)KW_N0g"aqc`SJ%!\52??uA7/;b18(hOs<$a+5qfP/k>H5V+?r.*B8);9jcXI4qLaB-[:c6RAY%GnHn+YbSM3k$UOJYkm9t:?^rc&bH=>B!D:'3O-sR%L4;MG*cCUtWu!BXrU9f:k0cqjMr?dE?qiqKi3*^ETC#4b"/_\3a?5'[B+\kcghaLQ^cP/5Lg57VN.#gNHETPN+c%kH?_@d$LAKHi%&%o(Uep:S[.=$5!NT[Nm:R_DXm,u/\fJ\7F-d]KmPXE2FkYIZoXNonS/DJ2*@],`)aRVMkWDEF;@?jFDGXuO;;,%j!(T/t#"j:Pf%;p*R!QQ+:Fn&,Kt8($&DL2qGihjB07!ao36OSMO9WRF,T6E<A(1dPk1a6$FGoJ_RQR*J?'=-ChgE&/Ap)Q:j30,iULp0Jh!/Iq\N%fdV3tSRe=_H)Y&r/n#2<#b@tI"`qkSB0(^2s,1F=QST?p7%EMeaQrFYX);QrILO"fra>:K*ag)&Z(KBq6m1;HjpKR>Bj!>P*f"_+%.E+LD4!,F#\\\"$0H"-GO06cEE/m)(K?K>=%F3JlVnl\Ug#/W__/1q)(n?eUg#meMg(F1C+`Di<*rLdCkZhO69\0KJ5V<t2L-NTA%:NZ./75VNP^2fjelc^WB3ZLencIYkS-(Z[NLU6.sb`Rm'Bnuf=9uB5K!+V^WO\$I/mP="qE!&0!43A#4DqV4-M`Zjcq1fKOfiuaN%^1>FGF<5@sK-)!"0mNb;5HfLs5s<O<X\g*-U[m)4;4*#&k,5%o6akQ][IIc^preW,EZdsR@;'V/g7Ac!dQRiS@[m-T#'VlZ0t<ur%T><DbD&M->D@d<&G2(BlL(bESW<sKL*$3_kQHd9D$6?18_C+2SJcY]:peS#rN=D?E/2aekV-@>imV#pSlisFTk-g%HhJfFp"Ub^1%pL>)gRDk0DjH8?;YFm7>M4U6:P/5!E_rEmJ9E%k60EPTS.iL2K2KAL7J*_lhcPp[uF?i4BRF0s.]?\a\K0Sc(04GmW6m/9im;P?,%C$7.Q,it*taIiF9%Bp,c1._#3E+A,*9-QMeh_@-ej^?<&?&F_1/-p+`_/ccK[Q>q6jD!O,fg_jY[hM^^mRnp=OG8alBOVlI&k6?3%_="cCDroh$8,@c)io\shg5n^+12\TdU^.?ff(rVX<ojVB-GRV#B8G&d:>Ud#J2q_YK%GV/ZT4#7_!KN`lW1'"<eIMFBn_WMJMSb_%OoCG,SP_`YBtPO&:M*oC.Ds75D9q$aPslV]:7G9uUe-304N*cqBr(Dm%q,4#='SX54]kWg9Eo3EDR\baOu1Tp\*LqA^/kdnasuOc%FVZ\hf)D*P;BPo0K?GAH)pQQ#2(s_!W'F_32<[SkoqCHi=p\E/.ljY#UFT%`mCI//7?`005(6F$Mr./In/*87B@9k<\1rfhEJCho%CmgP,fni4&q>))R+:T94k/_RppGfNHU]k,UnIq*UqQu;rI`^2r,gp;A)W6^/GnHd!+drG(%+6f<YM$BL80`O3'<bc8G+01D0J=I4%AgTUjk5:4)^Cj(1^<XnS.?1\I0XpRGne!%qRDi\'m%,;0O`pStLSGj;RdWE<;NO5F1ER[<WFEX:p@BM#i1J`o8J^Q/2`/?^OFB]J%5DPLC+b`$*)XH_XDI&/h"-Q4P:[X2n;UX?B)PiH]9.AM1qhg=)ZQt*sYO2W_k/Ua18E5'eU,hlkI2_>u?l(C5qe'L(5Y-$0^GTRQ%$ccH@%34mh7-Zh^2#Z=F"af[H!7FC.9YG9pO#59pg;tKA1)Z,&!#3*eU%RT[fTT,G]#[6#AUm<7kF1PTc&=K/'HqTGaq%p6'[@*[%iYIA;f.QhZ5Y)!SGlC-fe3oJ;d0:ffM+:0MM(QW[cNXk.4?EZ,Ds0-OUW/a_^Ni3MIb59c(8]lD@6Z=0;RpZ/D<%ot]5Q?5_eA-&%kAt$8RSU4bJ`n[fA=eAjYW24_jBj*O-=ObgXO$P9Y`+I3DWVHOZ;2_<VtdaN;gS/4IRdljqf['FlrdnlB)S%AZ0]qsF-H=('U*c*%W_F/4:MUL$;-E$qZtq0=gB[$.e@L^3;69.i,_#"@fL&pAFS+ADa?Ju*S;`^^HqI?(h)t6HAD_k90#SiCT+9)YLe7=)n$0SW1DH$t%^?kW9DmE0j90CagHO>;;,spBc0u_A_ra>"Yp?hB^e?$_S[2:Gjh[Xph=c1ntLld&^fq3`/jITrmIZloIo/'G?'d"GZQ==i<6M0'd%H97qeVg2'9oX$J(3O3[$k71FZ0o"Xc&]MQWoOk&@Illk/n@[kqgQD5)XC$6VH4A(K^2&Jt6W1')lWO"D-GX08]YXOdlVc"Spu?q?%i<EAWOb\GCJZ+Kp=N?qp0JpLP,KIl"o"f6mXLi1`J=/u[hG5!k<ocVGmLF3\@baMfe`b![*6F6TEcqGsBp-GJoI_1TFs,N\MU:$r%$\UD5!4<YresZ0VhIM_&NQ1[0od,SSf_q%'$<5A*-IVehZ23tSCJtut<1%/UU_>r?@+1o-o?]s6F%m_(M8`rbO<0@%U;8#_Lrc(>%S(?ps9.L$@HP^s!I'`qV5PerR,2YZj.I\[8kKr7NK!>U$qBLn4&GQg$7g_Ba=en)7oH!)B@ndk(8k:I5=es+[iK1pa00fmsP*TKV%M&:jdIA/++T)Y=^[C#7jef4VBQY@<qmX)p6RVKI]SE;n:>3*Jd^U(;S4BoB!gDWtf_$_Ten.SA$(J?P/>4M++W/LP:g=[f)g=8\*%4QKS@G4t!WKkNgr;R*Ol(\Jse.t&._i#3@Sk("Rh"OX-)B)7Rh\tou]".DNk7XICM^u-8X<$O^$&;e)jG>8jrm%4L>hA4,p5iVpa%;W842n=6@c(SJt=3r$Mm6VJj46QO>3(BlJ.#jN0K!SQ*EkcjM9A2^2IO<NNGoqKg4AaE"<.=RW[-S&T\Wlo<Tqjt<BN@6K:8.MHW%cRJU_7WeE\mX.h\3"*c>29:eRBBD[>rlEA-1OmXSp%^DLj)`R0-8e,'qR.,pV1&?OLd.k@T139=!5fee?X+A2:(+Zi`(INmi[g+n%"<*]fXO?kBElq&'*>h8<1ah0SH%56<p8gr3SNO01U;q^8H?r#RkR#=f*h=58(;HJ44os=h$OCF>7#s1lHLQq:L;5SCE>;d/+.@@P%d.NoP?+3+#Cs/qQ'[;g]>5."HU%,N-)I+E@BiW\S?$`ckIQ(du;K.L_`ReS3;%[r3KqA6!0j4]^3noPs,UHk!mf7"iK1B-h)=mTN%@(1[3I2$4hagK$@->OLlJVkg^8Jn)4QC`#cNst4@3#RF'Uk)rXJOtDZFQ[,;<QFpH)rb&QSarc_\oRT8EDi<",N``N0)4VQakLSj%@gaCsD8d<jkl_^\:FQ,C-BnmITCW7(+"IN@H)()QG)=g(1mVWCZ=g/bkTDh*N/os,]k:Buq35h>?e'Ec-'OL\'rG"'/>EH@=]R7k%YSk!k^mb'[b,QbYq3(P*6(4#k\"9DHrhLg(dh9U!DE5\:d%t7K=]SVT)K^J9Qunuoncg*jFZQk;)$F9[U1'a-o*]/L@obE;/ssCO%IEd>;3;Ebdc&II,_)p_b!#$iH9Dc]_'8OB7b"g/,KB-6Z2cHeRhN;86M0<=BG/?5_+@;Y[Y/f&N9']Rjk6Lr790%WF#-F\Qp?+X%%"r0/<1U*]WjY?^Q[oJjnfUFL7Pc<KoZ^EA^m?S)L)sE,c:7^g*7B?$rg6Q45U^jJ0<Xg9E)hqpd:lnp8lI1tY.(a_uNmO;DhA$bS%TW'.[g[[CoW%<:%7joJ4.ANVLAJi#X]"f\k[PYN+GCtC"`;alqH$B@,nEC8MI.77@1-l@W#oXLo(eO6@ZTt+Hbmp<?P"lmu'ECI6%$('GndB'F8[0hF3:&nu#pZ9G.eNe/G2PLRq"nd+pfTPE,ID8Qs9CVm$9N=&]`LfMSP70Q,8]L:_n]:h#cN@AHPMWQB,*qpK0'i3R%0*r3U_BgfW(;%N4)Z`lRknPi?B/g[c&sr7%eY>cfCEKoP8<dQicf1%f\2R#'=]'i_r@G>6AXm6&O=V4eD^!N7IrUk:)4kQ@C(5*c%?BVfKcR5Di^*:2jpgEP\!s8'<0jEAp8u,Bsi]]E0;Nu(t%(Cu'2oU1f=k$r0,#KHrYCY10CZ8lrg_<-pFokT'EtXtjJ.L^nM6ot-%?q`p;^PGVK95$iKA#MV(jo/qQ0*K_jLfMA*4C@G!7JJ(4KWeT5nMe)Nd+%mhKi<H%I^pX@]mC@W4h1UXbR0jMGXn_)Xq:Zu[Q1-^%R<*4ul)OsOFWsg5B?LAAL_QDK*obq[e6$sq%W5<Mq<']pW5*=TQpGoGnMiN>qW#+;k']GUO/A/M'CL`mhLYmGjPm:>d8nDrOGgS7%?l(@XBn$F?)P-]d9aW^masp2b)33(+]W='aSi?o:eeL_A@D,5B$6t`fJTJBYA,Uf^@"KE9bESrEJ'a(S$^XS$ETYXlf=UB'jO)@T%SQU@YC/?i#R,;uT*hSB'!De;.1m*r6I`D*`/LHcsLSarCU)fQZ%6P(49eo%u#DC4cDj>!Q:80K"lQm=Z(mqm&dqRT'K#"OUB^D`M%FgcLUBOKDe,hg4Q+2GElU7K7U-oe\/1^N4:]iP>,@5l8mZa%,%?Cb6A)A"<jc;r&>k&284gF,?h6[7H#pcN2oEVS:j)mG9MR9K@U%@S!8*Q3Z`gG*H1S<!<1U0aiMS$l94QSQT";??uB5\<oA!QPOi*f,,oDejP:^j<T[F*,VRd///eR!H;p@!eI#c37O[nGBGm^9m;TU%AVo4G"RI27C.]:onN!:c+k28)=8+<?4c`0i%unKO*oG#Men>gPFs3mqh_2;(Q".$0f^8D2pKgH.?E2!&XBcmq3nIgPc7S`Q%go?F%YLd4hNeDg6"blVUA`.7PL<@(=8XSuFc.Z!e$iAq3@Y=p_HC*Y_;#X"W_kM:Mi:%G)$q&S]k`Z?P_C)0Q_sZ:"a"=Q2;4J^.]6/8f%qB`DTQ-WVa:e[(`bKM6M,3KPh\b'Q=k6ei!GsK]9=!;U\iAdC,9<oOgcM"1h0<o!/He`7K.IZeAngcRG-@bGn,'uFJroBN,^CPYQ%f1&@AMedFEhe?9p9QolZNV7$K:_/'[9So+Y4X)/%@Zei-%%/o-E$kH'9ef`WR*9%..NZ=#3't[(mko5[,=e7U/m9Ju9:++?WDI^^%kulAS5i'[?1UoA^I=nTL.iR3r5S*#%'r<\Li/KelaJ%X0Z1AAb;9$u53HWC]F@[b9+brf..E\<IbndrGLJBj^Nh7nJ9+IM5#+`Qp%]-2r)3J1(g/U0VmST4q*6FPf@3HWC]F=:A_%QSXRmHE?jRrdf=(9Sd4NqFr@bb7t\TL8F?H4HM(5dE_2=l"s.=kiL[i8lbG7#,&)%F@e79>>RPomEh.PKo:?>Wt3)``7D+[E'S37pT#Fdp6SJoDi_(E5-T#aSIuD5]*`UJ=WMG0OpjhX&fnA&MK"VP$(19D/8aE7Ys,S>%3R-Rt7BXqfMfthA0CP&tk+bQ08uYH].<BGZ(F@=?Ou5\U;%W/3cXdD^a,>t0;!5kE%te+.2O4^h(TCVPDN%Y>h+$M"kqja!#u<lo%)Akl4%-IK=LbY1]-F[h:oTI^eh;nN5jUDHdZn*[J"qeABC2QR>Pg(>l'\3I^GQ\C9hm"'ppM-+Wg18bG^W>Y.X&@71*<kMb:gTAq%MK7US)RBq(I="41WP*-!*]jn'W<Ecud@D[Z!o@ce*h'cOa/UD#G0+?InLPu+*git\V)aV*UiltAJipc0>5jFW&@@Tr9p8A);)Y8s%cbNa,k=3!WAY`3\jl]G4%(t_$"I#!&Jgi^0>4_N`UfpNP&i0ehVaFj9b7Gu1SI`9TPY6P+F1c[R#m77f;G8rB<;RduM09WQKRmK[%m\B(`*crli%b=9`EbVjkcXOWODAKk6)q&_!ja9'##T3Wc#GFVQ!&=!;0_f:R\@Tj%S3>H`;fVMCA^/Ml*!#LH`@F3P?&\pJRCuTf%>H6IY1Xu/ulPIR:O^8eW`D&M:TMl7j_lP[4-glr\Q#br-.V[0H[QMrfPcm3sS[hf/G%CMiG*Llb3,0QrDeDIuPCK2W$h$Wr8sH0J%Os"rqFlY?QNfr,o$@D,2l\alV]<"0hqfGtc7m>0mI"LQs3mCYK%6BV%+jU3+7UuX-''(9i:AHOLIjfD1\<tgSQi`h1>.^SX3aFlt%:8pnG]/r-Lpb.nqFH;7%1Q'9/GY/EI_Bo^()1%?>,sB9_pK2<iaRK-+kM%4:!.[f&FN4Q!B\,X_cE[UlO3#*n1f6Y1/gF@J5;.7Y%6q/rWs/[A,7pC!D9[NqM:7[TV*T)LW7smX5q1UVjjj/p%0pVq+[aV1+)3f1TG;&\NaT1KMrari>:^7C\DGrREX!J5Baoh!Xr;mYR%jJ,?aUlV&e?'*8G<6M>SpsAC'$!!3kVt%Ek@U:'.F]9M_=?QrdU3K6EDtW[;9?!ZPp%,ddiGTVL*L$(IG;/8Fq/?ng4jMP+kJLSS%s4B4)E)NU,lg&o\_qgDeEBudYdL"J$jhnp5oo1Iu6U%$YNM*RK>hA/V#u3iBmo]%L%k#)8PfefoG<VP^/HL(;LD0#VBfKjQ>s=e2%(R*V)JXL>`B@]ERGIKAj!0ltHUmu;$j\02tX6E<Rg=ebB"1O^"H#u=2p2"gRa/(]k)W>AO,E[[Hfjb<5*AY1d:,5A2JQJ1O0Y'qB%+Ei4j)6J>+'@57Cj6X^jFg!P4U.$ILmJ5u$Z4+;),@4@.en#,;.:+ML--'P_@<\Vl)(JbKOPZ?"Mis$BTA+l.SBI4Z9Kk4^F-f;9%JleEW;hZHG-*YU1>&qZbc`[IP]a[[QPnr3,BQp#fY[I$io#4A(%Q0`<MEP3k5_M(.\Vl0Fb"*O:oJInVC<T3h5)ck%$rg.'mZN_/%]t[?4.YMl(N)Z/tG'c\.KQ<-4<!Z"K2:*P6=R'-5=s3C&VI"YkaR5p<?apM/DI/'l<&eSPG4/BiFIlk07*e"oi?[UJm\t0Wa";uZ%;tf$#n1/EJL#_&VKTb<nPuK`"W5?<2$7?i9e**EHPmg$o.,a!TXH`K:QT_CLj[OKg4dPi@\4'R3H9k@N9bBf'!FuI0rarbMD4%Y&%L+h@fi+8[-2/_A$h9HBr\Wk7sYc&p.Mt?5JAZru`.gIC^.\Ronoa@h?\YS`BF$Q!ZYK]_@cELY0:/45?B$0c8<iTKMG`PlJq=.KH%dOfk+h,`L@87o0hE9fNVo8N;:SG*1&+_^9\F_"eb]1b_bKXk2_=_H)SU2uR5jR^ZkDt,l\]nFLFM/fZ?%mKTHL?8ted]f"[YR>V=%P`jiL?<O)&W3us\5JmtseK2jV*@N$^\RRati`rRpo>$:$M3Hb'WG/f@TdU*2_5<I`L3Z0XL%Y3RCUjkcYgKrkT>'EMh7f,ZcIU,U%G2$%j(9+,sbU7F%$0?J\D]eO@Mm$J6=n8">JOEiTl'jBE%a?J*Yk4mA-^rBA)VZR6g/1]N6-J2172*V4]hYu1<G*U/@>MWQ?;_+p%Xi(QH.<_fOaK<g@F`+._#kj)>QL0)uHdkiiMPDNhFfb9T]#<>>;s9J"iDd4+*gHDFcUr4UAOe$6<7)7_;Q;!d;&&H!T_XD>8i@s+%'Cp`rI;243'[QGdk9lN=EjF_hWr&YoCddUae8#M,-G!BO&^am!2q3o;^0XEbHm']ej/uPncm_J2YK<ZR/e2r:2P$'S^sqAV?T+Ip%qdFBdVNZlDMV$&=flU-&FOt+gb%K0p`T!^ig>A&f-Qif1AgQmf].'4E$C&[B+]i4'?)`r>bbgTXVdX`0h6Q:@Ep<AurdD*:UiP]V%T'a'2RnbHac;\2d?T+J)m%R&>?*ic0G"(ke9dc3!-Ze&?%G>jd?()_o/Z!6hl(j8:Sb_-qFAh]XE>n,^CcX:!eXF?VA^ecSQM8Y$%dn[/PZKXcM`-^Kfb,2e.@M`\+.HXag/XoKr\,+t7FA`)=Q9/a.8aVh"cG8<\RncR<#eei:ACIOEN8,kO:0kWi,F_Gc(n<I4YA?8-%9Wn8'dn/ZLak#Lah#VV=%\TK/fL8k#a]J!n02a7%c(Ql^Bs4hp"iLphj_EIR?a&n!91QM8F74Eto%&LQ3ZXdBMs/)V8T5:Tk%(J1%()g=@OJ!_[odn]D;4"YI!Y*]AKH!ikFU:qSFR#U+b=Z''5"HhI@2.q$:j,u2A3qjpoSCrJo0MFL"\c1l8muf&a;eD99<$:oc"6<f%pKVDhafd.7-X0mE78p@P`\MaYR9\GYkqjEB:d1Mq'tV"oY"IN@Q7=\J;(>:OmSkEgO>&V[\YF!Yj[+/MQarl3hc's=C"kc(^"hS<%X$F7U.8Q]34H#Q<*DtP(E$k>0\NF85O*7Z'.D*b*$e2/I4]LH;Qpq=OB>k.hVF3Hs-^o2C)2@^;3&Ke7!\=]!%PKe0#,rgdq@dnT%[L-4=ZdC8J-\@\^b)TWiDCE'oSl0ubAR_"a1_a=IQ1Nq&:I>.ZWoqDZT8!E_[%6D]51kg)hd%uZDr1nQ'a5>T"/fd=,90Fc?)=4`%:3JM`YlYN%ZV5Pa9O[U!Fp(K;@]`lE#]X<jF*!pTgYCTQ<^6rW/qo5rO+H/&&S?FH,tlCH'Id&J]dfSHG+<L8_G%W6'@_o2\D.s:%iip'gAdWnVn`?(T3N1*b?53mbK=^srZ0&IO^8Ol9h!Q+4]QUVA5s\@/eTh1c45:H6_7?sW2$J\:KMj`K??TAWXW`hcU)dRP;dpVf%1aFhiMSS+SiJu$`PcJeJ`A3Z;>]FW:lH:[4.:k^"YRDC=UFY-UV,En"5*<9GH+2oLZ'Flt?\Sn&mY#jW>4P%`WGnb7mhOE`]=c"O%em$C-p=&Dc[GQ>Vb`VL'2(-rV@-V?a:5bf5eY]r2Yu[Cj(qMSR"S3#%P3L>[h/e;.>Tl&PmYHC4mZPn!okF$:<8kp]_MXMDFDBE$%TQ5=EjL7c.1%BHVTn%*Q/]5(mAKitL[@"OD)Uk(\,V`FDHX]d8Vo?$=0aS)a&j,2?Z1B0/`Y>mrb"u/]gY#RE[qT!1>*>8SNuP@o%IB?lPED[@4g^,0,4&J;m?=k%'coJ`tgr_9*$mdN!r9.$9+RYBPReOn\.L,j<9.SFr<:1?\;ViJ\hX>3Z0%t`c;iYWpp1gVND4&`0%U2l;EQ1DRhk.(!5-[Q7h6e8SiN[s=Vk,`3l**50&"=KoVOiGG/IPBfar7EJMZ$ajor*D&icV9t@OENNdO5#4A$pKsA.(^#ipr4\1%C[.TY.392Wji*8E:P'k)f5uY+<0.Wg1EVRHDOhlL'%UKLkJ+S`q/CNQ,WtWSLgrc>/5!hO3TP5\_F@J"@K2H__Y]Wf$HDXemfKe)%op(K.D-<[cVibU==,5&G+_<I?3!.]!INDBqC>-KBZ#Fgg"/7>:].NuhP!Z0)6NW0]c3_qgL>puQ5'^LuFW$u`UH/*Q(iV33ECO2?%!GTXiQ:G,)1O_q>7<RL^AO1(-(hl@:No3Q#*bhn3`W[a%!*U%`mUAE.8XLmGUK9GP1@5-gT56T<I\gu@LhAS1FN1f1,,Zd(R(GYh%dE-:Wd*Wo.o#rW&M-39Fn^o*0C<2EYK*52ue.5;hd*2RaUH#MM2*rLZP&u/[9"%BSPN=lkf94j`T%J.p=(N-]crI'hU,A*5:d/&/%4*>2$=TF'9,tH=HZL1+>:Yq1uVK,"eU687j5D_;3/fc#Q[>&sN(KXb(l-e66/b+/79_=6<C$Ei6SW]$I?e-MG/`k;mdJZ'e)_2P&%`UB$Y\9V@BYF0F%.fj$BBt4"C,mN*ShWsaPY1oW:L-lF'8;cA;Xh-^/i[m+:E]Jth=2nO2lmBDWIF5aZ^#G<>A`5500FRC$95(0i%MNc:$;tF2<mtt%_J>D48_F#O\>HC3iU3[(8&dH+?O$(A"''@nRD^s^@DB5Jm/+rIUJt@hZr9>Fe<0'g5WY4*Z*?\HRaij&`RG(Hf%`t/!j_93J5cK\Qf:mOg9PNee]X4Tl8*:UNbb(#hDP[_\5f!qAG]VG>qDDc@_?C2)01hfMBjPP$TO:%pedTC)[\=N@c8Nfp@1GajP%)G=,!\H&"#'cj>7]2es"8?:N81"BMMm=Q,@>i&"+eTs7m;61E.Q2u/p/hCQSdM0;K$W(UKT]USlj:]BfjT$d#:=kR2W&4hL4J$pl%(804u5lM4JQY->6blL40l`7>l"g"HV@>`CI?Btbn2$X[jm.r7uNh4C66^VA+BbmAm*'i(F^+'LeVFtP^JGf@<W^#[A]"KMap53[q%']nA7j^0R]G8=3R=,QRJ<Fi^;;*HIB7+ji9]dTMu/7B:M]dVc`IH5mQ.%bm8jEh[(do=*QQD/d)Vul<b=LM-bM:>FUjfA76IQ,dJ%4mn'Q=P$?th,$&^p#?MK%X1:^eb-Q@SC4ffrKOAZ?$/)j6sW%=W0"A6IX,3`C$&@,)sW<lId3GNO1Ke_-UZP-eW"_Me2"T&'[Tj]%lDHFF'[W,Il_cj%;=*<-\pf6kS5o6oU&p-]>sIEO8Y&\kVQQP%3hk')k1U-:3E&uL0'FhNqC1>"`U8T?=P$>GdH-K+]0fjgjfn5C%2c(sQoi$$V,u6g6;:eSn9p/_,\(0NN6dGQtFo@Pu^c;?WlM;rJW9?(U\L$cOS<8,7>sAWoP?6:q?_,#W6X;q(1@tmRq?cTV\i;jl%a4Bo^c$R,s>sIGNIOll(=P$@E^bmbioqo<L>lL$'08f2.]"5&:1'*L@H\]1]$>]%5%,@g'T0jKRk'DD)jlA8Mj1D:n*t(MXq-9B5%+]m8kH&GeeZn693>sDmn*o;-\O1Kd\3kTOJPB^C4Q3ME%fh#.IL2(l0PkUZ$V[0H/lR/L:fNZ"s*oCOa2!!umh-p,`<W-g=a/:5?%8aZ5+o<T@%Q/WHiUu#/(:Cu/BX6N2d%,G7AO%kn&,iIceC!q/&Pg(0c*kSqbT5mrHRr</<lh]ESldJtf:IF")*U<JM=7s28*oBt#%\0>X4?J"ZBA9_E\59?,[lM@',P5/,VjDHui['$%lnLfq>]=P/;nj+X#9^1iRIM27hX6QU10:_aIIb2UlKbV-]k=N[s]V2JM-b,tP%qH\Mq:fQ%BOX#)c5]3XgVed2JhWsQOrKIt)BoRL]>sI9j`Dul^lnQaD=UFEjaW!O1%ARs-Q,^CaRV\@\lh^-anpCO0+hLceI7i,a%;cXBc=e'\/Lo'aX=$f&t.bSLC[e,Cen\%hAl:+4)XouM^LN\pnhM]et"l.&c(q4jUHJJ&^i2P?CNQNTpOIe$o(n\9,KNWW8$9Z_Y%!Tq,l%s%hL/'eF_f;m$VrE)Of7PLIW@&g)q4?hN>i#R=7JcTokN2K]@Z+%0Zk$HfE\UDb)T"S`qqbo+`p`<03i6rfYMC)(e9=;3H%K_EUWQd-QWH%P'i('!d9GXt3#;@3nSNFb17Bi`.?o+pj7g37AOeF]??#7J9WXiAO>^.NijM6q-+mmm(`1:%;%)W"iM<`?e7$Cdr#%:J^]5h"VW>IM6^ImA&I^<4g]I(d-)M`o*KV43hBPRdo@IQ^eSYNh:`rYbaXKK:%W\7,OUH`a3n3#`ZR`Co1deq<2t9HNKJb"-`HP%lQm)!>?G\oAu'IJcXhnT^GPI`l,U*i[iKRhfb0CNT&aU9R2ssSj]RICL_sO07gkiRJB8oq<g;!F)d8*0Z1HX@R5UiW\+kT^PArH7%9OK431Qren34X4K=*S&R\j8?5L+M1rR=-DkK)GTD<bSf-7*>fDXe+]%c#N8ShU$dTPG1DoCsJYpk/&K@I%UP0q4CRF,Q+"&4Cl+F%jE&=fQmD0gEEOs/B*(4][S<d/l?mtlb@/9o_!12GSjq9>k$1A`.V#rS8Q6*D)HCsoKq+Z]H%59EMk,naqud4/?[6&-Y)@>d;kYh#%4=?cqBS32pqF=-jHUAi)o*MasfJ0$iA-9P8*%:+h#b7e5q"j2@'#nSg>3q.M5NFuOMmsQVqQ!Hn[d8&N>il];.mH1*0'g0rFS*Pt%Ih4[Of`t:OK8O`O1UE.tr("F+_*7AZ+7/PSp&W0[:s/06G/:53s'+596B0CZ^Uj3$B#+cUkLG4M)e*AW`WoLq#qNXX!.9:t8[Mc4%j`CTRIH/3dc('m$D_A'3fG'1KqdMf)6MAQ1A+q2P)gPlKdMa(&T-2hDBX$O+2?F8M>*DEHD(!OZ7V^'+\%@:>qJYoFijYgA#ms<,%DKn*\/'lG%XcKBF_TS.:ag!,'/W^c0Y%FBFRIf1VGZ"kii8eYs^/Z4WLq1m;DB_\;T@$fMGqpt/T9HhsNXA//96'O<s)[I:nr'1X%o6Is]!5i-F+E-ItFC`ThfXi(7csM%@6OihYA_?u&^`NHig2-3pD=3/8C$T4956oh:5mg"7YmuDiT/=Lc(esq+Q[/JWa+!#f)a"nJ%@!_D^5S%sKqGC[8.ZTkmR*WDB%5DAgUs!QMm&$`-^M93qY*^4\CgY6$&(M))oStCY+RTa\qI<<FUd@9eY!2rF]`uUT"9*E"D=A4Y%Ie**b<G+Vm>>V%QDtp!SbnlmI3tB8.XEL>F<^!TQ5%53:6Orbl9Zc>qn(YT@q0Q";lC1iM3FLAtMmNN%86XT!6%t*C&Sp1-o`pED%\U=]R91Qf9$O)`Qgt\aBKBdO:1p#<EK?#ei1GpNTT4_Xo[5Y3<ien3.$%#u7;)g5m0=A$>&'oF+d$R:n4_/@>UbX4HpAmJNZD."2%I#X4Y>+uF<P_q#RQH^P(9\n10V^FZmEMHKSGT7aVA$-:nNer'-8K#_#G5OugZodYd^;[Dh+$fYe7<2'Q>b.*aA\.e,Mss^&%Jsi1%ru=MOh!/=#$`,=\Pt7gC+"X`3i.UN=o_L)Wm?D6\7A^ur:)'I:#Gc&JbjVW&a\jD$J/AaC&ekXE;oW$d:2YI[:<a$kgB4=k/BbhH%qr)ITG0Z*BrinTCYoB'3I(Sf[Mp'aqn=YKm&dW"g^s.N:FMM@)kI_1(-0m4355ii.Qk<HEOdd&`M%Bk.Z-qElpY.L$EZj2HKu%\g%C#<t<Ge-e5Z34bVkrm(h$$1$N!`[r<@E%\ugM`QUZ@QgH*Ko)Kio>1cYS,LkW7JNCjd<a3WAEgFN-YZkoS7t%OTG=D.34&l\B:c=%J/Or1VJpam!*JA<@!V]r]JjH=BrJ@8GPr'i(q&$/^'1hi*qNE^*c^WmeUE(l,NKq+gn<Ke0eL'F_i$g`^G/g(QA%>"ID[jO3^3W1%anf=[4WbBOD7ZL'h'Pp%E4\4]A'X3i\;*>ZjC]<1b'uSN?K/`LmI-2cmCA>?1ZjRE,lR[aligLC`t3J7:B[uFoFiO9*80d3)Ei1*%htV1J'RB)0<\VU&)Y!RV&#<Vej`_P^YB"8Hc:<<+R*k85Z<1fW&,?#tee2$/'GLLjH#0&PF8hO3<l+5q.PALuk[b'R!JAm;"i(#B%&beGLnkmbB2jFRIkCpY.,:HuSToF^1b\`B*r:Y96"kU+#LaH%,)b0rAX^fqMDckI;n&"jeJo>%ihps//e)e/G"ugIt/+:2dhiu#`%m2;.?S[`TQ_dd*JLP9dj6\/U-)`.?_!(L_m+FcuF9J8%o@=7SFCOMQO"NFAJk]S%mnM0/Z!%7W%ZOf>Ej1Km4p]npM<uCnC@H0g0%k'\i?$+T]pe9O_VG-8Jf0!(V^`ZF"NghB@\KosI]Eo*FgL-b+cLT.AB/lG@?'+pnHNJ-11?K^:hi@*WE$4tVG6=!![@A`(NZE3+/%(p$lA*(e_t8mVY5MblMXaB!Y9[H1of<<*9d;-IrVN^^1&1b9a,%.3Wb6@#,31$8Vkq+cCt12#O!\1bj<"-22Uc<k7pK95i6U6QtI%k2=G(:Mfsj.g.C5?g/IH=oSV:C+B5h4jbD!0.#t[(s'G+X38S"fSdKl/st]q4&l3%.<Qn67_\'I":0mu!K,H>:f\H2]@BgEaGu60%+&MLe/h'\*Ul<)k1m>MX#^R<CG1gdu9qp9RpQYr?F]R(D)=%0)'Oe!&6^%rV_$0TJH@1BPi)'97RT=R,cI5f:4=6+kfjcUQR!!!i%gipd9!%GAN'uBf+MU6kC!g*eVgpM@`AEJ^cS*&cf7G)WIQ(Q1o?Lj5o75K?BNu?EtJ9g,V(-jj>?-$Nkh/PXTSr^cE_!R*`8)t'!%(%N`L&[Md/o\8Icm.hCLnc2Z:"6R(J_t[=:fIQ%r&-/>F"cKZ^5!]('!unT\V"Lr#;TYL()pR#$a9D>tP(qteU+GB1lXs5`SEc4/%i<7/23s0oub@Xa)At<(:<o:]m2**PG\6KE`@V,]&rM+C`>\D@F4?e8b4kG,,\ote]G5V&k(XgUUF4RbDf^W!'d`n)qK@enOqOW`_%ULRAfm)9.%o$E^6#))+e+>4#U_miM,`C]r9oJM/DhoUT?"(4Pf_o>tGT3GJXhZZfoH:ST%Eg^d9%.hQSgo(pB6`[-[3I.!er=Dbt%&j9*]6g!c3r_-L9B[r3a.ud6881\dSS*d=[XtR$'53pH/T%8f%?<CVrZpdEH_#f^__8[()<<4b0g6tU(/-_6De;?9V@OcaA8u9R>%[T*V"V1u$,b75@UoQ"/t>\jW3:GA+aHI8RB*YdUG6?.XV1DMehMU'3(4PT/6P</;(UkY98r`g7d\d1*\(PM\A?gr<'ms+m-K4P\A%bD'&l;^>-d;ANDus'%VJQlUE!e(EK0a"7_6qlSAuO7`C;eI@I-\p7^hhk@9re`rPE]FYDZZE;'KXmkrtIKl0V&"-rHpTSFQcYfh8%<LIUr*Q8t1>)h5sZOFO.<_ori>m%R>)&0.5M['`s>VL8Ci0Q/:bi?<Ckc+abNX>D(;*^R5UF7EZQ,I@j=#^ZPmmrCLVQF-u8H+Q_%U"-)S6K.NpQTU^WK3*O9Nu:=#J)N`YM:4$;b'ASLa)=[69"-?p&]Xt[UUo)r?p9b\Lt4_n@H)icTq?2`Hf#VjG'H1:<>%c0^c0Fp%?sT]A=OV3iUU`>OkfPh=D[IbXNk]RDk48980Zg%D"(AVo3<a%1Y$,[Gf:(!4ZWPhP_fb+b[J8iE>\Cd764k+f(Mg:VN#!#!"naE'%PPTmi,"A?63B0L?AWgWF/C\-l/*f)76e316A4:i>X'C3FI[>Q49'hJ0(L;`Lhr+33?Ob:V>K5T+"`]0q5C%ujXTmDTpW)23Hbe+>%LP3JaFk7&Q?/&n/m<:F4OpZU-j%Y.f)b@e0'8*@^;)[&udUdA8#$)SKr`F>Gg_M_@E.?+=4V'?Vieu^hSir$dNX]Oi$f"'\3nB@?%Am6UoGi)LZAo"_`"ct$D.SS_0%CC>,0`5%H-Vhq&j/3Jl#_=O@-jW>F)09dW-n[<F]lsJ'2nGM6Tee3g'Ag9FladSj>@D:")50/7%6!ZJfpU/^/!9o4P)A-/S-cSZj_/RmHcZNj%]),CMNNB%J<UB0]6#WmT^7uIU`)>UEkhXUT9Lt)t_1#5#N-7ZCoFijDYQ(%=mQXl7%q5Q4i*.&oU1Zand0%MZk^2F;(h^8W$k(t#s^"&-KBXT^k#@.e2GI[Ci6rBqdLB5B\YFdPJ4>QD%%P!?;lDqg;9L91dJVp?,e]8,G%i.:0j$,>I(Hh'%3E-6K@In.7Y-33hl"XA!Ti3%sUXTn`E1Zf/JepcfDnHl;4QD$8DfB15UQ)@aa0C'D`RZ4;8Tf?G^_hA`#/es<W%lm)N<_&+<E4!s6Q48Ht5L$8Kq^*Aj:T(`Va`dl9/+#bE$E55s%B)4t1$>AMDp$:]jN`P8T_I0[:+dNM%f9M9[4<sOVM#']bZ0Q[/%DRe+W-G-pn*4*q<dIOkhEQR^;h"&$cEDbEQ-rire6^4>$//%u^=(Bp(31L#!P.BB+ebG$9`er0-^D&_;c/O)Q=ikoLl'H3HeFjS?%nP0aFp#0o6[L`\EdPqR1\DZ9#6@XB`%\DjuDmWfm\=k-KGDoI*'-Yc-\KW-YBDFetl2+i]Oma'`O;bXSX;hV\NtVWYjf2/<7Hg"H%Yh+X.`V/qHnZb_I*p(+-f^edm:6b6SQ!K5r1Br3o5"Wf8Q8-FFnM)P.E'MB,.$k&r-P9os7ESOpB1Q"QGo#j%<t7@))ZFJJ1?]C%%il&sfTG!qM=Qltt=8Apu>CL#UZ>5P=1rZt@6FWN0a6="oO6+7oMB9):a8A'j6YQ1Vp.d[C0=:^AoS[^V_[r^nq#YH_R43SX2]U`.%<r9A(Bm$1HGi&Kb`GmA$!r)9d4`+aZnP5Y>r>-h&9tP'dnbs1t7nEX@M+?#)f)EEGnS$X!k'q[9dBr6=m>8SuO70rB8(15:rI8bF%dBqB-^41(\dBiu^F.\;EVELTi`lJ[\0t3uWGnq13d^6.P'LNfu]R"_iQ;j<<*.ldoHS/;*&YFQJNp$HD2LHo5H!+*Gid7pH@LZfo%^<;Gs*S`bOC)KNKGho0jUP>Q2^k/MWJI";/aR<U9TWMT)aMg`^X.513\&GoZDY,?D)dkD`9WTa%[[_oiH$LMdr1epb8VhmDSi'bs%2T.7&&I7GDf!jLi/"T(TJ:>sE8V,*h?.-?`D4GFj,J<78ogQ*\&0KP5rSX&o.a4>TX;_RPTPDJ$,P<1aC;1,%p>@;Z^3pn^qOMF'%?Us870kAilk!:"NYO'G3>t+>tLt%`4@__qrnQ2PC0s4O8h$=Oq5@%]k@lm2c&&Zt&Uf-I!>ka.^=**-;eG'6<'.d"oiA2Ra@j>&@%H]Lr*s6P^k_C(r]TJq6^?Uf5J#r2N&$-YuYJ0@5*9BYcMrE4//TPF/@&V39;N\<="#omP#$/@'<!%1]Yl2(V1P\;2Vj,r=!PCXs0%+aEdf8FZ]t$d/iulo\T=dYsa'^T^*Ss*,T6gC+ZVDHT/R(OT@'.`O1j>9@"d8r=a?$(D3R"on`)Kt9J@;@rd'IF,rokN`/mMoHJ4%0*QE'f`u+BBc=IkDArekVFY<%UC)b@_l*]$\+B^`,Ic^iS![sEbP7;&!5DDD"AE"-Bis2sCE%?j2KgEjE@m"!d;bY/_-D8l;\Fc'%fmm.0:b7;K-4>DiN&)#^bcNdo_rN<L5d1.%f*[H,61c?[0bri>4aK*gFF<FA&A,SNQ'D33TehTm\4oa9AbnTTauKYof]`)S"++@d%;JpENgYomaf8cn2:UdAe3&L,ld\ocTRhi!@kHQfS4cenU4tk04DMH37>OaCG<\oBT4=175Y5l(H(hGYOP<(fIdlr_2\:S#9#G([l%([6Z]A[RXL0?/Sl#EPI"Op>CE1Q/(>UQMr^@Pi-e0CK!M,@dJhFrOA>9bFiK7u0"-dVOluNukET9-grZNJrk7H1*VB$b9Lcb_AeZ%m[=]?53b%bK8$\=s.M4b:;]sUs773dddD0)j$m*%AR@WK7]5aA.)*mpfRJP%jGee?erFa`W7g&i\Z;MQ(9[mIdD9'W;Vf]D/Cb"2%FU=0&Z&*?:Yu>V?cBTFk5i=KYJSYqSC5FS'5Sp:tib6)Ia'KCr>Z+5PUBitl?F$%S98`2@6+?Pt$/K+Z<\!8:`=E%4n_-]+']#^K%JTUbi>s;hrIB7>2_fMg3O7@V+D+SQ2]5F'!7/kPJ1pI`YnP>X)=T&&7W;=SYIt&IK_4)f^If&mBK/oiTFDW@OTj5g6qf;=jJ*&DC%COV_0bB90g\gDasBmq,CCUmHp(_oGb.6#KIQ"OuK@K'(l#agiBTD/+"4G+J3G&W4"Q&'P;%on!R295IuE9O];dnWElQt32%Q06@Y%G,F[6P&TB*8P[(B&(<WMo>PtOOnFJ^RP<HBA_o`C*5@ECp'\D:RM3W,9@'8dl!XYubl7T%Q;/-;^jZ3Ti!8K+:7)h8`PrMa1VAdg%"4MJmrkc8A!`j6^_-Y7Y!0$A9g2Cn_X%[Aj1j06$m?8A#;#(NaH#rJ]mQYcN&,+R?h;i*@=&S89)*/fbGV/K%/Z3j$3-f0<kIlG'%Y=I%1(2&To,>((PnbZ:"AY?dZD;Ff:;/63hr."l!RR;V<]gr+<OFp^F&fBd"kPTtacNN$Npm+NG"TD%?&+o@0&],$o$S:l4C''c]%qVn&ASJ`o2(@[EF];>i<o\b!3gT6_H_am8E*CU##`)-`CI=MQ$5oXs[S_u]O*KM]s*_7=?U@(m[)D'1H_dIb;*C.ZrFGX7Z:j5D:%YA"VTdR;nTa'R6eC.E6A>Le8;L2K;u!(Z>kYZE:BU5"E.B;doik]Q&$X?'CL0e&"XRj^8$rr9>!VV=u/be!9Yp`;+s^f*8V_&+u]%fEN7-^s1L?2FGr\):nf\T6'Cl@LctG9pLLAhm6+\?FWWOAOK(g</.!#$mD>`B'B23Yf\hTa.<)1#UUibK%!j=-rgss)"%UR4%RcM%8UiWUZgme=SUYq@H2R1@%,bo?,<_Q'G[1g7@)XWn=S)f>8pXV3[]Y92kN-/$I_+W)_<g5\HQ>TENs3u%eYDBpA*8_2(T5i'RGIFT%IsnmhS:0hnonS%S=PGpNHhIBUkNCH@(9]j+[8.RE9Ab.YVm%-YIKYS^*p1_qot65>*P&LoSk)J8CN%ejEF++co^W[/@?3OB]QO2t%SSf-&H/:=d%k_HVf]QIW;RCX:K;C2dP.g^tJOeN,<Qs9N0=]o9Ve>r8;f44tAW<c!8c%Be@<a?i&LN!=ZkD8/<f/7<^.hC`j9U*+%n,;Ie)uBsO&(g2,4BGmJ=RorcP7&^dNJH]6est#raNn0t^H(r:rk7X65^@Ha':-$E;JW?=@hP-9h^sL0V7RGmiJH2j:Yre[1!3BR%_Et1]L^q06,1o%Ao=81p5(3CpBpVXs&bb1edD]fD94m_P4=to$=.AeplcG<1mgH=XiQ]XsfWKY'1^.*.d660R95\&8G9b>mf;CPC%_n5Q`(\,7&qej^n-^OaK7_\Xj6aB]@YGf^N$TN?nGM@%:Bu*52.Ch-766-(s"AnpQ^d!QHB7?r+DdWFVr;Q<`m2ISA`>=+sc[Xb7%#@Y@X_8Gck8NAF['Y_S:q<K"GP1[^CiSd*!<+$p@FSG#Ub9_-[be",/S:GP@E<:E`0XYD/k!b)))E7DbAmYC0p-d)p)!/96I*Q2\%Qa(%4JL<0g3TL@0GNKPY#r1W\JRQK+1N6\G&>&isOn2ksCEV\;3W(?dl5GI=+V26nRQZ)g)E9VGRoOE9qq4SDOIiRubtj.V"(3qn%0B8+mjGSNeUW8s$_Ge!dqosFFHhM5WZgsAG_Xb4MQ/$c"P9r54?<g3BIXH.!&r27_kNVGoamH95o;gd+4j<p)H(ffu>?B;0X_W,,%F+/B%5"YUm@^]cbLR$giUA";.-c+fVMk3pjUX\(.`g5QKGAiLX#tbE%!tobuee4L^%e9O0hfKUR@gRn!=H>%Ygm6mJ9V3n]gm6kt%Y:XuI95s^]^6Tn\_fTb3T)#al!F4CL;K0,AoBk421;l79^,rMO?OB\sIuK`Q&D-04U*Md(cYN:T]$o=MgQn7Jh,kEM1n4)uc"1eW%6[@]Q5T(GaR`_H;)tu;D_Z7.b:J:1Qmou/cX,DES.dO.<r#^B)!je3Uc;+(eo6NY#aLSc+/0qN]mk:j1,P5I`%'5j4;HC7<WPU\[%RA[tR)ipVt&\+C/UDe^Jmes]@FSAp\UX'4A&Nb5%>_OL#doQ0WrTVHJNPP$_*qOh_NPL)_JaT=j::f0>1]f,,\MF=``!GG-dEN(^%&L270VIKh%L_6T3bMa+RO'i)cc#h1Fj#7%g>DlE9#@i>^)hDYVO+T0-gE,6QG[D[,hNc-i(#IOJS=1=6.m074R!4M)DSEjG7#\o8%@^-eq,">sn>._.K_i*44oObd_8Gc1Y@GV4s4OF(3Jr%S"r7q.>p-AMYMngFNr^4lq>aC*@o(='JTs1mV4>!o4l"`/X0Lsn*:S1pn%^JCK:E44SH25Ki_NdXj]=Ubr`4oS/qB/RWr/=_X`0^Bl%H7B5c+GZRnU@+/c6?r&fr9UVN-O-`6D8OKLg7)gjP2@iY9Mupdm7LIk%/o4nGduCO'X`?]7/qCj*iZERqA@qZu(E=39FZ+TW217'eH2%,[0]U$oHLg&2]<RoPQ7cfcQeu/ednA)2=O(@;<'G]0Zf$"C69'L+%*1N&a@O;lQr#Fd7`!kc;l+$8+q75.2s1XAV_V<i0mU/*B=t\T;c-J#?Fa-HXNTB6JIrA1"k)J-)0>VCKqoq"B_[N]eYk2hXjbaE!%NEAbi"W$(CVlS_d!UK5@=B`K=$Q6q8\+7_sbAF2+Ft"t].pJRp&8Zf!&$7Jm(W%YHDik:od_3Wi2oV?<:olj.S1gC\qX<F!SLYfE%g\d,ao54<ugV+fh=OnY?j=rp:SaYd6SOLFMXH?_>rRT&dj4beW]QZBFcQ3r6C>&CR*;*ktgq4Sqo"[Fp>[)NfE__tAJ,@JVb0,Wk%ps_d@FB?DfAU_H:"-1p\:Rc]Hmq.#2]WuSREFDLt2j*XCX3N)[#@X?=%)YcQE2i7]LW=U2n*?/!Vt*r[dXusRdN!BcMGlR'FN]Fr%7*.5?T8\m[r=I_'I(scOfX;f-#]IuLbHQcG@C<2R<qjTp8!-86Dt<>i^KV>4EHRAFD<777\n+u0UPoGKV>#"Vo>dQ5j!OE%"<u:G%+Fit9lP7rI\)T-5gEq=4cKaf?_<B[g$MJ'LG1c7)6LO(qfG"k5,e[NZ<?#i=>'R"uDd<iNhTM)Xj!3Cs32tluVorbKccoh2Gch%u%$Q.'+:6%E-%rZ-l(r&;QN]l2*pLWU,MOUcRTaa*Rc1c"@Q8uTIhHW]tYH7Zd7%("pf("I`C0C<AIfNidJu:"\_`(!IA-*""cE+m1%=jF4"#kmZ&pA6+o_q&u&M8'OQ[JXJ_HhHUM/JpQ3A`q#pjK.GlGMu")hXU?ljtG%=QbsR<Y!E]^q>B#QH[G"plIKO6@or6%G:m51%2h(9$+58:7($C/BHcWgl1*!r]OYQQEiBd6_9:rg>fKt@I@#M(,q)Y)R")kGSKe;0R]ohA-G(OV4n4)EHf^I]hZU_:S.8D>#gOJrm%)ZPe-g#beS-]S*p_XE#lm3H&e2=P2o*p1*6m&<(,.mAG_L1kaJ<5d:9=YH0,m$o/*3!M?)=Z=2BIcGI[33sH&Qq%YfMORb'=MO#D%!!_t.3<E`1qZWc)%s&gf-A:Q'"4&FSXU1WJYn3MolPIf(L=K2I'f^*sfTp211Ze3)0SCC+/qfeqqfO\F=Ydu+mC`D[ieCL[r4*Yj%cj"R#:2\4SoAWBRn`&F?L3FZpp3!h;lPYBOh:dCnI!GK8S\L%I_/EJXV=PetDe1So-$Y45Km1?0%6,g)n,?<7lp/@t^cfd7@*IjV%"JY[(8%4?2;6N-^/2$l9<g[EGji(JNmb:JkJ)JG;6dIRmH>W$=$?PIR"^5?cT3m:pn][Lcbdc].7N9OW^rO_V>7>Rqq(`du#t/&P%lCD6@+D+'/Ok=E0]Eu#9ddn^a.t+;&]($q-Usi*#9MtW]d#GNdjAD>Yg&0M])`Or!H2SVQ`Yb;19:OhRY?opc]0-,OiS*tLkC;s`%]fD:h]C6_>_*@(77J6E[S[Ubo[F0BUn]Bfj:+1LS?lo*\/:_4^J!doXS-9Hgjj`bo7U5pRDrgcl_=55@i5![hDu58`Ea7M#JWp&u%iGZU\K*=>3i8jZAPIUSQ9Lki^:(@SYnnL(nH#IK#+"Y)h=:.uA#4MQ)-XT=RU"oWh-$qMYEeAa\1#.U-A+o_g_J3eY7r+U_f?mdj%nN&g,hH[Sj"=&]LoSp]O\L9d1%Gq97d@NdH^GOfhqSdg7#g4<^Ou`LC37dXjQ;Y?q(10O5!68:B"GIeA!?>nN,B*5u(;R2@^RdE]%'<qN+H!q*MnFiK%,(:q^'L'm7`/RRP`fDE`r&<St8)AA`N=mjhA3]ld?A4$*_*e(@Ve/C(QTVRG*(FaLcd;H9Ts!R,'[P/$Ie)I-%$b_ne_il3SY0TnXcRG:&lmKgeV,&jWg`sL&$5rlWT,bMo^C?MlZCdZ4'`Lh:jH9E%E^'%RStY\,,qX"^bR\@+$C8X)rpR]MO6-_b%'6=ZZiQPE?Os&j_+3of[/Esnd)XG;/Z%=8*lT6e*El;A-$i<8?;_u/tQ\:D`Nu0Fi\^V*!QTT;mV!X9T#a[YoYb]LJ"2cFG*%X\=%^\fE`o#SY1@>,TrS!if+^lC@I5@!d#7\E0]NW.2HpdQBUNBYoP1ZKF*@O[<.c-5rP+KmIh#nIrj#b7>DEd5q:7Nd*SG]7oSPJmob%2$/C60^JH0j*`^>^(I;eneg9.N,JjY9HNepRIQ8%r\ETnE60=DJXru(8,?h0Hm93[qaV#)nj_QPT2PH*B)9CCZY-/uOpapm_"E0N%HDL#.qoh?Tp;cuTAncX6E,+OF^SC3Q#9dt)%DnID:T)MR>LiAV58UbgkDO(2$jl;]R4kT=;`VjA1cKk(dP,cam(s@KW1Ft-U=p[r%&,s]bh&bUf#]\lP\NM"Xo2fWr=;eI<l/ZTjoD[EXht@n-E[@qB<j3o8=b&c25JjMXRlqG$Kmmi"X'G5hj5#uB@ll6G4f]S"8>_U*%9-;Ga^B.8IgM%CPR8ZBcct^/`@f,`dpdh8o7Ptg.j!/jBkj)VjpY"l/q6p'g?em8?B9mIKFF3@&q0(]0Io+.U:;3:so(MJ*j6,0*%gsRjY;9#0eagX&`ZhF%2PD<R#kJ-11l/'\df%f4?mn=`bb]/:Ya/PI=_]4l8ADWFW<"%mhW=Nc2@M6W#KCUj8l]S[Rgg%.9%iiS=%S>6N1m2ACO:<8+tb,+[blQKQTQY3WYJUZH_K/G)"nt=e8lSAt2*3>IF&Q[)IgR$?J([nP\42$arC:+IC5u@CDO'DWuX6&BS$EN9X%A?oB6<m1NZeIjceQOgW1;V'OCC3_A2jk&h.k:S-_jm[#QT)2BMI1,.!H$E,0Tu:LTY`$mEb$`pVh`PEfa7rl1'3HZ&R1)tgG+lic%d`3`-a?ka,jODCN^7H3NTq&S3h5c<;-m?A"JI<bVP<m@5/sNk>i`Vd!&=FA[03M[XG`*Rd1@aQ%L#hC:Xc*./3=q/e2W<R"qWE5!%EXuW^K%SDuqME>=E:o]9l,'oD5dNWiOdfo?Ki).dPPB8alt4'E9Y0tP5Yf*I&E]Kegg'][H@m$h%a56QE>"qQ3BQ:749$lkQWRUb%p*d!'IZ`>;s'49jnp%CCp\*>:q#^^62'1mJ!u3[0_4`'\7h&G9.-O#gC6':38D-`J)lYu8TVB@#:,#M,ngYV;;S2P^e@pKk;'(nW%5XefIJ%m$G]Ga[[YbSCW#Hrl>>957lHdk;LRUa8$iQd5SjQ;Y!@(C(^q>qBT>W[MeEYLSIh_/Es\omu/bN[%>]@ROKe.t]^a%e2W%CJ0_+-1>0cD=uS=i-@P7V"Ua1@W,N/Ap1_t<J5enMo!-ii`O2EiQ9-.ot,-DXdR"c/aIVQZ&#YJLG9Uc1)@_+E`2_Jbuhp5(f)LY%\(aoHn+AC1^Va!\19.U8;IX\Z%])2No%7(b:!3"HESKJ$fn%/r=-(+sQ8SJ^qs(XT+S5!5pp.rq<Qf,;cG"W&?1n6YC)Q`qdt;1Z%-3%#\HT$([jjEr'`s5h0#MY8;a8).HYjKM\<+fDVrA0dgD+F:FNb:L]^@:866G)LJ+8='>n@]q%0IQA+92?%lPPF&REgrI3$#B*?%5'S,%73oo%l3GXnIU35e6dOc;od2f-Md,tpn!afcP75N$6N/SXO:T=B[,==Ar!1QV(!L(n/E0\Ao8d>H@:pm8dNUIb+ulriN^J3`%2*1'!EuF%^(`!IZjmM/?GYML<DP]RtSoiq,QmIYTI<kf^GR)O>r.<*A*s?l9.RuL!QG[2+\Bcu0r:dhp/:4r'@m/J1Mc]W.>14Gd%&=`!j[aong*1lR;Dm(_j]QX1pdaqRDmAgJ=M]7.P>^gp?iR>>1(SBQuRGE+4q=OWd]73#u]"2$E=8p*5R>I!94f4%3WMAPO?0hZB%qqa.XjnM'=m(@&Z:;/`:g`KL=hDG)Rqsf,3q7l4n!hL#(294[MlHe_ljl(ZXX'Dr%d8ujcM8\suVOtg;\aj7oUUdVtg;bdhLp&c]%+kNu$s8TW:EK13_m.V7XP@$n%o>q`k=B>u8s%gt2ak!fmQa4AUSmI6u=aNG@KQo3eDWT0lLP9h1HhluV]2(!D6%6=Jf7.&KAugEb%p[&bNP'(O%8;TPm+a+^]p\*I/Ki,LWZgJEueahSG$XqE:Rln<D/$JWleSdt%C]/*1/Cp_cZaIL6jhACYY@#'Ln8*Prm;W4I]C`n.%*/7kkhdA&FV?-S/HoDlt2qB,e@?[g!ILUL7r>nHpp[@?i[TBfg.s(#im=Z?sI5NR^0/-<*I)B/qc<`Y[[5*?3FD>E@4^H+X%)\\H%Q9LhQGODr&jt7H90SaXMe(q@6="Q-+(`hX,bs_);+U+A)G$hmn2S470L=s0?,;qVF%1ct_DHYeMip!'?D;k*@&3da![uQ%m?bB]6%UGG-$c\:,%5M>DYCm\^U]77Q0(@LWIfIVD$.HkgHroP44<<p.udNsuQN:.TbHgFiSj4E#Xk5UkUU-gu]-P8`o(.!$fa1+SMh(C<#%g+a(MBE'WG+>V"4i?O/-k88^J'dAG@FGrSq`kC-g#s6/e'6?pk0g>0M?i)k'GOCNr*Tri<_V=U[hF6tE%t+m&lnM!<odu"`q8Q4g%pfI75k'3YTqNaN40<$mij^Hq/E;4`<<bV,h^ZanT_klnfSn2suhXR2NfEnAD&YsXN7If:m4qLcjq_UM'jfq3;-^)L4J+*j6hTW5p%al"stgptXUo>YsZ!fhE[_ruAUbq",<\]bNF$F]&PR:?aLNjFg^Nk7ZK[C))+\P_qYlI(G8GHX;Adu3I&?*1#oKD%Lk<Hu2@W[$Ve%V^fJgm!s-l<r%K!gs*.8l-4R1>]AcIqVPC`RaLircR[3'k02Kt?-2kei6M5qV'omX%j9pU_BGF@f!AHDYOK0r/?D9A<g%Y[X6'97%b+F2@'\C-Tdp1LsSd1t\QblMi21Q*.9c0V22tO)"]t"t\UAN,Bfm8$/o]f`pm#8oa_&h@4(N8d6\[2hcCe.:rYs$6.1C%hh8'R9C%E;1T+_g;G;A=k5(auFe^/nBY._gOOJ(GZ'iY`>8&`/fhJiV^`g1YYqoH&IZep'o#Kq5.bGm2HJ;I;u]^6b/:]apG\A&J=EJq)^3>%fGtsgKa^9UnlSo6Xn7%mGN*_3<:aa=_g.oc<.HE@XUej<;ji)]\CU%[(\=[Lrk=)Ug$uC;?s^?1T<LBAd9;uojJ:3kYeP4[_mKuB%/I]B4)#\EU6QW?e2)EhB>),4D$R/SG1khZq0JuW!SAQALj`Z$5Z/b`GK@@j^i-#O\G)cb5#0<&[E/`9UaP!tGWQo*?D/SFtmQA1,%PQP"]4l6FV4P)6HHFVNLO4M0HAe&m0^fX*BiL5^sW5fF#%JOZrR!tM`_,\%/Xlh5#@4:S,KK&H*a?";cRiS#Q]mY/T4NH&T0bp'n%4mb_?V7V4p?d*,SX`('EJ"?N?@c4_.;HT-d"T'j_%3DWE?kD0chYhHfNs!YCOcS)i4USZ:p7,U`jetZY6IshRb+<:IU#]'5l?[\o%Z5h'rG:_D\%n`/Z^GCp[SBLga&Ke?:T6-:Y9[3K!>n.\SB?p0]P8uN?=<)+)*2ft5--M];9"LN#o-:+Ej-Zn(*'Nd(%=dePmn]9k%rh"mAc^P+Xk/H@riDi'Cm,rpZ3<.WWYX72_,r^>O/H2E=#;<dgo-b]Rm-B._4BG&O!9IVg6Zcq_;*R>!fDdN^F,V36m-B-Ds3!-F%J?lBY6)2m>r;k%hrWea0J-Y(&I9<Bu>W_G(Z(i9a0S9>@<m,"J!+fO;6eI5;ocSetr"">O*:Y/&&c<0(FnS?2$&mel(tnY0nB#hI%%e`-RF"5Xi*f,sV%oMn"7,di4*udLBI:iiP]1s_nnlU`E527"WURj6Shj;4#Hcl!1EGgL)h$CW8m-%[4.#mRdGKR:(#T7V4*3L>I%R5UZ:E_K]rrKCsaS(DuQAD.9ZUDKKtG<h,L5>)Q_=_4dK+#!@9dlo14C`Gg*[i<.I]RL"`\nomVUWeBbG@'&6ZhrG87V;l.T>_D'%NuGhSjI+fh'FAhE5I+4@pQ[,m'YtgWnC\f%lkDaPLqWOYa=2]K+aj61U.u<lN1?\B7'ODQSK^]7LNEc2?^;I&c7+>tOoEo%(nDk0%p7/?c"C32_6dkE;=US+3?]OIe6'hkK0QiOR&[c#-f-rJ'ma@Y-*>$TN0IPlp5nGaBA[F,;Nq)2ij3=!/+Q1`XA0J.:gD//As12i-%SW*M+200tEON8$>o:6H3_mr*W^5m%/\_J4GkR-S.J+!3#mVs_sB`GUrlUUkBk@"2Uflj"d#N$g#@X,q.s1u7?a*)jo^2%+uY3:_q%Ij^afJaL5Pn@T+]dsI-^Nf*ka2t&,]J-L5k;&5U190gtFs4k5,N!SM<B0-n.LM&b#!ndLB4(JKb_>#*E3QVC\d:jrJI#r$fGH]%!%JUB0N8%[A_5=i/6s%Ub.a?cO@r,7OBjUpuHb!e#(nPP(Ys.UKWhQ(h$p`H#o63pt?B):<F\]s.u/k*G'-[T)*nsc'cmC8CUq0r]H%L8]if2\(+<9(tF3*rdnG@jcS-MQSW\FBj^prrsp-4"fW&s"@mf0?jG(?e-<4^)`.3(Le'hnc6uXMuU9\>gYe/FXs`o:DQ.3<fkq2%0G?,!9*Vi/0*uQNF\ME7n'?^^n(kR+hhn!HO;%;'qrt"c87''DTM*EIpBpI\KYG\%/cpsS(LU9]/opK*_$o1;0E9NXL!-TOiK$Ki%rXS)Tc^#;OX_4cQpL*[B]W6:*pA-)7\@uVkiD$n3R3V)de^fm`KfS]&Wa'U(eVY.K4J2r6BO5`3`OcI)H"1W?R9LHh_L-Zi5od4>%(&[f-W4JU10u(@a*K'To)"3g$huqaCgo&JT?+T`Ll,0?g#+gSs/<k@rIdl4M-*S7&d/3P(C`mO=gGui*9D>%>97K'S9QT;_gr,c"%a%O)%[r#MZ7FpqkB@`]EnUE[NfEN?\?QU)s4?#((5=_uC+q+@lq6pmd[bb8X*emQ7B"Eq;A[?_:cS3H0jE2&8Id-]E5J;7.0&lbl%\"Pn<9D$((?m7_h>I3;?Z]nhh4"mniFt3spC?K^l^YT[G!,jDP0DCUh+s+cCMN=+B^42HiY89+OG0KRd'lS+onR=P/8\9XWIsdH-%*@Hs!r:*%+mda?Qq'*Y=nuc4'^L*o0lV1tCq#r\Q*[A=[?iI"_Min^WR4:7W&L'm/,mt7@(hQio'OL^1FUGEQkW8B(TZ4fnHsWBq%nq0sYZa`Zhcbb:ET8*+%._VD&7L`GsPlM9f'3>7iDZ^-r@3>@\.[JR08)%NcMG91/Q1PnApN]sRBh9)'c`^mX]gZ-*=S]_;b,\T_%.Cd0'*1!_&gpmU^c`MbF=)Pk+3m$+#PqU8K&f*pqE<#@MH[$13j+/!>j;6C]6NH?`'Z6R>YAdjO^\W3JD-4L.r4pk+GhWj#+PGk+%If,hgWOcfD;bbq%Vj?cNg3`_qme77\5C>Z&0QhAMl0;<<DL[-,ji7&(D]c^ls*h,!g&:U.mH:+>Q;9)<I;jUMX!uZWmXBHQ2Ddpb%9Wb@L!!\l<BqHMC!\r<`[2U2HceQ;-HL5#/A@7<scfU^`VAGTEh[_X4r9D=fl.J-ogL/id#Z\(b%Ar<</O,V/puCnuoO@A]7_l\2%MtjKf.<Ocfp$(_`ii=#*l:6-jVLtX/2!O;%SZ<-*n(bQrX8T<WCp#l=h"^HIphTj*o;;m!(>ZKBp!PIq5&MH[E8J;`X4X,V^Mj#o%qu$!V_I"tIKCY'E:L@4OI2_s+'E27,?G)`a$b\au@X@achWjamk<GS7cgM@ZPMb*.rZ(;EhYt19TNu1()lMH?$r+7`B0SPW2<k%8%-Y85j0+-A&r'q/TTD-\g/5'o2I%2G*Men";oE%4)SBD)AcOT0dP7*`D_9=S4p%=cd[u1X>Cj:$[_Qm,lcT1<!rPe>b<*WRFmt/=Q%lFV@Pi%"a*p#:j.gig\o(Vd4;97_"Vo#;EM942<5qnU>1\7%&K(L[<Q_^g/q[_*\?mO#.hc1APp@lqS0]74%=r@ktcq/(7mCXF@)%Ia.DXEpr]%)mP6Lmlm6Y\<HKYI.&ep%F<411@0Vk3gf$<hNP&F_T&+VoAo>t:i@??Q2ZWQTD+Z^or\/n*4M-'KEA?[s&7hOHM-7I%c]8KY$Sr[`Dm6i<a:eD)fBMtNhqt!Z$dNR]=6%SS65IJn@r7N\]fuB2=V2PZM&+goHkU]i@4JBqi@hpQ47>ft&a3NpEI.]\5cX:a%77C;p]m9GDFlob-0PpQ<Mbs)\&0pCQWI<G[MEfc&1@en95M=B&T?eWM^_rMV=6Jf!qX^3JoZQLto6lY+K72-G1X6p[m"5qc9VAN.%\IULZr19D0aQkfEb\S+>?R"42L^O)C2a+cnVh"NX?a*A0!Q)+9lfMcW\2h7lmH\&V\.$RE)gFAZ:=">MoA'S6iJJ?Tb"`tIWac&W%2Y\m?iCQb*7=P'[qJ16a]RDm!eIm7T@C9?r=3IFVD=Q:Am[Gg\kcQ\B^C,OA6$%GcmcE9Fl5H.'#dCtH`1,u3i5XU)d+ua"YeH:f%2!?Knf[m@9]m5>^V[Kus_3ha?aL9=i91r`\pf016!$Cs<m@F6(,@*FDooD4bG@h_$2TI9?&6DeO.*-W12\ogj9@u:W'pPhq4#E2k%\W63W4-]0GQs#AX]l:.`k^>BaUTH'3fB^(tF^^0eXI&q*#DoadDC09tQV1pJ+:[A8P;b:if0])toA3i,/64Af5Sh:GlhSC?B(4.3%p<1#>T\'.7?sR;-[_l>Ih+A*"ScKAh06V_-c#,RE'PPVbb$AHWNW0u1nB3NdTC:pQ:&e`-dp/$)@$ND#aT/GpagVR?Q.:H6QBW0Q%bJFA6/R8'G-8'^S.HA]NMqGqXR?d#<iNYAUrr(HL9,Toa=E.d4m/?*UTe&)g7666P?0I&p%Mc="K3^9mb0R7rr,a$bNbPG:'(/Dk%3^Zm`pU9P#JK^pOhNr#a\$1@,&,mW?rc^Hr@/`V,MY?VS0<!.^L!.g9m,jC:J4D/omsY\rj5XK#Qmi;(bsHXCrW2?$C"+LKH$$./%&3Ti]n&Q%kV`"[af:Td&JO:":53h/5U%kL;nA5]&pARi.KVs8)Ji8&`_T&B-"?_nH+M;$k@tTk-gIiJ)"S@t(Tf<1&9D0G/k?T"Y%m!h.rASI\>iVU#1cUOB/=+890r\\O[0O=U$L0,3%_W(a\_8\X-9$d7$9)CD0O3E7&7puuHr:T/Z#5FbC_(;1**T;i7Lr".k.QLBc%?@EuI_1>DD`m0ViG2qsc>qHTANIUYo<#l2%me='?Ri[j65-*.>2Pja,LlM:Rhg=p*XQ:VtAVe=sY=Df*m_.s>;)2T*h[PO&l-mI)%GhQRk(9Ffdqr>/0A+$F.EV]I?0+ihdIeHM&d$N.lnaY3S+"kf4EUV*CmmlB1B*5oW-3d70)1uJkO!hR0Lcp$dF6AD/2S&APk5D77%b7Q)Bj*6T,P^9Y,m:`QGPIK?SU2t/#C&6n_hbT=W*BGG=Z$2(ad>cJeqM#XFfZ;nDIb7XjkLbu*ViUPi5<X)MpM]-Za)b`FIK$F"%*dAG^4%EIs0OjkF\)31`DfkbeT2eC'T_HVq,I-k1a3eM;cKChr7R#nM[I\7"<N#SNr094:?mJnY+,[i&Cp&::dDrIq^(#GM]4BXT%ShtKS<^SeF^51h>i/Jl@+N3epn4*%%*e63k&)K9'F"lTu4Er)_]fQ464<D.4in!fj*01>Ce9JiY&BEhI)lI9X7N@HoDoAUL!t`N5%_&J#k!tiT6_&Md"rnf"Y4:9pNaOQ)R^Dqnc?8I@!IRDuf*+8'I%g)b,#4VZq=K*p_PtDjZ:oqEAE!X!"kH8.fMW&M&.e%d]E-rA$%]&1H&H"@Rs"(i^Fip$C+_I)3>^K[lQ0`#[6q&/LkJ#MAGQ06u=H&PU(3<.;;hNqHQhSIkDKOBgEo;_B=6)gui(hQ&tb4)Wb,Y2k4%7K$9#RL/g&_2J)cj"_crK#J"n*'LcZU!^&VBjjaqhA>*$^,'/%n*Cd?'uT<*!>R5E_d"Olk!'5grT4'\:0jBY!?^CGp!7Qhs)Ddc%-;YbrrV>b01al^;Hi*f[kM*3?qsF-WoG%7jK`BtKh4@6Fk#>BIThkg`p<M.kCjRY&4`rj-Hb"7kqp2Y\]0AN-q>C*dJ"KmKdc3Q0%Df;bK>!>Al?\Z!*:L+7[,VMON:c/VUc^-r8QW)#*X5Vsrs-fDR(&i\Ir7dT2=GK0AmngM3If+OB*L*K$lVs=CqW$)3^QVT7i2ZZQ%AT]J@X&/HqI[1_Ug7(^h,l150p8mrDe.7&.Dt<rYMBj(hbg]Y"K<,LCL?l>teQ"MH[9V/&b#N_a'lm0&<JP:Z!F7@DU/j@a[:`^Q%?5Y@eAV45eB%(2B32V[Jg-eW(Qt[LTg3/j<+24@HFO^uh2J/L,0lJXJK.=Gi>.+XN;5I4=<N!C>(^jBp@@_REVerN*PdNfC43:XD%4R4]I]$.Jjo;p+tpR:7Wo=TtWN(%+0@@_UF(S5a]Yq@MU];0,jD)B)=ll)+6gi"WGK31Cl&PsdVZ:^jk4ITqgp'kK^<JP_a=k=8O%\taE(AR/AW^T$Q<1nJt+0lK+sRkF<0MXOWqAKFl,'AZsBHBuYX;fg]tmT'Y<P:Y0/O+62T%?>%l_#L?rIf%8WC)Tl#8n1E,EP4_J%iI4E7rcFJ1j\urmp6Dc0[%9tO9JuIs6oB\gUYkLV2WL7q_in<b8&)139PPS=r2HF5ZrBp#gKbR9I&[K;*'(Je%KH-eNA76d-EO/U%,5e\%*dAK"WC\=Tk_5$.rO0igQXYCU[Y'2H@%G46e.0lESnZ<G]A[*PB\P4r)go]THiER$@!_`Pp_R9#@GVL2%*QN##kof?17HBQ%$d3%..W+Ye.*?k_Q@TH?6IfI,;g-(-;%0J#D1/I$cph9Ib`^m6V.G:`ecl5tp]Mm(d[1*fYt!0]1_r8BrS!gRJId$si\QZ2e5r?.%K02k+e2#/"#.8>Qi#Q.dD.VfO]rhT7S#!bmkb@5aAX9YaV3H(`<hQ)U#]"SAj[be/LNLp%U9/D!oEY7qZVmGjRIRT(PjnT-JRM`g%U'2B6iSN).JBOT=Mi\\hX'e&KJo\^c7`kJ?(mf>@7rkgBE`<]iTt2_7\3JK`"I'8R:G3/,1kVSj`>[/9<"H;<h`.$g5g=m?COHDM%h=Y$UYV?r7R],Z6$m%WEN[8AB_Ppk+PNtqalpuA*eh'XmU>`R/Q33J*F\2+C#\u\-aMPQ5O;(S"io"OO5om+`B?ad:A`UTfV<-'^%'\(OrK=\J\V\4-Ej@_Z%-eClb@ug[]*(HGXr/`?Z]O9q(JL:W!Ih4l+:`,lg`AX,JBOseS+__U]K/2Sa'Togcj_-M9-HmhC/RhjL%!El.Z[F1WpT5NPba#N^1#E#`t@t0mZp*9t"Kn=55&S=hm!2fl'9Zs(d&#j>s6ghI'RH;4A6j\'!YAlCP7gWt.P9XYK7Wd$9XK?O-%oEY7qjJ51@Prr!);Y+-DdQs)W4`,0kU4J4S>+VjA9d6u62+V0t7O`W&)C=Q,B3\?)P9q[==_jI&$e&+#FS^W<%$E)FXMQdKKQea^%nO*c2D+i:b?B2nZO;>\q9[=F-0EngY##,CBBWJA$87PCe&UCueN`P+ZW-j2g8M!Ra+AHs`<n\APe*S+J3(Ur2FV33h[c75q;i3l(%-TN:^\6t#53kT0G_j"OlQ9jP_hRM8`is!jj-j?H_2*qW@!8iCJ-0U\@3E1`K8.V[94cMha([>A;h71%M+o(,V/MHd"MT](RL*5n0%1T73l&=S?Q<j]"uaigN$0FGP>XB=tDY:OA]@R@"%4X28_hNS]a^),G(PdW_LcMM*&Pbo"o;7'\]h)538ob+^B\2#3a6nai]5"/@?%UaL2&h,7$hq+2SSYu8\Yl,BYYFWk2BVSQtZ7<o1e@5YoYhp>"7&;D*-aD3med%Z^"n=4V\-jAe(($/FH%-U,s!p!@!.SpLO1:Iie%9LS)FP-[$pVR.[uo!FofV,/".38*&L<["^>.r<(Uh5Rhp>>!Y7K-k&;"I9cT&lKP\>U#F@N(P?e#gc@E7qed*n/:X2F;MBqB^5rU%:J**jBj8r!<sj^@UBO0p61"g+-m]"i8]3t%.VEtJ8DHSl;90$!'I<l2XGO>^on>oF5L;uj?R8C,-HQRL6NYRDR;XBF#$C>_b'jRa%H*17l7_;j7S;YU?G=i-#3V@-S]u"$'LUJC2X'%Bm37]'2PJ\SJVM1Be6E"R\2(@FsZlpXsONbq+]2N.qJkNS\..QF+#:UEt4:!)T%lb]f#BPNBW6nB&$JOuR\F6N5s\eVXZ"V#JmQ;W+sN"fS0.(I(?#`C9<)WAAg]1O@P9bZ6,.Oi#Gg5(Lr=O-?!O\.;bPXeP'M<"pc%a<=9bKka4"\p],>L::E4\!GuIO>Qa&$)&?7n8\h=i'LCtpEhL&_%:91.gA.XH;@_&%-E@ci$(hHSJ"7]CP#k7`ZfU>Ukg6]3bSoP%;)lLB^i$Dc?PWu4(^X%A1%`Y@@0NpKQ*<=rk..m.$_DWG;5!t70j\6M(fE%JME7+W9JTnAb><\]PNZTrKEidTJu?D]%c^jk+%[J0%:W&6t*jer)O2k>"T&lm@;ir:o5X!%/("JfN23jb:$NfY&.Z.+iT0Qe]a:1-u+GoGj4SV;@%KTf/JTlX'XpPZId8gbV@6P/$Or]Jd%J8"]9!MHG;:Y,jW!)X[G!"kis^?m]@>8(u)"b<$b!3#8b5]%#3e91hbV?6fu6NBs1"b;3E&HF(f%fg;_dC/6=5UtrJLO0rlb^0=<%m-/INDm2lg`hrhn<;$;'[nq$6Go5=hEZtL>c!UbV'`^?U!!pa[!5pH/gqu86r_O[C7]@$S$lKDJ=FgN.@6]`U++\1&m#`E+6ZA*+%iA/SrJ5ATP1C"0l8g'3,QQo<tg)+Ej>WVi:A^:_M$`\gIU6I/GJ&R.W\jMDceU.T2)kqYuIe7q8(OYtQSFX0[fMWYs:GNQ;9soi^%l1L2<fH\:b9%jD:fFVhtaA>Oa*et.Y`?@Us`fMA'@V(kdEM9$BDTS-$p/iUq`T':6>`oShDSN-ZN2%5Y^_B3;'T5hQJFOP5,UfO"%D$]eh/rU/UMBEVeq\ugdk^]=%L*.="-#H%simI#60)7"86OB3<lbI0;_T%JOKZBV<!fGP7`T';98l-VlA*$CT#=_?'oJ^<Z@IVpR%TgkRXL(6d*don^?okg$Y]Sm%p%':JF&N!%_QmO!$"g=W*a+h*X+[aKc<`Cf\DNmJ6jq+E$N_q4A,!8a<@6hgWma!M4^^3L;g(DbG%P`/I#`aZ`sQTM:'arV4Z(4u8t#Gi])o,10M0Lf]r;M?Nj@8@WuI"G(4]co_a+moa2:XG?GC`]@.XWkQB=>L-jRE]7"OL>eo8,4"@%C`]@.Xl<cdW[#i+*WrIANG0tlLAJ@%&JYSbLlXjEiZh:`VBm;ci&[u"(_lW$8caY,@O[4f6-A100Z8ef#REqWGJUL5Y%5fL@]qfb%71^9gi-XraG5-gIaH#-(*MF=#A8MGm1-S=PFDWlR+q>*;8n(@YM3&usANCKkTmgEg%<\XlXr=G$3@6FOR3XU""hmfb_+E3IdA*Rs%03'cON)\.,1JfQ2HqAmi9W+k`>M0R4`-d;$[S%c:%)4V2P*F<=0dI&J.#0%D":,?lKLNe?phBniRKu),BmL,6KE2Gb*Yee])K\C?%Wi01i1uG.FXd[*FGe5S)9M1dkO5&TnLg_=\X*`?OWYlJ5b;5!Di174dC3h&Goq5[;m.Ii]7TRe!b2oo%fHJ+:_JKZ]?tQoG;So0$%LeX963)5Fs8C=,#g4E-E\m>`f>qr,$?bB$P25jIkIk;RNUa4?K3HXoN`DAb<=cus);'WKQdL&a5d\:JI:+BkSTfl(I1l++nYnjsu%80tD6as/=d7WO0TLlo,B4bZD80=qq_#^AubTkfFA!^dl0P6,%:S<UZILA"Fq@6o2k'oB7@76qg(7^&YROZ?@VTgW//9$4PJk?SGc%,X`s'BGY34Jp&5naoHh?)K%o2LCS=;+?sn[&Mi(<-m@A5*,ajLQLW0jTVB>XLnG[/opn;58pJW"L$/r6-Eem!K'K@1.uD4Ki!(EK%+A.FE2+7Q8671Z+D=2+bSd&,l-5ru4fmYc%D(K+6l5^)Q'u>]".M<U?_\>'YD9pU].9>NR5-.r'UR1,Gp$>NsH,(P_Wo7:8$#req%Sti,5HOg,eACF3Cf>\G".L%.6_:0$iYcYf,$#S#;;AB`i.umUoc!;7p+IPeHZ'8+-<uK8&QVm+G3Jg<t*lWIAWQh&58($ILd;5tM%3jO/jGASl3V.,g,&^5J3>0&*!D9pVHV';SZ;=("PCEij.PG2fMYT#';g4i<34V^<<F0pmUm,=h0Sr,_#^G_BC;KI6$jF64thn-b&%T$hYKU3S1`71[XMS,;2,M-C0d:dfp"O$+u[18P`*5&9uNp!N]FYlp:`Ok'NraOm@FN^DKA['J)!b[_^jB`?^f!_LWK(Q_WFQ#RMl%Stc<-`9^D?a$,s,2YY17'$Cb[?4iUH3!sNKdD._Mp5+`<+3e.39)tq.lNtj:IT5$YT*cb/)6#(XTa1iH4VW<$GA4u9jj>F^XfatK%SNqD$eTJc#]%VZj]#s^il%L/?+HJ*N*mr>U\mMQL]TO2H?,9:4]@B8h(KS9BNkW2W]a'U/XWs6*pQa6-12;dYj=n\])"C(0eCCE3%EKps$OS0YC(#H>,=s$<hlnAZi<JBoOhm>u[9h9V#$<$[0<K0-J?';h(ntgR.\IEd!=;]!Od;uGaeOV_A_X!$0Orfcl(c)DBqh?Rr%,*XGeb**+m8VHX[6?s3;4Gcn+6mthTPU@'cP6g8AK^pBTGnQh+:*PoM&^$:CjWd5C_paFSo*dmR(==1u_-<NR@8n]%i4\$6kZfc=%Cr;Ln.>T@mM_OQk"!"P&3&q>hKBn1+DGHX?A--aC!D\X8#pkOoC1XM8F5\t25E*cLf^WRj_UVAE_BTHSE0\q,dIrM7L,X4X!ZJ^"%Z7l9l1jA>k$pqi!s"8bi@_egE)1Y\V>JY!hgduKFG^qQ"WS08:@8r,rD+`7rU7<3Wjgj+](@\O0TueFI_Rc/Tnq?"?Rqnjh1T042%m8AHr,V?n26kBQpjd*\K13!#)*:THPm()h[P";d:RRs@dCeuR-=&/g.Q:pcP/o!PH,LU<Z=`*9c,/+dJ@\Heg01!I$YnX=sENUP3%Lg=4j)f*qW,F7)+q)47O'Cfo`^.jB$)sc7%q,1NCPq,;(O1;Y>m[TY8la?(_<7-]RZ>2a"=T^*VIFps?j]HJE*U`/'GOfFX(2[-j%/9fOKR"*]GT+1>:3rH<-rjgWFO83:G,*U;@=5Vu.%rj6bpEJa+<;u#OdFG_RUslWW+Kr)UOKrX6b:'tXWl3Fg8R.TPP>BB)7EiI1%Ej%Y#3p'amFK^J0;sG?d04eqHGlCF]^Zk6+LA3]-I.s'Qrj_0Kpn8FAT@NT8,r%HGQ("+rISs48;d![WH2+kue=;a.IL*'\N'.$-%Eo)IIU\sY[>g^,/R=93OfO-*\r[g!AWd/_b8]LsjXO>\r8&+/CXCcMJ+gem9rq'E0+B!_?n>Gb//X$kJQ7Kh6.51NL2.=_)!e1QJ%Ae7thDirJD9Fa9to_,mYKdBs_hcc5s\C,;p$%:?J?np;@/niopeh?lJW.[QXbDR\r]t5p*56urh``[PYA9hj`/i][eLS&A$c90-;%-mHpHr4j!j/64cb+*B,1.-gB02V&Q#1XnAHo#nnN1XC%?/ei9W2o1YT2d=jfX[rtX-+W$Bls,"B%6F-?$^X;B])8k2-:a/:#R4Z#%V+B9"r2blk:HU[dM;3ME/PAEMQ.@^BU2Dm95>P*_G/YoL3W6%E\Fb`D;FI*tr.1I+bY68XDIRlXER$f#8pd>'])?[[5b)P&/&?$m%&\MBhE>_.Z=09(![-To+Xpqu>*#C66*-DPH*%S]i&E[Egj[e&b"g&5LX'@^aEP=^UH$N;AP'=Qk=^1GQ8H(\&3tJ$m+Wm@sO`IJJ%-rZSCj!BAj;L:E%G+M%PL9sr5Sc2%66<lsBfNW$57=91'#7<'p&"Z\K>A.ll%qp?L@c'0`9tjA35'h-H<b#JsWCGH2[8oKI^,^*T%BIW80:hj<.`'Xda>?Yg`Ml1.L/TbjV([/AJ\^^:C.-,"p%OnS=+ske4a>B#;U+>ctoHj&BK'a],VU=HD/Fh*K@J<Cg7_Et<EW/;V%MS4S\aXEE<UIN^NZ'Z3[M`R$!'^%E^<i1/iq3oRMF2#O3A)\)pF0p<+L8lrb+T`;?$4q-I;Om4&>)?>-3#O"W3)+*H-P4<7:,jaJ%GtN)56e=q<#NO>$?fXGqEG*onhm5?1d;tX%qXk[%p6=RLLoqKi#TY"`AE&5\Zt*"@3&8_"F;K3p;/`1EUKT1?DVlY!@X't\O!7]>%oGE`I02JpqUW@$0;:HBJ0Jj838YY\,?t@u1Mp.r`-Y;@9jKa(GV;?;0%_`b)UBip%D%qm&XMhl?VkncgQWq;:(9IW5%ul:-eUo-3%n37h4jcP?H$A9\eW_tFM!U4;LigrQ``Z0SCq1Ejc2&ojF*gs6sn`T2s&laa7*F0V-.lojdWV!N?UP6eun=B&?Et0d!=[I*<88Dd?%$_O-,7=Ic-KtDfT4=`LBaKPo-rK'W*5GY\qn!UI96JhB&![<T4`OI1u+&WEj&#hC`1@lCOR.iu1iL/e/NfnGV-AhIM&,UKsQ&(2l%$0$_>K(p1JLD!"8q&s0kE$8[3@;tL&M@duBBl-gtiR.%Rq'#?7UT0[mhH=NlM_>W"a>ad$b'og%d].9pC6qjRf>&^VY[^))ce3FB%luNW.;X%B0lH84np?%:WMb4CB+Z)=Z4R.4..ku;V[:m9FCOs2hjWMN7bV(.//&JIP[tmSr`6L.ZQm=^JLJAr(0/>32_D;fDBB0*;%9=EZp8#QR^74Ln,N69$DC4-s+bqnCresjcY'2LHI(9/g'kk;uCOZB*&oW/@mTWo+o?lo#-GT4_&W($;H=pss[)@%m,1AcbJIQ+gO%D!217#uWTeUpXSNKgXW#mu,EK$`G9G)D83R"A_.1Go3t(eg'\t.`&c[eqTe&j^J@YAH'Z_iZLAF;H:*pW?`XS5>k(QYAbBEdn+.F%&jR%k:.5j-PqgCU224jT?Gkuk+>JUG).$h:PdXJ3b2GO$,V;?\(i`Dh8eDr[VAsKkfT`bJILqj>I^s8dTMM,e[7@*5U[2s!0KUbg%gB<l&EeI)")oe_1LS7Zq_kBuE@)AIfiDT/JW08Fe#a^]4L-uW?:1'_h8R_'%K2Rt"BF7?T5jKPlR]U-'Uo9!`;8U4!;2upKKPXq(%OUr##65$_m9au"!cnjhCHK#P_JQ<EC/<j1c1Z"b@L4YU0+Y9F##=#aW$o]UO0%V#s/<j&\+Xr)01LMO`=0A7A#),Vfd8mc!qVr26%ASnI`,Z.qW8G8fD5-QUbPFl5+/N`aLg(:c)>QfLjF^#uQRZ0L`Y]sNY0NY*jUHr>BL@l?8Sc2#+PB'-%Zrlnk&tB4#:+u\P$f\Id%:/W`YP&W0JmboM*k;^!T[\C9'"1BJ\d_IMRTh6d>f*doa$$>*Y!_TF0!u,8N2H$(.#gj_G4,h:h5m5;LiGp@hr[T:]>Y*!^Q,ma,%P=g!!Vi.noD=]/[P*=qs,JhGo['n@]A&4SM5)JeR_3ou9E@,J?ZcG*DV:'$oUD8A1.:OU7)m5H14t&k7FIZ>%U4YQgGqMT"BNisY%ehA".$ApT)L`B/$7@Ahg;'p.VQkK"q1<X\T'9#SL,,V2MQ(SM>BedS89WjX)9$4-f[jY`!kW+;NV,`I/V+hb9&rO_sXHfGK`^_Js%0ZF5;Bh'!RJi4WpBa8-gD,fi&M_UX,#9HjE`"I2LeX\CcYZFR+p^e-1-m!31<XLbl+/;eE,<B#Uae<7VHYA<H;?qYjs&A<YP=*G`%HXL6FH*E[!M:Y=MT1h@GJ.-#O\l.`_)_edt/-LDW\!9e.e`7mT7YRZ#YOWeQ2djmq7GO(TWtO1kL"DQT#oKH,;^(q(_G>m2@=b&X%N;uVk7k';RC_!7M*/3@L>*'MRT5)8R'Rl3G*]-g60'PoRi1["l7\7P5o>jiI0983R>LfKD:p5*V1GD/CJX^UunShE-7UQmbp,f2Z%KDut=7*Ce_Jkr#'B8p;TL,#t/Af+H9/"'g>R/i%p0epKu-K\`e;BpFXOX^G2$tDmS.7/hF->K=@$]f1T/@,uQ&n=U$gDFGCF2OC+%\&4T?RPCTh`gDo!`Y;C.0rCV>@SH@I@8'j!g?I_(p6Jhf']93l#jbJdHmb9MF[CV!oh6c'PXbcBb!CpM,S1%S&bPpY>n&>.;dY4C%+=,?s3HY,UZR^T)I&DqQcsSZ8PB.4>`I<Ku0I@qlIO%%7TG_^.`8RK2Kk!kPP,?qJ?)32>.Qk<@Yma9u*,gn+:o'WZM&)[j-fN(3%0d%o+PY#'jMT"+F6+AGb"9ok4B_CZ'Ub+7kQ_MBbZiqs2*+Jkp^*V9[-DZdV9qnR]_1!(eIL:5+-p"/@"@!MO7SlU2P&g8].$pHp%.4QcJO,I`t,h5u+%/&lS)43,UJ[9r![O%c\$qq38,^E-1gJT]L?Q2Y"$r!)M]PnaUPd]ah\L)E\CeO^`]@O<4)45q$.=3>pP1'%d%c#NkW[\\GA]/Gs_)430a4>d\VP($$O'Vf6.>XbqMp!_^(OT<M="B\M["-_1,4=qMp[a\*ZCH[$2JI,1DmUYQO<ou[37TSYDksfi`%k,s[i=9^*:Z:3*\(-NmHoSdV61U>!haE!5YS#B0*[\PaHJLSK9V(<aq-Y8+rYDji!#,Xp:B*=)E':NDafp6qurn>"0O!Cn]c\uI?%at,c9d4DDYAm=Psq.jIH/cuak]6#e^.EuF3!k>_/D5ilaYDji!"t#-YOcH;"[[)bCBoQ]j8kWB.L1pS?g_VgMP8BYNf\0n/F6o+A%Sr4b\^G_CN)45rk;b5=g.EO>!@7Z[EGKT9G(o"Q6,OUkK#tTFo-/F`I/-?P>kF3g_QMO-q@>?jU@*43[0Ib+!0P//dQMO-L"t!F2%$qtOalf!u-LI\Wf*lqr<*:';<jA0/e:"ND03,3mo,rM-YX4D81-J=(nk+$u/Sk0Nkj-Zf"*QLc3=#uAZ,^3\Y99Oi4QCU.`^n`7!%^]`t)'rP:$,In1ljs+GFRY53I6F%s^foqM6o8ua6Z6pgKPE>-&8G4;SHP2K)$-AclA5>Ot-R%0,OR,P0p*:p\Ip#<#B&1#d1@HLd%Ys)fSTV1SUU=9NYQ&:%bjlQ:M?0tin?A]qHR<a/pS9-8oe^AB:U\?`LE^=HH"=#@o<XVq9]Mp9oI<DYnet/IZVJ2B2R[ZWIYhIe;%9I%")D5PqTDl`J'ZS'_.Fp^f,C\&h:A_pjd(NLi$1:h+eGF95';b.6r><%1&`3uVHQi((R9$am21+`m3O;+e)Nd=iO=BDJ,M8,#;%R9!Uj<UCK`K%<8OEtqeIChqA*m]rrXgUbS:;,s*AB2_2]`1jI/9UdZ`2K]?u_.j@i.;aiY=GTX!/<sD(-]Y/AXL9g:Zs^;$<^f,*%;i;!YU9F8adk9*W>FRrWd+U&$?HR2eo0S3JVS33EC'm()W0Snc:gJ7Ea:he'\6sH=<]!8t9#lnu.]N1/DnN)jb9e%,Y18E\W0DI]%/#]+]R_j'>JmR&@;A"?q[<:9YerKj%l_Phme8F=iZ_Yb&JmO`(;N^'1bnH;Y"flDY2_(c%U6:E'CSX%YC.7Ed8aT!%$<!4c[nkjc%mGMC:O:<shI47$ldAT'H?rIV[d"O\B_U65]\tSbSA_j5J/O%,bYEVp3.V3f2!^lQ)Bj@\qgo7;%*@IWGYmue[%YB7oSha%P3)E'7%KG(FdXfRe&/t@[m#:9`]#e+B)\c+V"YG6(U6O]J;nW<je@S,P>28$nn!nma"T;K>&&iRof-`%N?I+QbtXe-mBd4cq=%NET$$='K4%Be._=3Hb3h]hSfW^.YsRBQ"e4gom1>9_4#8f;=(>2#9:iL9pS'7tTh>c[o!u8grr:3[4dV0M)Nq@NOI5&J=Z)7YN_XC=Q/u`4`sH%_7(((*<gt3!\H<]=\IZ8'PTo>IPcl<Umr!c$+j,dc)!jt.LG%T@)G#`N`+gN>0NsAN^ni[G&iB=,GMb?)c`6X7/_ZH!r@jS$P-gJ%kRB#+Y[M>%'_,VS^)8gL9eJ&GaG.h?d$Q2:[Ga.,fI3Sj<:c,J%%7Sl/qcq*T6PTX9Rs03*GqPi/"=%MeC,+DDWXaI0H0:C?ki\a%:K,+IK#]u*fi*QlkCjOJ!3[_5:Y%"NB.i0h'Kc!)d:uiRN"`:&<?t?gE1L[=XfOIuBrHO6lgT4rPEusp2%j^h=]:iEE"54"KBK%%%XUrG&%6n"L!!<'RcU/!G="5Z_;e;VqZ3`QNNQ@4`%1ams%9Q]ndHqHf1,,S.%5(@92V$1^)S6D3!.6oEXU-5+FtZ$H6342EIaG/r%_@ND];G&9+RlX_>GLSU+V]>0:aV,"d-X'Y'eQb+Wqa\=02n['X=%W7+7frl?W!WbmU^`k=?e$j+<Qtb9#pgu#)?#HB2[]::M>/Km%P5O$o<Xbu8'GWg9?-a^'6@m<J-#I3s$_sE0@?9@OjE+uN,Ag$[(Z]j/MW/XY#=BaoN+Wts3$Co:5m%th$mq^W!=ri'fa'l3m7nN*%]V.V]j\c,Vj<R<bL5<4A2UVimdd7]k']'5%XPde.\1/Gok2eEND7Is.amut$_N#:*M.-ObSC->(D%^#:*#k^g]IFjHj5neCUpT-M%W)Qf/;b,Q?`l]Xr(%jBl3#H"F,Nb/Pi(SDuk92!Z<OR!S4"fj/06cM#5&<[Y#$r;#-6JoFB5EqXU>RLE<V5!"2K_<h-4qP8\4G,s%2VJIGe*Rln[4(7tJl>)$VA_n[Oaq0//Y9b<pBuKZR/TDXiks=JT+PoB;6*j<`@1;S22]$jPtf/7;&.XFRoZoD-E=7gl1>;ZR6s16%Oq,1`_]KkXD%t4`MQ6`)9c`pDR)BXYZ:Y/2dm71`X`"qtWCb<*.B+<?@'k[U-K>7!3(YAk-o=\pQ*h7LNDm<9eE`>H2ge1kIWJ#3%j*+l@Ah?4nD+dP6%Dt\--p\79r!8oRCR+KIBq1DcM'(L"EpBadPgP"@Gt`eT<%DZoRL?$eraE"hQs7l!/s!3!$@_E[c4urf3)YAM%9`P]03G8C_oYPZ^D8Klf*_g.>KM3Ip,piKE#oa^.H8J3XQD(XdNb]jX$_)%;YcG!p/5&#Y>GegU$D*1n9AD@KZ3O+V1masg.\5,j%)AT5ePdL'42+C'WFB0>4iOL@qP(om88eVP&':l4ilE-#V]q[d?&lWD!=r9l+[/kBd7An@S.EI[0%ac]S]R[d&GZ213[%\BR.48k9%#V"khb.+7[R#*(;dg2'og.(^72VgQ*7q"1[ZQ%3C_"%<_Bfph^`)+?m;J&$pLtLa5(IHfG9#J<YB23/kqVuXrS/d7Em7oY[h,ImK%npNH:6@gbI;V"GT-Uu"e6e=@%ahTIR/KKV0GX4m<Z:iM]_2ggl2d@6m:ANSn2NZgln8+=s)**r"/!R<\Gngui;?g!mNjTIYPte/X%-^MBb?qpc6%ItJdH&mT?$nsH*^cVgb#o$o(R0/B^-<%]N!AF\9Pi;ZfV('W`S-00SGm5+R<n^/'(J[?rgLV@0+YhiY3EefI/-D\U%-e+HMK<9gd@5;Vp!17eI^_uU6@d'mZE)9uKN:p]j-Hfr?k$Tr]jZtW\eEu-G]+/@1.u:-c"?%s$8tZ?@Ymbt5R*-B^]([Nm$B6JI%&E.=/?Q*+fO@&@C&RHdn4K(bXC8X;K8VNP3/:u+(JBeue$[\Tb11Pokba;psR':Rp/;DC&+ipbL6>"IrACbiGZaL70<Ra;:QRY_3%iFir.+pOJnN0tMtegRh5YaMp49[#IF7FPO%>/n?K"Mcn"]L3?t#g/oCWk!08p2?;rEt"<k_sgg"FQ#"U5@XC]-ltRY<W\3t-O&"g%@JDC49a<ii\p!!fTm6?+>?PmE/pq:%*Z.o^;=/2k.4Jb"9i3EsP<`mn?nEgPpe2V41o<C"OJoF^Lg%\CR\=[8RrM/;"V75."$t+`%8%1_88VNMr,!sSlG*X1,`Mh_D%sT!-aC9bAc*WH1@`Ckd7>.&Y.6k)W,Jh)U3=.pT:)@W>l7*b)+6oMl8TcIjPE+3&OqMr_#*lUT%c!@[t.V"?kb-[;(@)b_dV*m(">!Al(fK(OXClf@91o>N!9O!qA_J#ll],Wap^f[A/]9)N(;%Jr.kKsG0&V)0=&!^iJJ\d"t6>):H%mRjM3ju1#W&7CSc\\_`?"n&aWF@"Q$qh,ti<!a(YFiBNASK_!,75Ili.jfM69\TgYAo*]p7jo7F%#36V:pQC!VP.P&b[*ZYUlDCT%Cg;IgK7\jn_[os."HbP^LofilaI4_L<coOjVAOp+R]HmZ2+\4=29@O?VJT;mX94SBc7FnS0mUkhXVK0>Jn3kg0pKme1^9.8/&f;g%O[m^X*FgpGX;Fh^c52,UbXJ:/R5WL-#c"*Mm;a$W_at`:&ah(+Js6:!#0Xm].8,_e&KubKUlFACb!mft*T-64@6,2Yr<t%]h+kU2%-:B8MZr)gJ:#%8aWBs-eN/lHdL`$]Qcr4Uc<?k;>+^3;`5qcfEPVP_I14I0#7nQRNa[tSc2-m_OW@Me4J$=P88.o^S5tU^G2`+3e%!C=WI?naE2g,SS[E@-=P`*csc$k-W,MM?sN+D@.q%#0LN)q*BkFF1Dg@=jFS-(:CJd5!Uc%='GU]JY)::a9(./8:n>QSL=R-Ho@+%!dU2$_k8Yngkmqb3&Jje@_EeWDXVa/X:gX?GC,U>)/MeCPhnG*WSHl@+NrImen&ZN@(2IoG$fo^h)Z21Dm-*LD-1:,900c'Xt!mk%#<4eK,?cShPXn:YTLu#l%`VtH+^Mt,;=rLP7k7,1irnD,7.Q#j!ASAdRMRl*EW7]nRp\`XmD6"\L:FB'q?0.iT0+hn`C1;k8IIhp%P_Tld%t_X"KI+SS_"Vi:M;Y+`^pHP4GWYN$?5t/g&-X+a#YA1\MTb(?dInQ^#WISA"<kB`ObE"+R_(Hn!$D#XS7E4JNAb4=_3clP%!7UW]%C.Ik,QL"O"#dhLIr-_;V8BP@mjT"Y\S&0C6JM+=bh+:Bh+r+D7]bH<!,;O2,n4^Ga3l1/;F\Q;n-7l\`.\9FpX/?]XoshY%iNb`.IaUuXKsG`ZQ:RVR;*b521j<d^!+f&MDZSa!E_g-(8NgY=Su3n,@ul/"P(aCpgpOBiOpV5:#q8FB=Lr]CgN,220p):^jDs^8%B^T'M*p$8O1do0[aHZ.ad.SG2Dj<KPmAWT=1k0?n!Mr\Y2aFMi[?>M\9j+;-eu;imZ&e%NN?sZcMUW6#V2V1rp,jp,p6CSH0?pZm%lqngXcN>Sl,%VaJ[c_=C`%&)HAK:S\rn:HU9#Z%)6q_dYb"*sucdOXp(c*&1I[[l,&jS3,9Gl^s()dqt\p$KqF#8EO=9*0^W)l,=%GAThO9$I`3&7fa4.80D1BR>aTk(='fm#J#?4Z%Y*iJ[0cUCR?[A4=RABr13B>,kAJc>*+&gpOBiP)<V4e@NYp@Fqe]=hfomlT+;L%khc!\m+PPAb+p\*0G['0-?;=$*?_+'3fn&epMQA\Y)Oa#<:Ec+ZV7eGhp4[q885@fm%JjKpToY;YH<6CSU@Gj!F$f^bmp/8gs0RM%grA]%Gs6RgG&::^-K2g[X2)oqpCf=DY\d:Z/MLAUb.UI&8o0\4R_L`nE)6V18UUC\^AZP,^--Mf:#anTna2P8p/@1Mp.9Z/,ee[>%h`cm8T>\37inGjNm?@>=8UUC\^3pXOIU_j7q^4^^ASii(O\['^F(dofWK=LV,A%KE7'@ef\RQ#6Wl)4e/.I^!:\rgGd_R,4b6>"[%n;jTWi2VVS$^RNfYP$U1W^o;1FGMRnX&>L4[7Y3^1lXL?'$OGJDcc3!Aj^qP\sDWmX&Y`Z^!41E_f^>Yrc/aFDa)++quU+T"]nth%Tgd0Cr>9Qdh9i.mI*3\IjEQgPU8q9s8%gLdggO,If2cTjiV?MAI*&E8eTFro3d!dTQuhXTf0c'Dcab+Vgo/(abSCj;R8>NIHI'&<%i_)k+\696B]!,DgG$.2d?PV?S^5ec*FJTaXF^\Hf_,WEt(UM(K8Ld\sY28bEL\OcQ,cP[m>%O],<dqYQ06mM>Cu=#c(_CFrK'9Zh%aoP=(YN(5ceWM6bIOV[EBnEkQ7J35XNYf-h'1E)Lmut8/4^?>p*,McMe$s&K19c4+5qgGsW<g8'RMS^5'snIr`fVbKm7!9mh\6n!%_Qn>YWM"Ba]1<\9ef$T\M6!T5"ZE@0KjUV2cGJ\#ie#]lDZ$K,FV$^/Do#oP><RT/F:s7+1l"i2jNbOp)M$-For64X4LHORCuu@.%MK;'d.rd0Z-`,J+'TQ3kkbiF;j"M[&6?+V+f1LB7S;-kV\Y/H!RE@Ua?kl@=aQG%USda*!QKA\jJoa.Z)tkdB2F8QacM%H6,",gT%RM$'U'?(+;H*T?^#A"SCb.F3L8"&9M7&Q+>JaX_*;-ZRk9hm!E+9_))&k"J9+hG;CcL#.J';`*L;(j-&'*/&[*ja7GDG>@nbkHbq%4Hr9O:*HGnmuu2L];1sU,4_67$JqkoMbllfL.<La.*`.\>%qW*d;\Ou:D@K]7l*200(W(0n_jJE(43q?,,I8;P\VRrp;TZQW>qaJ%1cU(Tk!!d:KAh\YSktqMb-_l,NDm<9O]Ml#,2b&]dGXL[>Sl&mK7[hZ9Cr?8`He:b/+tn^:.iWMVereopW1J`k%#7L'8lBR=Y%s+%3">Q,H_itZ\^a=#V'$T3BZ'SK8Zgp`;V$@]:<#X-L#-8bA`d6+2@89Q-FJHs9">/#X"J7[r^:'AI$3^\j(L#oF!1H(GaS!6U0]%?%33SQ^Q,l=oS<QppgVD3/rpW04_1R:,'pY[2kEU(i<-.0Nm9eq>K"E3dW6k$U%n'=6#6auKKMt!%8hmf>CW%8Aa+u/ocM==+J=%N4%e1ZO=_^&QW;Oh+:>$53cd89;E?OGX!Hn^bHA7Z<J&0,@[j@(BO+tYmkPdOqlPHdtO+_N&<8O"4n2R&]s;-\:).G%$G(,juT7@ksT%802'32>l6d1C2idoOs-&81DhGj]Wu,XgN+G8u7TQdJ.d'irgGl'TkMO3#@iqV4&p4DZ@A9.bHN%5m;uO^"UFMKEo$)3^?Fb.6@3f%[33eZius*"3Mt`AMl&g2M_I]c6Ym?saJ[ahKX;:JQ&"ZojH'H79-.*.2>i-4'*uf_H3hJeU_N!VZ<#t)1.F_fO+ku%I_q&-p``D'%Gq;oDD5;IcUS6O5c7-!$'>]*a'$QNMWQd:(-\=]>P'W"=i#G\HL-8:lNDaeS-ZTn,LJJ<L9#8#':m-ZEK(DQ:)qA'D`4_$J;L+jY%?PFKH9f#PW5&^p"oJN$JS0uJ50_"A[-meCI-og7=VOd8`6PY#D-3WL_dPe,.ZLRn`^*bmrK$Peu;GGJh3d]dIMS+X[(cd8Vm!MU[%LAa`a7L>n2,@I=;Y'+X0!N%_O;-\:Y-eCgE(,juT7D:-/NhYidJhnibh\-uf&c8/a@_O4*,[Md,A<^QEpB7-X=sVWIA!D(_:J,W@%-eCu`<^tp%H/B8T:a*;L8aHXXG7U:1J[^YE6<\QX-eF)899+uCEkT.Y@]tHiJT\D?U87.g:Y%um(,juT7GarT8nGWtBK:"Z`6j2C%%rUIH*MaD4I8ZO1Q'@K-Up:"W>1ppP-Q"etaI,#]3:E&H-&OLRiSJkK'=Qo<j+IR&9)h0pBTBQ^>s__<hC!*VSg@kkKMi?60iC_I%)]P.YKbGbDkC%AfU_CnJe#O/,Xs?8GSd?fkkj1nGTbos?&;\BIE:/$s9X#^rNY,<fi0Zhc%NJu[a?a;EKd\dt@#6%:$E+dq->a_T%7Vk-!MD?ZT-U<h&.4l?_<H59A!mMGs.kM`HOYL^Lcrb1OYC^=(Niq;BG`sLHjh\3*OpEKt<a2RIh%OQS7Dk?g[spT:;V9Dcn5r-J%D?l6Q*51.kmg'tul9[G^`'=Vm,TCa".`03ZKHlZI\&ZLag>R7o_!)pe:I9#m?A+?iaAt?g+8eR0,#q6T^mNOi0IC/r)F_DnFgQa-%?j<n+(UXa/e*h/p>c4]'F65=7^F5iiSmkfH?jm1#[4)Y$Ci7TB'q@l%%MlB/''O7M'GYE:BJiE$ettshclhum*#l"$VkZ0(#A"SC%.a"Ig$H\daB_!Jai!G-rhLkr+.E0,3Xq_%ENg!B5h;mKJIXrB>-LWo]hs='N(nJ#hm#)_jp!2_s_F#='*(kKSGB,+JAkmCqBu,@/%epr<(j.V.3RmRKX)o\4]Cf8HMU]h!X\H\e/nEBQnb+SsM;sC.,_E,I^$5f(@dL-)nK]9g%CW.uoj!5>$kJ/e(gN.QR<\([=#/1i+%B7oETQ1h)\JW'CA,ut)\L;5Lq]>e4qls4*T9ILAZZUP"N)'bt'6XUbTK*Vkfh.&-4.1Qcm<X.R6*AG]oZc#I\lmW$)8h0U!VW^r^%1%N3fQ'=EKVJQJ";Dq.g$l]gW@XsJJC'=AMmO#`2a6'm+Te8!-e*U/"=p\"G6$SAi1G3HN=Nf@!JRPZ)]EX+).tP6iP>Y"AG`A"F%/o-tT`bnLWWX,eBV6*^<jj`[icaSSjTN3*EbLk<#-n<D"N1%J]9^G3#Za9l<?H,A%0K.mK:eC#Y_pg(s=]%,7?Zrq!`MAFW_B\JA%P[b$H("mgMNAp>65iHl,Cfj-*K]5i`D5DKD1,=`Y#TmJfZu%X!XQ#eITjj;T58=p^7LmZf7ROkIE\)c]h$r$ACH;sY##$?RfiC^u%N+jdINQ!'q.PCkD;I39b3#79c/#<?/`?Eur;n%6R^*V-!^*iH\'7C0rcrA11M\ponl6dk^EbR$/KJBC[4slPU8rOP:+NtR3S5T>s%`8mck@>S\EX\<fp1t4a^KIP4cF]KpQP]T7#!TbOrKO@rN3\(X-Ou<Z(-#q#7MK5q(<cpa;i>Ee/"H/GKLWuo[FJ=X[[[eh5KF-Qp%a_PRs0UGC6Bb[;a928Wg5aG4dCo31+&5u%f8N!]Fd_ZHgFG.LZBM'-M<LQ`HChBe;De%;aSPR+UB,gGDN_8;,V%'?Fq/^;eZ?#p)%g@-_1_iU7j&V>H3D5<E)V8akB0<%B>VI*Ps3nd%\(,juT77im;YQW&5f4YW.1_l\k.jhr3'uprELWtKaJ=(:rPY,8;N`OM"dl<'E%JmPN.:FI8CZW=(dEuOJ=:Vm6lZ:SaU2?XJg.bIi;1ojH"dL\'K,G:F0;1dMG9$5fm1c@?5MBXNOA(&l32RNVZbbiji6YC"_rMh29%i[dbqF.&F-5&0+/9YE9,D(NJ6Acc/`aipP;Q^J.i=?BZQH>3B4=Ft'q6Hl6a1G^K)AS)#;OqL?l0_Nll[1Oq6biD0,(+.YYBTBc:%@Hs\7Og,&4bQRfX8JE@OR$>&BBt5PoOXs3)1j<d^^h%*ZR\W?6/5/[jo<cA45:(J;LM?21=Ft'qnq/GqR/Gklbm%(P0_NlL[@Y(T%biEB<Amo`Ob\3!ZLK*%,*2<7E@gObD'AP;[>KNn>1maU:i*7/?>0!n'k-'aj87j3^%k]Z%dTgB2]rs$r;_QC$le/no9V=a31R$6l%AgRYI3a%hrC&ZggJn8Qb6Ru<,r9u,Z%ARHBlD=;l,69DQ'>T/C<3e2,c"1L=M(\oU$WA_'?/(JaR@,7]WSC8s;J;*(A7=c"q.knK%4T=35[:E*sKh5u21D9sQ$N!6ZB+N6o)b[EZ9L+au6*`0nc"1KR^H`BD@Hs]"CL[At1DBCeKdLt-<G5jfV[/A89YE94D(It.1\pns%=d]+M;4>+@P(fm%k-(mKpQN@XZKG/m0Y&RRB^T#f/53`6pO%-0=Cro3:X-c;PV\d$8[C,DdepM8J<;TC9u>m;@I]PcpdnTc,V4BW%(-`+`T7k0Z_VuqOnWU3P8Qbm9/:J3I57*7?KZ-a(i[81)-PmQUT9RH<02Yu$=]%3ia8fET(&KaErJ5]?)H*l),&p2DHkiMQaY?UW%$X0$t`!L4U@'s#Mdig@$"CfbY(S5?gAQk<n+XpMFnY4/9hf+WM.,6LXjdDE?VIed%P(M7cR8d/u:J<fY!jUsi4k$FS[*G1.;R"m'%H<GIeeu]T($EgE!9UdZ`Y`h#"UgUU4<^f,ZA*X8,d8t[lD3ntk3ea@P[7-6m0BK[n<@/ET`*JX<WWfMY?q%2_K%3n*(%D_+Pj9V1%?$5:tAmM9:jV3l0e[F&PXMZte<[KcoZHbW!]ZW?[XRcqf,*s5GATVHl,)\)&U31l93\*d!.bc^f$O<_G9bj]qbE7YJ>Ft]B5H"mP%S]7-0<2TfJeT`:"/o"Xq\je1gUDB]d7Ko(,HZD2S<Op)4$Wbko7;LE,jd+nXb%V4'N='u;Rn6'DA^o:NCKj"-AQ%:(-++]&1+c31%(\F^YQ\m=QC7^e4/m)E>\5>O<'pVaO?R+C;<%Cj:9klUB<00.C5OA@!%M"dGoIY.9QVs#SNLEEF;N[ko6AJicL36"=O>opA?7%7r%GuS8Xqd;E#fRbQa;imb=YERJF$J'^F8'AGR4*NO6+ggVcitEKW2O5[(\5%.o<i39D)X88D-Vt(iQk$^ci(uoO$O*(HJI9:Q'6qD%%O^^IPJd)BpQ?WhJ<>c3Ua2Q2TKP<Ic*9@0()P=6DkX]1joTqFu2Q!bK)<r%3[]&C\/*j64<6(e0Eo2d;mUhhPRI<0f_O3-?P''VM%g-Ohn*R(:mR1@r$F]9,r0;rO*+Na/R;GKJrZs]Hf0SsfU?%Ul!@%lS5anZ#iV1?^>EU);3(NkLo;G&sA^sQO7#^QiMCliaL0a4^X%NMMhR/UW<LL-:8SF+RKEJmUMVGcOYr0`A=Y%dX2OiItNGrd(FE/[Fl-[RoUcJc@4ZA<^7/,tBIgHfYsKcXV5eJR478g<)5g:.+ut%?3a]0D"ud#=eV'\d:8:RK/Vhd4D=,ucO[6KXt*J+0nuN?'hk:=o?jkbg7<8kRb&;9'/XW;BgMi7U6E"5Sg^LShlt-MR1a\KLJi0,%=)#QJ%+sT"G%kLk:cdcPc5N@Plr\40O4t3QSB-8F:jG;?PmWWT>Td3P"4GY#`''gNATFu!cou`D$sFRnO$"lUZjn'"q#7Bf18=s]%P$7:G[Xp.E,#1U9H#T>&_QBUmZJP=$Q6m=0YNVda9Q/oHe2Q_KHqT4_+iod;U"bSCG0h\n&:ih]&E..0I%\82JaYaqJE@0Q*JKeH%[e#<=UQkV/ZI/6i0t90^.HLfej=pi!WE._F2-3Q/rh3+P=>0;1W`hP>95-7:#C0P6K3.61Hcb_?Tn)Pk^EK^Zb&:/;,8?7Ef-u]G%.-"8-9Gbea$=$(^=W?abo',k-H;#9K3iAtKaXCS&En$5CQb&o*P2iec>R5r?X9F"2X9%%]_E^^E@!>3l.8<@n&/6WoKG8)nGib"k%U8+sVoE'@D+b]VSWZ1cj_IuZ\1D,7>@Jp\Jnd8t5DU7kO-PTB;_0;]`JYP&25"ZE$i@:URY8cm:o;PBOKdKG@+A4Ps<n\5Ke*S+J%\8M+Je>VKiBP@8'E8i(Udi(-(&B;LE?_[f>jCY4na',>;%M_02<r9nafEQADfLg24e<Y,9Be._;3Hb3g4jJ9YD=tU&B`-Qi.gE1r%/\bBfoq?S:X08-8%emduUpV[ta])#)dC4bU)Ld;UVhX(`-EkfUO_LYo<-..Xe3E;BKpuR3+em0ti2ZU'#^dQ-CBU7G33E>N<L(\P%+?$k;n7e*/').<-Z':CHmM)#HHj[GBE]kDU;%n$M$"Lf7[1Y@'M^-KO06kEA!Xb5+>N9CYkoh3p)rG+D1j<)qRO(,^8c_q5\eD5H%8dgC6Um+bd>oYH_\ai[Z:U#"(d[1);WD;/>ok$DD^/9qIHLmA/X&Ob.$ABR;aL7%+YY;s?:4==5bAfO5LL[ri6e\9-GGXg`9$Ujb%7L9T?$_q-8E+*d-YRJ3E9rNd1.Qfcj_*5^RaRH>]Z])_00(Spjc[>!nO.ZKgWShG?/dJY,9.rGB!RB/]K2HTVC(ZujGs^@T@R9h1%9aI"m4@fdX(F>?!mfdkb8$KMI)@"N'_I?IfHKl?,LLWL2-`EC%;^[id<4RpdSDh\T67G'[M_dbsO>Hj2Ng!SEA0(>PeX="1dI\gp%3saAM-/0n8074"i@=ll'/`TM+8qHJ5E-hC>"hjA`O&>6\<26;fIUbS#L)$sETg1P*,Ah!q$_O-,SQN`R"!SI;2-b0lS4=(X.3Q@7%NNoQW5chtSUps&P1lEdpR\d,#WDZJ`@<iHVPmIQSPjkisj>"X6=k_"T(J[?rgEj(-E$)=aBg6/cE:K]Bg>E/c5,fAWA%S'V*mq8o%MH1$*UTh*2dirSW&?Tmj@qe8LLmGD&SVbNd^NLLJk8gF-!DMGm]OFIDa"L]6j&t)dnLA,nk`l/K6BP!SiE<Ik0Cif>Dg7R+@',\_%g^ED8?p8N`H]2P?;ZP^kL)gH(-u9.t?_XhL=]-mYQ#TV-9(=<1Q11YQ:ojlX]FMirEeIgt$e&$6FS^Uf;fnoe\UR)J76AJk>1DGk%X-WWq\.uIa4A'l9V;r[9-"m1898Ykd3N;XJ25(e_X75?FB:#0"N(Z$cD(&,<<(2Pk,ZXb5-m#M=<f09o-c<,+`AW[0G,%F<`4.^A%XAj#R&2\7#I:5=q^?r4%O`lcqVLl]EnW?k&W5_V=&O3"^*hnh?9K'A-0pbgo:#VeBfQ"m>d!\7M=&#l<LQ6@#UJQ9AlFb<c<5'B`%!H(L["YUPY-g\'NV,iCC-m"JU<WY---_oa[]brE`jki$D%'H#2`#q%i8m7YF_J,ru]B">$QV#j'MJGIkYd^bU,h8]Lr@:8]'G!bA%c+k[c@qCea!NEY>OC.g:#uSXhK]3"]CSa0k:>NYOZCd^p-r$GuRaEmAQ3dD>YAFU2&V*D#*g![.!]:i;V'H8^.;[P=R:X`G-.%eV%@$MXH!g6PhprW;QqmO[V%5?2!ggO(L=\aZ1O!$__745LMo$\g\;G$=f]i`Ff"/,_05r72%/;dXsPcJ@7gH[G&C1+I1@ac4,?mnqg%K2.D>U7`/[g^S:=V(W6:;8'e?_SIX#KJ^NiV>_lPQ'F)$7:#Jo(Ud-dEuU7[6p0s8;QX/GUU@bN<\Ocm.`#u,69[a+!0afgn45Pg%V:Mc[d7W2')o,GB-JSTu6FZ4a0PN&fS,%1'[`bp@%)9#lj!]WFXl'h\0+M/po>Uf(gd4:PiF*EY4WK1#P6b-fo,(BBf7*oO@@pM#%iR-o9/dG&""F@=mWYBi2*Mh/Im7E+0/&nOjKVX/a7`7PaV:^c"aiUi1*)a(*8OP&JWRF-PY`?Spdu.KA*of>WL5ggrGd&A/LCl3F%p97s=5sj@!5pPL0'U@jS,ltr;%qqD"dZiaa-.f0%=]X.PLAOG'(+:M$'Fm!(`ZV-F3q?H0fLI>2@'Wf7+"8S4,RT;6ND?j7HR#%g%66q[UV)Y-i>)DC]BrHNn*1'2M%=ThcMA7e1N:S<;$oUu9K2(,fYpAF=PTg0ui1m1eCnf7XSWG*$S"sAU9Y4[GB-.lH-Km]CYETut%J-u4MA?b"&Z3d;=$5lD]5tZ;TQRbONV9JXi>p&KWc-5FMLRb0'2:IJsk0t25B(2QEN_C0kb'2\r*_<,a2dDIfTc!'*D$3X45"ZE$%*d()"2@:NcdQ*U>'TY:h/*i&])=#s"Z3=*9*l9NYLZ1U%7I=c8N`J"/K0kX(\sMQ_N<I$5q&D^,i([*`aC1Qbg7G&S!8t']3/TcO%LZYe"-'6Ur_3TiQ)0XgbondC0SsIcb4iA]dl=V3`?(:`N4,M48DTL1Z9lNB]WcWKEQKU#WB0)_mp<h['Ylp;KnYBK)Qu.6>lp@I-%!L_`h5+9)A&jS4o$4XA*mjB=4T!mfr$2rLDYb@;Q%b'duNWbRR]3'm`(6Q/_]>d8$G!C\/f^J,(*2^8^.pmZOEQ*IHaV;Tjg1s45%F0qU@9UDtmke.q0q.jIH,W4W&LE@8`]]et/PM9d?IcEU<V*1G<1qU1@!:sGmco+"sgf)j<nFKe>DN:#TY@*u+9!<t`mb1bE8qi7#%frE,Ja%C&mSlQ\T*j'm[]=.COG7k>qTGp*F@#NLI'AB%QQ'FHI3H"2hI;&'&NWbT(Z29>2o)/uo1#4pbm5Z(e>BK=AVoAD5LZYe"%"JAHbeA)Ho9"oN;6D\r.WSG*,R_LbH5Z/IAA!%<N8,Xu]hC>XDAWDAaXnQ^hk-"CD;'$t@<N3Y_1V'-SC9"YHeK."E<gE&>o@Ltp%:b$p6ie<,26e-:3.a8>ljaQpMr3_XeP*lf)QHI+.2f_,=Sa]7(jB4T<MaHiE&'\D7Oap>NdT,^JT%Uf@HXa?emp08CrTp;iCSTlN%q=4e4C[!,jcHU,pgN0`reK.$9.p?k<B`?^f_Elk,-DB=\d-jQipE]BX')F`trLS[kT:1F^:I;fDU#2'\mn)_e3skkWKRUCod-jQi%GN=aQKRWs9*;[?u;P,N/agoklJ&+Qk]'$8\]KXK8gD1f[5s.#F#q&sc`k<M8q^3mr2,+miQ@c0G\kWDOPpV`R<aU*c`=QBKlm(%l%=0$r*;/MYBR5r*2%$]=g^?#o59(!qS9inAFPI`5UMogB@-l61&k?ADcV$'"f/Ho3]>&W^Zlah4jZ!_^6kM$F8V'J9'?$<Wm;otsj%ArB609IL]_^$",[nYJW<;VcN'+s.NLb&:?aR:&#d:$Wd+/QakVqr)9=\EZ]P@^_Zja+SK\l8-aF)raKsJ#'[@C6c3XgT8RZB5SnT%+6&l=meIFggi:ZPgl#F;MEJ%L4sIEPi`idmcUE'..8&],`gkHV03)"B+'H9Fm")4j^=gY$b^?HA?"k0pO=qmSeLS2gX)#h("2B4P%j&4cR_27MAG$HY:.jpJeXr?l(.q^L0C.OpE[:pQP'_6Y*0MoSmRak:PIeel6E$D:>X,G1iibp3MF=EKbi%HZta-d:K)HTD2`S\Bb%Ct=P&'qF2/Q)a=he@T"r`(4-hW\\j3W8O`J_H>jeK@Sq2ho:WU'b6L1#j.77I7e9dcR,e7at/Q$*'8P4inR20't]JG-_WBj-%sZV%-`NUSfkmb%`kI.'XgFAd7Q:kM06/bW"#u5DLOe;!.ces-h@QP4:*6;l(R&XRmN^be'KZfBd44r-7lZ2SIiZ]GME70,NV,^7%/%k*%R34A9Sme3kTjWID5T7S["0'gb='N1dF#-r$E[)G0/rL9`1dRH,X>DjLk4)Lb;K-M#f7<Os-/PS\"?7bBSnLAlcAgD4:IAAJTKFAJ%iqQB.3gj4lFrr_.64mqWaTPc[rkj+%n\h@WTf=E`[BcA0T:rtf:*u?:S9<H21<.e]SHETd#sAs"O&DL3agGT#N0@*Oab+B9VEp/:%q1O#q`mTP">YN^@ok$BTI>](=plm)0K*g#dj0LB+*))8tHDcg%S;YKmM>P@R)'r4RWR2?%Gq,_H!?[LQ'^'"IX]0B'eErlL1?"?^%.HcOu9#9p#EUVi-)@5tf3@P-pA9&.#0K0bPc3.9M$CiRH[pOD;/UJ-rL_QACaYdHhPssJlaN4Rba;Sm%MUtUCkeP"=[(_FP7k)a*%jBAhca>b'6crJ_3)6]XO.H)#mj<_AERo[t[1`&nSrJMXi).lfj`Ko+T%6_aVDtEaCg%gu%U4+?Ki@)*X/E';n0N2)h8s_O]>]rjg%D4uh:&(d#dRfn&Z[g,C_d9t90*Gg8?%/0*;`HdYP/+sW:5"\E=b6+HS1r(J;3Pei@8L.(\l:l;9=tp2F:Ub8fRtOg!*BBf-N2BHJ%:*+!^?&kgFE5?g`>Q[S'bRC;3bF&l58U5uB"5NfT6tjD^PH9?!-nIEmLqH;uBEQ"YN0Z4YV7mm.mXV=U_kRq=-<V;X',_mgLc"9h%JcdY]od/RULa<AHq3"u5m0@^sp+,\ZJW;L,NQ1:nqJG0K#+Ch:h,0($-+R(VIsY8+UUQ4nT:k)8D[[o,:7M*TUn'"@3s,TkY_u))%h7LJdF>=%]G$oN;-Z?aN<h3/X8l"/)kfh:aT]&[:`VP]bMEI\l2GY#D&`F^O_!J2_RZb@0gg9!![sR47oUMBHpmTk])9VL(2IPQq%0@K?hO)4_Pa4VIW@5]Q*iA2Ni+p*+"2G(?PWsu%D&n\nd#:.M?\WfSd9o&M\Cf2QfmC<F1r@uU_#RROB9-4$SbUL)Qc5O5#*+qI\%5\?QfJ;2I_Nn"7B_TYmh0J?El(I^-h,^VGB4`X48'[5PBO0/p%k'Di:RAD$;F%4Zs@rIeU6d%eZ,MF2B)ngs":G,)>WMtr\R9Q\\%36_4JP[gK%827"e'1-lbk'`&=)5\Nfo1,t*&[N9cR=oZ?"oLt>6QGfMKUF0RU?C$JLp*4`OpeEKC6$N*%@cuJ/NR*JF$Xsh-Cc30%q'=SMaC+UR7*<#]POY5[R5^[4K,m,;S.j5d:MT*&$.DXJ:-S&EW^f#8,hjg$[$1FsdnW#.H+Qo*Ng!7#ajXmf)24E9Bd`cqVO_sP%"92ncl#SZJ,]"9_-9.<6Pefq_H=`F&'h!`(:-f*Q2X5;#(FM1s,mDYJ70d_RQR944aZkYUXe%mrc^JhZ>UT;Ld[a1V3$]^_/B`.$%CUb5t9.NDr93:%?Q4(kk,KjXrA@\XqN7Q9cR?#t@Sdik#[J#,m/=/tS1sg?#YK8b'7k(l?d4orc/D'6h[B5)*%q>^b74GNIckC[X%XB1A)Q`b1HQ4(DgbJb!%a`?oD"\t!Ae*#$1f?S++L`$JQ]?YG*5WjgSL?4!e=>$PfZ&b9'@(>Mb(C%hLe;TcckFt4Z8'G6a:$/.\%Hg$%F=q=<YIUKb\"4OY"R'*i0\mR*F?2N,,?2Mu)>sKU_74ItWlBs96p2soR<diL1Ob&nj<T'*P5dQ3Ac#t'd/kQt)jZ8pj>4j`e%O@<MV%9#.p/XnXV$`G6-hEsdL:Qp]MX?.lt9eIX[fTptrlqiFN=p)Su&II6Y97aKk:!R89^93jUCA#bQZA_65jO,gLWAAFV@PlTa%`u":Y9hJaO!$<)/:o^!*/sU@\T7PGMaUob0.r<7iF'3OYQ*bKo9YZ)p14D\6$Ra1N(8fDP4sCk]>447T83R9YW,@)e0*hh0,([N:%;FXBk-:_\?"p9V@F06tF%<-Y#^!GUOUtg$)3lKY2,FXdFiS`@+00lgF"28%`O#?\K%V2kqOfG.QJFJJLJDn*CkJZlWK(EURKnFG^%PbR?jeAp2%,SIlgS4#,.Wbmo=>B8\k*'lt:\)gLqZ<RpNXo4?F8Gm4D&rH'o:*LnC[Xno4=hC1l_&@A-eN%$n#*$^bS=J/.g!$;$%3ns'-Okk$YAZr$6`rgK2,JUWjs"cE@.uiI0n67LF4prjO8=FWhiX31+`ti/9SDUWJFb/FRaaJ]sJrK;*d,W4.=ac)8``GE$1.K/u%-1W,F&Z+\Kp%5LHR>ceR_:J"6l0sC3;JH*mHI^+s!Jq5O99HhA4Zq$B=g)8MnfX!q1M%DK3M0nSjL8AD0QX+jO0-N7,[T.,6f>FO%Qchpe(2X\Thr6J2i3t+'IOk)Mf>*6pJE8D]Oa+XLp'+:`#(C>OYZ\N[C_Z5am;/)$_Z>>t2U3nJ3R"6?7"1$q@'>qma,W:dNZeL.%B'L4pg.%#0T)47K\:FEI'jW(ZINridN"7YS91B5I\arRaN/t;DPQHL!RYZo5HlU$sLRL>QfE2b3/si<qeC;Ojj>[cJd2G*$r&.3h%.AP.io1k.%ZEmJo!eWp9Nat&lNZmKn29@V\efKpoF&C(CLSdFd9oc!k<#CHYbe7)4BgPQ^E_mE*+$*1d.<8S@6Nksaj#(G1+40(M%!VT"F5(l]a_apH`&6h\T,X,WP!XQAHjImpEN(o3P6jh-APim'%G3m[iL5_MdU5fh6a_C9taG.7@"qKHg[#m0OOf#^od,GFDOu=me%6"N/<,cWVh.$.Sr#o&clM$+Y6.E@T9i1d-.j\fk%80l/&j^(=#+graG7$9hkEYBVl&[@E/8a%;Z+gU0!VcYM)(^LG1l4P.K-aMf'%`'Qd90u/`@QMfq\Me-*#8;Iu?7.R,:/$TX!Orp6(Z0]t/Bkp_$8L-NX`J=]j8:GZ<`NlTL:P]]</Wq3pb<mgc7O12Z`F@N?5Y-]1%GpG2'j@@-T66n:9Zp702FGbdXSHU9,MAI)NO5^<e(+pkq+.ZlGD!nHBnqC^^6DSjOLkX$.j@?+M/DF@tKLd7]-9hj_3>Q'jntT,7%`7Z%7$'FLV65UaAINh\uYqeL.7Md=73lPR]ecHI.Ko=.88)\JJjqj3&O%ur^G&OQ8^)$49QH>3)F68iSThKoWMM8@,"]'q"Nq<X?%LkULQ@\?MGFGe&CNId0&.6^-jIM<kJ@fF.sq9^W,bI/1J&1O&9ntT<G=AY(>8#KHG3Hk,_>F4gb+o+u_%#BVX"j)g#Yul00e5,s"%-eqKC5Do2g=L`QGIWUIdZJ4>eg;cVC\O*)_IRG_47$>-;W0$r@'FSJ6$V6'fmjF8?`Hsp&gcHcG3lPR]rqWfP[6jg[ntT=-LkWEr%j@?+M/@uqfkO0`c\u]&LXBE<>=hh%@^T:SQXBE<>=hh%@^T:SQXBE<>=hh%@^T:SQXBE<>=hh%@^T:SQXBGR_2='G)P+%>#>^*nm%c%WFho?#r]Z714cQ$)*168GGsVc")I[4@/0Ep^ZgatK:7h`S@pS>j7C\'?^%Y.`7`1J:j'gc;`=mFJ5l-?mFXqmkKO\b/Sh'V`Ns%T+.gp:3GqDlBsNf[c\2r@Lo1U0R8mFn?XW@2/6^;*LsClIVrnp[,WR=HB^PMfeKEH44WB81NS2PD3SP6F@m]K*;E[:SJnoblE8cX%SsrXtjkMAWk7ApLr+o1mGH-u1BBh.jk;LJZ=/qZq:j24Gb#FiL[Ba?HcciLAH#9>#^!_$/;<#C;#1[LeHJNgXMtf3;;/X(qD%9E\%>t_J><4b#&pZUhtldQ-\NII[SqFGBM/^Sl^1W$jV\/ssM+Vn#*\Cn-ZhVu)j:WuJ4<f^tf@p>)IZFOgKmFY5'n_EO[ei"P5*Rj./%[qbT'V=u^7.gLN4Dq49&]L%da1LAnEL9%op94QG2=a$=P\T.0R;eg.&Z(KlV[<bNIEt7BU_5H/V+eBXiM6s^X:60BuaGT*`\DR4e%1F7igC1CM9cg"FB+>'nTi4@P\`)c1(Ol[o#qf'4S\$!@<X>d!MH!T`5WY60Ugm2+kMaGkO10aR(Ct(F"kuO#L)+l8'D:bqfF>r<2%2e>6'7<^.IO.iG/9"I*BHoea_])./_g^feE[)sW*Cm&mca.=0,\37m'23sps0&tGiLf2*Z[[N#r=@jU=dW_;3IN:81Ag+SU%$>T&%MGj):Rele9C)P1[7K@S8jhQ0uXQJ\"D43kB09<3AbP5@:bC7f`R)8)CfG^Ld!nG6VPlmk0T#<M<+iufS6@\<$0b<V-I>!21MAhlC%b:X=<??#ig+^d&FgVgC6K>-#6/&NRf%bQ]rOQ&Nkr?P8N;NaO524>N,pe2f<-/qnlU2)6]QP"_S#=L0U]Q,HI%S_`RC=HCp'Us/4%lTd3JV<[DFca&L)GANcmYH'\OY#-j_Cj81A4ik_$F0-?)=iYdgR;]O=geV!MBnL*A!%A(q-ps&pVN"1m*Ul%,=>&j*GeM:+OaY2`%`@.>=11n5&r?"b#Db+lA4>pBb>\^R%kaI%;Ss5_W;WgpF$8m\/>@S2"P_3&%nn=]\&7:E#$EQ8nDZ$(nZH,TXe_3p(F^D*VK-(fn%A`U#%N<5rSWLI+[$6CS!CkR[)3K&C:,55W$)'%kZZ!'d$o9;<4BPN>lYs-gNelb3g:];X,adc4@QWh&qU:&,n+RY8gZ&hOX'jV92%>3C,Y2^cdAJi\e('"cmQ5YAj/b.q:a'B7C>Aa.F5><(8Y0EGD$UERsQA-cK85rWK0V%"!u:,fX9UtD<*Rjk0c8sPECDD`$b<lb<2%oRRI?8m=?cp'd((oEnLa3A_c9X&7&lCTX'fp_1\?,?S=+b;<DI==8Maf7"UGe#5h-U9;G$>"5JG>>:n?,-WHVLomKm0jM>bibIjp%\2bZE1n8S8#%NN#dFFW)<M/`&@M;1DZ$&Re][pmBXFG)6`n:m@l+nj<$RDj4XolJXVMWZ-m0V>(h:eB=p&hufeo":a^/@H;Ns7Vs%o.AEQ\k@oj>LLMsd\pqMfjn+;U8dFgZURB@&#Jm#<R.EfX-Tmp#jgAR"YAsIa#1!)I&sRX7*<=r8pN8?FGR+i4j<Ulg:6HR^_Wts%_eAMIdZ`5H.BEgKf0CXJ?%VBHP#<a`S!9?]iD+=m)m&=%e%/cVUcfh528!rYH4EZ)phJ;6oW!st>n3q0g+cMV)]WO>O_OB4(GQLn%7(bHW`+7MueJ"AQP&Te/gFQIYZt6k-Zj0"c_(1k(kH:eF:SU\]f^GkYZ/L4pjlU3X46"C^G7F*"ips0ncVI>?4'_l;<VO@LTJSZu%gem:^%IVaLId:"]g1ufIBF;=!lH4gTZTd)cTC0iX30JD`2V5nYoa0F=^hq(@*WX0(\ULrl;+=ThV+-FhZ];Ns1?tehW(D-i(/-"n%g]_mE6][q<MlK5r,>!/.eWuq!lGs#C(O`ba9;,3V^<[!-*V:pTR<@*tWN1$W`g-WC&1Q*S*MU-EKOLso6Q(2D2/Q;2C!oLrO\[]K%X"MG)*N_k:<\$OSojpNiW>s`:,@fLRXeN6./i@D*$^um1(l&5Fl"J$n%@`Akg`@"U#HoQ;SjUsM^)D->,Lp\gaNas_aa+*LPuc>T%H4@aho:VJ;*`K2<'ZaF(FjpG"jD3Tqm0^@hd<Z2NbfK4*qr%VGhGj-pe.@OEIB8-#`]g<=7X\''(IdYFXHhWYh,)JllBq+]OkuSY%1ePl]^8]N@8FjGhJPGJj6.;(k?/kR.Lcp"E;XiI!p$k1LihV;B-*->Gl!n`]"Y+6K/($'jgBNOOZWElBA/em4:6Ioc)),`EA7kSV%0cP$9:!$^bDD1OFk[%,DSjUsM^0@G_ICtI*O(4Z%>"D<JA/uVP=$Rs4k#0=Ag86=GBB]=_!_jUM-d,!FfJm"lZMWZm)5RBlAt&Sk%DJ]l8Rpp;u/1\-D3)!.KV&!%!F5?UQP%?am<#?@3)r$>S%<S%ZQVNhu8oLjOIlCo+SIU=EEMuSG2)(1bGs%7$Gs7=$q*:8-'='1`%A/R6b1*4QCS.9)_Fs+u:'=)H?aYITl`)i]\XX)0?erXI^)8.+eQL0"=S1NE7=.Lmp%#?T=6Y*J!lH!N1`RPBCkM4R;]BelML)s8f%)jNlb@VfOs-+5/$A>H&4R8pAF,d2_dZHT.1K=N>WB,dnPA(`?"dr)Kl6mq/0<`c3g+Q_!9dilG0Ri']7WbmaY^o6(,kGV!)PE'qM%Yj?REb&A7M(_mUd4m\\"gT9/sCg5JNH"H$Ap"KRQLXY2"TV.:=#"D4!SK!H&brnM(XrTrC5buILPC*qt;.T"J:h6l9Z),Ome59`\%7#HpYFEcptZ?<SU5p<@G_iCk2Gt&ii9@h8g=_0kZ`[Cr;bLI/,)cgdGbqnWe-gM)UNWG7UK8dDM2)1\,?!;cPB535Vg#5gl"6[%b%)[g,tJ4P;YLAVh;30G0]9^[3!bc*F@Fih+(#"VW%1?@hq-H:+B9/#R/]1nF\P-<[!QTk-619Re+r#IdNSi/XQ'`aUFgEh&I_]ig'%>OQt%n&TYA1`W:mpKur(UQt4PiQ,Vj4P;"U(fB,lUmqjL$l<JGE)@(,D!q^$Ao$HP;-)QVO\N0+7AS_=N-bsj>uW[ZB7@?cgp,kH%G3$agPl\F=gW;8QM9Ha3aB;B(ZWLJI*O'RZk(_P=^?Z?KR5@8TZfP)D#+?%lh<KkE0L#Z7G&2c6A@<8l6Y:-(W6&kLgYk713\-4!%quFp.XW:9&fig\-OP*eT[52$O,-s^4I=/N4%*V8:L=TP9Op+`t_\rF`[$I>-(<[DR`G.B7;(GdG0VBP<2k61#m[u"brn$L`TRKG^%"b]ho)'k;`A=6!@3>5sZ+KJb,,G=BC!G;WpcIjL##Ys07GTn7tNs#%kUT0H.qPasA7e;-?P%9lr[KT8r&md2U:a+4s80kSk7E14R%JC%W\[AmU*i3\f[^85M'80G?m'SCt25!"Z@e5)P.OecIp\euWQdd#X4V4)p&C<NG=>.Gt('C2T,K@VSg&ms=AZ8Q,]*Mlgijdnig%+hh/bOBQ"BBdW47-lZ5T8h"Vsk6U7(K1KiV!43J`&=?&`&/q+70f@'tS8'F6k]'*@!+/6gZYSR"6'D/.F\d'KDPc1!7aaiF@!j6A%-6SH+U(h;lC3!i2C['J\>U)*t6Hn6;!tr^-Q_NZmeAq<:"A#s`;$Qa5WQ?QT8JVIB]+<OF;o3[ri)3d@4IouUChH&^%+nJ#\l&l9%AaXcr*4l`KXBIIhRsb3AXe&q*Cho_J[1ts=R4JI8Zqg_7%p0]X,cFLbq@nj!)c]+1NN*Ou0U[3''8mHl(TLhfD,7B4[^/f4eoeC[%8A->ePZsXm]+::iEmc8,8sYjl!uB'<#-(C'!%d3_?q+^\WKA*B+#*N_"U5V-k6VpI[MIBX:iA$]Q4]bFc\]Vsbq%>2drmrOYY[6X%YP*'LFf[)K#4(R^Yu!)a"Q.fG@^59IX=JENG\,__c8mR5UUV\ijHCI>W=H&TkQ-TQ)ZshR=.Coo,F,Nl7_7#P`s,!j9t5C[R$[1k%<3)d3#XFRUmcW^ZM2bJA#$uKAcEL,gNe]jWH[odMQuP@(Qt&F1_S&%K6J9qA>*TU-KLUXBA1\\(qg^7S%1Ep<h$Fk>[K`a+rRbRK%`NjsgCe!q;&48n"f2:"+7LrTPgKLPt]8Vr_qC,^qKK-)33O[/1Mpe*J&a'1QA_22%"286DDceg+=Uca%+0b=S;uPd"nUQ>!SV:gd%IX0BZ9t6h3B_"1l"1<())'p'A2?p0U>pCG_gtDkqT%nkd.@'mTm[i3aKsIfa[@1ia[7@0u;qe?FYaZ]<!KW02htX?:@U:smYP.VC%.sVQir@,4&_@p[&4NHS)n&jA+7!j9r@bK>LDl#_1XBNB?>/..B^T:VRXBNB?>/..B^T:VRXBNB?>/..B^T:VRXBNB?>/..B^T:VR%XBNB?>(=gtlb?]<I.cSTHuo%CL[0H)9%P`rqYopNgUH(T]Da`PHMu=KQZ'XRqaWXfY$ZYVnF$7Y3$,819"A#A+5XZEJ+NNSS$tTt%oZpUMFM/;lhd>L2cT],CTDs@nRIo`USnMP[FpmoJ>F;!qiS1EhIQciEk>/MZik(P\hEUqYS(i]Wn(td-s(g$[ik*M@aeui?q/]F)%?A(Q?iepmI\%hk5[s&@d7J-1Lr5El0/q:RP^HBZdj^737[ia"cDGpH-HTL9]o^ZpEYOAYZHhHKLrT-g>^O-!"rPcBUhL>L`qO;[n%X44Ln+.)i`h8@.BT1j3c4Y&]GqR8CJrr#,/CR3t@97D$X_aB6+J+TMIr[[HZr_G]OgU#MlrRib2cekB*cekH,O*LPLj:QWiYtogZ%TDf>s"7F<1h[to'nbb&OiKKc'VjmJBfA"bmpJW0k7munFNRdOrXk!1OR!AT<2*U\iH<bB$HtqKIoMn(u7K<14ocoDYs(c]R"5[Qa%I0Ub?p=?F<LV-oRPOURr3@:.E8"%<$AA')&=SD_^+&huY<mF<e*@:;O>$?DZ8K!aC3o+W7\RUV0^+"Q&,dBg:16VBp`1l<b9CCth%C;$o>SPI3DaV4"+WHI1NH:c-qaaCamgSo=(-@7rtCEu]Wn#+b2I#Q.O+B`aoGCBatOdlp51LQ4'd<`U&jH'i`"g!iV%bELENT>Dq%ScOb4j,*I!eG;-F,BBlJ>`[KX4LJLn#<SK:23K?<Vc2o(++[a=4c<uKa6PaX>*l5RhG;01aV4"3WHD?^h+Kf[8C#9A\XZj,X!;q]%lWHXO`-OVTT''TON]!!cnTs=rl`s-\pX?B:o#1BNC40BK&NLUQ\)DQp[o;VII(Z'*ft0W&efCi1Vq1U+f_8>1rg%RhJ+(YTRr;2Q%F/_ssYupjH*&*Wt9N(RYkp:ngOton^=XVcmb-XO>'3ORuHo9@<"P2kn:Ysg@)G/V2W:uKX.le"C5D_7Hb/Q*JF^hIJ=Z4Z3#M)Mi%15K6aYZ>ccO7sYslXsp@%XnIpFdArai$Ya01+u-^J[LZH_PEM$f(ph22gal+T)'_U2[oYk"K[e,O3\HC<jLMA_t+3$Yn>qEakG2B%.KQk$foML]pgiZ(W-`5@Fb\oO7lSmq=d?2)\9d]1bN6@N]`%i1f>$1Us3mUC?G-':f0A,?oD\EPqn)T(5CRkU^N\;5hnG@an(l=O%bk7%cmlhFiGLmr9rpKdh.7GBYil,:(o<26q%r/f"&c~>%AI9_PrivateDataEnd