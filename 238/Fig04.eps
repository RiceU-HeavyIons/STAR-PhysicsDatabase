%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: delta_eta_fig6_npart_fit.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Gary Westfall
%%CreationDate: 1/12/15
%%BoundingBox: 0 0 511 380
%%HiResBoundingBox: 0 0 510.0254 379.7422
%%CropBox: 0 0 510.0254 379.7422
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.4%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.4 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2013-05-08T10:28:32-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2013-05-08T10:28:32-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-05-08T10:28:32-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXjnnqLR5Pzx0n9&#xA;J2CX0X6KgUepbG5WMfWrh2Y/uZgu0fWqfOmxMeaMu2InulH5b39j07/CflX/AKs1j/0jQ/8ANOBL&#xA;v8J+Vf8AqzWP/SND/wA04q7/AAn5V/6s1j/0jQ/804q7/CflX/qzWP8A0jQ/804q7/CflX/qzWP/&#xA;AEjQ/wDNOKu/wn5V/wCrNY/9I0P/ADTirv8ACflX/qzWP/SND/zTirv8J+Vf+rNY/wDSND/zTiqg&#xA;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&#xA;sVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica-Oblique</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Oblique</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>1.0</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:0280117407206811822AF94AE666EEEA</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0280117407206811822AF94AE666EEEA</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:bc8473d2-23c3-0f4e-be9a-520493e411c8</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:c9fb5a1d-9ec0-b24b-b446-a0647bf200e3</stRef:instanceID>
            <stRef:documentID>uuid:bc8473d2-23c3-0f4e-be9a-520493e411c8</stRef:documentID>
            <stRef:originalDocumentID>uuid:bc8473d2-23c3-0f4e-be9a-520493e411c8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811822AF94AE666EEEA</stEvt:instanceID>
                  <stEvt:when>2013-05-08T10:28:32-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -379.742 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 379.742 li
510.025 379.742 li
510.025 0 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
485.031 202.25 mo
486.781 202.25 li
487.781 202.5 li
490.531 202.5 li
491.531 202.75 li
492.281 202.75 li
440.531 198.25 mo
442.531 198.25 li
443.281 198.5 li
445.031 198.5 li
446.031 198.75 li
447.781 198.75 li
448.781 199 li
450.531 199 li
451.531 199.25 li
453.281 199.25 li
454.281 199.5 li
456.031 199.5 li
457.031 199.75 li
458.781 199.75 li
459.781 200 li
461.531 200 li
462.281 200.25 li
464.281 200.25 li
465.031 200.5 li
467.031 200.5 li
467.781 200.75 li
469.531 200.75 li
470.531 201 li
472.281 201 li
473.281 201.25 li
475.031 201.25 li
476.031 201.5 li
478.781 201.5 li
479.531 201.75 li
481.531 201.75 li
482.281 202 li
484.031 202 li
485.031 202.25 li
396.281 193.75 mo
397.031 193.75 li
398.031 194 li
398.781 194 li
399.781 194.25 li
401.531 194.25 li
402.531 194.5 li
404.281 194.5 li
405.281 194.75 li
406.031 194.75 li
407.031 195 li
408.781 195 li
409.781 195.25 li
411.531 195.25 li
412.531 195.5 li
414.281 195.5 li
415.281 195.75 li
416.031 195.75 li
417.031 196 li
418.781 196 li
419.781 196.25 li
421.531 196.25 li
422.531 196.5 li
424.281 196.5 li
425.281 196.75 li
426.031 196.75 li
427.031 197 li
428.781 197 li
429.781 197.25 li
431.531 197.25 li
432.531 197.5 li
434.281 197.5 li
435.281 197.75 li
437.031 197.75 li
437.781 198 li
439.781 198 li
440.531 198.25 li
351.781 188.75 mo
352.531 188.75 li
353.531 189 li
354.531 189 li
355.281 189.25 li
357.281 189.25 li
358.031 189.5 li
359.031 189.5 li
359.781 189.75 li
360.781 189.75 li
361.781 190 li
363.531 190 li
364.531 190.25 li
365.281 190.25 li
366.281 190.5 li
367.031 190.5 li
368.031 190.75 li
369.781 190.75 li
370.781 191 li
371.781 191 li
372.531 191.25 li
374.281 191.25 li
375.281 191.5 li
376.281 191.5 li
377.031 191.75 li
379.031 191.75 li
379.781 192 li
380.781 192 li
381.531 192.25 li
383.531 192.25 li
384.281 192.5 li
385.281 192.5 li
386.281 192.75 li
388.031 192.75 li
388.781 193 li
389.781 193 li
390.781 193.25 li
392.531 193.25 li
393.531 193.5 li
394.281 193.5 li
395.281 193.75 li
396.281 193.75 li
307.281 183 mo
308.281 183 li
309.031 183.25 li
310.031 183.25 li
310.781 183.5 li
311.781 183.5 li
312.781 183.75 li
313.531 183.75 li
314.531 184 li
315.531 184 li
316.281 184.25 li
317.281 184.25 li
318.031 184.5 li
319.031 184.5 li
320.031 184.75 li
320.781 184.75 li
321.781 185 li
322.781 185 li
323.531 185.25 li
324.531 185.25 li
325.531 185.5 li
326.281 185.5 li
327.281 185.75 li
328.031 185.75 li
329.031 186 li
330.781 186 li
331.781 186.25 li
332.781 186.25 li
333.531 186.5 li
334.531 186.5 li
335.281 186.75 li
336.281 186.75 li
337.281 187 li
338.031 187 li
339.031 187.25 li
340.031 187.25 li
340.781 187.5 li
342.531 187.5 li
343.531 187.75 li
344.531 187.75 li
345.281 188 li
346.281 188 li
347.281 188.25 li
348.031 188.25 li
349.031 188.5 li
350.781 188.5 li
351.781 188.75 li
262.781 176 mo
263.781 176.25 li
264.531 176.5 li
265.531 176.5 li
266.531 176.75 li
267.281 176.75 li
268.281 177 li
269.281 177.25 li
270.031 177.25 li
271.031 177.5 li
271.781 177.5 li
272.781 177.75 li
273.781 178 li
274.531 178 li
275.531 178.25 li
276.531 178.25 li
277.281 178.5 li
278.281 178.5 li
279.031 178.75 li
280.031 179 li
281.031 179 li
281.781 179.25 li
282.781 179.25 li
283.781 179.5 li
284.531 179.5 li
285.531 179.75 li
286.281 180 li
287.281 180 li
288.281 180.25 li
289.031 180.25 li
290.031 180.5 li
291.031 180.5 li
291.781 180.75 li
292.781 180.75 li
293.781 181 li
294.531 181 li
295.531 181.25 li
296.281 181.25 li
297.281 181.5 li
298.281 181.75 li
299.031 181.75 li
300.031 182 li
301.031 182 li
301.781 182.25 li
302.781 182.25 li
303.531 182.5 li
304.531 182.5 li
305.531 182.75 li
306.281 182.75 li
307.281 183 li
218.281 167.75 mo
219.281 168 li
220.281 168.25 li
221.031 168.25 li
222.031 168.5 li
223.031 168.75 li
223.781 169 li
224.781 169 li
225.531 169.25 li
226.531 169.5 li
227.531 169.75 li
228.281 169.75 li
229.281 170 li
230.281 170.25 li
231.031 170.25 li
232.031 170.5 li
232.781 170.75 li
233.781 171 li
234.781 171 li
235.531 171.25 li
236.531 171.5 li
237.531 171.5 li
238.281 171.75 li
239.281 172 li
240.031 172 li
241.031 172.25 li
242.031 172.5 li
242.781 172.5 li
243.781 172.75 li
244.781 173 li
245.531 173 li
246.531 173.25 li
247.281 173.5 li
248.281 173.5 li
249.281 173.75 li
250.031 174 li
251.031 174 li
252.031 174.25 li
252.781 174.5 li
253.781 174.5 li
254.781 174.75 li
255.531 174.75 li
256.531 175 li
257.281 175.25 li
258.281 175.25 li
259.281 175.5 li
260.031 175.75 li
261.031 175.75 li
262.031 176 li
262.781 176 li
174.031 157 mo
174.781 157.25 li
175.781 157.5 li
176.531 157.75 li
177.531 158 li
178.531 158.25 li
179.281 158.5 li
180.281 158.75 li
181.281 159 li
182.031 159.25 li
183.031 159.5 li
183.781 159.75 li
184.781 160 li
185.781 160.25 li
186.531 160.5 li
187.531 160.75 li
188.531 161 li
189.281 161.25 li
190.281 161.25 li
191.281 161.5 li
192.031 161.75 li
193.031 162 li
193.781 162.25 li
194.781 162.5 li
195.781 162.75 li
196.531 163 li
197.531 163.25 li
198.531 163.25 li
199.281 163.5 li
200.281 163.75 li
201.031 164 li
202.031 164.25 li
203.031 164.5 li
203.781 164.5 li
204.781 164.75 li
205.781 165 li
206.531 165.25 li
207.531 165.5 li
208.281 165.5 li
209.281 165.75 li
210.281 166 li
211.031 166.25 li
212.031 166.5 li
213.031 166.5 li
213.781 166.75 li
214.781 167 li
215.531 167.25 li
216.531 167.5 li
217.531 167.5 li
218.281 167.75 li
129.531 142.25 mo
130.281 142.5 li
131.281 142.75 li
132.281 143.25 li
133.031 143.5 li
134.031 144 li
135.031 144.25 li
135.781 144.75 li
136.781 145 li
137.531 145.25 li
138.531 145.75 li
139.531 146 li
140.281 146.25 li
141.281 146.75 li
142.281 147 li
143.031 147.25 li
144.031 147.75 li
144.781 148 li
145.781 148.25 li
146.781 148.75 li
147.531 149 li
148.531 149.25 li
149.531 149.5 li
150.281 150 li
151.281 150.25 li
152.281 150.5 li
153.031 150.75 li
154.031 151 li
154.781 151.5 li
155.781 151.75 li
156.781 152 li
157.531 152.25 li
158.531 152.5 li
159.531 152.75 li
160.281 153 li
161.281 153.5 li
162.031 153.75 li
163.031 154 li
164.031 154.25 li
164.781 154.5 li
165.781 154.75 li
166.781 155 li
167.531 155.25 li
168.531 155.5 li
169.281 155.75 li
170.281 156 li
171.281 156.25 li
172.031 156.5 li
173.031 156.75 li
174.031 157 li
85.0313 117 mo
86.0313 117.75 li
86.7813 118.25 li
87.7813 119 li
88.7813 119.75 li
89.5313 120.5 li
90.5313 121 li
91.2813 121.75 li
92.2813 122.5 li
93.2813 123 li
94.0313 123.5 li
95.0313 124.25 li
96.0313 124.75 li
96.7813 125.5 li
97.7813 126 li
98.5313 126.5 li
99.5313 127.25 li
100.531 127.75 li
101.281 128.25 li
102.281 128.75 li
103.281 129.25 li
104.031 129.75 li
105.031 130.25 li
105.781 130.75 li
106.781 131.25 li
107.781 131.75 li
108.531 132.25 li
109.531 132.75 li
110.531 133.25 li
111.281 133.75 li
112.281 134.25 li
113.031 134.75 li
114.031 135.25 li
115.031 135.5 li
115.781 136 li
116.781 136.5 li
117.781 137 li
118.531 137.25 li
119.531 137.75 li
120.531 138.25 li
121.281 138.5 li
122.281 139 li
123.031 139.5 li
124.031 139.75 li
125.031 140.25 li
125.781 140.5 li
126.781 141 li
127.781 141.25 li
128.531 141.75 li
129.531 142.25 li
40.5313 .5 mo
41.5313 7.25 li
42.2813 19.5 li
43.2813 28.5 li
44.2813 35.75 li
45.0313 41.75 li
46.0313 47 li
47.0313 51.5 li
47.7813 55.5 li
48.7813 59.25 li
49.5313 62.5 li
50.5313 65.5 li
51.5313 68.5 li
52.2813 71 li
53.2813 73.5 li
54.2813 75.75 li
55.0313 78 li
56.0313 80 li
57.0313 81.75 li
57.7813 83.75 li
58.7813 85.5 li
59.5313 87 li
60.5313 88.75 li
61.5313 90.25 li
62.2813 91.75 li
63.2813 93 li
64.2813 94.5 li
65.0313 95.75 li
66.0313 97 li
66.7813 98.25 li
67.7813 99.5 li
68.7813 100.75 li
69.5313 101.75 li
70.5313 102.75 li
71.5313 104 li
72.2813 105 li
73.2813 106 li
74.0313 107 li
75.0313 107.75 li
76.0313 108.75 li
76.7813 109.75 li
77.7813 110.5 li
78.7813 111.5 li
79.5313 112.25 li
80.5313 113 li
81.2813 113.75 li
82.2813 114.75 li
83.2813 115.5 li
84.0313 116.25 li
85.0313 117 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 0 0 rgb
@
[2 2 ] 0 dsh
485.031 174.5 mo
486.031 174.75 li
488.781 174.75 li
489.531 175 li
492.281 175 li
440.531 171.25 mo
442.531 171.25 li
443.281 171.5 li
445.031 171.5 li
446.031 171.75 li
448.781 171.75 li
449.781 172 li
451.531 172 li
452.281 172.25 li
455.031 172.25 li
456.031 172.5 li
457.781 172.5 li
458.781 172.75 li
461.531 172.75 li
462.281 173 li
465.031 173 li
466.031 173.25 li
467.781 173.25 li
468.781 173.5 li
471.531 173.5 li
472.281 173.75 li
475.031 173.75 li
476.031 174 li
477.781 174 li
478.781 174.25 li
481.531 174.25 li
482.281 174.5 li
485.031 174.5 li
396.281 167.5 mo
398.031 167.5 li
398.781 167.75 li
400.781 167.75 li
401.531 168 li
403.531 168 li
404.281 168.25 li
406.031 168.25 li
407.031 168.5 li
408.781 168.5 li
409.781 168.75 li
411.531 168.75 li
412.531 169 li
415.281 169 li
416.031 169.25 li
418.031 169.25 li
418.781 169.5 li
420.531 169.5 li
421.531 169.75 li
423.281 169.75 li
424.281 170 li
427.031 170 li
428.031 170.25 li
429.781 170.25 li
430.531 170.5 li
432.531 170.5 li
433.281 170.75 li
436.031 170.75 li
437.031 171 li
438.781 171 li
439.781 171.25 li
440.531 171.25 li
351.781 163.25 mo
352.531 163.25 li
353.531 163.5 li
355.281 163.5 li
356.281 163.75 li
358.031 163.75 li
359.031 164 li
360.781 164 li
361.781 164.25 li
362.531 164.25 li
363.531 164.5 li
365.281 164.5 li
366.281 164.75 li
368.031 164.75 li
369.031 165 li
370.781 165 li
371.781 165.25 li
373.531 165.25 li
374.281 165.5 li
376.281 165.5 li
377.031 165.75 li
379.031 165.75 li
379.781 166 li
381.531 166 li
382.531 166.25 li
383.531 166.25 li
384.281 166.5 li
386.281 166.5 li
387.031 166.75 li
388.781 166.75 li
389.781 167 li
391.531 167 li
392.531 167.25 li
395.281 167.25 li
396.281 167.5 li
307.281 158.25 mo
308.281 158.5 li
310.031 158.5 li
310.781 158.75 li
311.781 158.75 li
312.781 159 li
313.531 159 li
314.531 159.25 li
316.281 159.25 li
317.281 159.5 li
318.031 159.5 li
319.031 159.75 li
320.781 159.75 li
321.781 160 li
322.781 160 li
323.531 160.25 li
324.531 160.25 li
325.531 160.5 li
327.281 160.5 li
328.031 160.75 li
329.031 160.75 li
330.031 161 li
331.781 161 li
332.781 161.25 li
333.531 161.25 li
334.531 161.5 li
336.281 161.5 li
337.281 161.75 li
339.031 161.75 li
340.031 162 li
340.781 162 li
341.781 162.25 li
343.531 162.25 li
344.531 162.5 li
345.281 162.5 li
346.281 162.75 li
348.031 162.75 li
349.031 163 li
350.781 163 li
351.781 163.25 li
262.781 152.5 mo
263.781 152.75 li
264.531 152.75 li
265.531 153 li
266.531 153 li
267.281 153.25 li
268.281 153.25 li
269.281 153.5 li
270.031 153.5 li
271.031 153.75 li
271.781 153.75 li
272.781 154 li
273.781 154 li
274.531 154.25 li
275.531 154.25 li
276.531 154.5 li
277.281 154.5 li
278.281 154.75 li
280.031 154.75 li
281.031 155 li
281.781 155 li
282.781 155.25 li
283.781 155.25 li
284.531 155.5 li
285.531 155.5 li
286.281 155.75 li
287.281 155.75 li
288.281 156 li
289.031 156 li
290.031 156.25 li
291.031 156.25 li
291.781 156.5 li
292.781 156.5 li
293.781 156.75 li
295.531 156.75 li
296.281 157 li
297.281 157 li
298.281 157.25 li
299.031 157.25 li
300.031 157.5 li
301.031 157.5 li
301.781 157.75 li
303.531 157.75 li
304.531 158 li
305.531 158 li
306.281 158.25 li
307.281 158.25 li
218.281 145.5 mo
219.281 145.5 li
220.281 145.75 li
221.031 146 li
222.031 146 li
223.031 146.25 li
223.781 146.5 li
224.781 146.5 li
225.531 146.75 li
226.531 146.75 li
227.531 147 li
228.281 147.25 li
229.281 147.25 li
230.281 147.5 li
231.031 147.5 li
232.031 147.75 li
232.781 148 li
233.781 148 li
234.781 148.25 li
235.531 148.25 li
236.531 148.5 li
237.531 148.75 li
238.281 148.75 li
239.281 149 li
240.031 149 li
241.031 149.25 li
242.031 149.5 li
242.781 149.5 li
243.781 149.75 li
244.781 149.75 li
245.531 150 li
246.531 150 li
247.281 150.25 li
248.281 150.25 li
249.281 150.5 li
250.031 150.75 li
251.031 150.75 li
252.031 151 li
252.781 151 li
253.781 151.25 li
254.781 151.25 li
255.531 151.5 li
256.531 151.5 li
257.281 151.75 li
258.281 151.75 li
259.281 152 li
260.031 152 li
261.031 152.25 li
262.031 152.25 li
262.781 152.5 li
174.031 136.5 mo
174.781 136.5 li
175.781 136.75 li
176.531 137 li
177.531 137.25 li
178.531 137.5 li
179.281 137.75 li
180.281 137.75 li
181.281 138 li
182.031 138.25 li
183.031 138.5 li
183.781 138.75 li
184.781 138.75 li
185.781 139 li
186.531 139.25 li
187.531 139.5 li
188.531 139.75 li
189.281 139.75 li
190.281 140 li
191.281 140.25 li
192.031 140.5 li
193.031 140.5 li
193.781 140.75 li
194.781 141 li
195.781 141.25 li
196.531 141.25 li
197.531 141.5 li
198.531 141.75 li
199.281 141.75 li
200.281 142 li
201.031 142.25 li
202.031 142.5 li
203.031 142.5 li
203.781 142.75 li
204.781 143 li
205.781 143 li
206.531 143.25 li
207.531 143.5 li
208.281 143.5 li
209.281 143.75 li
210.281 144 li
211.031 144.25 li
212.031 144.25 li
213.031 144.5 li
213.781 144.75 li
214.781 144.75 li
215.531 145 li
216.531 145 li
217.531 145.25 li
218.281 145.5 li
129.531 123.75 mo
130.281 124 li
131.281 124.25 li
132.281 124.75 li
133.031 125 li
134.031 125.25 li
135.031 125.5 li
135.781 125.75 li
136.781 126.25 li
137.531 126.5 li
138.531 126.75 li
139.531 127 li
140.281 127.25 li
141.281 127.5 li
142.281 127.75 li
143.031 128.25 li
144.031 128.5 li
144.781 128.75 li
145.781 129 li
146.781 129.25 li
147.531 129.5 li
148.531 129.75 li
149.531 130 li
150.281 130.25 li
151.281 130.5 li
152.281 130.75 li
153.031 131 li
154.031 131.25 li
154.781 131.5 li
155.781 131.75 li
156.781 132 li
157.531 132.25 li
158.531 132.5 li
159.531 132.75 li
160.281 133 li
161.281 133.25 li
162.031 133.5 li
163.031 133.75 li
164.031 134 li
164.781 134.25 li
165.781 134.5 li
166.781 134.75 li
167.531 134.75 li
168.531 135 li
169.281 135.25 li
170.281 135.5 li
171.281 135.75 li
172.031 136 li
173.031 136.25 li
174.031 136.5 li
85.0313 102.25 mo
86.0313 103 li
86.7813 103.5 li
87.7813 104.25 li
88.7813 104.75 li
89.5313 105.25 li
90.5313 105.75 li
91.2813 106.5 li
92.2813 107 li
93.2813 107.5 li
94.0313 108 li
95.0313 108.5 li
96.0313 109 li
96.7813 109.5 li
97.7813 110 li
98.5313 110.5 li
99.5313 111 li
100.531 111.5 li
101.281 112 li
102.281 112.5 li
103.281 112.75 li
104.031 113.25 li
105.031 113.75 li
105.781 114.25 li
106.781 114.5 li
107.781 115 li
108.531 115.5 li
109.531 115.75 li
110.531 116.25 li
111.281 116.5 li
112.281 117 li
113.031 117.5 li
114.031 117.75 li
115.031 118.25 li
115.781 118.5 li
116.781 119 li
117.781 119.25 li
118.531 119.75 li
119.531 120 li
120.531 120.25 li
121.281 120.75 li
122.281 121 li
123.031 121.5 li
124.031 121.75 li
125.031 122 li
125.781 122.5 li
126.781 122.75 li
127.781 123 li
128.531 123.5 li
129.531 123.75 li
40.5313 .5 mo
41.5313 9.5 li
42.2813 19.75 li
43.2813 27.25 li
44.2813 33.5 li
45.0313 38.75 li
46.0313 43 li
47.0313 47 li
47.7813 50.25 li
48.7813 53.5 li
49.5313 56.25 li
50.5313 58.75 li
51.5313 61.25 li
52.2813 63.5 li
53.2813 65.5 li
54.2813 67.5 li
55.0313 69.25 li
56.0313 71 li
57.0313 72.5 li
57.7813 74.25 li
58.7813 75.75 li
59.5313 77 li
60.5313 78.5 li
61.5313 79.75 li
62.2813 81 li
63.2813 82.25 li
64.2813 83.25 li
65.0313 84.5 li
66.0313 85.5 li
66.7813 86.5 li
67.7813 87.5 li
68.7813 88.5 li
69.5313 89.5 li
70.5313 90.5 li
71.5313 91.25 li
72.2813 92.25 li
73.2813 93 li
74.0313 93.75 li
75.0313 94.75 li
76.0313 95.5 li
76.7813 96.25 li
77.7813 97 li
78.7813 97.75 li
79.5313 98.25 li
80.5313 99 li
81.2813 99.75 li
82.2813 100.5 li
83.2813 101 li
84.0313 101.75 li
85.0313 102.25 li
1 0 1 rgb
@
[] 0 dsh
485.031 167 mo
486.031 167 li
486.781 167.25 li
489.531 167.25 li
490.531 167.5 li
492.281 167.5 li
440.531 163.75 mo
441.531 164 li
444.281 164 li
445.031 164.25 li
447.781 164.25 li
448.781 164.5 li
450.531 164.5 li
451.531 164.75 li
454.281 164.75 li
455.031 165 li
457.781 165 li
458.781 165.25 li
460.531 165.25 li
461.531 165.5 li
464.281 165.5 li
465.031 165.75 li
467.781 165.75 li
468.781 166 li
471.531 166 li
472.281 166.25 li
475.031 166.25 li
476.031 166.5 li
478.781 166.5 li
479.531 166.75 li
482.281 166.75 li
483.281 167 li
485.031 167 li
396.281 160.25 mo
398.031 160.25 li
398.781 160.5 li
400.781 160.5 li
401.531 160.75 li
403.531 160.75 li
404.281 161 li
406.031 161 li
407.031 161.25 li
409.781 161.25 li
410.781 161.5 li
412.531 161.5 li
413.281 161.75 li
415.281 161.75 li
416.031 162 li
418.781 162 li
419.781 162.25 li
421.531 162.25 li
422.531 162.5 li
425.281 162.5 li
426.031 162.75 li
428.031 162.75 li
428.781 163 li
431.531 163 li
432.531 163.25 li
434.281 163.25 li
435.281 163.5 li
437.781 163.5 li
438.781 163.75 li
440.531 163.75 li
351.781 156.25 mo
353.531 156.25 li
354.531 156.5 li
356.281 156.5 li
357.281 156.75 li
359.031 156.75 li
359.781 157 li
361.781 157 li
362.531 157.25 li
364.531 157.25 li
365.281 157.5 li
367.031 157.5 li
368.031 157.75 li
369.781 157.75 li
370.781 158 li
372.531 158 li
373.531 158.25 li
375.281 158.25 li
376.281 158.5 li
378.031 158.5 li
379.031 158.75 li
380.781 158.75 li
381.531 159 li
383.531 159 li
384.281 159.25 li
386.281 159.25 li
387.031 159.5 li
388.781 159.5 li
389.781 159.75 li
391.531 159.75 li
392.531 160 li
394.281 160 li
395.281 160.25 li
396.281 160.25 li
307.281 151.5 mo
308.281 151.5 li
309.031 151.75 li
310.781 151.75 li
311.781 152 li
312.781 152 li
313.531 152.25 li
315.531 152.25 li
316.281 152.5 li
317.281 152.5 li
318.031 152.75 li
320.031 152.75 li
320.781 153 li
321.781 153 li
322.781 153.25 li
324.531 153.25 li
325.531 153.5 li
326.281 153.5 li
327.281 153.75 li
329.031 153.75 li
330.031 154 li
331.781 154 li
332.781 154.25 li
333.531 154.25 li
334.531 154.5 li
336.281 154.5 li
337.281 154.75 li
339.031 154.75 li
340.031 155 li
340.781 155 li
341.781 155.25 li
343.531 155.25 li
344.531 155.5 li
346.281 155.5 li
347.281 155.75 li
349.031 155.75 li
349.781 156 li
350.781 156 li
351.781 156.25 li
262.781 146 mo
263.781 146 li
264.531 146.25 li
265.531 146.25 li
266.531 146.5 li
268.281 146.5 li
269.281 146.75 li
270.031 146.75 li
271.031 147 li
271.781 147 li
272.781 147.25 li
273.781 147.25 li
274.531 147.5 li
275.531 147.5 li
276.531 147.75 li
277.281 147.75 li
278.281 148 li
279.031 148 li
280.031 148.25 li
281.031 148.25 li
281.781 148.5 li
283.781 148.5 li
284.531 148.75 li
285.531 148.75 li
286.281 149 li
287.281 149 li
288.281 149.25 li
289.031 149.25 li
290.031 149.5 li
291.781 149.5 li
292.781 149.75 li
293.781 149.75 li
294.531 150 li
295.531 150 li
296.281 150.25 li
297.281 150.25 li
298.281 150.5 li
300.031 150.5 li
301.031 150.75 li
301.781 150.75 li
302.781 151 li
304.531 151 li
305.531 151.25 li
306.281 151.25 li
307.281 151.5 li
218.281 139 mo
219.281 139.25 li
220.281 139.5 li
221.031 139.5 li
222.031 139.75 li
223.031 140 li
223.781 140 li
224.781 140.25 li
225.531 140.25 li
226.531 140.5 li
227.531 140.5 li
228.281 140.75 li
229.281 141 li
230.281 141 li
231.031 141.25 li
232.031 141.25 li
232.781 141.5 li
233.781 141.75 li
234.781 141.75 li
235.531 142 li
236.531 142 li
237.531 142.25 li
238.281 142.25 li
239.281 142.5 li
240.031 142.5 li
241.031 142.75 li
242.031 143 li
242.781 143 li
243.781 143.25 li
244.781 143.25 li
245.531 143.5 li
246.531 143.5 li
247.281 143.75 li
248.281 143.75 li
249.281 144 li
250.031 144 li
251.031 144.25 li
252.031 144.25 li
252.781 144.5 li
253.781 144.5 li
254.781 144.75 li
255.531 144.75 li
256.531 145 li
257.281 145.25 li
258.281 145.25 li
259.281 145.5 li
260.031 145.5 li
261.031 145.75 li
262.031 145.75 li
262.781 146 li
174.031 130.5 mo
174.781 130.75 li
175.781 130.75 li
176.531 131 li
177.531 131.25 li
178.531 131.5 li
179.281 131.75 li
180.281 131.75 li
181.281 132 li
182.031 132.25 li
183.031 132.5 li
183.781 132.5 li
184.781 132.75 li
185.781 133 li
186.531 133.25 li
187.531 133.25 li
188.531 133.5 li
189.281 133.75 li
190.281 134 li
191.281 134 li
192.031 134.25 li
193.031 134.5 li
193.781 134.75 li
194.781 134.75 li
195.781 135 li
196.531 135.25 li
197.531 135.25 li
198.531 135.5 li
199.281 135.75 li
200.281 135.75 li
201.031 136 li
202.031 136.25 li
203.031 136.25 li
203.781 136.5 li
204.781 136.75 li
205.781 136.75 li
206.531 137 li
207.531 137.25 li
208.281 137.25 li
209.281 137.5 li
210.281 137.75 li
211.031 137.75 li
212.031 138 li
213.031 138.25 li
213.781 138.25 li
214.781 138.5 li
215.531 138.75 li
216.531 138.75 li
217.531 139 li
218.281 139 li
129.531 118.25 mo
130.281 118.5 li
131.281 119 li
132.281 119.25 li
133.031 119.5 li
134.031 119.75 li
135.031 120 li
135.781 120.25 li
136.781 120.5 li
137.531 121 li
138.531 121.25 li
139.531 121.5 li
140.281 121.75 li
141.281 122 li
142.281 122.25 li
143.031 122.5 li
144.031 122.75 li
144.781 123 li
145.781 123.25 li
146.781 123.5 li
147.531 123.75 li
148.531 124 li
149.531 124.25 li
150.281 124.5 li
151.281 124.75 li
152.281 125 li
153.031 125.25 li
154.031 125.5 li
154.781 125.75 li
155.781 126 li
156.781 126.25 li
157.531 126.5 li
158.531 126.75 li
159.531 127 li
160.281 127.25 li
161.281 127.5 li
162.031 127.75 li
163.031 127.75 li
164.031 128 li
164.781 128.25 li
165.781 128.5 li
166.781 128.75 li
167.531 129 li
168.531 129.25 li
169.281 129.5 li
170.281 129.5 li
171.281 129.75 li
172.031 130 li
173.031 130.25 li
174.031 130.5 li
85.0313 97.75 mo
86.0313 98.5 li
86.7813 99 li
87.7813 99.5 li
88.7813 100 li
89.5313 100.75 li
90.5313 101.25 li
91.2813 101.75 li
92.2813 102.25 li
93.2813 102.75 li
94.0313 103.25 li
95.0313 103.75 li
96.0313 104.25 li
96.7813 104.75 li
97.7813 105.25 li
98.5313 105.75 li
99.5313 106 li
100.531 106.5 li
101.281 107 li
102.281 107.5 li
103.281 107.75 li
104.031 108.25 li
105.031 108.75 li
105.781 109 li
106.781 109.5 li
107.781 110 li
108.531 110.25 li
109.531 110.75 li
110.531 111 li
111.281 111.5 li
112.281 111.75 li
113.031 112.25 li
114.031 112.5 li
115.031 113 li
115.781 113.25 li
116.781 113.75 li
117.781 114 li
118.531 114.5 li
119.531 114.75 li
120.531 115 li
121.281 115.5 li
122.281 115.75 li
123.031 116 li
124.031 116.5 li
125.031 116.75 li
125.781 117 li
126.781 117.25 li
127.781 117.75 li
128.531 118 li
129.531 118.25 li
40.5313 .5 mo
41.5313 8.75 li
42.2813 18.5 li
43.2813 26 li
44.2813 31.75 li
45.0313 36.75 li
46.0313 41 li
47.0313 44.75 li
47.7813 48 li
48.7813 51 li
49.5313 53.5 li
50.5313 56 li
51.5313 58.25 li
52.2813 60.5 li
53.2813 62.5 li
54.2813 64.25 li
55.0313 66 li
56.0313 67.75 li
57.0313 69.25 li
57.7813 70.75 li
58.7813 72.25 li
59.5313 73.5 li
60.5313 75 li
61.5313 76 li
62.2813 77.25 li
63.2813 78.5 li
64.2813 79.5 li
65.0313 80.75 li
66.0313 81.75 li
66.7813 82.75 li
67.7813 83.75 li
68.7813 84.5 li
69.5313 85.5 li
70.5313 86.25 li
71.5313 87.25 li
72.2813 88 li
73.2813 88.75 li
74.0313 89.75 li
75.0313 90.5 li
76.0313 91.25 li
76.7813 92 li
77.7813 92.5 li
78.7813 93.25 li
79.5313 94 li
80.5313 94.75 li
81.2813 95.25 li
82.2813 96 li
83.2813 96.5 li
84.0313 97.25 li
85.0313 97.75 li
427.031 164 mo
422.531 173 li
431.531 173 li
427.031 164 li
cp
372.531 163 mo
368.031 172 li
377.031 172 li
372.531 163 li
cp
300.031 150.5 mo
295.531 159.5 li
304.531 159.5 li
300.031 150.5 li
cp
223.031 130.5 mo
218.531 139.5 li
227.531 139.5 li
223.031 130.5 li
cp
165.031 116 mo
160.531 125 li
169.531 125 li
165.031 116 li
cp
123.031 109 mo
118.531 118 li
127.531 118 li
123.031 109 li
cp
91.2813 93 mo
86.7813 102 li
95.7813 102 li
91.2813 93 li
cp
68.7813 82.25 mo
64.2813 91.25 li
73.2813 91.25 li
68.7813 82.25 li
cp
55.0313 69 mo
50.5313 78 li
59.5313 78 li
55.0313 69 li
cp
54.0313 78.25 mo
56.2813 78.25 li
55.0313 78 mo
55.0313 78.25 li
54.0313 68.75 mo
56.2813 68.75 li
55.0313 69.25 mo
55.0313 68.75 li
67.5313 91.5 mo
69.7813 91.5 li
68.7813 91.25 mo
68.7813 91.5 li
67.5313 82.25 mo
69.7813 82.25 li
68.7813 82.25 mo
371.531 173 mo
373.781 173 li
372.531 171.75 mo
372.531 173 li
371.531 161.75 mo
373.781 161.75 li
372.531 163 mo
372.531 161.75 li
425.781 174.25 mo
428.031 174.25 li
427.031 173 mo
427.031 174.25 li
425.781 162.75 mo
428.031 162.75 li
427.031 164 mo
427.031 162.75 li
0 .705882 0 rgb
@
[2 2 ] 0 dsh
485.031 154.75 mo
486.781 154.75 li
487.781 155 li
491.531 155 li
492.281 155.25 li
440.531 151.75 mo
441.531 151.75 li
442.531 152 li
445.031 152 li
446.031 152.25 li
448.781 152.25 li
449.781 152.5 li
452.281 152.5 li
453.281 152.75 li
456.031 152.75 li
457.031 153 li
459.781 153 li
460.531 153.25 li
463.281 153.25 li
464.281 153.5 li
467.781 153.5 li
468.781 153.75 li
471.531 153.75 li
472.281 154 li
475.031 154 li
476.031 154.25 li
478.781 154.25 li
479.531 154.5 li
483.281 154.5 li
484.031 154.75 li
485.031 154.75 li
396.281 148.5 mo
397.031 148.5 li
398.031 148.75 li
399.781 148.75 li
400.781 149 li
403.531 149 li
404.281 149.25 li
407.031 149.25 li
408.031 149.5 li
409.781 149.5 li
410.781 149.75 li
413.281 149.75 li
414.281 150 li
417.031 150 li
418.031 150.25 li
419.781 150.25 li
420.531 150.5 li
423.281 150.5 li
424.281 150.75 li
427.031 150.75 li
428.031 151 li
430.531 151 li
431.531 151.25 li
434.281 151.25 li
435.281 151.5 li
437.781 151.5 li
438.781 151.75 li
440.531 151.75 li
351.781 144.75 mo
352.531 145 li
354.531 145 li
355.281 145.25 li
357.281 145.25 li
358.031 145.5 li
359.781 145.5 li
360.781 145.75 li
363.531 145.75 li
364.531 146 li
366.281 146 li
367.031 146.25 li
369.031 146.25 li
369.781 146.5 li
371.781 146.5 li
372.531 146.75 li
375.281 146.75 li
376.281 147 li
378.031 147 li
379.031 147.25 li
380.781 147.25 li
381.531 147.5 li
384.281 147.5 li
385.281 147.75 li
387.031 147.75 li
388.031 148 li
390.781 148 li
391.531 148.25 li
393.531 148.25 li
394.281 148.5 li
396.281 148.5 li
307.281 140.5 mo
308.281 140.75 li
310.031 140.75 li
310.781 141 li
311.781 141 li
312.781 141.25 li
314.531 141.25 li
315.531 141.5 li
317.281 141.5 li
318.031 141.75 li
320.031 141.75 li
320.781 142 li
321.781 142 li
322.781 142.25 li
324.531 142.25 li
325.531 142.5 li
327.281 142.5 li
328.031 142.75 li
330.031 142.75 li
330.781 143 li
332.781 143 li
333.531 143.25 li
335.281 143.25 li
336.281 143.5 li
338.031 143.5 li
339.031 143.75 li
340.781 143.75 li
341.781 144 li
343.531 144 li
344.531 144.25 li
346.281 144.25 li
347.281 144.5 li
349.031 144.5 li
349.781 144.75 li
351.781 144.75 li
262.781 135.5 mo
263.781 135.75 li
264.531 135.75 li
265.531 136 li
267.281 136 li
268.281 136.25 li
269.281 136.25 li
270.031 136.5 li
271.031 136.5 li
271.781 136.75 li
272.781 136.75 li
273.781 137 li
275.531 137 li
276.531 137.25 li
277.281 137.25 li
278.281 137.5 li
280.031 137.5 li
281.031 137.75 li
281.781 137.75 li
282.781 138 li
283.781 138 li
284.531 138.25 li
286.281 138.25 li
287.281 138.5 li
288.281 138.5 li
289.031 138.75 li
291.031 138.75 li
291.781 139 li
292.781 139 li
293.781 139.25 li
295.531 139.25 li
296.281 139.5 li
297.281 139.5 li
298.281 139.75 li
300.031 139.75 li
301.031 140 li
302.781 140 li
303.531 140.25 li
304.531 140.25 li
305.531 140.5 li
307.281 140.5 li
218.281 129.5 mo
219.281 129.5 li
220.281 129.75 li
221.031 129.75 li
222.031 130 li
223.031 130.25 li
223.781 130.25 li
224.781 130.5 li
225.531 130.5 li
226.531 130.75 li
227.531 130.75 li
228.281 131 li
229.281 131 li
230.281 131.25 li
231.031 131.25 li
232.031 131.5 li
232.781 131.5 li
233.781 131.75 li
234.781 131.75 li
235.531 132 li
236.531 132 li
237.531 132.25 li
238.281 132.25 li
239.281 132.5 li
240.031 132.5 li
241.031 132.75 li
242.031 132.75 li
242.781 133 li
243.781 133 li
244.781 133.25 li
245.531 133.25 li
246.531 133.5 li
247.281 133.5 li
248.281 133.75 li
249.281 133.75 li
250.031 134 li
251.031 134 li
252.031 134.25 li
252.781 134.25 li
253.781 134.5 li
254.781 134.5 li
255.531 134.75 li
256.531 134.75 li
257.281 135 li
259.281 135 li
260.031 135.25 li
261.031 135.25 li
262.031 135.5 li
262.781 135.5 li
174.031 121.5 mo
174.781 121.75 li
175.781 122 li
176.531 122.25 li
177.531 122.25 li
178.531 122.5 li
179.281 122.75 li
180.281 122.75 li
181.281 123 li
182.031 123.25 li
183.031 123.5 li
183.781 123.5 li
184.781 123.75 li
185.781 124 li
186.531 124 li
187.531 124.25 li
188.531 124.5 li
189.281 124.5 li
190.281 124.75 li
191.281 125 li
192.031 125 li
193.031 125.25 li
193.781 125.5 li
194.781 125.5 li
195.781 125.75 li
196.531 125.75 li
197.531 126 li
198.531 126.25 li
199.281 126.25 li
200.281 126.5 li
201.031 126.75 li
202.031 126.75 li
203.031 127 li
203.781 127 li
204.781 127.25 li
205.781 127.5 li
206.531 127.5 li
207.531 127.75 li
208.281 127.75 li
209.281 128 li
210.281 128.25 li
211.031 128.25 li
212.031 128.5 li
213.031 128.5 li
213.781 128.75 li
214.781 129 li
215.531 129 li
216.531 129.25 li
217.531 129.25 li
218.281 129.5 li
129.531 110.5 mo
130.281 110.75 li
131.281 111.25 li
132.281 111.5 li
133.031 111.75 li
134.031 112 li
135.031 112.25 li
135.781 112.5 li
136.781 112.75 li
137.531 113 li
138.531 113.25 li
139.531 113.5 li
140.281 113.75 li
141.281 114 li
142.281 114.25 li
143.031 114.5 li
144.031 114.75 li
144.781 115 li
145.781 115.25 li
146.781 115.5 li
147.531 115.5 li
148.531 115.75 li
149.531 116 li
150.281 116.25 li
151.281 116.5 li
152.281 116.75 li
153.031 117 li
154.031 117.25 li
154.781 117.5 li
155.781 117.5 li
156.781 117.75 li
157.531 118 li
158.531 118.25 li
159.531 118.5 li
160.281 118.75 li
161.281 118.75 li
162.031 119 li
163.031 119.25 li
164.031 119.5 li
164.781 119.75 li
165.781 119.75 li
166.781 120 li
167.531 120.25 li
168.531 120.5 li
169.281 120.75 li
170.281 120.75 li
171.281 121 li
172.031 121.25 li
173.031 121.5 li
174.031 121.5 li
85.0313 92 mo
86.0313 92.5 li
86.7813 93 li
87.7813 93.75 li
88.7813 94.25 li
89.5313 94.75 li
90.5313 95 li
91.2813 95.5 li
92.2813 96 li
93.2813 96.5 li
94.0313 97 li
95.0313 97.5 li
96.0313 97.75 li
96.7813 98.25 li
97.7813 98.75 li
98.5313 99.25 li
99.5313 99.5 li
100.531 100 li
101.281 100.25 li
102.281 100.75 li
103.281 101.25 li
104.031 101.5 li
105.031 102 li
105.781 102.25 li
106.781 102.75 li
107.781 103 li
108.531 103.5 li
109.531 103.75 li
110.531 104 li
111.281 104.5 li
112.281 104.75 li
113.031 105 li
114.031 105.5 li
115.031 105.75 li
115.781 106 li
116.781 106.5 li
117.781 106.75 li
118.531 107 li
119.531 107.5 li
120.531 107.75 li
121.281 108 li
122.281 108.25 li
123.031 108.5 li
124.031 109 li
125.031 109.25 li
125.781 109.5 li
126.781 109.75 li
127.781 110 li
128.531 110.25 li
129.531 110.5 li
40.5313 .5 mo
41.5313 11.5 li
42.2813 20.25 li
43.2813 27 li
44.2813 32.25 li
45.0313 36.75 li
46.0313 40.75 li
47.0313 44 li
47.7813 47 li
48.7813 49.75 li
49.5313 52 li
50.5313 54.25 li
51.5313 56.5 li
52.2813 58.25 li
53.2813 60 li
54.2813 61.75 li
55.0313 63.25 li
56.0313 64.75 li
57.0313 66.25 li
57.7813 67.75 li
58.7813 69 li
59.5313 70.25 li
60.5313 71.25 li
61.5313 72.5 li
62.2813 73.5 li
63.2813 74.5 li
64.2813 75.5 li
65.0313 76.5 li
66.0313 77.5 li
66.7813 78.25 li
67.7813 79.25 li
68.7813 80 li
69.5313 81 li
70.5313 81.75 li
71.5313 82.5 li
72.2813 83.25 li
73.2813 84 li
74.0313 84.75 li
75.0313 85.5 li
76.0313 86 li
76.7813 86.75 li
77.7813 87.25 li
78.7813 88 li
79.5313 88.5 li
80.5313 89.25 li
81.2813 89.75 li
82.2813 90.5 li
83.2813 91 li
84.0313 91.5 li
85.0313 92 li
0 0 1 rgb
@
[] 0 dsh
485.031 150.75 mo
486.031 151 li
489.531 151 li
490.531 151.25 li
492.281 151.25 li
440.531 148 mo
441.531 148 li
442.531 148.25 li
445.031 148.25 li
446.031 148.5 li
449.781 148.5 li
450.531 148.75 li
453.281 148.75 li
454.281 149 li
457.031 149 li
457.781 149.25 li
460.531 149.25 li
461.531 149.5 li
465.031 149.5 li
466.031 149.75 li
468.781 149.75 li
469.531 150 li
473.281 150 li
474.281 150.25 li
476.781 150.25 li
477.781 150.5 li
481.531 150.5 li
482.281 150.75 li
485.031 150.75 li
396.281 145 mo
398.781 145 li
399.781 145.25 li
402.531 145.25 li
403.531 145.5 li
406.031 145.5 li
407.031 145.75 li
408.781 145.75 li
409.781 146 li
412.531 146 li
413.281 146.25 li
416.031 146.25 li
417.031 146.5 li
419.781 146.5 li
420.531 146.75 li
423.281 146.75 li
424.281 147 li
427.031 147 li
428.031 147.25 li
430.531 147.25 li
431.531 147.5 li
434.281 147.5 li
435.281 147.75 li
437.781 147.75 li
438.781 148 li
440.531 148 li
351.781 141.25 mo
352.531 141.5 li
354.531 141.5 li
355.281 141.75 li
358.031 141.75 li
359.031 142 li
360.781 142 li
361.781 142.25 li
363.531 142.25 li
364.531 142.5 li
367.031 142.5 li
368.031 142.75 li
369.781 142.75 li
370.781 143 li
373.531 143 li
374.281 143.25 li
376.281 143.25 li
377.031 143.5 li
379.031 143.5 li
379.781 143.75 li
382.531 143.75 li
383.531 144 li
386.281 144 li
387.031 144.25 li
388.781 144.25 li
389.781 144.5 li
392.531 144.5 li
393.531 144.75 li
395.281 144.75 li
396.281 145 li
307.281 137.25 mo
308.281 137.25 li
309.031 137.5 li
310.781 137.5 li
311.781 137.75 li
313.531 137.75 li
314.531 138 li
316.281 138 li
317.281 138.25 li
319.031 138.25 li
320.031 138.5 li
320.781 138.5 li
321.781 138.75 li
323.531 138.75 li
324.531 139 li
326.281 139 li
327.281 139.25 li
329.031 139.25 li
330.031 139.5 li
331.781 139.5 li
332.781 139.75 li
334.531 139.75 li
335.281 140 li
337.281 140 li
338.031 140.25 li
340.781 140.25 li
341.781 140.5 li
343.531 140.5 li
344.531 140.75 li
346.281 140.75 li
347.281 141 li
349.031 141 li
349.781 141.25 li
351.781 141.25 li
262.781 132.5 mo
264.531 132.5 li
265.531 132.75 li
266.531 132.75 li
267.281 133 li
268.281 133 li
269.281 133.25 li
271.031 133.25 li
271.781 133.5 li
272.781 133.5 li
273.781 133.75 li
275.531 133.75 li
276.531 134 li
277.281 134 li
278.281 134.25 li
280.031 134.25 li
281.031 134.5 li
281.781 134.5 li
282.781 134.75 li
284.531 134.75 li
285.531 135 li
286.281 135 li
287.281 135.25 li
289.031 135.25 li
290.031 135.5 li
291.031 135.5 li
291.781 135.75 li
293.781 135.75 li
294.531 136 li
296.281 136 li
297.281 136.25 li
298.281 136.25 li
299.031 136.5 li
301.031 136.5 li
301.781 136.75 li
303.531 136.75 li
304.531 137 li
305.531 137 li
306.281 137.25 li
307.281 137.25 li
218.281 126.5 mo
219.281 126.5 li
220.281 126.75 li
221.031 127 li
222.031 127 li
223.031 127.25 li
223.781 127.25 li
224.781 127.5 li
225.531 127.5 li
226.531 127.75 li
227.531 127.75 li
228.281 128 li
229.281 128 li
230.281 128.25 li
231.031 128.25 li
232.031 128.5 li
232.781 128.5 li
233.781 128.75 li
234.781 128.75 li
235.531 129 li
236.531 129 li
237.531 129.25 li
238.281 129.25 li
239.281 129.5 li
240.031 129.5 li
241.031 129.75 li
242.031 129.75 li
242.781 130 li
243.781 130 li
244.781 130.25 li
246.531 130.25 li
247.281 130.5 li
248.281 130.5 li
249.281 130.75 li
250.031 130.75 li
251.031 131 li
252.031 131 li
252.781 131.25 li
253.781 131.25 li
254.781 131.5 li
256.531 131.5 li
257.281 131.75 li
258.281 131.75 li
259.281 132 li
260.031 132 li
261.031 132.25 li
262.031 132.25 li
262.781 132.5 li
174.031 119 mo
174.781 119 li
175.781 119.25 li
176.531 119.5 li
177.531 119.5 li
178.531 119.75 li
179.281 120 li
180.281 120.25 li
181.281 120.25 li
182.031 120.5 li
183.031 120.75 li
183.781 120.75 li
184.781 121 li
185.781 121.25 li
186.531 121.25 li
187.531 121.5 li
188.531 121.75 li
189.281 121.75 li
190.281 122 li
191.281 122 li
192.031 122.25 li
193.031 122.5 li
193.781 122.5 li
194.781 122.75 li
195.781 123 li
196.531 123 li
197.531 123.25 li
198.531 123.25 li
199.281 123.5 li
200.281 123.75 li
201.031 123.75 li
202.031 124 li
203.031 124 li
203.781 124.25 li
204.781 124.5 li
205.781 124.5 li
206.531 124.75 li
207.531 124.75 li
208.281 125 li
209.281 125 li
210.281 125.25 li
211.031 125.5 li
212.031 125.5 li
213.031 125.75 li
213.781 125.75 li
214.781 126 li
215.531 126 li
216.531 126.25 li
217.531 126.25 li
218.281 126.5 li
129.531 108.25 mo
130.281 108.5 li
131.281 108.75 li
132.281 109 li
133.031 109.25 li
134.031 109.5 li
135.031 109.75 li
135.781 110 li
136.781 110.25 li
137.531 110.5 li
138.531 110.75 li
139.531 111 li
140.281 111.25 li
141.281 111.5 li
142.281 111.75 li
143.031 112 li
144.031 112.25 li
144.781 112.5 li
145.781 112.75 li
146.781 113 li
147.531 113.25 li
148.531 113.5 li
149.531 113.5 li
150.281 113.75 li
151.281 114 li
152.281 114.25 li
153.031 114.5 li
154.031 114.75 li
154.781 114.75 li
155.781 115 li
156.781 115.25 li
157.531 115.5 li
158.531 115.75 li
159.531 116 li
160.281 116 li
161.281 116.25 li
162.031 116.5 li
163.031 116.75 li
164.031 116.75 li
164.781 117 li
165.781 117.25 li
166.781 117.5 li
167.531 117.75 li
168.531 117.75 li
169.281 118 li
170.281 118.25 li
171.281 118.25 li
172.031 118.5 li
173.031 118.75 li
174.031 119 li
85.0313 90.5 mo
86.0313 91 li
86.7813 91.5 li
87.7813 92 li
88.7813 92.5 li
89.5313 93 li
90.5313 93.5 li
91.2813 93.75 li
92.2813 94.25 li
93.2813 94.75 li
94.0313 95.25 li
95.0313 95.75 li
96.0313 96 li
96.7813 96.5 li
97.7813 97 li
98.5313 97.25 li
99.5313 97.75 li
100.531 98 li
101.281 98.5 li
102.281 98.75 li
103.281 99.25 li
104.031 99.5 li
105.031 100 li
105.781 100.25 li
106.781 100.75 li
107.781 101 li
108.531 101.5 li
109.531 101.75 li
110.531 102 li
111.281 102.5 li
112.281 102.75 li
113.031 103 li
114.031 103.25 li
115.031 103.75 li
115.781 104 li
116.781 104.25 li
117.781 104.5 li
118.531 105 li
119.531 105.25 li
120.531 105.5 li
121.281 105.75 li
122.281 106 li
123.031 106.5 li
124.031 106.75 li
125.031 107 li
125.781 107.25 li
126.781 107.5 li
127.781 107.75 li
128.531 108 li
129.531 108.25 li
40.5313 .5 mo
41.5313 12.75 li
42.2813 21.25 li
43.2813 27.75 li
44.2813 33 li
45.0313 37.25 li
46.0313 41 li
47.0313 44.25 li
47.7813 47 li
48.7813 49.5 li
49.5313 52 li
50.5313 54 li
51.5313 56 li
52.2813 58 li
53.2813 59.75 li
54.2813 61.25 li
55.0313 62.75 li
56.0313 64.25 li
57.0313 65.5 li
57.7813 67 li
58.7813 68.25 li
59.5313 69.25 li
60.5313 70.5 li
61.5313 71.5 li
62.2813 72.5 li
63.2813 73.5 li
64.2813 74.5 li
65.0313 75.5 li
66.0313 76.5 li
66.7813 77.25 li
67.7813 78 li
68.7813 79 li
69.5313 79.75 li
70.5313 80.5 li
71.5313 81.25 li
72.2813 82 li
73.2813 82.75 li
74.0313 83.25 li
75.0313 84 li
76.0313 84.75 li
76.7813 85.25 li
77.7813 86 li
78.7813 86.5 li
79.5313 87.25 li
80.5313 87.75 li
81.2813 88.25 li
82.2813 88.75 li
83.2813 89.5 li
84.0313 90 li
85.0313 90.5 li
416.406 149.542 mo
420.489 149.542 li
420.489 153.625 li
424.573 153.625 li
424.573 149.542 li
428.656 149.542 li
428.656 145.458 li
424.573 145.458 li
424.573 141.375 li
420.489 141.375 li
420.489 145.458 li
416.406 145.458 li
416.406 149.542 li
cp
361.906 145.042 mo
365.989 145.042 li
365.989 149.125 li
370.073 149.125 li
370.073 145.042 li
374.156 145.042 li
374.156 140.958 li
370.073 140.958 li
370.073 136.875 li
365.989 136.875 li
365.989 140.958 li
361.906 140.958 li
361.906 145.042 li
cp
289.406 138.542 mo
293.489 138.542 li
293.489 142.625 li
297.573 142.625 li
297.573 138.542 li
301.656 138.542 li
301.656 134.458 li
297.573 134.458 li
297.573 130.375 li
293.489 130.375 li
293.489 134.458 li
289.406 134.458 li
289.406 138.542 li
cp
214.406 130.292 mo
218.49 130.292 li
218.49 134.375 li
222.573 134.375 li
222.573 130.292 li
226.656 130.292 li
226.656 126.208 li
222.573 126.208 li
222.573 122.125 li
218.49 122.125 li
218.49 126.208 li
214.406 126.208 li
214.406 130.292 li
cp
157.906 120.542 mo
161.99 120.542 li
161.99 124.625 li
166.073 124.625 li
166.073 120.542 li
170.156 120.542 li
170.156 116.458 li
166.073 116.458 li
166.073 112.375 li
161.99 112.375 li
161.99 116.458 li
157.906 116.458 li
157.906 120.542 li
cp
115.906 105.542 mo
119.99 105.542 li
119.99 109.625 li
124.073 109.625 li
124.073 105.542 li
128.156 105.542 li
128.156 101.458 li
124.073 101.458 li
124.073 97.375 li
119.99 97.375 li
119.99 101.458 li
115.906 101.458 li
115.906 105.542 li
cp
82.9063 87.7915 mo
86.9897 87.7915 li
86.9897 91.875 li
91.0728 91.875 li
91.0728 87.7915 li
95.1563 87.7915 li
95.1563 83.7085 li
91.0728 83.7085 li
91.0728 79.625 li
86.9897 79.625 li
86.9897 83.7085 li
82.9063 83.7085 li
82.9063 87.7915 li
cp
62.6563 83.0415 mo
66.7397 83.0415 li
66.7397 87.125 li
70.8228 87.125 li
70.8228 83.0415 li
74.9063 83.0415 li
74.9063 78.9585 li
70.8228 78.9585 li
70.8228 74.875 li
66.7397 74.875 li
66.7397 78.9585 li
62.6563 78.9585 li
62.6563 83.0415 li
cp
48.9063 68.5415 mo
52.9897 68.5415 li
52.9897 72.625 li
57.0728 72.625 li
57.0728 68.5415 li
61.1563 68.5415 li
61.1563 64.4585 li
57.0728 64.4585 li
57.0728 60.375 li
52.9897 60.375 li
52.9897 64.4585 li
48.9063 64.4585 li
48.9063 68.5415 li
cp
.501961 .501961 .501961 rgb
@
[2 2 ] 0 dsh
486.031 140.75 mo
488.781 140.75 li
489.531 141 li
492.281 141 li
441.531 137.75 mo
443.281 137.75 li
444.281 138 li
447.031 138 li
447.781 138.25 li
450.531 138.25 li
451.531 138.5 li
454.281 138.5 li
455.031 138.75 li
457.781 138.75 li
458.781 139 li
461.531 139 li
462.281 139.25 li
466.031 139.25 li
467.031 139.5 li
469.531 139.5 li
470.531 139.75 li
473.281 139.75 li
474.281 140 li
476.781 140 li
477.781 140.25 li
481.531 140.25 li
482.281 140.5 li
485.031 140.5 li
486.031 140.75 li
397.031 134.5 mo
398.781 134.5 li
399.781 134.75 li
402.531 134.75 li
403.531 135 li
405.281 135 li
406.031 135.25 li
408.781 135.25 li
409.781 135.5 li
412.531 135.5 li
413.281 135.75 li
415.281 135.75 li
416.031 136 li
418.781 136 li
419.781 136.25 li
422.531 136.25 li
423.281 136.5 li
426.031 136.5 li
427.031 136.75 li
429.781 136.75 li
430.531 137 li
432.531 137 li
433.281 137.25 li
436.031 137.25 li
437.031 137.5 li
439.781 137.5 li
440.531 137.75 li
441.531 137.75 li
352.531 130.75 mo
354.531 130.75 li
355.281 131 li
357.281 131 li
358.031 131.25 li
359.781 131.25 li
360.781 131.5 li
362.531 131.5 li
363.531 131.75 li
365.281 131.75 li
366.281 132 li
368.031 132 li
369.031 132.25 li
371.781 132.25 li
372.531 132.5 li
374.281 132.5 li
375.281 132.75 li
377.031 132.75 li
378.031 133 li
380.781 133 li
381.531 133.25 li
383.531 133.25 li
384.281 133.5 li
386.281 133.5 li
387.031 133.75 li
389.781 133.75 li
390.781 134 li
392.531 134 li
393.531 134.25 li
396.281 134.25 li
397.031 134.5 li
308.281 126.5 mo
310.031 126.5 li
310.781 126.75 li
311.781 126.75 li
312.781 127 li
314.531 127 li
315.531 127.25 li
317.281 127.25 li
318.031 127.5 li
319.031 127.5 li
320.031 127.75 li
321.781 127.75 li
322.781 128 li
324.531 128 li
325.531 128.25 li
327.281 128.25 li
328.031 128.5 li
330.031 128.5 li
330.781 128.75 li
332.781 128.75 li
333.531 129 li
334.531 129 li
335.281 129.25 li
337.281 129.25 li
338.031 129.5 li
340.031 129.5 li
340.781 129.75 li
342.531 129.75 li
343.531 130 li
345.281 130 li
346.281 130.25 li
348.031 130.25 li
349.031 130.5 li
350.781 130.5 li
351.781 130.75 li
352.531 130.75 li
263.781 121.5 mo
265.531 121.5 li
266.531 121.75 li
267.281 121.75 li
268.281 122 li
269.281 122 li
270.031 122.25 li
271.031 122.25 li
271.781 122.5 li
273.781 122.5 li
274.531 122.75 li
275.531 122.75 li
276.531 123 li
277.281 123 li
278.281 123.25 li
280.031 123.25 li
281.031 123.5 li
281.781 123.5 li
282.781 123.75 li
284.531 123.75 li
285.531 124 li
286.281 124 li
287.281 124.25 li
288.281 124.25 li
289.031 124.5 li
291.031 124.5 li
291.781 124.75 li
292.781 124.75 li
293.781 125 li
295.531 125 li
296.281 125.25 li
297.281 125.25 li
298.281 125.5 li
300.031 125.5 li
301.031 125.75 li
302.781 125.75 li
303.531 126 li
304.531 126 li
305.531 126.25 li
307.281 126.25 li
308.281 126.5 li
219.281 115.25 mo
220.281 115.5 li
221.031 115.5 li
222.031 115.75 li
223.031 115.75 li
223.781 116 li
224.781 116 li
225.531 116.25 li
226.531 116.25 li
227.531 116.5 li
228.281 116.5 li
229.281 116.75 li
230.281 117 li
231.031 117 li
232.031 117.25 li
232.781 117.25 li
233.781 117.5 li
234.781 117.5 li
235.531 117.75 li
236.531 117.75 li
237.531 118 li
238.281 118 li
239.281 118.25 li
240.031 118.25 li
241.031 118.5 li
242.031 118.5 li
242.781 118.75 li
243.781 118.75 li
244.781 119 li
245.531 119 li
246.531 119.25 li
247.281 119.25 li
248.281 119.5 li
249.281 119.5 li
250.031 119.75 li
251.031 119.75 li
252.031 120 li
252.781 120 li
253.781 120.25 li
255.531 120.25 li
256.531 120.5 li
257.281 120.5 li
258.281 120.75 li
259.281 120.75 li
260.031 121 li
261.031 121 li
262.031 121.25 li
262.781 121.25 li
263.781 121.5 li
174.781 107.25 mo
175.781 107.5 li
176.531 107.75 li
177.531 108 li
178.531 108 li
179.281 108.25 li
180.281 108.5 li
181.281 108.75 li
182.031 108.75 li
183.031 109 li
183.781 109.25 li
184.781 109.25 li
185.781 109.5 li
186.531 109.75 li
187.531 109.75 li
188.531 110 li
189.281 110.25 li
190.281 110.25 li
191.281 110.5 li
192.031 110.75 li
193.031 110.75 li
193.781 111 li
194.781 111.25 li
195.781 111.25 li
196.531 111.5 li
197.531 111.75 li
198.531 111.75 li
199.281 112 li
200.281 112.25 li
201.031 112.25 li
202.031 112.5 li
203.031 112.5 li
203.781 112.75 li
204.781 113 li
205.781 113 li
206.531 113.25 li
207.531 113.25 li
208.281 113.5 li
209.281 113.75 li
210.281 113.75 li
211.031 114 li
212.031 114 li
213.031 114.25 li
213.781 114.5 li
214.781 114.5 li
215.531 114.75 li
216.531 114.75 li
217.531 115 li
218.281 115 li
219.281 115.25 li
130.281 96.25 mo
131.281 96.75 li
132.281 97 li
133.031 97.25 li
134.031 97.5 li
135.031 97.75 li
135.781 98 li
136.781 98.25 li
137.531 98.5 li
138.531 98.75 li
139.531 99 li
140.281 99.25 li
141.281 99.5 li
142.281 99.75 li
143.031 100 li
144.031 100.25 li
144.781 100.5 li
145.781 100.75 li
146.781 101 li
147.531 101.25 li
148.531 101.5 li
149.531 101.5 li
150.281 101.75 li
151.281 102 li
152.281 102.25 li
153.031 102.5 li
154.031 102.75 li
154.781 103 li
155.781 103.25 li
156.781 103.5 li
157.531 103.5 li
158.531 103.75 li
159.531 104 li
160.281 104.25 li
161.281 104.5 li
162.031 104.75 li
163.031 104.75 li
164.031 105 li
164.781 105.25 li
165.781 105.5 li
166.781 105.75 li
167.531 105.75 li
168.531 106 li
169.281 106.25 li
170.281 106.5 li
171.281 106.5 li
172.031 106.75 li
173.031 107 li
174.031 107.25 li
174.781 107.25 li
86.0313 78 mo
86.7813 78.5 li
87.7813 79 li
88.7813 79.5 li
89.5313 80 li
90.5313 80.5 li
91.2813 81 li
92.2813 81.5 li
93.2813 82 li
94.0313 82.5 li
95.0313 82.75 li
96.0313 83.25 li
96.7813 83.75 li
97.7813 84.25 li
98.5313 84.5 li
99.5313 85 li
100.531 85.5 li
101.281 85.75 li
102.281 86.25 li
103.281 86.5 li
104.031 87 li
105.031 87.25 li
105.781 87.75 li
106.781 88 li
107.781 88.5 li
108.531 88.75 li
109.531 89.25 li
110.531 89.5 li
111.281 90 li
112.281 90.25 li
113.031 90.5 li
114.031 91 li
115.031 91.25 li
115.781 91.5 li
116.781 92 li
117.781 92.25 li
118.531 92.5 li
119.531 92.75 li
120.531 93.25 li
121.281 93.5 li
122.281 93.75 li
123.031 94 li
124.031 94.5 li
125.031 94.75 li
125.781 95 li
126.781 95.25 li
127.781 95.5 li
128.531 95.75 li
129.531 96 li
130.281 96.25 li
41.5313 .5 mo
42.2813 5 li
43.2813 11.75 li
44.2813 17.25 li
45.0313 21.75 li
46.0313 25.5 li
47.0313 29 li
47.7813 32 li
48.7813 34.75 li
49.5313 37 li
50.5313 39.25 li
51.5313 41.5 li
52.2813 43.5 li
53.2813 45.25 li
54.2813 47 li
55.0313 48.5 li
56.0313 50 li
57.0313 51.5 li
57.7813 52.75 li
58.7813 54 li
59.5313 55.25 li
60.5313 56.5 li
61.5313 57.75 li
62.2813 58.75 li
63.2813 59.75 li
64.2813 60.75 li
65.0313 61.75 li
66.0313 62.75 li
66.7813 63.5 li
67.7813 64.5 li
68.7813 65.25 li
69.5313 66.25 li
70.5313 67 li
71.5313 67.75 li
72.2813 68.5 li
73.2813 69.25 li
74.0313 70 li
75.0313 70.75 li
76.0313 71.25 li
76.7813 72 li
77.7813 72.75 li
78.7813 73.25 li
79.5313 74 li
80.5313 74.5 li
81.2813 75.25 li
82.2813 75.75 li
83.2813 76.25 li
84.0313 76.75 li
85.0313 77.5 li
86.0313 78 li
0 0 0 rgb
@
[] 0 dsh
487.781 137.5 mo
488.781 137.75 li
492.281 137.75 li
443.281 134.5 mo
446.031 134.5 li
447.031 134.75 li
448.781 134.75 li
449.781 135 li
452.281 135 li
453.281 135.25 li
456.031 135.25 li
457.031 135.5 li
459.781 135.5 li
460.531 135.75 li
463.281 135.75 li
464.281 136 li
466.031 136 li
467.031 136.25 li
469.531 136.25 li
470.531 136.5 li
473.281 136.5 li
474.281 136.75 li
476.781 136.75 li
477.781 137 li
480.531 137 li
481.531 137.25 li
484.031 137.25 li
485.031 137.5 li
487.781 137.5 li
398.781 131 mo
400.781 131 li
401.531 131.25 li
404.281 131.25 li
405.281 131.5 li
407.031 131.5 li
408.031 131.75 li
410.781 131.75 li
411.531 132 li
413.281 132 li
414.281 132.25 li
416.031 132.25 li
417.031 132.5 li
419.781 132.5 li
420.531 132.75 li
422.531 132.75 li
423.281 133 li
426.031 133 li
427.031 133.25 li
428.781 133.25 li
429.781 133.5 li
432.531 133.5 li
433.281 133.75 li
436.031 133.75 li
437.031 134 li
438.781 134 li
439.781 134.25 li
442.531 134.25 li
443.281 134.5 li
354.531 127 mo
356.281 127 li
357.281 127.25 li
359.031 127.25 li
359.781 127.5 li
361.781 127.5 li
362.531 127.75 li
364.531 127.75 li
365.281 128 li
367.031 128 li
368.031 128.25 li
369.781 128.25 li
370.781 128.5 li
372.531 128.5 li
373.531 128.75 li
375.281 128.75 li
376.281 129 li
378.031 129 li
379.031 129.25 li
380.781 129.25 li
381.531 129.5 li
383.531 129.5 li
384.281 129.75 li
386.281 129.75 li
387.031 130 li
388.781 130 li
389.781 130.25 li
392.531 130.25 li
393.531 130.5 li
395.281 130.5 li
396.281 130.75 li
398.031 130.75 li
398.781 131 li
310.031 122.25 mo
310.781 122.5 li
311.781 122.5 li
312.781 122.75 li
314.531 122.75 li
315.531 123 li
316.281 123 li
317.281 123.25 li
319.031 123.25 li
320.031 123.5 li
320.781 123.5 li
321.781 123.75 li
323.531 123.75 li
324.531 124 li
326.281 124 li
327.281 124.25 li
328.031 124.25 li
329.031 124.5 li
330.781 124.5 li
331.781 124.75 li
333.531 124.75 li
334.531 125 li
335.281 125 li
336.281 125.25 li
338.031 125.25 li
339.031 125.5 li
340.781 125.5 li
341.781 125.75 li
343.531 125.75 li
344.531 126 li
345.281 126 li
346.281 126.25 li
348.031 126.25 li
349.031 126.5 li
350.781 126.5 li
351.781 126.75 li
353.531 126.75 li
354.531 127 li
265.531 117 mo
266.531 117 li
267.281 117.25 li
268.281 117.25 li
269.281 117.5 li
270.031 117.5 li
271.031 117.75 li
271.781 117.75 li
272.781 118 li
273.781 118 li
274.531 118.25 li
275.531 118.25 li
276.531 118.5 li
278.281 118.5 li
279.031 118.75 li
280.031 118.75 li
281.031 119 li
281.781 119 li
282.781 119.25 li
283.781 119.25 li
284.531 119.5 li
286.281 119.5 li
287.281 119.75 li
288.281 119.75 li
289.031 120 li
290.031 120 li
291.031 120.25 li
291.781 120.25 li
292.781 120.5 li
294.531 120.5 li
295.531 120.75 li
296.281 120.75 li
297.281 121 li
299.031 121 li
300.031 121.25 li
301.031 121.25 li
301.781 121.5 li
302.781 121.5 li
303.531 121.75 li
305.531 121.75 li
306.281 122 li
307.281 122 li
308.281 122.25 li
310.031 122.25 li
221.031 110.5 mo
222.031 110.5 li
223.031 110.75 li
223.781 110.75 li
224.781 111 li
225.531 111.25 li
226.531 111.25 li
227.531 111.5 li
228.281 111.5 li
229.281 111.75 li
230.281 111.75 li
231.031 112 li
232.031 112.25 li
232.781 112.25 li
233.781 112.5 li
234.781 112.5 li
235.531 112.75 li
236.531 112.75 li
237.531 113 li
238.281 113.25 li
239.281 113.25 li
240.031 113.5 li
241.031 113.5 li
242.031 113.75 li
242.781 113.75 li
243.781 114 li
244.781 114 li
245.531 114.25 li
246.531 114.25 li
247.281 114.5 li
248.281 114.5 li
249.281 114.75 li
250.031 114.75 li
251.031 115 li
252.031 115 li
252.781 115.25 li
253.781 115.25 li
254.781 115.5 li
255.531 115.5 li
256.531 115.75 li
257.281 115.75 li
258.281 116 li
259.281 116 li
260.031 116.25 li
261.031 116.25 li
262.031 116.5 li
262.781 116.5 li
263.781 116.75 li
264.531 116.75 li
265.531 117 li
176.531 102 mo
177.531 102.25 li
178.531 102.5 li
179.281 102.5 li
180.281 102.75 li
181.281 103 li
182.031 103.25 li
183.031 103.5 li
183.781 103.5 li
184.781 103.75 li
185.781 104 li
186.531 104.25 li
187.531 104.25 li
188.531 104.5 li
189.281 104.75 li
190.281 104.75 li
191.281 105 li
192.031 105.25 li
193.031 105.5 li
193.781 105.5 li
194.781 105.75 li
195.781 106 li
196.531 106 li
197.531 106.25 li
198.531 106.5 li
199.281 106.5 li
200.281 106.75 li
201.031 107 li
202.031 107 li
203.031 107.25 li
203.781 107.5 li
204.781 107.5 li
205.781 107.75 li
206.531 108 li
207.531 108 li
208.281 108.25 li
209.281 108.5 li
210.281 108.5 li
211.031 108.75 li
212.031 109 li
213.031 109 li
213.781 109.25 li
214.781 109.25 li
215.531 109.5 li
216.531 109.75 li
217.531 109.75 li
218.281 110 li
219.281 110 li
220.281 110.25 li
221.031 110.5 li
132.281 90.5 mo
133.031 90.75 li
134.031 91 li
135.031 91.25 li
135.781 91.5 li
136.781 91.75 li
137.531 92 li
138.531 92.25 li
139.531 92.75 li
140.281 93 li
141.281 93.25 li
142.281 93.5 li
143.031 93.75 li
144.031 94 li
144.781 94.25 li
145.781 94.5 li
146.781 94.75 li
147.531 95 li
148.531 95.25 li
149.531 95.5 li
150.281 95.75 li
151.281 96 li
152.281 96.25 li
153.031 96.5 li
154.031 96.75 li
154.781 97 li
155.781 97.25 li
156.781 97.25 li
157.531 97.5 li
158.531 97.75 li
159.531 98 li
160.281 98.25 li
161.281 98.5 li
162.031 98.75 li
163.031 99 li
164.031 99.25 li
164.781 99.25 li
165.781 99.5 li
166.781 99.75 li
167.531 100 li
168.531 100.25 li
169.281 100.5 li
170.281 100.75 li
171.281 100.75 li
172.031 101 li
173.031 101.25 li
174.031 101.5 li
174.781 101.75 li
175.781 101.75 li
176.531 102 li
87.7813 71 mo
88.7813 71.75 li
89.5313 72.25 li
90.5313 72.75 li
91.2813 73.25 li
92.2813 73.75 li
93.2813 74.25 li
94.0313 74.75 li
95.0313 75.25 li
96.0313 75.75 li
96.7813 76.25 li
97.7813 76.75 li
98.5313 77 li
99.5313 77.5 li
100.531 78 li
101.281 78.5 li
102.281 78.75 li
103.281 79.25 li
104.031 79.75 li
105.031 80 li
105.781 80.5 li
106.781 81 li
107.781 81.25 li
108.531 81.75 li
109.531 82 li
110.531 82.5 li
111.281 82.75 li
112.281 83.25 li
113.031 83.5 li
114.031 84 li
115.031 84.25 li
115.781 84.75 li
116.781 85 li
117.781 85.25 li
118.531 85.75 li
119.531 86 li
120.531 86.25 li
121.281 86.75 li
122.281 87 li
123.031 87.25 li
124.031 87.75 li
125.031 88 li
125.781 88.25 li
126.781 88.5 li
127.781 89 li
128.531 89.25 li
129.531 89.5 li
130.281 89.75 li
131.281 90 li
132.281 90.5 li
43.2813 .5 mo
44.2813 4.75 li
45.0313 9.5 li
46.0313 13.75 li
47.0313 17.25 li
47.7813 20.5 li
48.7813 23.5 li
49.5313 26 li
50.5313 28.5 li
51.5313 30.75 li
52.2813 32.75 li
53.2813 34.75 li
54.2813 36.5 li
55.0313 38.25 li
56.0313 40 li
57.0313 41.5 li
57.7813 43 li
58.7813 44.25 li
59.5313 45.75 li
60.5313 47 li
61.5313 48.25 li
62.2813 49.25 li
63.2813 50.5 li
64.2813 51.5 li
65.0313 52.5 li
66.0313 53.5 li
66.7813 54.5 li
67.7813 55.5 li
68.7813 56.5 li
69.5313 57.25 li
70.5313 58.25 li
71.5313 59 li
72.2813 59.75 li
73.2813 60.75 li
74.0313 61.5 li
75.0313 62.25 li
76.0313 63 li
76.7813 63.75 li
77.7813 64.25 li
78.7813 65 li
79.5313 65.75 li
80.5313 66.25 li
81.2813 67 li
82.2813 67.5 li
83.2813 68.25 li
84.0313 68.75 li
85.0313 69.5 li
86.0313 70 li
86.7813 70.5 li
87.7813 71 li
421.281 123.25 mo
416.781 123.25 li
416.781 132.25 li
425.781 132.25 li
425.781 123.25 li
421.281 123.25 li
cp
368.031 120.75 mo
363.531 120.75 li
363.531 129.75 li
372.531 129.75 li
372.531 120.75 li
368.031 120.75 li
cp
295.531 121.5 mo
291.031 121.5 li
291.031 130.5 li
300.031 130.5 li
300.031 121.5 li
295.531 121.5 li
cp
220.531 103.5 mo
216.031 103.5 li
216.031 112.5 li
225.031 112.5 li
225.031 103.5 li
220.531 103.5 li
cp
164.031 93.75 mo
159.531 93.75 li
159.531 102.75 li
168.531 102.75 li
168.531 93.75 li
164.031 93.75 li
cp
120.781 81.5 mo
116.281 81.5 li
116.281 90.5 li
125.281 90.5 li
125.281 81.5 li
120.781 81.5 li
cp
90.2813 72.25 mo
85.7813 72.25 li
85.7813 81.25 li
94.7813 81.25 li
94.7813 72.25 li
90.2813 72.25 li
cp
68.7813 57.75 mo
64.2813 57.75 li
64.2813 66.75 li
73.2813 66.75 li
73.2813 57.75 li
68.7813 57.75 li
cp
55.0313 23.25 mo
50.5313 23.25 li
50.5313 32.25 li
59.5313 32.25 li
59.5313 23.25 li
55.0313 23.25 li
cp
54.0313 38.75 mo
56.2813 38.75 li
55.0313 32.25 mo
55.0313 38.75 li
54.0313 17 mo
56.2813 17 li
55.0313 23.5 mo
55.0313 17 li
67.5313 71 mo
69.7813 71 li
68.7813 66.75 mo
68.7813 71 li
67.5313 53.25 mo
69.7813 53.25 li
68.7813 57.75 mo
68.7813 53.25 li
89.0313 85.25 mo
91.2813 85.25 li
90.2813 81.25 mo
90.2813 85.25 li
89.0313 68.25 mo
91.2813 68.25 li
90.2813 72.25 mo
90.2813 68.25 li
119.781 94.25 mo
122.031 94.25 li
120.781 90.5 mo
120.781 94.25 li
119.781 77.75 mo
122.031 77.75 li
120.781 81.5 mo
120.781 77.75 li
162.781 105.75 mo
165.031 105.75 li
164.031 102.5 mo
164.031 105.75 li
162.781 90.5 mo
165.031 90.5 li
164.031 93.75 mo
164.031 90.5 li
219.531 115.5 mo
221.781 115.5 li
220.531 112.5 mo
220.531 115.5 li
219.531 100.5 mo
221.781 100.5 li
220.531 103.5 mo
220.531 100.5 li
294.281 133.25 mo
296.531 133.25 li
295.531 130.5 mo
295.531 133.25 li
294.281 118.75 mo
296.531 118.75 li
295.531 121.5 mo
295.531 118.75 li
367.031 135.75 mo
369.031 135.75 li
368.031 129.75 mo
368.031 135.75 li
367.031 114.75 mo
369.031 114.75 li
368.031 120.75 mo
368.031 114.75 li
420.281 138 mo
422.531 138 li
421.281 132.25 mo
421.281 138 li
420.281 117.75 mo
422.531 117.75 li
421.281 123.5 mo
421.281 117.75 li
0 .764706 .784314 rgb
@
[2 2 ] 0 dsh
485.031 297.25 mo
486.031 297.5 li
486.781 297.5 li
487.781 297.75 li
488.781 297.75 li
489.531 298 li
491.531 298 li
492.281 298.25 li
440.531 291.75 mo
441.531 292 li
442.531 292 li
443.281 292.25 li
445.031 292.25 li
446.031 292.5 li
447.031 292.5 li
447.781 292.75 li
448.781 292.75 li
449.781 293 li
450.531 293 li
451.531 293.25 li
452.281 293.25 li
453.281 293.5 li
454.281 293.5 li
455.031 293.75 li
456.031 293.75 li
457.031 294 li
458.781 294 li
459.781 294.25 li
460.531 294.25 li
461.531 294.5 li
462.281 294.5 li
463.281 294.75 li
464.281 294.75 li
465.031 295 li
466.031 295 li
467.031 295.25 li
467.781 295.25 li
468.781 295.5 li
470.531 295.5 li
471.531 295.75 li
472.281 295.75 li
473.281 296 li
474.281 296 li
475.031 296.25 li
476.031 296.25 li
476.781 296.5 li
478.781 296.5 li
479.531 296.75 li
480.531 296.75 li
481.531 297 li
482.281 297 li
483.281 297.25 li
485.031 297.25 li
396.281 285.5 mo
397.031 285.75 li
398.031 285.75 li
398.781 286 li
399.781 286 li
400.781 286.25 li
401.531 286.25 li
402.531 286.5 li
403.531 286.5 li
404.281 286.75 li
405.281 286.75 li
406.031 287 li
407.031 287 li
408.031 287.25 li
408.781 287.5 li
409.781 287.5 li
410.781 287.75 li
411.531 287.75 li
412.531 288 li
413.281 288 li
414.281 288.25 li
415.281 288.25 li
416.031 288.5 li
417.031 288.5 li
418.031 288.75 li
418.781 288.75 li
419.781 289 li
420.531 289 li
421.531 289.25 li
422.531 289.25 li
423.281 289.5 li
424.281 289.5 li
425.281 289.75 li
426.031 289.75 li
427.031 290 li
428.031 290 li
428.781 290.25 li
429.781 290.25 li
430.531 290.5 li
431.531 290.5 li
432.531 290.75 li
433.281 290.75 li
434.281 291 li
435.281 291 li
436.031 291.25 li
437.031 291.25 li
437.781 291.5 li
438.781 291.5 li
439.781 291.75 li
440.531 291.75 li
351.781 278.5 mo
352.531 278.5 li
353.531 278.75 li
354.531 279 li
355.281 279 li
356.281 279.25 li
357.281 279.25 li
358.031 279.5 li
359.031 279.75 li
359.781 279.75 li
360.781 280 li
361.781 280 li
362.531 280.25 li
363.531 280.5 li
364.531 280.5 li
365.281 280.75 li
366.281 280.75 li
367.031 281 li
368.031 281.25 li
369.031 281.25 li
369.781 281.5 li
370.781 281.5 li
371.781 281.75 li
372.531 282 li
373.531 282 li
374.281 282.25 li
375.281 282.25 li
376.281 282.5 li
377.031 282.5 li
378.031 282.75 li
379.031 283 li
379.781 283 li
380.781 283.25 li
381.531 283.25 li
382.531 283.5 li
383.531 283.5 li
384.281 283.75 li
385.281 284 li
386.281 284 li
387.031 284.25 li
388.031 284.25 li
388.781 284.5 li
389.781 284.5 li
390.781 284.75 li
391.531 284.75 li
392.531 285 li
393.531 285 li
394.281 285.25 li
395.281 285.5 li
396.281 285.5 li
307.281 270.25 mo
308.281 270.5 li
309.031 270.75 li
310.031 270.75 li
310.781 271 li
311.781 271.25 li
312.781 271.5 li
313.531 271.5 li
314.531 271.75 li
315.531 272 li
316.281 272 li
317.281 272.25 li
318.031 272.5 li
319.031 272.5 li
320.031 272.75 li
320.781 273 li
321.781 273 li
322.781 273.25 li
323.531 273.5 li
324.531 273.5 li
325.531 273.75 li
326.281 274 li
327.281 274 li
328.031 274.25 li
329.031 274.5 li
330.031 274.5 li
330.781 274.75 li
331.781 275 li
332.781 275 li
333.531 275.25 li
334.531 275.5 li
335.281 275.5 li
336.281 275.75 li
337.281 276 li
338.031 276 li
339.031 276.25 li
340.031 276.5 li
340.781 276.5 li
341.781 276.75 li
342.531 277 li
343.531 277 li
344.531 277.25 li
345.281 277.25 li
346.281 277.5 li
347.281 277.75 li
348.031 277.75 li
349.031 278 li
349.781 278.25 li
350.781 278.25 li
351.781 278.5 li
262.781 260.75 mo
263.781 261 li
264.531 261.25 li
265.531 261.25 li
266.531 261.5 li
267.281 261.75 li
268.281 262 li
269.281 262.25 li
270.031 262.5 li
271.031 262.5 li
271.781 262.75 li
272.781 263 li
273.781 263.25 li
274.531 263.5 li
275.531 263.75 li
276.531 263.75 li
277.281 264 li
278.281 264.25 li
279.031 264.5 li
280.031 264.75 li
281.031 264.75 li
281.781 265 li
282.781 265.25 li
283.781 265.5 li
284.531 265.5 li
285.531 265.75 li
286.281 266 li
287.281 266.25 li
288.281 266.5 li
289.031 266.5 li
290.031 266.75 li
291.031 267 li
291.781 267.25 li
292.781 267.25 li
293.781 267.5 li
294.531 267.75 li
295.531 268 li
296.281 268 li
297.281 268.25 li
298.281 268.5 li
299.031 268.75 li
300.031 268.75 li
301.031 269 li
301.781 269.25 li
302.781 269.5 li
303.531 269.5 li
304.531 269.75 li
305.531 270 li
306.281 270.25 li
307.281 270.25 li
218.281 249 mo
219.281 249.25 li
220.281 249.5 li
221.031 249.75 li
222.031 250 li
223.031 250.25 li
223.781 250.5 li
224.781 250.75 li
225.531 251 li
226.531 251.25 li
227.531 251.5 li
228.281 251.75 li
229.281 252 li
230.281 252.25 li
231.031 252.5 li
232.031 252.75 li
232.781 253 li
233.781 253.25 li
234.781 253.5 li
235.531 253.75 li
236.531 254 li
237.531 254.25 li
238.281 254.5 li
239.281 254.75 li
240.031 255 li
241.031 255.25 li
242.031 255.5 li
242.781 255.75 li
243.781 256 li
244.781 256.25 li
245.531 256.5 li
246.531 256.75 li
247.281 257 li
248.281 257.25 li
249.281 257.5 li
250.031 257.5 li
251.031 257.75 li
252.031 258 li
252.781 258.25 li
253.781 258.5 li
254.781 258.75 li
255.531 259 li
256.531 259.25 li
257.281 259.5 li
258.281 259.5 li
259.281 259.75 li
260.031 260 li
261.031 260.25 li
262.031 260.5 li
262.781 260.75 li
174.031 234 mo
174.781 234.25 li
175.781 234.75 li
176.531 235 li
177.531 235.25 li
178.531 235.75 li
179.281 236 li
180.281 236.25 li
181.281 236.75 li
182.031 237 li
183.031 237.25 li
183.781 237.75 li
184.781 238 li
185.781 238.25 li
186.531 238.75 li
187.531 239 li
188.531 239.25 li
189.281 239.75 li
190.281 240 li
191.281 240.25 li
192.031 240.5 li
193.031 241 li
193.781 241.25 li
194.781 241.5 li
195.781 241.75 li
196.531 242.25 li
197.531 242.5 li
198.531 242.75 li
199.281 243 li
200.281 243.25 li
201.031 243.75 li
202.031 244 li
203.031 244.25 li
203.781 244.5 li
204.781 244.75 li
205.781 245 li
206.531 245.5 li
207.531 245.75 li
208.281 246 li
209.281 246.25 li
210.281 246.5 li
211.031 246.75 li
212.031 247 li
213.031 247.25 li
213.781 247.75 li
214.781 248 li
215.531 248.25 li
216.531 248.5 li
217.531 248.75 li
218.281 249 li
129.531 213 mo
130.281 213.5 li
131.281 214 li
132.281 214.5 li
133.031 215 li
134.031 215.5 li
135.031 216 li
135.781 216.5 li
136.781 217 li
137.531 217.5 li
138.531 218 li
139.531 218.5 li
140.281 218.75 li
141.281 219.25 li
142.281 219.75 li
143.031 220.25 li
144.031 220.75 li
144.781 221.25 li
145.781 221.5 li
146.781 222 li
147.531 222.5 li
148.531 223 li
149.531 223.5 li
150.281 223.75 li
151.281 224.25 li
152.281 224.75 li
153.031 225 li
154.031 225.5 li
154.781 226 li
155.781 226.25 li
156.781 226.75 li
157.531 227.25 li
158.531 227.5 li
159.531 228 li
160.281 228.25 li
161.281 228.75 li
162.031 229 li
163.031 229.5 li
164.031 230 li
164.781 230.25 li
165.781 230.75 li
166.781 231 li
167.531 231.5 li
168.531 231.75 li
169.281 232.25 li
170.281 232.5 li
171.281 232.75 li
172.031 233.25 li
173.031 233.5 li
174.031 234 li
85.0313 177.5 mo
86.0313 178.5 li
86.7813 179.5 li
87.7813 180.5 li
88.7813 181.5 li
89.5313 182.25 li
90.5313 183.25 li
91.2813 184.25 li
92.2813 185 li
93.2813 186 li
94.0313 186.75 li
95.0313 187.75 li
96.0313 188.5 li
96.7813 189.5 li
97.7813 190.25 li
98.5313 191 li
99.5313 191.75 li
100.531 192.5 li
101.281 193.25 li
102.281 194 li
103.281 194.75 li
104.031 195.5 li
105.031 196.25 li
105.781 197 li
106.781 197.75 li
107.781 198.5 li
108.531 199 li
109.531 199.75 li
110.531 200.5 li
111.281 201.25 li
112.281 201.75 li
113.031 202.5 li
114.031 203 li
115.031 203.75 li
115.781 204.25 li
116.781 205 li
117.781 205.5 li
118.531 206.25 li
119.531 206.75 li
120.531 207.25 li
121.281 208 li
122.281 208.5 li
123.031 209 li
124.031 209.5 li
125.031 210.25 li
125.781 210.75 li
126.781 211.25 li
127.781 211.75 li
128.531 212.25 li
129.531 213 li
40.5313 .5 mo
41.5313 23 li
42.2813 40.25 li
43.2813 53 li
44.2813 63.25 li
45.0313 71.75 li
46.0313 79 li
47.0313 85.5 li
47.7813 91 li
48.7813 96.25 li
49.5313 101 li
50.5313 105.25 li
51.5313 109.25 li
52.2813 112.75 li
53.2813 116.25 li
54.2813 119.5 li
55.0313 122.5 li
56.0313 125.25 li
57.0313 128 li
57.7813 130.75 li
58.7813 133 li
59.5313 135.5 li
60.5313 137.75 li
61.5313 139.75 li
62.2813 142 li
63.2813 144 li
64.2813 145.75 li
65.0313 147.75 li
66.0313 149.5 li
66.7813 151.25 li
67.7813 153 li
68.7813 154.5 li
69.5313 156 li
70.5313 157.5 li
71.5313 159 li
72.2813 160.5 li
73.2813 162 li
74.0313 163.25 li
75.0313 164.75 li
76.0313 166 li
76.7813 167.25 li
77.7813 168.5 li
78.7813 169.75 li
79.5313 170.75 li
80.5313 172 li
81.2813 173.25 li
82.2813 174.25 li
83.2813 175.25 li
84.0313 176.5 li
85.0313 177.5 li
1 0 0 rgb
@
[] 0 dsh
39.2813 329.5 mo
492.781 329.5 li
39.2813 329.5 mo
39.2813 .5 li
492.781 .5 li
492.781 329.5 li
39.2813 329.5 li
cp
0 0 0 rgb
@
492.781 319.75 mo
492.781 329.5 li
481.531 324.75 mo
481.531 329.5 li
470.031 324.75 mo
470.031 329.5 li
458.781 324.75 mo
458.781 329.5 li
447.531 324.75 mo
447.531 329.5 li
436.031 319.75 mo
436.031 329.5 li
424.781 324.75 mo
424.781 329.5 li
413.281 324.75 mo
413.281 329.5 li
402.031 324.75 mo
402.031 329.5 li
390.781 324.75 mo
390.781 329.5 li
379.281 319.75 mo
379.281 329.5 li
368.031 324.75 mo
368.031 329.5 li
356.781 324.75 mo
356.781 329.5 li
345.281 324.75 mo
345.281 329.5 li
334.031 324.75 mo
334.031 329.5 li
322.781 319.75 mo
322.781 329.5 li
311.281 324.75 mo
311.281 329.5 li
300.031 324.75 mo
300.031 329.5 li
288.781 324.75 mo
288.781 329.5 li
277.281 324.75 mo
277.281 329.5 li
266.031 319.75 mo
266.031 329.5 li
254.781 324.75 mo
254.781 329.5 li
243.281 324.75 mo
243.281 329.5 li
232.031 324.75 mo
232.031 329.5 li
220.531 324.75 mo
220.531 329.5 li
209.281 319.75 mo
209.281 329.5 li
198.031 324.75 mo
198.031 329.5 li
186.531 324.75 mo
186.531 329.5 li
175.281 324.75 mo
175.281 329.5 li
164.031 324.75 mo
164.031 329.5 li
152.531 319.75 mo
152.531 329.5 li
141.281 324.75 mo
141.281 329.5 li
130.031 324.75 mo
130.031 329.5 li
118.531 324.75 mo
118.531 329.5 li
107.281 324.75 mo
107.281 329.5 li
96.0313 319.75 mo
96.0313 329.5 li
84.5313 324.75 mo
84.5313 329.5 li
73.2813 324.75 mo
73.2813 329.5 li
61.7813 324.75 mo
61.7813 329.5 li
50.5313 324.75 mo
50.5313 329.5 li
39.2813 319.75 mo
39.2813 329.5 li
@
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFJBGN+Helvetica /Helvetica findfont ct_VMDictPut/JFJBGN+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]JFJBGN+Helvetica nfJFJBGN+Helvetica*1 [20 0 0 -20 0 0 ]msf34.3359 347.161 mo(0)sh135.892 347.161 mo(100)sh192.487 347.161 mo(150)sh249.867 347.161 mo(200)sh306.57 347.161 mo(250)sh363.266 347.161 mo(300)sh419.945 347.161 mo(350)sh476.656 347.161 mo(400)sh39.2813 329.5 mo
39.2813 .5 li
0 0 0 rgb
@
46.0313 .5 mo
39.2813 .5 li
46.0313 12.25 mo
39.2813 12.25 li
46.0313 24 mo
39.2813 24 li
52.7813 35.75 mo
39.2813 35.75 li
52.7813 35.75 mo
39.2813 35.75 li
46.0313 47.5 mo
39.2813 47.5 li
46.0313 59.25 mo
39.2813 59.25 li
46.0313 71 mo
39.2813 71 li
46.0313 82.75 mo
39.2813 82.75 li
52.7813 94.5 mo
39.2813 94.5 li
46.0313 106.25 mo
39.2813 106.25 li
46.0313 118 mo
39.2813 118 li
46.0313 129.75 mo
39.2813 129.75 li
46.0313 141.5 mo
39.2813 141.5 li
52.7813 153.25 mo
39.2813 153.25 li
46.0313 165 mo
39.2813 165 li
46.0313 176.75 mo
39.2813 176.75 li
46.0313 188.5 mo
39.2813 188.5 li
46.0313 200.25 mo
39.2813 200.25 li
52.7813 212 mo
39.2813 212 li
46.0313 223.75 mo
39.2813 223.75 li
46.0313 235.5 mo
39.2813 235.5 li
46.0313 247.25 mo
39.2813 247.25 li
46.0313 259 mo
39.2813 259 li
52.7813 270.75 mo
39.2813 270.75 li
46.0313 282.5 mo
39.2813 282.5 li
46.0313 294.25 mo
39.2813 294.25 li
46.0313 306 mo
39.2813 306 li
46.0313 317.75 mo
39.2813 317.75 li
52.7813 329.5 mo
39.2813 329.5 li
@
50.9063 83.4585 mo
63.1563 83.4585 li
53.2456 90.6587 li
57.0313 79.0083 li
60.8169 90.6587 li
50.9063 83.4585 li
cp
1 0 0 rgb
f
65.6563 107.958 mo
77.9063 107.958 li
67.9956 115.159 li
71.7813 103.508 li
75.5669 115.159 li
65.6563 107.958 li
cp
f
88.9063 120.958 mo
101.156 120.958 li
91.2456 128.159 li
95.0313 116.508 li
98.8169 128.159 li
88.9063 120.958 li
cp
f
121.906 131.958 mo
134.156 131.958 li
124.246 139.159 li
128.031 127.508 li
131.817 139.159 li
121.906 131.958 li
cp
f
165.906 153.208 mo
178.156 153.208 li
168.246 160.409 li
172.031 148.758 li
175.817 160.409 li
165.906 153.208 li
cp
f
223.156 165.209 mo
235.406 165.209 li
225.496 172.408 li
229.281 160.758 li
233.067 172.408 li
223.156 165.209 li
cp
f
298.656 182.208 mo
310.906 182.208 li
300.996 189.408 li
304.781 177.758 li
308.566 189.408 li
298.656 182.208 li
cp
f
371.656 194.458 mo
383.906 194.458 li
373.996 201.658 li
377.781 190.008 li
381.566 201.658 li
371.656 194.458 li
cp
f
430.656 201.458 mo
442.906 201.458 li
432.996 208.658 li
436.781 197.008 li
440.566 208.658 li
430.656 201.458 li
cp
f
55.5313 75 mo
57.7813 75 li
56.5313 74.25 mo
56.5313 75 li
55.5313 66 mo
57.7813 66 li
56.5313 66.75 mo
56.5313 66 li
69.5313 98 mo
71.7813 98 li
70.7813 97.75 mo
70.7813 98 li
69.5313 90.25 mo
71.7813 90.25 li
70.7813 90.5 mo
70.7813 90.25 li
371.281 177 mo
373.531 177 li
372.531 176.25 mo
372.531 177 li
371.281 168 mo
373.531 168 li
372.531 169 mo
372.531 168 li
431.031 169.5 mo
433.281 169.5 li
432.031 168.5 mo
432.031 169.5 li
431.031 160.25 mo
433.281 160.25 li
432.031 161 mo
432.031 160.25 li
1 0 1 rgb
@
[9.4325 2.8175 ] 4.71625 dsh
425.906 162.708 mo
438.156 162.708 li
428.246 169.908 li
432.031 158.258 li
435.816 169.908 li
425.906 162.708 li
cp
366.406 170.458 mo
378.656 170.458 li
368.746 177.658 li
372.531 166.008 li
376.316 177.658 li
366.406 170.458 li
cp
293.656 152.958 mo
305.906 152.958 li
295.996 160.159 li
299.781 148.508 li
303.566 160.159 li
293.656 152.958 li
cp
219.156 145.708 mo
231.406 145.708 li
221.496 152.909 li
225.281 141.258 li
229.066 152.909 li
219.156 145.708 li
cp
162.656 135.708 mo
174.906 135.708 li
164.996 142.909 li
168.781 131.258 li
172.567 142.909 li
162.656 135.708 li
cp
119.656 119.208 mo
131.906 119.208 li
121.996 126.409 li
125.781 114.758 li
129.567 126.409 li
119.656 119.208 li
cp
87.4063 102.458 mo
99.6563 102.458 li
89.7456 109.659 li
93.5313 98.0083 li
97.3169 109.659 li
87.4063 102.458 li
cp
64.6563 92.2085 mo
76.9063 92.2085 li
66.9956 99.4087 li
70.7813 87.7583 li
74.5669 99.4087 li
64.6563 92.2085 li
cp
50.4063 68.4585 mo
62.6563 68.4585 li
52.7456 75.6587 li
56.5313 64.0083 li
60.3169 75.6587 li
50.4063 68.4585 li
cp
@
[] 0 dsh
428.031 154 mo
425.031 158.5 li
428.031 163 li
431.031 158.5 li
428.031 154 li
cp
378.281 143.25 mo
375.281 147.75 li
378.281 152.25 li
381.281 147.75 li
378.281 143.25 li
cp
303.531 132.75 mo
300.531 137.25 li
303.531 141.75 li
306.531 137.25 li
303.531 132.75 li
cp
227.531 124 mo
224.531 128.5 li
227.531 133 li
230.531 128.5 li
227.531 124 li
cp
168.531 119.25 mo
165.531 123.75 li
168.531 128.25 li
171.531 123.75 li
168.531 119.25 li
cp
124.281 100.25 mo
121.281 104.75 li
124.281 109.25 li
127.281 104.75 li
124.281 100.25 li
cp
92.5313 90.75 mo
89.5313 95.25 li
92.5313 99.75 li
95.5313 95.25 li
92.5313 90.75 li
cp
69.7813 78.75 mo
66.7813 83.25 li
69.7813 87.75 li
72.7813 83.25 li
69.7813 78.75 li
cp
55.0313 60 mo
52.0313 64.5 li
55.0313 69 li
58.0313 64.5 li
55.0313 60 li
cp
0 0 1 rgb
@
427.071 136.75 mo
427.071 134.266 425.056 132.25 422.571 132.25 cv
420.087 132.25 418.071 134.266 418.071 136.75 cv
418.071 139.234 420.087 141.25 422.571 141.25 cv
425.056 141.25 427.071 139.234 427.071 136.75 cv
372.472 139.75 mo
372.472 137.266 370.455 135.25 367.972 135.25 cv
365.487 135.25 363.472 137.266 363.472 139.75 cv
363.472 142.234 365.487 144.25 367.972 144.25 cv
370.455 144.25 372.472 142.234 372.472 139.75 cv
299.991 126.79 mo
299.991 124.306 297.976 122.29 295.491 122.29 cv
293.007 122.29 290.991 124.306 290.991 126.79 cv
290.991 129.274 293.007 131.29 295.491 131.29 cv
297.976 131.29 299.991 129.274 299.991 126.79 cv
224.991 115.03 mo
224.991 112.546 222.975 110.53 220.491 110.53 cv
218.007 110.53 215.991 112.546 215.991 115.03 cv
215.991 117.514 218.007 119.53 220.491 119.53 cv
222.975 119.53 224.991 117.514 224.991 115.03 cv
168.471 93.79 mo
168.471 91.3062 166.455 89.29 163.971 89.29 cv
161.487 89.29 159.471 91.3062 159.471 93.79 cv
159.471 96.2739 161.487 98.29 163.971 98.29 cv
166.455 98.29 168.471 96.2739 168.471 93.79 cv
126.471 96.79 mo
126.471 94.3062 124.455 92.29 121.971 92.29 cv
119.487 92.29 117.471 94.3062 117.471 96.79 cv
117.471 99.2739 119.487 101.29 121.971 101.29 cv
124.455 101.29 126.471 99.2739 126.471 96.79 cv
93.5913 79.27 mo
93.5913 76.7861 91.5752 74.77 89.0913 74.77 cv
86.6074 74.77 84.5913 76.7861 84.5913 79.27 cv
84.5913 81.7539 86.6074 83.77 89.0913 83.77 cv
91.5752 83.77 93.5913 81.7539 93.5913 79.27 cv
73.311 67.75 mo
73.311 65.2661 71.2954 63.25 68.811 63.25 cv
66.3271 63.25 64.311 65.2661 64.311 67.75 cv
64.311 70.2339 66.3271 72.25 68.811 72.25 cv
71.2954 72.25 73.311 70.2339 73.311 67.75 cv
59.5112 50.23 mo
59.5112 47.7461 57.4951 45.73 55.0112 45.73 cv
52.5273 45.73 50.5112 47.7461 50.5112 50.23 cv
50.5112 52.7139 52.5273 54.73 55.0112 54.73 cv
57.4951 54.73 59.5112 52.7139 59.5112 50.23 cv
54.0313 56.75 mo
56.2813 56.75 li
55.0313 54.75 mo
55.0313 56.75 li
54.0313 43.75 mo
56.2813 43.75 li
55.0313 45.75 mo
55.0313 43.75 li
67.5313 73.5 mo
69.7813 73.5 li
68.7813 72.25 mo
68.7813 73.5 li
67.5313 62.25 mo
69.7813 62.25 li
68.7813 63.25 mo
68.7813 62.25 li
88.0313 84.5 mo
90.2813 84.5 li
89.0313 83.5 mo
89.0313 84.5 li
88.0313 73.75 mo
90.2813 73.75 li
89.0313 74.75 mo
89.0313 73.75 li
120.781 101.75 mo
123.031 101.75 li
122.031 101.25 mo
122.031 101.75 li
120.781 91.5 mo
123.031 91.5 li
122.031 92.25 mo
122.031 91.5 li
162.781 98.75 mo
165.031 98.75 li
164.031 98.25 mo
164.031 98.75 li
162.781 88.75 mo
165.031 88.75 li
164.031 89.25 mo
164.031 88.75 li
219.531 119.75 mo
221.781 119.75 li
220.531 119.5 mo
220.531 119.75 li
219.531 110.25 mo
221.781 110.25 li
220.531 110.5 mo
220.531 110.25 li
294.281 131.5 mo
296.531 131.5 li
295.531 131.25 mo
295.531 131.5 li
294.281 122 mo
296.531 122 li
295.531 122.25 mo
295.531 122 li
367.031 146.5 mo
369.031 146.5 li
368.031 144.25 mo
368.031 146.5 li
367.031 133 mo
369.031 133 li
368.031 135.25 mo
368.031 133 li
421.281 143.5 mo
423.531 143.5 li
422.531 141.25 mo
422.531 143.5 li
421.281 130 mo
423.531 130 li
422.531 132.25 mo
422.531 130 li
0 0 0 rgb
@
61.5513 132.79 mo
61.5513 130.306 59.5352 128.29 57.0513 128.29 cv
54.5674 128.29 52.5513 130.306 52.5513 132.79 cv
52.5513 135.274 54.5674 137.29 57.0513 137.29 cv
59.5352 137.29 61.5513 135.274 61.5513 132.79 cv
1 0 0 rgb
ef
190.071 232.75 mo
190.071 230.266 188.055 228.25 185.571 228.25 cv
183.087 228.25 181.071 230.266 181.071 232.75 cv
181.071 235.234 183.087 237.25 185.571 237.25 cv
188.055 237.25 190.071 235.234 190.071 232.75 cv
ef
477.831 297.79 mo
477.831 295.306 475.815 293.29 473.331 293.29 cv
470.848 293.29 468.831 295.306 468.831 297.79 cv
468.831 300.274 470.848 302.29 473.331 302.29 cv
475.815 302.29 477.831 300.274 477.831 297.79 cv
ef
184.038 14.312 mo
179.538 14.312 li
179.538 23.312 li
188.538 23.312 li
188.538 14.312 li
184.038 14.312 li
cp
0 .764706 .784314 rgb
@
188.537 36.771 mo
188.537 34.2876 186.52 32.271 184.037 32.271 cv
181.553 32.271 179.537 34.2876 179.537 36.771 cv
179.537 39.2544 181.553 41.271 184.037 41.271 cv
186.52 41.271 188.537 39.2544 188.537 36.771 cv
0 0 0 rgb
@
177.912 56.771 mo
181.995 56.771 li
181.995 60.854 li
186.079 60.854 li
186.079 56.771 li
190.163 56.771 li
190.163 52.687 li
186.079 52.687 li
186.079 48.604 li
181.995 48.604 li
181.995 52.687 li
177.912 52.687 li
177.912 56.771 li
cp
.501961 .501961 .501961 rgb
@
184.037 68.188 mo
181.037 72.688 li
184.037 77.188 li
187.037 72.688 li
184.037 68.188 li
cp
0 0 1 rgb
@
327.398 14.0122 mo
322.898 23.0122 li
331.898 23.0122 li
327.398 14.0122 li
cp
0 .705882 0 rgb
@
[9.4325 2.8175 ] 4.71625 dsh
321.273 35.0962 mo
333.523 35.0962 li
323.613 42.2964 li
327.398 30.646 li
331.184 42.2964 li
321.273 35.0962 li
cp
1 0 1 rgb
@
331.898 72.3882 mo
331.898 69.9038 329.882 67.8882 327.398 67.8882 cv
324.914 67.8882 322.898 69.9038 322.898 72.3882 cv
322.898 74.8726 324.914 76.8882 327.398 76.8882 cv
329.882 76.8882 331.898 74.8726 331.898 72.3882 cv
1 0 0 rgb
ef
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginJFJBGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/seven <1C60D8A8C9B7EF326C86E2C8FFDAFAAAF8B2EE45CDE12ADFFACC9341D807009D1D241E6029AF890199C52728BBB0F3ADB8945AB4753C3621AAE632A8EC4FD7F79CCD78EF> |-/nine <1C60D8A8C9B7EF326B464DF43714564059769E71FFFC685FC18F48C77D53AC88FCBBC12F494C4F63EED0BC4E888DFF584BE7D2D816586B9A4264CD850BFF6D2740D48815051A0D66B2C6D52B7F71CA6A6822ACB78F611F031D0F31B29F8F7C82DE8795DAD0A78F20A0C158D57307DA2BB022E8173A55705FD29D68A57A980A4A8A50AA38F194766F67D892E4FFF95162BD634B3243B2EC97981B62535F84C02C407EE586AAFD00BF4926CA361322725073A4D1FB7F2047C32550A5DE15> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/V <1C60D8A8C9B64EDFA60949676B75C625C6948873966B83A549B84A6BD5D6EE9C83058CE085EB61> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-systemdict /gcheck known {setglobal} if end {end} ifendJFJBGN+Helvetica /Encoding getdup 32 /space putdup 46 /period putdup 54 /six putdup 55 /seven putdup 57 /nine putdup 71 /G putdup 86 /V putdup 101 /e putpop%ADOEndSubsetFont
/JFJBGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 13{/.notdef}rp /G 14{/.notdef}rp /V 14{/.notdef}rp /e 154{/.notdef}rp]JFJBGN+Helvetica nfJFJBGN+Helvetica*1 [20 0 0 -20 0 0 ]msf200.156 23.3125 mo(7.7 GeV)sh200.156 41.3125 mo(11.5 GeV)[9.64844 11.123 5.55664 11.123 5.55664 15.5566 11.123 0 ]xsh200.156 59.3125 mo(19.6 GeV)sh200.156 77.3125 mo(27 GeV)sh321.273 53.0542 mo
333.523 53.0542 li
323.613 60.2554 li
327.398 48.604 li
331.184 60.2554 li
321.273 53.0542 li
cp
1 0 0 rgb
f
[] 0 dsh
321.273 53.0542 mo
333.523 53.0542 li
323.613 60.2554 li
327.398 48.604 li
331.184 60.2554 li
321.273 53.0542 li
cp
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginJFJBGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B64EDFF4A769B0E349B0B8A8759517834132408F730D5925332B160EAFC678A283B12B9F41A37E5CF702EF2D2E718583BF> |-/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/E <1C60D8A8C9B64EDFE336C703EA12FABA68C9F5D15F1A9B67653505BC29F8D56A4237858E054C3198877A> |-/I <1C60D8A8C9B854D0EE4B20327A907C36187261> |-/L <1C60D8A8C9B7EF320B5E1B1901757FD427860A5A6931496E07> |-/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1F006> |-systemdict /gcheck known {setglobal} if end {end} ifendJFJBGN+Helvetica /Encoding getdup 65 /A putdup 67 /C putdup 69 /E putdup 73 /I putdup 76 /L putdup 84 /T putpop%ADOEndSubsetFont
/JFJBGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L 7{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 154{/.notdef}rp]JFJBGN+Helvetica nfJFJBGN+Helvetica*1 [20 0 0 -20 0 0 ]msf342.656 23.3125 mo(39 GeV)sh342.656 41.3125 mo(62.4 GeV)sh342.656 59.3125 mo(200 GeV)sh342.656 77.3125 mo(2.76 )sh386.787 77.3125 mo(TeV ALICE)[10 11.123 13.3398 4.46289 13.3398 11.123 5.55664 14.4434 0 ]xsh[2 2 ] 0 dsh
314.898 72.9868 mo
339.898 72.9868 li
1 0 0 rgb
@
[] 0 dsh
314.898 54.8286 mo
339.898 54.8286 li
@
[2 2 ] 0 dsh
314.898 36.6704 mo
339.898 36.6704 li
1 0 1 rgb
@
[] 0 dsh
314.898 18.5122 mo
339.898 18.5122 li
0 .705882 0 rgb
@
[2 2 ] 0 dsh
171.537 72.9868 mo
196.537 72.9868 li
0 0 1 rgb
@
[] 0 dsh
171.537 54.8296 mo
196.537 54.8296 li
.501961 .501961 .501961 rgb
@
[2 2 ] 0 dsh
171.537 36.6709 mo
196.537 36.6709 li
0 0 0 rgb
@
[] 0 dsh
171.537 18.5122 mo
196.537 18.5122 li
0 .764706 .784314 rgb
@
.137255 .121569 .12549 rgb
JFJBGN+Helvetica*1 [20 0 0 -20 0 0 ]msf85.5234 347.161 mo(50)[11.123 0 ]xsh6.70605 334.961 mo(0.5)sh6.70605 217.211 mo(0.6)sh6.70605 100.461 mo(0.7)sh0 0 0 rgb
%ADOBeginSubsetFont: Helvetica-Oblique Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica-Oblique def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 78 /N putdef/FontBBox {-933 -481 1571 1138} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/N <1C60D8A8C9B6079F42CB3557789DA0D2AF33C24E25CE330155B6B0CB575AF317DBE67DDF020DFC2C95147AA45D9DED> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFJBGO+Helvetica-Oblique /Helvetica-Oblique findfont ct_VMDictPut/JFJBGO+Helvetica-Oblique*1 [78{/.notdef}rp /N 177{/.notdef}rp]JFJBGO+Helvetica-Oblique nfJFJBGO+Helvetica-Oblique*1 [20 0 0 -20 0 0 ]msf249.234 369.166 mo(N)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginJFJBGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/p <1C60D8A8C9B7EF322BA467487181334E955BE246DF5D0EF3A11E2BDC8B674F6546E88A741A6A22FD8101960B985F64CBBE95E02BBF21B77F9A8334BFBA9533492E7CA0F0DECFBF12D8467325B4174F987BBF353C73C5D70057F40D42361649961064C7B7F613D284310CB0B59908DA85F34298558C6B0DF453AED21873A379BC9BBE582E1040BDEC2230FBB52642> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-systemdict /gcheck known {setglobal} if end {end} ifendJFJBGN+Helvetica /Encoding getdup 97 /a putdup 112 /p putdup 114 /r putdup 116 /t putpop%ADOEndSubsetFont
/JFJBGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L 7{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a 3{/.notdef}rp /e 10{/.notdef}rp /p /.notdef /r /.notdef /t 139{/.notdef}rp]JFJBGN+Helvetica nfJFJBGN+Helvetica*1 [11.5938 0 0 -11.5938 0 0 ]msf264.484 374.166 mo(p)sh270.734 374.166 mo(a)sh276.984 374.166 mo(r)sh280.578 374.166 mo(t)sh15.6172 162.793 mo
6.25195 166.67 li
15.6172 171.035 li
15.6172 162.793 li
cp
16.5938 172.354 mo
2.83398 165.947 li
16.5938 160.313 li
16.5938 172.354 li
cp
f
8.13672 153.197 mo
8.2998 153.401 8.67676 153.821 9.26953 154.457 cv
16.5938 156.288 li
16.5938 157.987 li
9.70898 156.266 li
8.83691 156.047 8.25098 156.022 7.95117 156.188 cv
7.6709 156.366 7.53125 156.571 7.53125 156.805 cv
7.53125 157 7.61914 157.195 7.79492 157.389 cv
7.96387 157.6 8.22461 157.78 8.57617 157.926 cv
8.94043 158.083 9.21387 158.19 9.39648 158.249 cv
9.39648 158.61 li
8.9209 158.491 8.56641 158.375 8.33203 158.265 cv
8.08496 158.145 7.79785 157.94 7.47266 157.65 cv
7.14746 157.36 6.89355 157.036 6.71094 156.678 cv
6.54199 156.323 6.45703 155.97 6.45703 155.619 cv
6.45703 155.267 6.54199 154.965 6.71094 154.715 cv
6.89941 154.463 7.08203 154.323 7.25781 154.295 cv
7.48535 154.261 7.87598 154.239 8.42969 154.227 cv
7.88965 153.708 7.4502 153.237 7.11133 152.813 cv
6.79199 152.441 6.58105 152.069 6.47656 151.698 cv
6.3916 151.338 6.34277 151.102 6.33008 150.987 cv
6.31738 150.886 6.31055 150.751 6.31055 150.583 cv
6.31055 150.217 6.33984 149.952 6.39844 149.784 cv
6.45703 149.577 6.60352 149.34 6.83789 149.073 cv
7.05957 148.823 7.37207 148.633 7.77539 148.506 cv
8.15332 148.399 8.625 148.417 9.19141 148.558 cv
19.1328 150.819 li
19.3281 150.868 19.6279 150.891 20.0313 150.887 cv
20.6367 150.882 li
20.6367 152.66 li
20.4092 152.641 20.0537 152.612 19.5723 152.569 cv
19.2139 152.551 18.9014 152.509 18.6348 152.442 cv
9.66992 150.456 li
9.25293 150.351 8.92773 150.312 8.69336 150.338 cv
8.44629 150.387 8.21777 150.508 8.00977 150.704 cv
7.80176 150.925 7.69727 151.274 7.69727 151.749 cv
7.69727 151.905 7.72363 152.117 7.77539 152.383 cv
7.83398 152.678 7.9541 152.95 8.13672 153.197 cv
8.13672 153.197 li
cp
f
0 175.471 mo
0 174.471 li
11.1875 178.689 li
11.1875 179.689 li
0 175.471 li
cp
f
11.1875 179.689 mo
11.1875 178.689 li
22.375 174.471 li
22.375 175.471 li
11.1875 179.689 li
cp
f
0 146.346 mo
0 145.346 li
11.1875 141.127 li
11.1875 142.127 li
0 146.346 li
cp
f
11.1875 142.127 mo
11.1875 141.127 li
22.375 145.346 li
22.375 146.346 li
11.1875 142.127 li
cp
f
JFJBGN+Helvetica*1 [20 0 0 -20 0 0 ]msf57.875 280.17 mo(0)sh68.6875 280.17 mo(.)sh74.0938 280.17 mo(1)sh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 60 /less putdef/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7A73DB682175B0E07AC8369CB0493D2376E9AF29A65D14A7A15C9916673AED9A3> |-/less <1C60D8A8C9B79676FB28C764D75DE51C1BB2B78BD82130A2E3CBB58B61AA1BC72C1F94EA48C6> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/JFJBGP+Symbol /Symbol findfont ct_VMDictPut/JFJBGP+Symbol*1 [60{/.notdef}rp /less 195{/.notdef}rp]JFJBGP+Symbol nfJFJBGP+Symbol*1 [20 0 0 -20 0 0 ]msf86.5625 280.17 mo(<)sh112.459 279.193 mo
108.582 269.828 li
104.217 279.193 li
112.459 279.193 li
cp
102.898 280.17 mo
109.305 266.41 li
114.939 280.17 li
102.898 280.17 li
cp
f
122.056 271.713 mo
121.852 271.876 121.432 272.253 120.796 272.846 cv
118.965 280.17 li
117.266 280.17 li
118.987 273.285 li
119.205 272.413 119.231 271.827 119.065 271.527 cv
118.887 271.247 118.682 271.107 118.447 271.107 cv
118.252 271.107 118.058 271.195 117.864 271.371 cv
117.652 271.54 117.473 271.801 117.327 272.152 cv
117.17 272.517 117.063 272.79 117.004 272.973 cv
116.643 272.973 li
116.762 272.497 116.876 272.143 116.987 271.908 cv
117.108 271.661 117.313 271.374 117.603 271.049 cv
117.892 270.724 118.216 270.47 118.574 270.287 cv
118.929 270.118 119.282 270.033 119.634 270.033 cv
119.985 270.033 120.287 270.118 120.537 270.287 cv
120.789 270.476 120.929 270.658 120.957 270.834 cv
120.991 271.062 121.014 271.452 121.025 272.006 cv
121.544 271.466 122.016 271.026 122.439 270.688 cv
122.812 270.368 123.184 270.157 123.555 270.053 cv
123.914 269.968 124.151 269.919 124.265 269.906 cv
124.366 269.894 124.501 269.887 124.67 269.887 cv
125.035 269.887 125.301 269.916 125.469 269.975 cv
125.675 270.033 125.912 270.18 126.179 270.414 cv
126.43 270.636 126.619 270.948 126.746 271.352 cv
126.853 271.729 126.836 272.201 126.694 272.768 cv
124.434 282.709 li
124.385 282.904 124.362 283.204 124.365 283.607 cv
124.37 284.213 li
122.593 284.213 li
122.611 283.985 122.641 283.63 122.683 283.148 cv
122.701 282.79 122.743 282.478 122.81 282.211 cv
124.797 273.246 li
124.901 272.829 124.94 272.504 124.915 272.27 cv
124.866 272.022 124.744 271.794 124.548 271.586 cv
124.327 271.378 123.979 271.273 123.503 271.273 cv
123.347 271.273 123.136 271.3 122.869 271.352 cv
122.574 271.41 122.303 271.53 122.056 271.713 cv
122.056 271.713 li
cp
f
JFJBGP+Symbol*1 [20 0 0 -20 0 0 ]msf132.313 280.17 mo(<)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginJFJBGN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/f <1C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58ED82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05FD148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D520CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2741F9BB15B> |-systemdict /gcheck known {setglobal} if end {end} ifendJFJBGN+Helvetica /Encoding getdup 99 /c putdup 100 /d putdup 102 /f putdup 110 /n putdup 111 /o putpop%ADOEndSubsetFont
/JFJBGN+Helvetica*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L 7{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e /f 7{/.notdef}rp /n /o /p /.notdef /r /.notdef /t 139{/.notdef}rp]JFJBGN+Helvetica nfJFJBGN+Helvetica*1 [20 0 0 -20 0 0 ]msf146.469 280.17 mo(1)sh157.281 280.17 mo(.)sh162.688 280.17 mo(6)sh57.875 310.17 mo(C)sh72.0313 310.17 mo(o)sh82.8438 310.17 mo(r)sh89.0938 310.17 mo(r)sh95.3438 310.17 mo(e)sh106.156 310.17 mo(c)sh116.156 310.17 mo(t)sh121.563 310.17 mo(e)sh132.375 310.17 mo(d)sh143.188 310.17 mo( )sh148.594 310.17 mo(f)sh154 310.17 mo(o)sh164.813 310.17 mo(r)sh171.063 310.17 mo( )sh176.469 310.17 mo(a)sh187.281 310.17 mo(c)sh197.281 310.17 mo(c)sh207.281 310.17 mo(e)sh218.094 310.17 mo(p)sh228.906 310.17 mo(t)sh234.313 310.17 mo(a)sh245.125 310.17 mo(n)sh255.938 310.17 mo(c)sh265.938 310.17 mo(e)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JFJBGP+Symbol*1 uf/JFJBGP+Symbol uf/Symbol uf/JFJBGN+Helvetica*1 uf/JFJBGN+Helvetica uf/Helvetica uf/JFJBGO+Helvetica-Oblique*1 uf/JFJBGO+Helvetica-Oblique uf/Helvetica-Oblique ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.4%%For: (Gary Westfall) ()%%Title: (delta_eta_fig6_npart_fit.eps)%%CreationDate: 1/12/15 2:12 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&kB\mDdK"T2J9q9cS9$SK)]K2&)^f<l#pqLU0Y?rT37iU)F`'5An*\JHjr(p!X/f3r;C/:fMkr\/[aX>]?6K6<1klX_5hp::%7)8iMJAG]o/NYp@C>o[mj)N_s)iMYo`^gsEOpD<.)h)].]Mg"$V[^@'[L^:Z-cmR;-4XS7=Ss,m)P=5oG_-e<pj,[4b?.kVP83PO%$F)aGVDWc"(OfUa0_!0&IIjhclfJ,!UL1W_DoT_apMT`4gT?h;oE#m*H=U,\Y42j=fO.3Z+R&L9*s9>fiNuicT21q2IRkBPM#dH6%1diV&P(4<5(AnSjNXb:nn4OQ^*W`H0%fd#2Vcr#b!W7cQZ[[/fq3!i]YiCo!IQM5I#@b0Y%P*]W((CD+Ysa\"f#'GY20Qp;1%7]G%&MOhppm:kO[fhAW<e7b8%)t"62TB37l5;N;pg6\l?][q5'L,D6a<-Gujo5@E!o^B@:]7,]FA?WLn@Dml^7tTP-l+oW;g]&.ZgUuH%fUQK.$ug]q#!M<,a,`KYM"M)&SM\>(%"Q;klu*ld8Us.Sg>Ud-d7:nB6j!I.1`D>jUVXH!'FI9f!C1`L&I]NZ!IkB<$?:cp`]trr%U(;3m.4c#WKZKgDJIuXL0l%eqoAql%G;M4Z*gT`B*+M9ESGIkOn]#kS-^aq5:':?R7smrC!T^0R`01G@pSeNSQFG<eZ%9eXJo:f8%#[8DrCLU%%@m?_9i:YREn7`.SI/=Rs`(9rEN>iO.hu&$'K`bJ;qsr2^IK3/7?iC$Hqhc&7\m2En?Q#?'Nk"QR#_X&h[?tP1h^eR.%7Q&!n1`nVY*e8pff(d".(tXLg+%*gk$ud3"C%1*2X#TQJS:,NOJR;;lQFo+K[`oS=2u!ZY/O?cjG\mbq/O=O@6o@,)9i#"mKC?ae%SRV1NIdg&t#BANX!W;YR8,TTG<06kX8t^*M>-IIkDhf>U#BgIsG[lACVrKYmdK.Ti!,_"j&A,].O=ZDU0P@:CS>AEL%kKd1Q8hY0%R4hq@[E(3p/e%)B]Ch$9/@R"0&bGJKpsuo7M17FR[:B1^%au:*5V9H)r4Kkea_;4!0F]`*4,k7o3>)rb-2t=FiW#LNYmpO8U^JTf%20a\#CBc-WEdQZ&3Db3@Hp\n*q!?(MUGr9Rpi6Tg-[42GpZ8BjaOA!qs&8V':e%llcm9dJ62r&n"tW5/R4f7JoSra=qJj+ECC(/t%AK&b`!W-SS^o.hsT+2"h.@M]%^X4tCcJY0D!Pu-f!6i.t^dCehJ=s10k1LRrEOLM`$YXik&18*HLr#G@M.i=O3DW49RI+7I@SNEi%^!7GG3npT.2/6!J>!.$<h(>YG/(NXE&*B.'1kd/CP"QncD/(1Of]3%o*@QBd%%Emr5tu'.7N6`5drp`l:7F+a3eDWJD"3d/Jq<Y)%]e\$/OiFUq!Xk/J5(eWT9gNNo]U]V\77\>PXJt<Li(kHhZ]Ale.I,ap"UO<U#)og238qQcGIW+'N.I<Lq>=PQ5PiZ4]O@ul#D;P&%!.O3sO8`DeVU%La5cZSK+;XMK;8DoRC^n*HIEV!dW.O'e49YhB+#O&l!QUiu__6a0495$_cu[5R[[o*a1EYiX#.Yhih1:rb-9qqk%!Q654k5]lliG3<"3G()N&eQ3^H;J5SP8j+%47L,%l!>Xp^(S-a*aLH2VC*ii0`QoHkI<5`p;=mc0Qh*HLJj@,.(0Qc)r!V!TsZ^>%n)0E)Ye<5O8(@]]g=<Yg_I1\cM(ro7"8**[f)O]-@r(uM^,V'pjF%'K!?8J<KC<Uq0=KXr'YsgVIDCil6guH!b5A=>FpXcA^QEl6%qR+!7$XXQ/*a&+PTKJ0OfO:Zf]"Q+lfYNAmB-B4#_!\Zd^aTaOpR;A[_"ZMJqtCoU3=u=H#/!GE&7NT_E:JMM-X#*O=(0.KhpgV-%-d]Id(^l*4\M3^_@a0K>5%:575GMRoqu7*FD=k]R[A=^^NeqWr`WR:Js#DX'[6+Z_n:)=%&Ha'_Er2.9.0L:0=\R=$4bAA%hicc6%o#1F%%2JJFNHbC,%d-=Qi#70-!L0+u1feGAr>0XI/=OcP!Vl>tip;:"!"9;B'TLqtnq_>q+uVNM)_cFOfFCD^*#B@>ZHE<.5f:TC%mN.Fpf%9jeJpILYfAkc(!#g6G>N"_>0?,8Ffp2V*k'P*+\C#0_FdF58`gN`RA'4j.)?(b7m_$qL+rUuc&,orj#U;E\+NfA%n!JY4%CVc@P_3YB$n-a^AQSIDW4rHT"rPg;]q7VD!^&oaF;Ud.J&_P2CpfF2.`]tfDd_BH>((J8[^EPu/6RX"47DO[\-kV<O(c2e]"XEN'%5VNb+U0iM7E8hE%3r4p(FmL4'lhE]Mf84ubYCke`A?Vd.6lco!rY'EF0`"Sp+i3A,;25:Ls2`k1oD^%^*Va:?q@idaS^ti"j_jZj%"9MO]3nf"r]_5Y:A9s5_<8c8H*ic60gW%f(E8OOMgLJLA'e_*]Wo*j&E44]SSf$/b[MoW54`5EVJE)^+)3q/:-2r;-:HbER,REQ4%Tmm8s6pJfoVu+W<GEoBWB!;\lb]b0HnCnSPN3U:Xke#a9X+Noc\."]gi)h%s3?1;]5hl4qJGh(q=tC_U)Im/SN4od^XkO!B#Pctc%8#p7OdLl_:5u:aJ]/B<V'6[JT%q+0R-EtD;#j:+2Fu^_C5_<EbenBhZ9f3;T(dOIRmngd7,sjg,D[0YDL^o+Poq>*A9A!D>1rsb`%Q3_5S.DXpqJ2l.oYEMXml&k0*Q_OMcj<1>I$l!]@a&)7l(LPdu,8ct4be_n(,l^U'Q;(h?XW_S2>CM2G2I>DT/'[*>eEcj`!Il!,%Y4D8.Bt\+hU5pBecp@/cH6Eu]7:YtGn^:`_D/e-Y$OP>cNf-A-Z<^meU)=Z)6p_K^VB(%V[>an6Z'K.Vg0p3,OX<+/;/BIQ-?pRa%)QL2_ij5u2ES5fVF]?.G+Nm8k4/(EL"$j0OiG_UU(W:69Nu0BUN.;(2?NMI4.l/.t;UZVMmlFoNq;4\iX54UIL#4^,M9!Iga=D%X%3:N_18V0cC:,5e<C6/kR:*:FjBJ:R\=\'C5YE=&R*`-N"'OlcN)EJ4p$2UVfdVMD4N0MCUD\6?[Mo:GiViWH'fF[IlTNNPtbo0hM%+LX-IM@86DL2aY%_id@N8SG;d1MT,SIP;D4,@%-(!Y\8/E:UY]Ph-`SQHY/eQ^C0&.A03/hfK*Omn_2@?p#\d(!r!@hQ43EYm3NR%/B=Y5dhBHDqnjOo!2%kXZ<49-#=aT=nR8$+5=]m5m+*aKr!PTJ.@q:42uO+oV&]G/b-]po9HM[0rK$+OL]DB'N*-gX'qF=LS7,UX%82)]nCV3'If)ck("2`I)Bob`S5(;f:%KD]`#Uj^['E(Sf2JEbNePZ8m:%[LRR\r2_qHoP%8D`Dq*f8-k=-NSC3D>SQN8e:$#,[bg%EW"kgU'pp]s-^%fs'_4VZ[_oa>N>bS1a(DnaZj&ILLLR./0#'R?FCiU$eij++6!IM+oh#Y'aaZKra7"Q7b>D@e)Nb&=`hR]/lc_V%7uj)oE<KkY7<!?\9:`B[GQ,cR18P@.6he&*ir8pq;o9;[W"AQ=:"o2g_YPLbf-O1I$'%VRrp/\g(odOY(H2%#Rf[Nlg3t<Mm)T'h%:7#]--XL;6EY5-&FpFPU%tEP-i\156K6_i6fZl;FP`Y@<ku<lcfjNl5KSJ7o@a*JN8MUSr-AOS:/\TYP9Wi1uX:Hioq78;13YKFB%#&=7l`">3]'/21p)HU,SoFe'sEDGo-;J<We$!>Sb*5h0)B[<]WEPf6'G(;g<EcYEZI&Tr.?jhor3LIU6*21)sc]8<I9C=Jfrfb)_%T9`CUN?KGX$jYguY`(lpZ]it;F'^=nXmL[2$LmZG&hO3u%]D;IF[3>dgOVUH'G%H#R?`:H[f$RY\K#$C0Rdk.>'p%ZO(`ST2I<Q>%>c+$Q:Y*]0kQ$QVrb[=R,m<8+#$=G2]lH@NkP5L&A2]IQ24&"N)a+eJ?S,^C_4fNZKqgJ>+58Ei"ctNHdbXouKMRr4NKGa6qEA8;%6=dDqB;d#r=CHQ5pi/.]QDqBY.cgRB:+k2@K;=liNAhZa2d3->%a6'WGBc53lWb+Xc;/C<Gam>?P;"$f"c`%K+K!:<kZu&bf/Utg%o5jqhX$#U*rfUMa_>kB3pkp?$K_hDK#H()YGb_'[<J:NO5V<ip7MJn-"VTNs8BFIT&^eT`kih9k+1G'MhbN]kGOZ!ESa(R"Z943u%B[A;l+""PM=E:P`>SbP;A';T92RK_k5hjXP&5jaBJhKlT_\A`7RpDfXR5bNp1ZkSAjsRL`>;)OMY:fMbrcD<cQU'Rcbt*tW4Bpe!%@UbgPemq)EX1"PXM@,<?\Um:Y^_O5AE"*!iHarj6LPmge:$1b`"Kr)rH').i*J#s^2f6rX1gRYG+$lqK]93if//Zoj;MRH9XMn<"%>D%I)BhRMWWH0Lr/@W7Ff`W7pn;2aqNDWYZ<DEji8[F:hUQ&>34;"n$Hj=I\E)*BP\O?]BmZ(\`Kdb7]Nl=17Nq3,]A+'n0-fCE;%7@cJT#4Z0g[;md<[G6`BM(>8D'/tQ?Ig6UAh)d$o"FedfeSt5'LHsXdENjO]KF'M&MKQ'EUDq,g<ZW*gh&@i&(2O+PkU\!<Wr*Uu%W]BAoH!G]o'L^GZL1)REJ?RAf\N!.'41j_]4C2q`GA9(e%%LKL@,I%aoA/h"2j;8lgX+Se00?u3oYg-AW@W4nd<R6k*\S(kCUJh,%I9p$rX0(KGTIgF3pcu+GJO:N;aS(d39;Sk+Sc`*t$>=/os(s;-J6b2a%g%EijX\c#6k^0aj;[WWV>uM3m?pcN->I]^kbo4'+dEe^%'IT7=/MBL$.S]ptS^^MgL`-o4V0Kn=Zp#YRbN"=s*Af/q_/PoC]fp]"HrOtaHrMfl8!mg`TEVc7/]\bMG="r-:pTb&l6Qp5GXT]"%Ua'b:"1E><*<)!7GF;JnH8D1V/0M$8YG1O6D>rP6XO=4A\4_a2V:t>jAK&\4DE[f"?7Sli-<mbD05bi9Y5&qN)>_-.Xg+EX+6[kT%IG`:..keVj$[#'f(UbOH?<L!cMjdRjR[Y-th>ngM>TVRtj:+R([2j&j<'9fUKXs^cj+'$fi[+n>VpY^Z6;(_R<LOqQqj5ip_DKRU%4-0g0aADqZ+O@]6BRJm'Ut1iEA"p92d@!59DJ3_-G!eW$?8nZld;41%:=mW<O(u!_b_WBa^4X\Oe!QPa+fR1?!MP#%$;N0d0j[1R%:LTnfmhVO*g^\1h7aPR.^`tQJV$=@1k%:Y&CE7rP0Qr5Fo_=VVEWH\N_A0Q`)rX;Sl.^g(Z&Fct->XE\de!LqGm2ke0"3EIFZ>2_%BIHq0eT*9[.FX<cK%pi(WU]'';;31X>6;..L_B-9_ut(X9LE8J;:$ek!N@d4W58,%-W;L@?.mI&nIhg=,>bGoBff1R&ulB]]JG_F%@MmHRfQPFhO\!NmW0LP"0\PsN-2XaPlSZE8@hA?d(ijBhZ?P20m4X7bYFnL,[K55)cfLA]+[I%a?7iVndY?[V3Vpk[DhXjOf8qsE%e:M/P`KZ`*C,USa4)!!kr8s0b;#pM^i[&&3J6sTikreP]0::nb<$GT8]Y45%^2Dtd)9t&QAFc_L;AGc+"'`Z19W6IT;DOkjW<r/R%n@/\t&m@1*^Eg`c-"ceDU>Aeg'oNB>CCO`hD!g/%d`=$:0S_'@.WdESH;Ogq9UoPP6f8Rb^;?&T=6.!4H9E;uiDB7,_f3%qrH+mn%*c*:lh;&?>>Fn1L:u*[co<"uh0tH\[iY(jGk3-T_*5,/1?E9KlE&QDIZ9@:ZVb*sf%R.i`JT1D@mjCcCV7G?!cD?!&c<T):,BMpU%ctBTD;GGVkC",*Xk-^Of/fhsD`T9I!;Y#-No.s@jklBY"Pq&)1m%\kXrI,R"+!,WT6Suo4]mF"o1=>ttV%bi&'n4cC2hRq`o/F[P%^s'(%/Co=Hr6"bkhS)*MI_4Zb0"n94kE;Wbj!qSkVi&/KSJ`u7=d@C=FXkYMhdV:^DZ-/s'c+jL,5)T[Y[_2q9`iRf/tKD`;/ede%al:YELB*sJqbhiG2\eIF?ZWsI\_g;5GfQ[/K-g&'G>65DaG[aA#S0ku]Hq*2'qX5+=0?4`XVC;h1Xg9t02du?[Xt-;Y4A[)TJ-WK%4tLkZRRbK]:LdR1>I$05_=_rn2nRX(m(Xd3C+M[U9/P3!cK2MKgW&pUPk)dO?Ot=^bX]rFq89!LE359((?2.>+T$\+0cM0\$i-^B%A^Q9anI7TDfKF,bY`?+M'Es,d-!.1Gn)):U7"b^';ZD^4B4=<ha-H'g5EiqRrAOeIfieAARAf]u%`rAU/c)c,I**.(Ni7^Kc2P*7%%t*8!Q$c]f=u!QO%M28I557E?:_SK#5JF1Rd:ZOXP,:I?ho_!Zo:iiZU4<CP_)`.`GJ>Yl.D(5/m/2EhoCe8@9n/dbcq(G_#4PfM%#`T!E.Q#cfHug;6fH3/Y&KXEV78/E`&@&g"PM'pI,PjLDpI`3'd`hHq04UBo>_nDI?P75!qeNoG/@8'VmW+rSIjaC`9-HF]%4Pn<%7&M-g@DLDHK\uC'9'Q(e=BthpIAto>19VC)c2_6[Ae^/GV?DZ-hVE)ko<"n]Yu5U9+"?&#N2C,-N;dh[I;riqfUa98'9-M4<:>'u%mkp-'F4*IHjmdm>M"cOY!S%?0Vc>ht/EMqlAKDhfZR(+_.i1MrO<15K,p44'\#Vb>I`,_Bj=GdgR=V"V-bCKsLeE765+`b<C4=e@%+Gi\%G,\?X5'uqarTW0/cscoF;]QIU,C8W#n;?&5EtfG<cDp5GH7PM]JdF+RTSD]sVbf^$?rCjCJ@'YnEP<ibZ..jBPE1+pho'$O%Y-%R&fQYlOa$!0g%7t#_58F]oI.(e7!ZEDL-l&2'PuM[!94#6q+>s=cVB#45X5TstaZ6d[NqPM6.7HFPY"X!!0j$EH!*,4cV-Jnr%$;jU"NtdU5;!Y_*dZSOUEu'4cdnO8am1]<PinY#.4M"Vp]<[oN%T][&fOqoS>M-`,hpt-DeQbr)dSZIdC/N>^@R4_EErWhmW,R:F%n[fU;jQ7!A:r/2bj7)%[s([s`_KOLXVt[`^s/nM!UsV.h!3gFgM2"6#=P7oA9"GqFo5sk"a,0>3!c/0==U4lb;q_/SJ)`)>kUDU(%q_9u6h8?j;cf66OW_Uii`h(sU$A$\&1Z'31MY,@cI[!LWMI+Y?e-B0MBe9HO:;_JRe-g=n;.H9>^^lpi@?RuqUW&jt^-Og7.W/ae%g"[Vcs1IJ]<g1'&A\&_W(7R>Z.H>>G!tTj.SBM2mp0s?d/]581Y])2AYOH<.Wkos+&UfX^S&#p9oRV=X5u<6L'e!Jc[&4OpGY4Ob%n7,OS:"#spr)tjXf^9J^ULt&HKa$HLK#k3fc`h>`:_VKN2X1oJDB<r=?pS=$"N+!Rg9mh"r%3VQEEEbX0oMDOMija;/A*TpKmaoR%PCh*m)-MubW&a,a`Pq4,otn#-MtkD'8W/<5N4s8(,_l#EJIi7mNJ2Z`15gdEa?Y+cZJts_`I11j=Njd%53*u'af#^VeReB0Kh*@%%I\jsaBRVtXO;//U\B.XfM2ERbciYE4kKJ7FBLO_4@E/I?1Mkj0@]F+=Z4),R3$og_nK]OdOVRSeaC;#W>(dSIk%5WqA8\aWURL/;%(,^l;a@f3l'\gM`X#qdR71\UmO21$n[BdFfQ6S"+aL$mt.6p9>4#Q\f+Z1P3*29edl=21[%ldbV'?,Dk#3n>Ko-&5SSG?LkEEgQ<%n/h)kB0j8J8E@7q<mI2"dF04@0fcq_MF"i5N4&DIJ`fp7jkfE4kJcQ/0NXjIp/]>#n_AuBYq7'CnD+T+)[^4C/1(d=:e+0"O!@<.%IdO`,MmIDTBZkmtleCc_io8J`-p9c^$[dO56Tj8ZQ<LiecX@5EfQD'F&7TXQfHL(W?OtVW;2#QGp"_Vl5nMc-Ppc!kY7Pg]4hS9Z%:`.MO\?fH#Hn4D02,4I<0shbj'lWV/2nfq+6;n`U-Iro@7_*/E!8bWO2%SYml?q]%^OW3b]_0@d28P-(cieYe<sC#j65/)=@jTV,%8Y\Ua61"KTiZaW^g3]dGA+459dJhO?UO_-%N_^Xns*mHQ.$/'#WS1G<Yn4;D"HIK\-26XT]NDn/a;p#8+st,RIOp)h4qiA:QKl4>%N+3f_/0Ntdp?/om=F]/nj]epL5hs3BUkFrtLg3bBnM:i<3nXg9/Zb`=:ZVHn/=c`ihGLpcWidm4QsMF[R+.LR:[V_8G;i8B>cI5!%&8Y8l84hPa%9(Mqf/XXlHbL"a3n[OfpM*=IO_W4!"(n[P.RARR@s)-`I$p.j_o!WRqVPUEXr#=\_Wo5H!g31-bYF6F$k.RlX5JVe%Hb^!#5<7Q$rG\,BJf$LOW2.UD?5?/7o(27]YEZLD0IqdA`$S5NQJ:d'N5m9i7cC27"4gqcH)<ZL)HcP`ceUdD[@%8<^EK&dK[h/K%S]5MrF6?h1aVK=:@A[\6#ktGU)_A']<cWu5i\d6RHHRK8.=X65K$dlO5>)^V4P6cATiMGk$N>SQPr&fei:A=g83M:O#JKW`]?I$P%XR+4QmM`Kje):c=FnGsu)u"F^XAc#p)*1G!880K=*rg%tD_E_YEoH:9JalD2,!"h#kHb:\bu8?sS0LYGc6^J0c;6+Gq'uHBD>"1/%Gq61N0Fsp:Im[Jh;0hm+3W`qI#R-&fEChdX0WX.-m._O]I8L,E6^5n!qdKVmS!gr5i4_=V;3PN5D?<"O`A)$Jo8eO>PT%Psa6./N%\k0CLiNqEm3'HR\'l3Q.1%GmQN0d->:t`1aLI`%"=`Km+[C39Cp3$K;BQoBi%YKJPq"u'1/e<F_T:kds;f5t;Z*P3]_9*eF\l#d;%E$A/72J6>;q`^<4*sQHG:DCFip:<6hSl4qBC"F*RDQ78!*@g+2T@S5mI$57D3&='MipqT\_tM"V:k*D'aqp_uL[K6Jm&RNnh^gu"%OoDsOs5Ik@o:;H\6l&cqofH2V"f;O=X$R\g#@FJ0flTPnUP#!8m@<T:F["ZgR_+jD]ld/?!Ibd7EO3:,YWM3m\RFYbng*@`'p+9j%?#"!>/gQO5JJ%:2AX>26j-qte<kDf!-eC:!O"BE?(ui(TH>HVC5a!?TY=J*'B(FP<X(`ITCL9qnp??cZ9.k'7:V`fJk:<Apbpc)M%TO#KIYb]!icS)+aI:qnlP%oiBV!oJH$K]Zuch#Yllm=mt5Vkk2q/3#!?/6Kk2V@Gad4f32FADsBo!G&0R;DN/>'qsrZQe(q="b&\%:Z+/"4(+.kH_,FPKCX?iHf&uN$X*Om(]uFYT9%C`6Y0UtQe'Cek607dpiC@'c+5-o\@aUfJ7+.:q/*!(8BDD_(FXAW@^8Whc$Y(i%.p7>FV$];uk=t\%D9j4bM%eC\\U<ajqHTI87_\EuI^G"-RJ8qtHGJtK%._?2jTHP:$4H/PTs%g.k<Z#OFe4h.*hjf,!D0B`j^(-:%kTI?S=IQpb^`l^WK'mLC^/E1)cRZui]MgUN"R>f9Dj?Z,P'?ofqRnpj8XGIMh>g8tJ!WgBiU^<%G8R'ej>dtecoKKU!@_b:Zr0N,%GsWqDlM>5Tb/C;;?siULW<#(W+eU7,,YZ\%!9s9dk5)F@M$H*UD4F5TcIA%N56%d1c8k[KMr%IB7=+3PSZ_iPN*Zl2@/U5p\#k&d%r+EsP)@uGm;/;^p[3(P_\]9tUg0qG&!a-N0$_(0DE\9!uGJJU.5+ng<$J9p$$X8.^f(5/=]`SQ6r3HiN#1gob;:SQ!4m!7K5KD32%3-Z_P2?BoAg]?#MhCHQJ2T/<33duY*5n#)L.2T$oIfE^MK9=]Y<6\Nai*mt+<"=*"rubIKWJ\AQI=oAt(Xs&c,s;,.6\U_^$NQSp%SrhFhLdqrS2rGENJ+Kd-+U#[Klme@Im-a[jO`?#hVl>`t76g&9Lh9u2ja>#<p];1!i#E,>KKAs.$2,W]dTr][/PdQpJD&t*82/5Q%O*.'E?jm8,4HZ8hV6L$G5K;eMfR`eXT-p79+^dlg<g0DK.M-rA>iZ$[9tpLc?kW4BH%.MPGl^5hns:_V6_osImIj4`2ZXr1-m_F7%6#MYt%VbCKp!EJIn@/S%c?E\;bF)3U5qcb<iSm2JH%PmePP!)I#F88:$KA&In/'[Ah+/6qF#(`kgZ.kWT=48QGT(%UHB;KD3*_`Y%LPn%hI"uAV9CCA[b'6OZ'AI<:I6gu:jiLg#)alHY6_tdkeATYP^=I"m5WL^V=KN]^s,D'5OG!l.">k;TMZt,.;=H#4De3"njoPth%nL1fg4Fq5ABEjhS?7F)&$]Fm6QX3`5HllT%X=HO(i"Y#aT?E''1+9:6q2sU",LDa<U^-dT@fRa<BA`8DRAM!.VGUp7p-jOmN376,%pN\b@YEDDco^/X1)kML5n@BcAGga/(1j9pebaJD6H'(oNB.(2c>FtEUnSZW.#tX$(]O3VTlOj-Gm"?J!Wg@[jI(VDjKjc5`#"s%[%89BEth5sXsF!0Q";fAZg^JP^;,!Ne%i!G4c>7gQSl)/p\SHIn-GAd4YODpL5Vn6A$md]."LG11j049gKGTj_g:8@d>ms[Bb/_5f;%cflI/YjQPrQdAOmnM,I4/f'@P"9)C+Z^,[3moSFj`a2pLTR/m(>5i"8D!l,+n#RaP![Wf=k=EYj?0SU+!b-XdfL[MkB%=Wo&aKm%%>D!*d/3]<\Om$*)IJR,:1OEaP6p]+H-!cqcd`C]$<])TmM:Q/^*E9DJY(p9KY(ZKYJ<#!nA)/Sr#2].#r8Zb!S&so:dRsd!B=kDA%"FAVmO7t4CQXbTik#"jEJ&\D/kkh`;].IhI2Y(\?]eC?1ra>W^dCdtBb^?!@0^u:>r,t1M=ktETp_2F*)p$cD+TU7%cKid_0Q:D#%C@1-$4f)]U/`1o7of1eS<k7*7TR?>X86J83O5>DDgA/k'5Q/7Tj[9]e$FY&[jBVO.C%pPjOH7$>&>""NBL-^)Fbo*<cO:<NiK\sM%<LDiOO#=FP3ZgUN"9i(W\HBhPs%Hj>`%QpQIH=g/V48Zoje):d.o83sJOK*,oX4Af95Bo,j\$A4`GnQ`j[mr6.6KU1bLj9&ie!<&%3#hetm/Br&#/o3m;>(FXo0W4(jPc*to#Eo>pI_5;\pqZ(%j3d=KA\4"&E72n3$5q`)(/JrV=3O(SgS2&*#-s+S$S4Z&UGlYE`5c5%^+R-V9YNadno\<E58N6d>hU9;Jk*Qu%j#:>_\0t]On-"`Nc:FaJGB:.%^d`X=>LhXNs*V)^_f)mT*fWlaYGdNFm$5:;nFfjIg=qC%paS-p1I'JS#57O6<H$DKdH(2j(smk9BGV8:)QbS0r](gDi9!$"JhMSU5+9.af!Mh5Or1dQ:TahfFY5V?6Tq_;aj^<h=6n/%GV+E6%'D"-o,D2T<?s_^ePOC(M8(bl^2oBMf'^g;uTu0GYe`t]:lP&!p:E5>&XkSK?!8F?mO?'(eLC#$O!8nWt*HbW)&gnFQ"<ecM,QdJ&%]$;/\9naU$'C-rCPp3onRd%m,YpC`T"0o[8`4rb1Tlt)G&Z)pXCHi.mC5Y6-^52K`01G&&kj%Qq;I#)4`MciN8,H#-]K-uX9N=Uu%G/S`cdq683Q>>TuTSZeb#H<_TDdo&Y:!EQD:knpH0;CT5o4*A$3f'fL>3*g:Gl?1_f#nB[`\&**70mg](7\VR56M5XDuJH*^86mY%_KY\B'#(?7Q(jUeE"]l6A7Sf).<+.b',K.Uj!;`F6JA:DNSuGj]]5o$C:fk"HACSd^@B2n,Lp/T^d+[@$\5-HTInT^EgA/7d<rM5%Da1c,I1>A].&h;lNRtWQ?lIB(oUIO8HB4YbY_klqCF+31o9MT,SpNo&3()]mB<;@!.^nXE(kCm#YD2\TGO&2SO6(2WZ':i26=3sf%\#S99G1Mi#KMjjY>m!:$_qh`7Vd)A2G&$T3"#7fUe0XhRH@h`a4l/J4]\6WDf=Ik7R*cXXHgF#n;^c!]hOr0YY5i."590\l!4AV)%Td]eA;n365p:Z&]SW3!**L3(>k!`6]_bt(7/\llRiRPcb"`C+H7kb"kd*X+us'">b,Dl@&AK0ABq-G_EN(/bZ5BCB_be\7),OhQQ%8FT[dlu1log]?$Q#]q+_q6L>a"`B>P\+#=h*[8'*+Ced7K&.H-"9^HqND"Ad$"dFPJ&CmCi'ko6$)LG>dprKk=5T<?@6Y!O_R9UV%3e?-"1CjAH1nM-+GWV*jZYl6PQ94186WWo38ZhTBKN/55P9Hb?75\@#*Lt"=(/1@V:8q!LSSl4u^#<IG4c7h9G*K%Kq9D+p&:i,B%L!6/%8t?/i(4$-&ZjAL?"h(jCVS?Or^iWkN\rl>#Z0`5eB](N'^M!lhfQ2JnZ8h>(jeigGE0>Ki(8Z&<Fp[W!K$^L/V-n-Xo?;`h%npce'qJp-kUR3Rd+8bt"f9=7?>oZ6$;_X_j8VYk&0C1(Y+;N&mNePn4;-h`?3tE05I*/ZhK<Bu)FCDJ)3mB#Ge,-pg0tAXf[`KPk%'MYaSmt]"^mb-QoVTE=*I@FKjT#L/F(cW*'LoKT_$'R[G$$<>W$>3S<9W/L5`M4O&bm2sJJMJ/!;h&Y?(Cc\J+[[<Oli-'kmP1-4%'sW&E1Z6J)#o[9oHkdNT#XAbd7P8Ph]$$bafG8T(G?btJ^#\d&U>dZ;(%9ug(1/ZnnX-LKZc,Ni)h--/NbK-=h:VL<UNVbgg7gWc%W:E$oEEIm6.*ei"VL7^-pKC.T_nQW):%E6/P*jAa@;hN<eU7YK@\<M1-;QST2gOC(^WF1am?p(j5o>bs^Q,\&kldqG4TPSc74545%Fh;`r,KH]el(c\q!eU?8jEIXm,Xu'8Sg&#d*L'[%4'ECA#%<D1!^T$AaJB.LQ^3*Xq^Q3^L`=1H4+(J/@;i(^5IiOLPEdB1lQbH?%i+Xk`K<Nf_NL9m<,2WpgNma-K([b1K5bo8KLcFn,lQ^cn9KL"JJLtd_&CU%!BLrtRj<_/oa<;QE^A#ZLJ459[6!>6u4.%BDM3Nt6%"ltcr_?ika,shsD+LLAp.qpdQ4"6t\e&Z=5O3O4K.AZs#5F[s))SJ)M;mQVT0G:aI#@II&YOE`-l!7ke['Z,p*D*'WH_MrUMQkH@%D2i0&8WLWjLTa:R!KfFgfmEH/Z:'^2n622=)q1T#N'<60D6o'g2;F*if*Eg%39.:Ul1a/K5OQT89b&DOe%(N,b"+9Sqr?p(b9DrA%AmLl_d^7,9+HnEU)JM;,"0fEkRVjQX8R#d<O?jdf3,Ac2.ZH8I)#,Tfs"fEE<>BSM3ff[jRp\krWPA$&?'.Dk]sk)O:IR:>^]aM7%mSR>Sf"7qHDo:tIJ`NaNn(h+bl+gdF9q(Eipu.,t>5h]*J;j$GI\cqeQmVlr3mWo=E.XLWZ(791k2usrK/@mmYf'Skaq'8.LpZ5m%EdfC3Ok09Kh!a44,DidsZ@t96?sJ@u+7X6i08&oGj6mHuGLB#(C\[MaLVk`u'T>]B[[kUig0MA<qH!`4e_bl3V59;46^H=r0)^<^%)D#?$qn'k=/COO%H?YT@g@E!i+%oL&%2SO&.8q;e]R53%1AJJhWllUb*CQb>)5LVZs#7L^+J_iR7'o/XmP_184=#c*=SHWCOWH&Z%QUqN5oT[4F=+>M+Bh1!=rp70Ojh<lhJ2FeQ:R]`d2PcIq6OqM>EI9St-UMRP"Do$'9h9'K5B8+B&?5QNdL:X"ej*`t"%XLDBBG2X%50ui]=Vli-k[[5b#oIsn65qHa!d11dF<ATUN!U^$Sm.YpLS;)"'HqUqC3NO.'TPiEd3DPCmToU5KTLr4al9',WVLMK``n8K0;eB'%`sG4a)^Z%DgcGW2Dr`i[TP2Rs?b@Qeh\#X^8!u:U)b,NeWkDScLnsCd_+S1bB.WWLo*+V8/LT5L5kUGE1/G^l=C"?"nh2%GdkK0o%@*%u0>fFZX[u7kBfr))u4o$DsPTKdJd+K;Y^)^Qg5;q2mq4RCj,5\b3g1Gsga!@7;>I0R\e(3>c>a'FOY?>Z*=-@kjZgAE=*.)f[%;nqtr^g0k9FPQ(tAY8Zh0#l'K5,C:5Af:J>Z>[L+Q')Z`:Ig_CQs'.In$0R,0cZC%^?Pq20="A4X%MMEmO8/4P)=3S`>l3@K&Oqc%m+[`k\D*6pC,K/[?VYm,=j-W=0eW?H,FH.Pa?@e;Jn@MNk%UXR00_FG=H4]p.FE3<mtK!6:Q+):k\4s7FlqeW/tD&Tis`i',*%6;%foKBrs*!&NiC1pYO0e&Bg-1G%p)7)br6VN#N(AY7Ch+,?RXpR&MC)+D0qa+knAbodX-h\=:(dJN"0*t^Acm*H_pJ1_:4^f^LV'5H%U$\PU6,7LPf_s$BaG+.p.bk&u=b<EupCuN=5TolO6GX/I2bULPmX<96Ylj3u].se<49B)B\:[h@60h,Jk:\S]U\FMd]Ci'YddZ0^%(+Cq'^B'JQkL8_"bauGP8>3kia<@,FObUJ[K8#(=r`n[XOA;q/HO_KM^VDo^dZB9uRD!m`;Hd?6O?*Ro9&cT\0_ce>M\O,?1.X\f%#pP-H%On&>5jPm1;SZZq/<:K7%^JV7()T+aUhNPm]Lk_a2Hcis+5r<u\M$2U4d)CE<:L*D*dsaf_GU5uDR?eJ3Gl5&\M)DeHGBJ/%^UI1s72E8cdFt;pB`?0'g@B(FNpI_+SIR<@R&QScZuWEpF.sN_pPc\o5FJ'jg7q#`Pef_,AS1*rmoYBh"<s&.R=A'e15Y:/#q.F-%$o*M?=X/_d;mt&&geS'4!'/C7!]Jd8q?)P#fMRV2fgDS/$GH[MZESg>I",@fUB?KK&5/9am\l8EEu1LmYANc]'rI?n:51ipcS%ms%!XdX^+TpEQ)sFN@&[>Hb+"34hoR'O"e1+<3Fc,(QiQ29lpW4G_Ac6a(?R&/O,*i=Jq0a_TW\GOnTfX?^9$Td"CaN<]$l4jioLF'-%RITV"WK5q"9:qE60e!I'lhd]t/FDIf+ShgRI2\NM!%d%Zr)R>o)752]_lT(mQXk)V-*YITA6$D<qDg4NGMj<dd#rc6kC\JL6pmC2%#'jee<KH0Fp&(&.W[B'mH44P_>Q1WEp^C]F/7>-9;E`I@qgiDX0FX93O1XbUrm8<QP-3u\)gG&^C0PRVU26DHBnJMGV"(Q(+tf,I%pR]l:?%')sIWo<`;K@Vmi`e,Y<I!86V+:PZNKsU25,!lW.1HAi#6]\J4PmBmO>#cALD=q!]d,C-mTffKgM3Yt<'L+E`q\YtoR_$F%0Ts>;A<[^i"r>Pm9F;Kn4-tSJEh:T=XJ0jo.F1%_/$Z_\PN#^$#McK`2uN:3iiP).M$;7bp@>!.Duu'i#8I.<"3MppcXd4*a(iG3%fkA('?/kMbd;l<\p+0,_PB'(Rr:og4GNOUM%ga'B4h8jnA6N")_R->7<LbmJA.=_,T93mt]U@*@XB@;\oSd]'nt`/?H]jipe#H5?%9/,[gi!ceUQ]BaRXK?;]kl,78ks1Tr*BIfr$l3\)#bl]8a$S&6(Q@;'U?G_C(r'g4_h"O-q$LNcXbM;@1ZYnC',hRurSjr96XU#X%+@Zm(I';sQNXZLXjHrc=l0R"sR"lQu%VL@Y0gf:2*=MH9TKb<5?r5.BPr-k(_Y_3GU;qKg[e-X`B('Uq.gtfmZbA\m>0T2LaVnE%%Bl^k;Ogol.%.:3#K+HPB'QYWhZ=[5sN?IU*ejN+rEk\I_;he6]nO+Ck-2G2(.U#)97mt)QANWhXp:QD^0sXHl7*TL$FoA9a-E!.d%\J07C^P=*09ocp"KJrU)LGE5fJNtQ]!B`Z3Je'**5%H!2?.nU!=S-_#r^$c2e<Y'rI31&`Am)/9W,i;2CV2;rT1oF2%GI1%n.jIE%).HC5bOthbiKE-R/VL-G%$\NK.]4//;3FW2,867CfjBE>asXl3V8OqP;d;6I5uA8&QHgp3?ktiCd2O6M@c\7un-5[W35m2=DY<?/%OP2d5)%rcN6:79+(&(0H,qI-"C`5VN?7%($:WW[dGS>oTIGJV##2I\sUc#j%7S2UB1epBDHpN&\aMC&r#Qj$10j<;O8n:k3nid89%;O24LJ4me4X7AH9/aBl1OXcI7f0Jal2+]Q!D[J6/4+SoQ4,I6W+:%JZ6s:sRE2FeF+2tCi*o9cn)![/N\Na9h$_cp&bU/JY?7_ts%&3bt6iQL@Vo#7:rR_#"RElO0J0,J/oGE64F-V'97U*/\cG(`?R&d=AF[6tEQA$1eG6^8q16"K9AHs+6*OeG^[6[W7,U4m7Fi*qt2%^OH>`"b+oE%'m4"-cng(+0WDKpGpLe>q'P:>SYf%":9V#j]eReX]/gSQZ%SnFA+m_GR7%^KB;Ae$8cM?-I8>&N\HREf,K$1S:YhL%%&BQ#d3JsNdE-^mkdPnT]Is:ZYX5;7L^M`=D90>.gP$\]&T)R%aU1BID-]#$e>JuEEs$ss]t2hjA=Nq8'@a"<Ps"ds\JJ@&Ysos>%N\cYaY/C]m)DmmnL85(lPM9HFd9\hm`^I"V4ErS7FcC"[\:Oj7?*;T-=]t,*2pc5Ge>+pim^WkdkgsK\\I/biobn9+\UNo\_,4;D%EYn*/.ZVh_On&\Z7]9*27F:t/6YRVgm-Y/R>Cr7*/2n&g]644@YqIof?="(ToZW2#T!s_XPF9S/lVk+i=PooIaVl_9CA,O#&&QHD%8$TED'#2@N!M_!qe0Lr#eDY(^m:Dua4:Ha]r>#YA74+ZCXh:^P&MCY19J9&?-6Q^*aAl0I&CBTlhM';pJmU[mq"Hlo`U5eJeIg^9%S(;Bk06\RT%Gu:'pW>Ku#jcm;rbF/u$h[[X3,8:g>3Aop_R[\$k<WNniT4)K_3+6UV4b'?WsfuMekk$8+q=.O^Y0S5CuJ4':5lE-%?Z34j$0iVSI9<kY'PsB#[UI8R!lKZ-ORQE;f!,#ErdISE>*S1T^oj6a]REGrD<8I^$67OUmP6!nZ,f@%?nB![k./@oBbBj@mo.;4%C"Q0.lB85:TY3Lgdn=MEMI+Vs=Xn`GRc6pKL+-5LT?;&tPM`nt'CURF"gtU5_rM`"\(ba-JB=tMYh:)")sRI.O?*!d]L@PXE%Im4%`K8c*#Y/q!eWb]_JB:LYJ`>fr8g4[;ra&O$1eP^>jJ"4]20Cp+QAI_@,pNeD%&gL8jsJFJAS?,YJ''*654esCk/pR:FRV\h>L_$i%Xk7n&SZ$#]iYjl>$9FuHDbreKM\K1<a]8f7XJ&RqT]9)]?;j4h>X9b,qQ?cj;m)c,<"!#06`40TVbetDX+jB[JdtcghOoTu\K+s[%I<?"Tfu+V)d'8_PPr3[+'m.M=;m2l.Ce.U*0PfDm;Vnk[*dIKQ+OOd;%:,.@oTmucDEG8V93"A7o#7),94I?k+uu;Re,*8\>'kZb%a'7RSM)T6Ubbp\(+KiRb;:`bA[1n8P^Na*;M'?3b;Z`i/%ndji.+b@t3N&9/;<I.k^1_/j:Oe^A.N_YG=%Zb].[bprkUN%MUhe,I%XWZEU*dn2k7pT=bW;U4hRmH\ENTH>CAa0tu/+ZaCcb2)J#*$T>_OZd7'8&i=_3eT!0rBiajHaY9;3G+fRs]U`]\pTSQ=\%[+G.s>%/IX(dWYkr)_V0MH[pTBb=)>mm]isNm2P#P%F9T?k<m$-0j,j0S8mNa?W:oUMA(@9!C_)mZ[?f)6A*9gI[D_#R^([>7^q6e5Rq=<U%Z)YsX?*[I<4ASOR#H$d0Bs-JXWU58g;9(UrX+.Yr,d$-#e)ZEpP[3PF4n,n8`P#NSE`+3Po&HXZ#@@!SJn\5P_3>p(X`]$]K3D!.%Ot[/cVaFiNWt7F5.j&es.=-ND9>#G.#nsCAE_Nl7<'-547_=Id_SgAsn36=I2`fJW)s\e"\[;1<B0"l@0T2Le*U155EkRtKKFEC]%S^8QRJ/AH>!q=N,EH]qj"FFt'V\8@@CRTl=3<8&%MALe>3uS9]1OH-V[SjYo7VM!e[kE\5,<[VdM48gS_4[0YL/hqC6/7m\/(M]Y%<6C^g/9rFkP`Ip]S:t#OIUnU(gWFFf*At'k[k]-TahMtHkoGUWM=Qm1$KTL>NdO:F;::n?i/cErc?O6@bPG_`Fa`Kpq(b&%%\emW%Zr"k$(dt'N]Em`Fa9]@&W(.&_$L134.!/$?RFSF,!h[>5];3)$?+hX]WCu6W41q<c03+0WMi:=3ARqt!V$9%jZ\FDI]uHsJSmtNA%Xk.)oGk$7CqMYg_?ru":Tq`%`P)RUf[G^]q)-DV?b/hY(UoMu.Klps;,kLpC%HTV(MK<0^*ggp3P,rNt*kZj<06EL%3G2KDhmaG7%3L"r7h.mQ+jdO-Dj)&rp^i;r[fPZo&!Mh%/.XQKLPbDBmJXp^d?ic[CG"G4"f\+gZa_F,L\iSZ:B$Y\"U:NCFqt1Zhl?K/#$C/Kn%8^KuH6`PC;QfhR&DUiNpT1'*:dqIs4RWl<%8[k[SK33#rVbXcD:B1-"QdioEm=K4oDI!cs7@f-mH8q`AWjf$aK3@LjB:t!*3/J;7%AW+&NYD3eXL19#Eh7=Y&I-rC_&U3Pe37Uq/DGgum=L$;Yeag"l3,pJr\#]Z^frhN[LBd0YHQiJ=iLWS#hbqXha?H;3:Sc_"-Wd!W%h1-^'+E;fe3eHBm)h!]b[+(5Z6D=<3"QouS>]MnDV"VU)CG]-u-_Cr3hsZNd^>b/cgYR4aj4UkB)$nV8Pg/p7pTL!>>k&CZX)RG_%"Mb_4Q''L)ZI<csdlIpQ]Q)#2IIX&-T\\`e?j'!WoT?+C#&nHX#[-_4ZXTqRjGsG03DE.aS+ZT>^oF<+$+&'Sdi'7po,JMs5#XYt%8N!/Q.oHInQYmAnd4BLGn3n(kf\K@k&ZNd-<:"M(-"W`Il?AGLe?Agf.T.F[>?%E8HElcd;B_9/<2;i?g5^_"Ku?mdqToA-5;ZC7%-6n;$*e!!(I(stGMFuj'p"6B>iR!%&`>q+N.#!j)Q^a>Y?(SM>E_JK:f+D(j;$t?.K*W40rK0u;M6+Q9.#!l1O(jR!#"jn!?PW(V%:KArm>0-,3eT)kHclXca<Pfr^)ndAmLo--*L'077-@`=l:*8WbOC>h\$bU6HJ]8uUV:0^@.[Mo9*#A5,AoV,4QgA]O@cP777jZ@]%2h0egEGd4QoGCEVU:1ogFWVQgm\ct'-"5*t<-jsU3TiKXJEF'-ZEZ^[UGD%u50AXc^)$)nM?WIE==j4gi?\W_*Fk*\CLNRoN0CI]%9<.7c7S.]]d\hKK=o9T!k)5S1fI\sp4n4`^4J\*ndulU$EYWcV_7NUMgXIU/'O@^j6HZL9K@ajJE_&\-8?8<b&#m&S/*S7'=ZCE+%)n]pS^"#qY!d83X.Wu2E77`.,nYJ-a'mA"%qgJ,/-!0I,WDn#K;6I,JH9GE,egA+uas"`hn)Jb?QUb5.riF8Jf=VQhL2oglKGAZD%<5F6aWCELn3DXC+Q]c)RAJG>"_d?,4&AsMdeW)PYc)?:?qTM?!REB4q2Q06Y@guX[Kc[=29@4qc,ALG>gQ_E1mnaa3:#tcJg2#mb%Dd?&1;ehe#eb48bdH`B&P*<J#7,glT%G<&(S)e[&iBBo'[n*Mu6_Z@[FmSEm]0oD6?_;Le;Ro1jQ9M9phpa7td7U&->m$O`Y'/-I%kUa+lmZ5g\?`LX677=H9?+"!(Vk!"bUmg_W4H/-33iP)h\Vp'&eT;_ULUj^Z:+@V>ShJ\sdn/*<?!@%P?VMo5MjN:7In_ekJ1^D`%PrsQ_WbORD:b!iG>Yn.=TgdO89dd>D_qN8&<RXOiddcArgJlWne^A0egS:O4:+Fl@gq\BNC-&?A7@E#%<mrM!MVbS+:9'UTk-Xq7%Wp.g@[()IsPV0)8PB'D-Q<RG>8WB@\DQ#(dl,95omhEL7RSM/;]PTNsG)fj,9d]ug?5((N2;L\@dp5\G=CZK[C-(V5l<@?=8HAfn%DHom`[9=d."+Pr<3[s_EN*^F"9rG9PEhdA1Fo-3;C-!eUE8LAlWp/"_\Sb>?-WNeeHQV/<!MG2U!!W+TkrQCIrYD^/9.Io)F(d+P%g8dnj!V=3^gg)h)hcG$QV'B7,\b1Ano%o'Y4rmoe?$tYA,hND0CGJm1$]Q>Q-r?#)HC!l]W(U;oJVMq@KF:]pFU<'sF@t/mb=Z''%hFJfj@2/L4E:'rib(Neh(_L<]%8mlPL!5CEb/NMcR5suL/>\9mY.j%YGKuICQi*"^mUU7&Hdl#qV"'m8\OnJkKlibA81<q&jt=6W%DQKjjSX*Jl'XLc-Y.7KU-pkpYIE`f"_^Jl6GP*h;<:-0t7<dH$O*6RC39McUI17S8U@pX+a.$pCg-'I/pVjO&J@#Q:<r%tcjae5t%WU;oKP>>:M#D6[.%(rH(3\<F^%I+[_ns_Tqf,"K>$JQ&5Ca+MeO\Pc\-!At3>6+9.9jCHs%o&=c=mBfO\b2P/HZNV(QXD`d&1WtD%i0njW!Dofna#*7>!l221kZ6QmN-*rO.Nbj$$@t,C.NA[gO1n(CRdP?aK#69qe\/p16r;/Yfd//&eSEhM0MR8/Ed'd)$Z!B/o>95L%p3*>86=;a_a;E#9kcGV3`j]6ZXR&N`;Y@b*V*3>Ro-I[EM0H[d=tpYVgI$saX.*(cYU:OYpE\$M2,C]m_%8_Bb:aHCT)5_&/uk4A%I=i?>?0tB`:m?-Gl@<r.;Z\@,fA9P&6")+6e-Up,p8YiA-tL]4_Wu/49Z+T!63^.%poA>CA*PT+m^Tl:)G4hK\FeWmI5fq1<Ba_D%%2hI,Dn*F$9mNc37+uP$]=+;e]d`FHBrH!gSZj_<97=l-2r#k<pBpB!dso9+el0h%p!`Sf[9n:+c&moj2&FgF@-VWi6&VL*h+`)r%@BI'10lh.1#hBeU8X;a046Hse\Nk))SIkn]gn^P5afd93;hZH'$S*]918l3LJZd2F;r93-`5H!tKaP\F2@YjnQ%@;Df4+/rdoaVc%V237en0<r]GudU3)3^.QQ/!enMB*Md18^jQ;h_elfZqdbUg;0Fe5F4qHe=4Hmn;]`G?mX2E]]*8h2)K)<hEms:=nuAE@S`E0pFXK%nU3[Y!HF#9f:l@G<&#6)ke3*Rf6*.1Q1Fq,i-%Uh%FFCpNG;]'Z:@jXpL2(;Y3R-/DT_QV=Q@PnTBnHE%9:a>26NTFR]E$FC0^!3%&0-L<9H##5qSA&ug-`'N$5<l^``q[KDfcGS;V'Cc4V/i>'RZph;0?7-rMq[_g+mjub4)(R/h_EBIhEIS4_Hj(Uk3nPK8$u,&)-q\%Q1,j'AFX^`;\/&Q0>]f@7`g0W-]?.:r(afV^Z`?keo?)\(#aS_+pG@/<H]Ng>5d"KO&oJ[[eeW<Qb/$t_'*A?\Msf&,=*AK@;-Wo%McmT;"@Jn57u'8)\X#QsYWrDNn!k&UiF1a"5<aE9dqotud<eO]\MW;dYi:PMT`WZB3@^)sqJuTZKbWA?(9\$:/&b%@9(rTTp>qF&%bHDYsc7XXu%%k/b:NR32anaj.NkS3!:sgrNNaH/X+$#O1%1lf:i`P?e,bTDo(-A)R@L\mq&K8ui6CsQ%F;hV_!iAF,BJi>"MjaF]%8I`*G^jZh22Q::Zj@bZ][oUUo#thLNVi"YMS(%h8aBRKEJeGXE2m[2B,aFV'<lkj-g!)&J6!)AJ1o736dE.SR<2HS\d%n0^cmDP_%75)@HYutjEGGk>(7@>d!mEuWn(X5Y*[7e\N;<jBnSlf?dJ@:^"Va^@CCi?CG?'W/[:>t2Tq>AO&b<cL8]<:,VCR#n+:\e%H2\%qs%D'p<<W('ZY05FkTq'fZl&hR1KG]mWQ7E'/m9@g]"[JhU^Qrt2rU'[k#Y<@P>lDutuH82h+jnu2>K`FY)5:5/B,-f(D<HR&@+Ko3'%2iEg'MHIc$]'<!)gr[fNZsok\I@[$Di]Ou%aq!7J-_"*Bn'<m'XPsK`reSeS:UZ%&q8GXJKk+ij=^5quRrTg=Xr=?oY&b(t>nY]&%9WLdr@o[GPcm@OLI<r;i2f!Q%!j9`c8ic_1>Ubm=Wa0>?14J$$qm<A0W2!K47/%TmhD1i.R+a,Q2K<lA!\fa:\W11"[630"'Wt\I%aYD?CFEDN()?,d"G#g4HjW2bh]<DW=CCQs!F%G@!`&-!E.dTp^:^*f*#4OaIXJZD%CCMEdKL>]<J6H^g;:bU'.R8Q`-q'H^IB`RJ%!4CAX6B5>X"j$44=`4R]XRoNoC97MIA)rQJ!+i``<WgEMYGD#9:=]$(nnGk$m@$]DGdRCb9DQl=$@h,75.)?_DK@6K<AUB9TNlsq%T>;`1(#Jjd^@V5as2:a]o(OBdnkqYGpK([B.3CdT!':p\m1deh[F/IY>Q(]h)ldn9Z_954l_iu`W2oC[j,nM;Z_?IJp!^BGl-aqW%P]-6,k\MZ(Hi9286IM"+rd4U>Khq5TW!i%d;jZQLh!:lN1PF"X?$WWG=s_d['"Wt0qACiq'"YCCqC.UTb$A8"YFhI4B=I_CE!(pW%]me*,8aT?fjBb'mE^Za&c*]>sF/>u!=jRu?l_f.$(V;#Cjh6,#L9??6fF@9A;bd_d3e9o^?9dOJ=)o,L"o%jbPt?!pn%/DkDG]r-%lWuee-nrtsMgPDe(K:g3iET=V0!7aYoNj`g=-Ij/+9-KgrtY;)M5HtRGcRIpbV%`5.=Uts5Lm?sS)!>-I&e>>a]I?bVnCuW=-7gZ%]ma5bQBWqXcFLO]?9`!*+qOAOp\H>_20'GCd=$C;ALO#9j&<K`:@im]=5E2_6BRd%HE0'eme'Lb,*po!MsJ(.:YCqe-Q_(&?9^Fh%hEP@=]W?QTK0.D\,cXR+[<qk:f:.K+#VNmD:WRBm[!:h`I/5a8aPY$^KB^;1l?E2THs2Dpe4spAhlEI>.R%i@l?2jt#nl!*\,&r:%6eC5]a-K=h1/NI#Re4:Bb&35uN9S(.:\e&+X&!T,n+F:Jf;J.F57Mb=2n7I8q,T`9p[MNgKe(T;kP+gY?4>/leW5LIWdF]i;p"rA%rT$^6dsJ9jo(F\u'ta6I5NRl"U7BZNp\II?$h%+\j`BCfhs5K3hGVELrA@A+ETIr0qJhBcl;kZXG7TT!oi%(\h@1UZh<V!*(fJcI%p%S;3(W=`;q<E>*KLC]9ofMcc1nS;)][os9$)2eaQ'8:+hWq)]LUm7f5Q43F0An6Xf?2<5l$NAnNIt[TkKO?C.D,&40Fo6t5$I8P%HH1g9>c@mLU8#_0Jm[V<]?2)]7:hAYBjtV3>J8-@m.b_m<,RR_AJ\H>0>TB_mq^lZQClKT8@1t*g:&380EJN.0Y'B>c$nRI.Rl:I%oi*:0;l9!UgUANejDu+I*>XW,B)S9FH$.h()i(Q"0DK>SkPY;X</@!WY\=Aj)Wf35e>[84C@+*FrG(h9Yf%aBn0J!4H1sLK&#Mn(%)BKVSX4Q^Fq\4H_o^M%b^2M&)k-quJ>l)/"FWOW+Fo%ZEZhEd8(u&7)\S^ulo_+f_R7$[_e2$p&f,^d.rF_Mm_NXWI8%"nUf3Yq)%o"'9jVVljZGGR[8SA.sH/GLa%8]+np>!%MW-t,?%n[CQ)rt?E:On!(RXgIH**djP<DlB)6A'3YWI0]>$J="M,m]"q*EucI'026jO%LPbriAHr<Pp'O?8TB']#YW26bAj_GYL`(`uUD8e^aD@$9'id*E0cSu`msjsbk3]udYm/,;e,=T-R_h\F##cLV3k9InB=M=9Bo?^=%:&.DbBCVJ].>mlSK[=;fM5Ce+X^1!&c#NP[*bdmA8b!r;[1lC@9Bi4'^S;/nMr3(1Hh=j.^!$53ksirg:/dFrrMj.PbCtBFgU<O8%])VbpY=2/q!2mTpA/]_L!S8e*9,Rt!\Q%%"5ZHi("I/!Fj4i>8<URWRi$Ud/HgQMU]5B+"cU7sB'KPu;7m#Lc0K`7%fGF)3Qqm`E%arLSE`4"T>b_`?KJ\nDT^t/fMdP1DR@)Y;?i.n%nH*QA0P_2bO!4M$6Q/%[(`EoUs")ck&aE7(%_1.P+@dF15s$>*k0j*'u*r_q,%(sY>7nK7+TF7qnMpRk^B_s2hd-i^YWq\V1[U]9]C5FRA*%%Lr`]&,2<1["\_,a\Zk:F-,c"FqgC<e4G_"2DS>@?9S(aOq@geRW-L%-/!DqTF.B;'`o&p6NB%8_7HI;@$7WZ[_:$q-SMY//1bO1ha;:n?u7VR9BMnb'8G@nO2mQZ,F_>'=Aj+S]2MgYkK\I%12E0sl_Z9^%P3fJ>;&HfHKE5^/kbqM0;Xf2^?OH>"q7o<J7#l+??N'kZch#tVH!1-6[f);f!0UY\P"3@Wdnd-V`-_U#Dt"EL`2a^:O^?2M-Hq"R%Gn:(1V3`C5J8[V@m,%g0nMe+Mm4CT8]9,&+]--%p&GmnMJLIES;=O72L,b]rJcG3oDh%Q8:HW?DgL?LCDa$MOJ\aZ;.]pqVa_II;%qc:HDL6`AHH;2/l*;9]i>t`kAE.Ef4n!j-PRZX.I;5FQXrm7W/G'?G'o'PQ8'='Z&OKIEucf!%X56]\86%6GDGo6MrQKZRdA^he9%9<Pe"!ba#Ip#EDZ4`2HmI%6-^$2'%sl1Co0FF8Q,f;,4d2f8*n^oMOABa9==[&adj/fr<XCe6,h%%#iYq``AmcB9[i$)\ZS\]]R0%:Q<d/CU_*3LMS8FmS&PrNVcmkDr*=i#8b_hf%;ZZ3$7?;26jEuL'(.,VGVgR"ksEq%%6cW_P]Ru[=3\1YliF?W59F;+q(bh2iJkX%kOe3,JWJkSW72f)7gK$\]2,J;]H'XDcLU<Zq'h`cSc.W``1mhb5lKt8H;(DF?'JZ,])5:'n4_43qe-LhPN,YOICH<a[42`Q=MIlV%Xn#C%K^K3>r2V.b<+PNP>W'<fG_"cod&(e:^@N,:99BP`C,A7m:o#Ma3FAbJ-N!j=b7Du^6KZc[cbOu=_VZL)>[-ao@mtiS2mTO\%IbiDCPk"(t7Z3p$&009B5fi67[[Hbm@meFA^fd%j./"%tMEn"GH0DoQJEQlpo?[9YVK>:tQOqkuq&]^BH%=BV$g!p+09lE:ek^`3%FEnOc9=/@"?[tNQVKJj&D'@)5=/!(R98!Yb]cYg%imG6Z<%@l;]-RMlWEGtGi,EG2d;_$Lo,j8pbUBrF(T8*6+2D[#$8COH(EiH.%X\:"__JR#;%G[3M[@F-)B_B=FX\mH'+rNiQX--\k"mtp-@UQhn6b__S1*m88,kGN*J@kTG%m"aY)X-QC*\=2sO$NBNQDl=kb^\a%%d)%d*KqG_<BtiO,3&enS6a/E?6Uk^Z-j*g-W/g033*<3*Zi7u0Z_=!r3%KO\&)&(ZhGA[s=B1]^+"0P].""mo@qsq].c;nG:ug]F%l>O=rqeB#n/m!JEnRk$r?(/+Bpr''5E;6`TdIVEQ44;L91C.U1R6W@X9T"q+Hf!:@=!s,^WIjUW/@q^9:41>R%F"%^&p7DZ9)mDj%`DgHYXju[>p_H7WY=j%`84t#j!MTY\BKRl@brTUG&odIZpp)o$""nCXFjEZ-kcc??/4n!@VMEq:,(Z2r;ZC:d^@@BL[hLBK4s%(k%C2igrC\a:HcN^Iu9RrPkcRBOLY.oqNJWOGX.YB`NjEsb:E5oA/-SqHJc\&8CD>G$SA0)%Td'5$aktE]cS903R@R+c1hfB7>oC<6R%O9`<5J8OD4A<N9l2'&YuE*0U"!]@/G)R;PV[(,][B]COW3WneuZl5n24Y>UQDnSCcc1sVIBR\O*C#QdaFs%OB"'1&JNMH[,5gHNH%<80eB0Js)[HuMQ*$an(\W]tR)r^3u#L_F7UqCZEA^gGdEd*RAi="\3M?_r==cLp_8KIQeO;L4G@i)AdO_N`QLnMlat4I1V[cVPY8%Q`Lki#oM/qbTB\$g7U;-PfnCpYnmCe.%rq-k-9L"E]00h"(1c2%/A=kJ\W$O"1,Yf@+7Al,H%HXb*+*]$N:l4Y\nJ+TQ)>LcWR.`%=><F\1lZE;aspBK+#Tsa;#\#pKXMspUkO)?&PDV6%]jmTX)kdhNEJ^u2c`/R_"_PK]FAJo0l9ne)roODctTMfoOCAEnm[(F)hZ^o%#0bS'Kj0QocrftJ#kNO@`i?QpF;+W]10+iPPc(jjaUI2G%Fa!m!eT6EVCs22S^hudX6W$Gcg$'ro=^e_Dk>kbFKs[*_8iLED#uBV%ZR!C]Xc043`G7.<2l7c=I3"(%6DV7u1/YC^N8s+`FW8H^jQ_,2O$L#!!7!srlA5Yi]?hd*q,+=&*9_KK(M:S8l2tFCH`ec,2H]s3%iW>KuK,#qS$C!%M[,moV>U%CVT+#\*+0.=WNZu^,]/^!nQP4XV>5X.e/FCc(rp>25`iR?pPKKK=W=^W:^Ua%>4UgEpdKDlDmE;-M%?MsREA:5uXf_?c_8+`ZXD)F-aThl3\!33NE$tW,-Tn"%#jW&l4N\a3&6>4\t>0asB,4V:QYgi2rI8AbW#FLH"L9.B#TmC8I7&<W.%ah=ZB##=SRR^L4ns-uNtJ/@cWTe,c,OXs(^MudEn.l.t:V=A1L17c_bgV#&hD&S0sn/+#CSj*i7f>O/2IgRNHYjtJ9FekXn-?oKf%DY!R=*L#gNc3g1e%2P-T+3MA`;j7+C]k2:)%W7Kb1pXrG*dq(/=j`[&jK&`pdR"r\>lLbig&3%,jYBoW7cdWf]D%;*I9U?Gn"kL#%#"trp)/\HH-i71%SZR.ip&@1e=/"b\=9uB4>A?W2>ZRp2K*>Y1hrfgL@8IiQC\RYU4Pe6U8mudTp-NrLWYoOI[[$bhbI2LP4FGqZ%h#Y@?Um9Jf)<t`rm[)AG]":amMPW$MI541nCEn%M!"cbNZ0):WK[<KkTT)"@Qp/.XBa`P@4M2t25?Z\U>4(*hV%ecFoO@elS9oYq%[hd3(aj?GKI4^1"DeF/?c5sE(=dC!X;G7>DD^o$Pg_\.9k&ol=MtA@0pfW#eTfGc<KO#J,\D8[/69GsChC"d5+CiMK^+?APp6Tg%%]aWuqH!e9bh^llABcSVKF"pp'qL.>J&^F"<2dFOEA4Kg\gG%B'3PYCFc6cnsI7fokeKc?/hPm67oEtsq-Vo1;rii'CCZ:MQ!sNW)%p?VO&f\Rhdm&6m\TIl_Cqm=JYh_h)OD8KRuO5Q/`!0q3KjEBU7Y&tN8-;WFg@ra-P5dbK:^>RapfJj8NA/;9BTCDs8QWm8Z1Z<sg%1ld-Zm,PYUj$UL84SDJ1;7*aXWa@F20RCg:X3sDim;gG!j;KRI"@GIjK2IW#W9o\l3I)@a#)bsNJMQP\9BU%Z'B(]%G,^pm;<lYG%Jj(]fhhKUekd'1d%#Tl0[+BM;VaX"V[#EhpIMsaU#Z_SFJkZ>ZV"lYbABB+>[>\DVXhjAfR9nR?NDSEe=K28$`Ic\`/ADo(c[#91%T?C#:Sh$Y=/(2MNM579G;)s*gCXLONDV!R=^pkAua0!F/r*r4N[W9+"d9IMO#J68>I3c^Ii(BR&)0`n954h,tl)\p[J'\s5k.V<I%](a("G#:$,]gcuiajGI@lrniho"G%W+b_9R.mUj`&_knubqb%,]]G4=h#_Sf2[1&W]*S@f@'D<je-.\$@A`JT&E<t^c">m*m(_Hq%!;74Y^9kEaj>235M#\u)RA*#%5l)6IH+iH$T[CLV\Q!(hd=F,o#H\j+6sSe4C@IhA/Mg:bj%W79_4nhe4QEnOD?FhT&q8`XMWo(#%ZkuY`J+=\#QT-Q%BXuiH:cI9>>]ac6588slrMsdABEkrAl4Wg^-qPfL`TTO_BL[@-DJ<+t/RAluRQYb+>'N_rR:gWuZ#k_]lMNc1%r,+_FJFSHX^n5]LR#1]QoJN35*7M]P<1C\mFIP;J1&I?A7:*[+cD'2"5PQa#.oAp)m\`q^+0dKN.9rik<MXM`7D<KG.ZKkiqR!="%?*RL6fsY66Dp1[c267q'KVnE,CL7p1YHi!-j8oimNaSMgG37O)@gj.?K+-8@BBtDX(%MG&AM!Lf/q'"beV=md/"uo!/ekd,U#!HJ%T3P>9TB>B\TsOjhinB6k6/%uUTjrCS34XQ7^07"2-"FNnM=T`UXiE&_>YrF^9WngO(Q;[C9J<m[1uO^V$^Y>MC[P(J#SVO1-J+#9%B6(,l'qgcH_eB5P?o,>0^Y^`#pC(+u;D>Z51-%h13*]?1_fd2eVi_h[:]5"No3[uQ&U5*Na]&+-o)+YgQ1d>Tek#JB0sViRg2JR'%;DEt>SC7<?d]X@2'T(]uE0ZW3p&#Ze;.#Y3]-J,j(UIY$m.sQ<5Eg^7Khho27/TO9a2"LVf.P1+D0Lb-0,o@1!D+SWGD[7h[uOJ(%/@X;j9@KekS)=L/neC6os'=l#oSkKSHsb^oP&i<08C@Sur)d4B^2].3aM!KaduS>%5'tj5/2p8>1OkomG*_!]-?&+S*TpM<p\Oc^%afe"&.ROmEP]B^u+ZRCof7sQ5k=!KpL9%_gP$__6)J0h'?N;'IKetr?1KBIf5&aAbl>5D/]SkMQ4;rAsqL<\H<IN&[$p5GOhCe"V%1[sTAd[#B'i6ec]dJpNTO+n\-QTmS$B\99kmQW]#(YG&^"s+48SGVIO:V6>@X@of<RQ[5I*m2@3GoJBjd":Qp7H/k=s$ak@r_Yci%E>66:(#RMtCn0gb>FmTfn\coiAHpi9o]$m'97t4?36ZLZrH>r:St6c1UGDnJEI6%'6*26FL;<+B^R?2J)`Bm.j^7OQNVS*s%(8W]%MASUWrlG3)+opD$d"!LBQCU&QV)#EoK"Mp_>K@;Tc2:BJ*;"1%hF[aU\oY\SqZpD\5<[a?6,f+e;)3Yi)kCd)be6"k,T,Hj(S:BK%-I;jM4o;c**.d1Zdh=[Jl*)Q1I.LrlCAmu;]6T2&@uc+j0i)t1>i&2.Y=tLTF!qG\fibkiO3O6!!-T0]_S^`5U4\aKNh&iTWJSag%LWN=B1UA(ikhmSd5CDE/#75/':SV0N`r\of1h'Pup2MX6]ijl$"b[6)9f&J2G$-/>nX4@mC`t,Z^#?63/^"3Ar<8l(j^.:sRL**)%-"$ecmgEhC$E8kH,cWDGo-Ma+C$@91*a'i>^:ea*Y8ZJP]&nYYi`KtbZQOK"E%Cuk;NoZFb63qIfI.2%ofG-_OVT63!)OHqdD$4q%3_MgB!2u+C5bK(/29lJ!!8(T-`Gk0!1ACpM$:&W4g8KoVY93p^*A?"L[*r>/)'O'1j\lpE&HIGP$pn5P(&MD%9-lC'.?8,5h0-Mm%e=dq.?D!cAQ^;A&4'sK5!59&c1i\,29+_H?54APK5)c%r9DQuV-<FCUKMs^tG.pqI$T9g8(!.$/V/E78)MXGK"\pJi%6Gr&r`Z9_%AcN7J@ZEH.nafh."h(mmD]qN(-5enCMC2mDXh%;g.YjOQI0jIY5ti;hN9Qt;1rj_&4t/8^13Ur8<lUBFi+210XlGM00s*7gTueLJ%Co+<O)FT\b&V=sokrq7YE:PTdCbM%MTN1UR/@)c%I(?mX,+O%=I$ru7?>bm&aG'ZRciL8Z"WOG_"^Dc;JEn@#E##0\Ejm$+'Kj:n%Ds;<GWJHRa)\uYA8-L3PRfNA-DmFT2pElfqmK6m&h.s<4@m6*e'G!L^6.9,2(n,8aF3%n2k'-aC&$:Yl?&DgBiF_3)U(BO?JcRPG%_FD=Cja]^*Xi"WngI2e`;kFm^I*uXpENpF>Bpj&GHQLfll!n4-2g6_oOO/_RU*uA;FsWr\>'.Yr!S'kVcf?N=&,a4#q;OQl;Sl5O%m^[uO#h"f5NQrt?8'<fSB]&TF4\i2l%XoL`NS?27cCSlG*?`Lrms0A4kS[;"c&dKr3c\t>2h6Gk-[g`?\bJE3W:mrGLFeXK#BFYY%me>c%0KRJJ7Y_GY7h(1VR9k^P"1dFnH*sC1!9<?,SEA)uKJsKr\Tfgd/:N';%MKPKCX%!d40DS<Mp)o:n5IDu/3XD21;m]tBZ]5R%Q-:u)eFb@JZH<S(r8^#5)gq;--g%eU?o,s&!`80\'n*pC)="lV_FLQEV6j^X=S@:e(X]d,p@eusl\u$;Di\Hf<KTPP@BbRGU^E[l%ZOl@/RLE$9H\Du<&6a.kZ\.&I"d.$G,9fME/AnE)=fmqI,mu>iMILHUId.*"r`Sh/*_4V3[O^eUQKfXU"=e6f`YZANW<Ro"BNB`S%QVOWpY;!]IA6rbI'0;^A6@4`7!IEn2<($K0H]mdV!7@-)<'NUoe_]es6RZH&6ZBPQ7Y%D@7;&lTd\gjL3*N?,9*+d7=+M_*-I;bo%+m\)+Q;ACO!X-E9n-$Q,O1k;ENZ7`$KV(Nu:i]cC.Zjk/XIOpL/DG3RjNqdKc<g+uJ*,EKS-XYaP,_J]F79%(="gVZ=X4!E6X]A(%%eAi^rS@/-ot)V0P@jj2iht7TmR#@R,5UeR@2Ip0h1`u1C!E,/drE(!I\cCX6a"HI0DhuG"WrTYm=\C5IQ2o&/\TrUNWlk(,+#g)%XT1hRqR'^Gb;RoQq(:hT4T6M*+ElkR_JI'Z19CKVg2n8%"stkW3-lMAeTk9*d*sJ^<o<_/)53@Z2rdnM2J13og"9HNi9!1VS$rhU%R:c4@hk#b;hW41&\YHWY$(p:#R2VGLdGC]Y):CWJqf7m]*\MnF4kQW*HLoT5.p[)`fYh`HEbqr5C=cYub'WlP]\)+9mWsfMq_GOJ%9Xjf`p=%RU_s?"2h-u8DFuMGDRsYjh4ksSS3VgJ&acJZtTEZ`;mbM?"?g9S\JlHEqI$9ogc,IF^9U(X3q,TVmoXt&qmWsfUIHgPS%-StYW]AM\P[hp>3ZQ\/ci"cFD.CXP<id*P/#qr<lJFAZ@pXfsi+CFY$HkPjT*8d*N^NeGXhp\KP@TR(+*BZL<L!,Uto7'PQ`Hru9%f'SQ9\r=tL5Mq8\]_]$oK6X`rq!Ja,f)),r,k69[FN)*;9V7Q%KisGEij4]\i,r?9hu3LfQh_GN[jg&oHlRSdjI#SkSOTurRSM=^%03I-4`sfFn/+RDFRTl8L`8p:#3,ZqC26P1#2>Wqm>bGOI;o$QV'''m5pu^`BecK25W!C%ui<;CS^[Vhe3R+*DjIIMhK.NFDT9:$-%*4F&NZ!+Ki)TB<\3?cYl><@W>4kP)Bh#hrgjpPBdZ0]1$0>_oo\)[1[>P_)BO>1h4Cj^P.g<)=WEU1Dim#mk4^#MfrIcqDWqs,)r%CD1T_AnS;jlB]<*XrU9ihMb7UD9^\Ag&5BKm*5J+)*o",j&=hWSW6L\>C8Iq^%V8gRiAn@?BF.8qU:[`Z)g/5@:+_Nbk'U@%qD]P%c1BqiKgFjHDO/>j[9u@>ooPcXWKd`*=U6lBqm`dCW7Z?q1VC!MY"uDOK73.UbYq::2c%H&qTdq^WIMQcqkT*eR`WSd)tb-<D*<3U%]D^j2q8U<B0;`p<(=o+foH/+Cau!5W!pl.!r>o;'2pR>-hXoE^#oCek(EKSa7=SXOot+pE`N;Bc\pS+4`P`6%eFM(C6`(RT;^Ju(%itU@0\^%B\1/B-0Hc%3/(Teji37\!"o0R(AO.hj8'^3fN4o9=crRLGUm*Q#>0?=e+C,L9bZ$(oioW?6"^1RmE+"\DW`VM=c$[in@%[l1hTCpGjd>O/qDZL.;sK7(IA%<BiLfK438LA`=:WAVP>R4P<0i`Fa"'7>qec5f!E/!d<:?R^!_jGg[Dl1VIA7P"dSJKIg[n_V<I%O:c3(1_]=i\+PV@MV_&l49^2m#bmr?I@^d!ok\TH@0$@Xi<!r*-(It:qknqPFQR\Ol.09jV5pkB"\tGhH&`+"TtfR<"66?6jUJ-^%@hZ=X?G&IDb9"HIUGYL,NOZZZj:L(SOC.cqC4EXrdBt6VPF7nYGO:Uje_nEUUC/"06M?r"qsT$Ro?gWYEqjJ+T^@mc)n[il2D%VH%g.SZ:DX[p>qAp+!Ghoj_TIp"ZB6I>]%!J#B2eVT$I'QBSCbK%02VmGs[hqTprS?PRmPh]B/`sO*->\=kjSCIB=ac=_e,J&[H)=7Y%(#a$)8h^$^)S3nchdH,6`2oNRrFPHsPqR,2BeoS[(-cA7p0G=Z_pg&.*O"rB4WCbC#!<pRG'q"Fh15^hp.jL/nHSX$b$W6,)X0r2%"l5dU:YhD-]!419KhFpL#--&8^46$+_9P:Vm&QX.c.-QNY5m'3l[94UMY$X>>F-&[F<&i`@+6$@]6]iEUHa8&.9@:W]t1ZRg"GdP%RqR8)F*aU*?JN$-J=26YaisQZ]C#7VTD3g6?4QH'NFTTZbWZ.m9ZZr,T%]5!IRH]Wr5Vg@'/CR#I4g\Nk>PU,S%Bd16N`aIo,Ok*%ola^AD@6R(Femp>UH<enjC0:d\TL-)]6*j%Ik@-tY\Zf^Zt,K9X$ke4]\#JFLKRc/`f;H]QbB5`E7'q>qa$/k\1\/JC?\taa4mt-%VXl2e]<.=G0a9!0>"69&!3Y1.1.D#'F=f5VGZ]oqT<kHcIT(t`1Pb(EWnc@bGd-i\LU$QEY3c2d\[lgi]f(*4BR=Umh6V@s=.VkL%Dkql1/L_\%rY9jKILFlMSN1p_G%lNSR=jVDh54lUoP#lC$S;"YpL)EDB:?!E(bL'rg`bWoHpMPrhur<:ZRKpqUthB-n$\d8?$c6]%m8PC#)JaaTFUO-9MYtr>3-$d\DpEQ1_SAht"'L$Op57OJrQj6A8!KRHN+,3>`fiMT^3W1-g]*)8K=cX?rbAaFI!!kSY,;2i[@a4N%V=5/j$jNGLLq(0LX0iYmAF-HbY5Qdt>%ZBg@=#L+*A,56AcuDr\#m;H_,UQt92rMB3sW!3aGtsC)8/7]\8!@7SijB@d[gL-fN,5!%HaE%Y#ejbrI#bAh*4j)^!NV;',ib)0S$/:UJ?.?';d1-?BjE:7U7'i._0YUIJrb64IP;ir>C1j^b/CuU:m_XQQ-H<V7re7!HR>4X%?R&dJCU<D(P6lkAnapPE($EmA)4T:V;Z9\5q>UU\c!(HmHt<8I59hn2ErOOJGM-@95l.'><_N<aD6N!RY0m.(#OD)aBu^YR-Po:(%2#8W/k9@jn>Fk$u2rX2;-I$W!b@fN_J,/8U_3s24M/=op>'oUX^`?cELJcVXAaRtN<bs:n`/:XAfcV+qBJrbJedL0uNWBoEpUqa$%gi/"hpqjRE&B)<U4[`U>r@eJ7lG-"Nmuu$?o&HpH3ONj_N$8C9S3F<@#eh7BpXp$jnol&CIPGsJj(,AO^U@NQ.r1cC5s^rH\cqfl%Kdm\B]+J5RjWdTI<Y+PekK^-)\j[QC=;4EH4A<Xg?#k.jI!sf9prL/1(h5FtnW=b20gB:E/A;XAI,maeX<e<<5)S2ZSOt#0@\S\^%Uigs;2a.SPLl@@5eCVb9B]m@th-S,lDKH#)%)te!032^PSh5Z*AD:oOYN=@U+1]c2>*on]O5/rThYjV;UR=Ef7l38q?TPDm%%#gc%*ZkQoW,W,,h\+1dfUC\hB%l:BAr1n81gG>WYXN0qXrUg$)<T5HMq.eYOfqemDN"A!7'@[`Sj._:30E(RIc)bN:Ro/Ge;Ngrr&$('%kK[.XXm`sd!=2Kds-f')$pBr(/$nd&a&d'(iVd'4834\E3ObNj:d[l=N8QPENI9UE2!2Nh^g`&qq"D`0p<c&42b7bl-e,l7p>B93%$^j(Z=k_RhRCr2mI)1iXF4>:)jm:gap9WT(7rqZkpG;X2)m5slbu\_1F2kpXH"QO6*#dcQ<j.:XrhDPi2l^E[q<TW%]0f?:K__ma%LKJLi13\N;HVS'$+@9TmAa0KTc4-Z,^aN`?XrJ?cdh7X7oP09gYs^`jY63&!]G77rZUGs#mRDu0&%@uY&JBja/>Y50d+K&UBj\=r%\#fg;=TR)eWA`-:egOYNEUWdK4.]V7HhKI,!Y;!(9fkf`LEuhVQ+\BJgULS<_;]F4UTT>C32LNBd;JdCCqQrK;:Cng^AIkfMNTE5%%2U[gT?YmJB2/AkIJK]dZas=*U6Dqf@?5Y%AN-g*C=^ruB7$,U]?\p]EWg2eJcX7je6i:6D#IWZIG]:Vnb#K0;H[M,97&V$5`Y=4%V/)1AYj8Irqj?g>Mg9QUYeBgTH#i00f;Xtijdl%9^``g;3aA'V=(C3sdU8=UVOGo.0$ALhY;(NMZ2\D4_o/`KlcX'>;eI\q&_u[M%WMq4'>WA'&NjtX@`QYta/"cIqdn6[bbh)KMDQ@W#Y-!+4[arK/lIu)Jc>7lSG)3CE[]-UPAEM^n+[qIU/C9iHjkK>$_kUdjL;;DO%2qd%pH/?KTf=[s<@se`@3:,7\#;Cafm9&i9$HOgjfK%O%d(#Odf=rfu=&Z_I?j50Ao<pZ4"g5XjFa_e64ulu(V6qAt=7bAl/46R]%c%"$S&8pH1+/$=(I<'Q%mgjIi0Y+PKo^;]R1@oJP&BM$`()OCG/T9K`,erd8m;CYr8G.KAlK[R(7G,0=?Sg9>?1$c_F+=,-f#A.F%Z5R@oP23M5A!.m/OVs_G-unN1,F7Qm2`@FSI)&CFDuRgV=lS5.d&ERGmVUb^o&hPj?Q,M;et#dWf5"c\'(eshV\3dYdDRX9SrW24%^58ng/<Vo*mfpuj*jtr,f&C&OQKM"\rDYTENMD!;T1hTJY=IV3[u4VRPP:YM(b\qhDDjkcs%M/:rR=#+1Qh?_Z//*#rp9Gb2k*KQ%SfNm`';5F4U$7.&V2Om._t9`h,Q[t3Yju,"qrIQ)RRLTaG)0s=rEOf4_Y&=0=ml/BlDr[<Y7L3)#O4srQ$nd%[^WSk\H("?,'3mR%>d1!$V57epC[]G+COmKOML>O),R0d5GBb6j<pot:Y0N2,5Ff9l!Xf]DG"0*P<9N'J5MoeQDqj#0HS5'AVW"3(G((6PT4OI@l>R=4%/PhZ^qj9S&N6gmIdgZS<3#oTFP.7jrC,T3fj0FFpiP.uo^J*>\CaF)4Y;$^RlBFg^(g,93JO4Z1=GslUJJ7i,%iuC+Gsma?&7+`!%JDYn#@Y-4n#XY]_1]por/U@<X@7*`8dhc=9Ja]4Yg#R2N@TM:&Q]E0hF4J+\?cnW#fXg7T@"n/pegjZgnLsjGpAHdYp0>n8IuKL?%)]_jHmlk`&ULVGOAA+ma%\5$fRrDWcka4,-d6P4I&M[j0Aqih9rJQJSDl?<s1B$Y8_:nY0PW?LmhHBaTRBj)S5$@cSR'OBEP_$$T%-+s,:Qni.0L-@GofcQY/oeJ@]-\%,bq\KjlCl(CVa@&E9#2n]Spd:h1^keDZ!M-;cMV5&A72#M%n&kuk7^[dZXnLM-M!3h'q@XB;%6DX'Ckc@!I6MTsQY?=)_Lkt2l_4Q4e,%@*o+/Y6%c,FG!@nN^aTaaatccsD#?T[fR`)NXuPqfn/TDiT[.GW8&p"J=.][Y$EWcg?!%aW:Qsgp1GCkF520]cK:b27@h@:0-9hA=SRCQa^Up:0'4g/*<(Nm:95'Ri9C+>UQQj>u0/9SWd&755AjgcG31U2&@e&/r&e)A`&*o%\",NgAY_hK'\D")qA4F,,2Z%"^DeOqKt*O'(']^nkPX^Be&2aV's7lp[A-UL?NuApVFb]MSf>Gc=%!3.nQpUIJN`<7(#8N)-?_NG%L7/ss)d8Gd(T[8-S\p2uc&8XY+s:^ClmH^pmWo@Hi!W&=]tpIq],RWmF[^)>V&1n42>_e^pPg[s%>"Iqk.Yh($6AdK0;)4Qmu[(Z%BC'r7pY1a/YDbD0VHfV^G1Yeq`d;O]1<t7.pZ7ohGK(TNN-bC=:,'o3S$d)ps1UJVMt?A%nO?gNg73AjN4891;fh^RU:VeTN=HGj%0>>&c.*p!B".&)YhJU_obdSpWel!NIDo)o6mcNq/pVOY0E]8TteahFf[E/[>dG_:dl+l_Yh7YlHVN1Y)Pl12k\WJiY4h?F2A5sk7%@$WVN-`\/*jK`D/e]B9`NnX3=T<)U"h@><%l:N&d*-lMgBPi'.^+41kmn7li#ehDh_+\\XE^-Y/6`b4ZlV%a>bj_1)L6P]5^R893%B@g/B0\,Uq)#r/211)@a2^(mbr3edf_i`C']6:?c]+H&I4c?q*_pn*D0Xf\B2d:H?no1-^gDaa>@hXJ_BD+Ab$h@TM>j^D>B\;8t%icEXeXu;f<)K6JpV?-$lVFE&]Q*+,)VY2Q$m!klj2KAOtD)a=/rk>lS-*;rF/aB:j0iQh0`\6a,Z(jZ.)V#$]I_==s,%31?jm\$p%1,+%Q!s_;o]E^g!ZWI1.-ef.Jl>^t:q81+.D=lRg#kH918SkpL%<cQ#s8M$8+)Y'"cHP&)OT`LBZIZ^JMH8IbqbkjE9,`%?ADbP>%_M)EeVIlW,%+-eDWbH2P2Yls(2N<T3<YrLUp.f@kTAd6l>pC^Er'.o*A/-YS,CK=`eGDbj#Ob^54,N>pM<ESQoB2[8-&L7:PBl'O%F+4A[`KN3lHTjNIl+Z@hb?fdYgj9jp^RFu&oln,sO3MNL:dIfP^K($+m^;ogT<tB5m.]PrfpUAp`T)XkGBVm!RAempYNF[,ZHcd3%#)ggZ%b>q;$/rTTaFs9NW57;)'0[I_1@oI.*V'm!Z\BniE&:Zu'$P"IHD87Bj=<:(pL4JW%$JS*Vlu-?rVUhDo,UB1f06?07Yc&#%a!bZ=-p4W]ZsjNq]lY/@K=0dbo%eZF[b!8EoCcLuUVP\!S=[eMB#(!$[mp)O7sfr]I";-j>Kb.4Z\N]:qJ^^=4tgT'.A4t"E(<)n%l^1MNJcY#BSUBiI^^k4BIr,AE8*iqBmK6ZrB#fbZ>!?e8^"emDq@S9KKO!9*H75jjXZD*gn_G;/$kkEl?Y*+?2Q5UE's_,mqp.pY%B&h".HQM9+J5mVZkgcgG@T?k0dba?U+BC@EpFiqTK32-#`Hnnl"%I6FijihmE8+mcCKAuGAo99LP@H0HB$HliQ@ER8<q>g13-@LX%?1@Enee4OjKB`!Eihs,,HQWW\E%bkGp&*XqgRYB-^oT\;nc7uT7VY+pT)\WNP:5*jTA=WbkUJ$3S,Dm83^Pu[q>?O!P("eYGrQVt%K>+^9DYDEqd]0msKAOB6\)>C^a61d8@9!-b#]0&Mh@_X7DTY00#7I'ZZL2Db`>jDiTJ6ZZf/0Fs=j<AF4*rqTD_Lc`(iYF[\NtA5%MZMpl95Wp9e:dg<.?2=P+/<.[94c+%kSWu5>O">^#90EJQ?b5LcaQrYlc<\!?'H142b&4*beBL8N?FEm<l#E1gZZ4&YX*E3kU>PT%Ni[a5$rj(N]giW1G]0Eo<kua_I?f!<euCT9*tL%2d2L=UCC7B_H_!ohFYii(o6,6Nq-i%WnE<F!8)?>.lL"ZC0QsOEG5GeZaFaP=%K-R^BGOphP,c:gi-WY(7YDrh/&D)sud`l-0C+K2EEr*&g6hS$n,"b)FUG=j-6HE98'I$,MXt,3Z_ShC:IZZs[QbWN+J<&&CDEqdo%g%8ORb"PM?_(24/!n&f<1>qun8U>TUGkl6g6ao4,SnM0r-VrTd[E%/`GtjR1g[k9Z><\%QLRcM2kJd-ge5'!"Z,V_D?.8XV1T@S$%G*7=?lB^%s;r0(-K@@W;N_Nd'Xj2,]4YWV!reU%&k:2m&GdU9KVf)#3*!('82,*AhlP<f?%.pp8k2h"pj/[GPcCpj0m+G,s\TP=&%1Hg92_p`7['A%Gkm>K4ECmbp7gLom2B/!NFgr<_r0W9bMN;`\\BM;p<iR+ga#-jo\e$>4^]Na#[B%DEJ"VF[omaug]]7WlLi#/?]%GXphr,7iFuGOh`#]7[:=,`Z-VCE!`1!=uN,mCs]JJhu1nX;@']YX(^sWm@o&rXGm8@oo/LJIUns6k:Ve@"ZVegCWtP2]5T9$eKHk%oP5CFcZaJsns3WUXI=o'X;r3YG`QbrUWA$!g^alP"2gUjKO%[f1DE(:bH38aA(UBp"s0n*kI2QmEH<VOH%`Ea,LNN1fs5(HH0P"$%NVMl;gKj_d_=BGV48&C)X^pR>Zk:X)pU8K<6:k2G*n3ZjOL8d;Z8Ol$^C+(da\F/1b4`)D)Kr>RQcT#@_%qslcW6gOs7:4G4f'G2%7cVBj0!CS'"ODdCP)M"<M2[YkcU]gSJ.K<R,afTS7M<l"0e%TAP`^Xi_Y'H8+H]YTXqb5XO03+@\bk=l4>mTGlVt\oHr,%S*h9X-%EY/^-/W&(mKpa<,mf8R$'Nk5`n3m-9Xk?s,Z<Ns5D_1&jp3Kc,h7]o7h/Seh*3?dCJL(LAAeQWC:>VX>a)$-dLU?3if<.<jhKSu,%YO(TMAFCO5_=q[FHq1dOXE=qTXrjf9?f\33J@3juR[0a42eZV!fYmL7rem-!`cVsR+)bDNbWNDKdV5u0NuQ,hDLU;bp?k+lmFWY?%fB#S1rctos,Lb,NWAcTgJ,?j@+mZfF)O-C7EFuskFLkO+Z3jn@""pq6_]l-k*ML<c]]<7i_0^\3WO\K[hXX9oF#Z5)<,c4l5CGKm%#NpM1;fm4r]4o]#fCt'7E9U2"BBUO:eIJqSb9[O_5)s'*N:hGqk'GQl9AdIdgX=1kS%B;_B1J)>fub5:Qihum",L57P;d^"Y9l%A%G7Qa#gR'EkPO4'JRiHp%pX,\;fT8G(bc[?Rc]?F"S&mVdLU@jUrk#g(kC7k@)#!SDf<a\);=/l0J&R:]:"0,V-StD;!C/0eU/h*M%!([p<#-HSq#J_AmrR7cpE<$*EQ.?TRTJj>RXE.HH[>.js8#ki8mrep#SfJBBn+EnG=g-;(==[)O!7[s2R>LGJa-Nf(g[SC4<-J&<%B![lDmW*M$<o:'Z;`X7#>.K^(JBV2YZk';(`Cjm`\#X/hiViOP(\.L@4ii>d`;'[kjEJJ=51irBjd&'OjmD:$o>s0cf\NOn\98l:%&bh?$qYtNas6Fs/XrT(k^Ykg>kY;<QaoNN_H>immL1J5?WqO%hW'aPq/c]iC"$0EShuZ_bH`lC*'n+_L044,Kcnn6nLT7KM6J\@#%-pH>8&JmH,oq;<9r*Z_g:t:1[(!a`&F/\B?SI1rCFK#'7Be_e9fK=%jW7o9\*drl[H#q#"md/_C84X(elFh%>-Hlru*uo<E;`bHC%4E=s^X<b8.T<^-ol-@\Jfm'iE#80JdI3g-ZS*6<(FMR/@n&S6'-1>O)6.pZ\s%0Kd#_8%2s2BWSWdH[V:&cqX>EHR2'[qOnIgHF3%O\Gdt9eIRh7PaoaS#?o!,FJI[)4/`>s7,5jF=g?uFL43F`R;oJns6%K,tgLaAEl%O<*eb#2_t&p<,0nVjc[S#EBk6,D*;6BaF%u8%DrUU((J*X?+P>c<eM_KCa\2idqAlSKo'X]5S\A&>cg5=mB8=_$p:Hg&T'9=5R@IR8=o:++HRkN[nnQk7P0IjAClM-tE@ITq4]L&$%/cP(0qQG\>J!,SeI6k$J?5jkG?1Un#n+>\sj_^TXcJI?fgl8<e5*[=GLQqM?/"]EG&;,s>"$Uk$du$MW%?0CECF_lcCZjHin[1I0%GV76b2ku@fc%6a_h0iiN1uk<B8H1bQA6\rFe@uk9J'3sKopbQg%m<]"Qr3Q")I5%se&4`oN9[N$1;[EuI'82H)-JYnf]6fPUWuA:%b?iGl;lnK17UKe[=oQCHjN[%CUJ:4LmlL,+C`VC3>Z/1E41Wjdb"U+91Oe?MnHrO!f!d[LlLJe=4n#Mje?!\6&\]pDGq,6+_)l%q%.9(5!4'BRMn\#seh:?;(YEJe'-3hT1G3OC(rnmPN^[qF(W;6Gk(Z,IbmmCEgqL!eHRQ>VIoW@EYV4#+<X_OJr^b<0sa\ME3%'43X%n$:;N9BnfC7Ruu=CFs1[GbM3uSV<&l#F.B^j4L2hODEe%I7RAIm#L0BVQLduea(Fd1)r3k:+^9-GD;mbNsudbeZ7-%g1u2C;gg_'%A%qJKa%l:Wo"3,0UD3O_MHrGiW`P>?T8AV(jC`t091AjECT`O',6'3s6lK[-:*rmqEW0`Zid\*e>&CRFi>S[?88.Fr$H!jc@\]T[%D^RX,Rmhaqbi/OSIsi@3GgsXgOF&='HdFcV"d=63eUG0Gp@)+2(,'/t\cWLV620<b?#fOE.[/KIh]\Q5)g!B.);*?OpQb;%GP'el%o4mCM>W51Q0N[Ekf:)7NrPdObl4lhpEV)b:g$Iug2`sV1^pC)rihHT;q?,&njl3%VK0&j-I[DW$+!'"]5OaCG_YScR$VcZ\A7;WC%I$BYoVu.KpK'8glU8eN!TsYk+Ed!F6*.^LX3t-2/?<<j^$tE5<C&RsE4[+5cYtbFP[2_+j"`3R6^j_UnCNpA;+s9Oe(]N)GPFl/6%FX7+1UO22RfkWu@(r%.`s$J%5<3a$_o7%;qi3M!gi=Q*NKtDB]RK83EDp=Ls4T>X0!n;_d9$dN'Lk*jh>itiH#S@&DYsp5$rNGN#%!UkNgL]D[_cV@NoRZ9Y76E,k;j:R8L-rgT*2[lsk%C=>aOOH@.<32\C'W]mCLFmXIok3o)Fd(GGbajJSk6j2l_&YeYN,&d\W7N$A%;=DCC>a]Q`g/TdNfP]DCmk+TM'19tphc7;"A.17^mHS$hec/_^eTh'nZ#X[l<B.Qqe#r&G\!o#3?a!&$rj14YjuH4Nd31a)g@Xi@%_(%d80aoQC1a:)3b(o,&"lIH,]6\dAV.NfJW^_>C)=:Q"qc;7J<W,.dhQ+&a@hU(nl4pG$A3(WdCK4/rIpgm.Y#][]@Yh0e?*1,t%M%@q?WiK,?)l@CN=0"A?0gsWnY#\OHL?:_'>W_bR4a+)B<ML(/:H+eD`HQf6aoAqU<E)CW[/b_\<G:L*ao?[qWY&d9k[mnK034Fe%lMZ@s/lm+'f3)+td6/[LX2%YF'L>_VX%JM8U[b^3<cq@lZ@u>E<r<qsVj0':@jCWQE`U`EjH4^k3J/ekr_[oD3NGcRFW[C/mp!K$%rNB@(oG\%IqL'logXX4!#90+0[HGqPP?"FoVM7*7D6g1'8T.#-s1OYsE;,!\Wd[Rj5KQ<,>Si$WWkN2$cdn,P<:00^V,dP1pE6+@%:(M6QPc?Tq[TBp<N3",h'"g04Mn:jUJ54sAcjYGG%;l2#ZP[Qa_!A'S2k6,4f('>3"(7<s!6k1mRfTb8/O8n"%5.fkP?YiT`3;#t%\rWdo=;^&9qfN<t/h_rs!K6ZFBs2ZU=4,WG0S6\;H<&P%)1Z,^JR/eqnOj/=ZUMtjeZ`</l28lCe*?)LihuV.D.aJi[9kbJHg?dG%J+JcmU,:%o*Co_+pX^q%n`fIJo()PIXX8\shmQG>E#6XnT:JpB)@"a<5r=aH.VMYr-[>jZ<7$T@l9?LfVo"aL`9C6Q*"e`;m@6e[%rHh`,__;sg/g+<Flhul+m#unsjF:I+!QHI@R/F./*6c\.iTOaTjF?!V!ULPR7jM@9%l/T^\fH3D4F=]3!H@Vmcb$cCB[r=J0R7a6%r5?%VZGZ!-I=/HJMA>2W\YG'2(\NH_s,Dn9YYs#dMUfJ!ec5T*e_]GL/#'-u;lo?5@C4QLB<]g0@ig0DX_R#mHk\#08P9u5P?#l-%eigVfOm:$m,bQSIdf<_(dJsIfd.`WR.DXAT1=I:'3;pmRe;cCd\fP]8hF0Nrq>+9=s/IF7.V*m\l<b9P="U+i'sTp>oWN$#Y!VT;%U&%hJp!?nA+o>?k9c\I[ND0i9^T,DfC2@A3r`)\L<K5j36P$OBRi&S`<KhVAAtOGKrS%6Np=O[te]l&D#BhfoFOQAPG,-ruYmRD-%W*#$WX?og-Cgo@S<V_MP1-Zh_;mci*PN.;W%a-hQCRnp5B--2\Qa?bDW_P0:>E+m6iG!:iEdKZh&I^JiJ!V\eh*M0$cL7'KcZKU%%W"!U5!WpA2R/=W6-U+9[s)T(i+J('XaSkR:!QITrqqhP[:mQXZjSj?(!KHC!OE1B5J,hQqSjNPpkF4d>H3aelF0S6eF8nK#E3f9'%lt!a.d;%-4[@)Xf2@!(%4ZN?C!&4@9kkg>I!;uG_2Hii3m&]$'Ni&H#f[5:7>Nb=Y7pm`HR[@+!CE;8a^bFNpCM>Sr^]!jE\H1LI%"ZnWd+mZ?)VLS[:*$.Od!&n9hL1F8o!Si4UbL8QFg]26-C.GKQb73A6XS,mgQ5dUK0ZQYM)o)nb]su\Qjp!ens3hEZCDNe&+m]#t%*CJE"Q[>(>!]83sLV=H&J!!76'S,8#(lDE!-Lq)pVj4S6["bfNc,BFs-3_80)lVJqjnMlS-2qLNFF:@B<Msje<GgQFU$>SX5DEG$%gp<uFd4P=[7X_%:qQFnPf:akr2`<BOS]X+mYb&h4F=O1dToqAZS][p2*0!/AV>og@,%g2@rSG/X:,N8pfW>+Gc.i@*b&teR9KL^S%A(8[lW+-L9e#D-'_"5^2kZ%?MZ$3L((b77Hp!6,iac:Z;TYiP=mhDSlgZb/>`BKpWf$`tL5HO[\g)iN7!tP%skrS'.s+@TYT#CY@%"oL;0i."X*^qK20=%$(L$dtFXclO2s<nWV`bg!&TK32,lh<GS)r<IVN7\s&6j-'8]=)G))Vk^B>,Up\naSe2Dd.ssgY=^_K`>(nX%IeM*n*Ie"!IE`HV/i-VuN+rlNl>HF\Cu"Q[nF$%oW:nQ8@^_Ia):e`^e?Ol0):e`^e?Ol0):e`^<68q3&#7iCT8Hc/qIES&k>TDJ%qI`e)iDUuH'$rk<8k4*pWA!YW2*9H+ZE!rnXo_F*[\2p)gDZ\&TB@oK[q!s7<kncA9t-n8e(YgI):aaoi%kY^p(E@'ilY>_56/lV%Xi4<;i_r#&WlYR?4e*3:'Ou9F`Dufp;u=W@4+I^SfQA!3m>Fd51[4S?\8#AuWiZ'KpYr3$nYp$M?!Ocj5#qF>.i?g/j4AJUpc0C?%6.9f;akbeJI!thi&6#Zl=6F^-=RDAQeI9#V=gP-_H2qiQ9KL^<h6-0oJ%*hH!GoDo[-(`JAukdp*a2S*@04%Zn&;cFc(s$r#19E?%<NSce%_cOTPJugC)Ar12eS%r?)t9elX@B7JXMQBPX@B6?)%T31;`Un9CSd#2a_J2_@8=lU/6T+Sr57$`rnM1mW]1pc_63dJd:$&D%mVF9*(Rp1C=OmG,eueA3\uIQ+Pr5]8[neo`8MgZ0dgDjiqq4Tum(@Vj/K$hP*WuTrf[BZcm[2+#c^25kX2HHHB([WDYA0Rr^OZB5%K`NlG3Khpn>Rt,aaRE97EqHB3U*EdRb0d8\\HbWe@R]_.-s!NloP.cBL:hht+3E&(YjS\Xgph6Z'mjapUK:kdG4KNL4bEr2#11n9%'k^+U8d6uDFfYI1It*?>mBqGPS!F:%%^lX*!?U'8cBgS5X%K6R5$YSJEZs]4$kV7r5OR'^HCsPB7n650mki"s%_P9HeK`_LCBQ1`%*qee1!0#paOo][t#j=I,\OJ?)Xr[UQ@>9pRTW:Q_AHX#O14ZMK!P&!PY`]$/oa!fE2QUEh>s/8e("f^V$t-N!aAl^-RsY;"CU'qI%`:D^HV3Rpc=1F`*ed1JUAJ?XuZ-Ut9CTh!W7KCZO_GpZG(G>D(ZW+OcOgR?okJ)H4C8\B#\+EIEa],^ZV[oo+rA^-eAtY;%XM]DC%$WrJjCFA!9&bR\_J`"Fs+TX_3=CW$!caH`$-oq\9CM`L%J0"hE]_d>8"S<gEND0g$'$u8]2)[1.83d[e(3-P\K`q#j@+f1/d#`c!%"=uK]8Zj!F5f\$R=:b*A5L$C5+istO_BX34$J+5VRCa3JZXXYiUN3h)FD_,t-X5WB*3I2,+#!=,N%6FZE3N8FROXt6rHh?[o@gZ&%hLO73k6kl]<,9f_!A=ri35;>@7H:Wr;6=,\eo2$R+P#22BSCLF)V*Q,BH8$=e_6:%7IQ7F;6=,\<d6-M7^[Cc>(+u5GH1?&n"3<R%CKI6q]PW@;[7AiJef\&8FkHb*HAA-6]#FsD8pMXV%>]6.j_T>$*oF6kfT!6o0&Y'8+Gr$M=lW`+!ka3<m!Se6<jR]tq2#W,CF7s*%mkjiF77UR#\!*5L+8>eJq-54]BjAs^lZ;a&cddN&cW/C7`9/UaG7Icj4G8K%Tdb[1`p\u:h+H]X8*XtLf+@\&h9kM2SI!k!598CB%=&V<c'r:c^<"1C\B:okI?p1+Y>YJ:)H?A4Z"Mcm&cb=ln7+/KbQB"ZJ4!R"S/bQmUBMB;hT<1T#T)Q>=X'oQBBX4K6\I9i15a*d:%>%)1@e,RGCK0u:1le$5k)$-1B.7A.c2^:SO/`k2a%G#W@JEd)Cc'DfqqPOuQ;ub)LGa8:YAt4>HXId1Ao#^%./cagB"[lSl@Hm#;%qQDei"g$O2odMu[%oQe001.l^Jit%3o\Z8c?g;>o1EsBBm;HssVX["R(]'E0OE\G(D">"&gLHk40C@WoPhK'm1`BuB4TDeOJs)4D%L(:rXm7)n\!#BI[F`"s2G>TU3,%ipO)</&GoOu8EU&+^gJ!fhW\36auk%MTWS.DY9^"8klrF<Q[IFK?Jmt\U$+1"@CGhYujcXc4N%o7"D;qdE7Wktc0'[IO7@on^=Mq[:"?IYdN*#:USL"2F91O)o8O+3`1dk;S;F[PdZ#^@=`C5$qEK@AcQbTfHIAJBRY:X$(rOK%1ca%2uZ-A"8)oqaNQ320HGSKi4Bg#K6,J2`[7jKCqYeaf\]uKL+YA&_?<>VVlu&*<a9F%J+aNQ7@qHg0n+^Z_)Eb[/5bb<8lb65\j3-H%COCPj2u]4ob+D++nt%`n,l7IeB)EaZ5Mnm)%TgmM-^/ThqJqX6s*ZVc1\]h5^9iAbT7C@!)/I@c:I0?b(Can,a9@OBhk)L^-m>(L%bKFi!1MV\SqK\_"F*dcXa+DqmCH'()0rpte`=<`6YPnO2!Kak.)%/oB+/XK0[!ticOc5i)XcL5mdI2jmp,ipD0E3RF/:MpA]1iY#%Vtm/L*%[.FTH?SBE6A05?]1@G%1WJV.ttB_X2U%Ohj8.<='+O[_aeMMk"fGI(MgN]MoY^!Da&*PZX<'_25^@RDb!ZJG-oh._?(pI%cYpf]ojU;d[;`YQ(IWqk`XIWL#IK]&e>IIlH/n3C=Ke*nQ`Jl/0H)4iVs&W6NYQ,n\&td'>Dj$lI!Pb`hTnt>5CICnO51^Ygc1,M%PHXGhmJ_M5rmCWCn+ZObo04&[^]&+&[2(]][ginjD#=2,[s.:FoAhRdScrP^GpmI>\MTD)f`"_7IGY"iiQBpB&(0WVh0EMMm&u@$%/5Fm%l1j'!kN26%]?dMIq7f/ITAFs/O3dc-3Zap.o5o>,+hEla^r.<2qOu+i5(8f)4Bl-:ZhpkL@\S(SnNX5sX".g%oAB!XXrgZY%<m1I'-gf`.cdKiq5@6O2[\)rY52';q=?4DL^nXJlHY6Cj%QpH<Qb2t)"Xg^Uj7A==mF]]KGre.&nFd'Vh]_p.286;'mXsE>X7;TR%?WP2`^-6cr5'PkdJ3om,^NApoYEq5#d)Y`Xn25W@oATq5qkmIiZQA9`;uUS;VBU1q3D8s8Gg'U7#%H1JhL41`eV5a:ITm=fFFtsu%H,C,Vgj<QZYL?/8_pYX\K'g3S>*^8]D(G$%7ul;qG2(ja*qsR01A?FY]U_ZX)l2*VhYJ5[9WLIoo%W$U?#Z.\?GI4i$2/6ib.R@Q%"JkE)\LfH%SKqn:I&>e]#[nNXqX5LW35<d(Zi$iY^YQo#GV3t8@?eG&FV`^rmf5PJC@1oh[EZUAS*_(7j..78P9Mco(#KYc+j<I6%ZS18`Zcn2_:%c?6)V;*rpH3WCDM7U^j2MY^ndTn=$B.$cc?&t-oI[li#aY8:SpeiPI6lIAqe\Q3"8*b:_R?*Z]*8)KD67bq5/258%9P=,8i7sRjViRee%l-;7Zf0-+]e&$`rmUZ>q'(:.D8/#AWO29VE/mOs^OL_i\?-9RduGq6TEXQ6D^I\C9_t>SCa6FYfoY`an)`/$%7`;5<MEdLKT38mt_Y;tC(s;79S(m&1g<DMMiGa2Da7jrM_]"oiGOTV)+.rN%f2#187>hnl9oiSOQXV!XD"OQV2`5&O\gKRXR<X)U%]$8e=`[TJBcA0tk1"flX5)8!k/+YgE=hk=G:9j0!]_>A1I5<G'f_H;06j53dp4n:!j6kq<f"T"br:I@%1Tku*f!`8=Na7AGfE0=2%B]/H$AT@Tdq--h)WqHVkr.Tk@$TAUqenNSAB.6`.a#9M4>#RrBTi3t?;6X^G;eoc,GmndRi`T<2gXT#B-pDu8+jiLO'VR<;N0)jS%0]XZGl*9sT<Q!mEh6/C/K.dl!f&)PFhoHShVuaB$=+9dZip4&/rTB]S/7B::CWBN\<H.G:^)^8DpZfldfcAhNLVHDB3O)r]&'L[#%rtdYrs5B5DSgB/`<rd&pG*_So'sR:^c3jPq("gpQjSn5Ss(8+J;fgq/B1LDAG8#=1<oN#l#:4f+XkOV6S%UKHa$3sJrf]H"M5-C&%c3tV_iU"MRp`'*6gt;GukKQVN0,"7<I<P5@$Yq0>4o7V%%TGHYlbEh'1G<0A1QJ#u>J>7M&A2i"iJ1@SI/Ol[FR.,l?15WA/W9@7%F63bS&+@?Xp5OPsll"%7g.'idLu85e]pY9pHiD"?*&u&C\RMGGpXtQJTDjD")+1/X\C'npGJG9T_#=I<*hD9O&j62.cK#Th`U4A_%Cd!.>$86tDqq*"j,,@Hq,/!J"6LsYt?A)tj-*Y)Q0*+b/_Fq[?Z@<JC0&Ldf_*%`1QgQ'5>M8]h`Cn"UV#)J-<`<eGVuQ#V\&BB!%#X:7DTD/%!XT+Cfqp2da"QSaMkNMr^(ZFU)cb\IdpF*`=p*b'e!.!tlYCfe_.sV!Znd<aMr:2=4^\@4e>ZSZKe:7cbNRpCAW8Q+5%EprAHJ>_r:[p$u@T#T[D+0&KJS2[[YMD+#'<melI4a)n9/%T3g^>8NZ^\).Zm(%4;n`'FR(?YV^\quS#f(7_-J+g4Z%t4].C),)$%<i^KFlcQgoHdf$)D<o6OTRsq.2a,ge>^AVoc[W+nE_1_8ebe7DYJ(X9]c6]qhN/(>03e\.rghO0n;<dNctDOklYX$+ErTRPhs2=)%OJh%n<pS9"foNtN%]4SiI`?\^9Mb]&q>ojE6g]bZDL=kK3/t+kRP#mK@m-I(cg+aTIE!rfH&suafjB57rC'J1]l6u1:He^SfWX<$%C`od23S`Nl\EZ[kd>,KK=<6W.I:"V=&ndhd%JE2[IJp9TjD,[:ZQHk_S]3>RGFjo5+OS/LA+S0qB2`b2GRCe=gFu.37mgLNP6M%D%H,l;e/)rT/^/7qBlGbdnLMt*Nm[#Vf_r2OpG,6_L3#oXeoI]KA*/DEjlC)Qq(rtV)NLJ[u$fa2d^<t,PgoI'k2>G2F3gq(Jj)Fc_%aF/FRj#A$mZ*otT,p#1$n;Vj@s'3Q&DG#/hp1Mk\CJh`SQcAPZrW-bX)_BOHB;sCjYTB1Ndhoc+s/^SY>UYV2?JQBumLKVM?=/3s%lk',_5+>cIJ,E5U`aY?ld17TtcPn'Am16DO?dpB1N;]9=qKn@3`gXre*'%4oQX@%*a6FF(J^a+oIjRc@E4(Ll@Temg852q\]/&O,%Od#$-2+n]MpHGGl]2]uWGB7&'7;KT`&=T)t5&NpI.[aZcB6oHLrU8:A>@S>>6,)4OqTd\7a!N/"QK._Ss*TSBZIbT75CWHTqsAmH%s#Ck(keG4<#ChZ3'dmQCaYF5ZfR!F2C`<%b`A=XN[_::N)aAgjIldW.l.ah!5Q@dl"Il">\UAM&h-+R@^9?q<[p%7h2plEQ\,C"F%7*jJnLTeameqX.toRDkFritj/g[[`/05=RRWQGjc5ok7Yqbbams0CS0(B1S.r`:V1>'F/r?Uh/A:tNUidWRR1=r1[[gr_D$:9rFe%>Ab6[.naA#-Wi85PRWqB'`M`Rg9rC^).eUt)aOrVWh<HZV-/J@9.J!;:=Vt;dMAk((19cMgHpJqW&6.WXKG/$'i6efk"\n&M:D53%6&$L+!.@BGmTtV'8;j!H8J'(R)[5mrNbhLKR.c@]gRBC]^06'Sk,%uHIEDp]OLg_?#d@6Q._B0!EbQ`<VXm2*VOlm(!pWifae?.]%R5AVr?CDT1D!/+:c"1]Rb8=./ZBQLhS7^Q(N.&k^W<W6caXP9[\L\@u0Le<u9.L.RB5,KNOP$/$HmKCf2GO!>`sHl@blfDQ&RaME%<9h<FV:=&U!+/i]I8-R($2$0@$^jgue!U$K]p2MfTYl!q`qJ!1P@_qi)^Ete`/G:)<t1di_9SJNbLeV7F5$o2B&jqG]>Y&S?\WKS%XkK)GA:%k^SVpG1Pakq"]ol;e\Q<g@dR5eh:-Fe>9iHfECPEj#jIo1e_>HB;0Tg.4Q3d7UgW;i)3r9nmFI<_K-PEu;oFRjU>a#S&%au#5rJe&thr\Z!XAaU[JToAl((FeCin`-+(=Q\Y:DfX+n#XQ=XqN;uZNq%aa;nqgMbGeE\iUW3Vf>@L'V^A<J`VeZTKg=MHG"c^\%S6#t/IZ,;[!._b>nHg_ET<VX/Z9;nQf=8W1`q[WKNCm]0kDPQ:mmp`Dj_>UB@"JQJH!fd8(oO)p^h%7d?H84UB6`;h(/0fN-[2>]%rlP*e;sHZc4(eV?Dsj8\dUdu[asE@!8*F>S-#0%<HX&u@Bh//7`-Aa@lrt`rHt=--U9<JL.B]UZOkdPu(JM'K1,i&3^ln(b,^6Ab%N^[J+Osjdq+NB`C,tXha+X+`O+isW)&TGK?3AMCEYeW"9#lW`q[@PH;Q!f8b,`iLpWHTeWWG?mf'DcN5@Z,Y^@1d_684D<<K-7Y"%7-Z34:q=M"+2V;X&9'l0ECfjT'%%AT,h,V=-Ba%n)IqGsbE3d4$7;,Hj?oVZ&XJ<?W@Bp.7)3Bd#`oRr6;2RR@Kb%63s+Gg9Yul&%p<?R5*18QOO:`o%cl<(O$S:mHAH8ZKI(0UZ9V/CDC(hj,1SQ*ml5Dik.<g^NpI_$a1_WP:a"g]t*TId?9n7R:O'Poq7[R&fjJg>$%A,+PbM-&hGaWm1LJdG>Cl[W=#e!:`O7'6$TG?im3+5<k29U/QYWR@=5WK?t5%qn`:PijjcY4D1PV]hikf)e+S7l?'nb&a"mf+aR'%$!%,,Q@c]FOLg/WEe40HV*)qT&POkf+dKU,)uu93=2L7rH),-[%@A9fUBh+ZVN_=uN!Ws]]1%8I,S,6i$7=u'F"DBd3AlhXHWg,o%]-YdP8c@X]^PW(,1SRJlmMS4eQ14m!94!<%!'(*5;sX!\<(.7;mg)bApuO2,'Z-4\+mrRWFuS&m@A+:#d/GHo/7i":NZ+mgH`FRe%9X#5Pohf'"`me(Bjd;J`^tn!oc,<(*_:1!aG-3M0!&^>j.""j#]<Tjl0gq6o!TJ"eqdu"eL:LqOJlGCINF+k:UK#-08!E!W/-L!Q%e2`643Hu@"M7bTdXPij$cu@jZ7PM[./(=3F!B0Ccc56TT:$0"+@,Ds*(a>^CK-K_*^UtmfC=iO%;Q;%qJR;lMElSmWK)+*m2qVc0%58jC28ZAbE1fji7Ml8Q<K%L=`:O_n0Apf[aTQ91]WU3rjcYL&+eoNC/?C?,Y2SeD//&ec$Jk64WQDoR#o`=JL-0ba:mZlFZS9h$9%A;I2B^'KZ$;A8t2E#:Wgp7Y#_M:rX':h2GR$RSF#&QCOFqPsU^gcMkYp8+&foKnL+R0J2q@]N@<+j:+1p!a_1e/,J4't6keY=^?U%JoHWr.]^Md$j-f7Y[OM/^J)n1;.9@j0QdUP93$<"MAftl_rFQ(a+=U9YFN%[cqccspFosF#XR<jAaDro8c@/Q@[\kL-5_Ll_(ml6%dln;?N"KSa_"NI#9?D?=aB]ph_m=+`@k:OlM$X/>;'JPZ^l>\V!D4Pd-+-Qg$WR1$,`nHLM%?6]"dQS,"Pc$W)('YD+4mr+Mub^K%*)J=7`#TOo$)C=lYn*LS3L70F"Lps<LO`\=@*XiF[jSBm853X"&"l'8EI.hu4gmbs20prh8;Q"6=:(cMo%42o?A^%HNrZZ0L+(<G%4bYm`6JS0J8g#ug`'/_F%$nCd!o+h9UU6Zu'GaXo)5FR;!bagm7ekd!Z)G(tDmBlU=?lUEV%Jp1#h$.3dj_RK8kX&"E@D`5'm\oN%`?-9(>ea`3bnpJjJRpl2Ys]>YYIG2R0T0DT9NAAQas'd%FB0!>F0A98,j[Dp":i@IMa"RGV?R_]!i^Y0X#ua]`,`so+Fs=A$tWg[%4?tce&^$2@F=:_=2`00+@:;oJn.&U<VZjLX1Qdur6+0@Qi<B[p(pbS>jL";bYDSKDe1Tc$4oliX`Lu<T:Kg<t'q8%$6$7pI)STi.%eqf@(H4?5q&o/,/QrpF5Mb%<:-oWF'#cT/.%9??61*M[XW0IZjK;&h4$g-B/SRC!&KH64GE10ObND,C9ZXKO42&i&?Z="nu2AU+.%p8Ml]dqj!OJ:`ahks_i8&[gg[1:S(87Y[D6fbC7>@%XqIU>9du,[(Y;A43IIW+cg*OJN)FVBERjG"99<U=%'69gfoIO,.)*mffaK%@a8,Qaf3M\OcZq$d>5HR,#,3A:ZZ:bT[VtrNtB3pX$4B@`3-F;__3.U1b(nU/E:&u@"SeDR0Z-\.3XPm,#'Ds26/R%W^@L&q@SCL%9SdFaC,1rI=RkC7At^Qhqa*&4`k8Wd]rRtZ9u\!"72gQ97&7ql>6^4E6n]*c;SER4d?+4D!_pf_1$^VE;St'2Ur!V*30VL;7cKBL%@k>p$E^<ft8b#)WAL:t(++tN[bs7OcjiW*'UCnKG1+A&-gb078O>]i'.Zk^G@N*?CWhlsEPN$.`4[t+49Q`8M\+EY.$ro4>&JUX4%[1nq6KTTnE7W^U&AIMmM&nP%*,>lJMV.NGV"?P+EN*L*5AONa)9nq^i:gf6Bei`.!)'d!j,`k(4P)O.&,fpl8<X^50RJKNem\qZf%\R=:'&0VSf)'^=u6)l&oWGRo&\8QTs=cH;+OQ78/$qZIFiEil.eIPfA0qu/<!r5[V)+cHW-S'c]A,+od(8DcmM_Tt)(Dbe*I3HR(%e/-#YO/0K9^)3'``0eIV@hN.-8Q:X?C19jLMD:i/Z6#3k2FIF@D8n7T`;NSRL:]q7%/3E6RDK1T!\RFCWml"V&?m&t%Mc(b,big7%N-K"#?/"l!(lOn"PE:[>h,G7>=7I!$Qp_Z.<)QpqLe1RNWC!,2QqFcJ(*c^-CGDcpMADDSMNcV1-CA2$AZhq=;&6MUQ"4$VnSfck%+b(4pZ6_Mc'O0!pUeEq0Kd/OU@"Oe3XsWlD8<Y=mGTndk0ch*=Q`<G(W%'KX0r4Z/&gLuUQk8:l.[XTZ_VC!cTZ*!LbZ]r*m[&et%Q!f7_oh-@l/.NhG%3P/"]-bjHQI^#P!].nPY3_"iXM@rnncTh\WlED(XMq+l9j3KHdj2mlPVAgiEpb?i!.!j^bfSHZ`-@qO+e,;F%<O,bbnM#.rhj/lj7:kbL]I:]fM<)oBN.WU9;lrIgTPsT8'noT*=c;fh.@=Mnp.uV]U+/h$*55;spP]+H93s&El4mq]Z@a"SQ)SbK%f?0hB\T@P_iJ:eDGg^(a(c*F*]i/SI;S=R3$dMkd#=V*TfX@aRXN,Rq'MOU7a$b.d0hM_k+lqLF/PhE.W+q9;!e;3LJP:In5a(Z[%e/)Q)US<LRY=Nh,e5Ip=e5)dLktZRb&PUQ)0Qirk+N\jNB:f:W@g$b[K^+Ss-N]Kf+X-93^dK;&+X4VZPT:MJD/Q<WUTOtU_K`R%%9X&@1W+&0fRj`sF464%KiWJV9&De`:e0=M?-4aN.O;jl'.AS".ktU%:/otBQp9qkY&#AJA!E+hWVRD0G:@eH-f=%X/6J`G&X`0\M%(%nqABuRuH@"QBKVp5O""VhPh#E\Z!\Y#,N\qnk%F8Li)_$#r5)X"^5e=[%%G3!%s<<+eVin)#(M1ZO17')b(9E\6$+IG-MZH%`6%,Rd3K&H<9l6l`9F,%=,3@4[M/!,9B&Pl4!<(Lb+=MiAkt`5.T[+r3KZ`WG7q$+@&P,!Vh:JjbWT*t5Xa@Wb6;E3NjY8E:87Z+u$3%iWI(..3`phi:_iX-@s(NOs)$82\a75WJT71J1GLt4bEcUQK$-*HA7&?N3[@0$5crAS<jV@)'5IIOkaRIJcR_UbVk@q%Te5o!i`-[%`;.<,7,]i/@9UfF]1j*98Dqgg7u6%2:YIrOX31pU#@<fJ'Pa+*#RBV<OPEU-M3\et`0gf5#R;"8UCl$B+k86i2G(=eEYCu]kE2'>%k@DK;R"pZ/K%+9r"XC%>AHg%A`""c*.7ad2'3C\<KjYGR$jfdd'ikC8IZP*D*$\DKD.6M]m48^U<)qj3og$GT<Y6=S"="$q_3Lul%dGq76*C-bEb6?MGE^GAfqOhle!NMAX&h=-C1.DSd67QFq't7!`E$_NI/J+rb%V?+UELd/(J^ah8bT>]">:Ktfq:J%W#>bM=O>;99%*Nmn-85oSD+p(.\!YgoJ<)\e9YT'=<[.bC>3[eN+Sko-.Th$J`2"s-?0D#;=G0'>slg]#,mWdH[a*Tnd$%GZ%\6Ne!E'FV7N:G+@%pc4IlNXm_\8L1,og%Gs++-gALC)OGo%`U=Q:fcHoOB8`C@/d^PZ9+;#n3r0ALUd4L=]OfC5i3X_B,?5AiBZBE>Oo:_O**\)H`bQO%*g)@nWEdj<nn%/ha*#f)'9sN"&-r)B%Et@'FQJdaB;UXp&V])eGVm[\1[6_m^eD8U`*1?%0/tF)OX2;T[KM7&,<T,jQ/,bk'Q_/(%;$OlMjiSD(n$"a3]49K_7e8SF`ITn4oQSqLGbSn_+m+gi!K(DP4KA)r]#P\rAgr(R_,3)cNZK6=n1_S6jZ>MC;=>dEM?H$_(9i<Z%?Odk@f\hR;8%1_d4PmDR/J%M9C<)e@9]crZ87soF(ASHZ30s#$N2)/jO%3&9`X8O"WOTtm*e42X`8cUa+)dt<;8Qg4*C[V?b4N+J%s32`/X*kro7Y+J`heCj[.<lc4`?Lmm`1l:K#U=6mWIL1HIjjEXc5'oWQiLrlSWi,Oe&X7QB>quJeN=TN8]oNVPgqmFcU>uE>$Idb%;3"JqA!I+\4;H-9m1^:%UccAK/EWX9"\X.#%`-;YW.i:N#*nc+5s\1t$Aa/h)XDY7+[@fSg^KG;jFftAWs)abR&EoSgaZ@rj;P7m%-T@&#4Uo;<,GoH_KjannoEE4V`Q4m<.#Y1nM6`M+d+EB]Sd*N;U,5d8V!MeH*E0Ek2l==ER"fWkMK5Ik6]**gK%_7R-R.rO;BjP\%>Y!B=j>+$RLX-QJHRt&2[&7>;+ui1`Kj]M/Llj+Qad#;3O5F'*p.1T^>u/F21<s^[=kY*?17-o_hN@]S(S7J:<$##)p/J9?rD-2M%Us!6i3d$LJ9\/o*a^f*]Pt[A70^b3[4k2D]fFqh[V*,PP=k]Y?6Ib]'QD(T3O$5%?<QikajQ;<%a&YHi4h6u^m,?3"=\i?7;>0eI%MQeHe=-PkTZ7,%\D+8)tmr;KUHD`0<GgAh0PM9EC(eRW3:cbsm0sp%Q4]O]s<C7)D`6_,qd)m.l.o-SU68;H(4VU7dee9X"Ps#@T%$e=c9Ou]@<PWb7'7G/?R'U:i48Q"+RO]7Q.e4E*[,7obKb#OP)a3#jSH6SlbOGAIT@h3jjSoEhdlm^4[;^H!Npi0:,Wg9RL#n&B.%SmYFhQka7F:F%Gkp/%V!AWHic9Je8^oiS"V=\hF8Pk>`T,/&l8-R+hsH7VsNX=')j-6a04HRMcHJZIc\$[W@rJdLS2(i'I#PTn;V%Yc"cX$[[bfbnZX)("&<W:.*QtjZV%(=kckl2Q^]$WMe:D^/iEfY/B$^I.YmV>Y>-jK-Jn[@^VLP@YrE>mNK:OT^Sk%S)lg^S;>@G%*lI#WK+n&[k@L3FL[NYn.^O6?D/blFKL9`L"f;@#dQ@N?W4k5]i"EJuqQEG;r;MMh-S\MpUhQ&m*'tFi-sDMI1l[enCH-Bu0T(6U%/j+,UA3RsV/[q7k7q#BH0o_ob)%tqX#ukK(.P9*fc9sBVOcN/bYQe)B26>Le60am\F604Y.TD^:jGU^E.fhM5\I*j7/@3Eqg2^3C%YcfF<`.qn>pdA:tJ^6XMR=nfG*trI46=29@>,d^X;<N!CBC/i44U*AbF.:Z@JME)*<'(J7$58!?":KPdVlWC`XN.0ml-^dA3Euh:%L]WR1M@ii`17s3S23a7:j+GkGe>VYXJ=;[HXZV7dEH;N;)hfh_\"&DtJ?Ojo8B0.uWld3i!3T#_M2l-;)AZ>b'p8_Eie`mF3hG=r%`$W>eb*c23<Q\7al4rhc*qVi_PaYLud6q.N*D^Z+Qs^Onj!i\b('&(OjWtN/#`siig/:rT:inf8QUJh,QjBKgo$do4.,$[?:-d<A%Bn9#]@DrdTU#J!se\8#>_Y>5g9tT?W#]P-bBG]0i6IECWQ$g.E<UZe39&g"R[nCV"5Y]TX7DWS,KVU$M<>7c^Y[s7:DRi$Gc7.UM%.LLAGZ8r&PYc5l>1i%j$"W!K"3/!-P[o;p@E.FuXOLJM`*[),YQuc7I7tM$o?J.;`Rn^;G71Mi'D6u^2;_=Jo"<NS'b_Ert=/Pg^%8eP2.`H4_N-Sa)dJ58`.,SU%t;&u-=1_-AaW<)NGLue!D:9`c\U=jesEDKDV8g>Fr:@fgOc2f>Lj=Q7[TY0[Vh^[(]k(l\F^.G3^%&lgBDP)+:=W=:1P7AUZ"$)BKMfEV`+h@^=:J1?e&Y>F>B@%bXeA@:dGgCjMGYU=Ha]FP+I;1c>DKbJFl6P/?gVfnE^Jj@hE<:8oD%*f$R,!*,hkfFtkIOfS^bQ)o/8$E(*BL^a?bl[bGBD@,0.5S^Rr&d?S>;D>sIp<-DE)^&2?*2IqI[[cR$TQ4MN-uKMBJdG>GP*3c(%Wl+)8'Vlt"36H1I+@la6Dc,Rt->,KE?'b1oP^s%*=)fk'e1M9Q6!DP;jBt>-+:"#aqXe8RUJH[oI<opedH=\hd?eh_;Yp#@+fR+/%4g=csb>J,Qn5GD#%LK<l8^`FHk;S!LI=Bb7fU)@T@cN^G-VMDK'Tb5IOqY7,.TFX>4j*+)rQhi7dI0cpdfC_k;=G#`$;p.!Yr!Z"%$)'",s$Gpj!'a?W9Z\HWY:8"Pe0hPm)1<gcRF7E9CW,FP5RoOF<$n_5ZE:C]+:M:%+[]/26k/\SPsc00P^8A`@U_eA"D7965<(#$%Joac/'_]9%2oNasbfB;i11,WTR*=0`D5CY.;!$pNL;X<L;eHAh_LqB4#:%(frBq[$J0!2XV"RuD4<ln>r*CT*+"L22JAN,u+k>3l%g.POqc%)\M:&I'bq%VO-YtXeJlCbef">`VDKj]M/"?HRAY;-9cpl__>=o=4<Fj8^^4-F!of9Su*N69X%NVVO^KdkJ+5@n"FO!%9o%U1XI_:LXM^po7jYKeG_j9]E+Y_)a2[;km)Z1,[HAGXp.D>)pJOA:f(THK;g(!M"R-,cHqjnm:aRnFt)(1P&>t\gS]60.S0p)"[KB%)hl)*,](]]CD+(mW?jgfX&K-'IS.0'\7<[YCXPS%Ys:@3#^he4Lqm(8Kio;@;OG6qKi2ObT<o=Un@;ME&kc@fJVDd(%0rs3E3MsP%_<A[lj2'qU@dd<9@9/,W`N%,eRWssqnJ)#'oV0F,8q\#CmSd]IUDcTk-5E,CFVq-5g&%"iG4(X"KMbdfU;V"FKi;]I^.4#L\U.`e%Kt^W'?%^Z5&qR7a\r0Q%_O`+C%QXCB./,?FCKtN?"<OB-*@P(V&c,hP*hi$;o2id7mnV\<ZCSQuF?>U0%(Krm]k;p'k$GT;aq1lQ%-jp?.c[^A=N4Wgo"K>IS!l[^_HUAqK5o;b?`4Z8,.S0s.e!0^=@u@g87)'stA!Chk6^TPQ`#TMY$D`"DZU!4Xd.U]o4OK#-)i%)&%"=o%&-.2DrZCo`Gd[nY;0r<ke[#^kec98]f.fqtQa"<pg\'X[<,\:O*k!uNc?ghBqCuq@r`K\'Rgf*4m>q,M)Xh4o>2D,ma;t`dR%frOC,S:)#jp*>8F3L';lI8V<V';)L)4Mj;P#lCDefI&Pn54JpU`$=W4OK`qj3u0UF$<:]57`k_l,,I#rP^"Y*S?>oDF>dUpPCTo>%'WPtCfK7<jo/V.%R4#LEGlXdg+n3Yd;J1Y@,F71Pl40)i03QJZ_+B#h5#F@*og,HIS]'>4/-Ku4AIVT,O>i(BY=u$"U>1/p_aZ=G%^RR@t:KVmt7HA55$W#k0&G1X-G;p1.d"F)qnt%Q*%W`GB^b:(c7%+C1*)GT;GC_2jVW&>*'I^@u69qXaLS+HogK+HK/qH8g?(&ZE%[U#SHqB&W(%V.*k$F?>N.+<g/BTJG&-f/2QF6tLh$Iu:UoK[:,_IOY-==Fr%SH2W6Z'+i]!1@&(X\cNMKo&'0!k<@X1=ced:1liZ%.=#8(Yi,5B]GH,tTQ-tTB+4Acb:1Nj(YhVUflU($Kg0c@(/3)"jj_D,_OrtA$=ujJF=n4A/&J",j+<>->:A2oUda@f?(%,m6WB6i%M,%SmZ'&-l?R4>oKgjq84cl[ka;T\`aK:8O8=GMC\I"31&S[=liZpqNa;rP/';SA2.N)(sb`b+.Z]6HX3!4%bk^0&C*@r$O10g`m%fVsZ\>4M^Gg2]S@Jn#lp:+b.[g(IlPn21j&CcH3h0Q6L(<2FR2C#0=B=56[TS:T;m@J=L(lsV-++B9qj?poubQ./5>k2IdE1(,:V%70=_%F-7[\((:ciO]RR6^rTK>LKSshnt,V/!A#X4E(K'*Yn)]Tp3',/BdB/%To9Sk?"sb+=[/Uq&Xo:HTF2o`,DDV30P<q4X-#B)%aGGmZU_PWHbCQoCbSr=qc=u?1)ur#n!_;H*"_EXkM-)9;>d<A2KXLm'W3(UpW=R)[+kW`mVn?LH_$Ene$=Z_/PRK?CAT83eA(7sU%-"L][$;lr%o4.NOlqG0nT^aH(DF32P\8bML@dl_4:8+JQ^:6m\BNelKiSK.)CtR_WMle_YP:i?qG!m\/*S@V'3:8crHdK=B4&!ts%F,P5"(K/d["hZcCSMG65;<_rpibpVi9'mM6b?i.n2Rt("K8$EcCkBb2Fj1r[\1PVAjEIA5P<2Z;WaV+W`\/U/WGhJZN_0TsTdqSH%^3JE!N/_%qnKZngL/$NeG2A6<\7q.T&Z`EbAA^;ecCegmFe`B/GGLg0_^=cj04\=-URcAq_]E#<:=[Ip0E*kH'c9m9>LOpCUc%=[%VG3O0Gpp?N)n+E$4lEI^%@b!ToqWKaV;>^#LHN)oIV8K;J[2'9AD7oM>K1:_"<I0;Bp3aO7;(>Y.8?XWm`<Cb-(h1&7ai\I;GX<$%PO$4AUg-OI(t#C*JW*/h-d(2XGh_R``i[su3S)umaZD8U?Q1r#oMPoa2JjttW-DT`f]8(BPA8aGh=u[;_33qoEp$lB=&Bs'>U8,>%Ma`ES>a-R0>J.l%R*N!OPM0Gh@-8j](0u:6\]$X(:SqQaBB?u"_sib[XZUu$;`qrk%&2Jjo7b3S(S5a3(3c,dA`lY9]VuMGljiC;%PSgj&g4R[&raBh&%@]+ch*H05Gm)<7)U&9=ejqERDR//^P)#_[h2BQ1hI/FXM2du[\JahNL.rE?=4aFs/ab;UR>+Fu]@3I*c\"k+%nV-G`-.)Egaf:38//@\hf7pLl*X"BZpmB"+6c$fPlp^,HMsM>C'RUf[Z%Ob:3(:]^+%a<cT)b&DZ,lc)og\"hnI_^)"<Zq'(u%gF%I75GuPEgN6EAeR#]k,Q85XaU[.RT<AO6U6FSg>Z0mTEs$m9Z!&Jp:X;E_XZ3YN!5`dBRkuCSd/<YL5V4qW+2-fr+2[qRm/RU>LmA%cgj5j86gGW53hmR2AtiTRWt#X-lR7Q!J:Y'>*+2R_1K]KEq6obr[a7smOrR4r#;^2V"@_`k""O)(,06T>U/KB_)shim9VZ"P4(8k%/mRCr-%+,=,t0870L%"dpN"MPjluami:A`I!^;KsXPTu[!3>kZ"$l-7HN?sX`".B/)Wq@@MR<3\'S6XWl3-%K]8,Z7?Wg7p.BnhD%Ea9`GA9&!`$R6Io0QL"nI.7Qb"nLN5-P\r3q#pI!;Gk?p;O[o.4MZmZ';V3sgmtMOaEscm$$!F2m#Ls3/d'lX56anh"tJdhE9oq>%j(EfLSq]hBL+a#?KnPC`qZV<c@$u>@+aMjCM9/\7"$X#P'X"CnWsaKFca?UD!]i_KI!c&b_q,_gEA&F[h?A9PbL.*!V\,5BV"tl=%/3K7#'_3\6YAtq(=WWhXF=sM,c39Kr>Yp.""dM+b0NRWDK&U#X25u'kjnfinSps&&rWN:%`tuFSFaTEX,OmDE;83F2\/0*Q)Z@bm%8bcpk<.'\e.g&'(94XXtHZC^>j#]rjUD:hfaae,`fu]m]&$V+cQnJpVXQ?L<!pD]+T)_JIQb9]8U?%5:!XnhhR369W.].[C11ffh%^bpt3Y;d7j0GDMbjZY*2D#pJ\N<3Y0=0Y5m,'6Ig&gY_'QS`cgWN,(od)]1d<<R_Qi@O`GL$,mpH@EBX)>c"AQliDQk/!E.Td2nY%1L1A_>Td4AQqnk!>T$AaGCZ-KA^SX3WYYfG^iDW(A$8T)&l/^oo+c&n/4%%@H]AP<&HHR8F2L'&an`<ZRYK0eCUn[X&;gQ8rX_21%<JLk"iXsQN24mLOkOFWM!MHms<R!mLLqMjZ;2!d;L$&o]l4el>4%,4^E9@'AMVK`ZmLY*I57$sg+@sbTEZ)GQP]6u>A!/InKM^GG%\.K;A4[:SslHI*MlLhrPO=D12eJ+V]<q+#6Rd(M/!e)`)Atl7]V*lod;JA1n6,`u[gB!FMpgGXH#J!?h9%/j-9.6?Cb!2&,YDG+-%!)W9M9X>"5.?I_l`W(N5$eLV<1\$$@2fLQm!-7aq:t]0J3a?V3ia>'6[<kk$7CX]f/e$M<lLYE=FcoSG?D)UDE!%B8.qG!(Q4rYb%b\`8FKW-t+R++,cLdWmmh'TY3Rbn80]d2KkeFSkpCOQnpd47bY=%&MQAZB"*,1=h0Jc]H!X\QTS7o>W"H\-B%"uY9E#`EaHF`%k\%H:e__7gX'`E`tLp<ujFO=M&4=NY9hEUpG.cFZpJL\4&(c`s?Q*(O$:Be/l1q'[fCm.JN*a;5=5c9%djOa?tbuUA@Tg?LKR,K<>ob%d8K8?8VgEN=?IY'"]jpmYm)\<&lfq0j4Y9rld:%\eTriF'B2#LKmjaNho:ZiWm;&P[u,jCnNk=#';EcN3H1`iBjP`upebE-Rk%E-%-/;&PH,\8?"rsm/:M"E1Jrc)5#L7*O@b)5kI1fi(N.AfD/HCuJaZ,=f#uYh(':c'#%Q7X,9H*Ap]"I+ZA9*`^&]Y3JO@WNE+fNeQ%.o\(V&C`t2pgr`J3)4!e4+LRUb7ifJXf9B_Rh,U,YrG!F)^N6M&uQ(OTnn)h4qr_>6W)?\-s2"D\.jl51j:Ra*0@O]7<mWEnU)fW%KQiN\">)FKViCb?c)K.p9C<:jVZ];*PT[pCAs7n:])sd79b<"-Aa0Gg,E^_$Y1-g1=+#$bI4M7F-KuN4cJU0Nke+bY4A6_A6qh6<%*,^iD13'%=LbUKNa>m(qZEBKc_T%Ha8jFcMM^l1_&djbl^Y(pg`HfTlA75aHX9:@ZRPE()S?n:fbW3l5Qq1kXY7^#XZO<LtH&Tq*%1QTbIEL%aPOO!dK"k$Pf/AO<A@:d_EFpg<Ao%qf)+\Xd,c5Af?'sZX9>)$<K^Ckil1@a2!3$fU:gq\@H!>.a?[0C/_-=Od82sZ&o%9K=U,0!)A^\ME\+;/ON?$R[S!F%(a>'B)>]1CpYEWEd@\;U:UZZ4sq'2^+eJ[B39O8tQcV^_p^OH'WPs9Kd05*'_tbQj^&r(:t:)%]2uL)(7'N!-ISHa"BgO_QtKP]9:0?p5FBQ*=WNn*AdYi=f:c10j'e9.P&g(=)Lk8b#_h/Fr`K<mN:Q_e.S*O1Ok%$HNdDO&T;ZB0%dj*^PR=4(cQ.]g0=nDJ-c1AujQ]gFU@$3aS+,K*39@U1N/7tJ2#9YhK`;UG;>Y(U!PS*@US:V(LbWJPN*tus7q$4:5.KaDHK`PeJ%BEX_-"O[en%k'O!A=^R>1QD_$4]=h_,;\>D6S;%rR&PnWqj&ELA0`<p&+dlc8XN.[d$>oI<Dt"I5uJK\]YmrG8S8bSR!"^^67/7'%Cgc+f@LRg0<o!diAl0S96BHoKNb_iOP^8Wq,_^O[BnE9r'dj=u=DTGZXAT4#c_=GS[>76o(J)+c8l)oE.[N8[WFsa8R!L(kUQhV-%pctRF7FWIF=Z$ZN'klD]VOgfG-roaZ=Em,mV5bPIj\"128fs=1CF!"Tek":HM'8/**IK,T9>hBRSlH6!r'fRpGNMff8L.<toF^5V%73<-$3MY,lOCaLr8g^,Mj=&//+mt[LaM])D+CULTB]4SAob?AU1Zc<\HaEoSj9+\:0#s21,U?7re\WkYVN]hTbCpST)6MYX4"UYn%B@^ORH?NlbN)JT*(*gJuBJI^m46WU2($8Yp).B*Wp0p7KG8@"ZH"R@SeSKnacBS(+67g5FBaH.2`H;?^,_X[Z<#0RJ"`d=?%Hjha%+SdSK/0piNJ?>_9HrgBK$K=)dV!`L94Ji#Y:SJ%"opgaE4=SLF3/$q1#H2otNMfadmnbcKp,SBaTAfjU?GuLl".dl':T4j[-QOB-%lp.6gP-E1<97cXB#?rgFKLVYl)/(Y/Gf5STk"pff:K[`K%:SCu:d@?/:l$75$oA(SPu?S+@"cH_.uG3AQ-?Nnb[$u$Ti)tCSlc0o%ZNDgn<qp<].V`traS%#-&t24idM'!TITAmqq.GIM%BK-E\L1uDCZ@,CNYq96#LkJRZ\aT`O@:^8K#q\[7NaQd"X"WOMn*L*b_n"G%?&R\g-CU2RAtg"D+hYZQ4"RC8b7W47l%8,4r"6JQR<])Tm;O59?l;;rT9/#"9fkm^'T-P?7PdT+N/#!P"&;5t?<Ub\OK5;!"VNJJ%\si-:%/@sNoaSR@".;br_FlE'"`a]6%3qd))B0@=>is%[qW:m8LF#9SRP@*rRLnnVM/%f7YX:\=O(B(:L&:"715CjHDTGal3HLXY%:s][W)B?$3SdrdQAb`T.dNZR8/+%:"Qsf3E1T/%q/+#%=;21J+dOS8N_K.L^mB?k2e-+.H>0`WD-`",ee/T(VPq-o4R:pP+8ipig%LI6[IQ)T4@\XB+6R+`dZgSo3[<Jq?"b/=NS,rf4&ah^XneR)5Q$L%mAc!<mS/]UhK#)Bj5U8/D?&%CeTfP7lOPONCT6u3N-,eS0W%Q*c3H#]/#T0HD+!N0EEM(Rr=1@"Qm[TTTo;0CkLiK_7<uY8M9m8p_d=k[;4<&]^1dN1CrDr3Zd>es9gP),U:SHLk,Kb`QM=a<@%T%A`L-WTrK-qC0MBe-HNIE$$"t[SC$3XJuc\c1rhru#EbKHPjL*")TGZlMeQuV;'j)'B5%fRX[7;SV#i/u<*>dqJ87Kee[1Ri:6b;2%8d#6sbu>ht(1*Eo;o1V3#EW`?Z;fLd8m=,2A?Z4WqsZr'2"L>tJdG<WJqtW_8Ih/*#@\J0K[XO`Zhd)cDQZ<G.2X1jg9+-".,g`)%"%Z]Bf"7(X0Sgpm$,c/7&PS9&(`$3ZU^$<?Ee"[;.EB\E,2>>qgY6Zj9,6\$aEYbBGZ1FI*QO^PASfC0YX"<kP"/A!Wtjai6-5fs%67A8:BTZgS_6m1j,>2pb9F'X]__^WWS84#Q,kEKVKU%e^':)&UOk1\sg)3(_L,+`K(2Y_LjS,tZ]6k7hj5jRrj(X,ems_1n8gR-X%aADdOLGad'JY2Q'BDU9MEFL-JEJ^dLB6+%8"<Bhf6=VJ-XR\p>@8;+IoZIcTMF/i)VjZ:&c+MloLPQg1l8(g$<).[/NNUF:KTH+#%1e6d?b4H=gEEOd!VVr">$gInug;KY+$^S$A.qQ[4RRMNaaRPC:]XTu6j)\Q!MN@LT?rE_`V3VsV\,7u/h7DQ3WGR+i3i&^k.Z1<.%7?N:(GWS<pR`K1M0&.M%5[E1qpmK)1'3('Znq,oM=GYbl=Sa8A4ST7^0pO#C8Ga!`eZHJ+.6<'a*2@IQ/]N+<qcR"?apamW-ri$T%6.O+0,SZJc+7El]eL^/5P*G']-5Mb$H!f!Q^&@p+-q(B?YRnJm9-+Dja9C_*lIbLmf1.?0q6'n4WK:p?!1@5haD1d"Eu!&j>es'm%Uh_#*YX2S<s60X=/Z=8%lr#W-_\FG@\P0(A0E0srBcfO%<q::NPNVKg2gP&DEsH:17nUNW568bY"p?3%5>LK/GOqi-otN?R(4DE&%=_<B.)iSnZc2'mMli'1u(mdW$)C`SrO:%USi\.U=V#1Sa8)g^e`$Do<F2HWa:@LREjU!NQ:+4o;pAL+2\k$V%_)uMJ1>ZU0(WVO5%3_Rg2p*K7Jhq/TlfaW\D?ZAGaQW6.0;#Fm%)<G5q?4cp6]F..,N?e2?P0cn>D\c2T&p>ZIPrGW8PZ1tTUOtLm6tal@2,S#IZDN63%RrP`IepEta/4Ms+?'9T?6a8&e>`C/ZKNO%r[k/@I>4tuWRNSTWZnD^!.SV^Y0BtBT#:gF,PMfrhHEXDUaEhb>[oDf2Xd\ogMZ"09%=$IK"L'oC(MJe*9Y:f&SGq(_%fi5rQEFu25XlP)!hasHk0I2Z-P@$>O9R^PI=tU6L^T)/R]jFAS;C+AJl;h.("h=1,O31YaO_1"-%"^$E+8-0R+Ru)Pk]1)^a5bfO1qPXD;[6k+"_i7(Z('.NINGA9(=TQO_SJ5H<E6BN^NHaG:OJX#JJ2`(65i03HoPbWb8gI[0094'W%9XET]&hN$%;>D]%P7jtN38&eD`cG/*H"U"">>>JW,l;9>M<0"/@QAN*RQ\+c`Ugr>VL.[I$e9bb=t%bGMbm&"HnE$./Y.qRS?S#'%YbiK7[<.O^,rA/Zfqa$b#c=gK;:FdV;Eh[FdU6<1685D+V<[;mB]6=A:k;V[0.ToQ99meJ,S18/W/5uf5SAYti3/;3^O.=$9X9Uh%!r9pML'uDa5mp`4]rIUXc<@Hnm@jdI[!if#h_hZP_U'C'BOXj,RUY\(AK'ZjBkGaZ-$U@,\?r![4Co:>"gaLde6u6W-*_.#Lh_fQ%)Ic]qC["2,c;g/pp<Wsn_1"/ebYKS.J@et-,ann)6q+0n*SA[`Re`@>7Boo#fZPP?MEQj4IO`ah:F3#U]h#rHCn`-2)j0ur*lCm*%b:148\7_6b1ru#Bnun>e:WTFK,$Rh@A\c"-A>(sg'cB5q"!eLDe]@S?8bQl`"7D@"#gJoVT,)mD)OKVM'hQ1%P[=J;ql5+;M4@?i%;"M#^R\/-[r%&L15P(`LX9\g6c#6$OL9N#ePLQ'Not]cXKO7XQo2+#a<Rtfa\j!sSe+?N2<D\Le0=!53eb$Dd.`@$sqLhu"k;l'+%<Qq#/XIlI&1/IEnEZ_gPd]32eHR?V5@a\=,Z"N-_7F.k]7JKk6ME\El]!&on'E:r)Fb#q$pJOst!\3/M$e-oUo#W(>28Hf,+RYc&%d:I&p6<%0`!`LQBUjl6m'oS1"9p?fsc=n3C."j3><E*?1,2uNG(lRH?VTo1^*kEIWR"#].=JfIM#<OJ##;&r.W>r7?c`OG\j)?30%TF#&lS-)S/Fs(GT!)\@d&BcMC*%Ac48Jt97FY<*>5kQk)((sQ`.Jj=*4Np'$Htf@S@HnHjE_5@;,@1Q'!pdf8MdHL:<(iXKYcCU%%3#>8MKK_]]76pOD;$^;dV%pNR*uN<9!2X-0W&]#'8FmCmcN(EcGR5@F)_RY*9M9L':'2[Zl[iEVha!JfhZ,!\'WU<romilKL$Uf"%A`f!iE9"MpQgmB,Hirrd<?SKU$F#Pld.7q_.@EHG<<./P"fZPO&0Y1abtik4A;/MSQ:4Cm_!U@f?,d,@@t<dc!],DW!:.c7WBFFG%Mq]IQEs$pr]c:ud!2;3kQ4%!Z9=tD-RU\V%c2[nrDQ)ZkTGSs"0*"A44?uoPgd]/9,5)/4qB[[b0o&18>,!OpP&X4tU+&0o#q!aI%5GOAReXreX!TTPQ"&NBk'%J?4T=D'QVA%s:S]k^pX9;E'-LlXq$;pr&(pM^F,bblbT-9,N_PdSV/i82p,"m!rSf7[-0QgKF$<e?4%`FTYYWD*\Q<#dtq!7@>@MVcZRYjAHQ)F89A&Y3WQY/kYe5V:7^Wfd5[=F_/4*X#GjcIYB;2aPW,-*BX9MB`*OcjIa/J<4I@%+U2b%ROF@"E5aCFG,:Z\,bBnK"'C9nLO`96I`CY9J<2/($58!?E#&3X<*VAJ4b!Kk[M#!*17UCA";CDj"u910\Y@4K-rABm>b8-L9%1'q%QY=j*$c*+4a=G<V,CoBV3_2k#0#NrF'eRk5'fqU`g]0a1G$Y8%9gb:JAPHI`MK,Vuc<)S]fb]/93:'8EFQVC>OXrR6aF[M.<$rY5%4Tc\o64X*6k?nHg!lgXqp_&dg4oS>JDB92b#r;+8oI^.FYN+5,FQ8\JqSI/84ZDq'X*iqY?4Fd?l`5`<i[5*)HmPe.`Qg8*Z@-`B%XQ99<3)bs`*/cJ4LCD;b!,4H*<$Z?6f&XGJP@VpT&JZrl?Xi(2/glKq=!8#K$Q_&.0<5Em"g:Sr`N^tX7t$Q.k]l!(Tf?ZC%>T#p%;K^.T="U3+>P:?A'!+N'b:'L;/(lA2bq%JXYUo,aj[5eSlq2Tt*Kl@gL-r&@T,^cuSKr6D?4]Kh*isEaGg*d>_,8]N(CW`<']PIn%oLA%M*(h%oFE),,Pd89%Pp&ng#&]0o<uNq7%8=''V\/dTNg#InUNW#B.(G(F!CfXVRY_ki2JEq;Pe=rVQ6DP,VgLs:8=EKrTc.WS%CKuIrJoQ\sG9ap`.<J7$E<[GY5Uu&d#0[X^@U*4nGejfd!lJ>Yl7_L*/_?>/ah=W_=[9M:?K]N*9@tZNgPnkU'd6*b:g\eX]*tmi%7K!jZS9dZC3;#o\h4f@4DCf7XNTS-Q>@KDmQG$Wp;dSRoDbO[]HUuV6)."bM3\&7PLho#7XU<0n,MB#WCH%K-$D0X08Z)p`-b_/9%G>a%$$7NB>AN-n'<<:pL#V>D&BK0QKQqjF;%L'+<7])NjZ5]2l1<j]I3lj.i0bc`=4Yr6FXFP>L3-Jebiif$1;Ms9I(#'tL<&]42%N6H6s@lHktG>ZDZbe4X04ql!PEPIa#03Z@Dh[Y&Z^)_M8;!c2T'YDc"3bX2+,h%UKB1/4f^P"#uSgd`9?.8F'oLUa"YpLrng`hL/%BZ:qL9oQ6`6R9:;'m>CA2nGjr1@.K^a[(g?d,I%W=l9nMEI]peQdPJD@d^;$>]GdSap")V8*I!m;_e$3af)]^8Ght%6H2d=Zl:&=%&^bK,KZ%--Oj>f3m=sHOQu+dV^]WD1`-hjRG*>JX<nT7fS&g8pOj?*&mY7!Rk1bk(Lkp"/#t861pL4H6U>AJY%]8#U9Mng>2bCpg%KY*B%)SikPR$*-USk8VaB&$*3=huS=F;-Jb7WMiIl#'rph3S_g![c_t9I[ZbA"(Ih'2/tK7O@8bgdi?6),;g#Uq;b*'$RtWR.=uh%fArf@0ge86,<@O=Y/sD_;S`L8bkj`YLtRQd.Bh''dq!V##0lsT@cd0kYP<_3eCS(70,+4UGaVY_HgWC=o@2/YWH\JDcEYS`'`_E0%]phRGp/3T\8g#.1jL^8)6-"FC8t.3X\1m)8+<S^R_q,moPfKT@&Q$$R1*=A]_agN\Nl`Mtbe)i1'Sq)pP,3]mG8!iAq^#$4B`o)C%"nJ>m>/\&m=a-F)GJafj1\Ye*'ntmrK4A<KhRQlga5g*t@YTQGC[s/ZgbjJNplcjM'nCQg4L,1Zh8n%-be4s#m[T,X!Sf2bpS*[&%D&Yp&&q\UjjCYA]M)`^!f='n+?:cHZ>:GlKVT]9*J<k6EM'RN--RYmF:om&IETk55.Z1Ee]Q-[tCP5\3R%P$^e\ofjar^hW]mO6P%TVhbhhQC]cc6G846,1=m#dAmH\B]lrQ+^K/"pT$SXcWdG^mMKA*<@'=OL3.+m?\n*Fnf1(/Ouq$#+B';ahQ-?@^3@l@DTU(`#9^W%!/1i`_)<bu-82%WAs'l\J\ih6D??X(%lgn!b%)90n"Y(%@#dW9M$AEs>E&.H?PG;+A98.cUjAGS0noe3MXaP6KOT,/&MjOc?Xt*X%$reRR)P:D*;/JEcei,9C"U.fkm"cjbG'ku0.nBIA]uF8dq'L31>"nT-%uQV]IX8egBOmg[X(/62m2<m15=&G0LUK>s(+^Yc>4b1G%-c=s=8%P-,!o&I&]21BO:Tt\7lm`C0_h,>p(T#.3@&fI"q;QTP(ar&ce<9ER2#\Z73!iEX2XCAG7AnE*+#oLAll5VI<LnlTh]"+S%fYPZ/Kk5sAqG0KeTP@W]W5W-F75':^6HW1_j0$d/1BCH,lR9,_&*e+g/cGU>DM#hlfAhJe<mA.h1f_`19G>)DfG#$uMg4PEh&Tm'%:L;XV5`)Wj"IqOVo6J5&6Vo"ohHcUY2GgrN""^HmpZeKNFg/$+Re>JsK*Cm/)#/Rl!8=]3*RfW=A'&jQm,eD/`YR)$:(0n6SF>Oe%`WD$4Ce`<@$NidIF4A*!7SlT<S7O8O7JaM_QO^67-[4fC2>Jn_NI,bA6%N"=m93dLlOM3&(''fFe[[[>M:?O'/f?3JhEb"SKSulm%fL.\<^dDIZW+q<ZEIJ&m"7e[Zs$aAa]q_SS5b>d?'sne9K"38O&^(6UQ?kPDp'j^@5S9I_$:%P(*/>EKreY0t(RNPNcF3i^<&U[)%V!M);5''AF!H^X^6Q;&!(*G<(s$aMMd6NhUdfC6GptRHfjhE3UVf#WP)fRa'_;^d\T)T2q&iN!co=8(^/"g'K[kFK+!/lF1eI>F$%`fk[rLFZ?a_4^YpO0gZD:-C.3i+T?FBa7csF7kcmU]oh>(<Z2_ScPROR5s7*4+O4Z.+.oYZ$5cUqHm2>O6!.l%2@?;`+W`XY=dL;%dFnWh"uFofo&''=TR_h?Yc>U98<58DMV3g6o*uN>"]B1Glisa,*,$o(e1!?:StuIfLcp4MiW0g;o_gk<2lJ.#'""_EXP,Deh=q4D%lr_N5/cuRf$Q+(aPSlu,GmB8KPOl2j!rXI5mjsLI(;M`!s$`<+_*DEN7/2Q_Zlq!I@460gVQ)31E5>61HM4e_r?eH^/fks:regj<%b+"sDI7_2'e!m!cE<^l(>lJ@oZtJ&GCd;BDillsH0l-b?R>KAq8Zup4\Y%lo/O[;9ao;P3Fff)J!@q;gH&rJ91A4k'`de]S:-2EP%d"o8C(`<c`Ec)8E!@>gEG`WV=U+E/geR0\5I5fXV@'@>OeR;uE:l2c,),u6R*6LTX5RB1\&!DN:9RAo?CuhnOPQ4>6WFqA.<+=T4%C;<H-4mjR7/7^L.%#krXU>N"e^e30Q1<9YM3Gt*oTG$j&B`hDADRP:+AS^tDDH1>B'&-`8"'2]E+=>cL+mU?*W!4a!mhKN?O`_6q%1)m=UZrNlP9$DW>%TphaYJpSn\SfrrTFkmV3\rOaKYCOGJ;'NL<e1H)&Ynn>0qa30=5Dtgp"AM8HiKFfJ%WMk<uN>Kqs*:\_fmb_%r;#J^"M0)1q"hsj&-!c^hL,%hp!5:@0f[s9L4#W.Gl@".q6Ts"cX-N;fKYs&m.0Z+WSDmll-3T8j#nZ@X%S7MQU'$neOB9!Mn"49%plA5fl$&#(2rF1`iGE@aVjQZEkXrle?Im+39>]6^_c'+IHoaKjH4@fK('d+(1CeqsCR_[\cWG9FdVV<Thh6jfgo+h"2klA6cuE)s%jH[.c@Td9&UL_hFN/rU]g*X2:9k\OYcl+75L5""6-Icj;7dbPefe$==h?0t^"a\^-`[B+EjaGR)?O1XUdg`c\,H%aO2:$Llk-W5e%mu!f;.?dlVP#3bbK4]iU,O=GmV2i0mE[t@[Oe_I#H&@`4S2;<(D6a<Y;;r!2nnW?,"'ub>E\*\XWGP7q08G\C3UY8K^8(,kc!-_(%mV*h-?E<4$2BUU:9HJ#Qj$dkNIia0jBYE+F%)-tb21J929t?rlXfp]\d?<Y-qt]JplqbW^L>l$0"aYU'f21I07Os,0f1_oXo6RA[%(]"]*M75dG`jN0Q8,b%r[.,WM#u,<M=):4N-M]H3VDi[=>rfkI'/h<=c6^l#4j,DQ6n;#@<+aZ^@LXX/4X-(JKZ;<SZ433Ubco;K%d=FGk_E/uGYO#RK'8fINZ'0pbUcNSQ9.3uX<J)<t4BoYI'.e2rFC`]QM_l4Y'KCqpjKmWB-Upk&4/rtFDIOqY,BS=t6R5?6W6R!F%c5dO;G_@PY0=`-Gd2hPka:T%BTE_SXit^+(!;d+Oh1b]dK?r):lG+DQ;(deXL#91aA7I/`</_ZR7:L/u!+laR<hrEULfIE,,&p>b%F(^>0?9sVLXuB!intrs+`#toirSXNt<Re*D,4-RSif\'>%Z.jOVlBPOPhmFP4D;IE<pt.?nF4D^MqbM;O1SZ#F(=3l)qp0o*<+c0%!m)NRmb%K$20')QI"Og[Wn:nZQ2`'kPkkl4N?(I4F<q,NBW<Nj`'_6SB>-\(IZ69C!;comCp!Pf2CL.fbtorZc%MG]7:Yh&p-HX!%3=G>os(uV*Mfi<k4neMd>4OLUo^MmnjCrna1Ittmq7b`55$k+t-B\="1Qb1Gqsd'q+[<Bi_`BC=^hP9h('9OA<6/QQi:%OD.A1VN%(buaE),!r$,ckDtm5cU/)/9R+hT%B!'Q55EW1@=K#[E'p:0:C7q+IA&H0lLcF8No.Fm`r'4aEQWn2Jc,dqhd8>[o\`@F<ZuNiaTf%11uGHg#G>%5I9W'DC?CTjYLW9Yn&8Cfh_K=RUtS:QW-KS&fjND%Ef0L&s?!1M@qj4&W.5Q)st[oQ=+c#:n_[)"+M(YT.SB_:SH9*%jRMXePSU>_/$NkWfkI*(5D?tQNq$mZFlY4'L8&@5FAeelqR6b]gV`Vc##,Lu3gW<_jN-)7$g1J:6C1XVrXt_LlWiUhSG#!n-q;K0%"1p)4&3e,3^^f]h8E3+C@?=fY**>kh,5E@Ob\Ft'FX8hS[Be`S'J'eJ&7('=)6/=S.gH>gO\;DnHcVGF!`s'6"rg97R=bZdC8gtM%Nm8)C,F4uhloaobP+0DV)PcbibI1!:UeZ;<Vk[<LE1&Y#Y!rpVkAmC07s;RLH_fEdpFH$X><J!;I7nniT*`[[%CgAg;b"8FYAZtb%L2/p&4J';!qKVX701[/K[R5D<O5T:5,B.Ve&W<^7Mg#3r,rUXk4hoFc3S!e&6N5htn"/>E_'.NaeZHb?IE53n7PVHCjk[V[]Y0&=%"rkNdFC1U2`AClY4HA0GitX,ARqJC#7_,1]Ds/]uMTa*H8Xts^Y&6R_lG7%)N(HUd5&<6c\GaZJ3QWSV&Y1\997o$DATXqOgk]B&%D'qU)EqsHqN1eQG2+F6ik(7NV.)cMM6;^LX4B5FjbW`.3I@;%=,58&'lELCn8U@.0C^_;?EZo&,T4fr1qj&aSbG,2sr8uMi5GCV\%36J=.a!+D6A<'pZ/RKEN!=<7M7gp0TEfr;+jlf):%_@Z/3g*T997L>G_T&6R0IT#8RD:"@>,X[i]+T8B-W)P77^<jdCHf@q1:(RU%B=>k<B*,V]ho;pdJ7[0p7*K>0CBB>n=_I/+euZ81q2Ahb-qB(cKng7l,>`P6%NUC-nd%"Z0kb^lDKX($"FZt;bpEcl93IeS#XZ(`%AU_a:Af(3c/oI()R3PhBgYV^*[(t'F'uW?Qq[G-#H\iXEYMNYZD[)^ds7K^2+_^DXju&5\T2,f'GMXaoa:$f/B*$;U+]kX[ceCA'%H4!gfOK":hahZ8JKF9J99\4mSfM]Ul4d(EU1E0D18%5i>n]53L=O-`L@'I*cjX(dX#ZHc!kL7pK;bUJVa5MC?)eii'"ZIO^^rG!p%-3e&tkSIr7O>q8#.1pL.nOj4Dcb+@D'uRSY84O^7_fF&#M1P%'N]!".gpL0C!hW7e'2:3'*BXhh_r"!8PTDiN(:<&:@:76[n$1\V%[F$uE&k45-K,oZA@/,[*l._e$KVa2nD<EW./E_Ca0VhEnIY/"tZ;lq#kL7r!;WK'`_tT[HgoXKorl,,j76d06KJUVtItPRAA.*eI%)c*3!?p+;(`ach!rPj[cU>P$`Bk!>PnG+muYnZk_7m4q=b57\SL.b^s"BiUtlJ"Tf-h5DOM4ZSuE<0cm$`'*qTD@1H2'9T1aZC;k%<R1Cs0S+ra\0aljmNBOZ3E$_eA(hif_tT\og`3i&/Tnk_`o%H#P"&`NP/D^W?48m$)`m@ab+uX:I^ef2T*DB6CZaeSr88[.nMg85%mt^ghj8Y>qFe,:BKQ1rp0Mt;)\=ZB?crb$:AP7n3UDo_/V+k*ME5<c8Efe<qn28&g34\6irZOeio4_rKYH@XGO2L_]2o<B]=`Ao3%#oD,$/+^OllXmRU2kVsR*9N2.@nMN/igSc_W*a/@=.Mg0I5kC*$ZnR,q*m#ar_<F!SUc+`c;P;.^OF@d6V[_inAqU`2(NQ_^#(l+%08SE2E<6a]3+HOY,3173m!6LcqKt%P91p4Ld/XA`!R@Sd<tI_nc+L**5(1C/!iZI"D=J$h(C+<2^`"lEDV%6q&()\Uc>ngte)WCM%mZ?<Xr6M8AP=C9&gWZi[>*Qce88n'Yh@KGZ`r@QG:sjV'7lGN4S!Zl<9YHgc[r(X3L#\q]+0Ld$8jQoL'X@D='NfVH4=2CGBeC8!%HJI\Q>]ST\jCWF+'2)1UGgqA9YLNFJ*j7@Z1g4-=c)rm`,)prlO*kNhXf1CjMT.bI;>5GgC1]T6a#<fX2V5f$b?MrNpP]K;L'2\1%UPbs%)'oJL4;:q5mK7IkHaY1UcSYPk)k2Zr=m+7cU>[88gG1r04uQQ$31m'3,>GdXduL`*;Rt/g"$Xmb%oFA?]`)n._m,WX30.YL%jW>0QN^B4)Z*rYD4ZH3do8/&4DNOpKE!Sm#pc"ksN'tV'h)D(nD%l7#b]nu=)5Hl1.e+k8bW%iN%4G07eZYAV7jVTSNsi@V1?^El%JTDZfPu7'PYMJ1V`7n0=05]..(8Y_=$A<B/[33^27rte/c(Z-g.s*SWnjUQ,*RWN+"QtRW\;S!Dn=A`YDa0ZK3#=QgKF]cu@oY#(%MH:d)lah575<C5SM8(r*Th95C(DTH(L"c$flmRE"I`M(0Q=$4O7gWShk.MT(%*,5W9FS94O,2qY3[dNVF;pT'm\<WP$#NBO/i\Q;%]^ojRjkGC1+-RAGN.X71S53(aO_T?)EOtp/N8;8)YNe8Uh#@0;V/Oo=lTkBNhAegqegN0aoA4'f\$R"mfLk5Ofk*]4T5A17G*MLo%oO%(IDYF,$2Z'nl;2E8ePt!87)##-J$K-rVUETR44[#ksV6X6HU`[*.*qJ4ENA";IK[FaCG\(SK@JS3Bkbqpa-+j^YK:UtSh7F27%L5'XJEAgd2+U-S8mC9b=1=(B`99^WCBpCYs=sh",`USZndc0p=Hc$0epO3fl17o:8RBI@pgH37?Fh.G;'(XR![&Zj`fCu,U^6<NG%^6<O2#Yr7ul6:\\KYP]%i&AE!kdWiglFqY1Ni=&F.)=0p2EF7c_8/F75Be=e>QYN]lL$Fbh<AjU-U3"Pq9.As5!-N.p@F4>QbUn6%55F.NJ"*J`4[-ht]nGsKI.>2=kO[RQ^]"!$4d(7dTC_-!5LPTg+#7]()kr/I8D]1uR?l)'[+&dq6R\#-RAtE"DRd=&pjnZ-CJ(V9%`FUbc72Nq8MhXmC,:A`ALkplHaDsO=Ko`5,[W2pc#>_gb^&9M,,eLRoJ:l*,WSdQ0_!=Mp.h\Noaj#E0)%RItrm;I3#<QTB_QQ]G%N+Mu+$Mk#9+T-fc5T?\2U5!RV^\$#8.7:J3_YG"5,dpa,+H]3P8O?="mj('Il\0J!SaFeB$IPqpk:nsqG)$Y&r)GW6=GBYo5r>9u%k7bG]dZdDc(ljRk?Wg9[m'C5#'\6c!q^@?Q-(Ar]3o%r+"jT,b5G:*I%tIGL>r9ip5D!G-/0@lFM4@P0gQ#3CrZp:_K^Fbb`AlA_%LF5Y\MsVp(-,*M];-f'V"^W2_b43k#9"e]M"bSgAV87F,U:..ZL.rknJqh.Y&j'qI(YX]i1>S/tf9oT,;Ci(UMrkcE/[Y>sr7OM-%(TIoCa?mKZ>.JZ#[ZiQt2JtH.EW$QFGcpJc&M4n,g$9kW<YRFXb_=#sY;gD=/1ENB&0XYEm6]bbT\@MY$dU,H4s:PB-pAP&9*!@Q%Lludl"m/TN4eV9h+h,*^!J7m@m&?c]eAeU;oG5`jVgq#IIPM4BKP2/-rKQf#^k1cVmBDJbTjcuj5"H!%B11@f6VFKg$5'1W^22=f%W#jSENY[.Y&FaDYr"KS4)3d*('!A<W6"IpR!30_7["N22(8JZFV.*f*p?=2X"^Xq07dI$F43q3MFZ+,9UMj!j:I.K\UUEZM_+i.I%cqk;+rSIWE,Ft4dWLdc:dtnTG!o`XY)FmH`U'kYL['T9XdK*?&i(m=+jq3""f3"jM[&e(qg>s8Sn*Fg?%AM$jPXfpF'Fq`2r5c:n%d&qs4hSlR5VK!]RL(NnSO,$qA9%*_i58lm;T?mq%:WLWs5bMs*S&0mBU_Rlp_SM-bpeI&l/+Stl"G[Sk2F1/r--6h#'3),ke+b-+%bGOJ(_c&ijX,4r(L/-Xr`dksoKa)$emBE-6>1GauElmkK2l$f)E:!1Z*G=(RT0HW,7iuEUj"hg2Ir$s6+p-3QJguAHg;f5`^knF^%0K"h!jTP8SP1KrenNtacRhR>ks,NT&';Z%!^Z>'=b7TbD5)[s+TX(5&U#Bf8dR_'FR\66Zo(p/`3(,pD8KfUk7I>q0Kq;ZBqER)j%8,FB4iP*@gc0K<G_FM,KH2Xk;s1S<]pYTg1/i&o3&/cp+*KODr1icWWYa/s'lY'OZ7@[UedbVS[0:E^N$]&fX&MOJfS9X02Xq'b?%6oZ^(87i@=enlCQ9[hh2+YU@jJtKa+E:1l"bF8:!:cc+_!`s&;LZ_j=-)cJJK,obrfl/'bG[i%tW9u#>Y(Q$V+k.AO0!70+Qa>aa%%r/qG)FYo':HH+]PhrGhJb9m7))6Ggl'5PIJ;_VYVoG1HB9#62Pn`mfKQ6Fo9Z3>D47cco99_fkClTi.?m=@j)uT//f6fb)[NRIU%i_G+`$1$5Xc-P;%2%Ekb[Ao-ZOYC+;8Y]kt9THhZCc?@`8JQ5,@#k]T845Eq6k>fPB&Gq4-mcp+9+*J756Q6gHODJd&9,"ec>.Qg%=,W;JUJ6I+M)DhkSJ6UTMFa-O10as9gArlAC.XqQR[<1ak7I".o2USp;>,D$<[V"e!_5%Hj$ZmgV,DgdW=FVtQo!W@8F5-;VQ)YS%Kb61(2T;fXfWDGO2fNHQ^k`&oMq^BK#qK1eYT8mC8Ql:WnQD$^+>(Cf:lI+l8P/KF1Ns:`jZ'/)-u4!eC.[tn,o4MI.Sj5LoA]TN%0;@U)S:"k4Jsb<gj7#YGgo=V8o!u,-M<\ip-QF-"0S[BBMXNtfZtWoA`U9-K=?K6j(8ZD:6d<G[X.VNTK=``A3psO])WiT%aITUT%WG5FAM8>4a"H3UHE@.,/2,'dp)t"['.$-YFTTp(c,]+01^Q<9E!TRW=$)n9?jFYLA$`V31*H%`Rbaa`_I./mj<%M8lK0IJr'-A(,%iN6dKWX-28?>E<qY2L9%q@cIMUR2V+Xlk!Tjb=h:Rg8Fp'MRL/CJBQp7Sthu^hXcCn$msT6*S`=Y+hp-VTPgRQ0qpZDV,UVL4]k6%Cd*9p`o7B(P2Ustco;JW2XEUE;s?Y0G[9WAl],7^,QoAs;h3o1#7o;6Ffn!<:@MZ@fiKiKR[m(^UPnW!*,Q?`^XgW.j>\3WmPLR-%<Ot]paZK[Y#?6GC+H;T>169f7UdK>E]u.e0(H8Pn7Om+8bO?HaXCFq_p!=J+N'?HbQrc<+Ie?i6k[&0[-b)CS@FE&Pp`@V8l`[qu%oj`p@lS%YRop9jdqF;4`qK7q'DfSY*Dm\d*7pYBU`ujRBLH+Pp7oAOI]fTQ8GK9%DmWe]e*O"A4j7U#j]RJIj+!KLkot+PCIb+rL%iOJg^>q^SY!,C-SHJp)NiI5_6Sp&)b02>;,s#U2Lk8-A>h>d'8ndg404aHVepHLh=jlQHIk794A5J=Z.hhR]u(GB0eI/"eXh#-g8%i>"q4\9[c)5Q;fZPf8eMH1L-:^,l3+*h7AW~>%AI9_PrivateDataEnd