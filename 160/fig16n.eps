%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: fig17.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Gary Westfall
%%CreationDate: 2/25/10
%%BoundingBox: 0 0 507 374
%%HiResBoundingBox: 0 0 506.2256 373.5024
%%CropBox: 0 0 506.2256 373.5024
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2010-01-20T14:52:13-05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2010-01-20T14:52:13-05:00</xmp:ModifyDate>
         <xmp:CreateDate>2010-01-20T14:52:13-05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwT82tQFnZaCLvUJt&#xA;J0C41VIte1GC4ks2itfq07pyuYmjeFHuUiRmDDrTvirB9T842p/LLypba95hntPMd0ioEOqfojk0&#xA;lu7Qz6ndqY54kWHjNQENI9BxauKvQPJnmyW70W3trWK78x/o6KG0ufMED2PoXk8cSepPHW5VuMle&#xA;VeNDXYnFU+/TOo/9WG+/4Ox/7KcVd+mdR/6sN9/wdj/2U4q79M6j/wBWG+/4Ox/7KcVd+mdR/wCr&#xA;Dff8HY/9lOKu/TOo/wDVhvv+Dsf+ynFXfpnUf+rDff8AB2P/AGU4qgNZ8722iWyXWr2E+n28jiJJ&#xA;bmfT4lLsCQoLXQ3oCfkK4qoal+Y2laZfRWGo20tpeTRGeOGa409GMS8iZPiuhRRwbc7bYq1L+Y2m&#xA;R6euorY3NzZM1sizWklldBjezLBbcRBcyMwkkcBSBiqap5i5Irfoy/XkAeLQUIr2PxYqu/T/AP2r&#xA;b7/kT/zdirv0/wD9q2+/5E/83Yq79P8A/atvv+RP/N2Ku/T/AP2rb7/kT/zdirv0/wD9q2+/5E/8&#xA;3Yql2s/mDoWiRQy6ws9hHcP6UDXCLGHehbivJtzxUnFVW/8APGkaewW/intWMckwEypGfShXlK/x&#xA;MPhRd2PbFUFafml5RvCgtbn1nki9dERomcxep6PPiH5cfV+CtPtbdcVRFt5+0651i80iCw1CS80/&#xA;0/rgFv8ADGZUEiBjy/aU1xVMf0//ANq2+/5E/wDN2Ku/T/8A2rb7/kT/AM3Yq79P/wDatvv+RP8A&#xA;zdirv0//ANq2+/5E/wDN2Ku/T/8A2rb7/kT/AM3YqoX3m6xsLWS7vrW6tbWIcpZ5owiKPdmYAYqh&#xA;bf8AMLQLi+vbCD1Zb3TgGv7ZAhkgBFayqHqg+eKoGD83vI1x9X9C+WT627xW3F4jzeMBmVfj6gOp&#xA;+keIxVG235h+X7uxe/s/Vu7OOA3T3FsqTJ6ALr6gMbNVeUTio7qR2xVk+KuxV2KsR/L/AJfWPNNQ&#xA;afpy641FP2U6Hglf+Cb59sVZdirsVdirsVdirsVYx548o33mCK1awvYrO6thcxFriE3ETQ3kDQS/&#xA;AHiPNVaqnlTsRQ4qxzUfyZt7vWLWc6g0mniCG0vln9drqS1gMxFtHLHNFEkL/WWBHpFlH2TWhVVj&#xA;2tfllf8AlbS5riHV3n0q81DSWn0go8oa7l1myJkMkhuWk4qnEFo2kYH4i1KYq9rxV2KuxV2KuxV2&#xA;KsQ/MPyNc+aoLMWl5HY3VoZRFdSJO7xeugQzQGCe2Kyx0qhbkvtiqG8z/lfb61Hb0v5BdW8V1Gt9&#xA;dItxORcAFELngTEjrXh3G23XFUk1T8lp9R4ag2qC38w+vLey3sAnSD12uFmjRLcTURFUupkB9XkQ&#xA;yuKUxVMPy8tLyz88eb7S8unvri3j0iK4vnQIZ5U09FeVgFoC5HIqJDSvTuVXoeKuxV2KuxV2KpL5&#xA;z8s2/mby1faLMY0N1GVimkjEoikG6SBSRup6EHFWKt+VV62p3d02rhbdP0odLgSGlTrN0L25jvqu&#xA;y3MImRVWMKnwbE98VSmw/JXVmeR9Z1e2v5NTe2XzDK1tIz3cNlPFcQhOcpSElovTZVTgEpxVSKlV&#xA;UX8rrvyzHrmpWGsSJpM9jftdaSfVl9SR1m9Nmmmkd24o6VLgtzUkMA7DFXq2KuxV2KsN/L2OD695&#xA;rlXeX9NXKOaqdgEIFFZqde4BxVmWKsC8++b9R0nVxaR6taaHbR2D30E95CZ/rtwsnD6rEodGbj8P&#xA;JYwZG5rx91WGXv8AzkDquhW0cesabaS3TJHeLMly0KPZSz3UPR4uKzqbI/ByoeQoTQ4qi9R/P7UL&#xA;Di8+jWhLCVksxfMLqSMRXMscsUZg+KMfU+Mjfslqb03VVdB/OzVNd1ry9YxWthZx394be8X62Zp5&#xA;UpejnbR+mnKINZDk/LZjxptUqpfd/m7590KxuNe1KwS40WW5vrK0a6a3tImuLe5lEIgkhkuJeH1e&#xA;2l9Q3Ecfx8eJNcVXXn58a8s9vqEem2q6DJDezwpFcNLczrZTJGdzGsaKwb9nl1G4xVS1T/nITV9J&#xA;1GSOXTrLUoPTRkewvOdsTFLNHKkNy0a+pNNwX0oyo+y2+Ko6T8xm87fl/f3U9lDYtZa3okTRJOLh&#xA;Ar6nZyAPJ/o8fJeVG4yU/wAoYq9jjjSONY0FEQBVHWgAoOuKrsVdirsVdirsVdirsVdirAvKkcL/&#xA;AJp+eHYAyxNp3A1+IBrJAdufTb+T6e2Ks9xV2KuxV2KuxV2KuxV2KpV5s/5RXWf+YG5/5Mtiqa4q&#xA;wT82tPF5ZaD9b0+bVtAt9VSXX9Ogt5LxpbUW06x8raJZHmRLlomZQp6V6DFWMXWhavd/kXaaHdW2&#xA;otrulwWMn1RBdxvvKpjhYxkLciOBqSR1dVI+IcgKKovQ7nTfLWtea/Nl99clSfVTpYt7dJpRVpQw&#xA;f06cTvJ9oE/yr8TUOLk4ccjkN70HeaQ5tbijpI+GBj4pgmonlv6vx57R26B5b0S70m2uY7nVLnVD&#xA;c3MtzHJdU5RJIaiJaAbL/tAdMtxYzEGyTu4Ov1cM8omOOOPhiI+nrXX8fMpq8cblS6hih5JUA0bp&#xA;UV6HfLXBWvbW7gB4kYDoCoPYjv7MfvxVLZvKfl6bXINdlskfVLZSkE5LUWqlOQjr6fPi5Xlx5UNK&#xA;0xVMltrdChWJFMQ4xkKBxU9l8Biq5oomAVkUqG5gEAjkDyr8674q0sEChQsaqEqEooHEHc08OmKt&#xA;C1tgqKIkCx09McRReP2aeFK7Yqw383bFJ/IdxaRKY/reoaVGTFVX5TarbKWUokjcvirUIxr2OQyQ&#xA;4okd7kaTUHDljkAEjE3R3CnF5X80X0S6Df3E2n6PpX1KTTtUtLtnu7l4RWVJyVWor34rQ0NG7Y3g&#xA;zPpJqIqje597u/5Q0+P9/GMZ5snHxwlD0Rvlw/g2L5M6zMecdirsVdirsVdirsVdirydIvPUv5m+&#xA;dU8tXFrbwlLYXD3aSPSY6fH9XMdF4VDVrUnbqp2rj5hlJ9BFU7fs6ehET+YjOUuKNcJFcP8AF+Pd&#xA;Vbs28s+Xdb0++utR1fWpdRub2GBJbXiEtYpIko7Qp25N8vevY4sUokmUrv5MdfrsOWEceLEMcYGW&#xA;/ORBO3EfL4+TIsvdU7FXYq7FXYq7FXYqlXmz/lFdZ/5gbn/ky2KprirsVdirDfy9ktTfea4UkjM4&#xA;1q5eSINGXAIQKzKgDjptzriqZ+Y7KWK8tPMD6pd2tho0c813p9svNLhSn7agFjxp4H2p1ynLHcSs&#xA;gR6d7s9DlBhLAMcJTymIjKWxjv0P4875IDSvzO8t6hMQ63Gn2xgtp4r2+iNvA5uzRI1dzQtX6DvS&#xA;oUnIQ1cJeXLn5uTqfZ/UYhtwzlxSHDA8UhwcyQOn7L3LLsyXRuxV2KuxV2KuxViH5rGIeT6zFViG&#xA;qaN6jOUChf0va1LGUMlP9YU8cVZbHJHLGskbB43AZHUgqykVBBHUHFWDfWNS8kf7jbLTNV8xWcyX&#xA;moz6g8qytG9eawDlv8R+k1qOR5AYdnDsBKQ3N/oek4MfaH7yc8WCYMICNVY5cX47qNbXKND8w2Or&#xA;RAIfQv44opbzTZGX6xbGZeSpMik8TTMjHkEvf3dzp9Xop4DvvAkiMh9Mq2uJ6pnljhuxV2KuxV2K&#xA;uxVgXlSa1T80/PETSxrcytp3pxFoxIyrZISQtPUIFfGmKsm8xeXLfXIrNJrq5tRZXMd2htZWiLmI&#xA;14PTqp+/wyrLiE63Io252h10tOZERjLjiY+oXV9R5pRov5l6PrOr2unWNlflbn6you5LZ44Ue1bi&#xA;yszdK/hUA0Y0FePVRnIAA9enc52r7By4MUsk5Y/Tw+kSBPqH49+5G27LsyXRuxV2KuxV2KuxVKvN&#xA;n/KK6z/zA3P/ACZbFU1xV2KpFd+ePK9p5ii8u3F4U1aYxqsXpTNGHmV2ijedUMKSSLE5RHcM1Nhi&#xA;rEPLF3r8Wo+ZlsxMYjrN6SFiEqghE4ULSGnI9RxGUyMrceUp2mwl89wokrm8akdiH9SOxlQSesRe&#xA;s0cHGVkERBQJ8VQchc/Pp3fFheQd/Tu+PJR1XS9W16xS31GxuL21E0sixehZRQgwu31Zkiuj6y1A&#xA;HLn1qexwTgZiiLHw+HNy9NrdTglx4pSjLcWKGx9+/wCLY5F+aHne1WSw1HSxZa7MFXRdNntZZDeM&#xA;kjLKVeBlWNVVQRUHxrTKfzMxsRUug73YHs4kicZGWERxnJMQJ4DM+obHfh5o7QPOfmzWL06dPDqN&#xA;nrNrbvPqlrHBaxW8bzNS1SJ7ocuh35Nv2rQ5LHmlI0bEgN+Xw5uPq+zsuOAzQPFhlKYifSCeE8+A&#xA;+ofH41YRGu+fbzy9c/UtWvZbV5LWC5ijmgglupAkj/XPSe3b6ugSJQV9RdzXDk1HAaka2/tYaTs7&#xA;WagXihKQuI5DmT3/AEjpzTDRfNev6hpkF7Axa2uY7mW3kk064lkKCX/ROT27rETJEeTcRQHY0OTh&#xA;llIWOXu+TjZ8ebDOWPIOGcSQRV8j3g18kvtvzJmnu1srTUba4uppII7eA2sk0rlZAt7x9CUD9ylW&#xA;AO57VyI1NmgRf4tyMug1mOJlLHMRHDuYSr1ef47kdea/5lsbU3d9PJbCU3UVu8sVtFbyTGbjYokc&#xA;jC4QyR9RIeuSlkkBZ/R8HGw4s+UkQjKRqR2F7DrXPl3sZ1rzdN5i8pSSWt1cy2yatpEKs9ozTeum&#xA;p2xYJLbNFEKPTiD8R8dxgx5zMXH7nI1ui1OlmIZYmMiAeh2PnE0zJtQ838lCpPxP1nm31VKji1Le&#xA;nx/tru3hk+KbhcU/v6fJTe/86RloQlyzObQxrJbwvMVeQLdcJ4mFrHwQFlEor+GPFP7v2+S8WTz6&#xA;dPn5fNIdXtPOGj3c2s6Jol3PqWomSG/mT9GLIaTKtrIeIkJHpcjJsN6VIAymcZxPFGO558vg7PDn&#xA;zZ4eFlySjjxxmYj0kcXQc+v9g3Q9x+csTSEQ3JuLEKryX1jYSKE9FlN2hkuJGRWRGHH4DWo/mXIn&#xA;Wjv28h827H2JrZWOAxn6KiYmMpcfdxbbV/FXXuNHem6x5u1OxjvbE3c9vPBdTQOp0zcmQGwqC1QH&#xA;hqZK/teGXRnKQsX9nwdXnwajFMwmJCUeIfw8wfxayLzxei8hsIb+OW8uJEEdvNAt3KyxnjdMjWEi&#xA;x0iYH4T8WxwDPvV7/i+TdPR6qETKUJiI4bJiduLzG3uVNQ1jzTLbNzmFpcOt5DZ/un09DcGUJYkv&#xA;dNIshkQcuC+9cMpyru5+Xu5uPDHmy2IAkgSOwPTqfJdY+ZtX1SJpNFuZ76ze4jiWQQ28kvBWpOUu&#xA;ImFovGmwkFT26rjHKZfSbH4+DbqtPqME+DJGUZbGiN6P2Ia58267DLdWlvd/6bElzB6NyltcMLxm&#xA;U2EIWzdSjyxlifU2qNu+ROY7i9/hz6clnpdVGIlwT4ZRkQeGxQ67dO88ko0OHzCfP3nWeD6zyjud&#xA;Iq0kg9ZV9CP1P3EH+iy1jr13A98tIlz/AB+poInz937dhsyn6751SGSRo7r1ON4YlaG2eNiktLQB&#xA;Y29RecW78z1wXP7+74I4snn17vghdZh8163plxYr9dSG59KKWSyiisgscm89Bdv6xceKtxPTxyMx&#xA;KQI3+G33uRptVlxZY5ALMSDyFfKTGx5y/M3y/M+mS6BeXVhbObTTr2SH65LMC4Fu8pgkTf0webVN&#xA;W8Mo8bLDbhJHIdXZflxnj4niRjklHLKUTGhExl6Ijh/nDfuFI20/Nx768NpHcLbs8reis2nzQSG2&#xA;t2pczcpZmjXhxf7X8prRtskNYCav7Pn1YZ+yNZjBIjxRBiLjE/xAH9Nee1WDadyaz5qNqZWacMwu&#xA;hbenHaRh39WliKzuQ3qxblU3rl3HKv7Pg6sQzGwBKxxdO78brrfXvMWpepeaZK95YLcxwx3NrBEk&#xA;DRCguCY53a4Lo1R8Jpt88RklLcbhOWGbHKpRlE7c41t7jusm1rzfLbzxxep9diW7WGKO3itz6wl4&#xA;2ImkunMTerH8REdDiZz+O/7ObGsxGwPI9O73/bS/UtW8z2Ed1PcNdQWEEsTmeZbEMLagM7mUMIVK&#xA;705DGU5Rsnl8GWPHmyTEICUpEgAbWUm1PzXqWo6PrNraXf1tINPv2uwiW8jpyFbMO0L8aSwlmZlF&#xA;NtsjHMZbA3+Nm3PpdThAM4SiDxVca3Br+16fmWl2KvOtW/LzXbvztLqEUtr+gr3U9N1i7d3lF3HN&#xA;pcPprDHEIzG6StHGSxkXj8XwmuKojyVpt/Pf+aZY9Vu7SP8ATVyFgijteHRDyBltS5Pb7bD5Yqyj&#xA;9Daj/wBX6+/4Cx/7JsVd+htR/wCr9ff8BY/9k2KrG0C8aRJG1q8aSOvpuY7AsvIUPE/Vdq4KZCRA&#xA;IB2KXeYPIEPmC1itdU1nUZIoZkuI/Ta1hYSR14HlFAjbVP8At5XlwxyCi5vZ/aOXSTM8dWYmO4vY&#xA;/j9djZT0ryZrKxlta8wTaheRyzm2uBbWQMcM53QGWCZviH2qECm1KDI4sRA9R4i2a7XQnL9xE4Yc&#xA;MbiJGjKPX9Xz5lL77y9+av164j0zzJBb6YkluLES20DSCEbTq4SFF5L+zTY9Ph65CcctnhIA2r9P&#xA;4+5ytPn7PGOPiwyTyVPi9W3EfpP4+PFyRM/5epp9tLd6DPw1mBbiTT2eCwRRPOKtVlteQDkAGnbb&#xA;YZYcIiLiBxb04sO0cmWQhnyTOI8Ilvfpj5eX7Uss/KPnLzBL9W88SI+n2yWt1aGH6pIfriisoKtb&#xA;fZU7U6U2q4JpVGE57ZAK2+bmZtTg0w4tFkyCcjOMrFejp+OfX07Jd+aui+bbeysIrPUQ/luTUNOO&#xA;p+slosomfVrbgyKloy7u3I8lau9QejXESEhVcPV18JYJYJnIZ+PceD+bXW/h+jzehLoupBQDr9+x&#xA;AoWKWFT7mlqBlrgN/obUf+r9ff8AAWP/AGTYq79Daj/1fr7/AICx/wCybFUPF5VaK3ltotUuUt5y&#xA;7TQrDp4R2lJMhZRa0PMk8q9ciIgCqbZZ5ykJGRMhVG9xXL5dEhuvyi0qbUJtQj1jVLe8uJoJ55IZ&#xA;YYwxthxjHBIlUALsBSmY89JEmxYNj7HcYPaDPDGMchCcYxlEcUb+rmb73N+VtvptpJL5ZvPqOsRr&#xA;O1hcy29kypJOQXqVtw4DU47H4R0FNsJ08QPQAJdC1w7Zy5Mg/Mynkw3HijfMR5fjr1N7rU/Kt76T&#xA;6z5j1271W6L29wEKW4gjngTjyijeKRVUmuwABH2q5GOlveZ4uTdm7dMRw6aAwR9QsfUYyPKR8u/n&#xA;3LL/AMm+dtJVl8m6xDbWCwTyfo+W2tUMl455K3OOBUCn3G1KdDVTPHOP93QFHbzRp9bpsw/wvxJ5&#xA;DKPr4uUBzFfjv5j1O/5VVY3yQajq0zNr3OK9upIUtEja9jSleQtuTJy7MD4kE4fy8TRkBxc/i1/y&#xA;znxk48WSfg0Yi+YgT97HfyxsPNl35y84Ta7qE+nawklmt1FbCycOv1ekRZmtX24AEcXHXdctxGRj&#xA;6hRcLtDHghlIwSM8dDcijy3+38dXpf6G1H/q/X3/AAFj/wBk2WOE79Daj/1fr7/gLH/smxV36G1H&#xA;/q/X3/AWP/ZNiqB1byXHq9nNZ6jql3cW88bQyK0diDwcgsAwtgy1Kg7HqAchPHGQohydNq8uCYnj&#xA;kYyib+IY8n5G+U1kVzeag4SSCWON5IXjVrZSkVEaErRVNKHbMcaLHfLu+x28vafWGNcQBqQJERZ4&#xA;zZvz91Kj/lz5i02MWflPzE2kaZ6NwWtmtrdibmYgh+SRx7dq0qtPh26MtPIbYzwx36dWWDtjDP1a&#xA;vGc+Tij6jKvSOlfi73dJ+TejXU7X1/qV7Pqs00F3dXS+hGj3VupVJBGIiFHxH4a4fykDud5bH4hr&#xA;/wBEWoiODH6cQEoiNA1GRurI396jaeU/zPv5EsPNOt2t5odyk6ajFBbwByK0hVecBG/2q9vnQ5GO&#xA;PKdp8Jjvf6GzPq9BAGelGXHmiYcJsVy9X4+VCwpebPIWoaR5d1KfytqK2RliJ1ZJLa0Hq2kUJUoh&#xA;hgQqwUbdvkcslhI/u6jvv7nGw9pRyWNXx5YiMuD1cpHe/wAX7i9LzIdM7FXYq808n6/rdrqnmq3t&#xA;/Ll3qUQ1y6JurWawVQD6Yoyz3ccnLjVt0UdPGoVZI/mnzRyUJ5O1ILzHItcaX9jkwJAF514hT9Pt&#xA;uq3/AIp8zenX/Bup+p/L9Y0un2K9frn8/wAPTpv7Yq0PNPmgSShvJ2pGMN+4IuNLBK8U+0Prmx5F&#xA;+nYDx2VdL5p80cR6Xk7UuXNa8rjS6cPUAY7XnX0qsPfb3xVd/inzJ8P/ADpup7qC3+kaXs1GqB/p&#xA;m9CAK+/tuqlur/mPf6HayXmteXLqwtDII7ea4vNJiViYgwUs979rmH6fsjl44qp2/wCaL3wvBpuh&#xA;T3B01/8AcmVvtIZbeMSfE0hW++H90rnfYMtPEhVCW352aNcGH0tOkZbgSPARqGjfFHAXMrUN8KcE&#xA;Tka+/wDLXFUq85+etR1nyorW+gTyW76noc0U8V3pc8XovqFq6EmK++IySqyJ8SqRQllFSFWbR+af&#xA;Mbenz8m6ogZVMn+kaUSpIJYf7270NB9PtuqsTzV5po5fyZqIP+6wLnSzX92p+I/XP9+cl+VD7Yq3&#xA;L5p8zinpeTtSPxAEtcaWPg5qCdrw78CxA8QB3qFVw80+Y+VD5O1MLXr9Y0vpyIrT65/KAfp9t1Vi&#xA;+avNPFy3kzUeVf3ai50v7Ppg7n6519Wq/Lf2xVubzT5nHP0fJ2pMR9gvcaWAfs9aXhp1b7vfZVIX&#xA;/OrSI5Jo302RXt7hbSdTqGjApM7sqow+vbMVjc/NWHYnFUx1H8w9Q0t4jqflq7sop0JiM97pMZZ4&#xA;opZ5wOV6KrHHFyJ/l5E0puqgofzdgvIj+j9HkuJ3ga4t4hqOjVZAfSVyovi4T1/3RNOvvtiqTeV/&#xA;Muvp+ZHnVl8q30skslhzgSfTRLEq2YCGTleqvx0FOANN6tUUxVmcvmnzR6cnpeTdSMgRjEGuNLCl&#xA;woKhiLw0BYkE+3viq7/FPmOv/KHanSv/AC0aX050r/vZ/J8Xz298VWp5p8zmaj+TtSEJC/ELjSyw&#xA;b4+W31wCmyU37nw3Vak81eafq7GPyZqJuKHgjXOlheXp1FWF5WnqfD06b+2Krz5p8x1NPJ2pkb0P&#xA;1jSx0Ip/x+dxXFUPeedtbsYLm8vvKl/bafbR+rJcyXWlKqIrN6ryFrwKqrGFbr4jtXFUHa/mfJe3&#xA;V1ZWWgXNxfWMayX1ul9pDNDzRm+MC9JC1C/F7+26qAtPzt0u6itng0uSQ3jPHaUv9HAlkjjV2VCb&#xA;0dC4H0jxpirer/mFeav5Z1JtM8v3F3Zy6dcyNcw3ukzKI25xRygxXknJCI5a0/aXiK70Vej4q7FX&#xA;YqxLyAzmfzOGDUGt3XGvKlOKdOSqP+BJxVluKuxV2KuxV2KsW/MHytrfmLTbW10jUItNlinL3E8k&#xA;TPI0LRPG8UUsbxywF+fxPGwbjUAiuKpBov5SXljaSWz6ukCQ2b6fpa2NqkSJC8ksvG4ilM0c6h56&#xA;enxVCF3G5xVLrf8AI2aa/wBQk1fUre807Xbq3vNbsFgnFXsuZhS2mluZZY1d5C8nJmIP2OI6Kpdr&#xA;H5Z6h5U02W6g1eSfSrvUNIafSOMrcruXWbImT1WaeR+KpxVijSMD8TNTFXtWKuxV2KuxV2KuxV5R&#xA;qX5Mazeavfan+m7ZJr20m0kj6k3H6hciRXJjEwjWdFkAQxKiE8i6MX+FVEec/wAj4/MV5pV7H5j1&#xA;CGfSvUWFLgW91FxeKdDRWjV15tMgkCuA0aBaBgrqqp6p+S0+o8NQbVBb+YfXlvZb2ATpB67XCzRo&#xA;luJqIiqXUyA+ryIZXFKYqmP5eW17Z+dfN9leXT31xbJpEVxfOChnlTT41eUoF4KzkciA/fpir0LF&#xA;XYq7FXYq7FWM/mL5JTzp5WuNBk1C405Jvi9W3ETh2VW4JMkySq8XMhyooaqKMMVYzpv5OXVu4iut&#xA;fmltbWG/isXhj+r3En6WuFurv668bBJU9WMcFRUou2KoGw/JC/ieSK61a3l0y9a2jv8AS1tpmgS1&#xA;sZoriKK09e4neP1ZIiZebMPi+EAipVVF/K678sx65qVhrEiaTPY37XWkn1ZfUkdZvTZpppHduKOl&#xA;S4Lc1JDAOwxVf+Yn5jS+W9WSC881adoytIfRsEtRfTiJFRjLdtJcWxUNzB9ONOdPsluoVZpp/m/R&#xA;V8rw67qmtaUtluk2rW91H+j2YOY6pNI3EVIpxLGjfDU0riqayarpkenrqUl5AmnMiyLetIghKSU4&#xA;MJCeHFuQoa74qxf8vYLUX3muZFT6w2tXKSSKI+dAEIVigD9+jk4qzLFXYq7FUq80WGt3+iz2uiag&#xA;NL1FyvpXhjEnEBgWHE+K7ZXljKUaiaLm9n5sOPMJZoeJjH8N089816H5uPma/utK029utY/3HSaT&#xA;rMdxFb2qJb0N5G4aQgesgdOJhYEsO24mHEkQSSBQYrDB/wA5BmKS4kXVjdvGbaJg+mLxjMkUplMX&#xA;LgZCZGjB+E8Afs0wsXuHluXVZvL2mS6xGYdWe0gbUIm4ArcGNfVH7ssn26/ZNMVTHFWIfmsIj5Pp&#xA;MFaI6po3qK4QqV/S9rUMJSqU/wBY08cVZbDDFDEkMKLHFGoSONAFVVUUCqBsABiq7FXYq7FXYq7F&#xA;XYq7FXYqwLypBZv+afniZo1a6ibTgkhERZUaySvE/wB6K03/AGfprirPcVdirsVdirsVdirsVdiq&#xA;VebP+UV1n/mBuf8Aky2KvM/zg8t+a/M14GgtoZNB05JfRvtLX63qfrBRzt5oXkij9FnWjoI560FU&#xA;8FWUecdM1K+sPK+o6VYjVv0Jqa3t7pcD28bTAW1xbSBPWeKDnFNMH4s4+ye+KpBN5A1e4/Ju18pX&#xA;Wjrc6zpUdpLZmU2zxLceqJH+rOz1RreN3j5EJt9moOKr9D07zxqWp+bbTTNRj0jTf0u7w3yj1rj1&#xA;1kUyoI2ZlCGOlfs707FsxskcsiQCIx2o9XeaPPocOOM5wlly+riido1XpII/HP8Aos98szeapYLs&#xA;+Yre2t5luZFsxbOXDWwNI2ev7R+j5DplmIzo8dc/scLtCOmEo/lzKQ4RxcQr1da/HxKcZa4DsVS/&#xA;WYdQlitxZlvhlrcLG4jZo/TcUDEH9sqchMHowmD0ePfmZ5S/M3ULq5k0aG9m1B9LNtFNHcxrblzZ&#xA;SxylHFxbNA5ml+y0MiueLck6pKN1umN0L5q3my0/O0ad5i0OwF9qMN3bPb6NqHOxjkAC3vqNLIpg&#xA;KvIJbZUKr+zX4aEkskml8ofnb5fu9SPlh7xoLqR/TeSa1nk5R6lqn1Sizn01h+rSWrS9DQqOisqq&#xA;vQfyzsvPia/rt75s+tF57Wwhjadrb6ubiGe9a4FlHbsSsASaLiZf3h/aJpiqYfm/cPbeRZrlFdmt&#xA;9Q0mVUjDM5Meq2rURUaJixpsA4Ne4yM5cMSe5v0uDxskcYIjxGrOwHvQ0Hmf8w1RNTGiJqOlXosf&#xA;qdtFW2u4/WH+kPNHKzheJ7ctqjenI5i+Ll+oRuJqu/4u8/k/Q/3csvBlhx8Uvqga+nhrv/X1pnmZ&#xA;jzjsVdirsVdirsVdirsVeTReazon5p+c7eKCa+vLqO3mtdOhjdmma10+JiqyepwjNG/32SfGtFNG&#xA;XOIGqJlVu20HZM9RDxDKMMQnGMpE8uLrX4+QJE68uecrLWry4076tcWWq2UEE19ZzxkekbheQTn9&#xA;liP8+9HFnEzVURzYa7suengMnFGeOcpCMgefCedfj7k/y91jsVdirsVdirsVdiqVebP+UV1n/mBu&#xA;f+TLYq+e/wAxr57zzVrVxODa3Vr+k2jtrfT5aXEmnrGmnwTyqp9dL3m/IncBaKyjFX0hpltbW2nW&#xA;0FtbR2UEcaiO0iQRpGKV4KigBQPCmKonFWHfl9L/AKb5qiIcEa1csCUYIQQg2f00Vjt0DMfliqZe&#xA;ZdDtZrqz8wNHd3N7oSzTWllaylPWZkoUKVAYmm3j0NRtlOXGCRLe4uz0GrlGMsFwjDNwiUpD6d+d&#xA;/jv25qHlvz3Z6zctYz2N3peow20F1dQXcZRE+smiIJehavStCfCoYLHFqBI0QQa6+bbr+x54I8cZ&#xA;wyYzKUQYnc8PM1/b8iCZNmQ6d2KuxV2KuxV2KsQ/NYA+T6FeYOqaN8AXmT/uXtduISbl8uDfI4qy&#xA;2GVZYklUMFkUModWRqEV+JWAZT7EVxVh1pqer+VruPT9cnudXsrpru9n8wSrFFb2UKHkkUlP7OoC&#xA;imy4kZyxmpXIGzxdz0GXT4tZE5MIjinHgiMYsymesh+POR75da3Vtd20V1ayrNbzKJIZoyGVlYVD&#xA;KR1BzKBBFh0WTHKEjGQqQ5hVwsHYq7FXYq7FXYqwHyo0a/mr54Bjb1JDpwSQRsQAtkhIMgj4r8jJ&#xA;v/L3xTbJ/McfmYwWzeXmtY7j6zF9da6ViDbA/vAvH9r+Fab5VlE9uGuf2OdoZae5ePxGPCeHh/nd&#xA;Lvo15d83aF5gtzPptxyHqzQiOVTFIzW7ASFUejFRzXf33odscWaMxsuu7MzaWVZB0B23Hq5bj3H5&#xA;dycZa4DsVdirsVdirsVSrzZ/yius/wDMDc/8mWxVNcVdiqRXfnjyvaeYovLtxeFNWmMarF6UzRh5&#xA;ldoo3nVDCkkixOUR3DNTYYqxHylFrMuseZPqzTNbLrl56yRSW8SfZTh8VXm5exAFMpIlbQRO+tfB&#xA;Nvq3nuLiqyXZ/d2QYxyWUoLrMfrrVnUMOUNOAG1cjU/Pp3fFrrIO/p3fFAeYfK+ueYLIWOsRajdW&#xA;qXElxGiPp0f93U2wYoUJ60bK8mIzFSsj4fBztDr9TpZmeIkSojlA7H3pKLr89dLEbXNvJqdmD692&#xA;8IsEnjjEhaSGJKyeo3pj4fc03pld5489x8HLMcGb6ePHOsQFmBBkTWQk7UAPp+1EWn5i3ktylpd3&#xA;V9p19HEZb21uxp0JjNyw+poHkVAW4sOY6+w3oRqd6JIPw68ly9h62I4oRlPGTMAx4DfD1oE/j4Kl&#xA;v5/dlDtrjugjiVqS6SP31rIx1EitPhWIqyePUbYjUj+d/uenNqPYvaANHFk/g6D+L9f38030y781&#xA;X9lbalZzXVxaXQu3jnhlsXLRtITZng49JaRgB+O9cthKUhY5b93wcHNgz4pmExKMokgjb4eSg+va&#xA;5+kIdPXVJxfXbQ/VbbnpJdhbygX60APxcAyqP5h7HB4hur3P9X4tv5HVnGcnBPgjw2aG1/rHL4d7&#xA;Wt6/r+h2IuNXvruyWd7m3tpZP0ZwM0s3+gg0BO0X94eg69MGTIYC5Gvl8F0mh1WpJjijKUgJHbh5&#xA;D8fE8kl82axqWpeWJ7lL24ubCLUtHgWRZdOCJcx6pbiUPJA0brR+PEhx41pvkoTMuRv5fFhn0uow&#xA;y4ckZRJAIuhsWVLp3nOXikrzuqG7YpJdRwRkNIfqgSW2T12ZIyAwf4a/RkuGf3/saOHJ9/X5ct0N&#xA;qem+Z7uxuIL6Ke5spRaRPFdiCZTH6gF2WgtKGQcCeNG5VGRnGRFHlt+3k2Yc2fDMZIExlEij9/Jj&#xA;c3l/8xtMuXuvJryoLpis9pPEsNpDBbOI7dbaG4clfUiqzDr7jKPDyRNw/ZXk7qHasdRUdWJGMRM8&#xA;UBETlMnbiMuY5/Gm2/Mz8wIw31zy3qdvZqXaS4js1adUt5AJSCSYgHQGnJTTsWHxYTqcg5xNe7uQ&#xA;eyQTwwzQlP8Ad0Kq+P6vUTwjh8+fkaCa6b5013VYjHbXMguY4bh5LT0IILuGSaVf0alybhvRYyxE&#xA;krGoNcnHMZcj+vyt1ufRarGSDGVeuiBseE8xL6ZDv4U1h816tdUjguYpZXeNY0gsLgOwSRUu+LSS&#xA;sgMNSDXvt1ywZSeR+z5tU4ZoizEj6f4ZDn7+8cu9RvNR84R2js8txa3M31uGzLnTYomuGl42A4yk&#xA;yfHHuy9a4JSmB8+74MIYs8weESJAkdgOnX3d6pZ33mTUIVn0+9u7mH1Y1eSJtKdaRHjcqCoPxV2G&#xA;GMpS3B/3PxZ5tPnxGpiUTtzAGx/X0WSTebbsXltaT3L39tFdKY5JtPT0pnYNZF1t+Tbx7kMKYLkb&#xA;A5/D4MJ4c4iJESAldE1R36d/mx7QJ9eX8w/Osdt9b+sGbSS68LNrgxm3jEnJuXorROXH4d/GuTJn&#xA;5/YxJn59O74+TJiPPoVzyvmIjveI/wBxe7mYGx7dBDUSe+D9559e74Mf3nn1/m/BJ9d0XWNQuP0j&#xA;bQyW/mS3iWDTb1bFvUj+ssPrDBzILUceTmriu5oakHKcmMk2Pq6bd/2O00vaufHHwpGRwylEyjXO&#xA;q6mwNvuCXfpL88rEmH0v0utTGpjgitpoxG4RZJXkDQP6iVbjGzb9x0MOLOPNt4tNlH8eMiOU8gbP&#xA;F+6jZlR9PMgBVX835Y7iOK9NzpUsjsyxalYstLaFyk0riNw2wU8QO4I+cvzdc9veG7N2DqxcsVZY&#xA;AwFx33kO4b7X9oPJHL+ZtxKrJFqViXK3Cx8bO4JMryAaagrMd7qGsg8KZL8z5j8cuvV1stFrAN8c&#xA;+Uv8nP8AhP4vu6phba5r95HLfadc3Fzpq3CLHcA6bMnopRbkt6LciUatKZMZCdwdvh8WrPptRinw&#xA;zjOMttiBdHyUbjzH5jgiuV+tML5frMUMEgsSpuJJK6dHwVxLG00W9HwHJIdd/h8EDT6kx4hCfKRH&#xA;p2oHn7h1PRML2680wCWcPfJZxSRtJLK2lKqwKf8ASGZiQAVFeuTkZDfev81gIZZSEYiRJIoem0o1&#xA;3UvMdzo2sQxyXM0UOn35ulV9LcozKDZ8xGxYLJAWZu/8uASkeX+9+CcmLPAAyjIA8VWBvR/FvSMy&#xA;W52KvOtW/LzXbvztLqEUtr+gr3U9N1i7d3lF3HNpcPprDHEIzG6StHGSxkXj8XwmuKonyZolnd33&#xA;meeaS8V/01dKBFeX0EdAEOyLKkXfqg+eKsn/AMM6d/v6+/7iF9/1WxV3+GdO/wB/X3/cQvv+q2Ku&#xA;/wAM6d/v6+/7iF9/1WxVBaj+X/lXUk4ajbz3ickbjPd3cg5R14H4pT9nkafM5CeOMuYtydNrc2A3&#xA;jkYmiNj38/x7u5Dn8rvIxcOdOJcGUhvrFzWs+03+7P8Adn7Xj3yPgQ7h/a2/ypqarxJ16ep/h+n5&#xA;IGX8ovLr3EjLe6lDaFrV4bGK8mWGI2ZqgSpLU+n4f2aZTLRxJ5nptfc7LF7R54QA4cZkBMGRiDI8&#xA;fO7/AAetqo/KPyRDbypYWs1hcOJvSvILm4EsTXA4uyEuRUig6bjrk/ysACAK5/a0Ht7VSnGU5cYH&#xA;D6T9J4eVjq1pv5XaXbTH65qepanaLHbpb2l1dzFIpLb7Mq8GQ8q7r/Kenagx6YRO5JG3PyTrO2p5&#xA;ogRhDHK5EygOEkS6Hy+9in5jeR7nSLaxfy831Hy+dR019Qto7i89d7qXVrQJJGA0ylvf0yR4E8aS&#xA;GMxkOGhDe/e1T1ePNgkcxnPUekQN+kRHQ/jn8b6RH5d4Rqn6T1BuIA5NPVjQUqTx65e6pd+gP+1l&#xA;ff8AI7/m3FXfoD/tZX3/ACO/5txV36A/7WV9/wAjv+bcVSPUPyp8p6hcvdXaTSXMk0dxLPzAd5Id&#xA;kZmC1NAab5RPTY5GyN3aabtrVYY8MJnhETEDmAJc6QMn5IeSODfV1ubSUpMizQS8GX6wKP0XfY0o&#xA;dqbdMrOix9BXP7XNx+1GtB9UuMXHaQBHp5ft63uqL+TPlI3BnuZr69kLQODdXHq0a2ThGfiXfbxr&#xA;92I0WO7Nnlz8mOT2l1ZjwxMcYqQ9MQNpGz+yqPx3UpvyW8txqW0i9vtIuBFPFFJaTcVU3FObMgAr&#xA;0p1G1B2Wgloofw3Hny82zD7T6nlmEc0eKJPGP5vIX9vv36ytY/k/5e9SO4W+1CK/EsM9xfxzhJpp&#xA;YForSMF3Pf54To4ed9/fTXH2j1AsEQOMiQEDG4xEjfp6+Q35bJB+XvlS/tfO/nC0vde1G8mtZLLl&#xA;c+oyer6tsGHOodSUUhR8Xbwy/FAxjRPE63X6mGfKZwgMUTXpjy2H6Xon6A/7WV9/yO/5tyxwnfoD&#xA;/tZX3/I7/m3FXfoD/tZX3/I7/m3FUNe+TtPvonivbm5uY5I2idZZFcGN6ckNV6NxFR7ZGUBLmG7D&#xA;qMmIgwkYkG9u8cilj/lP5NeT1GtiX5RPypH9qAcYz9j9ldhlZ02P+aHNj2zrAKGWdVIc/wCdz+aE&#xA;m/Jfya5pGbu3iMU0DQQTelGVuCDISqrQk0+XSvQUrlosZ6Vz+1zMXtLrIjeQkeKMrkAT6eQvu+3m&#xA;QbJt6fkz5GRg31eVnDQvyZwTygXjGakdh18e+EaPF3fgNcvaPXH/ACh/i7v4tz0+Xd0pDD8j/KNF&#xA;je61GW2CzqbWS6LRn6w4dvh4+Kj5kAmpFcgNDj863697lS9q9WeXAJen1CAv0ivt/WBQNIbzN+U3&#xA;l6y8u6lcaVcXemyxQGaX6vIFEy20LBIpABulOoyR0kP4fTy5eTjw9odQbGWso4ZAcYuuLckef6Ng&#xA;9LzKdE7FXYq828nTecoNT81jTtN0y6tW1u6b1Z76a1lBpHs0cdhOD8O9TIfDbFWSve/mQSvp6No6&#xA;gMOfLVLpqpU1App60NKb74qu+vfmJT/jiaRXw/S1z1p/2zfHFVq3v5kB5OWjaOyFqwgapdKQvFdm&#xA;/wBx7VPLkaim1BTvirpb38yCoEWjaOrclqW1S6YcA45Cg09dylaGux8cVXfXvzD2/wBwmkdN/wDc&#xA;tc9aH/tW/LFUt1jzZ5u0K1e91uz0GytHlEdvJNq9zEOTICIyx088mLK52A+Httiqyz85+ZtTN0ml&#xA;Q+XbiTT3UX/DWZ5fRUP8QcLYLxJRXFSaBh3ocVQdv+aU1w0Qhm8sOJxK8RGvybpAC0rf8c/oqLy+&#xA;VewriqTefvMnmjUfKDTpZ6He6eb7RJlNhqxuGKvqduyUaazS3ZZXWgZyFC1PxUoVWYQeYvzAdY2l&#xA;8oJEWUGRRqUDFSQagUjANDx7+Phuq0mv/mHRy/lOIk7xqNRiFPgXZmMZr+85b0Hw02rircuv/mAa&#xA;CLypGPiFWbUIj8Ada7BBuU5U32NOuKrx5g8+8t/KaBa9RqUNaVO9PT/lofv8KlVTGv8A5h/ET5Ti&#xA;NQOKDUYhQ8TUFvTNfjoPsjbf2xVdNr/5gUYQ+VIwf2HfUIj/AC9VCD/K7+HjsqkU/wCbs1vPPBPY&#xA;adHLbXC2lwja1agpM7sFjb4dn4xvt2KkdicVXat+amq6NqUdjq+l2FjcSwrIlvPq0EbjaQu3JkoV&#xA;+AU2GwY+2Ktw/mnqd7ERp+naZLPJA09uv6ZtXJTl6SyGMAPw9f8Adn32+1tiqSeX9Z88235oebQv&#xA;laOWa9isLmRRfwL6MQhkgiq5i5OZGgJoDRffuqzSXX/zCMcgi8qRLJwb0mbUYmXnxHHkAi/DyrWh&#xA;6D32VX/4g8+1/wCUTSlf+rlD05Ur/d/yb/Pb3xVYmv8A5get8flSP0SF2GoRcg3x8jXhQj7FBt39&#xA;sVak1/8AMMwN6flOJbgg8OWoxMgbhUE0jUkeptTbbfrtiqofMHn2pp5TQjeldShHcU/3X3Ff8+iq&#xA;W615/wDM2hW7X2taFa2Gnlkijlm1OFBzLOWqxSn92oYCnUHem+KqGl/mbrGsPLDpOk2F5PBBHPcL&#xA;Dq9tL6ayoXR2Cp9g/DQ7VB7d1UNb/nBPOlt6Vlpcr3bSRWpXWrUCSWJFLqPhNKMw+gqd60xVrVvP&#xA;HmTV/LWpSado1ld2UmnXMjzW+q2849J+caTI0YIK0jlqO7LxB2JxV6ZirsVdirEfIMg+ueaIy/xf&#xA;pq5YJyqQvGMV482oK/5K/T1xVl2KuxV2KuxV2KsW/MLyZL5q0y1toZoILiyuDcwSXCTyIrtBLb8g&#xA;IJ7VwyrOxU8qe3cKsbtvybuZNLvtM1PX5pIZrCbS7a4s4ltpmguGmkka6ILpKxa46IqL8Nab7KoC&#xA;x/ImT17qPU9RtrnSNVmtJ9V0yOC4VVGnhhBFaSy3M0sSOzl5OTMa148a4qgdY/LXUfKemS3dvrUj&#xA;6XdahpLzaX+8I+ty6zZMZjPJOrNwVOKuzCQg/FJtir2lHR0V0YMjAFWBqCDuCCMVbxV2KuxV2Kux&#xA;V4+35DXsV5dzWWswwx3MF7p/pvbzSg2mpNI1xJIHuChuV5gRuiqlAeSHl8KrJ/MH5XprEMNvNqk0&#xA;sNnbXCaf9aUTtFd3DJxuG3RWEcaGNUoPhdxXfZVJdU/JafUeGoNqgt/MPry3st7AJ0g9drhZo0S3&#xA;E1ERVLqZAfV5EMrilMVTTyhb3Nl+Y2tWV5eNfXcOiaLFPePRGuJYzdq8pjD0BcgsaKaV6+KrP8Vd&#xA;irsVdirsVSnzVoTa9okukGf0Le7eFb34S3q2olVriDYrT14g0ZPYNirD/wDlUcz6hcu2syW1io1N&#xA;dMjso/RmRdZulvLlLl2Z0mjSVFEaBFouxriqS6R+Qs9k08c2qW8thqclp+mLL6tM6NDYPBJEsD3F&#xA;xPIrSG2AlLsw4miheIqqil/K678sx65qVhrEiaTPY37XWkn1ZfUkdZvTZpppHduKOlS4Lc1JDAOw&#xA;xV6tiqE1XWNI0eye/wBWvrfTrGMgSXV3KkESljRQXkKqKnpvircmq6ZHp66lJeQJpzIsi3rSIISk&#xA;lODCQnhxbkKGu+Ksb8gxoLzzRJ6dHOtXK+pQ1I4x7VKrt8mP8MVZdirsVdirsVdirsVdirsVYl+a&#xA;QJ8pKFBJOqaLQAcif9y9r24S1/4BvkcVZYiIiKiKFRQAqgUAA2AAGKt4q7FXYq7FXYq7FXYq7FWF&#xA;aMgP5t+ZmK146XpVGp0JkvP2uG3/AAf0HsqzXFXYq7FXYq7FXYq7FXYqlXmz/lFdZ/5gbn/ky2Kp&#xA;rirEPzF0nV7v/D2oabYNq36E1Vb650tHhjeeI2txb/Abh4ouUbzq4DuOnjTFWLTeQNXuPybtfKV1&#xA;o63Os6VHaS2ZlNs8S3HqiR/qzs9Ua3jd4+RCbfZqDiq7R/P/AJf8uar5uivZJnni1R5Ws7e35uyz&#xA;OkSyB160OxDkdqVqMxsmrhAkHmHdaLsDU6iMZxAEJ8VEkD6efn3/ACPR6jbXVvcxl4JFkVWKNQ7q&#xA;y/aVh1Vh3B3GZAIPJ1GTHKBqQr8fd5quFg7FXYq7FXYq7FXYqw7825ooPJLzzP6cMWo6RJLJ8Pwo&#xA;uq2rM3xFV2AruRglIAWeTZixSySEIC5S2AZDpGs6VqESLZ6hBfyrDFLI0LqSVlFUkKKTxD0JGRjk&#xA;jLkbbM+ky4f7yMo7kbjqOfyTDJuO7FXYq7FXYq7FXYq7FWEaQGP5v+ZSJOIGlaVyj+E8h6l378hQ&#xA;+ApirN8VdirsVdirsVdirsVdiqVebP8AlFdZ/wCYG5/5Mtiqa4q7FXYqw3yEkY1PzSTC3N9XnPrl&#xA;DxKqF4oHLNXixJoAKV8d8FMuM1V7LrjyhYaBNHq2kXk2kaZaT3GpazY26GVbstH8XIHk1Fpsqing&#xA;AaHMY4BD1RPCBZPm7yHac9SDiyxGXJKMYQkTXBv8t+8/EkbMg0HXdP1zSrbU7FmNvdRrNGsilJAr&#xA;EgckO43U79D2qMvx5BOII6ur1mjyafLLHP6omttx8/x5phk3FdirsVdirsVdirD/AM2IYJ/JjQTx&#xA;+tBLqWjxzRcXfmjatahl4x1dqg0ou/hgIBFFnjyShISiakORX33kPTpoFuvLch8uX9wbUzXtrCEl&#xA;e2tyCsDRyAcAVpUUHQBgQKZjz0w/g9J25eTt9P21PlqB4+McVRkTtKX8X45Wao7qug+e7S+u107V&#xA;LWTRNXmmnistPu2X1Z47c09VOO1G/Eg8SwFcOPUAmpDhl3FjrOx5Y4+JikMuIRiZSjyiZdD+O66u&#xA;mUZkOndirsVdirsVdirsVeW3+kaxf/m5rsuk6rNpt7baRZegqxySW0skv1tUNzsY6R0qtd6natMo&#xA;y4pSNxlRHydr2frsOKBx5cUckZSiSf4gBzET5/D9R0Ne8zeVn9fzleQXelz/AFOzspbG3kMxu5Bx&#xA;lZ1UEBSwJ99uIr8OVeJPHvkNjYbDq5x0en1g4dJGUcg45S45CuAcq8/wTW7L9O1TTdSgafT7mK7h&#xA;R3iaSFw6h4zRlqO4OZUZiQsG3RZ9PkxS4ckTE1e+2xROSaXYq7FXYq7FXYqlXmz/AJRXWf8AmBuf&#xA;+TLYqmuKuxVil/8AmPotl5pXy9JbXbuJ7azuNRRIzaQ3V6jPbQSMZBLzkVOqxlRVakchirHvK+j6&#xA;tNrXmC4tGBgGuXZuk+u3NsXUxKEXjDGR8Joa8j/DKTCV/tLjyhK7/SU4h0jzhPxM8s78IbNT9ZvP&#xA;qxEscjNdFPqKsHWVOKgvuMiIzP2dfnyYiEzz8ute/kxrU/IPnIalNqOhTXGmaxcyiK4vTcR3Fv8A&#xA;UY25RRx+oRMWpQfEo6U265RLTzu47S/Q7nSdpzEY4dQDk08DOXCCBvIGvVXFzP4oBSTUvzp0llh1&#xA;K3vNU+sOjwy2SWA9KKFi86SDhJyeSIcUqR8XTkcHFnjzs+6kflsWYXjlLHwxxgiZhvIyqZHL0gct&#xA;vfQU1/NfUbP4NSTV7e/Uo09k9nbzCNbyn1VSYkiau+/Twpy+HANXXO793fybx7O6yRuBEoXOpcUN&#xA;xDyB/Z3nh3VLf83RMYrdNTZGm9BS80EJcywyn9IrHMjLbxqkFGQyg1r1xGsB6/jq0ZOwe0YDfHLl&#xA;A8gT6j/R2+aLf8x4EnWM67LtyMlZNK6XTVseJGxqm8n8vU0GS/ND+d/uevJiOwu0SL8LJXq6R/h/&#xA;HxPK0daeadWurX17XU5ZjCYI7k89MeNZIJR+kfhjIkKpCwK0+fTJxzEjY/d8XEy6DV46EoTBIj0H&#xA;8X6+nmq3PmLV4raG8l1CaKznMgE/LTIkb15CtiYxKS1HUb1+fTCcpAu9vh8GOPR6qcjGMJmQ4rFD&#xA;+H9XVjHmrzGuoaCYhqZvIZdQ0mOC3juLGYNPb6nbi4B9RGkPxMhWism4JqpOCGXi5G/l8WzP2brM&#xA;AvJCcRUTy/nfr+/ZmkWmecmKzO0qsWuw9bykrK0p+qlolQ26cIwOXpnf78sEZ/f1+Xk4Qhk+/r8v&#xA;JA6npXmq+sw0iX1vqQtYoYdSEemyS27ztxvDGYz6lAgBXgQffIShIjrfft8XL0mszYSLuULiZRNc&#xA;MqPUdWOpZfnBp3F9J1K71W4cmG5tb63WFY7e0k9KOVJZecbSTx0chfi8eRGUiOaP0kn3+X63ZHtH&#xA;BqDw5cfhRHiG8cfVZPpB4jw8Pu+HCLVn/M/8xLZDbX3l24GoSMTZxWtlO/rRQuPVbm7qEb09x8B9&#xA;wKjD+ZyDYx39zE9nQnRxZgYDw+IyhKNGZqXPb0cybF8hdLh+cVzBxguFnj1YIFuNMksXleKe4dfq&#xA;sTGKRPiZDVvDpx5bY/nK2PPur5Jn2HqwDKO+P94YyraQh3VfPpe3nW6Ls/zYg1LVIrCx1JLma4Ma&#xA;2wtrR1UmM8rsN6zkgxxmqno3auSjqxI0D+Orj5OyNdDHLJLHKMY8N3Gvq8juip/OGpy309hHqZiu&#xA;rdZ4ZYVFlC6XMsijTw31hmB9RORKrvXJHMbq9/h8HH/IawwExCfDISIPD/N6+4dW/wDFF9Ld/U/0&#xA;nIzyCN4U+saWlVt5KX/JoyWURqp6b9fA4+NvV/bH4pPZus4TLw8nCOHp/O5fPp8O9ENrPmOKBomu&#xA;pBOTcpbhWsR+9kl/3HxmW4YLJ6kX8oqclxy7/u+DRHT6gg1GewkeXd+gde5jmkDUtZ/MLzHc6bcv&#xA;M8dvpHC5+tRRyGCO5n9ZP9DV4ZK+nIlGYU8D2RxS3B29/wA+WzHNps0JETEonbY7GufLzZbNb+dg&#xA;GWN73iI7vitdOkHrGVWsyGkXmVRA3PlvWmSIn59e74Nf7wcr693wYzdeXPPOiOb7yyLiygto+aaU&#xA;YrNra4ubhx6zTJasHoP2aKSOg4rXMc4pw3ht5bUfk7mHaUstx1PFKzjHGakYxH1eZ27iO82oN+bn&#xA;nqAyWc3lqeW+tfguZrezuXhaRnULwDOjhaE7nvTx2fzWQbcO6ToYEcUcsOExyyFiXF6DURKI5GY3&#xA;HkCvX87tUmQ3DaHc2NmjH1pmtZbuOOOKRFmkeWN4acUcnjx603+Kofzp51QZT7Jnyx5MeSV4wBDi&#xA;lfH5gV6eZHcr6d+az3s84trySscUpJurIiB5rh1OnxQJGVmBmi5fbY4Y6sE7H7Pk42o7J1uGIlKB&#xA;o8fIX9Bo7D1Aeck1h/MKVGLPfWkkJ9IxGdDGj0lEV2frETSRxrATuWU/iMsGo8x+Ofycaem1OM+q&#xA;Eh9POJH1ct+l9O9Vj89avc+u1r6DiGO7d0htLq6VWilC2i+rGyK63MdXV+IFMIzk8vPv+HzaJHLE&#xA;WYkA8VemX8JrY9UBqf5n2kTSzfpNIwixypDYy2t5H6UTA3XIOsczSInL4V8PnkJ6oDr93xc3Tdm6&#xA;vUH93CRFxF7V6uVk/jl3pFrn5v2tzoF5CdRRhdW15CIo7ORZhJMeNgspdylJ4SXYqPhpkPzg7/x0&#xA;cgdh9oGRj4UthPp/MNc+R+D2jNg4LsVYRqX5aveeb21oakE0y4vbLVL3TDb8pHvNOiMVuyXHqAIm&#xA;yM6+kxJQUYVOKqPkzRrK91PzTNLNdCRdZuE4Q3t1CgHCM/3UU4QHfrwUn364qyj/AAzp3+/r7/uI&#xA;X3/VbFXf4Z07/f19/wBxC+/6rYq7/DOnf7+vv+4hff8AVbFWv8LaXUt6l7yNKn9IX1djUf7u7Yps&#xA;oWXyH5YlheCWCd4X9TnG15dlT61fVqDLT46/F498iYRIqm6GqyxkJCUrFdf5vL5dO5Cx/lf5GjjW&#xA;OPTmVFMZVRcXIAMBJiP95+xU8fDIDBACqH9jfPtTUykZHJOzxdT/ABfV81Gb8ovy+mlEsmllnrKS&#xA;TcXO5nFJCf3m5bvkJaXGTZHf9rkYu3dZjiYxySr0+f0/TV8v09VNfyc/LtZGb9FkqyxqIzcXBQej&#xA;XgQPU9/898A0eIHl+A2z9otbKNeIecjYoH1c9x9nd05Co/8AmF+WnkvT9Cg1Cw0429/DqulGC4S4&#xA;uFdWn1W2SRlb14qMwY/FzUjsw65MaeAIIG4cXJ2vqp45Y5ZJShLhsHf6eX469WfJ5X01EVRNfkKA&#xA;BXUb9jt4kzknLnXN/wCGdO/39ff9xC+/6rYq7/DOnf7+vv8AuIX3/VbFXf4Z07/f19/3EL7/AKrY&#xA;qpr5R0ZZXlU3gll4+rIL69DNw+zyPrVPHtgoMjORAF7D9KCm/LjynJYzWSwXEUE6yq6x3d0P96N5&#xA;TT1CtXO7VG/euVywxMSK2LmYe0c+PLHJxEyjXPf6eXPu6d3RC/8AKpPIBjRJdNaYp6R9SS4uSxMC&#xA;8I2Y+p1Vdh4DbI/lcdVX4DkHtzWcRkMkhfFy5er6qHIfgrf+VPflyImiTSAisHX4Z7gECUUen7zv&#xA;TB+Vx1XCP7U/y/reISOWRI4f9jy2+/v5mysX8mfy5D8/0Wx3iYA3FzQGFeKU/edhkRo8Xd3fY3S9&#xA;pdcRXiHlIch/EbPT5d3RI/K3kny/pv5leY9P06K4srGHTtMkSC2vLuFeckl3yLBJ15dNuSmnYjvf&#xA;jxxgKiKDrNXrcupnx5ZGcqqz3D8fpZ5/hnTv9/X3/cQvv+q2TcV3+GdO/wB/X3/cQvv+q2Ku/wAM&#xA;6d/v6+/7iF9/1WxVpvK+lupR5b1lYEMp1C+IIPUEetikEg2EFqH5eeU9SSOPULaa7SJ1kjWa7u5A&#xA;roKKw5SncDbK54oy5i3K02vz4CTjmYmQIPuPNL/+VN/ltt/uGUUDqKT3I2k+0P7zvXK/ymL+aP7X&#xA;OHtDrh/lZc4n/S8v29/W1j/k55CBVrazms3WWGUvb3VwpP1c1RTV22+W47EHInR4+grl9jbD2l1g&#xA;+qXHtIeoA/Xz/Z06ctkXZ/lZ5EsnR7TTTbvGZCjR3FypX1hxkoRLtyUUPttlkdPCPID+1ws/a2qz&#xA;Xx5JG+Hr/N5fL79+aH8z+R/LcPl/W7qOGYXElnLJJIbu6JdoIW9IvWU8uH7NemWcAu6cQ6nIYiJl&#xA;Khdb9/P59e9meSaXYq7FXkn5fecNcvvMOtWOlWUTWOoXE+s6Zd38zQ/WrNp1t2eCOJJ+Ko0TCrkM&#xA;eSPx4ndVnry+emBAtdNX40KkXU9eAlLOprbH7UVFr2NT7BVtZvPXFeVnpZag5kXVwATwINP9H2+O&#xA;h+W3viqReXfOfmnXNT1yxtLC1WTRbhLa4F013bfvHgikHprJbJI6bueRUBqjiSoqyqeSS+emAC2u&#xA;mp8amoupyeAlDFd7bvF8NfHf2xVck/njlHzstMKhV9ULdXAJbi3MrW3NAW40rWgr1rsqxLQfzD85&#xA;an5iuPL8uhJYX5gnvLGS+eSGKaC2eO1eSNFjedU+sNyHrIhZGHGtK4qyuWXz0xHp2umovME/6VOS&#xA;UDoeO9tTdA61p1IPahVXLP545nlZaYU5bAXVwDx5NtX6v148R8wT3oFWDfmpqvna30SwsTptrf3+&#xA;o6lp7WWnWE7NPK+nyrqE6x+vCkagpaMeUhIUbUYkYqyry35k8z69omm63ZWWmvYalbxXURF5cBuE&#xA;qFqb2mxFVG48cVRcc3n0CQvZ6WzNvGPrc4C/ulFP95akeoGb5GmKpP5085+ZvK+kfpS8062a2FxF&#xA;ERay3Vy9JJU2bjacI1KB1MkhVQSu9aAqp6LjztVq2Gm0qOP+mT/Z5nlX/Revp0p74qppN57DEvZ6&#xA;YwIX4RdzgAhCGofqvd6H5YqlHmrzP5+0ayjlt/L8Wpz3EnpRQ6fcPI6UT1GkleeGCCOMBH+KSRdy&#xA;oFTsVUV5c8zeZvMOg6frun2Fh9R1OGO6txLdXCSCKUhgGX6rs3pmnhy36Yqjo5vPInDSWemmEpGH&#xA;jF3OCHAf1GU/VejEpQHpQ+OKrZZvPrW0ipZ6XHOyMI5Prc5CuUAVuJtdwJKmnhirzzRfN3mKT83N&#xA;WWHTLb0tTQaVb3Ulyy2z3WjrNLcRRuLdpmdRdLXkir8DgciNlXok03ntoZlis9MjkaNxDJ9bnbjI&#xA;VUIxBtdwG5EjwpiqobjztVaWGm0qeX+mT/Z5jjT/AEXr6da++KpDpfnTzNqHm7V/L8WnWy3Gkw2s&#xA;0/qy3UMZW5luFBikktFMtVhALKvCo2Y7hVU5mm8+taukdnpcdyykJL9bnZVJjoDxNrvSXf8A1duu&#xA;+KqrXHnbm3Gw03hvwreT1/ZpX/Rf9b8MVYrF+Yfm4+covL0/l4WguXuIbG9uJnS2uXtOMs3pH0TP&#xA;QQtQO0QjZh8LHpirKGn88lABZaYrFAGb65OaPxapA+q9OXGntXFXCfzyI6Gy0xnC0DG8nALcBQkC&#xA;1/nqflirDfM3nXza+u/4SuNDW0t9X9XSoNXeVzZvcz231hFRjEszlIEkqyx+nz+EsCpGKvT8Vdir&#xA;sVYR5H/LV/LOpLdS6kL+Gysm0vRoRb+i0Fm9wbhllk9ST1nrwXkFQUUfDUk4qzfFXYqkmjeWv0b5&#xA;g8wav9Z9X9Oz28/ocOPo/V7WO248uTc+Xp8ugpWnviqd4q7FWHeTPJmv6Fq2o32o6rZaq2pPJLcX&#xA;QsJYL52MnKFHuHvLhPRgQlEjSFQBuKGtVWY4q7FWOecfKt/rUmlX2l6iml6xo1xJcWV1Lb/W4v31&#xA;vJbSpJD6kBYFJiRRxRgOvTFUd5T8u2flryzpfl+zZnttLtorWOR6cnEahS7U7sdziqa4qk3nHy5/&#xA;iTy5d6L9Y+q/WvT/AH/D1OPpyrJ9jkla8KdcVTnFWCX35veX7CfzHFexSW40NY2tHbk36Q9V2gpb&#xA;LGruxW7ieBgFJBFehxVvW7NvzJ8p6Xc6Fqtvb6XNMZr61u7Sa5guliDxPaXMImsJQqTfbQkVZeLC&#xA;lQVWY6ZBdW+n28F28MlxFGqSPawm3gJUU/dwtJMUXwXm3zxVE4q7FWEaV+Wr2Pm4ay+pCbTbe8v9&#xA;TsNN+r8ZIrvU1CTs9x6jB0AL8FEakczVmoMVZvirsVSS08tfV/OOpeZPrPL9I2NnY/VeFOH1OW4k&#xA;5+py+Ln9apTiKceprsqneKuxVh2i+TNesPOeoeYbrVLK/jv3cASWEovYbWn7m0hujePGkUbUZgtu&#xA;OZqTuahVmOKuxVhmr+QdR1Pzrp/mCfVYRaabcJc2cAsUW+iAhMUlsl+kiH6tKzepJG8TEn9qlAFW&#xA;Z4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8+1T8i/IF9ZTw/V7v6y9tLbWlxcajqV19&#xA;W9RxKGiSa5ZV4yor/DTcYqy3yx5d0/y5oNno2npxtrRCK1Yl5HYvLKxdnYtJIzOxZianriqaYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">balance_separate_subtract_shuffled</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:36255C8C22206811B005DCFDD4A218DC</stEvt:instanceID>
                  <stEvt:when>2010-01-20T14:52:07-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:37255C8C22206811B005DCFDD4A218DC</stEvt:instanceID>
                  <stEvt:when>2010-01-20T14:52:13-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:36255C8C22206811B005DCFDD4A218DC</stRef:instanceID>
            <stRef:documentID>xmp.did:36255C8C22206811B005DCFDD4A218DC</stRef:documentID>
            <stRef:originalDocumentID>uuid:587954fa-9589-a041-b433-f1826f1b20d1</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:OriginalDocumentID>uuid:587954fa-9589-a041-b433-f1826f1b20d1</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:37255C8C22206811B005DCFDD4A218DC</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:37255C8C22206811B005DCFDD4A218DC</xmpMM:DocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -373.502 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 373.502 li
506.226 373.502 li
506.226 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
51.2559 99.3105 mo
202.256 99.3105 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
202.59 99.5825 mo
353.59 99.5825 li
@
353.985 99.5454 mo
505.485 99.5454 li
@
51.3105 209.295 mo
202.311 209.295 li
@
202.645 209.567 mo
353.645 209.567 li
@
354.04 209.53 mo
505.54 209.53 li
@
51.4961 318.795 mo
202.496 318.795 li
@
202.831 319.067 mo
353.83 319.067 li
@
354.226 319.03 mo
505.726 319.03 li
@
51.2559 121.311 mo
202.256 121.311 li
51.2559 121.311 mo
51.2559 11.5605 li
202.256 11.5605 li
202.256 121.311 li
51.2559 121.311 li
cp
@
200.256 119.811 mo
200.256 121.311 li
195.506 118.061 mo
195.506 121.311 li
195.506 118.061 mo
195.506 121.311 li
190.506 119.811 mo
190.506 121.311 li
185.756 119.811 mo
185.756 121.311 li
181.006 119.811 mo
181.006 121.311 li
176.256 119.811 mo
176.256 121.311 li
171.506 118.061 mo
171.506 121.311 li
166.506 119.811 mo
166.506 121.311 li
161.756 119.811 mo
161.756 121.311 li
157.006 119.811 mo
157.006 121.311 li
152.256 119.811 mo
152.256 121.311 li
147.256 118.061 mo
147.256 121.311 li
142.506 119.811 mo
142.506 121.311 li
137.756 119.811 mo
137.756 121.311 li
133.006 119.811 mo
133.006 121.311 li
128.006 119.811 mo
128.006 121.311 li
123.256 118.061 mo
123.256 121.311 li
118.506 119.811 mo
118.506 121.311 li
113.756 119.811 mo
113.756 121.311 li
108.756 119.811 mo
108.756 121.311 li
104.006 119.811 mo
104.006 121.311 li
99.2559 118.061 mo
99.2559 121.311 li
94.5059 119.811 mo
94.5059 121.311 li
89.5059 119.811 mo
89.5059 121.311 li
84.7559 119.811 mo
84.7559 121.311 li
80.0059 119.811 mo
80.0059 121.311 li
75.2559 118.061 mo
75.2559 121.311 li
70.2559 119.811 mo
70.2559 121.311 li
65.5059 119.811 mo
65.5059 121.311 li
60.7559 119.811 mo
60.7559 121.311 li
56.0059 119.811 mo
56.0059 121.311 li
51.2559 118.061 mo
51.2559 121.311 li
@
51.2559 121.311 mo
51.2559 11.5605 li
@
55.7559 11.5605 mo
51.2559 11.5605 li
55.7559 121.311 mo
51.2559 121.311 li
55.7559 11.5605 mo
51.2559 11.5605 li
53.5059 15.8105 mo
51.2559 15.8105 li
53.5059 20.3105 mo
51.2559 20.3105 li
53.5059 24.5605 mo
51.2559 24.5605 li
53.5059 29.0605 mo
51.2559 29.0605 li
55.7559 33.5605 mo
51.2559 33.5605 li
53.5059 37.8105 mo
51.2559 37.8105 li
53.5059 42.3105 mo
51.2559 42.3105 li
53.5059 46.5605 mo
51.2559 46.5605 li
53.5059 51.0605 mo
51.2559 51.0605 li
55.7559 55.5605 mo
51.2559 55.5605 li
53.5059 59.8105 mo
51.2559 59.8105 li
53.5059 64.3105 mo
51.2559 64.3105 li
53.5059 68.5605 mo
51.2559 68.5605 li
53.5059 73.0605 mo
51.2559 73.0605 li
55.7559 77.5605 mo
51.2559 77.5605 li
53.5059 81.8105 mo
51.2559 81.8105 li
53.5059 86.3105 mo
51.2559 86.3105 li
53.5059 90.5605 mo
51.2559 90.5605 li
53.5059 95.0605 mo
51.2559 95.0605 li
55.7559 99.3105 mo
51.2559 99.3105 li
53.5059 103.811 mo
51.2559 103.811 li
53.5059 108.311 mo
51.2559 108.311 li
53.5059 112.561 mo
51.2559 112.561 li
53.5059 117.061 mo
51.2559 117.061 li
55.7559 121.311 mo
51.2559 121.311 li
@
202.056 103.061 mo
202.056 101.404 200.712 100.061 199.056 100.061 cv
197.4 100.061 196.056 101.404 196.056 103.061 cv
196.056 104.716 197.4 106.061 199.056 106.061 cv
200.712 106.061 202.056 104.716 202.056 103.061 cv
1 0 0 rgb
ef
195.816 93.2207 mo
195.816 91.5645 194.472 90.2207 192.816 90.2207 cv
191.16 90.2207 189.816 91.5645 189.816 93.2207 cv
189.816 94.8765 191.16 96.2207 192.816 96.2207 cv
194.472 96.2207 195.816 94.8765 195.816 93.2207 cv
ef
189.576 95.6206 mo
189.576 93.9644 188.232 92.6206 186.576 92.6206 cv
184.92 92.6206 183.576 93.9644 183.576 95.6206 cv
183.576 97.2764 184.92 98.6206 186.576 98.6206 cv
188.232 98.6206 189.576 97.2764 189.576 95.6206 cv
ef
183.336 103.541 mo
183.336 101.885 181.992 100.541 180.336 100.541 cv
178.68 100.541 177.336 101.885 177.336 103.541 cv
177.336 105.196 178.68 106.541 180.336 106.541 cv
181.992 106.541 183.336 105.196 183.336 103.541 cv
ef
177.096 103.301 mo
177.096 101.645 175.752 100.301 174.096 100.301 cv
172.44 100.301 171.096 101.645 171.096 103.301 cv
171.096 104.957 172.44 106.301 174.096 106.301 cv
175.752 106.301 177.096 104.957 177.096 103.301 cv
ef
170.616 94.6606 mo
170.616 93.0044 169.272 91.6606 167.616 91.6606 cv
165.96 91.6606 164.616 93.0044 164.616 94.6606 cv
164.616 96.3164 165.96 97.6606 167.616 97.6606 cv
169.272 97.6606 170.616 96.3164 170.616 94.6606 cv
ef
164.256 94.9004 mo
164.256 93.2446 162.912 91.9004 161.256 91.9004 cv
159.6 91.9004 158.256 93.2446 158.256 94.9004 cv
158.256 96.5566 159.6 97.9004 161.256 97.9004 cv
162.912 97.9004 164.256 96.5566 164.256 94.9004 cv
ef
157.896 101.86 mo
157.896 100.205 156.552 98.8604 154.896 98.8604 cv
153.24 98.8604 151.896 100.205 151.896 101.86 cv
151.896 103.517 153.24 104.86 154.896 104.86 cv
156.552 104.86 157.896 103.517 157.896 101.86 cv
ef
151.656 102.34 mo
151.656 100.685 150.312 99.3403 148.656 99.3403 cv
147 99.3403 145.656 100.685 145.656 102.34 cv
145.656 103.997 147 105.34 148.656 105.34 cv
150.312 105.34 151.656 103.997 151.656 102.34 cv
ef
145.416 93.2207 mo
145.416 91.5645 144.072 90.2207 142.416 90.2207 cv
140.76 90.2207 139.416 91.5645 139.416 93.2207 cv
139.416 94.8765 140.76 96.2207 142.416 96.2207 cv
144.072 96.2207 145.416 94.8765 145.416 93.2207 cv
ef
139.176 93.7007 mo
139.176 92.0444 137.832 90.7007 136.176 90.7007 cv
134.52 90.7007 133.176 92.0444 133.176 93.7007 cv
133.176 95.3564 134.52 96.7007 136.176 96.7007 cv
137.832 96.7007 139.176 95.3564 139.176 93.7007 cv
ef
132.696 100.661 mo
132.696 99.0044 131.352 97.6606 129.696 97.6606 cv
128.04 97.6606 126.696 99.0044 126.696 100.661 cv
126.696 102.316 128.04 103.661 129.696 103.661 cv
131.352 103.661 132.696 102.316 132.696 100.661 cv
ef
126.456 97.5405 mo
126.456 95.8848 125.112 94.5405 123.456 94.5405 cv
121.8 94.5405 120.456 95.8848 120.456 97.5405 cv
120.456 99.1963 121.8 100.541 123.456 100.541 cv
125.112 100.541 126.456 99.1963 126.456 97.5405 cv
ef
120.216 92.0205 mo
120.216 90.3643 118.872 89.0205 117.216 89.0205 cv
115.56 89.0205 114.216 90.3643 114.216 92.0205 cv
114.216 93.6768 115.56 95.0205 117.216 95.0205 cv
118.872 95.0205 120.216 93.6768 120.216 92.0205 cv
ef
113.976 88.6606 mo
113.976 87.0044 112.632 85.6606 110.976 85.6606 cv
109.32 85.6606 107.976 87.0044 107.976 88.6606 cv
107.976 90.3164 109.32 91.6606 110.976 91.6606 cv
112.632 91.6606 113.976 90.3164 113.976 88.6606 cv
ef
107.736 93.2207 mo
107.736 91.5645 106.392 90.2207 104.736 90.2207 cv
103.08 90.2207 101.736 91.5645 101.736 93.2207 cv
101.736 94.8765 103.08 96.2207 104.736 96.2207 cv
106.392 96.2207 107.736 94.8765 107.736 93.2207 cv
ef
101.256 89.3804 mo
101.256 87.7246 99.9116 86.3804 98.2559 86.3804 cv
96.5996 86.3804 95.2559 87.7246 95.2559 89.3804 cv
95.2559 91.0366 96.5996 92.3804 98.2559 92.3804 cv
99.9116 92.3804 101.256 91.0366 101.256 89.3804 cv
ef
95.0156 79.5405 mo
95.0156 77.8848 93.6719 76.5405 92.0156 76.5405 cv
90.3599 76.5405 89.0156 77.8848 89.0156 79.5405 cv
89.0156 81.1963 90.3599 82.5405 92.0156 82.5405 cv
93.6719 82.5405 95.0156 81.1963 95.0156 79.5405 cv
ef
88.7759 75.4604 mo
88.7759 73.8047 87.4316 72.4604 85.7759 72.4604 cv
84.1196 72.4604 82.7759 73.8047 82.7759 75.4604 cv
82.7759 77.1167 84.1196 78.4604 85.7759 78.4604 cv
87.4316 78.4604 88.7759 77.1167 88.7759 75.4604 cv
ef
82.5356 76.4204 mo
82.5356 74.7646 81.1919 73.4204 79.5356 73.4204 cv
77.8799 73.4204 76.5356 74.7646 76.5356 76.4204 cv
76.5356 78.0767 77.8799 79.4204 79.5356 79.4204 cv
81.1919 79.4204 82.5356 78.0767 82.5356 76.4204 cv
ef
76.2959 68.0205 mo
76.2959 66.3643 74.9517 65.0205 73.2959 65.0205 cv
71.6396 65.0205 70.2959 66.3643 70.2959 68.0205 cv
70.2959 69.6768 71.6396 71.0205 73.2959 71.0205 cv
74.9517 71.0205 76.2959 69.6768 76.2959 68.0205 cv
ef
69.8159 52.0605 mo
69.8159 50.4043 68.4717 49.0605 66.8159 49.0605 cv
65.1597 49.0605 63.8159 50.4043 63.8159 52.0605 cv
63.8159 53.7168 65.1597 55.0605 66.8159 55.0605 cv
68.4717 55.0605 69.8159 53.7168 69.8159 52.0605 cv
ef
63.5757 60.3403 mo
63.5757 58.6846 62.2319 57.3403 60.5757 57.3403 cv
58.9199 57.3403 57.5757 58.6846 57.5757 60.3403 cv
57.5757 61.9966 58.9199 63.3403 60.5757 63.3403 cv
62.2319 63.3403 63.5757 61.9966 63.5757 60.3403 cv
ef
57.3359 50.5005 mo
57.3359 48.8447 55.9917 47.5005 54.3359 47.5005 cv
52.6797 47.5005 51.3359 48.8447 51.3359 50.5005 cv
51.3359 52.1563 52.6797 53.5005 54.3359 53.5005 cv
55.9917 53.5005 57.3359 52.1563 57.3359 50.5005 cv
ef
54.2559 85.0605 mo
51.2559 85.0605 li
51.2559 91.0605 li
57.2559 91.0605 li
57.2559 85.0605 li
54.2559 85.0605 li
cp
60.5059 84.8105 mo
57.5059 84.8105 li
57.5059 90.8105 li
63.5059 90.8105 li
63.5059 84.8105 li
60.5059 84.8105 li
cp
66.7559 83.5605 mo
63.7559 83.5605 li
63.7559 89.5605 li
69.7559 89.5605 li
69.7559 83.5605 li
66.7559 83.5605 li
cp
73.2559 84.0605 mo
70.2559 84.0605 li
70.2559 90.0605 li
76.2559 90.0605 li
76.2559 84.0605 li
73.2559 84.0605 li
cp
79.5059 85.3105 mo
76.5059 85.3105 li
76.5059 91.3105 li
82.5059 91.3105 li
82.5059 85.3105 li
79.5059 85.3105 li
cp
85.7559 84.5605 mo
82.7559 84.5605 li
82.7559 90.5605 li
88.7559 90.5605 li
88.7559 84.5605 li
85.7559 84.5605 li
cp
92.0059 84.5605 mo
89.0059 84.5605 li
89.0059 90.5605 li
95.0059 90.5605 li
95.0059 84.5605 li
92.0059 84.5605 li
cp
98.2559 85.0605 mo
95.2559 85.0605 li
95.2559 91.0605 li
101.256 91.0605 li
101.256 85.0605 li
98.2559 85.0605 li
cp
104.756 86.5605 mo
101.756 86.5605 li
101.756 92.5605 li
107.756 92.5605 li
107.756 86.5605 li
104.756 86.5605 li
cp
111.006 85.5605 mo
108.006 85.5605 li
108.006 91.5605 li
114.006 91.5605 li
114.006 85.5605 li
111.006 85.5605 li
cp
117.256 84.0605 mo
114.256 84.0605 li
114.256 90.0605 li
120.256 90.0605 li
120.256 84.0605 li
117.256 84.0605 li
cp
123.506 83.5605 mo
120.506 83.5605 li
120.506 89.5605 li
126.506 89.5605 li
126.506 83.5605 li
123.506 83.5605 li
cp
129.756 84.5605 mo
126.756 84.5605 li
126.756 90.5605 li
132.756 90.5605 li
132.756 84.5605 li
129.756 84.5605 li
cp
136.256 85.5605 mo
133.256 85.5605 li
133.256 91.5605 li
139.256 91.5605 li
139.256 85.5605 li
136.256 85.5605 li
cp
142.506 84.3105 mo
139.506 84.3105 li
139.506 90.3105 li
145.506 90.3105 li
145.506 84.3105 li
142.506 84.3105 li
cp
148.756 85.5605 mo
145.756 85.5605 li
145.756 91.5605 li
151.756 91.5605 li
151.756 85.5605 li
148.756 85.5605 li
cp
155.006 85.3105 mo
152.006 85.3105 li
152.006 91.3105 li
158.006 91.3105 li
158.006 85.3105 li
155.006 85.3105 li
cp
161.256 85.0605 mo
158.256 85.0605 li
158.256 91.0605 li
164.256 91.0605 li
164.256 85.0605 li
161.256 85.0605 li
cp
167.506 85.3105 mo
164.506 85.3105 li
164.506 91.3105 li
170.506 91.3105 li
170.506 85.3105 li
167.506 85.3105 li
cp
174.006 85.3105 mo
171.006 85.3105 li
171.006 91.3105 li
177.006 91.3105 li
177.006 85.3105 li
174.006 85.3105 li
cp
180.256 83.8105 mo
177.256 83.8105 li
177.256 89.8105 li
183.256 89.8105 li
183.256 83.8105 li
180.256 83.8105 li
cp
186.506 85.0605 mo
183.506 85.0605 li
183.506 91.0605 li
189.506 91.0605 li
189.506 85.0605 li
186.506 85.0605 li
cp
192.756 84.5605 mo
189.756 84.5605 li
189.756 90.5605 li
195.756 90.5605 li
195.756 84.5605 li
192.756 84.5605 li
cp
199.006 85.5605 mo
196.006 85.5605 li
196.006 91.5605 li
202.006 91.5605 li
202.006 85.5605 li
199.006 85.5605 li
cp
0 .4 0 rgb
@
202.59 121.583 mo
353.59 121.583 li
202.59 121.583 mo
202.59 11.8325 li
353.59 11.8325 li
353.59 121.583 li
202.59 121.583 li
cp
0 0 0 rgb
@
351.59 120.083 mo
351.59 121.583 li
346.84 118.333 mo
346.84 121.583 li
346.84 118.333 mo
346.84 121.583 li
342.09 120.083 mo
342.09 121.583 li
337.09 120.083 mo
337.09 121.583 li
332.34 120.083 mo
332.34 121.583 li
327.59 120.083 mo
327.59 121.583 li
322.84 118.333 mo
322.84 121.583 li
317.84 120.083 mo
317.84 121.583 li
313.09 120.083 mo
313.09 121.583 li
308.34 120.083 mo
308.34 121.583 li
303.59 120.083 mo
303.59 121.583 li
298.59 118.333 mo
298.59 121.583 li
293.84 120.083 mo
293.84 121.583 li
289.09 120.083 mo
289.09 121.583 li
284.34 120.083 mo
284.34 121.583 li
279.34 120.083 mo
279.34 121.583 li
274.59 118.333 mo
274.59 121.583 li
269.84 120.083 mo
269.84 121.583 li
265.09 120.083 mo
265.09 121.583 li
260.34 120.083 mo
260.34 121.583 li
255.34 120.083 mo
255.34 121.583 li
250.59 118.333 mo
250.59 121.583 li
245.84 120.083 mo
245.84 121.583 li
241.09 120.083 mo
241.09 121.583 li
236.09 120.083 mo
236.09 121.583 li
231.34 120.083 mo
231.34 121.583 li
226.59 118.333 mo
226.59 121.583 li
221.84 120.083 mo
221.84 121.583 li
216.84 120.083 mo
216.84 121.583 li
212.09 120.083 mo
212.09 121.583 li
207.34 120.083 mo
207.34 121.583 li
202.59 118.333 mo
202.59 121.583 li
@
202.59 121.583 mo
202.59 11.8325 li
@
207.09 11.8325 mo
202.59 11.8325 li
207.09 121.583 mo
202.59 121.583 li
207.09 11.8325 mo
202.59 11.8325 li
204.84 16.0825 mo
202.59 16.0825 li
204.84 20.5825 mo
202.59 20.5825 li
204.84 24.8325 mo
202.59 24.8325 li
204.84 29.3325 mo
202.59 29.3325 li
207.09 33.8325 mo
202.59 33.8325 li
204.84 38.0825 mo
202.59 38.0825 li
204.84 42.5825 mo
202.59 42.5825 li
204.84 46.8325 mo
202.59 46.8325 li
204.84 51.3325 mo
202.59 51.3325 li
207.09 55.8325 mo
202.59 55.8325 li
204.84 60.0825 mo
202.59 60.0825 li
204.84 64.5825 mo
202.59 64.5825 li
204.84 68.8325 mo
202.59 68.8325 li
204.84 73.3325 mo
202.59 73.3325 li
207.09 77.8325 mo
202.59 77.8325 li
204.84 82.0825 mo
202.59 82.0825 li
204.84 86.5825 mo
202.59 86.5825 li
204.84 90.8325 mo
202.59 90.8325 li
204.84 95.3325 mo
202.59 95.3325 li
207.09 99.5825 mo
202.59 99.5825 li
204.84 104.083 mo
202.59 104.083 li
204.84 108.583 mo
202.59 108.583 li
204.84 112.833 mo
202.59 112.833 li
204.84 117.333 mo
202.59 117.333 li
207.09 121.583 mo
202.59 121.583 li
@
353.281 104.052 mo
353.281 102.396 351.936 101.052 350.281 101.052 cv
348.625 101.052 347.281 102.396 347.281 104.052 cv
347.281 105.708 348.625 107.052 350.281 107.052 cv
351.936 107.052 353.281 105.708 353.281 104.052 cv
1 0 0 rgb
ef
347.041 96.3726 mo
347.041 94.7163 345.697 93.3726 344.041 93.3726 cv
342.385 93.3726 341.041 94.7163 341.041 96.3726 cv
341.041 98.0283 342.385 99.3726 344.041 99.3726 cv
345.697 99.3726 347.041 98.0283 347.041 96.3726 cv
ef
340.801 95.1724 mo
340.801 93.5166 339.457 92.1724 337.801 92.1724 cv
336.145 92.1724 334.801 93.5166 334.801 95.1724 cv
334.801 96.8286 336.145 98.1724 337.801 98.1724 cv
339.457 98.1724 340.801 96.8286 340.801 95.1724 cv
ef
334.561 103.092 mo
334.561 101.437 333.217 100.092 331.561 100.092 cv
329.904 100.092 328.561 101.437 328.561 103.092 cv
328.561 104.749 329.904 106.092 331.561 106.092 cv
333.217 106.092 334.561 104.749 334.561 103.092 cv
ef
328.32 101.652 mo
328.32 99.9966 326.977 98.6523 325.32 98.6523 cv
323.664 98.6523 322.32 99.9966 322.32 101.652 cv
322.32 103.309 323.664 104.652 325.32 104.652 cv
326.977 104.652 328.32 103.309 328.32 101.652 cv
ef
322.08 94.6924 mo
322.08 93.0366 320.736 91.6924 319.08 91.6924 cv
317.424 91.6924 316.081 93.0366 316.081 94.6924 cv
316.081 96.3486 317.424 97.6924 319.08 97.6924 cv
320.736 97.6924 322.08 96.3486 322.08 94.6924 cv
ef
315.6 95.8926 mo
315.6 94.2363 314.256 92.8926 312.6 92.8926 cv
310.944 92.8926 309.6 94.2363 309.6 95.8926 cv
309.6 97.5483 310.944 98.8926 312.6 98.8926 cv
314.256 98.8926 315.6 97.5483 315.6 95.8926 cv
ef
309.36 99.2524 mo
309.36 97.5967 308.016 96.2524 306.36 96.2524 cv
304.705 96.2524 303.36 97.5967 303.36 99.2524 cv
303.36 100.909 304.705 102.252 306.36 102.252 cv
308.016 102.252 309.36 100.909 309.36 99.2524 cv
ef
303.121 101.413 mo
303.121 99.7563 301.776 98.4126 300.121 98.4126 cv
298.464 98.4126 297.121 99.7563 297.121 101.413 cv
297.121 103.068 298.464 104.413 300.121 104.413 cv
301.776 104.413 303.121 103.068 303.121 101.413 cv
ef
296.88 94.9326 mo
296.88 93.2764 295.537 91.9326 293.88 91.9326 cv
292.224 91.9326 290.88 93.2764 290.88 94.9326 cv
290.88 96.5884 292.224 97.9326 293.88 97.9326 cv
295.537 97.9326 296.88 96.5884 296.88 94.9326 cv
ef
290.64 95.6523 mo
290.64 93.9966 289.296 92.6523 287.64 92.6523 cv
285.984 92.6523 284.64 93.9966 284.64 95.6523 cv
284.64 97.3086 285.984 98.6523 287.64 98.6523 cv
289.296 98.6523 290.64 97.3086 290.64 95.6523 cv
ef
284.161 98.5327 mo
284.161 96.8765 282.816 95.5327 281.161 95.5327 cv
279.504 95.5327 278.16 96.8765 278.16 98.5327 cv
278.16 100.188 279.504 101.533 281.161 101.533 cv
282.816 101.533 284.161 100.188 284.161 98.5327 cv
ef
277.92 97.0923 mo
277.92 95.4365 276.576 94.0923 274.92 94.0923 cv
273.264 94.0923 271.92 95.4365 271.92 97.0923 cv
271.92 98.7485 273.264 100.092 274.92 100.092 cv
276.576 100.092 277.92 98.7485 277.92 97.0923 cv
ef
271.68 93.4927 mo
271.68 91.8364 270.336 90.4927 268.68 90.4927 cv
267.024 90.4927 265.68 91.8364 265.68 93.4927 cv
265.68 95.1484 267.024 96.4927 268.68 96.4927 cv
270.336 96.4927 271.68 95.1484 271.68 93.4927 cv
ef
265.44 91.5728 mo
265.44 89.9165 264.096 88.5728 262.44 88.5728 cv
260.784 88.5728 259.44 89.9165 259.44 91.5728 cv
259.44 93.2285 260.784 94.5728 262.44 94.5728 cv
264.096 94.5728 265.44 93.2285 265.44 91.5728 cv
ef
259.2 93.9727 mo
259.2 92.3164 257.856 90.9727 256.2 90.9727 cv
254.544 90.9727 253.2 92.3164 253.2 93.9727 cv
253.2 95.6284 254.544 96.9727 256.2 96.9727 cv
257.856 96.9727 259.2 95.6284 259.2 93.9727 cv
ef
252.84 89.4126 mo
252.84 87.7563 251.497 86.4126 249.84 86.4126 cv
248.184 86.4126 246.84 87.7563 246.84 89.4126 cv
246.84 91.0684 248.184 92.4126 249.84 92.4126 cv
251.497 92.4126 252.84 91.0684 252.84 89.4126 cv
ef
246.24 79.5728 mo
246.24 77.9165 244.896 76.5728 243.24 76.5728 cv
241.584 76.5728 240.24 77.9165 240.24 79.5728 cv
240.24 81.2285 241.584 82.5728 243.24 82.5728 cv
244.896 82.5728 246.24 81.2285 246.24 79.5728 cv
ef
240 74.7725 mo
240 73.1167 238.656 71.7725 237 71.7725 cv
235.344 71.7725 234 73.1167 234 74.7725 cv
234 76.4282 235.344 77.7725 237 77.7725 cv
238.656 77.7725 240 76.4282 240 74.7725 cv
ef
233.76 74.0522 mo
233.76 72.3965 232.417 71.0522 230.76 71.0522 cv
229.104 71.0522 227.76 72.3965 227.76 74.0522 cv
227.76 75.7085 229.104 77.0522 230.76 77.0522 cv
232.417 77.0522 233.76 75.7085 233.76 74.0522 cv
ef
227.521 67.0923 mo
227.521 65.4365 226.176 64.0923 224.521 64.0923 cv
222.864 64.0923 221.521 65.4365 221.521 67.0923 cv
221.521 68.7485 222.864 70.0923 224.521 70.0923 cv
226.176 70.0923 227.521 68.7485 227.521 67.0923 cv
ef
221.28 51.4927 mo
221.28 49.8364 219.937 48.4927 218.28 48.4927 cv
216.625 48.4927 215.28 49.8364 215.28 51.4927 cv
215.28 53.1484 216.625 54.4927 218.28 54.4927 cv
219.937 54.4927 221.28 53.1484 221.28 51.4927 cv
ef
214.8 56.2925 mo
214.8 54.6362 213.457 53.2925 211.8 53.2925 cv
210.145 53.2925 208.8 54.6362 208.8 56.2925 cv
208.8 57.9487 210.145 59.2925 211.8 59.2925 cv
213.457 59.2925 214.8 57.9487 214.8 56.2925 cv
ef
208.561 51.0122 mo
208.561 49.3564 207.216 48.0122 205.561 48.0122 cv
203.904 48.0122 202.561 49.3564 202.561 51.0122 cv
202.561 52.6685 203.904 54.0122 205.561 54.0122 cv
207.216 54.0122 208.561 52.6685 208.561 51.0122 cv
ef
205.59 85.0825 mo
202.59 85.0825 li
202.59 91.0825 li
208.59 91.0825 li
208.59 85.0825 li
205.59 85.0825 li
cp
211.84 84.8325 mo
208.84 84.8325 li
208.84 90.8325 li
214.84 90.8325 li
214.84 84.8325 li
211.84 84.8325 li
cp
218.34 84.8325 mo
215.34 84.8325 li
215.34 90.8325 li
221.34 90.8325 li
221.34 84.8325 li
218.34 84.8325 li
cp
224.59 84.0825 mo
221.59 84.0825 li
221.59 90.0825 li
227.59 90.0825 li
227.59 84.0825 li
224.59 84.0825 li
cp
230.84 85.3325 mo
227.84 85.3325 li
227.84 91.3325 li
233.84 91.3325 li
233.84 85.3325 li
230.84 85.3325 li
cp
237.09 84.3325 mo
234.09 84.3325 li
234.09 90.3325 li
240.09 90.3325 li
240.09 84.3325 li
237.09 84.3325 li
cp
243.34 84.5825 mo
240.34 84.5825 li
240.34 90.5825 li
246.34 90.5825 li
246.34 84.5825 li
243.34 84.5825 li
cp
249.84 84.0825 mo
246.84 84.0825 li
246.84 90.0825 li
252.84 90.0825 li
252.84 84.0825 li
249.84 84.0825 li
cp
256.09 85.8325 mo
253.09 85.8325 li
253.09 91.8325 li
259.09 91.8325 li
259.09 85.8325 li
256.09 85.8325 li
cp
262.34 85.3325 mo
259.34 85.3325 li
259.34 91.3325 li
265.34 91.3325 li
265.34 85.3325 li
262.34 85.3325 li
cp
268.59 84.5825 mo
265.59 84.5825 li
265.59 90.5825 li
271.59 90.5825 li
271.59 84.5825 li
268.59 84.5825 li
cp
274.84 84.3325 mo
271.84 84.3325 li
271.84 90.3325 li
277.84 90.3325 li
277.84 84.3325 li
274.84 84.3325 li
cp
281.09 84.5825 mo
278.09 84.5825 li
278.09 90.5825 li
284.09 90.5825 li
284.09 84.5825 li
281.09 84.5825 li
cp
287.59 84.3325 mo
284.59 84.3325 li
284.59 90.3325 li
290.59 90.3325 li
290.59 84.3325 li
287.59 84.3325 li
cp
293.84 85.3325 mo
290.84 85.3325 li
290.84 91.3325 li
296.84 91.3325 li
296.84 85.3325 li
293.84 85.3325 li
cp
300.09 85.3325 mo
297.09 85.3325 li
297.09 91.3325 li
303.09 91.3325 li
303.09 85.3325 li
300.09 85.3325 li
cp
306.34 85.3325 mo
303.34 85.3325 li
303.34 91.3325 li
309.34 91.3325 li
309.34 85.3325 li
306.34 85.3325 li
cp
312.59 82.8325 mo
309.59 82.8325 li
309.59 88.8325 li
315.59 88.8325 li
315.59 82.8325 li
312.59 82.8325 li
cp
319.09 84.0825 mo
316.09 84.0825 li
316.09 90.0825 li
322.09 90.0825 li
322.09 84.0825 li
319.09 84.0825 li
cp
325.34 85.5825 mo
322.34 85.5825 li
322.34 91.5825 li
328.34 91.5825 li
328.34 85.5825 li
325.34 85.5825 li
cp
331.59 84.5825 mo
328.59 84.5825 li
328.59 90.5825 li
334.59 90.5825 li
334.59 84.5825 li
331.59 84.5825 li
cp
337.84 84.5825 mo
334.84 84.5825 li
334.84 90.5825 li
340.84 90.5825 li
340.84 84.5825 li
337.84 84.5825 li
cp
344.09 85.5825 mo
341.09 85.5825 li
341.09 91.5825 li
347.09 91.5825 li
347.09 85.5825 li
344.09 85.5825 li
cp
350.34 84.0825 mo
347.34 84.0825 li
347.34 90.0825 li
353.34 90.0825 li
353.34 84.0825 li
350.34 84.0825 li
cp
0 .4 0 rgb
@
353.985 121.545 mo
505.485 121.545 li
353.985 121.545 mo
353.985 11.7954 li
505.485 11.7954 li
505.485 121.545 li
353.985 121.545 li
cp
0 0 0 rgb
@
503.485 120.045 mo
503.485 121.545 li
498.735 118.295 mo
498.735 121.545 li
498.735 118.295 mo
498.735 121.545 li
493.985 120.045 mo
493.985 121.545 li
488.985 120.045 mo
488.985 121.545 li
484.235 120.045 mo
484.235 121.545 li
479.485 120.045 mo
479.485 121.545 li
474.485 118.295 mo
474.485 121.545 li
469.735 120.045 mo
469.735 121.545 li
464.985 120.045 mo
464.985 121.545 li
460.235 120.045 mo
460.235 121.545 li
455.235 120.045 mo
455.235 121.545 li
450.485 118.295 mo
450.485 121.545 li
445.735 120.045 mo
445.735 121.545 li
440.735 120.045 mo
440.735 121.545 li
435.985 120.045 mo
435.985 121.545 li
431.235 120.045 mo
431.235 121.545 li
426.235 118.295 mo
426.235 121.545 li
421.485 120.045 mo
421.485 121.545 li
416.735 120.045 mo
416.735 121.545 li
411.985 120.045 mo
411.985 121.545 li
406.985 120.045 mo
406.985 121.545 li
402.235 118.295 mo
402.235 121.545 li
397.485 120.045 mo
397.485 121.545 li
392.485 120.045 mo
392.485 121.545 li
387.735 120.045 mo
387.735 121.545 li
382.985 120.045 mo
382.985 121.545 li
378.235 118.295 mo
378.235 121.545 li
373.235 120.045 mo
373.235 121.545 li
368.485 120.045 mo
368.485 121.545 li
363.735 120.045 mo
363.735 121.545 li
358.735 120.045 mo
358.735 121.545 li
353.985 118.295 mo
353.985 121.545 li
@
353.985 121.545 mo
353.985 11.7954 li
@
358.485 11.7954 mo
353.985 11.7954 li
358.485 121.545 mo
353.985 121.545 li
358.485 11.7954 mo
353.985 11.7954 li
356.235 16.0454 mo
353.985 16.0454 li
356.235 20.5454 mo
353.985 20.5454 li
356.235 24.7954 mo
353.985 24.7954 li
356.235 29.2954 mo
353.985 29.2954 li
358.485 33.7954 mo
353.985 33.7954 li
356.235 38.0454 mo
353.985 38.0454 li
356.235 42.5454 mo
353.985 42.5454 li
356.235 46.7954 mo
353.985 46.7954 li
356.235 51.2954 mo
353.985 51.2954 li
358.485 55.7954 mo
353.985 55.7954 li
356.235 60.0454 mo
353.985 60.0454 li
356.235 64.5454 mo
353.985 64.5454 li
356.235 68.7954 mo
353.985 68.7954 li
356.235 73.2954 mo
353.985 73.2954 li
358.485 77.7954 mo
353.985 77.7954 li
356.235 82.0454 mo
353.985 82.0454 li
356.235 86.5454 mo
353.985 86.5454 li
356.235 90.7954 mo
353.985 90.7954 li
356.235 95.2954 mo
353.985 95.2954 li
358.485 99.5454 mo
353.985 99.5454 li
356.235 104.045 mo
353.985 104.045 li
356.235 108.545 mo
353.985 108.545 li
356.235 112.795 mo
353.985 112.795 li
356.235 117.295 mo
353.985 117.295 li
358.485 121.545 mo
353.985 121.545 li
@
505.526 101.855 mo
505.526 100.199 504.183 98.8555 502.526 98.8555 cv
500.87 98.8555 499.526 100.199 499.526 101.855 cv
499.526 103.511 500.87 104.855 502.526 104.855 cv
504.183 104.855 505.526 103.511 505.526 101.855 cv
1 0 0 rgb
ef
499.046 95.1353 mo
499.046 93.4795 497.702 92.1353 496.046 92.1353 cv
494.39 92.1353 493.046 93.4795 493.046 95.1353 cv
493.046 96.7915 494.39 98.1353 496.046 98.1353 cv
497.702 98.1353 499.046 96.7915 499.046 95.1353 cv
ef
492.806 95.1353 mo
492.806 93.4795 491.462 92.1353 489.806 92.1353 cv
488.149 92.1353 486.806 93.4795 486.806 95.1353 cv
486.806 96.7915 488.149 98.1353 489.806 98.1353 cv
491.462 98.1353 492.806 96.7915 492.806 95.1353 cv
ef
486.565 102.575 mo
486.565 100.919 485.222 99.5752 483.565 99.5752 cv
481.909 99.5752 480.565 100.919 480.565 102.575 cv
480.565 104.231 481.909 105.575 483.565 105.575 cv
485.222 105.575 486.565 104.231 486.565 102.575 cv
ef
480.325 102.095 mo
480.325 100.439 478.981 99.0952 477.325 99.0952 cv
475.669 99.0952 474.325 100.439 474.325 102.095 cv
474.325 103.751 475.669 105.095 477.325 105.095 cv
478.981 105.095 480.325 103.751 480.325 102.095 cv
ef
473.847 96.8154 mo
473.847 95.1592 472.501 93.8154 470.847 93.8154 cv
469.19 93.8154 467.847 95.1592 467.847 96.8154 cv
467.847 98.4712 469.19 99.8154 470.847 99.8154 cv
472.501 99.8154 473.847 98.4712 473.847 96.8154 cv
ef
467.485 97.0552 mo
467.485 95.3994 466.142 94.0552 464.485 94.0552 cv
462.829 94.0552 461.485 95.3994 461.485 97.0552 cv
461.485 98.7114 462.829 100.055 464.485 100.055 cv
466.142 100.055 467.485 98.7114 467.485 97.0552 cv
ef
461.126 100.896 mo
461.126 99.2393 459.782 97.8955 458.126 97.8955 cv
456.47 97.8955 455.126 99.2393 455.126 100.896 cv
455.126 102.551 456.47 103.896 458.126 103.896 cv
459.782 103.896 461.126 102.551 461.126 100.896 cv
ef
454.886 100.896 mo
454.886 99.2393 453.542 97.8955 451.886 97.8955 cv
450.229 97.8955 448.886 99.2393 448.886 100.896 cv
448.886 102.551 450.229 103.896 451.886 103.896 cv
453.542 103.896 454.886 102.551 454.886 100.896 cv
ef
448.405 95.8555 mo
448.405 94.1992 447.062 92.8555 445.405 92.8555 cv
443.749 92.8555 442.405 94.1992 442.405 95.8555 cv
442.405 97.5112 443.749 98.8555 445.405 98.8555 cv
447.062 98.8555 448.405 97.5112 448.405 95.8555 cv
ef
442.165 96.5752 mo
442.165 94.9194 440.821 93.5752 439.165 93.5752 cv
437.511 93.5752 436.165 94.9194 436.165 96.5752 cv
436.165 98.2314 437.511 99.5752 439.165 99.5752 cv
440.821 99.5752 442.165 98.2314 442.165 96.5752 cv
ef
435.927 97.7754 mo
435.927 96.1196 434.581 94.7754 432.927 94.7754 cv
431.271 94.7754 429.927 96.1196 429.927 97.7754 cv
429.927 99.4312 431.271 100.775 432.927 100.775 cv
434.581 100.775 435.927 99.4312 435.927 97.7754 cv
ef
429.687 96.3354 mo
429.687 94.6792 428.343 93.3354 426.687 93.3354 cv
425.03 93.3354 423.687 94.6792 423.687 96.3354 cv
423.687 97.9912 425.03 99.3354 426.687 99.3354 cv
428.343 99.3354 429.687 97.9912 429.687 96.3354 cv
ef
423.206 92.9756 mo
423.206 91.3193 421.862 89.9756 420.206 89.9756 cv
418.55 89.9756 417.206 91.3193 417.206 92.9756 cv
417.206 94.6313 418.55 95.9756 420.206 95.9756 cv
421.862 95.9756 423.206 94.6313 423.206 92.9756 cv
ef
416.966 92.0151 mo
416.966 90.3594 415.622 89.0151 413.966 89.0151 cv
412.31 89.0151 410.966 90.3594 410.966 92.0151 cv
410.966 93.6714 412.31 95.0151 413.966 95.0151 cv
415.622 95.0151 416.966 93.6714 416.966 92.0151 cv
ef
410.726 90.8154 mo
410.726 89.1592 409.382 87.8154 407.726 87.8154 cv
406.069 87.8154 404.726 89.1592 404.726 90.8154 cv
404.726 92.4712 406.069 93.8154 407.726 93.8154 cv
409.382 93.8154 410.726 92.4712 410.726 90.8154 cv
ef
404.245 89.1353 mo
404.245 87.4795 402.901 86.1353 401.245 86.1353 cv
399.589 86.1353 398.245 87.4795 398.245 89.1353 cv
398.245 90.7915 399.589 92.1353 401.245 92.1353 cv
402.901 92.1353 404.245 90.7915 404.245 89.1353 cv
ef
398.005 82.8955 mo
398.005 81.2393 396.661 79.8955 395.005 79.8955 cv
393.351 79.8955 392.005 81.2393 392.005 82.8955 cv
392.005 84.5513 393.351 85.8955 395.005 85.8955 cv
396.661 85.8955 398.005 84.5513 398.005 82.8955 cv
ef
391.767 75.4556 mo
391.767 73.7993 390.421 72.4556 388.767 72.4556 cv
387.11 72.4556 385.767 73.7993 385.767 75.4556 cv
385.767 77.1113 387.11 78.4556 388.767 78.4556 cv
390.421 78.4556 391.767 77.1113 391.767 75.4556 cv
ef
385.526 76.2954 mo
385.526 74.6392 384.183 73.2954 382.526 73.2954 cv
380.87 73.2954 379.526 74.6392 379.526 76.2954 cv
379.526 77.9517 380.87 79.2954 382.526 79.2954 cv
384.183 79.2954 385.526 77.9517 385.526 76.2954 cv
ef
379.046 66.8154 mo
379.046 65.1597 377.702 63.8154 376.046 63.8154 cv
374.39 63.8154 373.046 65.1597 373.046 66.8154 cv
373.046 68.4712 374.39 69.8154 376.046 69.8154 cv
377.702 69.8154 379.046 68.4712 379.046 66.8154 cv
ef
372.806 51.9355 mo
372.806 50.2793 371.462 48.9355 369.806 48.9355 cv
368.149 48.9355 366.806 50.2793 366.806 51.9355 cv
366.806 53.5913 368.149 54.9355 369.806 54.9355 cv
371.462 54.9355 372.806 53.5913 372.806 51.9355 cv
ef
366.565 54.5752 mo
366.565 52.9194 365.222 51.5752 363.565 51.5752 cv
361.909 51.5752 360.565 52.9194 360.565 54.5752 cv
360.565 56.2314 361.909 57.5752 363.565 57.5752 cv
365.222 57.5752 366.565 56.2314 366.565 54.5752 cv
ef
360.325 55.0552 mo
360.325 53.3994 358.981 52.0552 357.325 52.0552 cv
355.669 52.0552 354.325 53.3994 354.325 55.0552 cv
354.325 56.7114 355.669 58.0552 357.325 58.0552 cv
358.981 58.0552 360.325 56.7114 360.325 55.0552 cv
ef
357.235 82.5454 mo
354.235 82.5454 li
354.235 88.5454 li
360.235 88.5454 li
360.235 82.5454 li
357.235 82.5454 li
cp
363.485 85.0454 mo
360.485 85.0454 li
360.485 91.0454 li
366.485 91.0454 li
366.485 85.0454 li
363.485 85.0454 li
cp
369.735 84.5454 mo
366.735 84.5454 li
366.735 90.5454 li
372.735 90.5454 li
372.735 84.5454 li
369.735 84.5454 li
cp
375.985 84.7954 mo
372.985 84.7954 li
372.985 90.7954 li
378.985 90.7954 li
378.985 84.7954 li
375.985 84.7954 li
cp
382.485 85.5454 mo
379.485 85.5454 li
379.485 91.5454 li
385.485 91.5454 li
385.485 85.5454 li
382.485 85.5454 li
cp
388.735 84.5454 mo
385.735 84.5454 li
385.735 90.5454 li
391.735 90.5454 li
391.735 84.5454 li
388.735 84.5454 li
cp
394.985 84.5454 mo
391.985 84.5454 li
391.985 90.5454 li
397.985 90.5454 li
397.985 84.5454 li
394.985 84.5454 li
cp
401.235 85.0454 mo
398.235 85.0454 li
398.235 91.0454 li
404.235 91.0454 li
404.235 85.0454 li
401.235 85.0454 li
cp
407.735 85.2954 mo
404.735 85.2954 li
404.735 91.2954 li
410.735 91.2954 li
410.735 85.2954 li
407.735 85.2954 li
cp
413.985 85.2954 mo
410.985 85.2954 li
410.985 91.2954 li
416.985 91.2954 li
416.985 85.2954 li
413.985 85.2954 li
cp
420.235 85.5454 mo
417.235 85.5454 li
417.235 91.5454 li
423.235 91.5454 li
423.235 85.5454 li
420.235 85.5454 li
cp
426.735 85.0454 mo
423.735 85.0454 li
423.735 91.0454 li
429.735 91.0454 li
429.735 85.0454 li
426.735 85.0454 li
cp
432.985 85.0454 mo
429.985 85.0454 li
429.985 91.0454 li
435.985 91.0454 li
435.985 85.0454 li
432.985 85.0454 li
cp
439.235 84.5454 mo
436.235 84.5454 li
436.235 90.5454 li
442.235 90.5454 li
442.235 84.5454 li
439.235 84.5454 li
cp
445.485 85.2954 mo
442.485 85.2954 li
442.485 91.2954 li
448.485 91.2954 li
448.485 85.2954 li
445.485 85.2954 li
cp
451.985 84.2954 mo
448.985 84.2954 li
448.985 90.2954 li
454.985 90.2954 li
454.985 84.2954 li
451.985 84.2954 li
cp
458.235 85.0454 mo
455.235 85.0454 li
455.235 91.0454 li
461.235 91.0454 li
461.235 85.0454 li
458.235 85.0454 li
cp
464.485 85.5454 mo
461.485 85.5454 li
461.485 91.5454 li
467.485 91.5454 li
467.485 85.5454 li
464.485 85.5454 li
cp
470.735 84.5454 mo
467.735 84.5454 li
467.735 90.5454 li
473.735 90.5454 li
473.735 84.5454 li
470.735 84.5454 li
cp
477.235 84.5454 mo
474.235 84.5454 li
474.235 90.5454 li
480.235 90.5454 li
480.235 84.5454 li
477.235 84.5454 li
cp
483.485 85.0454 mo
480.485 85.0454 li
480.485 91.0454 li
486.485 91.0454 li
486.485 85.0454 li
483.485 85.0454 li
cp
489.735 84.5454 mo
486.735 84.5454 li
486.735 90.5454 li
492.735 90.5454 li
492.735 84.5454 li
489.735 84.5454 li
cp
495.985 85.0454 mo
492.985 85.0454 li
492.985 91.0454 li
498.985 91.0454 li
498.985 85.0454 li
495.985 85.0454 li
cp
502.485 85.0454 mo
499.485 85.0454 li
499.485 91.0454 li
505.485 91.0454 li
505.485 85.0454 li
502.485 85.0454 li
cp
0 .4 0 rgb
@
51.3105 231.045 mo
202.311 231.045 li
51.3105 231.045 mo
51.3105 121.545 li
202.311 121.545 li
202.311 231.045 li
51.3105 231.045 li
cp
0 0 0 rgb
@
200.311 229.545 mo
200.311 231.045 li
195.561 227.795 mo
195.561 231.045 li
195.561 227.795 mo
195.561 231.045 li
190.561 229.545 mo
190.561 231.045 li
185.811 229.545 mo
185.811 231.045 li
181.061 229.545 mo
181.061 231.045 li
176.311 229.545 mo
176.311 231.045 li
171.561 227.795 mo
171.561 231.045 li
166.561 229.545 mo
166.561 231.045 li
161.811 229.545 mo
161.811 231.045 li
157.061 229.545 mo
157.061 231.045 li
152.311 229.545 mo
152.311 231.045 li
147.311 227.795 mo
147.311 231.045 li
142.561 229.545 mo
142.561 231.045 li
137.811 229.545 mo
137.811 231.045 li
133.061 229.545 mo
133.061 231.045 li
128.061 229.545 mo
128.061 231.045 li
123.311 227.795 mo
123.311 231.045 li
118.561 229.545 mo
118.561 231.045 li
113.811 229.545 mo
113.811 231.045 li
108.811 229.545 mo
108.811 231.045 li
104.061 229.545 mo
104.061 231.045 li
99.3105 227.795 mo
99.3105 231.045 li
94.5605 229.545 mo
94.5605 231.045 li
89.5605 229.545 mo
89.5605 231.045 li
84.8105 229.545 mo
84.8105 231.045 li
80.0605 229.545 mo
80.0605 231.045 li
75.3105 227.795 mo
75.3105 231.045 li
70.3105 229.545 mo
70.3105 231.045 li
65.5605 229.545 mo
65.5605 231.045 li
60.8105 229.545 mo
60.8105 231.045 li
56.0605 229.545 mo
56.0605 231.045 li
51.3105 227.795 mo
51.3105 231.045 li
@
51.3105 231.045 mo
51.3105 121.545 li
@
55.8105 121.545 mo
51.3105 121.545 li
55.8105 231.045 mo
51.3105 231.045 li
55.8105 121.545 mo
51.3105 121.545 li
53.5605 126.045 mo
51.3105 126.045 li
53.5605 130.295 mo
51.3105 130.295 li
53.5605 134.795 mo
51.3105 134.795 li
53.5605 139.045 mo
51.3105 139.045 li
55.8105 143.545 mo
51.3105 143.545 li
53.5605 147.795 mo
51.3105 147.795 li
53.5605 152.295 mo
51.3105 152.295 li
53.5605 156.545 mo
51.3105 156.545 li
53.5605 161.045 mo
51.3105 161.045 li
55.8105 165.295 mo
51.3105 165.295 li
53.5605 169.795 mo
51.3105 169.795 li
53.5605 174.045 mo
51.3105 174.045 li
53.5605 178.545 mo
51.3105 178.545 li
53.5605 183.045 mo
51.3105 183.045 li
55.8105 187.295 mo
51.3105 187.295 li
53.5605 191.795 mo
51.3105 191.795 li
53.5605 196.045 mo
51.3105 196.045 li
53.5605 200.545 mo
51.3105 200.545 li
53.5605 204.795 mo
51.3105 204.795 li
55.8105 209.295 mo
51.3105 209.295 li
53.5605 213.545 mo
51.3105 213.545 li
53.5605 218.045 mo
51.3105 218.045 li
53.5605 222.295 mo
51.3105 222.295 li
53.5605 226.795 mo
51.3105 226.795 li
55.8105 231.045 mo
51.3105 231.045 li
@
202.11 213.076 mo
202.11 211.419 200.767 210.076 199.11 210.076 cv
197.455 210.076 196.11 211.419 196.11 213.076 cv
196.11 214.731 197.455 216.076 199.11 216.076 cv
200.767 216.076 202.11 214.731 202.11 213.076 cv
1 0 0 rgb
ef
195.871 205.635 mo
195.871 203.979 194.526 202.635 192.871 202.635 cv
191.214 202.635 189.871 203.979 189.871 205.635 cv
189.871 207.292 191.214 208.635 192.871 208.635 cv
194.526 208.635 195.871 207.292 195.871 205.635 cv
ef
189.63 204.795 mo
189.63 203.139 188.287 201.795 186.63 201.795 cv
184.975 201.795 183.63 203.139 183.63 204.795 cv
183.63 206.452 184.975 207.795 186.63 207.795 cv
188.287 207.795 189.63 206.452 189.63 204.795 cv
ef
183.391 209.956 mo
183.391 208.299 182.046 206.956 180.391 206.956 cv
178.734 206.956 177.391 208.299 177.391 209.956 cv
177.391 211.612 178.734 212.956 180.391 212.956 cv
182.046 212.956 183.391 211.612 183.391 209.956 cv
ef
177.15 209.236 mo
177.15 207.58 175.807 206.236 174.15 206.236 cv
172.495 206.236 171.15 207.58 171.15 209.236 cv
171.15 210.891 172.495 212.236 174.15 212.236 cv
175.807 212.236 177.15 210.891 177.15 209.236 cv
ef
170.67 205.395 mo
170.67 203.74 169.327 202.395 167.67 202.395 cv
166.015 202.395 164.67 203.74 164.67 205.395 cv
164.67 207.051 166.015 208.395 167.67 208.395 cv
169.327 208.395 170.67 207.051 170.67 205.395 cv
ef
164.311 207.076 mo
164.311 205.419 162.967 204.076 161.311 204.076 cv
159.654 204.076 158.311 205.419 158.311 207.076 cv
158.311 208.731 159.654 210.076 161.311 210.076 cv
162.967 210.076 164.311 208.731 164.311 207.076 cv
ef
157.951 208.755 mo
157.951 207.099 156.606 205.755 154.951 205.755 cv
153.294 205.755 151.951 207.099 151.951 208.755 cv
151.951 210.412 153.294 211.755 154.951 211.755 cv
156.606 211.755 157.951 210.412 157.951 208.755 cv
ef
151.71 209.236 mo
151.71 207.58 150.367 206.236 148.71 206.236 cv
147.055 206.236 145.71 207.58 145.71 209.236 cv
145.71 210.891 147.055 212.236 148.71 212.236 cv
150.367 212.236 151.71 210.891 151.71 209.236 cv
ef
145.471 205.156 mo
145.471 203.5 144.126 202.156 142.471 202.156 cv
140.814 202.156 139.471 203.5 139.471 205.156 cv
139.471 206.811 140.814 208.156 142.471 208.156 cv
144.126 208.156 145.471 206.811 145.471 205.156 cv
ef
139.23 205.635 mo
139.23 203.979 137.887 202.635 136.23 202.635 cv
134.575 202.635 133.23 203.979 133.23 205.635 cv
133.23 207.292 134.575 208.635 136.23 208.635 cv
137.887 208.635 139.23 207.292 139.23 205.635 cv
ef
132.75 205.156 mo
132.75 203.5 131.407 202.156 129.75 202.156 cv
128.095 202.156 126.75 203.5 126.75 205.156 cv
126.75 206.811 128.095 208.156 129.75 208.156 cv
131.407 208.156 132.75 206.811 132.75 205.156 cv
ef
126.511 205.875 mo
126.511 204.219 125.167 202.875 123.511 202.875 cv
121.854 202.875 120.511 204.219 120.511 205.875 cv
120.511 207.532 121.854 208.875 123.511 208.875 cv
125.167 208.875 126.511 207.532 126.511 205.875 cv
ef
120.271 203.715 mo
120.271 202.059 118.927 200.715 117.271 200.715 cv
115.615 200.715 114.271 202.059 114.271 203.715 cv
114.271 205.372 115.615 206.715 117.271 206.715 cv
118.927 206.715 120.271 205.372 120.271 203.715 cv
ef
114.031 201.076 mo
114.031 199.419 112.687 198.076 111.031 198.076 cv
109.375 198.076 108.031 199.419 108.031 201.076 cv
108.031 202.731 109.375 204.076 111.031 204.076 cv
112.687 204.076 114.031 202.731 114.031 201.076 cv
ef
107.791 198.795 mo
107.791 197.139 106.447 195.795 104.791 195.795 cv
103.135 195.795 101.791 197.139 101.791 198.795 cv
101.791 200.452 103.135 201.795 104.791 201.795 cv
106.447 201.795 107.791 200.452 107.791 198.795 cv
ef
101.311 196.276 mo
101.311 194.62 99.9663 193.276 98.3105 193.276 cv
96.6543 193.276 95.3105 194.62 95.3105 196.276 cv
95.3105 197.931 96.6543 199.276 98.3105 199.276 cv
99.9663 199.276 101.311 197.931 101.311 196.276 cv
ef
95.0703 191.956 mo
95.0703 190.299 93.7266 188.956 92.0703 188.956 cv
90.4146 188.956 89.0703 190.299 89.0703 191.956 cv
89.0703 193.612 90.4146 194.956 92.0703 194.956 cv
93.7266 194.956 95.0703 193.612 95.0703 191.956 cv
ef
88.8306 186.916 mo
88.8306 185.259 87.4863 183.916 85.8306 183.916 cv
84.1743 183.916 82.8306 185.259 82.8306 186.916 cv
82.8306 188.572 84.1743 189.916 85.8306 189.916 cv
87.4863 189.916 88.8306 188.572 88.8306 186.916 cv
ef
82.5903 185.236 mo
82.5903 183.58 81.2466 182.236 79.5903 182.236 cv
77.9346 182.236 76.5903 183.58 76.5903 185.236 cv
76.5903 186.891 77.9346 188.236 79.5903 188.236 cv
81.2466 188.236 82.5903 186.891 82.5903 185.236 cv
ef
76.3506 177.076 mo
76.3506 175.419 75.0063 174.075 73.3506 174.075 cv
71.6943 174.075 70.3506 175.419 70.3506 177.076 cv
70.3506 178.731 71.6943 180.076 73.3506 180.076 cv
75.0063 180.076 76.3506 178.731 76.3506 177.076 cv
ef
69.8706 166.755 mo
69.8706 165.099 68.5264 163.755 66.8706 163.755 cv
65.2144 163.755 63.8706 165.099 63.8706 166.755 cv
63.8706 168.412 65.2144 169.755 66.8706 169.755 cv
68.5264 169.755 69.8706 168.412 69.8706 166.755 cv
ef
63.6304 163.875 mo
63.6304 162.219 62.2866 160.875 60.6304 160.875 cv
58.9746 160.875 57.6304 162.219 57.6304 163.875 cv
57.6304 165.531 58.9746 166.875 60.6304 166.875 cv
62.2866 166.875 63.6304 165.531 63.6304 163.875 cv
ef
57.3906 166.275 mo
57.3906 164.62 56.0464 163.275 54.3906 163.275 cv
52.7344 163.275 51.3906 164.62 51.3906 166.275 cv
51.3906 167.931 52.7344 169.275 54.3906 169.275 cv
56.0464 169.275 57.3906 167.931 57.3906 166.275 cv
ef
54.3105 194.045 mo
51.3105 194.045 li
51.3105 200.045 li
57.3105 200.045 li
57.3105 194.045 li
54.3105 194.045 li
cp
60.5605 193.795 mo
57.5605 193.795 li
57.5605 199.795 li
63.5605 199.795 li
63.5605 193.795 li
60.5605 193.795 li
cp
66.8105 193.795 mo
63.8105 193.795 li
63.8105 199.795 li
69.8105 199.795 li
69.8105 193.795 li
66.8105 193.795 li
cp
73.3105 194.545 mo
70.3105 194.545 li
70.3105 200.545 li
76.3105 200.545 li
76.3105 194.545 li
73.3105 194.545 li
cp
79.5605 194.045 mo
76.5605 194.045 li
76.5605 200.045 li
82.5605 200.045 li
82.5605 194.045 li
79.5605 194.045 li
cp
85.8105 194.295 mo
82.8105 194.295 li
82.8105 200.295 li
88.8105 200.295 li
88.8105 194.295 li
85.8105 194.295 li
cp
92.0605 195.295 mo
89.0605 195.295 li
89.0605 201.295 li
95.0605 201.295 li
95.0605 195.295 li
92.0605 195.295 li
cp
98.3105 195.045 mo
95.3105 195.045 li
95.3105 201.045 li
101.311 201.045 li
101.311 195.045 li
98.3105 195.045 li
cp
104.811 195.295 mo
101.811 195.295 li
101.811 201.295 li
107.811 201.295 li
107.811 195.295 li
104.811 195.295 li
cp
111.061 194.795 mo
108.061 194.795 li
108.061 200.795 li
114.061 200.795 li
114.061 194.795 li
111.061 194.795 li
cp
117.311 194.545 mo
114.311 194.545 li
114.311 200.545 li
120.311 200.545 li
120.311 194.545 li
117.311 194.545 li
cp
123.561 194.545 mo
120.561 194.545 li
120.561 200.545 li
126.561 200.545 li
126.561 194.545 li
123.561 194.545 li
cp
129.811 194.045 mo
126.811 194.045 li
126.811 200.045 li
132.811 200.045 li
132.811 194.045 li
129.811 194.045 li
cp
136.311 194.545 mo
133.311 194.545 li
133.311 200.545 li
139.311 200.545 li
139.311 194.545 li
136.311 194.545 li
cp
142.561 195.045 mo
139.561 195.045 li
139.561 201.045 li
145.561 201.045 li
145.561 195.045 li
142.561 195.045 li
cp
148.811 193.545 mo
145.811 193.545 li
145.811 199.545 li
151.811 199.545 li
151.811 193.545 li
148.811 193.545 li
cp
155.061 195.295 mo
152.061 195.295 li
152.061 201.295 li
158.061 201.295 li
158.061 195.295 li
155.061 195.295 li
cp
161.311 194.045 mo
158.311 194.045 li
158.311 200.045 li
164.311 200.045 li
164.311 194.045 li
161.311 194.045 li
cp
167.561 194.295 mo
164.561 194.295 li
164.561 200.295 li
170.561 200.295 li
170.561 194.295 li
167.561 194.295 li
cp
174.061 194.295 mo
171.061 194.295 li
171.061 200.295 li
177.061 200.295 li
177.061 194.295 li
174.061 194.295 li
cp
180.311 194.545 mo
177.311 194.545 li
177.311 200.545 li
183.311 200.545 li
183.311 194.545 li
180.311 194.545 li
cp
186.561 194.045 mo
183.561 194.045 li
183.561 200.045 li
189.561 200.045 li
189.561 194.045 li
186.561 194.045 li
cp
192.811 194.545 mo
189.811 194.545 li
189.811 200.545 li
195.811 200.545 li
195.811 194.545 li
192.811 194.545 li
cp
199.061 194.295 mo
196.061 194.295 li
196.061 200.295 li
202.061 200.295 li
202.061 194.295 li
199.061 194.295 li
cp
0 .4 0 rgb
@
202.645 231.317 mo
353.645 231.317 li
202.645 231.317 mo
202.645 121.817 li
353.645 121.817 li
353.645 231.317 li
202.645 231.317 li
cp
0 0 0 rgb
@
351.645 229.817 mo
351.645 231.317 li
346.895 228.067 mo
346.895 231.317 li
346.895 228.067 mo
346.895 231.317 li
342.145 229.817 mo
342.145 231.317 li
337.145 229.817 mo
337.145 231.317 li
332.395 229.817 mo
332.395 231.317 li
327.645 229.817 mo
327.645 231.317 li
322.895 228.067 mo
322.895 231.317 li
317.895 229.817 mo
317.895 231.317 li
313.145 229.817 mo
313.145 231.317 li
308.395 229.817 mo
308.395 231.317 li
303.645 229.817 mo
303.645 231.317 li
298.645 228.067 mo
298.645 231.317 li
293.895 229.817 mo
293.895 231.317 li
289.145 229.817 mo
289.145 231.317 li
284.395 229.817 mo
284.395 231.317 li
279.395 229.817 mo
279.395 231.317 li
274.645 228.067 mo
274.645 231.317 li
269.895 229.817 mo
269.895 231.317 li
265.145 229.817 mo
265.145 231.317 li
260.395 229.817 mo
260.395 231.317 li
255.395 229.817 mo
255.395 231.317 li
250.645 228.067 mo
250.645 231.317 li
245.895 229.817 mo
245.895 231.317 li
241.145 229.817 mo
241.145 231.317 li
236.145 229.817 mo
236.145 231.317 li
231.395 229.817 mo
231.395 231.317 li
226.645 228.067 mo
226.645 231.317 li
221.895 229.817 mo
221.895 231.317 li
216.895 229.817 mo
216.895 231.317 li
212.145 229.817 mo
212.145 231.317 li
207.395 229.817 mo
207.395 231.317 li
202.645 228.067 mo
202.645 231.317 li
@
202.645 231.317 mo
202.645 121.817 li
@
207.145 121.817 mo
202.645 121.817 li
207.145 231.317 mo
202.645 231.317 li
207.145 121.817 mo
202.645 121.817 li
204.895 126.317 mo
202.645 126.317 li
204.895 130.567 mo
202.645 130.567 li
204.895 135.067 mo
202.645 135.067 li
204.895 139.317 mo
202.645 139.317 li
207.145 143.817 mo
202.645 143.817 li
204.895 148.067 mo
202.645 148.067 li
204.895 152.567 mo
202.645 152.567 li
204.895 156.817 mo
202.645 156.817 li
204.895 161.317 mo
202.645 161.317 li
207.145 165.567 mo
202.645 165.567 li
204.895 170.067 mo
202.645 170.067 li
204.895 174.317 mo
202.645 174.317 li
204.895 178.817 mo
202.645 178.817 li
204.895 183.317 mo
202.645 183.317 li
207.145 187.567 mo
202.645 187.567 li
204.895 192.067 mo
202.645 192.067 li
204.895 196.317 mo
202.645 196.317 li
204.895 200.817 mo
202.645 200.817 li
204.895 205.067 mo
202.645 205.067 li
207.145 209.567 mo
202.645 209.567 li
204.895 213.817 mo
202.645 213.817 li
204.895 218.317 mo
202.645 218.317 li
204.895 222.567 mo
202.645 222.567 li
204.895 227.067 mo
202.645 227.067 li
207.145 231.317 mo
202.645 231.317 li
@
353.336 210.708 mo
353.336 209.051 351.99 207.708 350.336 207.708 cv
348.68 207.708 347.336 209.051 347.336 210.708 cv
347.336 212.364 348.68 213.708 350.336 213.708 cv
351.99 213.708 353.336 212.364 353.336 210.708 cv
1 0 0 rgb
ef
347.096 208.788 mo
347.096 207.131 345.752 205.788 344.096 205.788 cv
342.439 205.788 341.096 207.131 341.096 208.788 cv
341.096 210.444 342.439 211.788 344.096 211.788 cv
345.752 211.788 347.096 210.444 347.096 208.788 cv
ef
340.855 206.627 mo
340.855 204.971 339.512 203.627 337.855 203.627 cv
336.199 203.627 334.855 204.971 334.855 206.627 cv
334.855 208.284 336.199 209.627 337.855 209.627 cv
339.512 209.627 340.855 208.284 340.855 206.627 cv
ef
334.615 209.987 mo
334.615 208.331 333.271 206.987 331.615 206.987 cv
329.959 206.987 328.615 208.331 328.615 209.987 cv
328.615 211.643 329.959 212.987 331.615 212.987 cv
333.271 212.987 334.615 211.643 334.615 209.987 cv
ef
328.375 208.547 mo
328.375 206.891 327.031 205.547 325.375 205.547 cv
323.719 205.547 322.375 206.891 322.375 208.547 cv
322.375 210.204 323.719 211.547 325.375 211.547 cv
327.031 211.547 328.375 210.204 328.375 208.547 cv
ef
322.135 206.387 mo
322.135 204.731 320.791 203.387 319.135 203.387 cv
317.479 203.387 316.135 204.731 316.135 206.387 cv
316.135 208.043 317.479 209.387 319.135 209.387 cv
320.791 209.387 322.135 208.043 322.135 206.387 cv
ef
315.655 206.868 mo
315.655 205.211 314.311 203.868 312.655 203.868 cv
310.999 203.868 309.655 205.211 309.655 206.868 cv
309.655 208.524 310.999 209.868 312.655 209.868 cv
314.311 209.868 315.655 208.524 315.655 206.868 cv
ef
309.415 208.547 mo
309.415 206.891 308.071 205.547 306.415 205.547 cv
304.759 205.547 303.415 206.891 303.415 208.547 cv
303.415 210.204 304.759 211.547 306.415 211.547 cv
308.071 211.547 309.415 210.204 309.415 208.547 cv
ef
303.175 208.788 mo
303.175 207.131 301.831 205.788 300.175 205.788 cv
298.519 205.788 297.175 207.131 297.175 208.788 cv
297.175 210.444 298.519 211.788 300.175 211.788 cv
301.831 211.788 303.175 210.444 303.175 208.788 cv
ef
296.935 207.348 mo
296.935 205.692 295.591 204.348 293.935 204.348 cv
292.279 204.348 290.935 205.692 290.935 207.348 cv
290.935 209.002 292.279 210.348 293.935 210.348 cv
295.591 210.348 296.935 209.002 296.935 207.348 cv
ef
290.695 206.868 mo
290.695 205.211 289.351 203.868 287.695 203.868 cv
286.039 203.868 284.695 205.211 284.695 206.868 cv
284.695 208.524 286.039 209.868 287.695 209.868 cv
289.351 209.868 290.695 208.524 290.695 206.868 cv
ef
284.215 207.348 mo
284.215 205.692 282.871 204.348 281.215 204.348 cv
279.559 204.348 278.215 205.692 278.215 207.348 cv
278.215 209.002 279.559 210.348 281.215 210.348 cv
282.871 210.348 284.215 209.002 284.215 207.348 cv
ef
277.975 205.907 mo
277.975 204.25 276.631 202.907 274.975 202.907 cv
273.319 202.907 271.975 204.25 271.975 205.907 cv
271.975 207.563 273.319 208.907 274.975 208.907 cv
276.631 208.907 277.975 207.563 277.975 205.907 cv
ef
271.735 202.067 mo
271.735 200.411 270.391 199.067 268.735 199.067 cv
267.079 199.067 265.735 200.411 265.735 202.067 cv
265.735 203.723 267.079 205.067 268.735 205.067 cv
270.391 205.067 271.735 203.723 271.735 202.067 cv
ef
265.495 201.108 mo
265.495 199.452 264.151 198.108 262.495 198.108 cv
260.839 198.108 259.495 199.452 259.495 201.108 cv
259.495 202.764 260.839 204.108 262.495 204.108 cv
264.151 204.108 265.495 202.764 265.495 201.108 cv
ef
259.255 200.868 mo
259.255 199.211 257.911 197.868 256.255 197.868 cv
254.599 197.868 253.255 199.211 253.255 200.868 cv
253.255 202.524 254.599 203.868 256.255 203.868 cv
257.911 203.868 259.255 202.524 259.255 200.868 cv
ef
252.895 197.508 mo
252.895 195.852 251.551 194.508 249.895 194.508 cv
248.239 194.508 246.895 195.852 246.895 197.508 cv
246.895 199.163 248.239 200.508 249.895 200.508 cv
251.551 200.508 252.895 199.163 252.895 197.508 cv
ef
246.295 193.667 mo
246.295 192.012 244.951 190.667 243.295 190.667 cv
241.639 190.667 240.295 192.012 240.295 193.667 cv
240.295 195.323 241.639 196.667 243.295 196.667 cv
244.951 196.667 246.295 195.323 246.295 193.667 cv
ef
240.055 190.067 mo
240.055 188.411 238.711 187.067 237.055 187.067 cv
235.399 187.067 234.055 188.411 234.055 190.067 cv
234.055 191.723 235.399 193.067 237.055 193.067 cv
238.711 193.067 240.055 191.723 240.055 190.067 cv
ef
233.815 185.268 mo
233.815 183.612 232.471 182.268 230.815 182.268 cv
229.159 182.268 227.815 183.612 227.815 185.268 cv
227.815 186.924 229.159 188.268 230.815 188.268 cv
232.471 188.268 233.815 186.924 233.815 185.268 cv
ef
227.575 179.508 mo
227.575 177.852 226.231 176.506 224.575 176.506 cv
222.919 176.506 221.575 177.852 221.575 179.508 cv
221.575 181.163 222.919 182.508 224.575 182.508 cv
226.231 182.508 227.575 181.163 227.575 179.508 cv
ef
221.335 168.467 mo
221.335 166.812 219.991 165.467 218.335 165.467 cv
216.679 165.467 215.335 166.812 215.335 168.467 cv
215.335 170.124 216.679 171.467 218.335 171.467 cv
219.991 171.467 221.335 170.124 221.335 168.467 cv
ef
214.855 166.308 mo
214.855 164.651 213.511 163.308 211.855 163.308 cv
210.199 163.308 208.855 164.651 208.855 166.308 cv
208.855 167.963 210.199 169.308 211.855 169.308 cv
213.511 169.308 214.855 167.963 214.855 166.308 cv
ef
208.615 170.387 mo
208.615 168.731 207.271 167.387 205.615 167.387 cv
203.959 167.387 202.615 168.731 202.615 170.387 cv
202.615 172.043 203.959 173.387 205.615 173.387 cv
207.271 173.387 208.615 172.043 208.615 170.387 cv
ef
205.645 193.817 mo
202.645 193.817 li
202.645 199.817 li
208.645 199.817 li
208.645 193.817 li
205.645 193.817 li
cp
211.895 194.317 mo
208.895 194.317 li
208.895 200.317 li
214.895 200.317 li
214.895 194.317 li
211.895 194.317 li
cp
218.395 193.317 mo
215.395 193.317 li
215.395 199.317 li
221.395 199.317 li
221.395 193.317 li
218.395 193.317 li
cp
224.645 194.567 mo
221.645 194.567 li
221.645 200.567 li
227.645 200.567 li
227.645 194.567 li
224.645 194.567 li
cp
230.895 193.817 mo
227.895 193.817 li
227.895 199.817 li
233.895 199.817 li
233.895 193.817 li
230.895 193.817 li
cp
237.145 196.067 mo
234.145 196.067 li
234.145 202.067 li
240.145 202.067 li
240.145 196.067 li
237.145 196.067 li
cp
243.395 195.567 mo
240.395 195.567 li
240.395 201.567 li
246.395 201.567 li
246.395 195.567 li
243.395 195.567 li
cp
249.895 195.067 mo
246.895 195.067 li
246.895 201.067 li
252.895 201.067 li
252.895 195.067 li
249.895 195.067 li
cp
256.145 195.567 mo
253.145 195.567 li
253.145 201.567 li
259.145 201.567 li
259.145 195.567 li
256.145 195.567 li
cp
262.395 196.317 mo
259.395 196.317 li
259.395 202.317 li
265.395 202.317 li
265.395 196.317 li
262.395 196.317 li
cp
268.645 194.817 mo
265.645 194.817 li
265.645 200.817 li
271.645 200.817 li
271.645 194.817 li
268.645 194.817 li
cp
274.895 196.067 mo
271.895 196.067 li
271.895 202.067 li
277.895 202.067 li
277.895 196.067 li
274.895 196.067 li
cp
281.145 194.817 mo
278.145 194.817 li
278.145 200.817 li
284.145 200.817 li
284.145 194.817 li
281.145 194.817 li
cp
287.645 196.067 mo
284.645 196.067 li
284.645 202.067 li
290.645 202.067 li
290.645 196.067 li
287.645 196.067 li
cp
293.895 196.067 mo
290.895 196.067 li
290.895 202.067 li
296.895 202.067 li
296.895 196.067 li
293.895 196.067 li
cp
300.145 195.817 mo
297.145 195.817 li
297.145 201.817 li
303.145 201.817 li
303.145 195.817 li
300.145 195.817 li
cp
306.395 195.067 mo
303.395 195.067 li
303.395 201.067 li
309.395 201.067 li
309.395 195.067 li
306.395 195.067 li
cp
312.645 194.567 mo
309.645 194.567 li
309.645 200.567 li
315.645 200.567 li
315.645 194.567 li
312.645 194.567 li
cp
319.145 194.317 mo
316.145 194.317 li
316.145 200.317 li
322.145 200.317 li
322.145 194.317 li
319.145 194.317 li
cp
325.395 194.067 mo
322.395 194.067 li
322.395 200.067 li
328.395 200.067 li
328.395 194.067 li
325.395 194.067 li
cp
331.645 194.067 mo
328.645 194.067 li
328.645 200.067 li
334.645 200.067 li
334.645 194.067 li
331.645 194.067 li
cp
337.895 195.067 mo
334.895 195.067 li
334.895 201.067 li
340.895 201.067 li
340.895 195.067 li
337.895 195.067 li
cp
344.145 193.567 mo
341.145 193.567 li
341.145 199.567 li
347.145 199.567 li
347.145 193.567 li
344.145 193.567 li
cp
350.395 194.567 mo
347.395 194.567 li
347.395 200.567 li
353.395 200.567 li
353.395 194.567 li
350.395 194.567 li
cp
0 .4 0 rgb
@
354.04 231.28 mo
505.54 231.28 li
354.04 231.28 mo
354.04 121.78 li
505.54 121.78 li
505.54 231.28 li
354.04 231.28 li
cp
0 0 0 rgb
@
503.54 229.78 mo
503.54 231.28 li
498.79 228.03 mo
498.79 231.28 li
498.79 228.03 mo
498.79 231.28 li
494.04 229.78 mo
494.04 231.28 li
489.04 229.78 mo
489.04 231.28 li
484.29 229.78 mo
484.29 231.28 li
479.54 229.78 mo
479.54 231.28 li
474.54 228.03 mo
474.54 231.28 li
469.79 229.78 mo
469.79 231.28 li
465.04 229.78 mo
465.04 231.28 li
460.29 229.78 mo
460.29 231.28 li
455.29 229.78 mo
455.29 231.28 li
450.54 228.03 mo
450.54 231.28 li
445.79 229.78 mo
445.79 231.28 li
440.79 229.78 mo
440.79 231.28 li
436.04 229.78 mo
436.04 231.28 li
431.29 229.78 mo
431.29 231.28 li
426.29 228.03 mo
426.29 231.28 li
421.54 229.78 mo
421.54 231.28 li
416.79 229.78 mo
416.79 231.28 li
412.04 229.78 mo
412.04 231.28 li
407.04 229.78 mo
407.04 231.28 li
402.29 228.03 mo
402.29 231.28 li
397.54 229.78 mo
397.54 231.28 li
392.54 229.78 mo
392.54 231.28 li
387.79 229.78 mo
387.79 231.28 li
383.04 229.78 mo
383.04 231.28 li
378.29 228.03 mo
378.29 231.28 li
373.29 229.78 mo
373.29 231.28 li
368.54 229.78 mo
368.54 231.28 li
363.79 229.78 mo
363.79 231.28 li
358.79 229.78 mo
358.79 231.28 li
354.04 228.03 mo
354.04 231.28 li
@
354.04 231.28 mo
354.04 121.78 li
@
358.54 121.78 mo
354.04 121.78 li
358.54 231.28 mo
354.04 231.28 li
358.54 121.78 mo
354.04 121.78 li
356.29 126.28 mo
354.04 126.28 li
356.29 130.53 mo
354.04 130.53 li
356.29 135.03 mo
354.04 135.03 li
356.29 139.28 mo
354.04 139.28 li
358.54 143.78 mo
354.04 143.78 li
356.29 148.03 mo
354.04 148.03 li
356.29 152.53 mo
354.04 152.53 li
356.29 156.78 mo
354.04 156.78 li
356.29 161.28 mo
354.04 161.28 li
358.54 165.53 mo
354.04 165.53 li
356.29 170.03 mo
354.04 170.03 li
356.29 174.28 mo
354.04 174.28 li
356.29 178.78 mo
354.04 178.78 li
356.29 183.28 mo
354.04 183.28 li
358.54 187.53 mo
354.04 187.53 li
356.29 192.03 mo
354.04 192.03 li
356.29 196.28 mo
354.04 196.28 li
356.29 200.78 mo
354.04 200.78 li
356.29 205.03 mo
354.04 205.03 li
358.54 209.53 mo
354.04 209.53 li
356.29 213.78 mo
354.04 213.78 li
356.29 218.28 mo
354.04 218.28 li
356.29 222.53 mo
354.04 222.53 li
356.29 227.03 mo
354.04 227.03 li
358.54 231.28 mo
354.04 231.28 li
@
505.581 209.709 mo
505.581 208.055 504.237 206.709 502.581 206.709 cv
500.925 206.709 499.581 208.055 499.581 209.709 cv
499.581 211.366 500.925 212.709 502.581 212.709 cv
504.237 212.709 505.581 211.366 505.581 209.709 cv
1 0 0 rgb
ef
499.101 206.831 mo
499.101 205.174 497.757 203.831 496.101 203.831 cv
494.444 203.831 493.101 205.174 493.101 206.831 cv
493.101 208.487 494.444 209.831 496.101 209.831 cv
497.757 209.831 499.101 208.487 499.101 206.831 cv
ef
492.86 207.071 mo
492.86 205.415 491.517 204.071 489.86 204.071 cv
488.204 204.071 486.86 205.415 486.86 207.071 cv
486.86 208.727 488.204 210.071 489.86 210.071 cv
491.517 210.071 492.86 208.727 492.86 207.071 cv
ef
486.62 208.75 mo
486.62 207.094 485.276 205.75 483.62 205.75 cv
481.964 205.75 480.62 207.094 480.62 208.75 cv
480.62 210.407 481.964 211.75 483.62 211.75 cv
485.276 211.75 486.62 210.407 486.62 208.75 cv
ef
480.38 208.27 mo
480.38 206.614 479.036 205.27 477.38 205.27 cv
475.724 205.27 474.38 206.614 474.38 208.27 cv
474.38 209.926 475.724 211.27 477.38 211.27 cv
479.036 211.27 480.38 209.926 480.38 208.27 cv
ef
473.901 206.59 mo
473.901 204.934 472.556 203.59 470.901 203.59 cv
469.245 203.59 467.901 204.934 467.901 206.59 cv
467.901 208.247 469.245 209.59 470.901 209.59 cv
472.556 209.59 473.901 208.247 473.901 206.59 cv
ef
467.54 206.831 mo
467.54 205.174 466.196 203.831 464.54 203.831 cv
462.884 203.831 461.54 205.174 461.54 206.831 cv
461.54 208.487 462.884 209.831 464.54 209.831 cv
466.196 209.831 467.54 208.487 467.54 206.831 cv
ef
461.181 207.79 mo
461.181 206.133 459.837 204.79 458.181 204.79 cv
456.524 204.79 455.181 206.133 455.181 207.79 cv
455.181 209.446 456.524 210.79 458.181 210.79 cv
459.837 210.79 461.181 209.446 461.181 207.79 cv
ef
454.94 208.27 mo
454.94 206.614 453.597 205.27 451.94 205.27 cv
450.284 205.27 448.94 206.614 448.94 208.27 cv
448.94 209.926 450.284 211.27 451.94 211.27 cv
453.597 211.27 454.94 209.926 454.94 208.27 cv
ef
448.46 206.11 mo
448.46 204.454 447.116 203.11 445.46 203.11 cv
443.804 203.11 442.46 204.454 442.46 206.11 cv
442.46 207.766 443.804 209.11 445.46 209.11 cv
447.116 209.11 448.46 207.766 448.46 206.11 cv
ef
442.22 206.11 mo
442.22 204.454 440.876 203.11 439.22 203.11 cv
437.565 203.11 436.22 204.454 436.22 206.11 cv
436.22 207.766 437.565 209.11 439.22 209.11 cv
440.876 209.11 442.22 207.766 442.22 206.11 cv
ef
435.981 205.87 mo
435.981 204.213 434.636 202.87 432.981 202.87 cv
431.325 202.87 429.981 204.213 429.981 205.87 cv
429.981 207.526 431.325 208.87 432.981 208.87 cv
434.636 208.87 435.981 207.526 435.981 205.87 cv
ef
429.741 205.391 mo
429.741 203.735 428.397 202.391 426.741 202.391 cv
425.085 202.391 423.741 203.735 423.741 205.391 cv
423.741 207.045 425.085 208.391 426.741 208.391 cv
428.397 208.391 429.741 207.045 429.741 205.391 cv
ef
423.261 203.709 mo
423.261 202.055 421.917 200.709 420.261 200.709 cv
418.604 200.709 417.261 202.055 417.261 203.709 cv
417.261 205.366 418.604 206.709 420.261 206.709 cv
421.917 206.709 423.261 205.366 423.261 203.709 cv
ef
417.021 201.549 mo
417.021 199.895 415.677 198.549 414.021 198.549 cv
412.364 198.549 411.021 199.895 411.021 201.549 cv
411.021 203.206 412.364 204.549 414.021 204.549 cv
415.677 204.549 417.021 203.206 417.021 201.549 cv
ef
410.78 199.629 mo
410.78 197.975 409.437 196.629 407.78 196.629 cv
406.124 196.629 404.78 197.975 404.78 199.629 cv
404.78 201.286 406.124 202.629 407.78 202.629 cv
409.437 202.629 410.78 201.286 410.78 199.629 cv
ef
404.3 196.991 mo
404.3 195.334 402.956 193.991 401.3 193.991 cv
399.644 193.991 398.3 195.334 398.3 196.991 cv
398.3 198.647 399.644 199.991 401.3 199.991 cv
402.956 199.991 404.3 198.647 404.3 196.991 cv
ef
398.06 195.79 mo
398.06 194.133 396.716 192.79 395.06 192.79 cv
393.405 192.79 392.06 194.133 392.06 195.79 cv
392.06 197.446 393.405 198.79 395.06 198.79 cv
396.716 198.79 398.06 197.446 398.06 195.79 cv
ef
391.821 191.231 mo
391.821 189.575 390.476 188.231 388.821 188.231 cv
387.165 188.231 385.821 189.575 385.821 191.231 cv
385.821 192.887 387.165 194.231 388.821 194.231 cv
390.476 194.231 391.821 192.887 391.821 191.231 cv
ef
385.581 187.629 mo
385.581 185.975 384.237 184.629 382.581 184.629 cv
380.925 184.629 379.581 185.975 379.581 187.629 cv
379.581 189.286 380.925 190.629 382.581 190.629 cv
384.237 190.629 385.581 189.286 385.581 187.629 cv
ef
379.101 181.629 mo
379.101 179.975 377.757 178.629 376.101 178.629 cv
374.444 178.629 373.101 179.975 373.101 181.629 cv
373.101 183.286 374.444 184.629 376.101 184.629 cv
377.757 184.629 379.101 183.286 379.101 181.629 cv
ef
372.86 171.55 mo
372.86 169.894 371.517 168.55 369.86 168.55 cv
368.204 168.55 366.86 169.894 366.86 171.55 cv
366.86 173.206 368.204 174.55 369.86 174.55 cv
371.517 174.55 372.86 173.206 372.86 171.55 cv
ef
366.62 169.15 mo
366.62 167.494 365.276 166.15 363.62 166.15 cv
361.964 166.15 360.62 167.494 360.62 169.15 cv
360.62 170.806 361.964 172.15 363.62 172.15 cv
365.276 172.15 366.62 170.806 366.62 169.15 cv
ef
360.38 171.55 mo
360.38 169.894 359.036 168.55 357.38 168.55 cv
355.724 168.55 354.38 169.894 354.38 171.55 cv
354.38 173.206 355.724 174.55 357.38 174.55 cv
359.036 174.55 360.38 173.206 360.38 171.55 cv
ef
357.29 195.78 mo
354.29 195.78 li
354.29 201.78 li
360.29 201.78 li
360.29 195.78 li
357.29 195.78 li
cp
363.54 194.53 mo
360.54 194.53 li
360.54 200.53 li
366.54 200.53 li
366.54 194.53 li
363.54 194.53 li
cp
369.79 194.28 mo
366.79 194.28 li
366.79 200.28 li
372.79 200.28 li
372.79 194.28 li
369.79 194.28 li
cp
376.04 194.78 mo
373.04 194.78 li
373.04 200.78 li
379.04 200.78 li
379.04 194.78 li
376.04 194.78 li
cp
382.54 195.53 mo
379.54 195.53 li
379.54 201.53 li
385.54 201.53 li
385.54 195.53 li
382.54 195.53 li
cp
388.79 196.53 mo
385.79 196.53 li
385.79 202.53 li
391.79 202.53 li
391.79 196.53 li
388.79 196.53 li
cp
395.04 194.78 mo
392.04 194.78 li
392.04 200.78 li
398.04 200.78 li
398.04 194.78 li
395.04 194.78 li
cp
401.29 196.03 mo
398.29 196.03 li
398.29 202.03 li
404.29 202.03 li
404.29 196.03 li
401.29 196.03 li
cp
407.79 195.28 mo
404.79 195.28 li
404.79 201.28 li
410.79 201.28 li
410.79 195.28 li
407.79 195.28 li
cp
414.04 195.78 mo
411.04 195.78 li
411.04 201.78 li
417.04 201.78 li
417.04 195.78 li
414.04 195.78 li
cp
420.29 195.78 mo
417.29 195.78 li
417.29 201.78 li
423.29 201.78 li
423.29 195.78 li
420.29 195.78 li
cp
426.79 196.28 mo
423.79 196.28 li
423.79 202.28 li
429.79 202.28 li
429.79 196.28 li
426.79 196.28 li
cp
433.04 196.03 mo
430.04 196.03 li
430.04 202.03 li
436.04 202.03 li
436.04 196.03 li
433.04 196.03 li
cp
439.29 196.03 mo
436.29 196.03 li
436.29 202.03 li
442.29 202.03 li
442.29 196.03 li
439.29 196.03 li
cp
445.54 195.28 mo
442.54 195.28 li
442.54 201.28 li
448.54 201.28 li
448.54 195.28 li
445.54 195.28 li
cp
452.04 194.78 mo
449.04 194.78 li
449.04 200.78 li
455.04 200.78 li
455.04 194.78 li
452.04 194.78 li
cp
458.29 195.78 mo
455.29 195.78 li
455.29 201.78 li
461.29 201.78 li
461.29 195.78 li
458.29 195.78 li
cp
464.54 194.78 mo
461.54 194.78 li
461.54 200.78 li
467.54 200.78 li
467.54 194.78 li
464.54 194.78 li
cp
470.79 195.53 mo
467.79 195.53 li
467.79 201.53 li
473.79 201.53 li
473.79 195.53 li
470.79 195.53 li
cp
477.29 195.03 mo
474.29 195.03 li
474.29 201.03 li
480.29 201.03 li
480.29 195.03 li
477.29 195.03 li
cp
483.54 194.78 mo
480.54 194.78 li
480.54 200.78 li
486.54 200.78 li
486.54 194.78 li
483.54 194.78 li
cp
489.79 195.28 mo
486.79 195.28 li
486.79 201.28 li
492.79 201.28 li
492.79 195.28 li
489.79 195.28 li
cp
496.04 195.28 mo
493.04 195.28 li
493.04 201.28 li
499.04 201.28 li
499.04 195.28 li
496.04 195.28 li
cp
502.54 195.28 mo
499.54 195.28 li
499.54 201.28 li
505.54 201.28 li
505.54 195.28 li
502.54 195.28 li
cp
0 .4 0 rgb
@
51.4961 340.545 mo
202.496 340.545 li
51.4961 340.545 mo
51.4961 231.045 li
202.496 231.045 li
202.496 340.545 li
51.4961 340.545 li
cp
0 0 0 rgb
@
200.496 339.045 mo
200.496 340.545 li
195.746 337.295 mo
195.746 340.545 li
195.746 337.295 mo
195.746 340.545 li
190.746 339.045 mo
190.746 340.545 li
185.996 339.045 mo
185.996 340.545 li
181.246 339.045 mo
181.246 340.545 li
176.496 339.045 mo
176.496 340.545 li
171.746 337.295 mo
171.746 340.545 li
166.746 339.045 mo
166.746 340.545 li
161.996 339.045 mo
161.996 340.545 li
157.246 339.045 mo
157.246 340.545 li
152.496 339.045 mo
152.496 340.545 li
147.496 337.295 mo
147.496 340.545 li
142.746 339.045 mo
142.746 340.545 li
137.996 339.045 mo
137.996 340.545 li
133.246 339.045 mo
133.246 340.545 li
128.246 339.045 mo
128.246 340.545 li
123.496 337.295 mo
123.496 340.545 li
118.746 339.045 mo
118.746 340.545 li
113.996 339.045 mo
113.996 340.545 li
108.996 339.045 mo
108.996 340.545 li
104.246 339.045 mo
104.246 340.545 li
99.4961 337.295 mo
99.4961 340.545 li
94.7461 339.045 mo
94.7461 340.545 li
89.7461 339.045 mo
89.7461 340.545 li
84.9961 339.045 mo
84.9961 340.545 li
80.2461 339.045 mo
80.2461 340.545 li
75.4961 337.295 mo
75.4961 340.545 li
70.4961 339.045 mo
70.4961 340.545 li
65.7461 339.045 mo
65.7461 340.545 li
60.9961 339.045 mo
60.9961 340.545 li
56.2461 339.045 mo
56.2461 340.545 li
51.4961 337.295 mo
51.4961 340.545 li
@
51.4961 340.545 mo
51.4961 231.045 li
@
55.9961 231.045 mo
51.4961 231.045 li
55.9961 340.545 mo
51.4961 340.545 li
55.9961 231.045 mo
51.4961 231.045 li
53.7461 235.295 mo
51.4961 235.295 li
53.7461 239.795 mo
51.4961 239.795 li
53.7461 244.295 mo
51.4961 244.295 li
53.7461 248.545 mo
51.4961 248.545 li
55.9961 253.045 mo
51.4961 253.045 li
53.7461 257.295 mo
51.4961 257.295 li
53.7461 261.795 mo
51.4961 261.795 li
53.7461 266.045 mo
51.4961 266.045 li
53.7461 270.545 mo
51.4961 270.545 li
55.9961 274.795 mo
51.4961 274.795 li
53.7461 279.295 mo
51.4961 279.295 li
53.7461 283.545 mo
51.4961 283.545 li
53.7461 288.045 mo
51.4961 288.045 li
53.7461 292.295 mo
51.4961 292.295 li
55.9961 296.795 mo
51.4961 296.795 li
53.7461 301.045 mo
51.4961 301.045 li
53.7461 305.545 mo
51.4961 305.545 li
53.7461 309.795 mo
51.4961 309.795 li
53.7461 314.295 mo
51.4961 314.295 li
55.9961 318.795 mo
51.4961 318.795 li
53.7461 323.045 mo
51.4961 323.045 li
53.7461 327.545 mo
51.4961 327.545 li
53.7461 331.795 mo
51.4961 331.795 li
53.7461 336.295 mo
51.4961 336.295 li
55.9961 340.545 mo
51.4961 340.545 li
@
202.296 317.335 mo
202.296 315.679 200.952 314.335 199.296 314.335 cv
197.64 314.335 196.296 315.679 196.296 317.335 cv
196.296 318.992 197.64 320.335 199.296 320.335 cv
200.952 320.335 202.296 318.992 202.296 317.335 cv
1 0 0 rgb
ef
196.056 316.135 mo
196.056 314.479 194.712 313.135 193.056 313.135 cv
191.4 313.135 190.056 314.479 190.056 316.135 cv
190.056 317.792 191.4 319.135 193.056 319.135 cv
194.712 319.135 196.056 317.792 196.056 316.135 cv
ef
189.816 316.616 mo
189.816 314.959 188.472 313.616 186.816 313.616 cv
185.16 313.616 183.816 314.959 183.816 316.616 cv
183.816 318.271 185.16 319.616 186.816 319.616 cv
188.472 319.616 189.816 318.271 189.816 316.616 cv
ef
183.576 318.295 mo
183.576 316.639 182.232 315.295 180.576 315.295 cv
178.92 315.295 177.576 316.639 177.576 318.295 cv
177.576 319.952 178.92 321.295 180.576 321.295 cv
182.232 321.295 183.576 319.952 183.576 318.295 cv
ef
177.336 317.335 mo
177.336 315.679 175.992 314.335 174.336 314.335 cv
172.68 314.335 171.336 315.679 171.336 317.335 cv
171.336 318.992 172.68 320.335 174.336 320.335 cv
175.992 320.335 177.336 318.992 177.336 317.335 cv
ef
170.856 317.815 mo
170.856 316.16 169.512 314.815 167.856 314.815 cv
166.2 314.815 164.856 316.16 164.856 317.815 cv
164.856 319.471 166.2 320.815 167.856 320.815 cv
169.512 320.815 170.856 319.471 170.856 317.815 cv
ef
164.496 316.135 mo
164.496 314.479 163.152 313.135 161.496 313.135 cv
159.84 313.135 158.496 314.479 158.496 316.135 cv
158.496 317.792 159.84 319.135 161.496 319.135 cv
163.152 319.135 164.496 317.792 164.496 316.135 cv
ef
158.136 315.895 mo
158.136 314.24 156.792 312.895 155.136 312.895 cv
153.48 312.895 152.136 314.24 152.136 315.895 cv
152.136 317.551 153.48 318.895 155.136 318.895 cv
156.792 318.895 158.136 317.551 158.136 315.895 cv
ef
151.896 315.656 mo
151.896 314 150.552 312.656 148.896 312.656 cv
147.24 312.656 145.896 314 145.896 315.656 cv
145.896 317.311 147.24 318.656 148.896 318.656 cv
150.552 318.656 151.896 317.311 151.896 315.656 cv
ef
145.656 316.616 mo
145.656 314.959 144.312 313.616 142.656 313.616 cv
141 313.616 139.656 314.959 139.656 316.616 cv
139.656 318.271 141 319.616 142.656 319.616 cv
144.312 319.616 145.656 318.271 145.656 316.616 cv
ef
139.416 314.456 mo
139.416 312.799 138.072 311.456 136.416 311.456 cv
134.76 311.456 133.416 312.799 133.416 314.456 cv
133.416 316.112 134.76 317.456 136.416 317.456 cv
138.072 317.456 139.416 316.112 139.416 314.456 cv
ef
132.936 314.935 mo
132.936 313.28 131.592 311.935 129.936 311.935 cv
128.28 311.935 126.936 313.28 126.936 314.935 cv
126.936 316.591 128.28 317.935 129.936 317.935 cv
131.592 317.935 132.936 316.591 132.936 314.935 cv
ef
126.696 313.736 mo
126.696 312.08 125.352 310.736 123.696 310.736 cv
122.04 310.736 120.696 312.08 120.696 313.736 cv
120.696 315.391 122.04 316.736 123.696 316.736 cv
125.352 316.736 126.696 315.391 126.696 313.736 cv
ef
120.456 313.975 mo
120.456 312.32 119.112 310.975 117.456 310.975 cv
115.8 310.975 114.456 312.32 114.456 313.975 cv
114.456 315.631 115.8 316.975 117.456 316.975 cv
119.112 316.975 120.456 315.631 120.456 313.975 cv
ef
114.216 311.815 mo
114.216 310.16 112.872 308.815 111.216 308.815 cv
109.56 308.815 108.216 310.16 108.216 311.815 cv
108.216 313.471 109.56 314.815 111.216 314.815 cv
112.872 314.815 114.216 313.471 114.216 311.815 cv
ef
107.976 311.576 mo
107.976 309.919 106.632 308.576 104.976 308.576 cv
103.32 308.576 101.976 309.919 101.976 311.576 cv
101.976 313.231 103.32 314.576 104.976 314.576 cv
106.632 314.576 107.976 313.231 107.976 311.576 cv
ef
101.496 307.496 mo
101.496 305.839 100.152 304.496 98.4961 304.496 cv
96.8398 304.496 95.4961 305.839 95.4961 307.496 cv
95.4961 309.152 96.8398 310.496 98.4961 310.496 cv
100.152 310.496 101.496 309.152 101.496 307.496 cv
ef
95.2559 306.776 mo
95.2559 305.12 93.9121 303.776 92.2559 303.776 cv
90.6001 303.776 89.2559 305.12 89.2559 306.776 cv
89.2559 308.431 90.6001 309.776 92.2559 309.776 cv
93.9121 309.776 95.2559 308.431 95.2559 306.776 cv
ef
89.0161 302.935 mo
89.0161 301.28 87.6719 299.935 86.0161 299.935 cv
84.3599 299.935 83.0161 301.28 83.0161 302.935 cv
83.0161 304.591 84.3599 305.935 86.0161 305.935 cv
87.6719 305.935 89.0161 304.591 89.0161 302.935 cv
ef
82.7759 298.135 mo
82.7759 296.479 81.4321 295.135 79.7759 295.135 cv
78.1201 295.135 76.7759 296.479 76.7759 298.135 cv
76.7759 299.792 78.1201 301.135 79.7759 301.135 cv
81.4321 301.135 82.7759 299.792 82.7759 298.135 cv
ef
76.5361 289.975 mo
76.5361 288.32 75.1919 286.975 73.5361 286.975 cv
71.8799 286.975 70.5361 288.32 70.5361 289.975 cv
70.5361 291.631 71.8799 292.975 73.5361 292.975 cv
75.1919 292.975 76.5361 291.631 76.5361 289.975 cv
ef
70.0562 286.135 mo
70.0562 284.479 68.7119 283.135 67.0562 283.135 cv
65.3999 283.135 64.0562 284.479 64.0562 286.135 cv
64.0562 287.792 65.3999 289.135 67.0562 289.135 cv
68.7119 289.135 70.0562 287.792 70.0562 286.135 cv
ef
63.8159 281.815 mo
63.8159 280.16 62.4722 278.815 60.8159 278.815 cv
59.1602 278.815 57.8159 280.16 57.8159 281.815 cv
57.8159 283.471 59.1602 284.815 60.8159 284.815 cv
62.4722 284.815 63.8159 283.471 63.8159 281.815 cv
ef
57.5762 283.015 mo
57.5762 281.36 56.2319 280.015 54.5762 280.015 cv
52.9199 280.015 51.5762 281.36 51.5762 283.015 cv
51.5762 284.671 52.9199 286.015 54.5762 286.015 cv
56.2319 286.015 57.5762 284.671 57.5762 283.015 cv
ef
54.4961 303.545 mo
51.4961 303.545 li
51.4961 309.545 li
57.4961 309.545 li
57.4961 303.545 li
54.4961 303.545 li
cp
60.7461 304.045 mo
57.7461 304.045 li
57.7461 310.045 li
63.7461 310.045 li
63.7461 304.045 li
60.7461 304.045 li
cp
66.9961 305.045 mo
63.9961 305.045 li
63.9961 311.045 li
69.9961 311.045 li
69.9961 305.045 li
66.9961 305.045 li
cp
73.4961 303.545 mo
70.4961 303.545 li
70.4961 309.545 li
76.4961 309.545 li
76.4961 303.545 li
73.4961 303.545 li
cp
79.7461 304.045 mo
76.7461 304.045 li
76.7461 310.045 li
82.7461 310.045 li
82.7461 304.045 li
79.7461 304.045 li
cp
85.9961 305.795 mo
82.9961 305.795 li
82.9961 311.795 li
88.9961 311.795 li
88.9961 305.795 li
85.9961 305.795 li
cp
92.2461 304.545 mo
89.2461 304.545 li
89.2461 310.545 li
95.2461 310.545 li
95.2461 304.545 li
92.2461 304.545 li
cp
98.4961 305.295 mo
95.4961 305.295 li
95.4961 311.295 li
101.496 311.295 li
101.496 305.295 li
98.4961 305.295 li
cp
104.996 304.795 mo
101.996 304.795 li
101.996 310.795 li
107.996 310.795 li
107.996 304.795 li
104.996 304.795 li
cp
111.246 305.295 mo
108.246 305.295 li
108.246 311.295 li
114.246 311.295 li
114.246 305.295 li
111.246 305.295 li
cp
117.496 304.795 mo
114.496 304.795 li
114.496 310.795 li
120.496 310.795 li
120.496 304.795 li
117.496 304.795 li
cp
123.746 306.295 mo
120.746 306.295 li
120.746 312.295 li
126.746 312.295 li
126.746 306.295 li
123.746 306.295 li
cp
129.996 305.795 mo
126.996 305.795 li
126.996 311.795 li
132.996 311.795 li
132.996 305.795 li
129.996 305.795 li
cp
136.496 306.795 mo
133.496 306.795 li
133.496 312.795 li
139.496 312.795 li
139.496 306.795 li
136.496 306.795 li
cp
142.746 305.045 mo
139.746 305.045 li
139.746 311.045 li
145.746 311.045 li
145.746 305.045 li
142.746 305.045 li
cp
148.996 305.545 mo
145.996 305.545 li
145.996 311.545 li
151.996 311.545 li
151.996 305.545 li
148.996 305.545 li
cp
155.246 305.545 mo
152.246 305.545 li
152.246 311.545 li
158.246 311.545 li
158.246 305.545 li
155.246 305.545 li
cp
161.496 305.295 mo
158.496 305.295 li
158.496 311.295 li
164.496 311.295 li
164.496 305.295 li
161.496 305.295 li
cp
167.746 304.795 mo
164.746 304.795 li
164.746 310.795 li
170.746 310.795 li
170.746 304.795 li
167.746 304.795 li
cp
174.246 306.545 mo
171.246 306.545 li
171.246 312.545 li
177.246 312.545 li
177.246 306.545 li
174.246 306.545 li
cp
180.496 305.545 mo
177.496 305.545 li
177.496 311.545 li
183.496 311.545 li
183.496 305.545 li
180.496 305.545 li
cp
186.746 305.295 mo
183.746 305.295 li
183.746 311.295 li
189.746 311.295 li
189.746 305.295 li
186.746 305.295 li
cp
192.996 304.545 mo
189.996 304.545 li
189.996 310.545 li
195.996 310.545 li
195.996 304.545 li
192.996 304.545 li
cp
199.246 305.045 mo
196.246 305.045 li
196.246 311.045 li
202.246 311.045 li
202.246 305.045 li
199.246 305.045 li
cp
0 .4 0 rgb
@
202.831 340.817 mo
353.83 340.817 li
202.831 340.817 mo
202.831 231.317 li
353.83 231.317 li
353.83 340.817 li
202.831 340.817 li
cp
0 0 0 rgb
@
351.83 339.317 mo
351.83 340.817 li
347.08 337.567 mo
347.08 340.817 li
347.08 337.567 mo
347.08 340.817 li
342.33 339.317 mo
342.33 340.817 li
337.33 339.317 mo
337.33 340.817 li
332.58 339.317 mo
332.58 340.817 li
327.83 339.317 mo
327.83 340.817 li
323.08 337.567 mo
323.08 340.817 li
318.08 339.317 mo
318.08 340.817 li
313.331 339.317 mo
313.331 340.817 li
308.581 339.317 mo
308.581 340.817 li
303.831 339.317 mo
303.831 340.817 li
298.831 337.567 mo
298.831 340.817 li
294.081 339.317 mo
294.081 340.817 li
289.331 339.317 mo
289.331 340.817 li
284.581 339.317 mo
284.581 340.817 li
279.581 339.317 mo
279.581 340.817 li
274.831 337.567 mo
274.831 340.817 li
270.081 339.317 mo
270.081 340.817 li
265.331 339.317 mo
265.331 340.817 li
260.581 339.317 mo
260.581 340.817 li
255.581 339.317 mo
255.581 340.817 li
250.831 337.567 mo
250.831 340.817 li
246.081 339.317 mo
246.081 340.817 li
241.331 339.317 mo
241.331 340.817 li
236.331 339.317 mo
236.331 340.817 li
231.581 339.317 mo
231.581 340.817 li
226.831 337.567 mo
226.831 340.817 li
222.081 339.317 mo
222.081 340.817 li
217.081 339.317 mo
217.081 340.817 li
212.331 339.317 mo
212.331 340.817 li
207.581 339.317 mo
207.581 340.817 li
202.831 337.567 mo
202.831 340.817 li
@
202.831 340.817 mo
202.831 231.317 li
@
207.331 231.317 mo
202.831 231.317 li
207.331 340.817 mo
202.831 340.817 li
207.331 231.317 mo
202.831 231.317 li
205.081 235.567 mo
202.831 235.567 li
205.081 240.067 mo
202.831 240.067 li
205.081 244.567 mo
202.831 244.567 li
205.081 248.817 mo
202.831 248.817 li
207.331 253.317 mo
202.831 253.317 li
205.081 257.567 mo
202.831 257.567 li
205.081 262.067 mo
202.831 262.067 li
205.081 266.317 mo
202.831 266.317 li
205.081 270.817 mo
202.831 270.817 li
207.331 275.067 mo
202.831 275.067 li
205.081 279.567 mo
202.831 279.567 li
205.081 283.817 mo
202.831 283.817 li
205.081 288.317 mo
202.831 288.317 li
205.081 292.567 mo
202.831 292.567 li
207.331 297.067 mo
202.831 297.067 li
205.081 301.317 mo
202.831 301.317 li
205.081 305.817 mo
202.831 305.817 li
205.081 310.067 mo
202.831 310.067 li
205.081 314.567 mo
202.831 314.567 li
207.331 319.067 mo
202.831 319.067 li
205.081 323.317 mo
202.831 323.317 li
205.081 327.817 mo
202.831 327.817 li
205.081 332.067 mo
202.831 332.067 li
205.081 336.567 mo
202.831 336.567 li
207.331 340.817 mo
202.831 340.817 li
@
353.521 317.127 mo
353.521 315.471 352.176 314.127 350.521 314.127 cv
348.865 314.127 347.521 315.471 347.521 317.127 cv
347.521 318.784 348.865 320.127 350.521 320.127 cv
352.176 320.127 353.521 318.784 353.521 317.127 cv
1 0 0 rgb
ef
347.281 317.608 mo
347.281 315.952 345.938 314.608 344.281 314.608 cv
342.625 314.608 341.281 315.952 341.281 317.608 cv
341.281 319.264 342.625 320.608 344.281 320.608 cv
345.938 320.608 347.281 319.264 347.281 317.608 cv
ef
341.041 318.086 mo
341.041 316.432 339.697 315.086 338.041 315.086 cv
336.385 315.086 335.041 316.432 335.041 318.086 cv
335.041 319.743 336.385 321.086 338.041 321.086 cv
339.697 321.086 341.041 319.743 341.041 318.086 cv
ef
334.801 317.848 mo
334.801 316.192 333.457 314.848 331.801 314.848 cv
330.145 314.848 328.801 316.192 328.801 317.848 cv
328.801 319.502 330.145 320.848 331.801 320.848 cv
333.457 320.848 334.801 319.502 334.801 317.848 cv
ef
328.561 316.407 mo
328.561 314.75 327.217 313.407 325.561 313.407 cv
323.904 313.407 322.561 314.75 322.561 316.407 cv
322.561 318.063 323.904 319.407 325.561 319.407 cv
327.217 319.407 328.561 318.063 328.561 316.407 cv
ef
322.32 317.127 mo
322.32 315.471 320.977 314.127 319.32 314.127 cv
317.664 314.127 316.321 315.471 316.321 317.127 cv
316.321 318.784 317.664 320.127 319.32 320.127 cv
320.977 320.127 322.32 318.784 322.32 317.127 cv
ef
315.84 317.127 mo
315.84 315.471 314.497 314.127 312.84 314.127 cv
311.184 314.127 309.84 315.471 309.84 317.127 cv
309.84 318.784 311.184 320.127 312.84 320.127 cv
314.497 320.127 315.84 318.784 315.84 317.127 cv
ef
309.6 316.167 mo
309.6 314.512 308.256 313.167 306.6 313.167 cv
304.945 313.167 303.6 314.512 303.6 316.167 cv
303.6 317.823 304.945 319.167 306.6 319.167 cv
308.256 319.167 309.6 317.823 309.6 316.167 cv
ef
303.361 318.807 mo
303.361 317.151 302.016 315.807 300.361 315.807 cv
298.705 315.807 297.361 317.151 297.361 318.807 cv
297.361 320.463 298.705 321.807 300.361 321.807 cv
302.016 321.807 303.361 320.463 303.361 318.807 cv
ef
297.121 314.727 mo
297.121 313.071 295.777 311.727 294.121 311.727 cv
292.464 311.727 291.121 313.071 291.121 314.727 cv
291.121 316.383 292.464 317.727 294.121 317.727 cv
295.777 317.727 297.121 316.383 297.121 314.727 cv
ef
290.88 315.567 mo
290.88 313.911 289.537 312.567 287.88 312.567 cv
286.224 312.567 284.88 313.911 284.88 315.567 cv
284.88 317.223 286.224 318.567 287.88 318.567 cv
289.537 318.567 290.88 317.223 290.88 315.567 cv
ef
284.401 313.768 mo
284.401 312.112 283.056 310.768 281.401 310.768 cv
279.745 310.768 278.4 312.112 278.4 313.768 cv
278.4 315.424 279.745 316.768 281.401 316.768 cv
283.056 316.768 284.401 315.424 284.401 313.768 cv
ef
278.161 314.727 mo
278.161 313.071 276.816 311.727 275.161 311.727 cv
273.504 311.727 272.161 313.071 272.161 314.727 cv
272.161 316.383 273.504 317.727 275.161 317.727 cv
276.816 317.727 278.161 316.383 278.161 314.727 cv
ef
271.92 311.608 mo
271.92 309.952 270.577 308.608 268.92 308.608 cv
267.265 308.608 265.92 309.952 265.92 311.608 cv
265.92 313.264 267.265 314.608 268.92 314.608 cv
270.577 314.608 271.92 313.264 271.92 311.608 cv
ef
265.681 313.047 mo
265.681 311.391 264.336 310.047 262.681 310.047 cv
261.024 310.047 259.681 311.391 259.681 313.047 cv
259.681 314.704 261.024 316.047 262.681 316.047 cv
264.336 316.047 265.681 314.704 265.681 313.047 cv
ef
259.44 310.167 mo
259.44 308.512 258.097 307.167 256.44 307.167 cv
254.785 307.167 253.44 308.512 253.44 310.167 cv
253.44 311.823 254.785 313.167 256.44 313.167 cv
258.097 313.167 259.44 311.823 259.44 310.167 cv
ef
253.081 308.967 mo
253.081 307.311 251.737 305.967 250.081 305.967 cv
248.424 305.967 247.081 307.311 247.081 308.967 cv
247.081 310.624 248.424 311.967 250.081 311.967 cv
251.737 311.967 253.081 310.624 253.081 308.967 cv
ef
246.48 305.368 mo
246.48 303.711 245.137 302.368 243.48 302.368 cv
241.825 302.368 240.48 303.711 240.48 305.368 cv
240.48 307.024 241.825 308.368 243.48 308.368 cv
245.137 308.368 246.48 307.024 246.48 305.368 cv
ef
240.241 305.368 mo
240.241 303.711 238.896 302.368 237.241 302.368 cv
235.584 302.368 234.241 303.711 234.241 305.368 cv
234.241 307.024 235.584 308.368 237.241 308.368 cv
238.896 308.368 240.241 307.024 240.241 305.368 cv
ef
234 299.848 mo
234 298.192 232.657 296.848 231 296.848 cv
229.345 296.848 228 298.192 228 299.848 cv
228 301.502 229.345 302.848 231 302.848 cv
232.657 302.848 234 301.502 234 299.848 cv
ef
227.761 295.768 mo
227.761 294.112 226.417 292.768 224.761 292.768 cv
223.104 292.768 221.761 294.112 221.761 295.768 cv
221.761 297.424 223.104 298.768 224.761 298.768 cv
226.417 298.768 227.761 297.424 227.761 295.768 cv
ef
221.521 289.768 mo
221.521 288.112 220.177 286.768 218.521 286.768 cv
216.865 286.768 215.521 288.112 215.521 289.768 cv
215.521 291.424 216.865 292.768 218.521 292.768 cv
220.177 292.768 221.521 291.424 221.521 289.768 cv
ef
215.041 285.567 mo
215.041 283.911 213.697 282.567 212.041 282.567 cv
210.385 282.567 209.041 283.911 209.041 285.567 cv
209.041 287.223 210.385 288.567 212.041 288.567 cv
213.697 288.567 215.041 287.223 215.041 285.567 cv
ef
208.801 284.487 mo
208.801 282.831 207.457 281.487 205.801 281.487 cv
204.145 281.487 202.801 282.831 202.801 284.487 cv
202.801 286.143 204.145 287.487 205.801 287.487 cv
207.457 287.487 208.801 286.143 208.801 284.487 cv
ef
205.831 306.067 mo
202.831 306.067 li
202.831 312.067 li
208.831 312.067 li
208.831 306.067 li
205.831 306.067 li
cp
212.081 304.067 mo
209.081 304.067 li
209.081 310.067 li
215.081 310.067 li
215.081 304.067 li
212.081 304.067 li
cp
218.581 304.317 mo
215.581 304.317 li
215.581 310.317 li
221.581 310.317 li
221.581 304.317 li
218.581 304.317 li
cp
224.831 306.067 mo
221.831 306.067 li
221.831 312.067 li
227.831 312.067 li
227.831 306.067 li
224.831 306.067 li
cp
231.081 306.067 mo
228.081 306.067 li
228.081 312.067 li
234.081 312.067 li
234.081 306.067 li
231.081 306.067 li
cp
237.331 306.317 mo
234.331 306.317 li
234.331 312.317 li
240.331 312.317 li
240.331 306.317 li
237.331 306.317 li
cp
243.581 307.317 mo
240.581 307.317 li
240.581 313.317 li
246.581 313.317 li
246.581 307.317 li
243.581 307.317 li
cp
250.081 305.317 mo
247.081 305.317 li
247.081 311.317 li
253.081 311.317 li
253.081 305.317 li
250.081 305.317 li
cp
256.331 307.317 mo
253.331 307.317 li
253.331 313.317 li
259.331 313.317 li
259.331 307.317 li
256.331 307.317 li
cp
262.581 307.567 mo
259.581 307.567 li
259.581 313.567 li
265.581 313.567 li
265.581 307.567 li
262.581 307.567 li
cp
268.831 306.567 mo
265.831 306.567 li
265.831 312.567 li
271.831 312.567 li
271.831 306.567 li
268.831 306.567 li
cp
275.081 306.317 mo
272.081 306.317 li
272.081 312.317 li
278.081 312.317 li
278.081 306.317 li
275.081 306.317 li
cp
281.331 307.317 mo
278.331 307.317 li
278.331 313.317 li
284.331 313.317 li
284.331 307.317 li
281.331 307.317 li
cp
287.831 307.317 mo
284.831 307.317 li
284.831 313.317 li
290.831 313.317 li
290.831 307.317 li
287.831 307.317 li
cp
294.081 306.567 mo
291.081 306.567 li
291.081 312.567 li
297.081 312.567 li
297.081 306.567 li
294.081 306.567 li
cp
300.331 306.317 mo
297.331 306.317 li
297.331 312.317 li
303.331 312.317 li
303.331 306.317 li
300.331 306.317 li
cp
306.581 306.317 mo
303.581 306.317 li
303.581 312.317 li
309.581 312.317 li
309.581 306.317 li
306.581 306.317 li
cp
312.831 304.817 mo
309.831 304.817 li
309.831 310.817 li
315.831 310.817 li
315.831 304.817 li
312.831 304.817 li
cp
319.33 305.567 mo
316.331 305.567 li
316.331 311.567 li
322.33 311.567 li
322.33 305.567 li
319.33 305.567 li
cp
325.58 305.817 mo
322.58 305.817 li
322.58 311.817 li
328.58 311.817 li
328.58 305.817 li
325.58 305.817 li
cp
331.83 304.567 mo
328.83 304.567 li
328.83 310.567 li
334.83 310.567 li
334.83 304.567 li
331.83 304.567 li
cp
338.08 306.567 mo
335.08 306.567 li
335.08 312.567 li
341.08 312.567 li
341.08 306.567 li
338.08 306.567 li
cp
344.33 305.817 mo
341.33 305.817 li
341.33 311.817 li
347.33 311.817 li
347.33 305.817 li
344.33 305.817 li
cp
350.58 305.317 mo
347.58 305.317 li
347.58 311.317 li
353.58 311.317 li
353.58 305.317 li
350.58 305.317 li
cp
0 .4 0 rgb
@
354.226 340.78 mo
505.726 340.78 li
354.226 340.78 mo
354.226 231.28 li
505.726 231.28 li
505.726 340.78 li
354.226 340.78 li
cp
0 0 0 rgb
@
503.726 339.28 mo
503.726 340.78 li
498.976 337.53 mo
498.976 340.78 li
498.976 337.53 mo
498.976 340.78 li
494.226 339.28 mo
494.226 340.78 li
489.226 339.28 mo
489.226 340.78 li
484.476 339.28 mo
484.476 340.78 li
479.726 339.28 mo
479.726 340.78 li
474.726 337.53 mo
474.726 340.78 li
469.976 339.28 mo
469.976 340.78 li
465.226 339.28 mo
465.226 340.78 li
460.476 339.28 mo
460.476 340.78 li
455.476 339.28 mo
455.476 340.78 li
450.726 337.53 mo
450.726 340.78 li
445.976 339.28 mo
445.976 340.78 li
440.976 339.28 mo
440.976 340.78 li
436.226 339.28 mo
436.226 340.78 li
431.476 339.28 mo
431.476 340.78 li
426.476 337.53 mo
426.476 340.78 li
421.726 339.28 mo
421.726 340.78 li
416.976 339.28 mo
416.976 340.78 li
412.226 339.28 mo
412.226 340.78 li
407.226 339.28 mo
407.226 340.78 li
402.476 337.53 mo
402.476 340.78 li
397.726 339.28 mo
397.726 340.78 li
392.726 339.28 mo
392.726 340.78 li
387.976 339.28 mo
387.976 340.78 li
383.226 339.28 mo
383.226 340.78 li
378.476 337.53 mo
378.476 340.78 li
373.476 339.28 mo
373.476 340.78 li
368.726 339.28 mo
368.726 340.78 li
363.976 339.28 mo
363.976 340.78 li
358.976 339.28 mo
358.976 340.78 li
354.226 337.53 mo
354.226 340.78 li
@
354.226 340.78 mo
354.226 231.28 li
@
358.726 231.28 mo
354.226 231.28 li
358.726 340.78 mo
354.226 340.78 li
358.726 231.28 mo
354.226 231.28 li
356.476 235.53 mo
354.226 235.53 li
356.476 240.03 mo
354.226 240.03 li
356.476 244.53 mo
354.226 244.53 li
356.476 248.78 mo
354.226 248.78 li
358.726 253.28 mo
354.226 253.28 li
356.476 257.53 mo
354.226 257.53 li
356.476 262.03 mo
354.226 262.03 li
356.476 266.28 mo
354.226 266.28 li
356.476 270.78 mo
354.226 270.78 li
358.726 275.03 mo
354.226 275.03 li
356.476 279.53 mo
354.226 279.53 li
356.476 283.78 mo
354.226 283.78 li
356.476 288.28 mo
354.226 288.28 li
356.476 292.53 mo
354.226 292.53 li
358.726 297.03 mo
354.226 297.03 li
356.476 301.28 mo
354.226 301.28 li
356.476 305.78 mo
354.226 305.78 li
356.476 310.03 mo
354.226 310.03 li
356.476 314.53 mo
354.226 314.53 li
358.726 319.03 mo
354.226 319.03 li
356.476 323.28 mo
354.226 323.28 li
356.476 327.78 mo
354.226 327.78 li
356.476 332.03 mo
354.226 332.03 li
356.476 336.53 mo
354.226 336.53 li
358.726 340.78 mo
354.226 340.78 li
@
505.767 314.69 mo
505.767 313.034 504.423 311.69 502.767 311.69 cv
501.11 311.69 499.767 313.034 499.767 314.69 cv
499.767 316.346 501.11 317.69 502.767 317.69 cv
504.423 317.69 505.767 316.346 505.767 314.69 cv
1 0 0 rgb
ef
499.286 315.53 mo
499.286 313.874 497.942 312.53 496.286 312.53 cv
494.63 312.53 493.286 313.874 493.286 315.53 cv
493.286 317.186 494.63 318.53 496.286 318.53 cv
497.942 318.53 499.286 317.186 499.286 315.53 cv
ef
493.046 314.45 mo
493.046 312.793 491.702 311.45 490.046 311.45 cv
488.39 311.45 487.046 312.793 487.046 314.45 cv
487.046 316.106 488.39 317.45 490.046 317.45 cv
491.702 317.45 493.046 316.106 493.046 314.45 cv
ef
486.806 316.129 mo
486.806 314.475 485.462 313.129 483.806 313.129 cv
482.149 313.129 480.806 314.475 480.806 316.129 cv
480.806 317.786 482.149 319.129 483.806 319.129 cv
485.462 319.129 486.806 317.786 486.806 316.129 cv
ef
480.565 317.09 mo
480.565 315.434 479.222 314.09 477.565 314.09 cv
475.909 314.09 474.565 315.434 474.565 317.09 cv
474.565 318.747 475.909 320.09 477.565 320.09 cv
479.222 320.09 480.565 318.747 480.565 317.09 cv
ef
474.087 319.25 mo
474.087 317.594 472.741 316.25 471.087 316.25 cv
469.431 316.25 468.087 317.594 468.087 319.25 cv
468.087 320.907 469.431 322.25 471.087 322.25 cv
472.741 322.25 474.087 320.907 474.087 319.25 cv
ef
467.726 317.811 mo
467.726 316.155 466.382 314.811 464.726 314.811 cv
463.069 314.811 461.726 316.155 461.726 317.811 cv
461.726 319.465 463.069 320.811 464.726 320.811 cv
466.382 320.811 467.726 319.465 467.726 317.811 cv
ef
461.366 317.331 mo
461.366 315.674 460.022 314.331 458.366 314.331 cv
456.71 314.331 455.366 315.674 455.366 317.331 cv
455.366 318.987 456.71 320.331 458.366 320.331 cv
460.022 320.331 461.366 318.987 461.366 317.331 cv
ef
455.126 317.331 mo
455.126 315.674 453.782 314.331 452.126 314.331 cv
450.47 314.331 449.126 315.674 449.126 317.331 cv
449.126 318.987 450.47 320.331 452.126 320.331 cv
453.782 320.331 455.126 318.987 455.126 317.331 cv
ef
448.646 316.85 mo
448.646 315.194 447.302 313.85 445.646 313.85 cv
443.989 313.85 442.646 315.194 442.646 316.85 cv
442.646 318.506 443.989 319.85 445.646 319.85 cv
447.302 319.85 448.646 318.506 448.646 316.85 cv
ef
442.405 317.09 mo
442.405 315.434 441.062 314.09 439.405 314.09 cv
437.751 314.09 436.405 315.434 436.405 317.09 cv
436.405 318.747 437.751 320.09 439.405 320.09 cv
441.062 320.09 442.405 318.747 442.405 317.09 cv
ef
436.167 314.209 mo
436.167 312.555 434.821 311.209 433.167 311.209 cv
431.511 311.209 430.167 312.555 430.167 314.209 cv
430.167 315.866 431.511 317.209 433.167 317.209 cv
434.821 317.209 436.167 315.866 436.167 314.209 cv
ef
429.927 314.209 mo
429.927 312.555 428.583 311.209 426.927 311.209 cv
425.271 311.209 423.927 312.555 423.927 314.209 cv
423.927 315.866 425.271 317.209 426.927 317.209 cv
428.583 317.209 429.927 315.866 429.927 314.209 cv
ef
423.446 312.53 mo
423.446 310.874 422.103 309.53 420.446 309.53 cv
418.79 309.53 417.446 310.874 417.446 312.53 cv
417.446 314.186 418.79 315.53 420.446 315.53 cv
422.103 315.53 423.446 314.186 423.446 312.53 cv
ef
417.206 312.29 mo
417.206 310.633 415.862 309.29 414.206 309.29 cv
412.55 309.29 411.206 310.633 411.206 312.29 cv
411.206 313.946 412.55 315.29 414.206 315.29 cv
415.862 315.29 417.206 313.946 417.206 312.29 cv
ef
410.966 312.049 mo
410.966 310.395 409.622 309.049 407.966 309.049 cv
406.31 309.049 404.966 310.395 404.966 312.049 cv
404.966 313.706 406.31 315.049 407.966 315.049 cv
409.622 315.049 410.966 313.706 410.966 312.049 cv
ef
404.485 312.29 mo
404.485 310.633 403.142 309.29 401.485 309.29 cv
399.829 309.29 398.485 310.633 398.485 312.29 cv
398.485 313.946 399.829 315.29 401.485 315.29 cv
403.142 315.29 404.485 313.946 404.485 312.29 cv
ef
398.245 308.93 mo
398.245 307.274 396.901 305.93 395.245 305.93 cv
393.591 305.93 392.245 307.274 392.245 308.93 cv
392.245 310.586 393.591 311.93 395.245 311.93 cv
396.901 311.93 398.245 310.586 398.245 308.93 cv
ef
392.007 305.571 mo
392.007 303.915 390.661 302.571 389.007 302.571 cv
387.351 302.571 386.007 303.915 386.007 305.571 cv
386.007 307.227 387.351 308.571 389.007 308.571 cv
390.661 308.571 392.007 307.227 392.007 305.571 cv
ef
385.767 300.77 mo
385.767 299.114 384.423 297.77 382.767 297.77 cv
381.11 297.77 379.767 299.114 379.767 300.77 cv
379.767 302.426 381.11 303.77 382.767 303.77 cv
384.423 303.77 385.767 302.426 385.767 300.77 cv
ef
379.286 298.129 mo
379.286 296.475 377.942 295.129 376.286 295.129 cv
374.63 295.129 373.286 296.475 373.286 298.129 cv
373.286 299.786 374.63 301.129 376.286 301.129 cv
377.942 301.129 379.286 299.786 379.286 298.129 cv
ef
373.046 292.37 mo
373.046 290.713 371.702 289.37 370.046 289.37 cv
368.39 289.37 367.046 290.713 367.046 292.37 cv
367.046 294.026 368.39 295.37 370.046 295.37 cv
371.702 295.37 373.046 294.026 373.046 292.37 cv
ef
366.806 291.53 mo
366.806 289.874 365.462 288.53 363.806 288.53 cv
362.149 288.53 360.806 289.874 360.806 291.53 cv
360.806 293.186 362.149 294.53 363.806 294.53 cv
365.462 294.53 366.806 293.186 366.806 291.53 cv
ef
360.565 289.25 mo
360.565 287.594 359.222 286.25 357.565 286.25 cv
355.909 286.25 354.565 287.594 354.565 289.25 cv
354.565 290.907 355.909 292.25 357.565 292.25 cv
359.222 292.25 360.565 290.907 360.565 289.25 cv
ef
357.476 303.28 mo
354.476 303.28 li
354.476 309.28 li
360.476 309.28 li
360.476 303.28 li
357.476 303.28 li
cp
363.726 304.53 mo
360.726 304.53 li
360.726 310.53 li
366.726 310.53 li
366.726 304.53 li
363.726 304.53 li
cp
369.976 304.78 mo
366.976 304.78 li
366.976 310.78 li
372.976 310.78 li
372.976 304.78 li
369.976 304.78 li
cp
376.226 304.78 mo
373.226 304.78 li
373.226 310.78 li
379.226 310.78 li
379.226 304.78 li
376.226 304.78 li
cp
382.726 305.28 mo
379.726 305.28 li
379.726 311.28 li
385.726 311.28 li
385.726 305.28 li
382.726 305.28 li
cp
388.976 305.53 mo
385.976 305.53 li
385.976 311.53 li
391.976 311.53 li
391.976 305.53 li
388.976 305.53 li
cp
395.226 306.78 mo
392.226 306.78 li
392.226 312.78 li
398.226 312.78 li
398.226 306.78 li
395.226 306.78 li
cp
401.476 308.53 mo
398.476 308.53 li
398.476 314.53 li
404.476 314.53 li
404.476 308.53 li
401.476 308.53 li
cp
407.976 307.28 mo
404.976 307.28 li
404.976 313.28 li
410.976 313.28 li
410.976 307.28 li
407.976 307.28 li
cp
414.226 309.03 mo
411.226 309.03 li
411.226 315.03 li
417.226 315.03 li
417.226 309.03 li
414.226 309.03 li
cp
420.476 307.28 mo
417.476 307.28 li
417.476 313.28 li
423.476 313.28 li
423.476 307.28 li
420.476 307.28 li
cp
426.976 307.78 mo
423.976 307.78 li
423.976 313.78 li
429.976 313.78 li
429.976 307.78 li
426.976 307.78 li
cp
433.226 305.53 mo
430.226 305.53 li
430.226 311.53 li
436.226 311.53 li
436.226 305.53 li
433.226 305.53 li
cp
439.476 307.28 mo
436.476 307.28 li
436.476 313.28 li
442.476 313.28 li
442.476 307.28 li
439.476 307.28 li
cp
445.726 306.53 mo
442.726 306.53 li
442.726 312.53 li
448.726 312.53 li
448.726 306.53 li
445.726 306.53 li
cp
452.226 307.53 mo
449.226 307.53 li
449.226 313.53 li
455.226 313.53 li
455.226 307.53 li
452.226 307.53 li
cp
458.476 308.78 mo
455.476 308.78 li
455.476 314.78 li
461.476 314.78 li
461.476 308.78 li
458.476 308.78 li
cp
464.726 307.28 mo
461.726 307.28 li
461.726 313.28 li
467.726 313.28 li
467.726 307.28 li
464.726 307.28 li
cp
470.976 307.28 mo
467.976 307.28 li
467.976 313.28 li
473.976 313.28 li
473.976 307.28 li
470.976 307.28 li
cp
477.476 309.28 mo
474.476 309.28 li
474.476 315.28 li
480.476 315.28 li
480.476 309.28 li
477.476 309.28 li
cp
483.726 305.53 mo
480.726 305.53 li
480.726 311.53 li
486.726 311.53 li
486.726 305.53 li
483.726 305.53 li
cp
489.976 306.28 mo
486.976 306.28 li
486.976 312.28 li
492.976 312.28 li
492.976 306.28 li
489.976 306.28 li
cp
496.226 307.28 mo
493.226 307.28 li
493.226 313.28 li
499.226 313.28 li
499.226 307.28 li
496.226 307.28 li
cp
502.726 306.28 mo
499.726 306.28 li
499.726 312.28 li
505.726 312.28 li
505.726 306.28 li
502.726 306.28 li
cp
0 .4 0 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 37 /percent putdup 40 /parenleft putdup 41 /parenright putdup 45 /hyphen putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 55 /seven putdup 56 /eight putdup 66 /B putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/percent <1C60D8A8C9B59F85E959DC9E62959B5B049387399C5A88EDF2D5DFBD776DAFCB889B62AC98B872299D239B948311090C1C069798A7F20A8D7BE29B8C384DB55F663943C1B42044C054991C856F3C3AA085C2B4902C8215DC2701EFD5FA664B5C9C44640813B5AC440B37B70CE58EFC65A9AFC0BCC84F3CDC68795E4995966F74639212F5372957A607AD4B6B94BBB7C36A3A6EF325381FE12C0468B5DD1F216D01C174551A50AC78A5328CDA24DAC0484DFF3993D32A7CA064F169906996AA1E2F6A555998F55A1AFCE2776BEE589EC3162F968A180A5713C4537EF11B8529CE22F8373BC7632472323D1F8491B48E948870255C9E830736EE70F30EE309DFBBB8294CCC2BB5ECB81667BEB60155> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/seven <1C60D8A8C9B7EF326C86E2C8FFDAFAAAF8B2EE45CDE12ADFFACC9341D807009D1D241E6029AF890199C52728BBB0F3ADB8945AB4753C3621AAE632A8EC4FD7F79CCD78EF> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-/B <1C60D8A8C9B64EDFF4E8F029E491459914546F05F980240E216037EFFB56810F73C7B1AD75758AC950CDF0AE7CA5E10B4B98E91DD14CBA33340505432C4EBD036ED5D8912D20451B0A88BD5908DF5F74741DA09743ACC2D69ECC46C5DD005482FE9F42B63F3612F31E021BB829EB7CDDF491856FAD0A1D6B2854CE32CAE2827DAD35AA4DEB8EA2DDAB1E824241122D8E6929DF014B94E2393EF8A13B> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ADNAIN+Helvetica /Helvetica findfont ct_VMDictPut/ADNAIN+Helvetica*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 9{/.notdef}rp /B 189{/.notdef}rp]ADNAIN+Helvetica nfADNAIN+Helvetica*1 [18 0 0 -18 0 0 ]msf24.9683 15.4556 mo(0.2)sh35.5371 324.247 mo(0)sh24.9683 280.497 mo(0.1)sh35.5371 214.747 mo(0)sh24.9683 170.997 mo(0.1)sh35.5371 104.247 mo(0)sh24.9683 60.4966 mo(0.1)sh47.5059 356.458 mo(0)sh94.8394 356.458 mo(1)sh142.838 356.458 mo(2)sh493.839 356.458 mo(3)sh198.505 356.458 mo(0)sh245.839 356.458 mo(1)sh293.838 356.458 mo(2)sh349.839 356.458 mo(0)sh397.172 356.458 mo(1)sh445.171 356.458 mo(2)sh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 68 /Deltagreek putdup 102 /phi putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/Deltagreek <1C60D8A8C9B7D7E8D30894797D5AAF286B71BDFF6614E4B5AD120122FA30F5DFD5F63E0C3E5314> |-/phi <1C60D8A8C9B7B202A5070E4C89CE6FEBAF8BFBA54E083F9B6D68FF9D61A743A352AA77DD6A9C82DC9867B90A5499DC7E675C99D0626484D42D456AA38B222F664E29B675558155AC2993505E3B23A971292A2880AD39D9096E1F14728BB6D12DC2F6EBFC87D71712B99243BEFFA9C5A2C50CEDD1FA0E799DC1BDA6F31AF7466E5E6E429A5606437B0DC4B38C506A6F08B2BA1A5DAC002F850CDC3F9D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ADNAIO+Symbol /Symbol findfont ct_VMDictPut/ADNAIO+Symbol*1 [68{/.notdef}rp /Deltagreek 33{/.notdef}rp /phi 153{/.notdef}rp]ADNAIO+Symbol nfADNAIO+Symbol*1 [18 0 0 -18 0 0 ]msf268.84 368.124 mo(Df)[11.0127 0 ]xshADNAIN+Helvetica*1 [0 -18 -18 0 0 0 ]msf15.8403 190.459 mo(B\()[-12.0059 0 ]yshADNAIO+Symbol*1 [0 -18 -18 0 0 0 ]msf15.8403 172.459 mo(Df)[-11.0127 0 ]yshADNAIN+Helvetica*1 [0 -18 -18 0 0 0 ]msf15.8403 152.068 mo(\))shADNAIN+Helvetica*1 [14 0 0 -14 0 0 ]msf167.193 23.9585 mo(0-5%)sh309.172 23.9585 mo(5-10%)sh452.922 23.9585 mo(10-20%)sh151.621 135.208 mo(20-30%)sh301.386 135.208 mo(30-40%)sh452.922 135.208 mo(40-50%)sh151.621 244.958 mo(50-60%)sh301.386 244.958 mo(60-70%)sh452.922 244.958 mo(70-80%)sh127.718 148.457 mo
127.718 146.801 126.374 145.457 124.718 145.457 cv
123.062 145.457 121.718 146.801 121.718 148.457 cv
121.718 150.113 123.062 151.457 124.718 151.457 cv
126.374 151.457 127.718 150.113 127.718 148.457 cv
1 0 0 rgb
ef
124.718 162.207 mo
121.718 162.207 li
121.718 168.207 li
127.718 168.207 li
127.718 162.207 li
124.718 162.207 li
cp
0 .4 0 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginADNAIN+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/P <1C60D8A8C9B64EDFE336D280AD0769103D1650D4946BC89E21A88DEC51613F3C79BEE823BD11DE4DA6DB5B89497F0D2976B3DEFC67AF28487C3BB530BC49F1D09A090BACE6D7137C10758B70768799060F36DCE81F308AA18889AF5053DE> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/f <1C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58ED82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |-/g <1C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |-/h <1C60D8A8C9B7EF3217E3BC2FA8B1DA462FB5094608F57CE7723860E586F183A8CEF3068A0C010301729338C182E1C8129546DF528AA710511DF02DFE7ACA98F8F6531E02F7C3E3DBAF3320F3D602AE65A66CA41E6984> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-systemdict /gcheck known {setglobal} if end {end} ifendADNAIN+Helvetica /Encoding getdup 32 /space putdup 67 /C putdup 68 /D putdup 80 /P putdup 83 /S putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/ADNAIN+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 9{/.notdef}rp /B /C /D 11{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}rp /l 5{/.notdef}rp /r /s /t /u 138{/.notdef}rp]ADNAIN+Helvetica nfADNAIN+Helvetica*1 [14 0 0 -14 0 0 ]msf130.787 153.707 mo(Data)sh130.787 170.207 mo(Shuffled)sh85.5269 47.6255 mo(Charged Particles)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ADNAIN+Helvetica*1 uf/ADNAIN+Helvetica uf/Helvetica uf/ADNAIO+Symbol*1 uf/ADNAIO+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Gary Westfall) ()%%Title: (fig17.eps)%%CreationDate: 2/25/10 1:02 PM%%Canvassize: 16383%AI9_DataStream%Gb!Q;kB\VkcKMe>mK&Ktb7m"2pQe&G,U"EVPbEaK#1hYsqf/e;fUb9#UV+q0hq@mPZ[hR:[OfO`/D4'>G&pcHkNci*oC&("9+Y\Z%)DMJk+`f>2R]P*2r0a9jD/c,>^k8kb%hJG$j.J%t"MkJ!0,Os!^g$WZkcgf4qrVcPU1cTs=`/D)baePl=IUB:;t+=*mS_6ik$R9;%E\L[Q?7BdCHdK,n/cSZEq.KaL\]q7kX5RY>C=P@]\'$chengnV"T-16Ot(?mX23X$qMiB7$*p0dba7A1_eMa0@V1*<%"J!F;)^Qn%kTB"<r65(D=c\l(1"?CIV8ec8GYH![iBI+nU@rq!)UJcl+Fc"T`FFprEV+`Nn!TWil2>M(T5W;Q:);`)ZX"#`$^tcF,"Qc78i"`H%e7uT8lmY>C59;TW_3D2(Z7Wl5cr1"i(N'^P"6OP^^cW:o:]6\[s,$iOO65d,L7U,PCsGNZGr!![C]6P+]L3lmj31lman&q4m5jPn%,VSF]P^2q11T$IOYjD8+j^:]%"!rW89S<%H2l64uLGm<X*.,mLi@k9.f*?f)*R-p/p)@4Nh;5f;*d\3C^_cP<!Em9'^hiL)+qube%6A1a8+Z*VXM2_"m$19GK*Wgte3#l=hX\CKXNSStC?cUe?LARh'Hn7s#Qo%=#5A1VBM!2T%pE.jg0_#%4>-kmI>a9XIi8D-6T`m+c%f&POt"m5q@NAV*R?k!r`\X>5!ps8.1Gl=j(oh>?5p3YHY.2p!*;W_WuS*gK1-ns?\Q5S#J*I'n\R2pO2jT&6)QcfD1(lSrO$@CP1%eu#YUf?AnjpbrCNP6$8i!LD@=2OQ+qIq&SS%J0Q!!?Z<s.J0JDUR5+3dAmu]lC7l>BA1QuD<?582$.^52GDj7drlsN]A_L^R'%Er%V?a!_6"k#M%Xd%$?ok--fGJ^lU9G6&2b*88h%Ga"VFH[?Yi0$$V"WGaY_*YBc7nb-C9S`iQ[h[i,bP.k(`R>#IfYbWp)"@n0a0u[%A,=!9o;stK0f?d&"ft!C#P?6Ys0Q&Qkgb'/&/oQgrh\2ul6-,[FOZ?JGI&5a-ie"rVVpXfJ0#_sn-diU!.JRcruNR,%W]5Xf,CF`%4^&=rkTf"<TGEmP"obV1OQ-*4\/SA>'UR<aZX6Uo^$q#T"Am\@/K?da"_nUl0U%W-R>q0CJ8HEiXN-u,(pu^1+@ZP\7R4L;$r$:f%pmq5#4T@3m%)N[;Vg4X/1t`>*)(chO)q7e3.=AnX2[%EZ:$,j!/:.B@fG<DuN$3hH\JF7B31q_7KBN\V\t<gL1ggn/Q4^B861d1T%E(5EI>_+%mL&&D+B%ICIW5:B+0T?tpGhfeJ9T'D0U*Blk@31Ee9[WJP'>;Xa`+h![6%0'm+#P!rO?bKDbt,2JRiU)/_="O2%M!h.%LRU0/^d\FqSuH!\)DkR`[qW(*`6=;#+g\Bq2-!b>2UEG"RJZp!.p@OOR.)mY1gngTqjd`jF<:b-gtj'Mp>7H5(b;r.F6bs(a*bbV%h[NuY&Kua+(1ncW`rOMdhnrh.^4``dH3/b;s&UJgOO0p,d)=E6Z4?eA+sI/SBV85ro>,H0T1grcpD$lnZ0cEb5)b$+R0/7lW&XnR%8/,j@W9M*6,,.@3W#$kQ^m#19K.V?,heXs?&M-^0JX&V9!ELIr./sgcSl0/UJA]B"+=-<hqar(D11]\Q1,ctm_fa)n\:m^&rT<YN%*gLo<_mZkBCeTl5GVc,qH(^QZ2)g7S5\3"$%e^.d;sQ-p;ng(qldQ%?QGsqVAfcPjd9#aCrO;CJ"B]KWlccPdocIqZfo!T9^An9l%^CGEkIF,cc>7YmhoK*So4pPk=Er]l!^_VAT!-GH;!BV(\4dq/JI$MQYIaa)()F;8MB?ooToZZ+ICmI1ckp%61q_S'`[f>g3d6oXh%)f(0na-bK`E_O9Ir3+!>>,u-5&-&,mk6>>a7Ma<tUkD"l3KK#BFp__&9f/bL!^DNjBgPNS>#MK;^t)\'6%dYeC3U.(&Le`o\!tn`%qP33(Cp9`Ibl+W!>./[+6)aLrWmC"]eqkch&7qFu#AX8T/.X)/[KZpPqI5HcC90@EIb<[g7@?:cX>L7^*5t([bmj1"eAO@@\G>MF%peh8;I_\bZ1'c#6k2%J'*eRhWSl**Y@"^4+lJ?%UX2>)</&U$B^CCasrMMP_*tJ;5#FO%+0`QVAJ/83/?T<k*n7a9j%7U3Y"&>")%oS%6.']?um0g$RFAO)'U?mZ#^lHW+F!/u6^Rm<doU#F;>?#o!g^AX,WaAm/=9[,-G%1_,A]MSpl`057!9%;c=-7!Qm&L1`rbl;+$%#(U5KWW6]/b!ca0KDiSrm:4pq^bbK7*80)!h-]g1d<bjojC)U8r-HG)Sb3uT=b,+sTaAZF64d`M%e=J]XNq<.\d8dRC2\iCl3)K\%N!)-!=9ZA$(iSS$VFc=:A[GV.QsXegQ3D$Fli>>Y6MAk.kT&_4K):D]DYD:MrfA"EVLYZ-fFGo2k-o]iB634>hjC#@cki5P%jci7%k[iTP[Bh[<o@79+G_F+gq?C.(,raTfG%:+L7SJ%<kW'(JA:P,W!JC?g%6_&P%9V'<B(#[%&k3jRV%S.]7nN,YLu:KYd;/)-0F]T3%fb*cL+:>QX+[;%rY.NHtjTb$8"1lI4)1-_/5D&-!j8]2Th^dVbN[ZWKd+s'TS.tg50`Ntc/&2t/)U3g([%l:LjLC7t$NKJmDHYsY%ChpW^B<\0""bKC9rY[6t>[-tbXjV+3o0:tC>4V'1.<WG[7i<GnE\glq@j@5s>$d%?cQ1VVNoJuMJ[#7<!%O%,Du/K-\%^;_?UtJi%P7iVi59C<#PS(peS^ma7Jfaf!=O^d.s"Hs\iJe?>I^AmsC9i>L%qG53>/8Lh!?u-?*WL,i!.FYrlH9,;;G'aaoj>?Ms+eRD?Hu(@%gN>6[iQN5.C.%r8A9._LV_p-BNNP(+IiDkIs7BuVGfWC<_3!Mer\YedB1>A/2Z1m]arg?SJiFXp)qBn!HVHta`O5WiNf3XeeHRkc%m"%T%V^?b&\(o'ONo0Xc=T+B9CMaQn&VZBMro;0d=JYrF?!'u$_&-9AQhDYM@6\YMCuiD<GDR6U?UDT%5H#K?0b`[mO%0nr+UBk/%`k5CUQZ@0"S#=J:O@I\Z]n*.B!%*ET5B[rs32[R#%j!-F`eTOM>Y#PLA!J;W+=$0B-I$KkdV.AUk77B/8O",Kr>(>a]-jB[npWN"%e(Xnjf$RjOKDF.no._BD?3k)mSIs9-FPHA=,:#'s@YVKZPdsNeHZ(NqkPN)7^7=Zl8jdDeJ]IUp4Zs4NPe"?XEmlTENghDDBQD:i%g&.Oe>8SrgO820@!am7?QXQcc]?Pp_fQ[qH_"IjHoj$9oLF1FGLDoO\=b_Rj?p0[RE7lb:ja7HW#X+c/Rpf(8L9k;/7)4TT6ifWp%,#]p3Q:m690@Z!dc,!=Z5KaL#M8!k)bOT$OhQ:]cK-cI]d%V)H9%s]s\u=]//]Ee*cl7O<\OV1R8"8>%)BX1EN'2(PP/i6#q?tQ6%\KRG+1!N71V?1<49gq]lhB]5Wr.O<VKUY\0=RiVfc-Q^*)sS$GIZueG!]C3;3>H.0&K2S@@(Fd)75*fX+lJiD;mU6n;e/BsE""g<%BK;LB\Ec-R07T146Su5u?EiBH:j"RIH[fXY"%6)19SJ3dZ?(IO=bJbX^YT5_D4[qnUho6T2^p3q)kn>^e.%CCN$BCe6%R7b!r4A_%aDas63_!al09!DR-/pO`Cm`d"QokEb*6`k><Zd`qQ`LV>96EcE\=j=<6<[@fP!00h65u^$do`.Ha))QF;G8U<R:0PZbtk/Oo9MSN%c;4]!mEWb*gsdVZ[M^muL$Xs/k)\o#]Ud,D$:e*#M*2A>Ssk1lNQoAUk59,r#Kj]FoYU>+CCF920p;2t]offL9&r9tOATIhZUjq9%$uicKXh`[p*SZR%S))Slfm1$N+46gbgkl:D,/qCHD>-PqkGZdO3Vof%.865YRarZ3BX=<aH.,cU/#TG%O+t9o3c2YFbun\ZD+;.^%<kZ\?p"hW68u>"]%=K(6U[fpDU4#\=ChYGNTZ(j[78otnZu8Z5#JsfK8u'dG]gnPq)JtcC>YYM#,CLbO8'_BLQj:cX>d5$Nl.-P#%=+K:2s5*V57\N^!BG7Ci*&Q;a7iS!'[)UHiKCM6KrQpX6n@H%."-WbIj00RB;@'5o@(k]GqNVLAe4NLEO&dIDiTU&?54^9^":H*O%il:*k8*dS1r,A,)OP2i!@(*\lABp#IWJh02M9\*d=-Cb%"WQ*Y9R=<]rB5a.n!Dg]JrCesbgR^^I#Vtrb`S$3[UVk=jk=[O[U[4j%R;(^=+<kQ9hAd<ppg@:8Z'K`3CVaHuc'CG"%1<D@f3G1)',]2(4#`?0:$qVBc",'5D=fPOc_p*FZ+mJUbR`CBQki*>:rL5>m0<3%%^0_=+F:N-0[+WRf.CB=!k[._plsTsV7TX"khS()Kati?QEO19UiBRW2BK-#BFLKm$&'H"DXcP%VL8A?JJ0$<J>CC:>D5UecT[f?3%6bh<Ar%Q;M&g1U@NP#@jCd6hKoC!oVMHg[]!g/3Q][Rj!mQ0u_kJ690Bsn\OjQW'R0SD8&lt?jf$?ci>-BWa2d$RlH#28JjL9=iu%Z'krt2FmFldU!l+bkKgV>>_R5ZkiC>d0,YlnN^%KbpWt7C.L'h+)Z:dc!!cmO]AiA)MH[R$XdsOH`9$ea&NP9SQm<]B2Y_je;3CA%eeb*lp>UUU7QVrOW+-6-,[SlKA8EUD8#L'DbfDbPigljp?S-[T1u.G1SGaRii+0@[U)4B,KqC$(OTMIR2VUA."-CN'Wgf]m_)r?C%L1]V=J":<8.[<OY:I/7i*sPUP>L+=>:"\n>Dk<udf'm;#]@(F0S$"?nU;c/skN2jgI2D15$_c<W\l23b"B)N$L]&C04,h%q!r3D4%&qRhMNmmfrr7$AVV=20HY&rI*V:0OG`(\bSIGM3h)HHObC&+a"NX)L`DOsCZnii[oHA&:^mK.dpI*ii?^R+ZiT?h?3h<W1a2K_&Z%C$fR$AE`_`bQmQBZTh+[X3$g&i74MFYe+jr&q5,kI:V%lhhsNnEP'k93kd"kVIQuOjj&4SLSCP#SsZU8=N0`Xj,fm\^4ru;o^XRl%aj0Uj=nnPLOQ5)]*te2'F?F,aA`/(ke%)[Hf*6W.rT5WjMC%SJr7kjehV0p:LUY+p@'W7O*:?[4'RXr^AqBr04Ce'=gt>3D[l^.e%GD\EGi(C^_DeJg>d9lu>c/"(FIE#YAE,6*Bc0rAVo<7F=]<nI%hOXQ(OK#^*^Tda`oR1lE2d&NB0;%LQH=UBn'+ah>GkI2dLVjrl%nRm$?$K5=0#ThtR?_q*0ftqn^r9D>CZ$?fuJGCK4&e;+#atCTV'f1GZh3uVhijZ)p:GbUpH)^F&\&iT,oAu"IN-d:"Gl*?5-J)9P%TOc,d$`Bd:H4<$>+e=eLKeqe$=n?30a,/-sLHIJNgPQd@q[R'A_$=<Q$>O%Uikq6X!.B#<MfJGhr3]@2RcceeD[%'3,qFLghf*cp%=n%OKe25"YGtl6Ga$5VlBI<Nb"*ffAOMq8>AZL1`5(sIXNl3_i6j:qU5ta,n8#4F/F=IiJ&,hGBmJN#,5J_*LKu(QRQOOBc:XQ'4%XcmJ[ZH`<C2?-DNI`A63CGsOVpDIGSLW8e:52gt4#2V+p@fGPuT:>k6YkuPb3\BJ@/clS<q&Kr0O#I-S8F(J"b;ALe=u#Icf,34\%KP#HNbl3(WHZH#j#/AB4P+fr>IG`o=AD5T4iHT#kb)5Du9uPf3_LZG&a_Bi0->VRgCn6aHnPgP_I\cpu"leG0@NKKDbN$lcU0mK%%P#>=CZ.q`$S<KDh#=Kjl(,;A[ohqYo,nS,8h:qhqU17*mAajsASTN_:`L2`WaUpQr8#`6#[WU_EU$"k\?2#';:'C^Gh*;Fu.Z>O+%VL_RGCg^qccJ3MBTYpN!c>t?1:;4m6TNPU887:>>$=;%4W\c$L"]`a6XI8e"fF9Z217HP?]*kIlU6_NsV/CMZKVh#oA1@"ebW5Q4%dFhd](\>Ied[_q;HVIOL>[UO+8[4?fL9i%AirpkO+&RLW+Ja;LHgAiRm)Q0nErE;cZtF<$!(>)V"5"AORn'bto7hU[kK1pX?Mh*@%6gjf0d?`)U`*Nq)hJQqa(+d,2PrTQh&C`nuraL2BG_6A&4$O.t?8EVfLmGKUAY.YiA`RLgN?aE0/-Gs2n9e0Rj4T,r4"nTHKL;Qi%hk+0V0hoGe,#Ztp5!0N!M;MBCV3*nESF"m`VkAB9lf`WTgO3G&-U;1&DM)*OYj>q)hpi_D1n+58a3-IbB_)*'Zp<H5-/K129^C%8%#Z"<-TZ=hYX7U9DZSAd4Q;=S$:Gm1YE4@g9`N/lB)Qu/%"n6/p`G<CO_gJJ-'2e8`/I?kFUrC(\dk#eI?kKjfYV4QIdiA,A&,>4E%2OSdA[lFR"*!Y'(#hl,H_5EnfdtDSNA[([[K8mfg&=-=&%RSZjrf-2PS7d2dF:!+#5llCa=I<M@Lp0h'ClA+K"boL#Ye[a0,iZEe%7p:t[ZiT[C=F)FDgXU]s%N9Ifi(l!N-7)"Ipe#U,N'E.i^sM]/rl@D$ap=48=JQV,4LM(^KPVQO/>T,\&IW]FD;Ip+FHV`<Bd\:>%p]YXI`-g>FQ*D0o&i9[P'*jYJ.esG)!mZ]2@q`*c];7,$Q,"li`'OtW(+!EE@muX?a<;HXCog0,`#GF*ZNT><-6G*iLW.;dOS2-h%Us*e)8I89#O$WW.7.MPGQ?6.Fg-LNgF$L$X;.0V@^'4a+bbPNp%l5m.q5L1@jVL>U2eH_)O7<l:]YfQa1j9]SU+'N+M^X<*)<,go%)Vc\s+?0dAV"P=ul0$3r?Y\n9g.o&,V*?-B$UutZ#&E>-?Mo99`ekOu&$05"22ju6e_YWX/=68YrHd4dk2p%LFCDQO[4t=BaIEP(%S*KF#f^*Rl,'O7d@T%scFYl>U3`D"%f;pqrKJcNaD;htg(V:o\RiS*Xo<m:j<]m$kT?9:"o8RkXCGuA3lnZ6uUfcEnGDJEAbC87D%?/3Mn@Q2RRE'dp?Kor9mAO@Ne/+OX9lu8Dk>_TIk><to]HADo]@BHbp842ILM2_f!RR5mi\h%_GN-TRLi%4q8o5:dfkDp&<(U0-S%[2s_1`&TR1RQsO16Kc:;CVj8'4GS7Ackr*Piqn0V":lfao^0ff*-A7ieinD\As!r]cq+61s-IAL*,3]j.Y$MpfoR3sE"93Ml(0F&%AGt:.Eu;*HLp-rO`4cLdqdcYfb?'/0"+b:(Z[d^=ae)_&__92Z44EEC!4r?tA=-<ZLmh8YcncOH\Te-'AXB*)%pAoZX'krLGEck'%9+*6R`9Si^K,Q!(ag3X;DhcZ<q`aKt"^>&J;W;jh_iupYA_IUMT)K@tk>[(-G:ZVB;f0,p5cdC>a6=u/(Ups.LF!-ch!]<js60X'%o`<al/frf`&SXuA]R[qnA+5ahO9pj7J7j$f2I7tT3)*D0NuZ:Xj+S!c%jbKYqK1O/$gRnV9%"V`72X>@ggRleGZ:kYT:5!kl0PPo%fo@,bf$)TQlNR.=gk43#5>1$r%1b*%_^8^IqN`G=61&3M=fIYE^,BSeQ"S3JHFKAd!jRO4'LHc"Vs_<nGF-2pd9K*C]<TVHZ[kIZ%-TiF',+4)?=!i6#oC<FGJR@:sK7'qU-b[-kQA[An-NMZH/+@I>j#'r0Sr:S%dkZP#or$ifYBB^7a_cs\goWS=r1ZE3cUHR`."G1g%k,USq2oB.G*+LECR?kM`8q7eC?8@bMTbS-Y@J&X40*E<'V,u.Y.)!D2ge;a0H6.Z8"`Fq(%u&o2%&*bU?Ng)E!`j26HMp5\='MCG%0d:(P"L@L_2YWVCQP_O-R&E0.oA`j#__IeD#5IF34J+.]15h9=@nHNa5QDH\HVFWQe@1EHku;P0fqn/*!'jb(A9O?A%*$=_jKm55%ZM$QHVj?snp<1:U=>QQ;JCY1c=TKhC'tEC"$Ua9/0"#,L`pP#-SR&Gb;d_&.?QZ^.l.XCh%*/;MWpnOUp47($%i*C.=W"^>O%d>$%I0/^&28[uI/:.>53hGWhns.b<QOU[Aq(baKjtu\bFr,_B=A,:Fm"-)C`23mJTHpahV,qk,A)eFa!STQj;X/Y*D7aQuqmX"OIKJ_u%>t46Eq5V?s5fO6dqoFqf=r2]:U,Vh1]@KXVB`K]YcZI"j$;JI^)k<sG5Pp^p\_HRub]PVY;bLe20*71f)f5DaP"0['?Kma7/-p]Q%71n7/T?/?:[m*"UPKo@@k.>2kda09,Jo6eFrc?Qcct`44$9sR=)mUgbe<b6-ib5U;l2A9Qft7t`1Br\0.p2^#XnFA/D"kh]Qm45p%V86@+0OkNZ<9UHKHd'1!AA#bH?L04+?oJ$KK1Si<MQB/\'^c(aIGL?nBELY2%X^N*CS=S!pfidAQh@"Z"LF<eF_f)p>2Ph)r8oU;%(d$*cXHSp/&eDg(JP=\JN4.,h#tAGDYsL$jTA>AVDmj:u7sa?X*hZ8'B>U;$a8@4ZN>:<L]hLuBkg.Q2#4)7i2m\o0>_$9]B&Uu\%o^tT84QobE,3"br,32g7OQ[leBP530B4Npoo91O?XN6@#@!c+l/`ng\dpapmI4jD'Le9"O/MbIC19R8A9=lr-`q+OSDh'1K]h-7N%WG+E!h=XWMneb#NFLoh(!A8-4N/j,Wo;#4BV<,V;SICk-@"%j!^[L_,jTg[K5f5;S'B"lm>P_pZ5)<So6e+Q\pH8/H@uih^O`:m1%ZpQdkFcP:(iPkIK6e9*?YJBEN+hrG^c)@gaNmq#n9TF/RO=u+2FP\f)(?3V$CBs?<pG]^!,_O/8noOu"YJiT1PjSh_cuT4<0\+lZ%Ia['RB+LW96kWUq5JKkBU8=14h1"b_PKhCN^p$\?C/1==Ds+6iS##t6pos`*1_.AV&BgGC`OiUO3DKbpZ[=39V1=C7%5BTidE=Vr%K=rp!.cXUo>^epYnWp*4?dMe4\-3,!gZ@t;*6q)oGQ/#OU=)i76"Kr0bt]k=n`9CE/;p#9"?qf"&J]<>o,^MI!ej=p>C1sZJiLc%%)PN1?(!3oDRWMK0Y7%,`)IW:8S-m3?B>Ud+,++"#1UG1s*6M@`j_GGc&.W)2iR?G3gCI?5[`r8P;C-/*b_mD"o>,Wu%tqI+cJW65%p]QuL)_[/]]3mg.hYqPT4WA(]Kc!9/Fjj!jEQD<"mR6`].\[DTF[!.TE;C'T''r)"#];8J>mI;]Sn$VKI)h:I*.iD`47VZX\c%gS%n,eZ-QL/*hLr\ml$_E%h@NK'G!t+Hggqq;S4S-4bn+3-jn!LGG('hS*iq3I`Yn]_eThjUg=E_YMjLHg#2L`iqFlXt.:KB@mE8,k/%Jh<d+!B^@A?1=Q0#$<]uMYl"W]4#mc!e,F&g*Ihk(tS*Tk+YWXZcUAMISIkL7AncBQNM$&b8h;UhqV]bqMc7)GERE9$H`ro9/r`#%j2ou.*m,]c^Q$38K9g:Pln>UTd#k#53rClfA0N=G&%B9d77Yo*Os<"<qOWSt<aa.t:,1nlmg<3[:a`/1PZ1j.16LO=.U!IH_L6nP%P_#sG_=&`VC+!)r)cn'o]tnUq,Gm1u6bc$r"mkVWZ'_*a->spY@t"=c+f?.(!Vug-J:1`q@#r5J1+c9?bfeMD(1TYS=Vr/sqO*/k%G68;kOGplgEjV^LJ]2jRHKfgk7)Gp.3B-8`DkMl.PE%m'^[ed9r.a)[QG3XjZ/WQ"8Deo?JCtfhEoWtYG6G;NqZ<k0PATH-)17\t%iPA`eG.uenCK3T,qqLI<8YL1:p<E>N]73qPXIs,WOe2hF2f[1&@ie8A\dH4\Er?d6`=^:Q]RJj?';q$r4[ubQ7FUBoUr,-:PWJk+%nsKlp`g\rl`j^/!?6Qfr)imMV(ccOmZV)t!0"ns5Xhh[:ZU-L0C%D$V4;>Op%l9Si@7S%oGO9)LcpW[;)i#fM0s`UN]WY`&4-%O2%32LoV-@tq\Y0\(8b-@%YI0%@Rf)ZGeCB\J?ko`*"GjI<:mY'<rm@oO2:E>CAodU8N67RK"JgG/idht:I\.utN&[AY8GWYA_A#$Q3%>K^V&SdL-`RtIsg=lg):29L!(_ch9g?qb-%R7=:e[nEW)8-`&@V5G9:3)I<c_<^4gGct6.a'(#^2tOo<gT1JkNjl(9r&`DBoR9mO%;_NTu_CdnDpRB#Jj:#WBSBcD)?$UHX:L"s#IKJj76dZCrq<krSm7*u+^oQ?CRf3&KB:<PtBijN-2Fo-EDsRJL<Lf01j.Wsq5[K2M%73_aln(rp=NJE/AHEcP5e3Nf$EjPDjS$+AaYHfGr-_ES?MiLt!!p6?Tmb*E908Y=:Gg.ptrb&GhC_q\TAs?\PLPA0AMuqR8K]G:R%@Of_pp>]XsbU$:,I/eFHl]e5Kr-!IN:`)Ce<QbL]]#VYTJ)+0Ejl]J,XYU)iTo,q.#[!):(0,_hAfmCc:4V7i*30UhDEeT,('UI]%GN$@Y"]FOW!#]P#Ki,,a5]pnt]4e+h]8KEkJWC4c<ebU>hcH[<)sq&Us)4(HSs/<Mj\]_Uat+&r9*E59>"WE@[K_5[LVn-sh_(me%Zp%Ed:+`9'n-AR]Re\.Km6aXi[&hO(>d!V=[2p;][X&KIB6"'-AA<Xa:EDF[c"OQ?X=2'U.&AjD^RF'XCX!h*-+p4EkfUTm5T0;b%n1LBu^G`\m>s%^[ot<8MKr\)iA@R"oAY>i4[U:^:UeZ!;S84CN)6%-_ePjW&CZ*\E`QG$@$Je_&g173ucil#l_<U*gF!)<G"+#r(%k'gl8XnVG/>cS38qC4%17i1!sSj51tOlGX0qZ4[[@kg=YXGj<VaUC+X.'9R^mbQ</n5jkd+EnD+`L..mb\4I'%ee-&.Vt(NWA;kQ%&lJ,$p<1n`*fX1_9p)T'3Xg]%,#/g.X>nU5PIe&n*YheL_O*jKF\^P\KoCKB]QYqRGm\c:<sf8E*PKT.LafFb!&B#Zl8CYLMD2kF%63,fr@*>&T18g)]'m&u^Sd,-p[f`RO*o=cN<*kFSJ-s]O.ik'Fan'@HJZ]cGepahEK8!U')Q:rU53L4?d%370dK%=$p/ntP[m^PB%k[WP3DU=.LDeZ4b('R8H0$>(.TEE7lFTK-394Br][VkQrWs;bgU/A]N+`pbgbYQYj,a4\n$a((o4k6,E<l=T<^?"Q\FQO3TT]BW'%Q#\JP?sc@1q1PWFBH;h(a_]Q*B?9JA8@<(qrljm"O8Y"mZ_a4)R_9HZr3%!G2Ud:C:tPtfZWJ;7rFR+tn7SG$KKFb,B*L[(6%ZjL%@"1*?o+kF9Amfj[N2.]J%(PP0^4rP5L_+jU!#bh%)U*k[^O[LsP^/:L"<!SnK>6n`.!WeTI)HjZoO0S/h5dXKW4#S(_dH[NarWh:%2A6,iS2MJ?$[=qOc^:^5TLZWi<kG)^(IDLb]i%4B_jNg0XCV+k1TJCG27h))JtT5g<.M7X+9A\B%a`uT!EOam5_NccdOqdENG'Fk%%E;CEP:=/!K4sl>Wi<Y(IDV5b+c07'8'Qp=mKKftCq#XJHp7=bn`Orj_Tb5*E]Jis*i*uj^sOr^'#4TN\7[-V(%Er7j^@Len2ou3%]aQV8F$I1jWS-,=5EUNl;p<QPGiCr]#P\3sH_8PYU8:<Sp,OjX]2D6".HsSiLLq;lcZNmj4M5f2<f;=cCK`i20kYL(it`V-FI`\;%d#rH6"_a'J!$007!ia1`d[uNo,GFkYl5c^.TWj1?'JK3[ghrISpSHtEmk\7-`QPg.[+[<=$!/I^@3PL9cKVX`?VX_9R/P^t:+kNA%kMpp=igJ'-KC=ZCi]b:a?n>\VH&EJg+Q5!o(ChZEb]pRWeT<B8-R7aJX09$Y&%n:2L#'d2SprD:gVlQ-0`j]MY=1h%H!S_r?Tk2C%6d1(.rd+5)\4N7JmI'5IaU4,S.QA2W0uFQK7Rr@5(\2@JYi0(2JM9"cYe*]$NW[prK0*5AfS"hQ0KN)=7"4TS^t7!I]\C[5*g<8q%fR5r24=ML,Kti5Eb*Pm9l.=a$>ns?\)Of8M<WT<>C#%_#d=cY?N3l0("E);J9*m%apH3[(UaE,FD/eVSfXh;uUk.qQ?Gp+[MF_ZC%j3V*,g%hS"e7?OVmFT"n=@9RKAh0'B6i)e/DVmOu85%gH]e]5n+f$HcSA642K+NsJBt)7km(_F2`s=-P`F2%nVqp/V=abroSMHuf%.sT[t$R?d6DLaXL3F\hgGYo2iE7qbSX!&MM^22@:KG=!ES<\u,d+TQ3.jCfGT7/YnjhRbFh'aEMo!4223,!Zk[Sn+1mdNqQSW6\<%;[FmZN#%R+840k1Xd@j,6AkE&FKC&]-XQ^%5:[l\X@1rM(YDAR&S]@.GZ7"EZ6HZ!C79#g'0'mGG4`4g#EcTXaSSqYV8?ri"$dd]%b)t8mfe,Suf9`Yl+WG3q<F<Bm8.-MtU1C(gBtW:Q";R'UP^hreiq=fH6OGcI+kd1QDU+:8(hn<DcXg(;p7-@X7a]@LCYk-+R.BTp%<%<m8ePG#%,(9A;=0lX4F81[l/L!OhYV9bV[tiOV30#C2IAml!<MZ/u<a)LHXl1p;Ii;]l*,@_!I//*ec6slb9atC.8GiA0r`+[e%@U[W4"Rs`,gSp/(Yqc3&bK!nG83cj_-WQtCVVCfVZDrlVUPSZ:IcJRA)enK<Q_AJX8..Z=O:3ST_C>i7lQ]_KO:H1%-)o7eG)+[U%!$ZP-#u0IRhYD:ro`<LZ:6+u$om@"?P!Q^9\n!=N%=`U2,,D"tkpT2eqKDM<H4,j]O4?VRBDK%H'`l`>NKA`l9V`"[2GjZmb#.ZL%#].Ts)g2GMk<;q3OOr0*hj5!VL_MpOKH7p?onMe@++UeEOR(f[4QU+9`h%S+Od8(3X"B?nqGWr2>r'j_*ZZ6oRLgp.OJ2gdGQL*!%D)ZD1V[>[]*bjeCB"79=Xo>j$dqltZmF4A#8l($#57B)_]^k%</&$EKfTX7(DVcj+"`mN4=KL2f4FF0%eqWKe\9LLd%7;2AbtWJl%jd%ZuVs@WunQ?@%4PfHN7.NJl4I&b0VIHm-)m=rCjgQc;qc]hB9.N6/iLb8%4*XSJ$J,0F>,_Ig:*/aODq?>\=STk9pb_R::2h^4%krI<np`5epL181c?OtgNK3f_#nhfcZai.W9.SmCRf=Tj$.m0(pXBtVmF.r;_o%O\Ci_RGUG:Gh*I%L;`rIS8<.AYVVgX"#<A#.9%%X5An\5t.$1G!DIikCH^rh+q)_EOQk*qS+\R5#cbfGU!k\So@R&.J<C:gtsq:22Y,tc^Fa0EhiE<p%<%siikPBPb.;dM>i]'rT%q5%VnQZ?ga1$XV=BdU_<4='BU@teBZm;:YP@bZ*HS`lEQbi6dtH28IWZ):MD<G@>A&?,H[K%nUls-rh%.q?Gknt>j'B!q[VKJpea<a%%-ia*Zn[s5m^Tp(A"/jgtJ=i:W"3ju][6CgKhA0P^`FNGa!53*C&O$4Op(1B]JNN^O5gBj9Xck`*oG3oDL/).6h%ZM>hSaBT=Ec^"%4jio-m`sWX]G`,8rD<Go=,aIA]R*rjb$'`\i;=.JU30h%(+?sOY:<G_QjkoPO93=EmD&*?+bd6Ek^KLk't?>kTK:M!C"MI/qB\ZW%jkJ\>iBp`A91p^b5K-.qXZI-CaA_q<KQM%:h$Q^/pWLjW&lN8"#A9.U[bOu]8-@\N3msMW'N[_\49s9Fn!=V'q@5kMU]V(%,s8&X%PdSMn7A<+V?s!DeUn`l*DXhD"Zso55R,&51kn%1N!VD5>Lr[D82Z(Ya)RkrG45c#'/T2O6MZJXG6[rMZBaZn4p5SNU8g_(+?&o)a%ldLn'pOc7%B`D'D@6!!3&moB9""HN[fKUfi'Y\#96NPN>=IP[:TH*@4*)EiUEu%3eP$>u:/QYXHI28;LGq8f6b9LsTKt0HeH?mAm%r@,T1Ia/`Ce6Xn5Y_rD[bp_6!Z5DC2m-$+SKH75B@D!Mc>1"G5%'NQuTC#d6+$nbS*;[i&!fAC5l86=Y)g&Cr0't8W/57(ch'n`f%l9Tn:H8>"/"@li7L?/#['$6Qp(Pn+N4H"W.L%2!q>$Z&okg/0=O62L_O=8AH5P<HR&8"aar]C]B^G$^kiqVpb(5"EA2h.[T>*V<H%<^gJ3!.-_YfpVW&S65R)rqgjnB0j8c&;*&kRIS3KVEC_MGLJ"*+4=e:"rJAG.A*bUNKfL&[tTmu<fDPN]g:2dHK'J3?Nm1n8XFZ5%IUrSHC,XWk;kRFTUTmncNCYO]DYLq24`SjALirsc6.])c[\?_^<Mf8ei4ln-eLqora"82JYEP5CD.@*IXWoe_k]_,=jg:GCE@J5@%f<^_p'^#oRmuqH&?48+u#,dnRS((IT:K+RknZ0oc-:<HS`#S5\X7R(O1r:a0f&1(dP4S@l"t#PF+h82\%a>BShVb961MUDmrh.=k%&^;S2o5f!;.<q4Els(-<A[WHPDi@@;r53M0'?4)2NkrsBTaD3tD;:!.I`6cdf)6cf94m(V<FppXA/u"XR+@KQ,$UHZ1g.ZLSXlX\%26(spO=WhsA]\I?A2B,*G?g;Ge`16*G]rnj;Du:JaPf22'Bo;>@^9_^$]YbHA%>&#7^Ymf,GnC#27llS;Hf/bV>6>A^7cFo1$SN>%]@$Ef$p$#hX$;5Oo=*`r.s5GX=UbHPgBWFr3(j5todg(sRHJS3+9de?!l^7,G:e\DFmXksPA7H<#Kaun=@OOADd>#:><.RlcXeLS%Ke$9GqkRJ8LqQm#/"nL!e$@gu#j+!W.EJ?k/GI*/QHEp0r&eM*RQMp@PQOP"/<DnA,Arf=LH<H25%Qe_:3L]TUQ\,)L"]5LH:e59%1$No$\;R9=&X-45jYK4:WGQq9&X/?[k_[!s1E?7^Z3?,nqLFt,"/ktUba'RtiYF+kh_DK,r[b==;NC\S1^#9oN='cH9<'n/P57ue%&E&;BYOSVu')?"":0gElr)AaZd.d;-'`])Cm8SRBQ0>4"e&)J1>MLOHq?$IXcW6-IXbnE#IaU$7--pm/B/<Pe]/?6!TJb$?TOMLW%RR)<fgiUjfQGcFJ`&^c622Du0@BDX=Q;kd9H^TZl]<ll\nuGk%F%T]@.Mm*4=Fq)UJ2&>fpCjqrD5Yd[rU.FY_(^FhKZ$,H[OScD%'o$=`%o-PHN_@8/<@BM.@FfYq28^B6.SeBL=4I>>X@fgA4J:uuOr,4_A,a+(Dr>*A^f(D\3jCkO$q)/A&Q)%C?DF;'@_WNt=_^XJ%e7;gq#?6nVdWu1$;d)In@SaJ"d]Op$#19$PZp09]_JN#OKJb`@Z2/PX_V!>Vnkt+G03n\Q[?<jH/CML54t;bY#cBo;Z2-*k&AuVt%UIFV["gG,N=$+h+EY;fF_M&21=_UVa9:`9fl56j=SIRTBD(BGBJl04hcBPpc,9EdkGuWa]Qo>GfH]>1OS1gbJhEbP:&bb5EX\*11%\*a?+pnbio"8#8/N9FeH?:D2DcB9R#kNCbo*Q^)_#=/sFT>]kV&WY^CK`FPa0+#Hl?MR?%pYK)p\rc=kSch_&(,*)HEdJK!-F1Wk%P_RS1)uukIgmG/j#$t\U2)]jsp\<P/o?oNf9!S2kVU678dcHd,Ud6Q&X(er-NBBOJQ:@Vc3_IJ<"<IVCht5=IBLh@r"@c_!d=?kr%]"))>4""`!FWTjR7AG!e7[(jgc@p=n]iP?7YI\kB`i4@k@sLVu(2/Mueo8e"ERfSsAF!&Pil3_UgCZMdJ!2L1Cclo]iWDFA(RZ5E%@#aJVAoL(4;R-RdWgX+,$sN>X8f"N^h<i27%kpdLh.8EG%?#;d,O[fp.EH*cY@GWkm#=dF760(s&''bXa?rg`NZpIJP+urYb<QZ;%k)X60pE#$rn.i'ZD"ce@X5V+&p0).Nj+BO]c2slV(.r0\!&N\"C>/DE.$=9q.!?5u%;r,Vb?(t#CP9&+'PPBh"-/t&D.FB.4itE>%Jq?+)"R!)@:blGiUeD'54EgR9#a<+gZ39?cbSS[0kc(WARoW?gS2uAP0Y#>8[IJm@I474Q8#-h%;K_^C3X[taV.!"5J<I*K.[o7N%FN5@eUQH5m'O)Lf.37T7iT)qMEiufs$:I0;FNn>`)9L,:Z^6E..LI!]P-buOT>JIp4l&\.bII[,V8gA_+EL7>qC]pEPN:/-MO+gR%AD\.]8u+QogD0kf26aHDS7fRA?4kihE[KosAgEs!fc*bY8_)m+`BA2U'-l\X1m2dr*.c5CFM+)n3i*T/4sa910Gh#KWW7Dk"X6Kt%PBjkM><K6a(9EIq>J(Pd?WKOl>sZN50:18:BiiZLXOjGFe#o?2VZ^7uL/,@4%T]B3UP@'r=[C(r81q*>e#o?RWWb&ZTfY^nY+S^l%(-JXP::l+<4hKb6)EM;%Q0R"0XlqWWkd2l(fF#6KCZr,Uk[Y9gZYSbM75m^OFE.aiRZOUW$+)SJoLa2_eLQ4!g=^+.]<p&Y`$%?*%%$V!3B=XC)Lu^L33k==k,JAV&:!5EXAA=9&aCisn^<dtbRCSEs`UE>2'SEqlUsh%HY%@e:o3@%]Pj7CaqA8Z-ouH5WWCn.pO7LO8%259D\$,8`3:+2N/cVlU=Y[,T#JD4_b/YGup:H"dOJh5QX_KE`8E,lXcM2nmkFG=sF.Yoq1^?aHe-\E6eG*Bt)c\V3/:/;$jWdBHm%C$IUk_$pW7(1B'saGA2`6kk4:f4Ucq.huI?'J/1KQJ>@_U8[7=)qN,`RlAlbP$t8TnWAa-(R_;%^Hk_203cfFVtp$Tc+Rq=i/FS$%7c;XA*$uPi:+@C7gp($Ne-l/-NZ*_t+Wft:[ET$<FaPYD(\%G'$$BXe[6kHD+_ZRNB6>\HC7hN+/<_HI(2E!Io93gc2Ca$N^#GV_%a1'VK/Nf_e:EI?bKGh9u&4Gj-"i,4PAD#@+$j+o"W]uJP3]/^k%$KEP\IQT#N^D*fQo+:OhArFRm?>,ZMZC(\PRXI$?r+tW7D#(o%Wr[`JCRr=24V513VbNPGJ+TO`T@/j>mB$l'V0!F*eSt3r9eeEX]s6glgnG29X`)j-O\pe8X>`s*V`R9:SIq^kL%BT>9AK/M?^2J&%W\jMuUJZ%KW0-+ahB`Q"RcRF*+Qlq5EEQT6-U%)nmDt/k<NOEh<9N=<H@8E<_K^@]O_5h[=4Jgq:+B&jZH#5.N9#F)f\?V`noO7r%'\JW6A68/]W5?gcSW&;IoHIABg,T%%K2s]G(QmZhrrg'#G0,6f.]1aqP9Mc^g$)+?EQ75gNQ@oO.XcD^L]9!<ea_m_6tB1`:&P2/%_c^a)9-Q-s*;EP,8eDpp1m.R'RmC":.3bOm-P">H/rn#g+uE3EA!`FR)2cM&X?-$"(Ir!Y=nFN;F\Bu)l@]RcZEa&8o\l_Y2>1S.%cPneUNS`6h;3RC4&DA!(7NIJW;Fj:r)`Jbdg"&p@SE9M>V/r'i,b13fO7>ja\%\A6=(h0\0I?k)>$#ofrFcZ9W>B1X_R_ea&e^D%%";+U<V]GukQ!QEc8ZEiII;>2:Uk7JDg)4$S$Q\]N81NWE:$Yi\LD.`(NE;12=q@NNrn%tOi@`GQ2,Xrt,X_7qH8m7T:L4WWm<Z:k%Ws-hKLJunE6,9X,&'%(.jV;deY(m\0@*d_Oe#eB=:'hJ5`2V#)\b0p9W3n2,nuR-sQ!Ib9HEeubFLX(pd?k[7`=1ot*Z[#;69pa%%KPEN07p-JfaaWFDnp76f$t_gEJ>77gKu"d9#Y13-E9=*p7f8[>>S)q,hgCZOamb[t(j7_<@Kss]\?j\00iZfJK10ThM;_==#>Trb%-L)!o<'(@&0fs_oQXMU"I(U;X*4ZW\el[&0PGV,Ynm2GB4Pq'4C\Un)"%I7T&jmNNB(dkm6dQcH?eX.82[gZ.e_r!4]hH=/@+$93%oM1n(aDQOgF!'3>!.WN^>f):a%4dOC;3C_FHc:kA!:5"HW?8lVW(84Pe;J3>W(7ra4F#0$GERh_!9X]8'0q]W:hNe(!][*g:Fb)H%pbC-A+Y=r\-EG.[WVRK*E\WM54L.d=r(ZobF+[r#;[Oo+XYs.\F'^;cE_P`OV/XH"J\SQ+c:Ha]nkqG9^[gZdE(]Hqoh49=X;aMa%g1Q\fJL/WQ2..?>p%+mkiFOP1OHq4a>Z=cPm+A8i@tkZ1!&4AA5a0"a1'FJ$OJ,MjAk5Q*)*W7c!L9kq)`X:aBka@q^a_R.(nGJ_%:sMq&FikgsW%SXT4&_`<>N6FNR5=fg"e"=@D\C@1(LL?[CnIgGG$g)TU7GX&\L^d0c/2FL<^,V_[1f$JG6iRG!=K[M[-*<b+2osK%:Yt0#jTpQe7Iap^PGHju0dX!AP$JlJqpK=R1/t(r@*)NRf2X>EHW.%.K/`B6W^u+9fXU65*&Woq]7llJT5)>_RMC!M^N>f4<pY#,%hGH]KYLT5EeRCO=CU)67HpLXe<bVjW\n[[(.PGst(M#-uDJjN1<nQ4B#<l.`Gd/$&WZVc,=p'i]DtOIL^/hMn>t>uMl07nI"_jcK%D9O(+l4nKg)Y`bbem?jg((-V,FAD;OE<Qauhhc+<%^#r3eFKQ/5DL1kLOZpF)+c0N>"a'UZS)SW-Q$n`+?)^a%31)`1oIn%X.OD_%99XR2JkkP?;?$>aQ*]di&irN?RuZJTlM"D[*%#Qr9<t&XE]SEO(bDYMB6l&g>[;T<S5OHc42'V.S)fMtiFL!#>sP:sY',]48m^D#%QcLUFi?0O;^XBnDEe_Vi2F04HJN#\T]tA&^rJO.C:9#%jF\*9I0Q;N3@6-ut2bH#%.]'a`GQAh742]UKl#bo==/r,rWhhLj([$Y*%F@np\ZNuRNo\=1B.?1fQB%OGkl')CJ?hnsB2YL2Q7]iju9rI'"0X?2QC-(BXd$I_\l)r*/WMWUoV,N@WT3Y0h'PCjKE7_1g1QpL6%Gr;-jXI[])\QUk];D$_P\I'-Sdj_7s7`/K;RSKhTd"])K24^24FPU[mV>4&MoNkEiG;OgG2b]c>9rA-ZZlNHteT=EVeESR1YGOAc%--oH$7Q'"E.&LVol;6h>eT>Ob(LOY?:8sOSG":g4Wp,a_knMG0]!.Vu,hm\uSOS%hRFQCO!)tf!"k@]e[</Em5+Z%SVc6<e./Of\%dj`hql((/98rf+$2u*c8QWMWbFU;)hW@W"C*Pdma^QU[.j<m)*R2Cl^Slm1J1!560FeN.:A@V>6/"0CfZ[^g.l87NT=1bY2W>8-@%=7iDbGAF$03XL/67eE)1d.2P>HYDAEdT*HMe*3%jG.Hr.PEH*BIEIr^STJeBQ"_(p:/O'mD()AWWB]HRYt.!O<E8;r.HDQgM9O)F%\N;;\lJuaK:nEj,7<^-@,:X-3b):iLi<uj"1Dqa>]Bi41PW>ghdG;dnge"oM?A7@KAP+/G<57YB:doue20Wf*Cb,tAkV[SIS."LU%FkjGR0n[pNZE7E3c6=!MZ5]hZeMk(Ucsi#nCO*?G6b+%;r+WIR697L.mH>;5BbV;=p@r_;l-@WRjk!+,@Aod9@8LnD=VQd$[I-Rc%0q`<[f+U_O30[JY2-7ik7*X9H$_;=P,p9G\)Af8V0,pp6c"s?0-**THo'p2JK8K=tV':(s<5BCkUG]F\'SYg"#j3-!S5)BL0"NFX%Bsa%/2mWkm]:cBop\252$s_bI@dmSgH^-L<.Nek[;_MK<`PR8#8:u*pM:O:Z;Z9KF6_ot%pSsKG%BMFb4GOjQVK5=mg_3c6U$eG"%8$u5\eeN*WI+_cp#/cePl%KP'Q&ca;;p3]-hR`n=kMJ"9F@u(+]@@24<U)U5Fn>D<_N>U7**l/am.0?ecp@anZ]IIuLDSZNY+nl!%qle:5(lc<Qh/RXN@@'XnQ#]ESMP9PZmW@p"^<-n/9^UTRa'.]^E-L#1H0:'Gr2.--e8l\eE-L_EH)KJ;V]Hdim^P=bR*L,`l?D$S%R:mbGI_r7]a7Rh<%%fTgJb9K%_CD!7noI;EYi0:>!sNc)<L2ZeG3,LH_HL4)S1=fhjb:)B$?WECmn#>97lSi;A.6`ip$G?p/Kq!E%"QTp_m<fM0<tI\1QFCXd@E]lJ=])kn:UuEU6H];QBG$HLK%6k,].eM-6Et;HD%8j'h"F\,Q;WSX/Rm/3(lC>$8hU$578,,5mm[31%U(_<I6'mfqJr_CO?K7LGH&iBOS56E-dSlVDe[Tcu]'`F674,?Z1Y%[-$t&bMgLE79Na$&,`\lpX/5&.?cb`54CX/i,2W'?LbYeAZ%\XNuNh1D!F\ACo0e<`:3e[(sdbYt]l<'Gq*OC&tXp:X)n\EYt%\(d_b[R@<i$?u+1`GRd;?J))1j\WRXbPF]=>SaBNOg](C\Y[?X%P]i+I0$3NilYMnNja+GHV5I9'L\>'%4`%C#R$AriE:3U#6`gVI3-/6_QAo&[*`Mk^o#7D9G[jD^.:-h'T2^o,DM9Pp!@cN./D>$%%g:re0.RGW"LFqYcH)1#Z[(tFtIP5rLZJ*&4LMCPWmdNrL(ZDpbpFH'!F(k:#Z"i's([1S"/q7*)QQ+r'9tN!_PNB3%[Q68bX!+=H%MX[4oA4Y)t`g>XIp.D=fQ<[`E8,@<aVa*(Ao]VkYT$q3'/bsSaL=ueplI,N$op3lMdumu`lQHG,P7ua2@4>PEq'`N-h+qa]oa]T`%KYY8bg'qfN2TG@/[+=AG?8!&U3's?Gs7:SL/uNN8+*?eD<#G:C/!\&Qdr/j_jn82uNl/DB*adB63!E$'lB%-TSZ4N[qbN/PV<J^C%aQXrS-&qT6\i]jQ/S!fSB5&7)*n2YC1ru+j'rOO!1buIuFpX^WC>58CVkqoijX_uqa"#@+kLe7GW[luh86p@$>6?Tl"*^Vi'e\@W%6oPotS/ZZEL3u;;rKWpmBYXZJ.U6DK#7U"[deMHr5o/'500TU&r1ko[jh1,a7$\44K:mZ4UERJkXr#R[=s,N`=`L>[ne:LT9@"e!%OrJ\sm,4bDl5#qd@><k%3^0ia0N`cBY^p*KU1V]@@NYZ176)%^%j=k9m)hl?NfU0Dp)%j+KHu,AUjoM*iLAi"a/?L.SlSAtfrNgO%r1,9k9*)f7cT*ta`_%m;?4r5tmh0c<Si:Q&)AdThVXG6,!VmX?h&2IBqpS.tV3]ORWdC#5iV@ijl?a;dJa(b`+HOhk0_N,%"9"D<%aom7Zlk#aD8E-'Pe%K;X'T2-]noG/W!ij%rb(\BJ_kS,8<*aio'qiqm^uKK,<'ac.UE6`;cE74*=p'"E4SeUgooALG3i*21BFUWS%/S6Ih3TilFUKZ'/WW3bL!lZ'CodUn*<Iie>YGV+kXTC=_"),J?eu/Z"Lm>3XiUZhEpS=s:.A,%JCtHFdcU\c<nk8e3.,7%4.3F$a%gHU!5TDD=B2)"&iWCO\nV0o22V0;j7I.H$trg?FTAG9/3E%.E\9D-)UFB;FX4a.=""s;agVgYW'$"lV>hWoAX-.eF-L,uorn,0Mc%V"a_"%o#4Ap9]2F<'%nQl?Cq7:r9npg&ob`)p7Z`ITfUB<V78C6UAS&B:k)6=RE0om<ef=;\kc9q=8n2Zjh1%KBTUfrO>HPj]h]%%G<K;RYM\kDMSm!Q9!7dSohu_HH`Q$MED,i8IbO_!FT]]6p\JT)h&/<[?N4?H/(@X,EqtJ9kN^KBrNpM9j!od9^"6&YD,ZV/1TJlF%Y9G]I!nHQ0qJ"jPGD.S]V"lY*0gk^3)7bssnpC<p.*>3>l1a`48Y?\1H-OF@p\Lk2M036L[&)`.rJmpt`OG]C<Bd"#YFi8G0H%1c%o^DJ%^=?"C0B_3XVj;;Hh!-7K]Ar7)rJi.0Ei\(D<G=nh0oPB((5mLpK>Dp5Zo>Quc%#8sIS%dgrD((fmtA7W[E-nop\N"*8<4Ip%i'+jgN-NlfNYCmSe'r%OP\kcl\d-2YrKpMsY#4qdFfXCk<G?+/B,jt]STh909#%qr(L,qZHi;7!`_X.s:E'Z5Ofrc.TD$AJVqf=:%^+V(.hJdkGhapo>ah&f_;<KG'qM?N]pf9V=SIs+U$i.JbB31p8XV`+NDL.k#rS3jNqADN*8c)i/'C&mW\CXL``Sfti-f=6f%7U4Z%^<<]K(N/mZYK/1B22:Pldk6C,4Zcq%L+;roBb+GiJNrm85OD\RN`ND@n+BU0+!Y@gE^@rKbb7t\DE=KR8aB\I,B:oMn+BVNaeP%I%c_u+%hs5K+p7S++rNm#$l)s7Gp\JSCL>3j-V>'gX89o<XT@C2,s'@qW*?3D=>]d0AG!<./](VkFrF?V+'u[->-(T@cT6@#/j5cMi%me&A6`Hh9mIcA>?*q78e#Df2td-*6k0'F<bCA6US(RXPo.:E`c\RJ)knQoD--kC#`@otYR%e$l:,n>2D`QVZpK$"5+&u^V2.mWBV%_KmnoUZXaA]U8Z6kH@DE"DbYFmrftIZ+-[C-d6@cg&/#a_+ZQDVIpW[Eu<QQ<$^a$p$U[T/=!otOsrS)2r1Z6m&p#-S$t$$Xh('l%D7uWDrO3kTN9esbiqm^rUKZ(/j%&n]Gcr].>FW!3:\/.qKKU;]qB`&7hp8j(5Mb6nA(>\Y:U]]coR:Fi3UFAKs3>YkTf/8Q^RO%@%hs7$RGLZTL8H.JJlM0#CcL5qU=OZ:+/3R+VCh)_D*sL*V#/aCQ0=G5GGj0DCLmK$@Ze]Mjo'R!oUn+r@*f"^u(:MXHq-.ec,*+lH%,o0JRL)415r>e&'hVqXi;H-0a]V,,L,e_O=(Gk_n,*NiM=$SP8#hlW"ccX10&qSW8F8*:>Y="A:f>j=a2GtZ__H7?+^,q\+qUW<;%gb6"bAuen=J%$na5h,K=Eq@8D@%'7dhJh<E"5(IrUi2,*Y@TZm`*`W/1K[g!4/k%[lTu/UDsL:6>D;2B)fNt.6PEKB0ca/#Hd&oA%",5@nmn4SR]CPB'@#/A%A/WT!q":>LSoi\IR<%Ngd2`ZC;T7kUo/QJI]e-"AP1d"M_!j1l$SPY/Fhf"5LHFt0*f>tuV*Ym1@e&6$%J.Za@eqMN22i;*`$SU0dO&8X2i7A@gpcFiTiIu3&"Z*Ddpf!_&+53mVFSi0\3C>bA$olX95dBqcI#Y\a=!5`5^Yin]bC'8a.1c8c%ZMO%LnaBrEfrO(qYOjZ"?aoAe^MDhhHLUSds1fq0OL#Gm#9NDf%Pd)f^iQYHO/@a?rs0E(nD7/Wgk/*E)C\O`h[K;;gnMfb0AhS8%i'e/M<qap!L;R@QG#8N/iilg)7?g/^&q2,EfY]?m&,XJn1`:0;GYZ;CQWH.jJ5mTYG*jX!C1=I]UJMH;H,@t6n\hB]5[RZuU\>g\%g_:ao(>[V1CZ,LogE-!OFG=6e@G3mL$gtZci8h1T/U4#8YOk!WE[T,u!\0C2WQ;t>p0LnH%j5>]&=)1AXSNKJ&OZ]4V;q!hr@X?$%"<KAXc`r+b-Kfa!_X_WS7qPek3h<7`^4%<h!qQKHMf^#[$Z>13,%`"ijTMpn?Q&8YoC!EG@Jfu$&S+*X4!a^fd/-/H:)9@P55U2,%"qeg\K+*S8HQ#4upRrK?ZG-Of4*nMgG\1B645Y:#HRD7qq7[sNn.,Tg_TQ.$Nb'UWbI`"qKk>q82E.nKMUW'<"cTLM?m(KtiJgpf%(qiWe?'@J]RLM\C,J0e=jnS+uEF$@Hi'bHdg9QSmK:?ZInr%lMNt8OH"8qXS_rhk$i"%_e3_25l$:FQ*K!/T!UL=?cXT3q^IAgLr%p47ra"l7OCGmDp<bDsi&!Iqt+`fQU1@Qh[A%+%3\/48uXhugi+T4(Q#35oVX\qcF0RN$D%A;+=g"J)QC4sk>AcT,B"k9@ON=VhCj%=-sV7SRhMlSGQW'`kY("Am$EbME0YV4J3(J!Gs"hWt;+f,6DJ$g-@dok[@K?1]VgfdDsPC0okb\`=aJ.Ne"YI2ToBtnb5Vf3iq5&%hrNBJRS_LiE+R(8L7ZhT#kkKZ`Q7MgFos9*NdGU!I7rV.)"F<,jGU\sKTX)0M>^se/"=472Lm>IBu&HB"N*`pp]Iau.3M]]E.SD7%C0;@>UZrNF][Y%QTfU>Kp"SJe%gWp/R<]0pWVC_-M\G2kWX1ZJ_aES"FHJ,mCLNLLQ,l'6SP`iuDkt2s:PA(9m`Gt(\hY?FKGcgP%:L[Z>KgY`!.qiau&>Q-5%U9>X*@8kZ:fTN9-jg!YhXTmFOua34\&X3I4b5$N/"KIY+2V\&h^9Nr?@X70!l=pD#(5998W`/EN`He^%(#=pUp&U,;1/uj.+OM;b:t-=Fp$eBfiRd.-g]R?4XU+hD^mmY"MZ-<Km7UFhN3]>E]Q&K_m80q(^dNP^5QVtJ;b:[JM%\4X$WG*;%h4_h>:=:la(&YMlcT%T>=-b8rVZ%6"al6ed<V2[m..cm!!DZo/b'=>tjhdWZ8I;/2-`A^#W5G@ejtBflao*1b?gk.,5RQHG1(6R$%Kt@V@V.H/Z*Z>Bam"AM/T5JU_s-E:iD6F\Il:Hs(&A9>lY[gBTk,Z#8,A`!5nS0j"JnAm+Htjo9.Pi$J>MlaIpZm/7Y_kB#f*Js@%ntPo<#]U^C@XJYVRkXX/$u`^`qQY<"(5EV$TjDi=d@NhT4SYo"D,ojrU??<W_Pota\a)6X-,,QG[&pr_g!k`Y3:8d&jL:.M?@s/n%q$o5To;`)IBoI/"[okDmQ+.D8WlI-$:e5dC^R\]GFmQ5mhj.r;./d=)`,Ib.Tb8N&=IA&=AFhF<fEQLU!LNPL0TB^?,-,.ZV\.S>%FI!d>nB.0oJ7!R/gV<uo$HErGM4RP]S0Je._"VX"6a"WP(n]$,3CbX)a(-hj3hQ@.GQCB(8LPjr$($MQ>R"%I!1)85J97sl7FLFk%(/3:0MM5lKn7Q!N!LUi1''\J!K^^sYpLkB:'!Y9(7#5E:%YHWQQ%qrF@3Cj7)YgFe?W#FrXG_6-RjW8+@cU5`07TThJM,!k(DE(U%[oB^FiJSk/jtR%LZ+5en?7i%A\s@h8p9DZd1f$/"F9/st38n0hU*gNfg<&OL.R%hd'4B%@PVuC,>FEdreSbj`$J]Qh^IH]fNqe8=%Kq&Y@X6f0j-MX,)q<O.F';i2A2an=tcu1kRbRJgaGn1k/R&lJ"`#'%\0aQ+<+9UTJh5-KU1)MPoPE'>.0CT#=mH,a`.^@so`5X+Z%IHsflqPIB%$6X<Q-A]c/]Y-0Y4G^O8'`1B\:ahun]]$`J^"727mh+bWaLh`^ka9$ooIKFg?@9t8T6/tO_@=Hcq%*S!qKp$nAtg-d%a`cb;M*E!I'?7S$KG+N_4k?9Di1mII,W7_KTU@>/l5FVskTsVqmU=@.Z5oncN"lIfo$d9aPL%Ug*%Yc0f^QHu5kf)"ADIR<-B-fe%rE4:b`I[0SB?a=*l`BX8m..(Ck,3hUfe<C9UQ!G,lA`mmqm2MoMp;kW:UbQmI#*VukV[St]Lb]Q(6P9!o+)E>9NH[%7Ylk^HQR`W%7.>IJ6pMLY/.kiPi49Sa+I2i[82=24q_X^K5=3L5pkYe8JI""D0KW;@WB]0?YTt>%"<mm)A=aIap](sEqouF_$4J$CZJD*;!lsfu%q*TiHS.:`_6q;%Jnu]i&RNS+)!19jV+C(9,JRJbua_+6LH[NJW4s8N["Q@%9(d7tNaa2etY`np6j@'O[^Qb]')$'@=eIt2mS4_53%/_dSD$]jUq&5iLpCD`+&V%7kl+m^G#]EUVlqB./^:N\^\m'@i4kpM7="YiP*U``EB.TmjT?g5B[PRS.s9a=_m[:I0BEZd]XJoK*r%V-6XB%W_sDi.7q'iNu])O(!ns,%D1d;.5>c#P"0Y_I.*eU;s&2O(%<)@^$C.$mOgg9b@(GiehshPO"d'LI#\LJ`AHoM9#PjI4,=5%%llQN@$_;u,lgKFA48[PEKM:EI/pUWeVeL:M?grQ.=AkJP=CKMUpg%5=g#9UF0uM3hSR=A1cjq`M\7WFH!u+G`h+[72^'mS+EHD*%.f3&h(U8AAoA"4q9t&Ns8L;T:nF.K4QI"7H16DdU&O*5a..pA)Gsb96&DAMo[qFCMe'd$,jQ4t1\u*8'@<YV%"NoV@"65ZhJd:2K%FU:(/Of)lg<6RJdHMLa`dK1IcU(!D91!HQNX`cm0rqI1^MfU2QinXa2BLB.f/oj=5q@G84.O[Q8Y(DGbZ@0W/=ZT+>/%L)Lk%r?T%Mt)`DQO=7tfgXB.%%M\)*o=dBWDg7#G?'8R-jn"LD:mp<`#B.uj&MV/n@aC8Fak:R\N_&'8+*_00+TJ16M;O*mN,akG6[JZI-!o^%F$'M:5FCp?a5'`Bq^^IJAji:G_JS'3j!(/XkfjWplG_n^k7Z!7JO=e[Pmk,@7A.R??_ZjO,VWBSj98)uUDJPh25C8o,pBoj9M(q5%:fQ;=A3955iLWBkZ4me4cAK(>COJajj%)S[I+hn]5nnppHWNWWfZ-k!9_RmrRO,]jh]L4W-EHcU+LR6m/sGQfd0i$"M*7a:D*u\3%._FIbinu2Tj![TEJJeLJI;<iR+2`ig"*WK:Jj[\\+TCK>^L+SO1\H;EK8A+ba81<XYWPu/!/`4=KPTlUE@m6E&Pgd[.'HfQ+2Ehk%@uVVY#E-LqqI"<)T0K1i`k@Br0NjYt_R9&fY_j#s5pMnt%t^IDcZ-g#?hn:0JDK=<!G_\0q6FUn7G']5d^V-<fbVO`1%JI<^Wkai%@Ir51pmS3NnS5Oq+S2W8H]SR%n@d$%"m`ntD7fjpp7-is&'3X_SBQ]Hb"h1T8=48Qk@s+6R5dr-hYGt14Y<@JRn9@SA.:Z`T/<i.%!FrIh*Dhmr$L1!AH\c]_TXl?50i:!Wn^8:R9dpj`dp`#/OIsEi9K/D]+eKJ1iM42sOIRcB`Z3`\.idk5HiiVg3f-rke$7`4KtP.N%(+I5\E]CMhhi$q5aab6[i`n]>4rtkOm?K4GZr[%i;KcB('a[\T$C#N)mp`gG)ahr3o>31jj7cN>bp)91(gpdX!\<tk=;U7S5s(^q%2@C0[DJ`fWR89hfSrP,`"g.Z?$h*V\4GiW5Z%obL6B&e<.QY9SD?Z+QGCLlDI'LnTGdW/l'imCCF',T'5$.]_^mD:70#hM1Vs6j<%0ZI`"8R;f)fZQitUnoFXZgOaLNIlgc!oFbHi;(f19GP&m5SYOW0S;*WU^GcQ(U^`q5e?8mR"uZl6l!N7OsJ3.10'F[NDX_=iAKA.%B$-fD>+>n%N8EBte!!P>#TesD#*ak&b)fd;bhak7,*J%(EU^8P^f4`R,Jn$jD&*[(S%tSCl['JpK$R%A44oMM<;N1&JS];_]VA)k%n&(da13+=b]Q"='K*E)eJ)%JW#!nm&Hss5Z%ntWs'A'u!?1^T?'.Vih"L=XNbmn2Uku;N9jMTVpO0Bjoj@8?i\kB=mQ;g*j#H7j,%j^e?Y.31bpGta6WE)u-Zr<XSRi@%BHKk3%S!+H8"fr0La.)\![i*Kj1N>aO.`gSpi-FRAK;2!P?eco#AHf`fp7V+c1j3500ikgKE%9b>BTg''9F,(sT@08!7N&.i9YVd(O8^`J4.#-/RY6n->WJFA&>HVSq7iCjO!IdkX$ldH0UFM@j#b'@o\$.':RFaOaJ&.uT=6nSYL%mpc@r1XIY+p&dQ%Mngm#K\mQkL;_@BGR`3:8mgB*@mi>IXi!MUK@1Qsr!mHPEs(p>'<2`JRlA_lpa$GXZGEYPL@g?i;?>K1EmC#I%`ES<c>MRCe`Sqs7dd4F.gEJ0c_u,O[RUa,q81*+I9+^a(RH)P->[)-&D>r!ALJb`nZ<j7cN9H7#m)`lQV)-#35JTT*OrM9'lb/33%jJCsQdK2*C^I&^IOE_i9mORB]=?]OQ";:m[4tna69ajc\Tq;=hCgio.^oJm#n13Clk@QL:[Gh_dXM]+l%6HJ;5TaI?F;&5X*SN3>%q\rG11e;8i(l%#WC]UH_!\5B;5e=j1nF^BH[5]ku[1"b(bnU<:`pi.'rYC#ecrIsCGf.@MGSt+k,CtQ6O.>C,oO8B1d2Xh\<eUg*%;=rSIS\^9h`Z^NB3O$N>.e#e*\I1A65r3+YW9'p2.2?>#TN3*2q2$9JQ;j[&'Ypt0J<WMgW7k_J^UN&p]Wa#_/m8,X?X9^JV(`Cg%:cF5O/1(MlBqW=/OpXa?0kD0N%gD\/fd\3&)WtjW@ah`u;iDLo)b(q'[iLsW1](n(]TTr:M`=R'39,Ypb>#G.q@Y'BNV5V,oLLe[%&5<Y/$OO7@I:U<>`#KeBf1bULR&ipZL<SB`P>W]\>MFH`[e\7U+1/-TJAn2[^ta$V\rQlY;eV0NCCa+T"0rgaP7e>Sg;;To^>-g4%Bn`EM*;Fe<2[ZuYO;Qd_$KUr^-&#EUcO%6R%+(-l@5@kib-OtpZNcFr>Z@G._;DC]5::tfjBj]P$_TY@,AZ3]>JTs=nlr106!.sk%S->;]N*dG\*$7"L#5D_@J2hcF@L#6M$t*n=.le0@AcR<u%l+8-"j_m7J8_2n#+u]656)"RXH[KM7--*Nj:bOR-ph?l4>mZ`XTk03%<H\c9'Wfl:C<#5qNE<S_+<aOmQsCcBGib-gU%tAjiC&C$.9-U>eU9-.X:Je4%+L6B&oF@SPa=J=%?ZEN'P7i]n4XJu2"DY"$NQ(s%-)0Akg\f_ck]NYV_?<-4IhGS=q$RY)3JaWk<X9FNNWHB`EHhQ-,"1Qp^fU((HJoVD)'\t><<68'+^!OiJB`_+]W)hL.4-bPrWtC=%`FO[K^r`O/]AH@V/E0a;"lNQ5OV3Xgd.;)TL<&B+^pS"[FB7Re25$];cE[W+gT_4-*i6;qkK"EX'cu#_B>Cj(PMZY^/O2<tL162J%h1?op<g4I)_L8V##8CQ2'@SiF9NG/W!,<XKh`@M'5UhrdNt$\I(Bki<5peRd)>NM'r-.mhW^'!TbotUCT)'Qq3q%O?Wql^fo^+ZG%)anrIQ7U]rV&nQWU40&8ZM:6%.R@VT9@Gpq^J+""`YTbMk*TGY\;8!lbJt4Ip]dR2HVuk*J\9gW$*9Zb@<`reZWnJXjR$LR#%_\%%`InCo^]3QpLD(HaF\,%\."TV[X.GQ[+PKEJ2CLReMCBPWXd[M(Y-9u4&P^]+@[YT-G"[$'(`*p,nrZDO[Q]5>C)h#BC[2(doct>>%?QZq;oRT0q&jlGFe]Fm^i-[)T9G>2KrQ-j-LK(/,9R=I`=ud!<@[coC*m;>AYkWd(n`5Q]=(0d=!NQ7"s3Ynpb+&_;(:=m$Z9Z2S%M8P!P66+#/:5"#0;JfWYd/dFDk<qqYZ_XmMpF05Q0KONEa7Q792^t")ot<qnSOo#FBl=V\^>_7rDc1:^;K`PlR<t,qV0BT(@'](d%9lf3I1\M_p21mG]J[\[4UpF]0CHDnO\I-P1k*?4Z4CVMq.>EVlM@K9^'^RUXKd2>=XlMeU?I!&D(Q0cCk<8lIp9`^8^IsC]'=8M-%m/Or?3(Ol0GoQUB>*+FH"9Jq%5OoJ40-MP4r'+.fK.#qdJZVbWqC?O^+EVqN^d,\#I*7JBO?p.(_2s4L#T4Hb(pK8SQ\5bUW#:fl%g,fO3!<_7+?$#0o-"+ODokZ<m&>RRq=@0`(IO>RBo_b-G<;qbY5ST!9LCC>a"[l4'mm!]R:hBUG(?kju"\9pk+;jpi2=2^f=kaDd%o>aMV4IJ`,YUNsTN0AjIj%m?NetemkB[aa1":!",`C:51h)%rf'r]6gTkHa@@U4aP"r%'H^8NQ4f@MZt0UqXY!BOsn2c_'X8^rY6%^k,\eSHG]jJ]W6*SHE3U\L$t%RF)*)>pX@;2aCK`h>r"nODc<af+FXP$J<QTc01iHRjR8'$J@8!SO=Wn$(]M2oEm$.9Fe^)#a*N2%VhPa/8/FQ=$5Z.QL6BJHj<qUV6b93Z>_9X%ha",!^WQT\:s";H4rcm.$%uq`(Ra%Ycds:p'!F:@K$ak(D_E%'`2FJ%Z74)SgF<\b%3#<";JO@b8bm&5rF\<n*n3QreKBr]E<Z8=V0!Pq_2ZH"LV#\hr\o(9+P'nIb_sTQi$42!3K-:'&>70Sccgrn"^aaM9aM:>Y!ILiW%/@RkpZQM`0SloHa=<o+1!LEI['s.:M^H<MC-ic1eG_<I>U>-(I+1.8_!MW!Sasa:r`<m`K1!p&8#T+fZN(UHBntO;?/]*K9L"DR,%L<KsZ<sfosehqiiY(/0[Q.$3:FTR>u@7.:/F,`d>jfkHClBP+:@7*$O<souhd385EA$*Jo",B^50hL;bh\*8?$VFhpH(NGKUBO=P%)+N6*!mD+aa*rlR(9l+iS/1=+'XWC0g)W9l2j]-MZ4i-0V0Y;LB`X\FN/E^2!VqYtCLurm$a`0mIf,X:$_UdslYdldjHuq+K\H`\%+&W<@LC4Oo$eYqg+N-\0b]'8,?m1u*bJJr;Jq_'u3i_/U1jqr11-,OBGtEr&GkuS-3[iUWI=re/Q>=DI[:9AT;L)`qd%_U3&B-8$%UBM^s^Jmhp5f`).b]('Z3sR`+j[*`1dGi<cSOBj`(BA"Eb4oi2TD,Q`.4<7J?ul]EPS^\l$t^=Y%J'P/Hh/jMMW8";'D-Jc0\DPM%7_)S8Ai2o*%0hHifaNZ@@n[8H"R"Y!5PMM!)3Ge07Wo<;O`\lsYC.rt4oJnB<EZk%AUOLQ9?14eqS#)F9uNe_nMg?B_%6SAm:.+?%W,XT*)__3_7"t_i')7[ei*#0E^"!$)*kHg.@0!FI5^q-3J)H-N=>0M9Tk@t__B11&o\ec_5<KZg3(60*g-<5M28AfF*:i@WrBjg+%JC(%"T?G:;!U[KEH&5W&k47$&&6\MRW=]-V",::^BC<GK?iB5Qp\ummpIi0-]_M-$07UWgBh'4?"*!VFK<]LqJ,I6;LE+oN]ANJ-%8,>XF'&snuOg">4k.?t.9RZC&aaJuJ^TP98LZk'eQpScOcQAmrn[G9UTU0Gls7YKWqt=Pb7)sHhj-0"#oRGc#S\j.Lf02V&psW='%i,&-a#?0Pb#s6b"p*"b!=5h5g'X'l%)/#[*L,IV5rL!#gdGHV,=m(Pnp\SYh)"!6an[G^:n/=D*LPr<Ia]4mKb6(EYYLdtJj@+Yt%rU:EdCN[Eo#Mh&Hp\3S@2da,g<gEX?/cXu/p-,)%aZEP\s87fPk52W*lI^87rf(Kg_B-?!&a]b]d,(^1^V+^LUlE.SPsG#U6H5-c%XVeH;H0Q39SB+)#VsAK6naF)<"g];V6,oNZA>9=%n<4i%'je'Sn#<eOT<<V1e7.]&+HSr&l<j;Cp0W7FXZL\98bM#,s,Q9(I"1V8%E9HP5-X_55hQ-n3g&?S/.h']frIa"Bp$r<^p,@`+gH4Wh0#FO+cbETZk't*I99d&rmXL74I;dtJkISPE4#KN_.Gh\ogh[F):N8d<%p>+n-mr4ra4Pq7;b2nA,.j%7i1$9@2f=lPl?@1Y%-P\Ysnes]HaPh:`lES%<s!o:KD`i($0LUJ.rL:`\?gr]r2_M]Yf\cYJ1=__?%iARQ'^&?d3]5Ks7$J2VOai7S(>h^)BhpBX)`I!.Xhu)Gjh]n%W[-[0]+Y-K')aC5TIr.__H381lNPg1YJ^D9t-De.)):D(*`XJ<#%4+fp>o?6MCbD%\,qV>BG[s.9=^A`*GH+=H6eTs9f5]6)[rp/VL?h*'+h6SKG"i'lkaj'Q%rrHd4=3gQDGef`8msk&gX,eJiqsVM%%ddNcU_?ZV(1PhXl!G=BLUpHa9gAtr2C/&"5UBb)thSD.-:\9/n/6bU\:\K=Fi@KT0)hD'TgItXXGE6itd:J[CToM:`l1(9Jn=`W3%]'Q_P4,63Ur:@ea'pefZHo5joUVUI?C7rVK_"[_-5JcQhk83*gjcrUq]&<L\i@)$>3J6Ns:,'9Gq*d9SG[-#l4n;YVQTE@Wj=k!9%lp^gOO)#TZf(turEmgWBM(L+FlKHXWUp$p>-&cCgQ"0#t%g."$5.P_DAJic<+s(GYkn<0L6=2_]"J3[g!-UhdJ\Vp:#4.BMFD;ZN%J,A-,d_cRtE"2Nm4r/J*@=Wb$p_XJr4?3hS=ruoN_iqugnLT9;s.@2bXtgEa^$r.DFR_=#1-@Q*^tJ&63lpgO0VGW@5G!K9:C[JG%L#h89+4!6--d/qHK#_tpiQ5NDYC&3HC)HHjq[YOmk],XL$Nn'40EAIbZl\^]L&no!+"@]gMSfGNiP##2@m8l@.`6ddrGnlrT8u)C%khkhniT#ppg$'m9"!5cBT_8214TLLdGp:-+N#]Q>4lGi=",9b!+$M7NP*lhgSGWq,J6*]pm%/WGk8DGsTXL.^lo\bq#2m_bnmR(!%Qabk$pgF/5QE11>3>hOr%KjqSJ<0@cj/I`X,3Kie0S$pDGlm.HgNAl2F.TWF""nlekcYBsrq4m$LB5H1j*TS!JGG\Q-SZ%Fo3ed"%28EdY!W%g^qJ1VJ55sp-JkOh,4FGB*B0SSB@DME(`5b"L\G4k,a#+:(cfNZbJ;H40P[V@]3E%!R0EB/8O6c,)PH+^#Sd,,FL&pFI%j!U)B!7ia*r\_K&LB/AZG,;PMQi.\-g_6T<7d$rU*c2a5fe\C*D&CVE]:NtF"5N"KG[')\X9QJn[L]VpE5c5clrQBh[_NVZ"/JY?%jGs?q(^Bp'WTK7Q(pJA\0n'g]EYs=h?!!$rkehpS%5/b,:_`QlF@RE;VI;_s*PGp(^h&9%E(9TPUB<,1$ihlGN"1)ceH!"lItd*:%b74VtcTXsC^h$RL*p,<;Wt,=!T(p2l#@)Ehd-$[TkG,hV_Z7g&Eg>hg1CSN8o>[K-]_3bkJ:;g^'r(j`3t)*@=-!j$lnG)$G!/68%^m.q&k5G6+0arRI`N)K6>W+L5hQd$W+$TG_Ob+B]42YtM<,03=Ntse-*q]F0-hib-I._l-@PDD?]NT[OqIe^C^$;$'2rG.XIbFGQ%0qLCQ6$ptmIsDIM69)&-eK3p/bQ[<bn,;iiI03i'),C-ea4^XicaT*&3Ac81J*c%Lps7PFfD[o3nHoj1?iB0:QfG,"`7I`:[V,+5%!s^9,kY\er/s.FTjI*oH222r\HquMBLpT:ti1X(^%_qbg:KQC1KMUNebRulFp5(+fL0j5'"qTZDU$l#Hi?ZN8^>jPA0uX$;j<pHC%H&a(.h%X*W8[=<uH88'Ts*keQE++pj91BN+pW_6@$#A5oLSG-H:m,?(7IUGD,Tkc4I/HR!+*o<>J&4\<hURAikOgun,B$ooWP?KI%R(Ie@M_Aa!nD95<B?@G?n#WX\rm(!+pJ7EjEVhQHrL``pT_H11`h3:ek[)*IIFT.$#J`iEGkq7p(lc7TX2"NcB^6lAq;Lp0e(KXt%3BlH0^:<odhR]C6/_B(hm=@G8ocO1i1U"KJ5<p69l*Xad;m#+&^.`+p\h-.bB7BmJX7X<A?;=ViPDV;*]V/)+<LVfiXhO\t-e;RQ%HKuO\MRZN=XIm=qbJ/U1^jlA^IsBl2AcM&i]iRVq(HB41fNgU5nHLjnYgNnLjfd&+XS&]C[gio)HhTFI6k$%TT;e/!U=^FPiS8nN%ds1b\&&*h]s0)3Wi,>jiUhSE7Ea-8B"r2=q5.Ph!p:V8kb9(O!gO0""5Ko@AL>uI<Kg34>n*D;qSN2(3M)8$L)Z<`dpW[(6]_1rU%:RU5c_.WOlT0'8rrU@dEHM..0?=MOTl0@rl]=5$Cm9_l&p#5:EmD&M=p!^%WqUG8bkc<%I9A<\08#Tp)h2D&PrTid&,5S)5rdC#U%$bON,q9eS9qYO&/rUm_N[]a4n<.F[(aq&VWpA%YW$QM`k0AlT/*-(u`W?T%UCr^JnnU=P9bHs5-hU?tmZ`'H?8q!gWrB,ja()l&U%*`,U?rX@Mg6N_(E"VpENrTD0"i0VfhW_313osa\kC]C6?pQ\rZ;m4*NrQ0+6h>H#'m4NkZhXX"ZNX[Z=Vqh^Z#JYQakNB$rf)'mp%#:J$/'tb!.P3ZjZEc_-R\Md8-KBp/LoNV@3QbN99%48O@s5EJ>%sRusc^/RKSbnUtm\T#`Dnbr,pTK#d?iJf0r]or=o@K[+H3^J*%;X_orgV%so_eUs/q=\)t0_t6c3$dW+7nS7pQZ\Mlo?qMZf6j19f"<X.s),UObMeq_hYl]NDnl2.m,ma1]A'O'jo's!I/W*]T>(-`%YM]9HTC;]fs5j5=5Q#p&r7UI=5BuRt\(5riS,JCTIrfe>*B:Y"g[\UQkC!mQ:T_[EP?./MF*lsE2h1GuMtcZ;ds_/BPgVJ(q;P>^%DZ?jL.Nt#;$Vt(.o-`9k2uiPVrTVLTSj2o'0@,.;eBN2$](=E'pJ,DXZT_o"Y=u@SRSV*):L:R(jkV#F^IS%+).#Yf=<3X>HLj@N%ro5MYg)do6^A5Y'cgUl.8c%3-5CN6^]CX/#O8jP#`E-F%j85a/?ZLJ`alOmlkf,jTrW:-as6JPa4a$@7T>+]ls8,;^?+Y7JC%1SP%nB^Qq](KfcYBp0%cQT.R92FC?i@gfh2W"suUs^ge1U#c5,(,`QKua$k4%ZN)pR\qq=aMNGpYs5=4:(ZsNF+nsi.c;mq%\SsEZkI#%SJg3ro7>I?qPW;j!^)pb!O&&d")uNheLRY8mn;o6l8ZPmG3sSOiV=FmJ)o&[l4:)^mctt+rH[Yq\bb8,^O6"frU@8\T$>H2rL2=8%`[fC*8"t69\`eM&Y&lt%f,OKnD/%jORp*llhK@3-4P+qd2a.Z&\`rha^"8jnri`f_n%Ek%[m[t*j[O`"hL#.4FcpT0r8.;\RKR!t%q&1kMC1?N+nj=AMK^6sS?gmC]a)BdM'+WROJ,Ja1YjM//kL]b0g:tedGPc*oEcNlsg@=65q.D\)q#/sfjR&PP]#5-8OYtWA?i/IG%VuOF+f2mIs],[PACGOJu3qE3/)TTT^Y$PK#kPNfa2c[oO`XuRkh^3-H(V4\$rH7Sn^U8NthXV3@5WG9?i3@mA._Y<erm`+X=5W/k%8[b>DpE-!EPfhUU[f-bdW3TdDf)ARbX7,K\eT&IAY,<tR5CK#7)":*\ZJnN4J+0-Bl6),q=1P#mW@\N81q&gONTW04:&bLdk'PJ+%]_U(%lS&;282KjrD.Zt2YO-,kCr"lXIGLPT^<R-+l/$nu!<"YEWTb<p@ErkIbd3/[\GZ9QIpj2n>T\^<Y[7jW5Q7p)^kL[Zo$fo#%dt\\CT%86In_r:&m\?EEAbbZ[mqt>h*%kd[R6FQ7K-0$eFm@r_5F>NMNudMQ?+2Nd?*+3P1AO_Z40>hknE!HTV.Uj(lYekO^\SVf%\c:a`b/>D$>HhaX?1ABt&4S1B^"VA"3_XHo)]ulBS<$,=[2Lb>&:PnWlH<u;gRN@Vo^E2-C%=n]h*(d_<uq6k=?GG(^&KnNOK@Mm%^+]aoLBlG=Ln!;8DF?V]g+tCsNg@(OA$9_k8*Q<OHhuun?@Ke?rTk&=Ier<J+)gA^U6bT9l+;/3'bTl'Vt4aMihMRkH^.$IGAT<I%jc'A&Z.eerrNkD=MSK,gVnV$J4#^Te#ccB9QmAf.[9rjdGshW%i/<Ei,#nY'W^GV<3f$6)?3oHfV7m]erUSE5l2!X&c$?o!nGE0r%n%cb':W!\bj1UqZ'O^jRDS5Q7)u")1Gl%**IeiP'=;cVO#Q3QW[?j+3_.%_crnu+X<A[gJCsV40Va0KFm0TQnTDj"hj6<I,m76Zp%Dn8)e&-&^P%]5G,GO,jls+KD;]TrLVJ,8%Ef),*ph5^,F(/D?lRY0DiQEp:rIM;-3pjd;"BDNtQo'*c6'0[<aco]RQ>O^lQnLM0S%c[32+]4\=^p;tpYdnT&lHZTqZeNImckSDru7brZ_?i0;2*Z_&sJQkrdE`_"56@U8qIM4Eu>uMZ.GJEUU+T15[eH>^tU"9F]$+Ha?%J+V6O[pO&4iMSnfr2JJ)CL96rrb!VD_=_U//jB0L;d\OmgJjFj'QMrb\:ajg]lX.l_i#?84Ep.?^uoak2ra\Y/(u,<DdL3OW,A,t%I''[8^Pj,@+2nG#q6.D#X]5:/!UU0^$Urj`IYkQ2U3HLsNSUq%.cSi[R%$$1Lq%8\\Cml]^LJW[$oV3"kEgF`nWgjo]7t/XLq*3M%];(0PW`1*+W`6ZA<tjOGE@^.q^j"[n#UH/B7UE8':VZFtf*:+!)o?saL\Uc@3q)M80_1gI<#rTlX4rtTF`u);.,rf&f(7YZWfCBP%NPBo+$Gpq%'&an^%Fsb1T"UR3iLt)'3bGLM^]([TR9k9=:@$;^T3fZ[&.iZY,<bU/mmO\]n2?XT3BV&Q$KoHE`7-#=oJFEr"uk1R%R:]*<jPVXp09$EhA%S?RrJ*;UdegM'n$CV]C7;$NIGXqbLV?acdJ(,e(N4bN;Zaho(g1*+36+UEMAP[W!Z3<IJ&&C"Hf,_f_8CMp%5-`'dX8L,BG1lJYrT8=oR293)ZHm_ZJ)sm@$J&hGF?b/p5MR+,qK0qdS[5=O+8W2:LNEF3[kI_Z/NCoa\"7m2?Q=N=]cX'2hg#%_%H]4E<pHAOq9E4LRkM[T`RF`5Slu9]-h^i]`6i;#KTB3iar7QF]8Go=^Qff:OX8dFCaa^k?,N`XmGuk_BDj5Zq%HRH+iIKeRhg?4n%]@d'0T6aZi]DERd2UT)^KMD#s)9r<nLC]u)rT8;%F,K7PkL(!Z2s_)HD"$cMo:!]Cd2b<RFSBTsl,3/V=-nDaIE_m#<3JNO-)`Jn%HA1\"I/Q2grc_@B_OWVmKQmIbX`hT2R(aq@$$Z+3p''M=LCZcPl^(C3DZP$b?bc>(s!rJd5t#T7^A-b(OSHpXju!NR*8Yk@lkdFL%hdf+@lbDNFIhIu/?iL&jJ!6Ru,[U0@MLG:'2aT.%?6uXP]-k*p-*(&@Om!H^YEIEclsH@2HI[)L>1M?39<M>ZpcgG!I_U4F2Nb^u%rJ.TL#1DqmB.NPh2a@?5+!BVtrp\1Ahu3'<^&RojVk$%fs)n"LnF*ZRq66HESEiTJo^/i*f8t@AYFiL6-R)pQIeBV2msMVEq7@_u%\G+JPS37D08+4+hiELNOSj.#G0.Q_jB@j.@mYf5j5@'%MX"UK,?gQS$X7^rarNH(Dqt5GWls)KBK)\b&r`K3qGD6%JR<N<4S:15E%GP3m.G^l(8q3H%`91q5T0l:RtGCK,f47#/0BY@NV[A*?W&qCiu"=sla9L-daJ/KgcD>Du9-2aA4=Y*QT7U:Qt84eah=0)a6f%cNi%9H_cgKIp\BkB#mF_LOL\kC0Q-53-[sFHlqpH?2=sM:V%&//YABHip]g9c=)iNF1bdAk+eGTU`L_D8lCpp\G`H71Z`3_sY>q(!"Ht%F$:QqMW\[o//m.iT9g!QJ%g$J),e-DG=j)U+O-t5hoHI%o/8?nGhWi-8t,Yh8Fs:3%tPF58Wt4tC#1cD+ct]cC#TGpH0aOH5`3%i%aU`qZDk6e;8Fa?N'2`0?F.HQ5QtH1K3MWg0\P2E>9J]&'R=YmlAbJYKc&?*)8?dYJArd)DbiG[ZX0@.XArd)DbY"6b&o:sAfd"<i%ZSnHs'orJ:R!JBr0[3kXm#bZX1X@*KVO=KS4VDR=k1QO&=PNC#bdeThf\!31Y*!Z$JT^WblPmsE1q1mR)L6,IUNro=AmU=X?@kZ'%_Q?#n3n/M3A-NIk(h/T9PfXGf#$u_pedm@%?Cpd%2"J)s%tY!MC0PHG&i@[^[aam!foPKOQ,h7m>G`l;d(o80qSA9eUQ.Ja]`\f8%K!Tn[2"K'?O._WE9n!X1n7%pc+DC6h/sBUn#'hXkILn@,as<%@JQH4QknWn^r2=*AlN]_.+8#Q)BG)rR*aDTLD2m?(]/t6)l@37`%rL\"4gt!2e!edsA_+46Cl0Os%:T;6](b[MLV5s&E=)Yoi6XDj[>&LAU`;,)HHt<%6;X'^3lt\,^S@`n_=P6;UK_4YU$7k:TfRQDR%C8YS6&Q6fW<Ql(o8CHSVIWlScAs^?^ofRu9o\Q6NE*'l33bU%ok-XtSnn[G'6MB%d<O%umbE%5X=Ljf,[JMU-GY!F$VeFQl!p[iT%@HC(DoaZDQ)FMWKj;.$.m(UK*o=Vs3WIJa#\$F*G<G^i?"KYD^`GG]-:6M@!#NZdqooEjf#RZd,+N;t]Ao1S1ore*1cWu&_;4kRD%IE]N0SI?36C0?$m<ZeR&+q$joNC-5oU5Fb<o86P[73bBc<Q[$sc6GGZO]:YKd74I%9i_QN>"Op-k]Qj7:07Um+f0dc2o]U/F:PC-%L8DZ6aRXI5co?]/olY'j[XmNe8^?OPEf?8e+.uZ?UoN)2,@nP&X+XJ"8_1Z=[6'EZXfq3mg?Q.TlZl7uL;Cs0q"ASLale@+*N;NX%p:R2<?mR<O)/W3/0jKMo;f^ln/P7b+M-+51(GtrB*nR):O/GUe[1.\%*HM]Ied7Q3"apE7cTDPM5d_`bQY4:;h)T2S@K\,bMBNfP%5YiVFU=C!XPh8?nBZ4)gd+JQh$GC7kIFIX8XB*W6d*13i,^bkEA,2@Fdh/f(RZVGpq+6`.qY!")e^lCGa!@Y88Y_?.rD'F,ehTh&%r\^mqSGoetf=`N4[MipI>G6iH\IH?*jl8t'NpLcV>.]Q@Q)u<$80=(+XI>Nl<gH_`1&;.VYK88+M)Q\ondiF:)SO=>kahtD]daF3%$f"_LG[VYS'\,?:=HV;oWt%lp5lsUO//WN0/;QAo<i<NA2G.(sP%;6nT>OhS!BuF<NWY`rK#)+$9We%@^b*OA!d^%lKb,rPp5*Z+%=MY=O7b`BiY]B0J:mP&;9V[T/rD%/AenP@khjVUE4KeIJ4)V8+$a#s/[BiRUSJk#5&Oi-b^U2O!`@=?=!)AC`#.4uq=dDu:W6n'?%GYC"MMp3S7PAfZ)e`TkK[u,nbK&o1PnF\t++7X6VNo*@d/3H&a0ZMrRQCB-[UCYL%(A].?,l($(%"H2FAsGrNoae`Z0M^gP:7X_[%77>!n=Iu]L$nNpkJlOlhQ?S$B*N<(!(_pih.o)8%dC8!^X?Nqqek4)JC*bb6#he[b.Ud1X,jSh/\or!<2bU,n$^OtmFS3o_hc;F7%9lc7BR4?LjeXO)ud^G*Dj>q5tL-/L-QGFda<i!_uClYaZ-td]2S?:LCT]&4QY6A[ClrND1cE"C!9:[2bobM<&\S7'_6G1]Eb:qG8%<u++S0Ir;uRZ1b$@\m1fcqRh:W\&^OnWk<*h$LIk>rNVVG^NOW=Vk58K'WAQ/U`RGN+>AQ;9OD9Lo[Y%m5A)Olp#/8rONaf4$'Z-%,Js9Yr`))hoYIr)UZP.@f\2R)ALpYH[QZ4@c`/dGl;DcS58:$P`)2BlJI2_E>&1uQf$.kPTP>ZdR$4TclOu6]Fk-9k(^LiW*i'pd%#=r_mX)E3!kFp[c'Nh>PKQ^W1Y0Y:.M@lqG0P[RU(kF_NgCB>XNL!+(fT+6ZXbbMB\I3^Mkg.3-5-#e[GH/%Zq^(.N0S+fr(D>Hp%IKsAiZ7/6t+p>tdKTTArWjPN2"J[:8,%=&0`6^-Rq?$Z4<WnAHF)?n_O!7D<h*=PSmSIh,G.luiJJd1T(MIG>`PD^8/Ob1\K`ptK%!tZp,C3$D4XW^HJ;QN[PB^Voh\IM"'l5W06'S8tmFo$nE694\gcWl8<BZVd&[^IHOBVe+lW>8sAp2j^pB.V"<UPXM)Lob%1Au/V%%d*]Q]"A@KtSg.'FPEY@f.T#i<EF>3A0bR2%db<99(ol&b;2P@F$P??bEh&H"PhQ(sRL#jPOu:I?7`sd*31B\Y:rYe3>L$fYG$V7/%*3e1XQ*1\5O]1G-S^E"'F(f>[_XUZa2k'G%L2^*"P8TPC=/1V&rJn!gc=3VPT>8hn^[1mOSJI<-^=EM+DeHIPNm#!K>a#Z*#Hf9Y%=8tsu.fJWB@T-H0$7toeg?mR(]5GOs$<r8SM:7hECNVm9"Y@6nFnq<s%:F0q`"!],g6rC'.6HcZbmSCBY.S6K$[a1Bd$PJ_]*M>H%XU`icBR=f+A@o;fm%?)iJFZ@C#ZG<:Ni&3G).6!&R[q8))KULqM_J/^l9NU>OZPjtF#)B6@np6L!N+"C*DJ=#^#V3F>+0b<K#oh1%V6Qe_Pauohk5'6sG<>WrNX7'3V<&mpQ*iYLF/2&8ofgE4Y_0gB]:8^%QnE/s1sH`iZ1<>oY3l_N6"@RlLFY6[0e#3K5g:IqfUmO$%_-dM%.K@82!N+%D*N7ZGp8Y5N9^RpL:0Vc?VTR2$,&!!W-Wm]2fKj"R>B9hBb$#gafr=\&hC9<NG0lTmCqBsOAZ^uifhHnF[S0s7%6gBN>GQF\5ntZ<YDA8kSnj`T?%<N.p=d:9\+]ZmH#G%o4VXCM,.CV-[^=j_ns-t2\34FK>VeVm9T?CuBK7^VeY3?"D$Vo\Ik@-Mi%S3bj)^<Ee'Z<dN&_0J`D!+HUYLK)FGIgF!;n.I@(UnAH`3lCU<jLO.1q=WZRY[\4\SA^'*b`*)k&NLcnTHJ+\nob$Z"g*%!WB+Z!%hH12.:llnM`sX"B3/P]>>h^jr5U<MiBmqd7\H%eEF0GV:#PpJ$GJBh<[aR\hgPeGfaPnpbS&;as@9iMF6lrdd8$j6d9ju,[LC'+c%XW$t`K8BaeCFpe.$.I*pB@4mX1'JVb0\*X+_?OVC[S9H87V8&N&o:sm%*?Y&Ch2\],K9q"F>K,cOdTjC(`SjM>#$+n2DXmj&Rto!%]:$dna@rp1N/c%up5#u)=jlXK@j?&am::$@_D[0\1,^o>fd"K@jr.ln(`Sn/lk*_0F,RsNR>d-LFnUVGc&=8K*XO_[@=o-F!mN!,%@/<,^p.2EM\b,Saa^f3qf!29^g)1it"fsXV_?OWE1R#)+=_<^3]-=T,I4!hh1[XR@]7:Dqb?W9_45DY>WhjEI_[/-C[4*&^Wu)sQ%(cGL`KGinrr;nc:esPN\I'b_[a>D%m!&SI=@3ZH*"I;WH@A[0h@>;>;*YC;V<+"QT4(4o.q>sG6&N2<d:ta!%bV74FSHp1&hG51I%2L#A`b*."c7[_(e*\h8oBpM>X@BQq,KT41mB9*<;4c7FaSZkt'$F<6U).o:J&iMLR&SQLPh(at2Sin96oSArp;pED$Zltd$H*u#]%#dIM?/;-BKYf2.[,\(sX<*u^_BK8`,(oW"](q36`A7$;8ofW(-Y_j/@a<K^_bNEXl^`l?mls]MuZJVoa9G4s/d,Z2u\q@jG]!es4%([a^Qeq9\A7!,PB_%cr\7?#0/=V*:$p6&&URcPkfcKKn$N56m+$a<`2R.LP2a&Xpq9TlK,c"hPRXp#fa-)/iso`2T0$[hX@iF31V%,((Na-k3+%5^ZL(MNT;8BiG7i(kQq-!/\W^X!r'4[\e,a@$5!46<><W/%93c*'Fd/)?LNE%dG2g-b9qqHUCQ0'9&%7\n^t^LqL],%EVqjil.;^9b&jFCJIO(ObCG[[XbX(R40_46Bp<*)5p'O1a^J8bSZc8hP-JaVm]JthTc+)M$^.717-Oso?12Zk=gPsj-l@+(S\hDY%&Y92"JklbDI=skrDNp768W`VJq<TPHV3]>-K`tXabXV47U/KPXT2S>/X[Hm=*_4f<a/CsOBiIF_\o<K9^qquH-k`9)&uggldQ(bf%M6S+qRh0]G)h8d#<kDG'$SVe$dEno#2;/e)7Ma3!3i=31[lZ5t7_usM)+b1W<)-k%bm(;-8.(Qp+Ss_?B&uUIoae\>N@g@uJf2"Q%P:D;PlFKqn(Pl%)7=c-qTVG@&!2c[c\0XS#PE\&,g@#^YDAF@;0bB@"B^,R3,&<RP9i<mM$='_%R<SUfT84"[@C8_/pfMnS>(O@\%@+C`9S;urU1@'!d260hNJiG2L(pkd9!\BL64%l?0&Fc*h@MW1nOs^4Ul`)\+5#E`BGqI[+T;Vnf8hlPOAWK>J^q@BY3Wd=Q8VrKs%Z^_ckN&E*(=IiLRqK,,#S?t^6`\oQP=@(NIk-9Q3QW@=;)m-=chApQjTte[i$LhY^rZ_*f0>P3*oG>'EdNg7ZIJ]SP;JTL%UbM$@%;N@k'Q<6nF-NDG.D!cO#FZq@dN5Jb4Z%HHknjO>"!^o%+:.P#fUuY`%9IpGs:>LdS8WY@^)"Y.*K)-UQgn`893O+HECcP(Ur'RZg%`o=E9mHUGVKp=Q*#R*HJC<m;kYe8OI$h`ogk4(GA/3c_s7N[k)/@:OlP2n!=?HTNQbZZ>bf"^@TLY.tp;dF:e>-L%NEDR?6gtH^C%!_KdulkDdd&K.HYEF<?&8:X]t0ieO0)jDO,[8Io[KRh6V'=5XD/njeb4bclq!o=0LOu/4;K71$*:FG1(>Mrn&/3*I$F#pVIL##ph%1onq#N$Lk`?S*WB9U+K"Yb\*tI>!,7Z:\5EP%=MYY>]:[B[Dj-eohGPiqW\(SWiP']1.B0mRA?&N/,t/%]j%A"euNa0pZUE%C_5U%e-]os&H]qm-=O#WOS,`$*,)T+E$$Z6locj?S5XCQ\TNXhf$t)+2T4;d/MV$AZ%<)b;Qe(Z>3f9n&qhirq?R+o]2;67]1LB1*Vpc7%Zd;nK'-*+_laC3+f>raiDf$=sgM0Ro`(=4c+tU/lc)S*1,=rHmjTKY<7^=:!pgqrF#j<M6KU!oVej&df^pdiNj)M2tD^$pE[Ktk(%nDgVS,FOZoLBPQ[a<!:4>`8b8:6M@!#NZf'<M[pnc]k4bl&/H"X^]j>8[A=QY@6l:mfbBB.'0W(KE.W_'o^4&;@'F&(o^!SakF&N%#:(k8=@%Ni;NA#r?Ghp[E-osP#WUY!;P[t0:#;SiYk\=)Vp[pG6G9D>DmpKEAYSjN&0pN&)U,AQ:6#Fs)_$6_ZemK(]rB*B7Z[2a%@LI5m,@rTU^dhM=KEkKF*;.C)q::\>=sZL`XS"KZcEFh-)3MPPl;!#b>p1LE-5g)cMQlq.Yo=uDeQAT)&1H'<@M5/(@OAk:>B#!Z%=rjC$p?i7lh^WKNIQ7+%X.V!h_6/![F9E(GfPj!2+cckpBK6FA;N.kAF4fcB:BZAC>G,G7&sJK@1])p!9Pq;V"Eu"ZHtsT+m5r/o%^X-0S\KSr0O`+C*_<BO;V%b;96GfC,^E]Q2STOr\8O@i7K,2&Tn&,jtXJ:m-BR.OPka5W4ZWn="F'K,scku5V5W$IaR$=.`5^Wg>%eLpgt1Q(X7nHB7]-u@Q>.i2U)XOVlj"76`)]\<PsL*LlgR+'VkJ>ohT8(10/WCjL(%<g*ce(.cS.EtluCA+'eJ_Y)a%!GI7]!Hk!%!7PM]%b0iGH3R9b*(?Br=sB?`-;V827kn#pl=cW3Vj$k2EKtFW%N=@j8R-6sNNIe8*M=9O^=ltWGC=JECqpN!F+S6F@B-EZJXYOK%Wl8XXMnolA;d.%,Qmulo1sH_/U,>#b*Aloc2&BZ#XOVljQ\D$I_O?g%Y_0s.[cRWbQ*iZAAg_e3UR7Xl?jD\]]*jN@(LU-adXdhp%n*GtY`>e0:1%DFu(La>FeUa/F`<%K\F#MZ:A)^kc(La>Fe^64/q5m7ZhMcR;%EeJj9Zg*k:ikX)M.6j"69&EZKe8d%lNNY.CNZ:^%R2pA7WFi]rg*qtb8i:0CL8hIZ8(4Qn.sfLg)=4"NH)@iOKW27X#AO`;H3\cA+WB^?0r`3%]*M>HXcB:3[T@=_1UTT%3Gm"ER$=.`%TOtC].hrd[@L%n71\Jp[QmuloTOt[U1SD>HZG@"hj&dS2joS5A[5sag06`!m2-,>M1aZCrNKtJ:V:k-IZ,N`VRcC+Lh45_gMQugu%9U3"Hk"'5IdQ4u]hMdd<V?07To-)^A!_!To"<@&m+q:)pV%kMh'=3Z@L^/U`(Bj"T6j<aa!Q"C16NCSsUn&@gBF^Q3]aZ_"+N?_J%R4:b*^s;2;7K?mK``)t"".&Ta)$1@ZZ&HXU@$,7^<=kl=A#]NgO_Tjr(^_BT)4aViB@M-E0NA.laMq25F@pDKL.A!=@UruK!1a/,%-A)^-Llj86)b-A^qOt&AKIFs0.KD1]bLd4J-f^-c`7U$J!d$mP0c<mn+j+C<N<#LMS*knI!Jn!!;[)BD2&aIQ/VDqm13GJCpLPaq%!],-I!4Oo%g<+ijRO$E?*,UbHI\s*d8p&Lr@]f$&I`5J^SZk^+..u$d^7:6N&>8`Zo+,M(:IcN_+NemBdZBRprRf2+Lg_1Do_W7e%7:<J=(;<::6UjXaV.j>>PL[1I3j:YS=Na6<bjXDL<]=Ej)C'D7.F4G*>'FL7`3>DieI]XP7`o=lYCkG(#QgdO&=%$%bH*,rCNTuj%eI[^U=CmePLKpd%bhM$]Yo82@lLn[.IoV!s4hZf=X2Wq).Llt4(8^KHgfG>aYuh'.kB.*uXOk1I'8Y,"r=8P2W^0(YlFULN0gb`p%-kOD`TJf.3.8)/0l6BiS'<?eO-V;lR4PKt(Q=:C&8D]'W&pLFC/\$_JSCc^hgVcJq:*a=60c1M,5+T<^TCLE6@?M=`4t+Gg]ICA"%aHGPY01n75MHT6janjW%%d3M6psElsf[`*fa^4e!Il*11%>Ut&FjmF$,mbc%$V%R^Uc@U;?F*X/m]qs3q:Eo3JZ^/5==:PRH-I2E%aG%',^Nn]\CledG3i+'/Hu29\[:kl4Jt13m`>Dfu)bT2,VmrK[6D,1K,ckGY=l5[g&3#hW876:&R`C(]h7.H-@"@9@F:FBuBW#sJ%g/(f$)+N&UA-F9SD80$%dPk*-:jlE)3^TJZ)9"/sKd9CLU!Em#O\2ed&P%D2^u:F&p;"MaRnHlF(5O#R`5$.J5mK<%H6<nUnmZ/9%P,Jd6Ym8U5'Q<X=?:HL1N+cc>J'c50Z_O?%ZJX89_9KWW@Je_:Vcm&GV?&Ir?o6q0>)R!</'&ZH:lM[+!p<"4T<rkm`\oPeZ%B&q%c!tt3qAouF;X9kV$g5pR1T;%K.X=$i-PaOY:CD/';N7V\]?a^.X>EL@7c/YB(qa?_Wa;nTLdrEW&[L;N<Qnpq=jl@QH4;580E&7b%nld`U'lnp$V#Bi%&[1/g(#N6I`epg^,`$]i(u*2r`,!f!]dBe5Q)pe'5P2O%FB`MMm5,FfD!BsbfTYZm9^D98jL.uf*Z2[O??+5Y%'dc5_W.T,LV*98<8R^$p"!9FY8a@YCHImQ<kA*i[**2?o"=pTIJ^%$[RdI4!J7EmEA`;Ji/Eaj[TNTqR&g0b#`a\737#mnH8P^`m%&PL@9JgTC%@p%(HV:Et)TbWTBjSl+[m_SV#Qf*K$80ue'GeJ%]-A?sDS!>*elm2e69s7@#bp=7Qk]!>MXlt^+8]XBE?.9OSrb[2+%73DZSq-&:Wqn+Yj:R,>W$>1;2KeC2@po\:7KFk8=W-(?3!c"WqTsff60^8pCJrSuIbt?VX*T.h=@JAfd1!oj4_I/3Aj3qG2=h=eV%8%*AY[h5M_<Bm"m(]-+4B,)qR&^n/G.BM%M#T=AB<%U!(#he[b.V=Mr,\cf[]ri8HmRR<<k[Im>CtRI:**jT@GWHKU8-r#rC6XbF%ES5?tdC5\-X;kl;5q0ern?Tc1,R.")*d&%rV8sih'e@=Nf)0ZX-*a#9K$Fu?g(5[Lf(jo1\\bh,om5kUfL@?1K4P0JSZrikQ&r?_%.+*TWCVq5+d0=']K19Tb6m&CjPpF3@J_r:M[]#QsW,nU2-nMc/98!_;S&;(q`en^8;WD;V=%&F^/o+E;36#Qp,Y4#;N4Ci^&P4gC%&q)Om'!$[#Xea''oQl5_XJ!+U@hd[268/[<KeYi@/p2Q%!KFgu+s+RR*)F7i>i?&:c1-u;DmVeZ`_%0NOIS14?%bHlZ:J*@,ffc4%4GHtWiql<ZfMF"*%fItUf%"@P^"F;S_?!JmdueAKF>4`A(W+<qOs!390ik>u"C";mSFf6&-WUgP/14#QJ*?Pl.ig2Im_2._qmnR9%ZsqHa*ofSf.d\/@VNmLn.%?JF8FC$lklH'%8hbPml![4G,>U)#d8PHEI9crl:#"jKJmaIdjUCjgE.%jUA"i-8R2FFsPePG[N%i?Z%K:`$:+ao*BUj/ZT;]3$>1Y,.;C@p:M9t6&]VmbU:0)$(bTkFVp>j:Pt&1ra?QoF#HUfrlWg59>S.u=kd#NZf'bnZaR09Y82fhih7%i%\BR/FeH?:&^j<\Z]OOTPGJQ.r<0*CqWba70JJl.HX0cN<Ye*pXL"tE`S8Xg7T9m)$dB<:7S[[.E48#X&q[=\)q[;a1qeE\*bt\%.o*riknb.(n-inO`O$1fUPU`W7H<Bb@O3NQ)/W3/Z%S<[,puIAU(h+,La?YW6'H5J**/!<NjntRdeDWW%3.4_cGtqC)<aLYTm.F0%8fOq7-YVG2JM)+O:BFK@O$M7%cq`c8oG's34QoGq<?Ankj@ruF_!TD:?7jG^/jM?5<dd^C<$Y65$B?!)5*RI^#CVFuQgM_&,8Yb7%ZJBJLnhR^+QbKL]IbA6nF+8FoC;n-L]W/@TPg,PtX#b^_a@T`>fni$EkhbpN3Sd4,qQ8'2,X=ea&HFs._Z8Xr\M'7^jId+BOd&Tc%<6@aL7jP)nVeZYBEmTUUr?i10PmpX!Kls=q+V.RA0(E@?J)[br=&Z:h0^grB6UO9YTK`pH_3fd[,_YF\pA>,YSu@3m"ro-W"]1=:%!g$TWhkSVtVL3[9QWSN]3-!WmS%]$Y;;>n^*@@QAo+QeKYq)^a/enid@#&g9TXEac0PHb=SEN1oE2gf!TZrJb.F-00]i@=E*&t\o%!V@S*ZgT><D&0:t3#A=4K>-t`jmgM`:AV9=?<5lOig`C$]"7N>ea^gP?H4rZ/jZt/Z#%"B;jXYf3duor/IH&*p&6KVUSa0+7N<T;%BnT,jK2c]5k\5$QWuTGQ:Q)!sUR-sVH<M-t%QuD&I"ks*!PQqBEY>#h;bn>G^W.$T_3YCT)=_`/ES8E%?ePKP(ni>/>HAlti*igA%s(Xb?K\;eU/uCWC*Jm#T+;n/hP9s?B<ljb$ht1--5MAp3:]:N1K`.hJ2uQc^rrN.-1lDBGTPn9>rCt&CkM#m4r[7`OM#m6-rO+'K%NW/(t2DG=6VB9!S:b+q`o5?.KdJp"Li!aZ&M>igu<j@91pfAQVP'/!5/Rf)pn?4"6?g0n+?,WE82uaYG15IRDf0pR1(]72=<%<S&%0?P!?i*S3fY5d/SQJ[QTKeE/PiYt/6d'XDlQ,UKT?^rm-0'(V8#5,b,\(5it+6c+@c(dR?ITXHVDajOr]q*2MGRPZf@\S9bA!<M6%$dI(*o]&D,Yk5F$0h3"Jj!ZafoYX917)h(dQ<&U"<f5O,MQp[]rKkJ6E+TKD4Bet*,&ZB/Wb0;?`/Z\m44][.ih,K`4A#s0f\ula%>[gol'!TGQ<qO/[$5cMAriM,[,VRKlNt2Yb_tsrh/<?h2XaU],CA5K^Nj-qBX"I:WD(:*dlC[-7otT%<abq1])`nZsYkFtsdA$3.%l<[;*O7KIi3/@=p@6#,*n.U0`IU?NF@j[Er9RNK0EZL;cQVjZ&"B*4j.:l,?P`6Xe8D/Hi0K;K/&i>dl4:lU27L4AQ9dVSf4<["S%DtqjAA?.B/j%ALc[SISA$04]>K=prgC^YkOA3gj)cKWCkS%-^3c%8Zg;3E&ib6\Ak?eiqkUbM$@U5uEc<h:R>s&s%2m6#]B(;9,c%Uu!+o'$%BR$U/0=0-GO=BAbZ"%0o<J`JB_:39]&a'ETE_eO:c1)Ej5*YU,jF9enW%k:ULiX)$6B[ga")eJAe*3BY;2iB9ko"^PBr%F9M0O_aG\`('JrCOp(;QN\F"5&L6A#-V:]])L[9ha(1I>U6RS2fCI;?l5mE8-_f?fld#m<6gBiNqYHXsV:>o`6(4h!km1B%B,7:o%jX*REkhGP?#.qOIecV4;XZ-(^JT>:dYf\65qU`B'kI&ZkceiB%cL,Ia3F?'pD*f!'I':r=JeV@Ydh,+_?^i1)#$.0<-)5Cn;]#Xa%6%3+%'IS<+b-=sb'$Ekpj<&]=;kru>)D=a!>9V=@`f7*s2i-/1"f+Yl[l@fU-:1n4GZmNkOPB_OmAQ9A>-t[7U72H\Q.K'G/FsEP%eXO"$nr\%tdJuR#!]fU+fRAPaW=AISG6VB+NKEih.YaR+pd*5TV\"@G,;^Ys"_,idSp%g)M'^)B-5h`hEu-^QX`#6-CFL+69Q1&&%L(.dEiS_N6`f\jc`Y`E7/`H'U;3E'm=pd_P'2.=$NqKC'P-&2Z=AG#+s3PO`"td'G;IC$@GqBjYFNfi/5!lniHO5gg)9j(t,@E[1%%ZZt]LDZ)8"=[SN0\DAd,7,YF:AU^KA#ku^-V;n(Q<>8Ts8L5U80JfZ"CNFaPb83gYQW`@18KGFXc`lhQm;j1Dnf3f%0T'sR.SL^%6EFYI3_?XV26XoCMS4k@B.Xrb+^]T_U7NoJEf8[14DU=VYA%AZ.nL:teq29_&kR)k-dPtt,*l>+Os^4UCWNjB>^KsRfdPHXa5HU9%.MfABkCU\u$'NAP8k6[A3"\2hRcPk^cD]Ld'F$XkYr9'8.89SiPTurj<$jo^]9ZYBNd#3.@<<P,@QFQ>FePXSCPs?hO9suUm^aUo%OR4&,Y;C3mOV.m^q]-oc[KnH:b:%)S6eD4+fHQj18D/rn];TEMY$"9nX'hXoP)uns.2[T`qDm_p&ZL84#b1[R1'6u'>)6EF/j`C:%#hW^O%.:,uO6Y*6(a2<mAp+O1b!U2+1^>B0FIChgI]GCVifh<'9\?=Hl(V?bqt-!2=$N#D9(IF$QbJI4\SR`tFNHAK@(lNjALtG%%P,f75aWnTXhtPk?/-sk!&5pp=gu=Ldk>hJoha'@?%VGM!XNG.;>,`C3@Y#q1.2J/t^f4@g+ge27e[AB4qi$Y9)pM:uJdkGA>cdFC%:joi-$NpfI]5<3d@t0<>WWPUX+MZAJK)sELZJINRBp/l:!qDP.*We%[4ds6PA7\kmHHuC->"DoNH4n3P,4r_Z`k_j9gbIG%!X:2`%"hAFUmn;/h0M2V'##'6%!1X$nc'%XHeDRk;gH^^?Pcu&8/_0fO2n@;>:8"GC`>/`,//T"VPd1mPLKO%K5tHl2N!o^oQXM;M0c1:T%<_oMHCe@49eh1J'#P6chq<T]I[C(Yj[)kYNXHmW0B8&UD'&1b2Z6d(hULq#%J/dQNIL#_.6&PF4"=`7XLR:>c1.ira6d'<WlQQXe%e0qYO"%o%9^u7TsWWrQI/_b[MI;,I&Llm9H)YuVNno<%'1>4Z0[[D_<n=p3F$a9g%pW]#]N!@L:Nsd+=<$./,['`a6jGmS>>=q=Z%G+Coab@FtCihXOa&RaQa%)J@k&?ec*>V_`RBUS57)WjF4Ab([5frsU$S=ahF?NIk5::[L#?nhP2\`MT7G_nHIE@$?gpU7^V1pm2R%CVTnGI4ISr_PeXM!c11"IBhlMUZ!rgXbY`#V$G?)C+<R4jLVN^j-&W2CZ_h<Fj!RA5[Q9_IinH(hmM+OOi(`ZhgB+CF'k?qbCa'r%I^pK4,]_;!+PW$<AKgI9QZ'0b^RG*r/8M;FEYjWQmg<@L?#+59o/6-7]o..ZK:@U=0SPaaCG-Te?8I'KY!I],>FS[(<IGS3[@"]j%LW`THp8*b*R]X]4l[rG(\mCD(1Hu?#/NZ#oCL8)qIinISd'_N@)e\9I+7T9qd_Zc-lHbe%\SO>T+TC#)-YlR2T6d1l'tDftY"A;O%e:4l5Mps35hj%f@0BZ5?l)Ht)&<:!-F&Q-lhg+/3d8Ql$433-E$Kd79MfJj/`"s&@K0Z6j?`g+CrbB2#WjJNK9/?mb4RcnmF2>u>%Z0Oa.DRd]Fj/O/<r`n!JIb!a(DEHQ&@O?Nr@(3:D?WMI/X&KKIY,acK@6KgcZ23Do=k9:$dq(IN9h-iuH1g=e=F()'70g@ad$86,%o+a!d^;=^DWpqZ.qajkk"tnle<G)fdE0V>godNj)$<7rL.?Hd`-[L\)-[-5Vo`dA$qpg8#qIXa(Na*1&kUXlg*L,3`W659MH<,+R%P!lq@&cu)/js=^ngQ$[YEuG#EKV\%eS1QhBe2DS>=F8Cl_r.le"o"c8)C!%rjV,Mm%S(&,VJN<l87A&;]@6))D]'!&pm;bB7FZre%NQIPs_D-CQ*17-QQnZ4\9ZAn&<kBn]Y^oq(NteIZYTRUj$8sU0m#b\E);WLNCgcDY,Jc2m\_/4D#%jGi&kk+?1C));Cga-n,JaTH%2L?^:B%Es:jH3gPF.;P29JbXSFitJ8@'6h+JnZPO0l1D.2DEb9,Jc3XMhHs]_$9$_HR+tf_SO^P,D?TN"frf&"DJof=?qu(&SU)S%]kJ(($u$cY__ufY)L/*.c_G^fBjUEFO.h,+-9i?Y$4jS\N*_7Yf(G2C4_M`?:N9)bS>c:\,7Sh:$klCgZ-85f9^!(jG/=Z/O\UFp%*G\@>W;'LW@A?LU3G2fe@iiI2dV:/R0_=WC@>;>;g'J]]>3"r]@AD'#!_h;S)jtZP\n)LdQj]-#M%(AJYagrDJOe)F%4k.gQIhd,%Sp+3g6&(`O(X#HVfbJFroQFp/KfJnUU!\q*9R8cWb(D^HiH<62b+uL6,HnhPerL:Y?Cpe4B_8(/$musOLM81i-h44)YMlj+N:MMH%bsJ]6*=FHp"d;V5gOadTaD1N8OOK>`qRUKLYqX):+A!+ljTqo^%)9Z."\Z^nIKt:So[MK+Q*@!J2#52&YLhR<=I4u-?"%[d6u'99%;hE>.+\Do?R!YWK3mr%UHcY6D=Dj;_N4tn\\m]Q:)1##?n4^ee+!E61FgF\BAWgU&UYOJ3<Z/8[o?D!(C+kDcKYtZbo52)P8=9(G%;&[f&?a&di3,'"h7U7VAFba^5<;^d6jER`KF"+PqF2VT%A,W.gf?pEA46Q;DO^PRF0!@S)7<,FXZ67[ikB*N]^b0=qM?WgC7S/2V%.7Y5n!BO>5@S%+]39h`akJB]hKU&X7aZn(+?*M5K,20R@!qgsda?7-==:BeK&D07",VP/*J<gX+\MYd1R)FYT=3lS+qT,>DSh1b%%P66OM\iS1n@5iP#ZVFt1X/dP`m^ppCgufEe?Pff!&nCq*eRdN>7i#X$l(!e+>hEW<U^X%f#neLV0uiL#!d<m4:7.7L/gVhV9?cgE%-Jp4!Fr_R2QDH.BI&!po#-]^GH_9iq6k[]e3i+&a-2+nW"Sl^83=8;V8n$)LqKsW1r1qPp1,atlGnOY9UO:_(Wlap:OBrGPs)`7C%X"%Z-Bah#dOMs8WF]"B:Ku?8QbD"c6?3`niYGSCVCU0>EPg'QgN1QUH];.mi7LJI0#c+!A4V+Ed0"j=>2BJ`q_6$kHMNoDWOE-<Q%*^h8N0-g=h0-ZmQ,?C"uaYuhD>s`I'r.aC5-k$T=Mn*E8?<sV,aF[!1kB*M4_(KNQ/2p.@7UJf@h6CpZ<Bp]_8Y)2WC_X45'kG#<%1tX=cS+>tsXM8gqGZ<,[/nUqt'Rk6LG;Tg+'Id0FaXHI8YT)/#3K`>LAR:8!8]27B8^QN;V81qmO%uRM//UO>--0^8m=msg6fZ6d%L?7a.W[A>1N@HG.8V5#^(9B_?&`b<^ns%*AB!L<#d,Z2p^b0T]#t3ak[AAIeXA88ne.Q00i7``EaMNV[NRJKD^#!))%P0h9njZt^%JDIGE@dQV0Pb^"t$W<"e@b*;+ZMm]&lkE>ZRY_g^$%l`6A%ba,D0g?/V[saSE^FnD7sYC+Z4<sP,r%a_=pjVVe_*3d6R7d^Wt1qc%OIcOnX^[T@6]rer3!o;I>,5\d93WfU/@=n*82n4/f8dR3(+,kqS;ss%fK$%%"mN-Z8V/oS`u#fW[/,"oOs%8Re43&&K&*L@<h:R>%s!S3IQLJTJDT;kfXo3gTHKU`TXjM[:l5M$idfRXlf6(I).ju6O/I?U<?j.G&*u;dH,-+Ye-6"84Fcp:Kj##D*FU:fA`@j7e<o8Q>%D2$o][`R6*R"_S\3n!S,DZRk*_CATL+A'^1#)=%)en^T4-[hT0M,hJ,b=U.C+"+p3q_m*<XBXT9kh+J7PsWXXP2NLGY-BZ820&t:%M6LJl2%*;eO-0WK\=?sg49S>k9p2NY7NWd*&U(KQ=F$'?rM)d597g?^H>^n/MnK9$nC8M5E;$\CbWaT;M;&e:?bNTE.o)8%dFT">%2ltl*ecN*%3$r.b7n?:+h5h7?2G(4R;'PAnn<lS@@dC&uld;GoF1Sm0O,Sa0&Mft9:.JJ7lnto6"hE/Q8V.X*`u%3]H@Me;`CXFt%EafciU6RS2a/Q;J2ljhqHERL1rGBJ(8f3`tfuUXoVRgb.dLp"*g^"LXT-S]WY:%;,R-SZ89<.`i]s4Z"OHp`q=XC.\P%=N,?:-W[%PVBPjeY^'!_KH@%Tnkinp'M$U6YIRG>/n%9"R50Ub;ulu,Uj[\qjkTsC\?GMP2ms<:<KhA`"L6bdc;Jraj(4?3eD8^9F?DNI1tba%%M$I]NJ,F9)PnZA8bT_F(8eFeJeX<C(h9fE(s\A90PLno9\I@c1^]\"UEnO&6j._2YE((?_eiVPm,HaZo$+1.PXJ.TOQ[V7XV<9f%6,@5Ml*B%f<V7&l2-<W/<hkY:ShdpfJ[JZIf!i\`2LB<>_a]!.b6T+&j;<J+k#7?U[,NNC2K!]t=4:HQ)khn9]KkR8U^BR!oi0W#%&DA?<BnQs'EX]cFlR>@>>V+BfAB/QnmmF9'FAS(NAt4OMTG>f;Yud\VN6jjV?CPpI;?aC\>%2<Zi=r][.):M?K>p#`hX_DO+B<Hi%:eQ]%2`eM7i_&$W*Af*#'pdZN@o@_&*Lmgjm3iF0nD%E2*Alm]gFg?B=f[1<@^!-JbV:-W?jDCNNNk'?JEa@?#:IKfiB##83.i4c%<]7e:"dgoXF\ktPhYJSD9/>-c@9ST$!7PM]%SDVldaRCSS]+tANU\nj/<jCi8_HZ?-cNN<]D22^0rFk!b6=7cCNWHOltCgmfjG&E%M1<KOKW27X#:IJK@1S_*Hb^*uK1.AsjtrsX:-'dP2V31g8Q%7p6"+_g.UhWHQnE/sE)LN,P/rkh=p)U:eWB%]0hdk?3]JS^C4)&e%?jDB7s'iM=dq,Wk8rC=9pGkWo*>GC9ES)nZFBPYsP@E"X"NOq'#!6MB1D\t=R$=.`:f?YZYO[/1X1Y)$V;R\u0NH]hi2##M*Y.AL%BukfF1_pr"rZY%$[5p8r2VeZLp/hcId$PW+kospUbj(jsfJ/E4=bT<7F&A;@CqU*QAZ_!Q8[4VdjVHQJEp7!ZLg^uj_5*BAdf(\S%b8u\bUHI41bH]JV@s7%elK^s@#!V1k?4cd;=(="_R?0)V1'JVa.p8a:lOdoPZd?i/Cg\lKMFW84-@Ckk[0nlHQe<V"1ij,47tM2o%jToof`e80_eg&!8Askdp9JQ&N9uBr_^at]<$I_[N`j%9&)jkpA87@qn$)4ME_$4MC4VCFE+^):>.G2G[8!s)h'B@W%7tM2o1j^M#%^tar([q!XPB&<b2R+pti@%%DbVc\u_)joCXg]c/#fJ'\d"WNipm#b\E\]1&J*c&SGc*sftl`h5l+dcK(I2?^9D_KiKE8pA+MJQI.%IWNr"2S<OS$&<b.B#d@f"AN+fKGinrr;nc:7Qj<6W&EFpG/?_:&55#;b;#&cQ=707Asdl;LbQa%B'k82*^R@db9Ung#uN!L4(0?I%Ju1,`0Z/Q$DU+@"R2m66d)9Q]1)V#nC1";OB#dB/hG)]A1X+@KpqTR$m1j]3[1bGR6_$:`D"K,,ZZa2TR1Mf(R=lGiRC*\d1?!"r%b9Y:co;nLed3EB]:,O7,dtV+.js-Z]?[<"&)De9NDck=oPOL.'dK3%&KpenYV^!e43M&_`/DOeU,RNJ@S7$:U4Ci&78WYNKe43&&%ESdc0<h:R>s#@uC5ElO"AFBm-\KE%5D]SB,ko2<E71Q16hrM?p2okMG'IO_H@F3I:S$rB+#Ec8`L,XFkP[Rd`ZPk9ndF/_skHsma%(mibK9#fdo,hEZt#?UbiN_@^!f/Xl9$-i"Y(L\%/8WY4Z(k\BH[:P]mP5M-%F#gL_=CO9^Rf&q6k'5fX4#A[#I28n>ZO\YRC<8'W%$X&ja[;e7U17FOLULq&.Ou)r<9(S'/:sdo/_)=l0f]/WcOIjo@XV+[&,[(.,WHm0#fNVHu3kMT#.Q7-heU.\6KbGU;du64\7p8sb%jJ1>.1eC;/?VbIoYj/=I>&*a`a\DW%P[gbM-'jajaZiO9^:@8H[Z#'u_FcBf3ABD_o[HYg72Da?hg4c=+t^>cVM>j$Ub3`8$'M)(%A(<>JDNuJ3l18.TXC>5;Os^2Wd<Qh98a@Z>[60ONS21)O2C$Zj6+(*^TmV\_Zhu)j)gs<gH,lie&kRQ#-S:`g`N3X6AGtP!kDQ+A%RklER?i&``a[<e\g*,U/8)0BL_W9a:dufs_4SZF#<gk9[UTZ%,?i#>TDM&@X,0<RUS<RNaLaA@NUrbhnG)g3gl1\@8H5kfWppK<E%2L4<'HOVFHQ`/ejaFH-?&k(Sl_<>_M8T)s(n$Q9:XCNVOr_]tBT=,L]?`3RA3eCbI$%XaD?oWps.,uc8^qsnjNRO#]m<jgXZbdt:%(k"!jH,h%U25F%a8R^$`U`<UXXEB\:rM+JtS(kgD2.LH<D+dK%5%5/.`Y#Bt:O,^)An<Ja&FipXZ;i0(8Y>RBX^\KIPr/<W.F/g^%5#Eh'95l$k/>*6lGof?@a.+cL"[*En,@J0&Gnl$eai^t5!AYH)%-E7'q-ZKs;AV_A)o\m@8[@2M)YA?rg@mZM!k.Q5X>V3X[80fY%>3JY"39CU0V+"-LH9Us)o-5q>:6M@!f<V,p$kBR?@cF178g-*L=kb@EH:GHm\(m#^V)a9<4Y%n]8="G;WU$=)3)DKE+@sh<^-RZ-%XC<I^Z:I!q8tR!*,bD-B4uK6HX-b3!PGH;bb)O-Be)*)DN;c!c3#H`h+tAo,c>Z2^"AL&7?\@1BK?0/E7l\dbEJ'jK'Ra[5-">Z`%Z#NJBjH7r<kdmZ[7pCXFN0IfDoR,kA&gG?lppL=M:`[5#&B51:'nmFk$621AYq[0DP+o-DB#R?*PVfE*M:!7FkN]i^JE>]Df325\%>&n^AV^'@B/nOU2o:rKC"GLYn3T9^LK#'F^[J]6bNcK*V$!EYgY&QMNntX7(+H/H("UU?f(h7[u[.Pik-HK!:4;S[#Qkc`raZIY*%^-LG6a7<h7No$G*%?quK[8rlTgPSORosI7lBdA<[br7c#Le6IGnY<7Q)SJG9%?csC@!)W%`<J&2Z#UV\X!L6]GRbUET"nEmpGE00%3rMPZ3RZjL;r;dt4/F/R0D_-d^rf]>+AU&k<eV=eplZphm)u>gOId9%BG0(EJgTqG/NU%p^u5p?D4`PIqjY(A1(.WYp[,#B:+>g5%/[SnQS?c9PJj_(7;!9R:aDk7I@pNm]EUkA%>?sBVqM+H4GI7PBV;O\tS)??N(:k/r.AgI\jQLHgL)Ig`#[0_oNP;fcjP1P%RKU?%%9o%Lr[XoBt&[@?W>$CR,(:$6lgf=^fK6?7<IJ_G+=&kn\5Sbn-FA>>P>'*l?;644Q&]4BJ>4dh`O3u9@^pP3hRN;#TdaFl![2rq:%2^E,.O4'c_=pS56S,Tbk)QN7PL=CX^0</Cjf/H8^V#`.s3\J_aa%^$uW2o#JmniCi+aFsK!Aasd"S@rB\B)RX15RG\=3l\_9-EL3%'.+5:ou.VjG\J=]4Q=j,AeZaiP*45EF.tUP*XkW'LI_45,:9Hj7;u;UjPOIhMV_AHTN@s1aN\)tNUb0'`+C".V!On0nt[q&k$YEG%`^J"]?A,;`<X384?]=-D)!mnMVldK0;e<'@b,`g3Jp2s?_%%B)JsD6J<S$Hn9^?4"mtaJd*Alm]gFg?B=f[2HYS5ab));$bJ/pK/%(b>,#9Zg*k-qjGZ[s:tKh(cb,cLM=s;,!7_3]MmVmFP*Q&qh8><]6*(0#2R3X+R^h0@o<r)XO+OVldK0PHpA^b4%U&,]S;)'ddiq%>VErnfsu7ig"tsg:u)W7?jDB#h?V(9Q]mdhCNWH+Gi")9=J3oH#DFTY*8bfGe!dBKc44b:!cYh^^^^^(EF`Kn:1Ll:e\V(@D;BAH%Y+LZPHL/NQQnE/s:c<U5'<Kk)m%?&/`K^fb?.S<!bjqXO^mVTEi>!^4fXZno<S$Hn/G#`ViuH\#7DYcXiIpkLVTMXp..=fc8T;+P%hL(#;_3U!5<H`7cH<,?tLE]Z_Cp8Q/$:k-'Y@::9\uaFJ3U=5(+jFRSfKj"B>B9flALAL_d=/[]--US7K_`oZ\LgmM.Vj0GG5HG1%(9ZE&)!mnMcWCJi@B-EZd5:GcA`:7lS\YdSo7E6c0NH]hBT^<C]kS-([`oCX>)gU#N5mVXG&@t1>]oF)rL,Ni'T_X*]:s\j&Cl1K%!<-CTh>.7+c&aAf>"G0?HDEhT:W2RjKpf.!mhlUo;SUCts1Rl+nF(b\IYXj8?!a]2n(AO+5UUBCJTBRqLE*d,JR%s,\'[IODSO)u%rq^iLm_<\[5QMc(RTM.,Y5@\RBV8V>hr/hZJY3!PXJ:a^k`"6aO&d``.*H;%!]gDnZ5XV^&7[Gl$IBYF(fLS\`aVXWUf1/..uaUd%;2hIUF9X9Y$o.r.7PUbIcl!C0'*hG>+\FJd$IBZX)+l[f+@\8d$IBZk1StLEN,23oo>=Kbo<p-!>Et+N0an=_b5NV[:*csp[RjV5%EUTEW1;FQ9;eb//-RDKc=6$LMq&f[@HdgTJbe`LV^`XpV`n%dr[MEfB'L0\gAK[6-f>W`X0$`1^,bq+8UQj$Ug44_VT<)c7?B:%f%pjF04h1F&%JAKg=(gFIYD/EE.\Ipo@Ia*M1m<W<1qU'kFj%\F_!Gs?71-ST:X!pI8HbC>I2>*^H""0Q6d=IEYN1<us>LQ\IjOO-m%p[2,+?S,Y$Ea*Br:1oZ^+LJrj,Pc_@4]H)c$7%RKpSLPc=(:+\^,AHBM02aUCh3m8W!joY]n62f-,gfd^6]F))FJ<e)9*a\SHG/n%;_IGkZ^uGE0Nd7eI).L]E'C\)b:psi/8$k98&/m7'QMU'A[@O&a]qRp#`+([_'1=%qL[p@X-f/"8_-,u)?NcA^Csi(3&b!Xi7hSZ%(L/=h[:=%(,7DqSF\YHBqK0HKD.(=S;De7D4,#sc']]W;8Uf+NV&W^YXDO,2rG,a6Dam(:<HDLlOB2uKke]N.nBL[LnMK"hf2Y%g%gpg&qA[*unM,]3AJ"GU53@2W^4g(+`90+;$)9*cjZ1Lu-jdd->hD^8;=k,SA0g&lhB-ARH;=A>kP70\>g$]VAn!cl<7M!2=@S(2`%PDmKE\Vn#REpCttWI;h?I?!@[#]Z1pj,qkb4+IlEORoSq3`7QF0[6_5<gk9[UMmnG=?(MDf!^b&-@JY3YuS^Tb=U.C+*q3Mp(<1h%<.\!E;MD2s`%AGaR7B0`;IPsT()<m1Sr=p\Unn]_g)#kc-@O<?M,hbl<mp%NH4<0;eL![=#jB"BC8V%DLbMImCN#i-"Zc08V^#St%SN<$Q@/3BW2u<50L".UpS=cu1Kh5X5EblJsQ:[84YB^SLOjj3Y1W'TTeI(_mD&AFS4sCAUq__,=WYMeG-;^tQPpAndEfAO-&+d>i%UbM$@>Y_@EQ<6nF-NDHY#\Qrn]oZPl0^;:TS7:lll>L,SNq>pUeh]5/$Cd;+M"F;k;-tN1r1m,7-*`>1H'2_:6a$T^787],94k<1%[<CH(ee@sR%.5SdPZh3RPg1ETXG=]u[t,8A8^ZaSEf@iY1"L!WP&dl)#he[b.Ud1X,jSh/]"SdX;>B4F^"7l/NtHg0YjDnj\&O#I%Nh+X]I9Z1hgV>:>Os!390a8^?^tU9#ihS5J3O+HD@Q@#Kr'RY2FkYPblIqD..r7:C&2)r#9WR7/P=66<qD8[*@!uCd="H:%E^nr8%Vm%5P.Ztnffr0rC-q@;EX%\\XJ'DbQmSg:i(cuhHA$?.J:C,7qEkWPjN%>L;pnqH9&ZJg\R:9?H%I^AT8P2GoP[gdi/`6bTOT\tc%W/m&=:97oj=AG#+s3PNd-WB1Cm@mGbA!io.qATZ0>iW.#I6?F-E<>h4)k<5-.FPXA3=M"TrD'#nN@S*<%s;!>)A'/>_MUh0ll%jr%_3rgO3G^;53CE9N6mu[e*,Y)4CIm+k&N[.OAQItPc1+8Z2gY0ZJ^tV,a$Of$M?p/7a;F%j<f6PUh;gGbg>jPrXp(hh/VrkI'?cPW%VkYJLV/[.Lq]21cL'&gcA1JrF9skO"&2$se=-;LE-I7CuRLY1f?-;4A3*Ks]>KRPoV/1Ph]gHpQ!sua$BRWW/!$>2A#@]k9UB=LZ%KJ%,!Z`HWR!/V$h<-osJOq]A%C@\H_XW^HF;QN[P-j8frQq"o^XE?r?dBj>!9af`DLd_OYlio>%VtPPTS#89_8dRu9IO@s+4U4W2%\^@(,J6Ic1@ErVa=J*sf!8Tt'1r%?Z"NkT6%u7b%\;(VQ"e;k1UX66XoYt/r`CLR`EZp0b)t8b"B/M\!,h@'.m-R[tT>4>!ljJ+@%81)_G*._Sr"$Ub@o@;ILYa7lhDZ/NN3sa=LNjDWRdBqdcZtujo?muZ54D5q3(*[O];lg]!'0)Fpj_3a9Tg4#M#?*`i-!L1N%iY/]%i!CPJ9t+h3Zr3XG[,22>Vf3h+=A:mm'PiN2=XhoLFHdQ!<piX!g3OhH#OIeKm0#Fg#(L-%:C8K.i=ZeiBe`L&=Li>`W-<bCAM$C#%arMp8_jkD99KolQS,8XLA`\_JQQb(iJ\>;n)1kt,i5!2+NR7e%Aui*g0umKIhIqL:J-[Xfl]TOq#Xl*3M?ql'fGNa%7Ypa$OeZ3%%n[ItuSC<4Z!Y--A4a2AgTH`\-4P7KEC['Yu?QnOSK>-t`jmbthCJcL,.D0^IMieo<BZ(LgSOU+g0usIPS)g->[O.q2Wmmm2C6)^G%=c5W"Kf6pYXi0bk6!`%ZpAqa#O'[!Me<a/n7$Ece9C>GZ)EDKLFelOr#a\^'nmEh<=8Ya:_2Icb+S5e]iT^\8V2Ss7##V/$G6ht.%I!O)*p^kkoij+]1^9"Ub"X>kW1!AZE?b3E*pgk\RqXT3kq5:\TC`59HTYG:tT*0J&;(1]977O-@fnVO0#DKta#3e=*8?$'[Wm1.i%S@^[]*`0pD+aG;(i?TVD2M4--.$!_5VRR*p+:!V]NKA/nO]'RL<L]3(^&-s?J/gC4mu2Ig&MCI."LL1'8C=n`)1[>@k`'TP1d^Ym%OUJb/`-&CH[eTq`.%iZ,/LLQKOpphf\#uT:OGR)K7=afVbc)q>MV,A6lJ\(YBsSAb3iFRm?e0>s$CG!(8EI&hWnNB5UPl7obBaNR%,'g3=KjX_RKle&XI8JPp]PBZMh>,fM>r?R'Yj.U^!^R68'q2;#=3-?slG5(hH/O*]WNHcs]!Yji4*BBTA\<Hld<3?t8^$=c>^OnD%ik"YMH0pLjI:jf:"[&$Mcu^;A6=q/)bS]LKZ%s9<%1NW]iEQ@SQ/%BMh""=$9-,E_m@7E3s&_i"JRnJ95^\e&Thfh+\R=>/TD@4R%`<u+jGgJ!2#$,RPQBB]0c%>',O[[@,.`Qd(1^fV<7p1KRXCA:Z7'iVs/4'PA[al+d=V+al>#35Tb1:l*1^j#d7i!6M.pM<G)-EB9%Se0.u'-'L-#oQj7[>PU@>*<G/19`ZP4X$6t;rCLg+TlMfee=c\>AT\J,%P)`ep9Xs.maH45o([IX0:t$4N95,#=@)KKal7[hLCY:%Qt?O^*76GD)jj8[Z=I>uVO90_9YgpFR6;2LC/!8*[Ftd'gV_2kboa;nEuCS)WE(g_HC(M;2:5RpMT+g,RDl)_$O`#9**@k&XB"!=%c<A0fZ9AMoOUs)p(Mc/WRT7"c<W"DKA8==OR^G+jrShGTQXhrd1<<Y$on6uo/jp1#63c"MX^@FJqTW6(KP9\\@]eP1A:8Pu7<EVL%K"0-7=F%1n69du"N+eNdirDQ5oaq.;2#;@GL`bpl/4'Q,X^@$#<j_OXOb&e"/4-`:ak!ZSotKe)I2Q0h$Q4Zg)BS/FgSGJNF'h;2%Xa<AZ[MF62(F5^67VTZP2Ml32S:rtCZ!mi->`,6%!Y^e<Dfp=T-2%lt=u"S]4Jr2=@GlYLN94iBB,-_:PTDs-&pe<rUkfJp;og#,%(#3h//2mlU7brNkYQ.=nnOuMpP<LAUa=&C#8W`VJq:rm=!);jN*.dApfYa*g&4EjjjrohZHgR%%<!u$BN5A/MQo+*^mhA`nR1&C.%luJWHjgZ#ZdlCkmM6VN'ZOd8G@=JBY,;C4:_X_u*K\$geTMfLL+U\pVF\YH,%3Djm-rOo+N$(E\'P"5)45dI_QK'<'N_>4#bXt@M%j;WCRNF@;>/T!BjV4GF@lRW47>[`$i3KShEA@Vo>A#lnm'9&/0kh5DAWOEsI>Up].kQt.AD.1_)Uo[&3h3MiZ"UAuc,nMpd^>?@t%V"puQ:1nMZ<QDQCgk5c:K"@nV#f9<#5h*5u*,ft>'?0*UMAT#bXB4U8HrgnL<s<%X@FD>b%E&fZ@?X0k$5qhm.1.6s$=[(>NjlUP%<AoU\H'4>mWk542"UMp0eC,ZN#"bC0\M:0JVB3p4//Z$A:.N+hFC&F6RM@2AdHK?R'F#ddBO=2+R.LP2a&Xp1Rj;/:Rb)MC/CgW-%`]h`7=?;K^F9Qe(f:i:\=_,>q@-;WBO0cp;,t3F!hbfIX6&IB$+"`.%Q30XcO3._/QcUL]73cI9%6]GO7IN@i4?OY]^;e`I4uVgL%(Mjtt`e%W=kB$i#YK]OsX(Jn6Ou)t.4,)4.V$):F,fN>^P]CRTZcXQ8qU`B7;b++896N/.(8tbZq]6.]KY_tF5p!kfkt&2`P+VPP%1b2:`P0pbr.1D4=%5$A19+$ls+Q_6*@Ys1lC%;eJ``)6.#1PiMVo'9dCB:;@Thf0+73<1=_oLiZ+_6XL2lVi0'W\;e*`XHlZ:I!q%$H/Zh!0RKLD+8r,JCj_8%^Xf.Ou2ui?:/*o2Dn_nWg<lRNS.:eKc#thC,dbeDaOthj8_Z42u<50Ki,Mt8TE0+2-d4lehTh&r\^n<%o[0f:dg+?RQ2\l5DPe,H9+W*L/<&\/S3Xtk*(8sHYd0P4#jL+4'XkG9YXkL.\`f7)]3*$'nV/;`rh7rrR+'O"?p]EP6R/L0WuUJm%j2/`(h#pUoYfA'="chbX:2O'l(e2*>rD#Y450tE4&ALBll2^#lH^L!E1"kj'MqWRB%tV<*_.)k8;gfH_I)N".L8b_3EL3(I'>hPB%PGDma5rlei>o5Y(QGf=WlVg.P[RsZV,g#o7]FJcZ#u6Iu=l'JL?UKJL.FUotk<f`.%)'`)eIMn!H[Gp_;ar3X*McA!*(9!iZWIF%%9rRa32>BbO0Sc_U.E3J%Z"ih54bnZAQf[SJ`g/MmM=??q$.sbP$'mh<V'C?BPK5os/8#,HUM[bE(p)dcr3?TcPI`1(fI1?s8Wr`V%I1G`f_ZWU-/6FhgXR04*nHP;8)F]#`YU^=k<j[IQdC.p]N%>]0EDe/JMc%^P-:ue#jtl@W_OZ2gf/=dQ=R>XH!8kh][]G<:84)#j%M'e\mE[eu'=amW="S#BM0o%Pf&HoAAUH1`WBei:_d0Q2R6_CEnP]>A7o,pH*V%4S/Hl^[&3a6Ok'2_dO'>PXoSAVI2IM1_$])>B4%WK/#e;OI([.7Zi^Bpf*,n!_St3@9EJZH!uBh97oM`=G6X1q(M\6cQfEmr<D*k;7.`Ocfr4q]-oagW))EQ?>@U[^%L][LQ2o5Nnkp%V'MQ[d"%Pr)?`.s$Dt0J9cLT/HHIYfT\K/804Bs4<D2:d*nW57K3s`QN#ij)M_3.E7S5F^m\6SeaFf\`'k>&_>?fMf=:g3,!,\<.%8WZTR;$[2t@r$mR'IGiVB\Vti<b8jW-OYO]FJC`\p,b0(8F%PAqY&!MV(E_@eg#3K^MbjZ6"<9@_ZcElSTNd]<jAQ";#<qj9e^#]%L#J\WXZ;C*Z;q3F%^\T-GcqWZ=U4;dYfs^U\7g1$dq,YAVO@-5$h'kKnJhXSd$W;5>_#E!8I'!bQ,I/"[LWR(-qrH"=A_2;l*==p%C5/QJH3WH:CU"e3pNm1fS(rW=cZm<K8LqPim5pVf]PU;_JfFpPSYER:FqcBW"G8hhi<iX*]W0$TN>reO:\IojEC?-C"p&S$mN0DB%/-Bp#7*CT<&?X1pj8m;2aL_M%N(+;9a?+sF!$"FLWG%Bn%9?E]TM3=jB]Qs"QL*e84+ZTnMa9U4M[!)5@-qGTf+B;JehE+.>+7Il%",s`m``c:<J/fD':C4`Y4,W6"aWOSf?HHQ#DE/6KJJ%R>@'SW<U._Tm!H"O\;\^=\%EO)4pcMjS+%K9Z,8mnc@\6k^p'Gh/4f,NV%5]it\5<#%"EY$:@9^^6V`02L$;hup2)$I>>Q:$%XDEn\j-r4;4J`p"Z+B;WJCg.O8D&#++C1)-2&7*Ge8YF=*4\ZUk\.$H0Oj*>*%0M+9bW)?)?C@d:V<`kh5O96_"[U2cP\l:FUe`L$L)4Z'&n"e,/EY-/Fir(;oQ!+Uug3UrI8>O3c+9t1lp&YKCa,re%D\._&c/qd$%L`k7ab^BTl`t;T,:Npi<^r;L2I1Q?U#G1dnF6UR+rTQ;["V7r@G,4E!i(-]P_%l[*H[<#7aGNedO(9KA$.:rgM`*\P#2\'.;S7.\%&sIMWGmk.p[=dHD6^e7JWJk/<#2V-2_3!g<8!"sVTn0\s]]BD0%Z<2n0Jr:Aj9J&0#:VD::S<8?XM4gN*\:h=Gmk.p@f6j/oBPi%%4C<XD?Cq(&8Ftc@(F,!7JX:"U5/Ksq4"#J22":(s#=FrHh8Ef:i2+P&L'HKmq8&0T5n7;_#=AT3S";9#RKq#37P@+2Dk6f68FtCl%n^\rP&0r&@VI$Apg7_12[Q+*+d+DN.Y3#YU[Ap)Q45$X^/!9#GQ]FMc]T(7/B-&-DYBUVFC\/5rnlD=/^%'Z.TmJjT-;8^l)W^!k%nq3Td#D7!5,A?0"aU`t-*Z`S"G`+ZC#>DOa?@kXlgZ6D\*V!X!P?ri1hD4mmd(nDQUmIajO0)*)Ch<;B,Bcd]F[t^=`p?l8T)F2Y%$)<i\J`irY"@Ln([d7IJlOgfA]5)WoNP)7i0f8CZ<<!dRH"E-Tb7Qte<<%\"iUZBPjlB]!ZknLK\SlMl3G06Kk.W@7]jK(5<h"(N%HJf7:+Dk*@FC\b%<O9.UHI5j\AgIa]\=?s7GMKWGVBj,P?PIp)'smHVange51#T?dDWaBeY+T9I9Xjf!g'Wc:^A3D_KZil+km1C`%cD09kAq`fS0`(K)KiJ/!94pjpSFf6!a&Xp1SKqA<Rb&*jeP?Hm>@,VCCCED.L-mZmH/*e*]0R'?bA%_Xp=N`aAb2?jN$&-:.E33P%.DEVa*@(p-%n:\pJBqa?Zc$aE1jR[_hC.OnP-MFd-TRYuK.:lWZRop/aa=Y=]q]O76_cI<9_[^c>W9WAP8H7Dg@#^YkFb'I6BMq_%Y/$md*o`DU9X21srdV&@>Dq=G(4^mcs20:'8>'fFlXIJS8n\G2Ki<;kI1(\68HYQPZ=hHsoC%akP1E(M\7lU@"HkG(lAN)%05K[p%AC0W\9.0nNfMa>\?e2).Z#?_gJYSHj'?LrO@Xs>hKaLAWPj^1!`nrg*"tqd]pnKCncCYh7Nf'VXEjF3VLKS,>m[0'd#^+4tR\c]5%fQ9,_A+*<@O&@#l`hF9Ti]PnSV(O)f@1cRP8]W<+bgM+Ie0Kqu=;%_6&V7#4.ZnbRV(P!V3g;!\geB]qWQtj=5alfJ?l<l3GX<Pq%b5@h2KFZc"ca+CmXW:XC=pI?-.PdnYPo8'I18;_gZ-_"SR9EtLkfnddF5[CC-#YXK?d2N\E]b&,>+70TPk+(JZcEiD@S"8oDHXW<%$D"$?pfe!B?l.jF4Y'16o4LLQUEV.DS1JgY@Fh[[XQ<`NF4S2f<bN[h-_6;E)3m)/M_1]eEcZ"fLh&)rZXuk=o;AnVW*%2dQJ26j%CBk;+"2_PNga\.X3oC%Y6hlOMYrNa;Jd6F"9%aeAkUui1cBB"^><??^CE3OD^"EHWL!A9$QPD(^LkY!BcJ89-7W6oj>*%=QBUjeP%@*f#L\<)LTfH[cZ2-rqperUF\Y_CIY/!b#7:BkVFMM*6m1=Tlj3KNEN$S_nO*.Db#=S`ncp\u;lqjRG+!MuI@?Bub?ik!KMbc%>q%9:FRtOGWX`KlhL)1s3*MQpfL(Lk%^I8u+ddWQbs[LAbRt*36/pENHAS%c=]c5-`2-X=^g;eM=;6iu2k%TGU+$lu4TD94c<ZM:Bu,%BlhH8]<A:d)qXY,+0cN,Sf5L!$8@penkA@X4.7]Unsn<rL2\=?>L_/WR&IR+Yc5j*fb2Pg`LiTg;c"\!>!lS=R'T@[)%5opPKu!?%W+pi`n^+*mh$nWg<0W![L..sN#X84;iLZ/_ANEJ]n[B!c9kiTeg+[/4f\E.j7g/H4.ZoUZV)H)YFZKaNPj82ni[Detg@T`S7MG,)%D9Jfd-j<lkMbG;[OJ_U5&mhr,mgT$3h)ZqgV3T\I],6,Q&Sl;Q5`K4sVK+,?qX!\r/9pr[r2e5O0KMG&:-UgUjW$Uboch:d)EOPs%r&T_3?l,Nj&ed:rMO!cXQKT<G5<71*Pt:`%;O8J;%@o&@c]L[9`q%EL0\@QOeg4`(g;W-YAs@>GQ'%+o+F<gcauCta4%m$P[gn:l%@tP#E%,jt?Prg1_7R;m\e/E).b;mI9H7@o]i7j,nc/<<kJ8Q9aK?9aTTG2LQ/2Dp\pq@#_=@FRDG(^"G@Kn=cZTk^cZ1BiYQ:+,=%&iJA,El3h`=u:f%PuI1M>Ku)g`I^lhI[OH,K"#>\V@\QSQ?$(W0!-ECL@pp"os@F,.'\HE+dG89i/aTFWR+d_o>@XS/XkUpZh1i5%TTGf9?)6!ega*bGV^7c5+EUf-@@=AV1Y0:k5p;_inWb-DqD,.knW:uMR@.8df==m1Y*MaXS0%/E;J,DES4be3Uh(A;&.X@uTZ%cm%/&%e'9/n+1)ab%TgH$``G((#j;f(8%JW)$+QBGLo;O8Ed*,*T-2U^$<REb=/(MN>M0'd<BZF\-H.\$mRN$D5tZXau(lQ@b7YrIjW%9@O)Er"/rmMFs[RB;s-/B2+:21G=e;<YdQ#PrUM4b[obNH!7#3H$R>R>07F+hc]N05L<n@(,a%Y[']h07J%uXQBK>2;O?9R<t++u%F*Xt-0-6GuD1[?rlDC;5-]h5Bc/VQ;F*VgI^%`R_Zj@)GTQq>f`R(@?F"2*^<M!-jd3_C1"oI0E+K`/\#^hpsWDQ^Q-W?d7+X8E'%,GjU-P^L>C\?S`1klnN!d3^849Dcit,-<i4#^hpF"*HfF<230L3dK-?,,Nq\8"[0JVL@/:D//<Qem[ngXlrsl3u#u14I$[ZO[J3]%EJsrX[tZU1OB.lU"?nDEb]F<)\ON&2pfT&eqd$!3>P%(-aaMAs`u8fH_P4s#6Wu4O./ANZDOYETN&B;lWKZMb?)/4%(4f7"FQEG.%98ti`jCY49S#;>r[cVXLC`7E*6ie)S1ti(d8^Oc$Zsmh`pb^g32,e^T#cRo?h(DT_Xa0PQW*Y$J-fEsh6CXVZ"iXcC'jZ_=#.I:n%395,7'HJ,;Q'=#881Sjn)Yg-*f^V(>Snk\>P%kPUkhJHrYr.S+B=X)fFo#oiZjD>NP_>o>U_S<9P0^+,&';M:O(oSM$5lFkmN\Pf%\**iC'Boa^M]\9(D$k9:!'^&A+]3(#UX(@_0cf".en@uQMG`EHO-F*e;=[9nCW^:G2;/a"3fI@?'UKRu?r^r:?:m\=WR7T)'bpD)%;KOLBdTd]4<8!25dA@IN0jNoh,(c'=e0:tXIe!!:[6L;`H9?VHk.E@M0B_p[GAlqG?fZ^mgn%m1]flC\rgdZY07J5[^O.0nc%+n#%=@r(,Lo4n3:VZl)0+<lS]hc*06u8K3b8b3=*GI&fVAs8c518)*Up50?Z#HKnJ#"fCUp2._VX_a>BftqrYXdONp;f>2*dJ"C-glMc%2_SKD*l!-<5/+eH]=E;[7]tT1_e)cp&tafnjo+#Ie$E,Z?EWUDDh#EL]E-FC8c@r!2sJY$`,k!6A<4B[m#a5h4nKQTaQriHbPoS`%rlC#sj.eed..pAo>HtCIR_GYs2^fqB:C/iF\#!2q`I"5HSXSb/Y)E?0$Ti6:R6mQ<.b$B09$2=CCu[0-F"JsA`Bc"rZ",nF7eAYi%QC9j-D18uP`2@h:i],/FFNX-Z%GN^\_PY(X9"4HoZdF8OWB;mTIF_*aj!2u*kna3KF2*c>rVk>dp%!6MoA/6Wmr(C[040/g>[@;I%oBuPJjlZMb^'sHODZ4iDh;$i&@"/)"rQj`ajnt4ASkfm3hu=!.WK?o*eT_&(*rZZd>Dp)~>%AI9_PrivateDataEnd