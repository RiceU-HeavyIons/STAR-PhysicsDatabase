%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: fig24.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Gary Westfall
%%CreationDate: 2/5/10
%%BoundingBox: 0 0 508 492
%%HiResBoundingBox: 0 0 507.0771 491.7988
%%CropBox: 0 0 507.0771 491.7988
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 124 8%%BeginData: 9566 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FF7D7DFFFF7D7DFD79FF7D5252A8FF7D527DFD78FF52FF7DA8%FFFF52A8FFFD717D527DFD04FF7D5252A8A87D7D52A852FFFD70A827FD05%FF7DA8FFA87D7DFFA87DFD71FF7DA8FD0BFFA852FD71FF52FD0CFFA852A8%FD70FF7DA8FD0BFFA852FFFFFFA8FD6DFF52A8FD0BFF7D7DFFFFFFAEFD6D%FF7DA8FD0BFFA852FFFFFFA8FD3AFFCAFD06FFA87D7DFD08FFA852FD05FF%7DA8A8FD17FF52A8FD0BFFA87DFFFFFFAEFD39FFCAC3C4CAFD04FFA87D7D%7DA8A8527D7DA8FF527D7DFFFFFFA8277D7D52A8FD15FF7DA8FD0BFFA852%FFFFA87DAEFD38FFA1C3BDFD05FF7DA87D522752527D277DFF527D7DFF7D%A8A87D52527D527DA8FD13FF52FD0CFFA87DFFFFA8FF83FD38FFCBC3CAFD%05FFA8527D7D27527D522752FF5252A8FFA8FFA87D52FFA87D27FD14FF7D%A8FD0BFFA852FFFFAE83AEA8AEFD40FFA8FFA8FFA8FFA8FFFFFFA8FD05FF%A8FD19FF52FD0CFF7D7DFFFFAEAEFFFF83FD6AFF7DA8FD0BFFA852A87F7F%7EFFAEA8FD6AFF52A8FD0BFFA87C7EFFA9A3FFAE83FD3FFFA8FD2AFF7DA8%FD0BFFA8527E7FA9A8FF83FF83FFFFFFA8AEFD32FFAEFD05FF7D52527DA8%FFFFFFA8A8FFA87D527D7DA8FFA8FFFFFFA8FF7D52FF52A8FFFFFF52A8A8%FF7DFD07FF52A8FD0BFFA858A7A8FFFFFFA883AEFFFFFFCFA8FD30FFAEA7%A8FD05FF7D5252527D527D527D27FFA87D52527D7D527D7D525252FFA827%A8277D527DFD05527DFD07FF7DA8FD0BFFA852FF7DFFFFFFA8A8FD04FFA8%AEFD30FF83FF83FD05FF527D525227272752527DA8FF277D277D52275227%522727FF7D522752277D277D5227272752FD07FF52FD0CFFA8527DA8A8FF%FFFFA8FD04FFA883FD31FFA8AEFD05FFA87DA8A8A87DA87DA87DFFFFFD04%A87D7DA87DFF7DA8FFFFFD04A87DFF7D7DA87DA8FD08FF7DA8FD0BFFA852%FD05FFA8A8FFFFFFA8A8AEA7FFA8FD61FF52FD0CFF7D7DAEFD05FFA8FFFF%FFAEA883FFA7FD62FF7DA8FD0BFFA827A7FD05FFA97FA3A8FFA8AEFFA8A8%FD61FF52A8FD0BFFA87DFD06FFA9FF7EA8FFFFA8FF83AEFD42FFA8FFFFFF%A8FD1AFF7DA8FD0BFFA852FD06FFA971A2A8FFA8FF83FF83FD2DFFA9A9A9%FD05FF7DA8A87D7DFF7D7D527DA87D52527DFF7D527DA87D7DA8FFFFFFA8%FFFFFF7DA8FD0CFF52A8FD0BFFA87DFD06FFC3C49AA7FD04FF83A8FD2DFF%FD04A9FD04FF7D525252A8FF7D527D277D27A8A87DFFA852A87D7D277D27%7D527D277D52527DFD0CFF7DA8FD0BFFA852A8FD05FFCA9AA1A8A8FFFFFF%A8A8FD2DFF7FFFA3FD05FF527D7D5252A8527D52A82752527D27FF7D7DA8%7D527D2727277D5227F852527DFD0CFF52FD0CFFA87DFD08FFA7FFA8FFFF%FFA8FD2FFFA9A9FD05FFA8FFFFA8A87DA8A8A8FFA8A8A87DA8FFFFA8FFFD%04A87DFFA8FF7DFFA87DA8FD0CFF7DA8FD0BFFA852FD08FFAE7DFFFFA9A2%A8AEFFA7FD5FFF52FD0CFFA852A8FD08FFAEFFFF9CC39BFFFFA8AEFD5EFF%7DA8FD0BFFA852FFC3CAFD06FF83FFA99B9B9BAFFF83FD5FFF52A8FD0BFF%847DCAC4C3CAFD04FFAEFFFFFFA2A3A8FFA8A883FD5EFF7DA8FD0BFFA852%FFBCC3CAFD0CFFA8AEA8A8FD5DFF52A8FD0BFFA852A8FFCAFD0DFFAE83A8%FF83FD5CFF7DA8FD04FFA8FD04FFA8FFA852FD11FFA8FFFFA8FD5CFF52FD%04FFA85227FFFF52277DA87DFD11FFAEFFFF83FD5CFF7DA8FFFFFF527D7D%52FF7D7D27A852FFA8FD0FFF84A959A983FD5BFF52FD04FF527D7D7DFFA8%52FFA87DA8A8A8FD0FFFA2A17EAEFD5BFF7DA8FFFFFFA827527D7DF87DA8%A852FD11FFA29B7777CFFD5BFF52A8FD07FFA8FFA8FFA87DFD12FF9BC3A7%FD5CFF7DA8FD0BFFA852FD13FFCAA8FD5CFF52A8FD0BFFA87DFD17FFA8A9%A9FD57FF7DA8FD0BFFA852FD17FF59FFA3A9FD56FF52FD0CFFA87DFD16FF%CF7ECBFFA9FD56FF7DA8FD0BFFA852A8FD14FFAEA7847E7EAFFD56FF52FD%0CFF7D7DFD16FF83FFA8FFA8FD56FF7DA8FFA852527DFD06FFA852FD16FF%A87CFFA883FD56FF52A8FF7DA8A8A87DFD05FFA852A8FD17FFCBA8A8AEFD%55FF7DA8FFFF527DA8FD06FFA852FD17FF7DC37CCA83FD55FF52A8FFFF7D%527D7DFD05FFA87DFD17FFCAC3A17CFFA8AEFD53FF7DA8FFFF7D7D7DA8A8%FD04FFA852FD17FFCAC39AA8FFFF83FD53FF52FFFF52527D7DFD06FFA852%A8FD19FFA8FF8384A3A9AFFD50FF7DA8FF7D52A852FD06FFA852FD1BFFA8%A87FA87EA8FD50FF52FD04FFA8A8FD06FF7D7DFD1CFFA77EA97FA8FD50FF%7DA8A87D7DA8527DFD05FFA852A87DA8FD1AFF84A97DA8A8FD4FFF52A8FF%7D7D27A8FD06FFA87DFD1CFFAEA8A0FFA8AEFFA9A9CBFD4BFF7DA87D5252%7D7DFD06FFA852FD1DFFBDC375A7FFFFA3FFA3FD4BFF52A87D7D7DA87DFD%06FFA87DFD1DFFCAC3A1AEFFA8A3A3A9FD4BFF7DA8A85227527DFD06FFA8%52A8FD1CFFCAFFA8AEFFA8A8FF83FD4BFF52FD0CFFA87DFD22FF83AEFFAE%AEFD4AFF7DA8FD0BFFA852FD21FF83FFA8A883A8FD4AFF52FD0CFFA852A8%FD20FFAE83AE83FF83FFCBA9A9FD46FF7DA8FD0BFFA852FD22FFA7A8FF7D%A8FFA9A9CBA3FD45FF52A8FD0BFF7D7DFD22FF83FFFFAEFFFFA9CBA9CBFD%45FF7DA8FD0BFFA852FD25FFA8FFFFA8A9A9A9FD45FF52A8FD0BFFA852A8%FD23FFCAFFFFFF83FD48FF7DA8FD0BFFA852FD23FFC3C3C3FF83AE83FD47%FF52FD0CFFA87DFD22FFCAC3C3CAFFA8AEAEFD47FF7DA8FD0BFFA852A8FD%22FFC3C3CAFFA883A8FD47FF52FD06FFA8FD05FF7D7DFD28FF83FD48FF7D%A8FD04FF522752FFA8277DA852FD2EFFA97FA9FD40FF52A8FFFFFFA852A8%52FFFF527DA87DFD2EFFA9FFA9FD40FF7DA8FD04FF27FF27FFFF7D52A852%A87DFD2CFFFD04A9FD3FFF52A8FD04FF7D277DA8FF527DA87DFD2AFFCAFD%04FFCBA9FD40FF7DA8FD05FFA8FFFFA8FFFFA852FD28FFCA9BC37DFD45FF%52FD0CFFA852A8FD27FFCAC4C37DFFFFA8FD42FF7DA8FD0BFFA852FD29FF%A1A1A8A8A883FFFFA8FFFFA9A9A9FD3AFF52FD0CFF7D7DFD2AFF83FF83A8%A8AEA883FFFFA9FFA9FD3AFF7DA8FD0BFFA852FD2AFFAE7DAE83FF7DAEA8%A8FFFD04A9FD39FF52A8FD0BFFA852A8FD2AFFAEFFAE83FFA8AEA8FD3EFF%7DA8FD0BFFA852FD2BFFA8FFAEAECBAE83FD04FF83A8FFA9A9A3CBFD34FF%52A8FD0BFFA87DFD2FFFC3A1CFFFFFFFCF83A8CFFFA9FFA3FD34FF7DA8FD%0BFFA852A8FD2DFFC3C3C3CAFFA8FF83FFA8AEA9A9A3A9FD34FF52FD0CFF%A87DFD2EFFCAC3C3FFFFA883FF83A8FD39FF7DA8FD0BFFA852FD32FFAEA8%AEA8CFA8FD39FF52FD0CFF7D7DFD32FFA8AEA8AEFD3BFF7DA8FD0BFFA852%FD33FF8383C3FFCAFFA8FD05FFA9A9A3FD2FFF52A8FD0BFF7D7DFD34FFA1%CAC3FFFF83A8FD04FFA9A9CBA9FD2EFF7DA8FD0BFFA852FD34FFC4BDC4FF%FD04A8FFFFFFA3FFA9A9FFFFA9A9A9FD29FF52A8FD0BFFA852A8A8A8FD31%FFCAFFCBFFA8AEA7FF83FFFFA9A9A9FFFFFFA9FFA9A9FD28FF7DA8FD0BFF%A852FFA8FD37FF7CAEA88383AE7CAEFD04FF7FFFA3FD29FF52FD0CFFA87D%FD3BFFAEFFA883FFA7FF83FFFFFFA9A9FD29FF7DA8FD0BFFA852FD3AFFCA%A183A7AE83A883AE83FD2DFF52FD0CFFA852A8FD38FFCABDCAA1FFFFAEFF%A8A8AEFD2DFF7DA8FD0BFFA852FD39FFCAC39ACAFD04FFA883A8FFFFFF7D%83FFFFA3A9A9FD23FF52A8FD0BFF7D7DFD3AFFCAFFCBFD09FFA8FFAEAEFF%A9FFA9FD23FF7DA8FD0BFFA852FD41FFCBFFFFA87DFF8383A8FF7FFFA3FD%23FF52A8FD0BFFA852A8FD3EFFCAC3C3CAFF83FFA8FFA8FFFFFFA9FD24FF%7DA8FD0BFFA852FD3FFFC3C39BCAAF8383A1FFFFA88383FFA8FFFFCB7FA9%A9FD1DFF52FD0CFFA87DFD40FFC3CAFFFFA8A1C3C4CBAEAEAE83A883FFA9%FFFFA9FD04FFA9FD18FF7DA8FD0BFFA852A8FD44FFC3C3BDFFA8A78383FF%A8AEFF7FA9A9FFFFFD04A9FD17FF52FD0CFF7D7DFD45FFCAC4CAFFFFAEFF%C3AE83FD07FFA3FFA9CBFD17FF7DA8FD0BFFA852FD4AFFCBC3C3A1FFA8A8%A7CA84FFFFA97FA9CBFFFFFFA9FD13FF52A8FD0BFFA87DFD4BFFC3BDCAFF%AECAA175CAA8FFFFFFA8AEFFFFA9CBA9FD12FF7DA8FD0BFFA852FD4BFFC4%CACAFFA8A19AA0A1AEA8A776A0A8A8A884CF7E84FFFFA9A3FD0DFF52A8FD%08FF7D52FFA87DFD50FFCAC4C3A8A8AECAA076A783A8785278A883A877C3%7FFFFFFFA9FD05FFCBFFFF7DA8FD07FFA8275252A852FFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFAFFFFFFF83A7A1C3A8FF7D9A529A8383A1%777777A7AE77774C7DA7A853774D8352FD08FF7D7DA87DA8527D7D7DFD53%A883FD05A876A17CA87D8352527D83587E4B76777D7C7E51777D52FD08FF%A8275252A852FFA8FD37FFA8FD1FFFAFFD07FFA8FFA8A7A8CF7D77777EA8%AE777753A852FD09FFA852FFA87DFD0AFFA8FD0BFFA8FD15FFA8FD0BFFA8%FD21FFA8FD0BFFA8FD0AFF7DA8FD0BFFA852FD0AFFA8A8FD09FFA8A8FD0A%FF7DFD0AFFA8A8FD09FFA8A8FD0AFF7DFD0BFF7DFD0AFFA8A8FD09FFA8A8%FD0AFF52A8FD0BFF7D7DFD04FFA8FD05FFA8FD05FFA8FD05FFA8FFA8FD05%FFA8FFFFA8FFFFA8FD07FFA8FD05FFA8FD05FFA8FD05FFA8FFA8FD05FFA8%FD05FFA8FD05FFA8FFA8FD05FFA8FD05FFA8FD05FFA8FD07FFA8FFFF7DA8%FD0BFFA8277D527D7D52527D527D5252527D527D52527D7D527D52527D52%527D527D7D52527D527D52527D7D527D527D7D52527D527D7D52527D527D%52527D7D527D52527D52527D527D7D52527D527D52527D7D527D52527D52%527D527D7D52527D527D52527D7D527D52527D7D527D527D7D52527D27FD%0DFFA8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8FD0BFF%A85252FD12FFA8277DFFFFA827A8FD0FFF7D5252FFA85252A8FD0FFFA827%FFFFA82752A8FD0FFF7D27A8FFA85252FD12FF7D277DFD0AFF7DA8A87DFD%11FF52FF52FFFF7D27FD10FF7DFF7DA8FF5252A8FD0FFFA852A8FFA8FF52%A8FD10FF52FFFFA827A8FD12FFA8FF52FD0AFF52A87D7DFD11FF52A852A8%A827277DFD0FFF52FF52FFFD047DFD10FF52FFFFFF7DA8FD11FF52A8FF7D%7D527DFD11FFA852FD0CFF5252A8FD11FF7D527DA8A8FF52FD10FFA8277D%A8A8527DA8FD05FF7D7DA8FFA8FD06FF7DA8FF7D527DFD11FF52FFA8A852%52A8FD11FF527D7DFD0CFFA8FD13FFA8FFA8FD14FFA8A8FFFFFFA8FD06FF%5227A85252A8FD07FFA8FFA8A8A8FD15FFA8FD13FFA8A8FD42FFA87D527D%5252FD7AFF7D7D52A8527DFD7DFFA87DFDB8FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2010-02-03T11:43:32-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2010-02-03T11:43:32-05:00</xmp:MetadataDate>
         <xmp:CreateDate>2010-02-03T11:43:32-05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>248</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9HeedR1DTPJXmDUtNFdR&#xA;sdNvLmyHHl+/igd4/h7/ABqNsVYf+XlzJaeYtS0yHWLrUtGGhaTqjXl7dPeNFdXRuVldZpmk4rLF&#xA;DHLw+wOqgA4qg/J11No3n2SyXVrnVtCvdBbUtPuX1OXV/rYgnQPeSeoEjtWcTAIlv+6YVNRQDFWR&#xA;6V+Y2qatpdnqun+SdcmsNQgjurSb1dFTnDMgkjbi+pKwqrA0IBxVFf4y8xf9SJrn/I7Q/wDvJ4q7&#xA;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&#xA;irsVf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:95B20EB2F7206811B4F2887E189DD78C</stEvt:instanceID>
                  <stEvt:when>2010-02-03T11:43:32-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>xmp.did:95B20EB2F7206811B4F2887E189DD78C</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:95B20EB2F7206811B4F2887E189DD78C</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:95B20EB2F7206811B4F2887E189DD78C</xmpMM:DocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -491.799 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 491.799 li
507.077 491.799 li
507.077 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
47.8975 450.781 mo
47.8975 11.0313 li
501.397 11.0313 li
501.397 450.781 li
47.8975 450.781 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
2 lw
47.8975 450.781 mo
501.397 450.781 li
47.8975 450.781 mo
47.8975 11.0313 li
501.397 11.0313 li
501.397 450.781 li
47.8975 450.781 li
cp
@
1 lw
47.8975 450.781 mo
47.8975 11.0313 li
@
47.8975 450.781 mo
501.397 450.781 li
@
501.397 437.531 mo
501.397 450.781 li
490.147 444.281 mo
490.147 450.781 li
478.647 444.281 mo
478.647 450.781 li
467.397 444.281 mo
467.397 450.781 li
456.147 437.531 mo
456.147 450.781 li
444.647 444.281 mo
444.647 450.781 li
433.397 444.281 mo
433.397 450.781 li
421.897 444.281 mo
421.897 450.781 li
410.647 437.531 mo
410.647 450.781 li
399.397 444.281 mo
399.397 450.781 li
387.897 444.281 mo
387.897 450.781 li
376.647 444.281 mo
376.647 450.781 li
365.397 437.531 mo
365.397 450.781 li
353.897 444.281 mo
353.897 450.781 li
342.647 444.281 mo
342.647 450.781 li
331.397 444.281 mo
331.397 450.781 li
319.897 437.531 mo
319.897 450.781 li
308.647 444.281 mo
308.647 450.781 li
297.397 444.281 mo
297.397 450.781 li
285.897 444.281 mo
285.897 450.781 li
274.647 437.531 mo
274.647 450.781 li
263.397 444.281 mo
263.397 450.781 li
251.897 444.281 mo
251.897 450.781 li
240.647 444.281 mo
240.647 450.781 li
229.147 437.531 mo
229.147 450.781 li
217.897 444.281 mo
217.897 450.781 li
206.647 444.281 mo
206.647 450.781 li
195.147 444.281 mo
195.147 450.781 li
183.897 437.531 mo
183.897 450.781 li
172.647 444.281 mo
172.647 450.781 li
161.147 444.281 mo
161.147 450.781 li
149.897 444.281 mo
149.897 450.781 li
138.647 437.531 mo
138.647 450.781 li
127.147 444.281 mo
127.147 450.781 li
115.897 444.281 mo
115.897 450.781 li
104.647 444.281 mo
104.647 450.781 li
93.1475 437.531 mo
93.1475 450.781 li
81.8975 444.281 mo
81.8975 450.781 li
70.3975 444.281 mo
70.3975 450.781 li
59.1475 444.281 mo
59.1475 450.781 li
47.8975 437.531 mo
47.8975 450.781 li
@
47.8975 450.781 mo
47.8975 11.0313 li
@
54.6475 443.781 mo
47.8975 443.781 li
61.3975 429.781 mo
47.8975 429.781 li
61.3975 11.0313 mo
47.8975 11.0313 li
54.6475 24.7813 mo
47.8975 24.7813 li
54.6475 38.7813 mo
47.8975 38.7813 li
54.6475 52.7813 mo
47.8975 52.7813 li
54.6475 66.7813 mo
47.8975 66.7813 li
61.3975 80.7813 mo
47.8975 80.7813 li
54.6475 94.7813 mo
47.8975 94.7813 li
54.6475 108.781 mo
47.8975 108.781 li
54.6475 122.531 mo
47.8975 122.531 li
54.6475 136.531 mo
47.8975 136.531 li
61.3975 150.531 mo
47.8975 150.531 li
54.6475 164.531 mo
47.8975 164.531 li
54.6475 178.531 mo
47.8975 178.531 li
54.6475 192.531 mo
47.8975 192.531 li
54.6475 206.531 mo
47.8975 206.531 li
61.3975 220.281 mo
47.8975 220.281 li
54.6475 234.281 mo
47.8975 234.281 li
54.6475 248.281 mo
47.8975 248.281 li
54.6475 262.281 mo
47.8975 262.281 li
54.6475 276.281 mo
47.8975 276.281 li
61.3975 290.281 mo
47.8975 290.281 li
54.6475 304.281 mo
47.8975 304.281 li
54.6475 318.031 mo
47.8975 318.031 li
54.6475 332.031 mo
47.8975 332.031 li
54.6475 346.031 mo
47.8975 346.031 li
61.3975 360.031 mo
47.8975 360.031 li
54.6475 374.031 mo
47.8975 374.031 li
54.6475 388.031 mo
47.8975 388.031 li
54.6475 402.031 mo
47.8975 402.031 li
54.6475 415.781 mo
47.8975 415.781 li
61.3975 429.781 mo
47.8975 429.781 li
@
[9.24 2.76 ] 4.62 dsh
53.1475 128.531 mo
65.1475 128.531 li
55.4395 135.584 li
59.1475 124.172 li
62.8555 135.584 li
53.1475 128.531 li
cp
75.8975 103.531 mo
87.8975 103.531 li
78.1895 110.584 li
81.8975 99.1719 li
85.6055 110.584 li
75.8975 103.531 li
cp
98.6475 121.281 mo
110.647 121.281 li
100.939 128.334 li
104.647 116.922 li
108.355 128.334 li
98.6475 121.281 li
cp
121.147 155.281 mo
133.147 155.281 li
123.439 162.334 li
127.147 150.922 li
130.855 162.334 li
121.147 155.281 li
cp
143.897 197.781 mo
155.897 197.781 li
146.189 204.834 li
149.897 193.422 li
153.605 204.834 li
143.897 197.781 li
cp
166.647 226.781 mo
178.647 226.781 li
168.939 233.835 li
172.647 222.422 li
176.355 233.835 li
166.647 226.781 li
cp
189.147 269.031 mo
201.147 269.031 li
191.439 276.085 li
195.147 264.672 li
198.855 276.085 li
189.147 269.031 li
cp
211.897 300.031 mo
223.897 300.031 li
214.189 307.085 li
217.897 295.672 li
221.605 307.085 li
211.897 300.031 li
cp
234.647 329.281 mo
246.647 329.281 li
236.939 336.335 li
240.647 324.922 li
244.355 336.335 li
234.647 329.281 li
cp
257.397 349.531 mo
269.397 349.531 li
259.689 356.585 li
263.397 345.172 li
267.105 356.585 li
257.397 349.531 li
cp
279.897 373.781 mo
291.897 373.781 li
282.189 380.835 li
285.897 369.422 li
289.605 380.835 li
279.897 373.781 li
cp
302.647 391.531 mo
314.647 391.531 li
304.939 398.585 li
308.647 387.172 li
312.355 398.585 li
302.647 391.531 li
cp
325.397 398.531 mo
337.397 398.531 li
327.689 405.585 li
331.397 394.172 li
335.105 405.585 li
325.397 398.531 li
cp
347.897 410.531 mo
359.897 410.531 li
350.189 417.585 li
353.897 406.172 li
357.605 417.585 li
347.897 410.531 li
cp
370.647 415.531 mo
382.647 415.531 li
372.939 422.585 li
376.647 411.172 li
380.355 422.585 li
370.647 415.531 li
cp
393.397 419.281 mo
405.397 419.281 li
395.689 426.335 li
399.397 414.922 li
403.105 426.335 li
393.397 419.281 li
cp
415.897 423.781 mo
427.897 423.781 li
418.189 430.835 li
421.897 419.422 li
425.605 430.835 li
415.897 423.781 li
cp
438.647 425.031 mo
450.647 425.031 li
440.939 432.085 li
444.647 420.672 li
448.355 432.085 li
438.647 425.031 li
cp
461.397 427.281 mo
473.397 427.281 li
463.689 434.335 li
467.397 422.922 li
471.105 434.335 li
461.397 427.281 li
cp
484.147 427.781 mo
496.147 427.781 li
486.439 434.835 li
490.147 423.422 li
493.855 434.835 li
484.147 427.781 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
[] 0 dsh
358.147 406.531 mo
361.147 406.531 li
359.647 406.281 mo
359.647 406.531 li
358.147 397.781 mo
361.147 397.781 li
359.647 397.781 mo
346.897 404.031 mo
349.647 404.031 li
348.397 403.281 mo
348.397 404.031 li
346.897 394.281 mo
349.647 394.281 li
348.397 394.781 mo
348.397 394.281 li
335.647 388.281 mo
338.397 388.281 li
336.897 387.281 mo
336.897 388.281 li
335.647 377.781 mo
338.397 377.781 li
336.897 378.781 mo
336.897 377.781 li
324.147 397.281 mo
327.147 397.281 li
325.647 395.781 mo
325.647 397.281 li
324.147 385.781 mo
327.147 385.781 li
325.647 387.281 mo
325.647 385.781 li
312.897 378.781 mo
315.647 378.781 li
314.397 376.781 mo
314.397 378.781 li
312.897 366.281 mo
315.647 366.281 li
314.397 368.281 mo
314.397 366.281 li
301.647 373.781 mo
304.397 373.781 li
302.897 371.281 mo
302.897 373.781 li
301.647 360.281 mo
304.397 360.281 li
302.897 362.531 mo
302.897 360.281 li
290.147 372.781 mo
293.147 372.781 li
291.647 369.781 mo
291.647 372.781 li
290.147 358.281 mo
293.147 358.281 li
291.647 361.281 mo
291.647 358.281 li
278.897 364.031 mo
281.647 364.031 li
280.397 360.531 mo
280.397 364.031 li
278.897 348.281 mo
281.647 348.281 li
280.397 351.781 mo
280.397 348.281 li
267.397 338.031 mo
270.397 338.031 li
268.897 334.031 mo
268.897 338.031 li
267.397 321.531 mo
270.397 321.531 li
268.897 325.531 mo
268.897 321.531 li
256.147 349.531 mo
259.147 349.531 li
257.647 345.031 mo
257.647 349.531 li
256.147 332.031 mo
259.147 332.031 li
257.647 336.531 mo
257.647 332.031 li
244.897 326.281 mo
247.647 326.281 li
246.147 321.281 mo
246.147 326.281 li
244.897 307.531 mo
247.647 307.531 li
246.147 312.531 mo
246.147 307.531 li
233.397 323.031 mo
236.397 323.031 li
234.897 317.531 mo
234.897 323.031 li
233.397 303.531 mo
236.397 303.531 li
234.897 309.031 mo
234.897 303.531 li
222.147 319.781 mo
224.897 319.781 li
223.647 313.531 mo
223.647 319.781 li
222.147 299.031 mo
224.897 299.031 li
223.647 305.031 mo
223.647 299.031 li
210.897 280.531 mo
213.647 280.531 li
212.147 273.781 mo
212.147 280.531 li
210.897 258.531 mo
213.647 258.531 li
212.147 265.281 mo
212.147 258.531 li
199.397 258.281 mo
202.397 258.281 li
200.897 251.281 mo
200.897 258.281 li
199.397 235.781 mo
202.397 235.781 li
200.897 242.781 mo
200.897 235.781 li
188.147 257.031 mo
190.897 257.031 li
189.647 249.281 mo
189.647 257.031 li
188.147 233.281 mo
190.897 233.281 li
189.647 240.781 mo
189.647 233.281 li
176.897 234.781 mo
179.647 234.781 li
178.147 226.781 mo
178.147 234.781 li
176.897 210.031 mo
179.647 210.031 li
178.147 218.281 mo
178.147 210.031 li
165.397 224.781 mo
168.397 224.781 li
166.897 216.281 mo
166.897 224.781 li
165.397 199.031 mo
168.397 199.031 li
166.897 207.781 mo
166.897 199.031 li
154.147 208.281 mo
156.897 208.281 li
155.647 199.031 mo
155.647 208.281 li
154.147 181.531 mo
156.897 181.531 li
155.647 190.531 mo
155.647 181.531 li
142.897 196.531 mo
145.647 196.531 li
144.147 187.031 mo
144.147 196.531 li
142.897 169.031 mo
145.647 169.031 li
144.147 178.531 mo
144.147 169.031 li
131.397 163.531 mo
134.397 163.531 li
132.897 153.531 mo
132.897 163.531 li
131.397 134.781 mo
134.397 134.781 li
132.897 144.781 mo
132.897 134.781 li
120.147 147.031 mo
122.897 147.031 li
121.647 136.531 mo
121.647 147.031 li
120.147 117.281 mo
122.897 117.281 li
121.647 127.781 mo
121.647 117.281 li
108.897 116.781 mo
111.647 116.781 li
110.147 105.781 mo
110.147 116.781 li
108.897 86.0313 mo
111.647 86.0313 li
110.147 97.0313 mo
110.147 86.0313 li
97.3975 100.531 mo
100.397 100.531 li
98.8975 89.2813 mo
98.8975 100.531 li
97.3975 69.2813 mo
100.397 69.2813 li
98.8975 80.7813 mo
98.8975 69.2813 li
86.1475 127.031 mo
88.8975 127.031 li
87.6475 115.281 mo
87.6475 127.031 li
86.1475 95.0313 mo
88.8975 95.0313 li
87.6475 106.781 mo
87.6475 95.0313 li
74.6475 87.0313 mo
77.6475 87.0313 li
76.1475 74.7813 mo
76.1475 87.0313 li
74.6475 54.2813 mo
77.6475 54.2813 li
76.1475 66.2813 mo
76.1475 54.2813 li
63.3975 66.5313 mo
66.3975 66.5313 li
64.8975 54.2813 mo
64.8975 66.5313 li
63.3975 33.0313 mo
66.3975 33.0313 li
64.8975 45.5313 mo
64.8975 33.0313 li
52.1475 93.2813 mo
54.8975 93.2813 li
53.3975 80.7813 mo
53.3975 93.2813 li
52.1475 59.5313 mo
54.8975 59.5313 li
53.3975 72.0313 mo
53.3975 59.5313 li
.878019 .337896 1 .281529 cmyk
@
57.9272 76.541 mo
57.9272 74.0571 55.9116 72.041 53.4272 72.041 cv
50.9434 72.041 48.9272 74.0571 48.9272 76.541 cv
48.9272 79.0254 50.9434 81.041 53.4272 81.041 cv
55.9116 81.041 57.9272 79.0254 57.9272 76.541 cv
69.4473 49.7813 mo
69.4473 47.2974 67.4316 45.2813 64.9473 45.2813 cv
62.4634 45.2813 60.4473 47.2974 60.4473 49.7813 cv
60.4473 52.2651 62.4634 54.2813 64.9473 54.2813 cv
67.4316 54.2813 69.4473 52.2651 69.4473 49.7813 cv
80.6074 70.541 mo
80.6074 68.0571 78.5913 66.041 76.1074 66.041 cv
73.6235 66.041 71.6074 68.0571 71.6074 70.541 cv
71.6074 73.0254 73.6235 75.041 76.1074 75.041 cv
78.5913 75.041 80.6074 73.0254 80.6074 70.541 cv
92.1274 110.981 mo
92.1274 108.497 90.1113 106.481 87.6274 106.481 cv
85.1436 106.481 83.1274 108.497 83.1274 110.981 cv
83.1274 113.465 85.1436 115.481 87.6274 115.481 cv
90.1113 115.481 92.1274 113.465 92.1274 110.981 cv
103.407 85.061 mo
103.407 82.5771 101.392 80.561 98.9072 80.561 cv
96.4233 80.561 94.4072 82.5771 94.4072 85.061 cv
94.4072 87.5454 96.4233 89.561 98.9072 89.561 cv
101.392 89.561 103.407 87.5454 103.407 85.061 cv
114.688 101.501 mo
114.688 99.0171 112.671 97.001 110.188 97.001 cv
107.704 97.001 105.688 99.0171 105.688 101.501 cv
105.688 103.985 107.704 106.001 110.188 106.001 cv
112.671 106.001 114.688 103.985 114.688 101.501 cv
126.208 131.981 mo
126.208 129.497 124.191 127.481 121.708 127.481 cv
119.224 127.481 117.208 129.497 117.208 131.981 cv
117.208 134.465 119.224 136.481 121.708 136.481 cv
124.191 136.481 126.208 134.465 126.208 131.981 cv
137.368 149.261 mo
137.368 146.777 135.352 144.761 132.868 144.761 cv
130.383 144.761 128.368 146.777 128.368 149.261 cv
128.368 151.745 130.383 153.761 132.868 153.761 cv
135.352 153.761 137.368 151.745 137.368 149.261 cv
148.647 182.741 mo
148.647 180.257 146.631 178.241 144.147 178.241 cv
141.664 178.241 139.647 180.257 139.647 182.741 cv
139.647 185.225 141.664 187.241 144.147 187.241 cv
146.631 187.241 148.647 185.225 148.647 182.741 cv
160.167 194.741 mo
160.167 192.257 158.151 190.241 155.667 190.241 cv
153.184 190.241 151.167 192.257 151.167 194.741 cv
151.167 197.225 153.184 199.241 155.667 199.241 cv
158.151 199.241 160.167 197.225 160.167 194.741 cv
171.447 212.021 mo
171.447 209.537 169.432 207.521 166.947 207.521 cv
164.463 207.521 162.447 209.537 162.447 212.021 cv
162.447 214.505 164.463 216.521 166.947 216.521 cv
169.432 216.521 171.447 214.505 171.447 212.021 cv
182.607 222.581 mo
182.607 220.097 180.591 218.081 178.107 218.081 cv
175.624 218.081 173.607 220.097 173.607 222.581 cv
173.607 225.065 175.624 227.081 178.107 227.081 cv
180.591 227.081 182.607 225.065 182.607 222.581 cv
194.127 245.021 mo
194.127 242.537 192.111 240.521 189.627 240.521 cv
187.144 240.521 185.127 242.537 185.127 245.021 cv
185.127 247.505 187.144 249.521 189.627 249.521 cv
192.111 249.521 194.127 247.505 194.127 245.021 cv
205.407 247.062 mo
205.407 244.577 203.392 242.562 200.907 242.562 cv
198.423 242.562 196.407 244.577 196.407 247.062 cv
196.407 249.545 198.423 251.562 200.907 251.562 cv
203.392 251.562 205.407 249.545 205.407 247.062 cv
216.688 269.501 mo
216.688 267.018 214.671 265.001 212.188 265.001 cv
209.704 265.001 207.688 267.018 207.688 269.501 cv
207.688 271.985 209.704 274.001 212.188 274.001 cv
214.671 274.001 216.688 271.985 216.688 269.501 cv
228.087 309.341 mo
228.087 306.857 226.071 304.841 223.587 304.841 cv
221.104 304.841 219.087 306.857 219.087 309.341 cv
219.087 311.825 221.104 313.841 223.587 313.841 cv
226.071 313.841 228.087 311.825 228.087 309.341 cv
239.368 313.301 mo
239.368 310.817 237.352 308.801 234.868 308.801 cv
232.383 308.801 230.368 310.817 230.368 313.301 cv
230.368 315.785 232.383 317.801 234.868 317.801 cv
237.352 317.801 239.368 315.785 239.368 313.301 cv
250.647 316.781 mo
250.647 314.297 248.631 312.281 246.147 312.281 cv
243.664 312.281 241.647 314.297 241.647 316.781 cv
241.647 319.266 243.664 321.281 246.147 321.281 cv
248.631 321.281 250.647 319.266 250.647 316.781 cv
262.167 340.781 mo
262.167 338.297 260.151 336.281 257.667 336.281 cv
255.184 336.281 253.167 338.297 253.167 340.781 cv
253.167 343.266 255.184 345.281 257.667 345.281 cv
260.151 345.281 262.167 343.266 262.167 340.781 cv
273.447 329.741 mo
273.447 327.257 271.432 325.241 268.947 325.241 cv
266.463 325.241 264.447 327.257 264.447 329.741 cv
264.447 332.226 266.463 334.241 268.947 334.241 cv
271.432 334.241 273.447 332.226 273.447 329.741 cv
284.848 356.262 mo
284.848 353.777 282.831 351.762 280.348 351.762 cv
277.863 351.762 275.848 353.777 275.848 356.262 cv
275.848 358.745 277.863 360.762 280.348 360.762 cv
282.831 360.762 284.848 358.745 284.848 356.262 cv
296.128 365.501 mo
296.128 363.018 294.111 361.001 291.628 361.001 cv
289.144 361.001 287.128 363.018 287.128 365.501 cv
287.128 367.985 289.144 370.001 291.628 370.001 cv
294.111 370.001 296.128 367.985 296.128 365.501 cv
307.407 367.062 mo
307.407 364.577 305.392 362.562 302.907 362.562 cv
300.424 362.562 298.407 364.577 298.407 367.062 cv
298.407 369.545 300.424 371.562 302.907 371.562 cv
305.392 371.562 307.407 369.545 307.407 367.062 cv
318.928 372.581 mo
318.928 370.098 316.911 368.081 314.428 368.081 cv
311.943 368.081 309.928 370.098 309.928 372.581 cv
309.928 375.065 311.943 377.081 314.428 377.081 cv
316.911 377.081 318.928 375.065 318.928 372.581 cv
330.207 391.541 mo
330.207 389.058 328.191 387.041 325.707 387.041 cv
323.224 387.041 321.207 389.058 321.207 391.541 cv
321.207 394.025 323.224 396.041 325.707 396.041 cv
328.191 396.041 330.207 394.025 330.207 391.541 cv
341.367 383.021 mo
341.367 380.537 339.352 378.521 336.867 378.521 cv
334.384 378.521 332.367 380.537 332.367 383.021 cv
332.367 385.505 334.384 387.521 336.867 387.521 cv
339.352 387.521 341.367 385.505 341.367 383.021 cv
352.888 398.981 mo
352.888 396.497 350.871 394.481 348.388 394.481 cv
345.903 394.481 343.888 396.497 343.888 398.981 cv
343.888 401.465 345.903 403.481 348.388 403.481 cv
350.871 403.481 352.888 401.465 352.888 398.981 cv
364.167 401.981 mo
364.167 399.497 362.151 397.481 359.667 397.481 cv
357.184 397.481 355.167 399.497 355.167 401.981 cv
355.167 404.465 357.184 406.481 359.667 406.481 cv
362.151 406.481 364.167 404.465 364.167 401.981 cv
375.447 413.981 mo
375.447 411.497 373.432 409.481 370.947 409.481 cv
368.464 409.481 366.447 411.497 366.447 413.981 cv
366.447 416.465 368.464 418.481 370.947 418.481 cv
373.432 418.481 375.447 416.465 375.447 413.981 cv
386.848 415.781 mo
386.848 413.297 384.831 411.281 382.348 411.281 cv
379.863 411.281 377.848 413.297 377.848 415.781 cv
377.848 418.266 379.863 420.281 382.348 420.281 cv
384.831 420.281 386.848 418.266 386.848 415.781 cv
398.128 422.262 mo
398.128 419.777 396.111 417.762 393.628 417.762 cv
391.144 417.762 389.128 419.777 389.128 422.262 cv
389.128 424.745 391.144 426.762 393.628 426.762 cv
396.111 426.762 398.128 424.745 398.128 422.262 cv
409.407 419.021 mo
409.407 416.537 407.392 414.521 404.907 414.521 cv
402.424 414.521 400.407 416.537 400.407 419.021 cv
400.407 421.505 402.424 423.521 404.907 423.521 cv
407.392 423.521 409.407 421.505 409.407 419.021 cv
420.928 423.222 mo
420.928 420.737 418.911 418.722 416.428 418.722 cv
413.943 418.722 411.928 420.737 411.928 423.222 cv
411.928 425.705 413.943 427.722 416.428 427.722 cv
418.911 427.722 420.928 425.705 420.928 423.222 cv
432.088 423.222 mo
432.088 420.737 430.071 418.722 427.588 418.722 cv
425.104 418.722 423.088 420.737 423.088 423.222 cv
423.088 425.705 425.104 427.722 427.588 427.722 cv
430.071 427.722 432.088 425.705 432.088 423.222 cv
443.367 426.341 mo
443.367 423.857 441.352 421.841 438.867 421.841 cv
436.384 421.841 434.367 423.857 434.367 426.341 cv
434.367 428.825 436.384 430.841 438.867 430.841 cv
441.352 430.841 443.367 428.825 443.367 426.341 cv
454.888 429.581 mo
454.888 427.098 452.871 425.081 450.388 425.081 cv
447.903 425.081 445.888 427.098 445.888 429.581 cv
445.888 432.065 447.903 434.081 450.388 434.081 cv
452.871 434.081 454.888 432.065 454.888 429.581 cv
466.167 429.222 mo
466.167 426.737 464.151 424.722 461.667 424.722 cv
459.184 424.722 457.167 426.737 457.167 429.222 cv
457.167 431.705 459.184 433.722 461.667 433.722 cv
464.151 433.722 466.167 431.705 466.167 429.222 cv
477.688 429.821 mo
477.688 427.337 475.672 425.321 473.188 425.321 cv
470.703 425.321 468.688 427.337 468.688 429.821 cv
468.688 432.306 470.703 434.321 473.188 434.321 cv
475.672 434.321 477.688 432.306 477.688 429.821 cv
488.848 429.821 mo
488.848 427.337 486.831 425.321 484.348 425.321 cv
481.863 425.321 479.848 427.337 479.848 429.821 cv
479.848 432.306 481.863 434.321 484.348 434.321 cv
486.831 434.321 488.848 432.306 488.848 429.821 cv
500.128 429.821 mo
500.128 427.337 498.111 425.321 495.628 425.321 cv
493.144 425.321 491.128 427.337 491.128 429.821 cv
491.128 432.306 493.144 434.321 495.628 434.321 cv
498.111 434.321 500.128 432.306 500.128 429.821 cv
@
80.3975 100.781 mo
83.3975 100.781 li
81.8975 100.781 mo
80.3975 92.2813 mo
83.3975 92.2813 li
81.8975 92.2813 mo
57.6475 70.5313 mo
60.6475 70.5313 li
59.1475 70.5313 mo
57.6475 61.7813 mo
60.6475 61.7813 li
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
@
59.1475 61.5313 mo
54.6475 61.5313 li
54.6475 70.5313 li
63.6475 70.5313 li
63.6475 61.5313 li
59.1475 61.5313 li
cp
81.8975 92.0313 mo
77.3975 92.0313 li
77.3975 101.031 li
86.3975 101.031 li
86.3975 92.0313 li
81.8975 92.0313 li
cp
104.647 118.031 mo
100.147 118.031 li
100.147 127.031 li
109.147 127.031 li
109.147 118.031 li
104.647 118.031 li
cp
127.147 148.531 mo
122.647 148.531 li
122.647 157.531 li
131.647 157.531 li
131.647 148.531 li
127.147 148.531 li
cp
149.897 169.531 mo
145.397 169.531 li
145.397 178.531 li
154.397 178.531 li
154.397 169.531 li
149.897 169.531 li
cp
172.647 209.031 mo
168.147 209.031 li
168.147 218.031 li
177.147 218.031 li
177.147 209.031 li
172.647 209.031 li
cp
195.147 224.281 mo
190.647 224.281 li
190.647 233.281 li
199.647 233.281 li
199.647 224.281 li
195.147 224.281 li
cp
217.897 248.531 mo
213.397 248.531 li
213.397 257.531 li
222.397 257.531 li
222.397 248.531 li
217.897 248.531 li
cp
240.647 284.031 mo
236.147 284.031 li
236.147 293.031 li
245.147 293.031 li
245.147 284.031 li
240.647 284.031 li
cp
263.397 305.781 mo
258.897 305.781 li
258.897 314.781 li
267.897 314.781 li
267.897 305.781 li
263.397 305.781 li
cp
285.897 323.281 mo
281.397 323.281 li
281.397 332.281 li
290.397 332.281 li
290.397 323.281 li
285.897 323.281 li
cp
308.647 348.281 mo
304.147 348.281 li
304.147 357.281 li
313.147 357.281 li
313.147 348.281 li
308.647 348.281 li
cp
331.397 356.281 mo
326.897 356.281 li
326.897 365.281 li
335.897 365.281 li
335.897 356.281 li
331.397 356.281 li
cp
353.897 379.281 mo
349.397 379.281 li
349.397 388.281 li
358.397 388.281 li
358.397 379.281 li
353.897 379.281 li
cp
376.647 393.781 mo
372.147 393.781 li
372.147 402.781 li
381.147 402.781 li
381.147 393.781 li
376.647 393.781 li
cp
399.397 400.281 mo
394.897 400.281 li
394.897 409.281 li
403.897 409.281 li
403.897 400.281 li
399.397 400.281 li
cp
421.897 413.531 mo
417.397 413.531 li
417.397 422.531 li
426.397 422.531 li
426.397 413.531 li
421.897 413.531 li
cp
444.647 419.031 mo
440.147 419.031 li
440.147 428.031 li
449.147 428.031 li
449.147 419.031 li
444.647 419.031 li
cp
467.397 425.031 mo
462.897 425.031 li
462.897 434.031 li
471.897 434.031 li
471.897 425.031 li
467.397 425.031 li
cp
490.147 425.031 mo
485.647 425.031 li
485.647 434.031 li
494.647 434.031 li
494.647 425.031 li
490.147 425.031 li
cp
@
47.8975 429.781 mo
501.397 429.781 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 37 /percent putdup 45 /hyphen putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 56 /eight putdup 68 /D putdup 97 /a putdup 116 /t putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/space <1C60D8A8C9B854D00D> |-/percent <1C60D8A8C9B59F85E959DC9E62959B5B049387399C5A88EDF2D5DFBD776DAFCB889B62AC98B872299D239B948311090C1C069798A7F20A8D7BE29B8C384DB55F663943C1B42044C054991C856F3C3AA085C2B4902C8215DC2701EFD5FA664B5C9C44640813B5AC440B37B70CE58EFC65A9AFC0BCC84F3CDC68795E4995966F74639212F5372957A607AD4B6B94BBB7C36A3A6EF325381FE12C0468B5DD1F216D01C174551A50AC78A5328CDA24DAC0484DFF3993D32A7CA064F169906996AA1E2F6A555998F55A1AFCE2776BEE589EC3162F968A180A5713C4537EF11B8529CE22F8373BC7632472323D1F8491B48E948870255C9E830736EE70F30EE309DFBBB8294CCC2BB5ECB81667BEB60155> |-/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MCEPJI+Helvetica /Helvetica findfont ct_VMDictPut/MCEPJI+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 11{/.notdef}rp /D 28{/.notdef}rp /a 18{/.notdef}rp /t 139{/.notdef}rp]MCEPJI+Helvetica nfMCEPJI+Helvetica*1 [21 0 0 -21 0 0 ]msf41.6396 470.781 mo(0)sh123.64 470.781 mo(0.4)sh214.89 470.781 mo(0.8)sh305.14 470.781 mo(1.2)[11.6797 5.83398 0 ]xsh396.39 470.781 mo(1.6)[11.6797 5.83398 0 ]xsh30.8975 436.781 mo(0)sh15.8975 297.281 mo(0.1)sh13.8896 157.531 mo(0.2)sh495.397 470.781 mo(2)sh30.8975 436.781 mo(0)sh15.8975 297.281 mo(0.1)sh13.8896 157.531 mo(0.2)sh13.1475 18.0313 mo(0.3)shMCEPJI+Helvetica*1 [18 0 0 -18 0 0 ]msf325.647 51.2813 mo(Data 0 - 5%)sh[9.24 2.76 ] 4.62 dsh
299.897 38.6719 mo
303.605 50.0845 li
293.897 43.0313 li
305.897 43.0313 li
296.189 50.0845 li
299.897 38.6719 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginMCEPJI+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B64EDFF4E8F029E491459914546F05F980240E216037EFFB56810F73C7B1AD75758AC950CDF0AE7CA5E10B4B98E91DD14CBA33340505432C4EBD036ED5D8912D20451B0A88BD5908DF5F74741DA09743ACC2D69ECC46C5DD005482FE9F42B63F3612F31E021BB829EB7CDDF491856FAD0A1D6B2854CE32CAE2827DAD35AA4DEB8EA2DDAB1E824241122D8E6929DF014B94E2393EF8A13B> |-/M <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-/W <1C60D8A8C9B5D6EF2BD09738A41AA6380C9765B88F07D3637E9EE67A95A81C558683DE1DD822B8DCC23EEF2BFD04340812EB686C4A78A7861A98B16FC19A> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05FD148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D520CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2741F9BB15B> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/v <1C60D8A8C9B7A73DDF32B99894CC6FA66F5D07EC695DA6C164CB40F9A791729569775D3BE9C3> |-systemdict /gcheck known {setglobal} if end {end} ifendMCEPJI+Helvetica /Encoding getdup 66 /B putdup 77 /M putdup 87 /W putdup 100 /d putdup 101 /e putdup 108 /l putdup 111 /o putdup 115 /s putdup 118 /v putpop%ADOEndSubsetFont
/MCEPJI+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 9{/.notdef}rp /B /.notdef /D 8{/.notdef}rp /M 9{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 6{/.notdef}rp /l 2{/.notdef}rp /o 3{/.notdef}rp /s /t /.notdef /v 137{/.notdef}rp]MCEPJI+Helvetica nfMCEPJI+Helvetica*1 [18 0 0 -18 0 0 ]msf325.647 82.0313 mo(Blast Wave Model)sh[] 0 dsh
304.367 76.2612 mo
304.367 73.7773 302.352 71.7612 299.867 71.7612 cv
297.384 71.7612 295.367 73.7773 295.367 76.2612 cv
295.367 78.7451 297.384 80.7612 299.867 80.7612 cv
302.352 80.7612 304.367 78.7451 304.367 76.2612 cv
.878019 .337896 1 .281529 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginMCEPJI+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7D8BE0123FD0A136BA0F480FD4287FFCF97986718886432AF2C7EB6A3F35B> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/H <1C60D8A8C9B6079F4F4E07EFC7C894BAD912B65087B319FD4C6D4407FA6BDEE59584D043C3070AE38B> |-/I <1C60D8A8C9B854D0EE4B20327A907C36187261> |-/J <1C60D8A8C9B7A73DB6FA483A9791C1A03FDD99DE37EC702CFAA41FFB6235ABBC533B771F9FC9FF7FE3EF943DDF6A0978C6221B723344AE5D5FF65442A5B18CBDAF7665324680F19176D0D766874FD5E0E907> |-/N <1C60D8A8C9B6079F42CB3557771D803C706A630DA03929B931F488C01B37E85FE694B3E25EF7F6332F> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-systemdict /gcheck known {setglobal} if end {end} ifendMCEPJI+Helvetica /Encoding getdup 70 /F putdup 71 /G putdup 72 /H putdup 73 /I putdup 74 /J putdup 78 /N putdup 105 /i putdup 114 /r putpop%ADOEndSubsetFont
/MCEPJI+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 9{/.notdef}rp /B /.notdef /D /.notdef /F /G /H /I /J 2{/.notdef}rp /M /N 8{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r /s /t /.notdef /v 137{/.notdef}rp]MCEPJI+Helvetica nfMCEPJI+Helvetica*1 [18 0 0 -18 0 0 ]msf325.647 113.273 mo(HIJING Filtered)sh299.897 102.781 mo
295.397 102.781 li
295.397 111.781 li
304.397 111.781 li
304.397 102.781 li
299.897 102.781 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 68 /Deltagreek putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/Deltagreek <1C60D8A8C9B7D7E8D30894797D5AAF286B71BDFF6614E4B5AD120122FA30F5DFD5F63E0C3E5314> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MCEPJJ+Symbol /Symbol findfont ct_VMDictPut/MCEPJJ+Symbol*1 [68{/.notdef}rp /Deltagreek 187{/.notdef}rp]MCEPJJ+Symbol nfMCEPJJ+Symbol*1 [21 0 0 -21 0 0 ]msf262.813 481.698 mo(D)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginMCEPJI+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-systemdict /gcheck known {setglobal} if end {end} ifendMCEPJI+Helvetica /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 121 /y putpop%ADOEndSubsetFont
/MCEPJI+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 9{/.notdef}rp /B /.notdef /D /.notdef /F /G /H /I /J 2{/.notdef}rp /M /N 8{/.notdef}rp /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r /s /t /.notdef /v 2{/.notdef}rp /y 134{/.notdef}rp]MCEPJI+Helvetica nfMCEPJI+Helvetica*1 [21 0 0 -21 0 0 ]msf275.662 481.698 mo(y)shMCEPJI+Helvetica*1 [0 -21 -21 0 0 0 ]msf18.4805 237.698 mo(B\()[-14.0068 0 ]yshMCEPJJ+Symbol*1 [0 -21 -21 0 0 0 ]msf18.4805 216.698 mo(D)shMCEPJI+Helvetica*1 [0 -21 -21 0 0 0 ]msf18.4805 203.85 mo(y\))[-10.5 0 ]ysh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MCEPJI+Helvetica*1 uf/MCEPJI+Helvetica uf/Helvetica uf/MCEPJJ+Symbol*1 uf/MCEPJJ+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Gary Westfall) ()%%Title: (fig24.eps)%%CreationDate: 2/5/10 1:07 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&B6u,?%Oh8S!WE0H+e^\ZLCh=!#*P($KJ_++6O>UPm(M$HE.@b#g!c?Yg!;\QAj)&1[Ns&%/BO4FFr+bkBm2Q((M<\XS5IF#%7q9hh2!%D!Oq+t53kXVkRNeG)4;*EiTh%!AKp/3P,b7=\&g8_s7o?\BXL"@7dq,)BFh#Db3#g3=7E/L.e!`>$>CH.>j_Sttna(1,%@GL.,'NNf=FGYlU\aa%^EnG*"7t,+2c_N]C.nV["oD*XPF\PLb(\'/%39Jj25A;^?1_lbC7lp3@=:N=,S(4=ZnYem5,lAY\_IPh_%&:K@6pe6.NR!-KM/ltPrEnuW[HG"b5aY3S&_(D"02i%_X+YR.\YEY$l32o_0:.8jgSk,^lW@7a273W?9+\g@@R+(YMch3'O-/Vl9%B@@Bp5R]lH:KmZ%!N+5Y"<DJ/dh20;JXam(XX,?:8AZ6=-cC5&"DTiD8uJ16ar+!qSB5<#4Hhj^qeO:OSO#Ee),?O)`IMp#53rj;%1&S=3r"!6@*K*c/GpQ8S=(@8?S.:,ER&2^>H9LS7A'>7Q5!*ZTKbbd2ngc0Yd,OrX&kU_l]RmS)S1,$PlC;&D&'$=+B^)_T3B)AR%4^j5#YuiJD-PF^8,SE^<UIZ@lk^Nqf81,j!,_7\hU/!b4QB9ST/&;5T!1J]J`4_0loTgTmLXV2IAFce<&%cj0-R6nNH,8kRV%isY%idX9KCAW%n9n`coW@M;uE%!2Xh&ltE#"T<'XW]ANK&E@XPsVhlOAJVDX^s$C9ZL"/X5#qb_Oi+[+,0]g;0Ye\i&.'[f4%VT2&_2C%BG@%-U[U)Y,u7YZC6MhX"I)M(i*.B+V%O(_Pt8-\#W&$+1?gW[8Y\MKSPDPOF;dcf-[:>C`?LNr(85?F#Z$=H.)W@[P[tL7W6MX;%S7P8468>1#cpKLMVbg<>*^tAY?D/(?$!s;>Zq5'_Gm5jP=""/&JlcWpa9b`\g'"VK%9`n<!/^3%5_^&j/$p8PiE'\+i$@)'pn8D/%$XTM8bJJ1,rrD/6a+TA(9CPPgP*QdH$13C(JfQ6Uqa`8(rh't4%pf8Lks<a4nr32X]L+,]T@h&7/#4f)%pn36[#XcC]FrBG(O1X3%cou\#]h"rPn<Mo:N1p^\jeD[/I7EEF>_c41D^&OZb6di,3MDAh-'6+F+sk/l-j-Rb,njGe[7RF@;eR8c67F,9cp#;[;AWZ5%(+==%(+!0)4+qYX"-IIuL.,5WV%"h#P!W\F*#E(V'##%E#hKAh_De,mlk-L>KQ\ai@OKMoII`p+&^&5:,goB_SFD7u@.>>$?[9#B3Y&VY%>31kmnk#-q,2K!KbOPnGAJl+N]%kIQQfWYrMF:3+D4)=eXWkG&?36JCUhL29_)p&%[."lgO=0T\q1C+)roA:okA\K%j;7W_r$@Qf%]DPG';CV0"PnJ)7KKk27:ZQ`j="'1!niQYg\4\.=Mu6?Lb%:-LIOBW0oLJO6oGtT-IO3mjDr_qH0+oeTibXI/Z#$_1/A\Ob]p)4.%-Y1[pQk]@LImp!i&bsYITP*1%4@`1\Ymc1PC,.5g#+qP(.Rc(k8.q2E6Z%@jZD7nS#<9Th-)ps[TmHJmGc-G[(Q9<L=t>I0i0Qi'%TF=$u>DA`7iL,@'Ve2/Z1;oh5$&Pr#PnGO>ikRFM$YARu&dtRD_@d#TAW"lE$q#r0d)=YR/(/n;8YdJl'KLp+a0g"%Sc^6s"6cJ;%d6`[d#%aKG,RN7%Q2m3Z+)mDb+]%&]`Y)9lQV[a*V4n)[Z%-#/g43]`:8e/;J4%6YonaZEr<^6T47kBN'61)Kc'2.(VMloi/W!>6%?2;7f,D>6Id^2]Ia>3sm%.?GuK$j,sdD.*&a3(o&MNh!2=V3kk1JpINC9rFL_FS]"_+U)X:mQ&*s!Le*hM@8b-Tsb?/<1?J7cKE[%o86SSKP//8'#kZcN?qCGC%2n$P\U@Calak1@1'J%.I^T:8*k@B)^7.m*q:!E&NPNu+@3lCNXP<tos#`70E*!83iZI4PR*erF:dd]%2=OE&&^(4sJd[#2gnY@PSGX_#+E^,UaEg,hQ`N/=6s=Q5dUGEQ.4/WJ48Fr,J8.?]8Ipq\,OcR6&UtDY&C%F;63Rd<rr?@P.;1&3%/]0>46mE@*"eMD+V*m]\5E]Q?6MWI$`$g`lk^>a#"SaI;7!'=1o.n-Kj;3lhLb+7s(g@qH@f7Rs87Pokdmse+*V<-D2rUg9EC;B'%b*b5QL`@0j,`WK<F&B[]TM<lDk!0?a+@R]o\7;IkMRc5;D\:YGF@geP,lS8l=Y(jq.J/X(PE>JQ;.CJImTlPc#ouTNMaGk2=cc0;%oU`"J74FC>_`o@$Ce@9Q8i)[!.&i@F^s/$K:eHm!gS3O:^Pi&Oom'6l#T:OC<3N]9^g%XsDOQF?G*e&M``_^,/=)(>@!JRWZC[#A%`Apns6c^5L]o6MeSM%]B7aULA<[eUjG:Jn0U"M:Me;B*md!J/!'mSL9[e2Yf:_[X[$!!c3j!B\N`A3+iQ%\r?9.GZHo-gKc2'TeK%>4)\p)L_j]P7eu?n/M!\l!%C[R`cuO_JDJR#GQ'l1_W$3n3RR0rGa(`\7S%jNL3h/oI[&EO:#5+nV^/.EPE3P(l>WZ\g\i&MKVG:%"gE.^M#oRD/ZG8TEJkCB1pS01-;nhWOt*\!MN#b&opDX37*mM.g[Xs)LKIqu(j3>V69ALem,JnEjsq4O%`Dr07lDA41FA9c1?&Kg%_a6L5=rS:sQHk`AX!0)'7i8Q=M7*Q7%`tG)#8*=s9%9$@R#W]\8:nNDAdlHqO3;qqg1q$(Qm9R`Z<1Wkr4$Q/&8;aCf=7!=@$RHM%01t7Z.cVZ",0hL/XNL4a$n6t:&\F/Oet7IA+c\;)?6cc[P#'RpR'377c:WP:Z:+r5G!L3iqN!3dW$0<i+L_ZV8"^Sg<"<M-Tr_p9%PEq$UMlcZl=UrH1BZ\:_rISgKnKn&4!Zo]$PVh9ld=u23'J%7J2mcf6#?2@r]`Rh'SA?EkgR1o::Rm2.%=ht```Nk#8snG07)hZC%7#*1%%f.-RXb_+c_Ccu0'e<rf7jK;2!N9kR?An'lrXi=uH>I;m8?$`]/4'Y(Z7O_L8<WME'O)Mt"?3So"lDT'.-=6/W=&u%$*D/*%-Z]haLE:EE@r$N+.^,?KdfLQ[Fo@=LNtRJ0Or[c5l@^oipd]R`bCO!Ki@4KtU1,3P^96]Qq!;ri+p(_ukQoC<dAfpFP5ccr+Jkl0%YjQ"3((mZl,4haL=g/Le`4M0q$aJOIfG16De6o*ko'?R%'q)8D0hZ=n<2V-H`bFEk$/EL#(njBP61D"u/-u3P_PHBMO\X>:A94GI%"<bYB,\j$]2'PFM`Gc]'`f3E/qCmmd1/7*o@V&3b"<!%GA6[tQ,MKat1Pth9bcRi#W*tLq6q.9kPM-@mV0/jKTcP(CU2>M)lIek-%83rW$OGk?#@[WH3A(%)"N0%_3E(rL-6MH+]&OL3QGD(92Z!C4)O5NDhVPLIBNWgW9P("emS@E\rR?*N<Pf9mnpb$TPn3Ykji_L4`%''KtOWI"l:8r7P@BL*"2`ci-W8R]75`I\VSrI2rsXhFi4)&h0<%&'!6M<?"UVp_A(CK,psa,n<%8UcLUm\6M[;VE<U1-fHI.#fID%0ObAU$^6_X9T*jX)8raY>"c*O#hM?='T(UsmXid%-l"k186W.90\6Y`,`:HW*:Ju&?Y_eGi@r7_Sg:S.7;WnkXa:@6^;M.3+eMBV%mDPb$$6pi;$u+*%OlL1EhF4J8i)*IH19/g4N5XB^Q'TH%`\!/689>krN$c4]N$'ZMGQnhkM"GslDbN[EauMar6&Ig-MT#/,GEaE6%$u%q\+kUIJjG6W_,1,o!7]&i4q$?UC_2G.G`Y$;oZrZN6(=s<N+VKeXXj)E!X2YE6"mf)/HPt9UqLV:1^-s&4-ahtl()M'M,PQCZ%O:^bE7*44:>.9qA@"`bMjohqf)'mM,(nj/cl:QH#2>r(T-pS_:jtPn.OM,2;aN3tJd_[,5bShK%,DNT.RH8-n),jqD!EYEjoU3oW%1%7=ol>UQ)nhH8%Q/[7G19b*,4@Vd?U5;4@P0curY[dnF%!c/V,V?+Q:)oZMO:`W4@O0eQklFhVm=`Q3ig3Brjd>0gn#!UK2IYu=%(WkkjV3uQRbn0\@mDaXK?/RkH6nJU]3/Tnd;Gf/L+\1cB*uK8S+K6V%M4Q$/$\C-1$VI+:jE&6Ha[?c9nASou:+($\L;5&H;&)m3%DT,X8TjH[]"'%d_"9*t!$pM\+K%H2%Ue0cu8t;:V!lVV>418(%FU:Yn<_)4*-,M%kUc>[J;rLlqW!o9<QutPA76]_Bn%r_J^SP"o%9,9D(FrNZrH'b78lI`cea]>QnW+4h-**iE,GgLcEjHAe@b0Nn2*Mt\^qmc=`J2J.=>=q48Z>pB#keHi%fONJioH:2M.nc8W+[.]b%D>p$QlG7qYj:;ij'0LSAN";-B,"T(;6<lI"0eSg42-D51@:`.OJ"l[4PM!S\'bOK]-k]`!I3Bn+H-K$?Qr%7/O^^?qQB9.[&Gm"_%rPY1XncDgmJdO>(EENUNW%l6E`+BW`Gt?F_S?YLtBj-POMmUiqaBrD[8^XNIW-a6g.)j8l3!fP@I4jQAU.@^=""IbsZl&aM,or-k%?4DaFC1E@B$>j#SM+NOS*m,);QBI3:<[#J@jRq_g0P@r>dk:"!,+jb!$#Go3Lc_p-r+nL]P@r<Vr1q.\=*)EO,FT,BY%C=E0q@sX%S26]Ap\EBI*,P$M1Yj4pUF1sR_kY92@Ya7Za5^41h!1u,>khnk*-\s_X]WdZI["TS8<F[B(2e8LHtP>$NOaPU/\):hhnm/j,&e%D%FG)YPPuCZDUoHc`IRqTi'kN+tR4/@/#gZ&p)(@XGPatBWB7uKa.Cp]l=)q/.GU8XB[ebE4%sJV:*#J#cIYS_4NZUV=(0h+<#):m5%nX*O8k:I`70HYsFNCdp>D3#9qGeAYA60j7eZhY\lfH2Z^9>8s<?k6h9clf"i9kVX%f*aCrnEj]?=puD!:\4*k0c<_fEZsuO%lXqn%<na/dCZWM/);jh$#h3h9_<4C*d92IfMccX+IM]6gY.+WlZ9.r1)Wq%`N*?tn&P:TYdi+tg;Q\f#L,sOLN;a0,2)gpTa'<O3Ij:KA%`oH"t>/$B53aA$qS\YTK-G5V]1Q[`5(QfEo-MS#X11DsB.XiNpnMg8fnmcn=f+8'Q@[b7,VY$k.[n)RG=8WJ*MFWOl2u\QJ3PrHQ%C9Sg%#]k6NnBAHd+LnW:ERo"Z3/Kou"Vk;QAuc(J&P&3cLhKr]R3@_jQA@%)em+<o09kIB+VhR2Kl0JU>6R-oh7'2u,:W/]"S5/*%FeP]KMd]^bRrlTEe_rgNH&`SSFmso(6^isI7sM8,p07H012a4[BH5<pgaLrlTmD`S1>^n,^\iC[X<q2lH%R0$S\J9$Q)C/jm,lSQ%^SG_qM@J'R@JT)j>_$XbI<[&gOR<du3$7o1p[Dh@fu?XmB8aC/&O,b7/GsAfdi4jN"_HYgPL2'n3qp7$NR=(\GW>)a6+?ce(s9X-%>QAJIXp(O%?Q=0FL(TD%b&Z,QGDEk<(stO`gT\S:Ib%eIOM2SVLeH*b#^e*B^7B6AQIA-tj'e`i@!"HoF>DX?UC.#,<2<IO&iX.*%S.Re/$jebTs2.S.S21eQT^Wd-&u"8kH7b0k[XB;Weksc2Y$oAq*1it?lJiV*<8hJjq8K^"F*O)?XN_p^^cq2#o="UM<2S:3&Uog+%2-.U@(MXEB?;j,U\A`Mandng@?c@6Tg*Nm\j!SkinnWOI(H7r1'k!kFciA2P\+mKkkk_eHD=LC!]*,Z&7!!.WKm4l\Q@H4A['^l5%$Y-",((s=3<=P#eAdtrkJSj;WZbWa["6[R<2O;.Y+%ah5TCK*]rdP#?*ESWb:'lR(0aS#jQl(;J5DKE-2TC7gr\$Vl[a=)p/Y6B@%%tW#I#nqTmM-sad1gE^bGuFQ<#>NkhF,`E*es_sl")]5=gdQgNQ&\Q*Cbgcf,%kE4RWB>.Ekp[t%1-D^e@niR"bYquET7C?ncU^Q%Q@I9Ri!<[aOhlad3&?@0e(N6=:3iDhS(<76"ruUAE.X=_=FbGKUAoXsR++G_?iH]OQfu<tqWVp2b^&T'qk0Hbo]s[`0)'ta&>H't%*DSFWo[(2Sm2Po0[2L\_bRoVLiWS<V)1E_.?<X9/_JYco,d`--h&tFE6(#-[1M"d7G#,f*m!@`a!7H2J2R1uC.@f5cnfPnU3`WlR%W#$^76u8?K7h(#JG0X8AEIhufOJ^)D1<KU@s!R`'!,6m=!%uVJAp"^3od_SB7kt2(L=kR)nUL'&6p)NM42VluYm3R6U2f"\[J6o2%"'JlbO6uHE%F+r'8iacmUcP.g9fos2eBrBh)9l2TB:hl;-:N]J)'l7+QlJjG,_bJB.Xo^O`e8qZ%dC+m(AMjds59Jib'@Ek7Q_<A%Ul:.j35HZC>8DJpUh#]fd;cd%c;CXd.>]Gq,<;5;YDVM?SNhp^@Fr%,reIgOL!4/P*`4c>ZE2P8>1Fj?jLoLpZA]j7J!Njjo.4,5%i>A!*;YLJ?;-?J<E)a_XCJF],(,B7_Zan`ET!rLrNN=H6p42"GS.:[pNYE6g/Gd_HbW%F>@$6gNcufJi<`6gDcaV!9;e3jdj(`@d%TO!'MGYqZ&Va=,VP-l/_d/gteXKoW/$OJ.f'j=&H6:d$/L57Du0c01k4;Q]@`:44'+F:UOooud12%:!)E;,no'?s#%@_G-nL$)ps%bl6Vs3K3E\4m5PgPlbVkd=KH74I5*e?cXZ]da;qU,J(d\PLCB[k=D%Liq^V$Z'F!ATI9YX?+WDYX/f84>Q:+MVs&+36/mZ:jSUX]%HKX/iYm:&];Omi/b'?`<o#7NrZMZKpf]bDf0#%="nV^>"paD("eWL,!rdA3ODCUVNJWb`Pg]+,*5rKHjK/$jmZ[`+`k)<D_:P-,o%]@oV7YL,8^L4fZ.5bd\JgSZU9Vs`H)'=929Cpe`uqUU\b>P@@^9`mQMQgLIV7K:OD%F+4?(<bCl^T5KU4ZU_;=tmR>[>]j-?#feo%`s&4!Iu'?h(ImY`p\4^WD#@W]#)i#Uo7+A)Nhtu:17_$o?CXks#959Dg$)tNjF:5;a/NU*8g\8QG5XSj/dHQg,o$:G[RrS=aJ)[a%m'Q!&J%ISt@7V/nq8\e1q/82]EX%Mld@MqP78W#j96*L^SQ;lEq&c"&Z.a!;<d]\?B3Y>dVggNprO5@cE6D8u=[TgLOku4\6SWIl%8%KCg"$4=G.11HH4q%b(L%%`J2V,ld-EY6Xo2BEee-9e+o9k+\RLmO<][cCA1bfeAB!n.#+iO%5C>([dbrOXk(f",lQ5ir$%:a\s%#lG[&#%Mn\`Lt6M`N9Rg&*4N*d33O(Lp/L^4s\ShnRI0:5'h3+iLA&9Tg]SX3IjRHU8b(ZXr&'-[\eP^((I7fVnetNN:1fCp&8rc%De;Ym@p7!KktI+k3JUNQNLDHg;A,9/rSXFpl54N8ShQ!X.UuhqC_;8*73Ul;Y7,_'j_-.n9):ID6pbVl<Cfh%f-[=EYYbCpT<Qa<%!o9;qZ76,S.b,ZQ#E+@6#mY:SQ)n+R43R;O>oo*E`_9JfHRm#W)p/GaP#nHHD.\piRrXG:Z=]GWn>Y!q1bn@$4@t7SGT;nfBdu%#%-7d7kQK(f.5f>G%$%pl?%N_VVj^h/!Vp;q:6''&bgI0;u[XjW=J5h/eCi*b"q4%s)iC(Tqm,YHRE]Ffa'&\:,duq@[Osf9%o<Q<s%OEBW2d12E>He.L7\><31JYq'<:Octn`7)]05?4ZQLd=>^[;EbB0S>/hc?dA_B;8^Id2jnfXgr^S;MNd3$bauZ0d#])VF^Y<@Ce6<%'hV)5\d_/TRZupGTc"A.]4HO7($m),1mmh5&]DS['V5o$Y]Mo<YTaFpXa+SfZeSp-[*AK3;$\$_m4i6lr87om!6MogV[i!tj_u[A%In4`=er$1F%>n9Hi#.\A7g!9]mEI2>nVSW7Mk\ihBt*kk$$1)P`%nKR7[$/'fI/;M#TI=i9#=&3V4'pl(<:'lWi<F(=JFM==U!>6%8h6ml;t9-2Xqi!4c3j'kA/+d8b><CFkBjP7fjLF*6=>N;Y\hoi//BD)0juqZMM`nGm'W#VbX9$D+^pj*Y@QONl9aS8c)"M[2(_>L%B8n)*?%/Ign[)UUiF:dRl=+1\\MFPKX1b(G+#A<o(S!&^*,i]51f"\u@j2_fN%jo4Z:5d.UC'GAqurinatT4g),Ed*Fe.nac4Z2N%'&GsmU&)'o@PUNU<1;2Kc)J_]3[:=0hPXdTqncU;U.oj_")H(p3oTte;[t9%9K+e>=DH5tNB%T:AN>t=M\MV@4+Bp,'US&X(M53e%AX:6=[%#*TG$)QR.#Ti_>?T3+]Vn^#81"[;eKqe<(9=mrWi3Yk)KUCJA!9cs5\:_?&>n0"b4SuECMp(COb#GK0/KIkiO2.;ofF5E%m@`!`g]S;h1ah!KekJ_!UC*thm04/.eVU@`;]RuiG>([=>[V!gFBkKN1A,]_7PLi[5(JKq?;3Mi'EToCRSLi;O6gA[Q*SiT8>jX/%l?Ndq6I'5HN?%B;&h2.N:ZM8ZrpFq.'sV^E@;8V`#C>eB.KaSL:^iAT9"Vk]U;D]iSat>Z7>RtkqMVsT;oN]>jqo6U-#-4a?Zq8@%iX'"lcK7b4.8WNB/n]%a/U=/Ij&HqR?9$C^?<j;c,n=)c%qFe3a)CtDo@_6"lQpKf4h_@@npG"(aRlC59@ajIS.pa\d,HJD==km1%1\o'`mQ,N_WP+p/kP8+*ad+1'.5r9**E(C]oMb#[W2':TB?6Fc#3LjAi[PRa\FZUU(G?Q8>Sd1d]37B;iu5nq=ft[1KhhJ[W+t-8%_NugYmS*2ZZ7Ps%'On8^!&L%n(5QDBJNoJ\>d:-Xd<"8ZI.HWCQ[7.m>8Pph1>PSeh7^KX&&lnZ0iDSnbXXiY@R'FO7;1[6"l(WZ%;sEuqDTj[*qs/E*l?tcB$fh0[-.=@QQGl/\Pub0Mqmb.LCVT]3q8kFDK1K;_5Pq'/o]c.[FO@d@'nWEW,Gl&8S.Z`H>2>I]Sc80S%46968c;P_$^.u"n4*p6Hg]Y@iq;TL@>NAi!gsbBDi3^sINSr:4?gcGK">`c+>=j9goUQkK??Q]dp\@CBpV3o!>3#AokkF480*cIK%q!$6tSsaas-N:@;dr9?uIPskH_i%iciB%j_J!?WQLn2uUiX)kAH,:l"UJs0./;@B-J*H8T:GBR!`l\(1[%LQCkDL/0_rl%_*FGIg%\Tgaek*!^:Va((.IEP%4LE@@LDX'\#asDFjcm<UekJZ0jplm:f]SW:(RSV`X7=Q:`Qbolk1$eDFnpi"e%mD]^>f>Tug'8EKr7R]P%ZbiX,F8:\-0*]SV"B_H;\Nlnd6MY]5EZe7@n"0o*T$O^?h4L04gliAe#i9DA/mpu!$C;A++#3l(kNj5sEA@Aqgf5bN@9/`)`Ha$)%ReZ,$&#C@tW>E;F/[nn27tjA.nLe*k^H=9\`Bq8fCCG^a^E8lX_d/'U+2/":?PD8Ine^\C.`>Y\>IO1qr)Fa9,f6ImM7_(LHTi?&%0__,3hKNTf^/X-:ElHhbHrk.+gV"fD&K+;R+8,VR*kLs85IGr3K5ufJ.t@E"4CB3_Q`KeVBfN0OK@gbh]LrCX5U5I#\9,7(Y?c?:%nsqos;=&WnMFAZbSRkGb3d^sX@@$oBp6D)Qb)R2uJk42_@'RRR6>]Tjl*=>u^+O+N0j4PSoUGOGY!NP^I<^`rO$9n'&2cN^X8=`o%HB.1FiZN5*.f4!)<gH]A!1G^j0TC)h,W(Pde`7Q)mEf)(&'BgkC$5#X8\RZc[=(lTNh9:T%k?[KTUj["P4XRB.QZA/_faRl1e]N-%.b'n34_et.7Cc#HfgCCh*2+RAf_)i:/F0CH5!EONn^iR]=8<=egiC#'X#`DP>`'m:M;[b7<]D86q@p_99B#?MYOJmb:($%Gdu8Ph%]Gr(+=+1Ik]H!<p7+gO-nr:3K%8Ka-O5iRD?Q0Pnkq2R'WX2)\Cd>@8q<=_*Wc3XLlJj&1k5/dET]!RXmF^?bH$"6Gl>jqhrPRAL%oeR(iYssp)!ea!k5.dVrKop"3A@!$)UX8D3pV)rV-YP,0-u58dYKEHChe.53d6'j\lrb\4LchiFp,r$85J:1kON-].`XDERr5LS-%08m]r2"R9a<f8,#jSK6tJ_G*pIU.@VNR^BiIYnLX4beEQjS;R5R.Q\bI"n-Do@r7]RCm8T;O>S94E]bRPgN.55[DcCL4$RKSu'i4%QQ5k(PumrSpC"J8_P/U7&h745qF.[K&,P?]f1@!V[YTIL+i*4k.X-?&55g^:&Y\]a@$/N_6:s3SbG:p;Tcd[AEB3<M"DS365TGN1%BE0TZR2@+ZjXi=1DZVWJ.Z=OGCKVpFX@6=9$G8[oE*M2E't#]][ol\onJo6T0hPJUoUaCAaMmM:Jd$h"Y9u7QPYXd2/Ae.L./g=)%Zm.E`+CU,:.O)21TgJ:YSB*&m4%MC-/!1W!3IlCG#(sA:kn;bQnk"K_4B6e5Z%.9X&.B5WG]hQ$Xcc+aSQY^g@*rI"Be/>!a::Y.%Ts-.JZ"tiB/20o[R'tPDNdsn,Tr(:684dm[E[mjbO!&kmiUJ,dQF^-(mf4O\N]<^k<.k8YeR/A*KbU<Y+oMJg2eBCn]O7&?OJ^,T%-?Zt+LCD(LE@Wc^>p;*AEt"+?_!OkOMP"j?TGaQ%-gtg!cc8.1>ts#M$28s$rE_lP@AK;?ROe7mpA;Fh@9pSYR`-\XSOn[EIIIMF%/u;GEq=(Xr*.E@ubFR&L0q$/uk!XT"2g/huAr$C(]/.ME;`ch'cr**l4X[+6rPJFacZ(FQM`T'HSTrT%_<V$-FER7\:c>9A`A.,9%dVZ_gag[B943gW82&8FM*ATS'pa[<]AnThqi</NfE^HD\j\F_W>Y"uA6&"2e(Y\g#k:9VFgBoL.b>h_XN*q@QVf!6PS'm*XXss.S%kqP9c&bBfJ^e5)9$dQW@p[8O;Ke+N\XiFdmEDC>[-=A:ika^:E9a%LmP0b=.NO[1^htM1;HRPk5Lp%/6nE:o"p<h&p!Lp>LT4Cdu%Dg<,NOV[npl?hcqO>oN3]^<RArlnNSF+5aG3D<^ZkbJ]\PeID=qcr,1<4_ir[UcficN4q2Yb.=aP>C5m"*=?aKu>!k:*Q2`+\#31%iFad*n4<_T;A^eXDqOp,8&Yl0s#Qk/D5f:2F(fgSAKe#"6(\5%b5@p':A[gs2eoQS"",CA68VAiBoMY4<4i0'GOEdq,Pai2>4>K5%HlQVH-t_H17p\]@`PK/:K*_JQ&psX'KUNiHA%s_/p*3)'hMXr-,Qj(CB42K7F3+q<@Abm:ad@Zt\lALHM#s.u^P='_8bVbnGK?)J%.l8_#mdqbn,V*gJIS1tK[EHEm4^X7pS!+eBcrJQ>gtafY^t0>D4T@eQ*m]kGjCm)H;mgma>Zoj&]EY\r.Q+a1NS39V7$>gdr89;q%\UH`_#YqAjdr4aDMGu67]MQDXSJS;[fW%3aJ]EI;eH^#b9`"B2-p;g2rJ$%8p;P1*4F_<QAUWE#%&p:?jPL*O;`$SlZg=%121Uu^%o@`j#2#hsd5L']8N?ObgdQ^jZ(#!pbJ5HcA/pZ>5Og0%cEKtU@UbmO#_!I';8:ikA1EaVEXN#0X%Q^&>?3MK+HBB^;lP525@03/1%_)GmhP^eT0Lc2nn"kYmQR^pDb)l5((X"c5iTi8*52"nW-qNAC(dTt:\B3.%J;Kn96Lr/=85^rPi<@V#[a^c*U\T/i+#U%O$kHfDf%q`a-F5#pq-_DlX5,G:#F2EMmrK(7tXohk_bFMB!Yql]j8iR9$r=9D._OOd,G\Ig4;(GP%EbO+fb:i4*XNW"T[G@A4gooZ)8I(l12%e8mPtRES.D>l"!"rIo'O;c#G:Dn4o+hO0`YI>?>0F,JTO!rD+h5(!9R>e6:2h[8nOQOn6$X7r%Z#="-dMnAPB/<&dFY;B8#KQ7h\%?+e^8?u4WY,"Oe.)g]H#*fc:"m+:39Zd_A?.Z@:rJ^UC8lbUT#2"n1#d<CY59V`1oHUj'H%al2_7.1q'^G!u5:2eK\o<6#Dron+,%PVC]c(\_3lAW9,"?QoC[$E>/<\>Y=p8lbp8c*')nHi;FZAVMRVf>s`q0Pm^kp$">.<A*]`\5,>$Dsq:lSp\YLcKVI.a=6lJ*T8t]%k,*Vh/-fdj1t%>&RVB^nO32"t4+VE:U4ug7U;I/'9<JN<O?$+L</NWRVfRi6#cecSlOB9,^\=[jo=kXu:]Nq<&::&4%Q@\odHQ8p%)P:)f`#8GVc'HAW\829USbRKo.eO_;Zf:K4.#nElG0<R#(Ge2lJpm`o]:F*,l0DZCAo9EdX8H[?Y-bhFb-IU$+&&k'-g-oY8,&n1%97M`?YMA\N_p@rcJ+A-PrQcfH)r19$a4.sMR7m>@]1b=2lMNsl-+U?M<)5d-,GtCS,h)M?D#>dUmM9J*-E9D*[X-"1R?'O9bkLS,%7q_GtP7EWjr?@3h-i`gXd:0GYV1KV]M%:-fR:i[p:X/\g*1'pN;N?!M\?Cu.eH^8%9$BCTP\aoY4n7]uPq&50IU>m?;Fa0<U+@r?%9Rhhnj6&E%e9b:H@-8/hX&A/q)pDr4IRX\)*5+H[%bPJm=F-*alRrpNU#)E7fh]TdPAti_I=@*Uk$gr+<,Yj7lK;VR$FJK,epHJ,%7'bJC/PL&'nTB,f4$_9HkS5YF;qclr>g/1$[>/_#pV8"dO6TFR,Of14nQg.@Y,a[7pphsKApd->@+/f?m!E/XkCkM]cD0t"&c<G!%%[%BZ,pjCSo^Xf6,4X'R<6;[2A7D>J,R3"KH<j'L:Kc"4pDKLEGL-pT,qf'$Y/8=74+Q<?:XnRtVW.O<1U;lf5Kk]bLa"eTI$Dt>%k(h*a.%3Hc;`Cf9,..]h-?>0P1(t1)h1;;nf<O7#R*\Vent8&l*O)qc\J(SZbe]BBLKPuuZ>n-`5%rN8):S3@@mQX"8f<3L+R=mL%B<M211m:*C]53I+Q.V:L0bSj_peEEg+F]\5<90R_6ULH?Prh](?HQ@4^LH0;$k0]M&Yr#T5K4(dJp$$:]6q:kE!OWK+,+\iItV)6%@3IE-M[N,6$M;;c-J6N4;G38uM!M(-.ZDF>DiFiPbEubmDO9*Wp-`W2$P4!4!AeV5YUXVuM_u2i5H?A/J_T(bBISpA'%P/#"_0PF%G7G6-aHLW6CcQWFeJ]CAeb^8.PYZXij(%/Ys!2,Z8B1eA7N/lY_OZ[jR+N+NcXm.DM'"JA1MBfAGE%@9eIf[BL@d/]g_0&<I!3_[%Pr?,f=MoC=_%?SthNZLHGXCr`(9_FT3?i;H9fhn$H(3`cgk:H<RB0fCMM9]dEB&MkA7D')^@]TBWj5aDdW^fG>R$gXo]'J%b%6S\%W6P'C-0F"O"C%"]PKu=\>$J.s<.!J'9F4h[^>?8taOZhXVnEhcCK9iI<sgHm8.3=;BH6HY0:cu'Hb7,"q*#G^`p075/\_VYoO:"7%+)m4Xk;e.\OmFsS#injtoR0Xa(+c!;cKa>G8HhHd?k=YAie=8).9D=b]%t<Rj2Y(JH![Qf#B/E#n?<Dnft6H\l09aF+>"@EX!)hK%D&nu7V]Uu@lqH:3WCYsVK=(RB#gKon3HIEF5HC#flQs=8^)WB?/u(u(%h!GAKds7Zf3a^P?`U0DNCju49)X"o+<+Fr%hlK\?Q",T%^0`eAFp)NDoTQ)>7%GUeZ%_+8e;sQ@q;agJmi=ZHHk_d(mOX9tnbLRF:_%AT]%tY!-IVJ8$f`B.:jI>7RA,.5(?B-M.<>%5?ErB0%Wr_Rq35N=+E#NtWiJp`X2?a>2Ol#;UK?pLV+$IiTh-W^a9a1&C1;S%)@ZQ3Mlk;-\5?EYl9fGscG:WJ<Og/Q]iA(-No.E2Ks3slg%-dSfS-#i\W),3tLC;Ea"S%0^iMO@I(aZbr:_f-tBBO2F@<8[i9*=l"On5tqa+sYBkSKh6]ARnIL3m?tk'p_Mi:#JB,7FKumRN/iH%e(4-W#C3N3nrK7lVe<p<kKDcq.@adEVtbJqnb2??cnI?Nh%2L1?(T?aSV/q.\Ft6(am$d8+$=O[2#7^,qq(0@''H%AEj1ts(Lk_<%TVD19T7K2t:g3W,^K7Q/1ZTL%OE6\`ebCC<^,%TPg6p>kl!r@.<!\oq#J9YBcC#N#Lu&jOq/3EY0ePY*VL0k6pO:20XpT-@I/PoV%;m]mH#>[mZ@0ljF]\Iraa(<Mo_Yaaq6a_gSema<n22u)qi$1akXub^..C[$@!mL;l<G0'0*t]=un"iZYO-7Tu@=N]s?JJTM':G3-%2JNW?$76r02*kGO;LR'laNX6""RjK8I3Nb-@;BXU4T4@p?i/;ceG02[$p?/aSQln\H9@c@V'!m!8*U"/nrXMq<J\hR5+.0lB*gEo%T:E:/:;-+uKTg0@Nm"4ZO\f1Q:7AQ6;nEm-=#`-K`]NpaZNg:/lQu6t4=EsU#u6CGE/UhY3AYP$DDk4V^aVTb85W,"\/J,Sg[=;?%@1(\HkW.=E.(:U:6HSn:3pR4Lfn@g#a,CmVe^EgQ.60:UY,Rnq+]c:qWFIKZbOE]iBDe]?SjQshmm5b,Cp4)qp;r!m%?2c^$^)]a%48%9OBXUXjeo>nR6ZR#`po(elH)&:E%,4r5]4Wdo*@0U4``h^5(-rL\,CXcT$JIq8RkBK0TpV`dL7M:t1CU0SJJ&OS%68<R87,%L%KgmN<Z7''Fas>H-rM<3026:$@>CY_F2Pj'C;j\%ZCU]V;efRX\)2glk3a,Q.`q5^$<n"\3<f<CR?#d>gaX:Y;2L#VPN%IurC7;`"%n@aZdY"@5'Uu0@P2>RVaAkI(Wl-R]i.Wub1N'Tle]?PZK23t@Y\&I+Kp_[CU3$$\GRuiU(AXmV1RCXFR-cT>"\.u>cXl7loFC1Et%G,j2#OE*6(EO/df7`#6?U5&4i$cCC'r,?ZcabhF%:F\gMXKo66V%jVW3dO(Z[[,^d?o;Xo>Jm_5L1nu$BHg=pM//2qX)740+p3f_%*@QnI)i!!]]"Eei:Dh^p"/Hp-E9kA]^c@**4XV]b2V5hApOJ_o(TkG[aLA$AV#^jsgY#cGcZ3?HGUc>,q7+3_dAn2<T@q@I7rtL?%9tMB"m4`8VY2:-miQM`7U4<n#PH%AT:H4[s!7Bbq6[V-hb;jJ=JJ4a9G)Kda9^.I8B)q!u9M7?6?3Wd$9bD#>Lq6_b7R(-;=47bO%M]T1%n.=dn5Fe2jL.[(0)%=hrqe=.MD,W%NR=3Y<W\X86c8(k3GVDdHe"?Y>i!o#-F+)"-2V/D*62$R2SXaKsi#h#iqR3]=2QA9t%#lj)-1b26NN>2#4DDSt5+bOG>[F@C+!>>!FSBWHL_\ofM6'6J-2WlNf;AtnC9gqj7s&>516T$k!PS_T$e8+70kT0gn)3oN0)J\6p%l=\f/1G@*;LZZstM%qB[NA3?5k(HWjd;[r3Ra<;l)iDIC9`0JEnk9I>-/+Y3D9b3,=KJ30Rh7[=dC7'#OOT\HQa8Re!K+NR7@01?%0KEWJIBnph=f:R+,[^8<^3]jQO?3cA](jL#Q%8EAh>BKe0)hF6T0Ka$<7l]fpR_t^;>:i^Aa_BOl+rq_#sUD/Sj+b6V-^_gWZL#h%[9sk--U!IacgDGKQZkDA\cP["XMaE4%"@V3d9>8ccW+5jYsn<K%\noPhgXaelM'C#&<\51;B0%GQ2T=BkL.n7X!'YYNC)Sm]UB2=%U.<1`bGQ[c:%[_)n*B.G5*jIE*H'TOA7fg_d<d5`fUV#9oun-ZTA1YP7p22Qju&,h+/0"t]o^FPau#bCf.SFOOLgHKiNoBd2a]hK%=^5H'EN>gf<&Bkb9h\m`[NQWNPFkb'0<WCf\[+1-R,;02YL8>6Wg\>GZ*W'7PJ^\ghd<A2/),GZc^;$KC0GYXBNd.S]1;X2$)8Oc%%0Dh;XV[rgGlDgTi,BndJI<qICNu)WJLF`uf]?&mF#H(V]#QYIHn0j25H%!d_+q+cmM$V#H72dMV1)3id+?DWeSUV6N2b1<o,lTQ%GPXi\aj54oi\RBgo^h:DAr+sq:(4<UDAfPhC"DD)(UT[`7p;hJ@gA-T:Cl^L,]FcgOZM8I[./^FFj_i,,E4Qf.$jF0lQSK"]8<<D%^%Xu,WP_H8&'lPS[O)L?o`i;N+oS8fLTcd881VOSa[J;`Jrr+L=pDbAZk<GgqT4SK_9p`n\;QIn=_sGTIG3aH,*t6=e>kn#E21"<%\(KAVd>uYoAo".5R:Qhi`lGOn9-^5arq"e@KTUkFBgmmG,c2rGW%QL%o+<iH>)ge`RPR+&BY<if"4,sPH-GT^Q!\sgDQi7$m6_C5%`MUg="/LdkUW*ssMNM@2VJ^1Nq*D8-eU'HT8<amfmSWbYTo68j=P`0aFgs0['<[tBeRrjP($6>(q@OkCXg.V\opmK%Y%r\I3S,IW%,n!G+']t`od%b;jU/;jm&Z"O_&Z][2CS%Q>Q/fGH&$!C&jQQ(cTg9$t%fl")Nun^G>t:>*I2*V%Ui0S>Ol7)P8?[X6='[G_7&*Y`%Xc9OU;a[?>n(#U5&^hlrFRkUC+@TB<g=kMcd;O5-\k&H.oZRm2@jP@t)^2nhT'"E__P5f9g:?tBoD+m'7J_Dgp),(QqI5c:)Phn;%TRDku+1DbeIAAg2rL]ESeu+Gu@i;j66oq=EO'`lEK=8M#eCWMp<ZgRChTNYgMkViPnkUs56&MoQ$GuI`6e)Ijf"nYd*]3'XlM3"9%8H!=Vk4\;oqmi/C+f&b`(?r<srWnKUJp*CPBkEfDlM;ifO[`)dSuN]CLgTd-%fpB`>s6\(Y4og:Mid';(b(om'WUYNQ6o/K4lq3K%_(LJU4X!?\QC1A\HbGL>e*>U4+:YM)_FN>=%OPu356rjQdct1gGjZ<.B'r"NQ<#(8mc,if)EiSOePn+`Hs=PDDfn<;@ANZ$$]2\Y%l/RD_jkU),)HkP74O]lcqVBQ#rmO4!V"n,>^XRUf2#jT;b#0&ErhXN"<U1o#[heX(]r.e>fRV.N3%DaC*OXIi-Bd^-NAXC?9l(<>%K=Nt,krkU.akMkkgu.F;RA+c+8bo?C@g<gjY5I[.q+e]u`U`Zdipq&^s7D3FW;6D^Q/5FrmiPd\^2EMPeVQTZX'RrQHj].&:#3J1%i_16sXQq>##koV'fXf;Y'$$'8[rTdPC"DlTbWb2!Sec_"8,TS65?2d+<XjEk'+aR.[BCJAkKFn<l9Dtm+8d\(b'q%%^p0AqT1O,:%NYp9;r6Bm=/uATTq,'rC[t4g,5C@BO\rA]Cp%p$"6_1-WQcRiG+N`n5j^)iWjhWN]`3CBV0f]!>37+epI_P,3H!E;kH;Ahcm-?9m%^[l^.BkVoonn4*%`U-r>!mfKJ&C5_u(9W^^P4$fLGK/ZaB3jC!:X?\fr3NRq3(BM&k2,H0o(_?L8`eCNUE?SNOJc889!2=Fgbj0K%Y"i\4TQL2B4u2g^^Uaq.c^T+^TBb?c(1"bW04YI(N09uGmVFdJe26_5T8YdXSXQ,mGP#I#SK4M0HW^[>@<d%Jp*0D%TFBCr4\Vj/%ara#HcK[^3h)UoQB>`M5'\*0EKK)'\U\g1TXHc=dhKKhdT(eL`OTPFh)Bu$16K6Pr.5Hj[dF0a3UsT"Dk,2WlOh9Y2)^DIapni^$%W^</S*r[Ken+++u)64YQTgTf7*%?uHmdg)ZUtt(k6Q)m'FSpBYLD3tQnH$_c>\pGZBrouE7XDlD.79o`F&:*X;%8/oGA%p=D4)NK%:`2ElJi/Q?&d&=__ZEsdO8;DRY(0YJ09.n.L-M=5O)tpHJ3O>\EO4qFH=+GBm3-+E%f'RSab/>(QOScKl>,H]BFAL[.a4_/\>X;\%KC^l72amMiV]scC(RQp$Dl"%Q\\1L<^((E%kEI0<,K,@HJU?KlWZNJIGk+n"37bYoi(.!gmccoK<>.]+#S4G.)dX"#"?sLQ(S^&o%7/I<U//3qu^6l"qEk/J[nU`TmCi=)uFE^"6Y?42+Y"UNl)0`^_$OFYVg?'2"]9QPro&n`SWe,d/c;u(Qkj't5=Y$+)8V!Xd]J(]?%p,WHJ$fS"$I$:eI[aJYGl$\uapuPiHPO#UESA)"+[1C$Z?:qa-KF!E@%n=m;*j4TGeF1/f[3.-@,LUGd.:BF6K3%qPBhSute)Akh%Q3jdn/VK\5a0a'bH7-H\4%g@1eVnAdSQ(Fn^,+rik'VAh_YNn79?dIa;2t-\#,YMu.&\`4(["Bn;X82"*l/L[r;J7rjc;i!!YNsq%@--ZU0ZnK^=+7nil;=;nPutL#i8mZNFC!p4)*I+5"1>6m._US3o!9<!3k_Q\fX1B?gb_SMla-GTN$0E4.'E79B\=m(Z%KDV?eh-%%\U("&Y!JnG7`.d7:o.SKXr]W)gZlq!b#R;JbpC_FM_Vo(kLF73^6=4>Su)B4P"bP+Tsq.TBguAi16Y3KmMEgTej7QTeb5m<(+U+s%oH^^;`P)bF"6;o7.se3K(@C=:SaM.I;3FKf>=U_X#M6=+Yjc&_5?k$9o4p2O[j/YM_JB!G?XNs>O,areeg7*@>b_QFDH-Lq2q><Z%<DNeN_Wjig%_"$Z;:3/7MH['`:J:#e/'X?JrZ.h9qlu_(l"ud)D9a\G?eA!37d1"BOt\&>9o']-)Ng8Na/iVIWE.nq%pG?B?`OjP%r?iP+@\hVe#EAS@QR44m@;r_n"7)Pcar<p<$qfni+CH,6A!][-'#+[3@CpDa*)l1W*BC"JBH&j-Lhd<K(+HmQK@k#U3JK_!@AoFb%?l^nA>.pX%?F?qhr]'+CXZAd,Y=2)M4"@:7:OMJ*frmk/<eW&&):LXh0tkg_^n#O.DO/1l48.JoI6.cs]0<LHaU4NSW2CG48ccUb%X@]\ciY`BgE*LS7G'Kai/_:;KfHJ4KfP<UeG1<R\TEM;+%F_N5Aj/4XdZd)Rb$A0g]L74PZBWWtV<):p%"]B6i8@WED&>G/@5's.%)eM4Q)j7#d`Df7m8HJ`o?j0s*moq:Be@ss;rI%&1T4dSp2pg2LP#V#\aFTVYTTNC[90VpO(apq\_+WKcW%-'&%F"n(\Bok7_]GV"%oKdOkAuWEg@+L'"gk8i#%HbfUAuUR\fhsWEO^3:DddsLB%C8W2mnu6cNFE37,QV@H)X40'Nm+%`]CpUD-j*lZlNi?,OR/gpIb/;&%6eaSkVKm=oDd:/(5ngT4X)Ap5Qs<PE@e=Kh+GX1)\(2L?\_8?!-cfE^./b+>R5&Z>,]=:\e&4MY&K:mt9]@pUWZ^o6nr_JB1i,m`%e8%<N>#X,^JRD+9N0hcEiNBi*dS,:<9jCDRm>5e2-!S55&j`T_Mhs-/\+=jTK!DMN"0Jto%O!ItjJQj[_bPk@HN*,gma<4%a]E8A%hA-H+I\iV&'_BL;N6r"Lg9>/=H[5k`,].M@Sh9:$prRDXGqg)BlD:cI\6CcKOUBZ/'t/pD6h!6PGIA050r+OSJ;*BHQP=Ag1HWO#%*s&-[*IL;ochtqG:,\A;ghYY<H-6*`+rn!8\])Y+:mC!9Ab0gGa(hG;L17ZYK]2.@I%/E.0+D`'W)j6`!i?9^<uP#>]a;G&XDn?=%@5f6_J/M*@%ek^/(SK>id78D?cYqSl%lRRi1d?sV)R1lBIeA^X_"+uoNV53X7S'u9BT&",'!`U1#@PQ053<c#D12LnOe"?JEY',o%]8up2NAR*/N'6StUHN(GVN1=d$YKucY8GQOiR1l#ig,X66&,#KJQkRm)S5:"1(:+[Q4ER4DLsPJKUa1Z2s8Z0`euosI#qP3UiE/P%XDr%!$p&JT-&]#FW`]JKVH%Q;AF]TGSF=,f!VYap]8R6/mGV<!0DW(V$C]g)=Vu0;W<m:3kXU!$iRkF=,q-@P;%1KijB.o4)Gp('%qo?qIqgcsspl+B&@JA]?Zf1ebq-7UVir^CH@KJ?X$WXm$JD"rb:$m96P[aEd34=sB[19^Ah.O"UI>"s]'X2$>!QW?t[PNh)De.bk%6,B-PL9oWNW9UVQLh72JASgtk&2o4I1`Mt:G.oA*75pbH?d+,Eb,nTe)htkDfVnb)Z;4b]FH)RVJ2CMZ")#HeU9ne%,#I"hbWtdS%);Q0+ghnCV#03T!L6RC58L4,Nju>;(4[h`S0Q^$46eU.^V\CeJ6)m#VOI'K90nj]rVWR#9RaI]WjAMF?9K%'s.9k]JHf7qNktQr"%Kr>\l7L+7@gg[`E!;j/Y[4%PX.C3=sfQ)0Z(-,tSSuc*70^MBKc*t9"iW^`!0bcP!I&iKfY_JtHeHAR1;.+X4]rJBK:k5JGnr7aY%TZibog`Ij$*17"A`mn>1<:EPE6YDuV-dFBWk0TN/coKnYae:N:TYmZ1llh/04G+,!;YQ;@k;UYY,8$*pF6Lh(kX`/?mQ#CT8<k'7%3n]*hjj9E.cj=?/m$pEjpShI?)runE,DXQ,K20LlgGt&74G-BB+k\o3:6fq-Q9hFV@+?3ZNAH.J2On+H*dH^=TY1*g1V4q&<h;:l%PK-.=T_U2V`s.\(qQ\"GEr1u*`2C1^++-+0d.k[do1;$kYO=:=@>@KZj"j72o5D^JF\lPm#QbdoNu[BFc,oc7aqe0i0=2<_-CKqK%`>g,">E_JB0O?Y.R5<]tA5?U&!T&RckHIXQ1/:WR^D-lUYb1%UKT2[HFAn%IG,\V$D7cnmlCIXn^ta;nLs9HhD7k+O88ieFXWVq8%YE5AgD"HCdE'S6%B*4\F&S@&Z/hlVh/=^3]!)1'0$i-k=^Y4KOXaG0D3k9D&@Mi%LmIV#5RGC!Ie3Nu?=M;+Y=XS.MgU!bmg"O60%`%dIkTmo4!d]I>M5\.H82+e`6p</-CLs09FHWur.'DD%m$k=nOr;@)q^asP^Y%Me%MA"8#e0A^RIVCK1DO=U@\d)R,4Bo?nkp,d;%GG@:7WC:R\#'kUM#j*bV+J+1XQsY":As"8^S9A?TR)Q6)brB<t1UBXtKnYWeE6R;i"=oM3"2@EVD6),@B6h&o1)gt?To9EHIap2f%<ugQr!$H#nOgo'._G]>TcjoVY27f.;(8KW3WC(AKXbCpmS3:.V/5g.&**\rg@L;&UbI6#siJ<_$D^/9-ZA5e;,C8s>kjoXh\64f>%6Y7aPd^4pkG1g:K7o!65=&!X'Q:ocJ3&cbTC[tq!(@@4;NkDU=MUf5)`fg8)Qu3PFYb)uGk#nY=<TB%:NRF$8lnLnmS\6+'(,qAa%r)e8e#OKHX3\_mOO^VmX:NjW;<fnn,DObjF_(;!KN6"Q'^O]Xi8W%CDMjY0b;+/ECGIh*aS:*T#,;SHSj^RWDNp'>dDW0'tM9)49%=2lV\f\WHJ\P#=[ZNkr"\Yk5lC78W,CqG>`EheGL_4!?ZU$Wh^JL%UYXN,KU6aIMiEO[Uko6-/8!*cOKg0:GC9AE+kP%8pop[YAm%4OhTGbBi'USS7ZnC*,HmkE!"GNWHbP`g'k$7i`PX*RpKaD7"@b>2NEUjn[r)GPC_aC!%+PQgOA/m%,.c,4L>4FZ\cI?=?'@kM:cP%=(dpfiiogV"=Me=#=0q30=40U<=e%P4OL7+U>J)q40gCa3lukKA]/GtXkP6G:)W6(T09Jo5+Kaj@scFTgO4jWSU<CY4&gFMLEl]m%Zl*l\cA1.:>B$'Z35(Rh$uE-CE$RKEc%t+u5+Ef$]D\1fANlW38q8ZAcDY*Yc%f4cXYj<7\&sI^=S:4h(Y_;LLQ>jYD:ZrJZb7`,%m>t`Y#!.u"1tiVR[S()AZ2_=\H9EZ"Rl_d1^bIq%_WD1Y^sQt3fWnLl,C[g0/q@Hu2m7)?,Visk$m/1G@Q)X@`3[sh@ApMs#>&`9%%E#Se%s3I_-YeQJBQOe>(3\Z\0&+:Jr;L5:jCedl@?+>dGLQ12;r3^##e.:_@1M2<BttS2<l7`9L%PAI_[o[Tl:]knl\<3[OWA=I%fP<;P!)jso@s-LiamK@HT7?5D!;P+8E!\T92.Ris,9um[GE3W@#h],3;VuuuOHE-W(an-UOHJ6X\.3>Smo11(#gOL`-A%ubTsi*7%7;t/+T+&*'rF;M&6<\VY38>j9VHWFjdLO0R-_Lbl_f(j=RbJg:(9)81eS8=A3npLJl,T%^SI0#u*;Ef<iU"K7G>EqAodfd.$E#iO%mlqO^g3$mU7sh:93&K_WgbqhnQp5dU&RI7<[hn<=&j,4*aX]8=p6b6,?3lqkSj8(U!&=P\4NPmP%F\X^%iO5IE<2uAaU:)*VeMQ8%?%=IjP8Kj&EmW^=W$0<\6l8]0ME=c)aK9HniiK]m4kY2J,tkH.;^3Aj(2@F[oBbf0TerL%L%+2Fl&`MnPg95eLU5[C5Cl!uO9LP7%SeTkEGIAGNaW6VeFG.QFMKlGr8X8XcF0<a+dTdT4pscCGG,VE>^iGk&>LP"RmDUdJ$uY4&%?\NpfTbi.))Y>?]-ZpZ+%F@iVAXRK%W-X_!PO*JfqIk[!Y1;qZj^NKEF0Y4_I.<#eXm-TSI+>TW<1E4Y(M&O8DJo'7B%S-.XcO](MS70`%?MnHh6EHt[rI/YQW^WK;8O/a%jmMWg!,8Iu^)^OhN&0hg:%%&R\U$##=tW%Fl97AJ`t].W5#UJ$XaFbi]om0mU.*3o3U5@c@8o<3NCs%'ZXm:23`2B90s)TK/`>hd%Va]&L?L'2PRVhUZ-LOm;&=(hm<7s<nk02h`B#e*1`:tB(K>YWEOJKE9Y@qoGMp7JIm7pHJ4]a`%,c;Ga&l3Gup*Mf3;)lh*B05Ts%7N%a@DQp<_]1_4,UMp3*f<;Q$M4Eu,iC-SlF5UoEcYD@E-ND&<W/Yg$1aFNE$9%=5Zcsk?pdX^a8\OMo4'k0"h9N76Cc[J6bau-)%oQ'24gr6g42P"1'Ug4+='"Vp<SXRT?@;"3+Zg%*#A=`P+q_IkX)5>^Zc)/s2502C6B/Z=Z?-p2odoju;Hc`/6bG@"R>&Ts+V\`th%;7M$de(NF/Z[4U$?E@GdgU"A*3k\e0[<!(+cDK&hX[L(n1Rh.#,d:_NRn[O+.IB'`:9X]i,JC^"e#i;8oaOi(ACKdog2)Jp:,\Xa%.&6^_mBc'.6#$'AmN\3=59.!b$nXHIVeeDhRu@$19rF=NVn"$p&(u&N\TBlFG3tYkV\n/d/tGR_jd+SAH2n@1bRW<JHF\-PG<To8%9rF=NV`XTrb,3Y2V6`4:`fM2[9lJ`!%X66rdj#/S\I9fEgCE/PVo3?j^rXQjY:q]PW8'-ob[jiaM036spgcJ\eh!82!PQ8*qs$l8%0RLF8:+mDVDcQGm_Wo]EH[M".<pf**e#&CrQM8bC>1-`[Wj<g>H+Vj\j@RZ!0L+[CKMRoCcY>:q#uR53E>s3R;sb*L"=u$`BQC*G%Lii>4fnmpeYIWD&2q5k!gu3ZR<YsS/Zl`/KBeWk0X:OcEc(2aa,2I-LK&`E><YsTZI*J3c>?YSTDO[N!(mW)Wh:]qA0Y?Jm8<WB-%6F;*ah)=H57F*(SLDpPPhY].Dg/FT^H04P5?EU67d>aT\na)dh1V^6'(W/p1*H"EDZZY/c<?du*;NYFJcSCW#qn9bm>R;:&`g\r(%%U?pfh;hYD4&QLrkc;u"M:<mmC,:b4PP'<tqIK2S:4L#)@W6!&(T-S<2cO:Z]:g.Tb]_.Qa.3GWCqTN--*aMG$MNE1c)Hu%k[ZmY%S:0I>HKF\+dliOo]:&#O41d2N*>3-6Ip^ut60T@dN.*iET;CqI$4+G)`p#"C=Ejfq@e5U'`S>%GareoAMj:=>?Hr1?,AYQ)h*[0N%Zacf&l\QSKTmkepNbZ7\X?GEJpb^ac%>IZbbnCt:1EUhPVcM"p4S?fm[_H<cm?HV4<i[sF^#X7+>41R_#tLOgZ$%Re]ZO`pJJJI2%QAH%H/%f8:q:8F]:4=cU_JTL*m>ee1'>$)R:i?l$h-k!sL-*S*X7pYP*Q``aq,e#_)t#Vr.<!u"UV/*p0DV,R2r&7s;r2+Fg_n/P%aW5RE!OK<)ebG0:/N6k3Z_,,3cstY]2/JmH$GaAljML2N3SJOE!Ea]TOF`G&n>t='ZutN+h8EL>jI@_%BD9>J"9i%Gl['7]^p2\Y%jKJl%KD]o+OHpkb_?4<Zq<_&m;c"Ng$7mk-)MT,j2J'ks5!Jp%-5A&GGe6O@$4GE9,AbEFM^jbSlY(>>V/k<LNE`DCAiGRg3b'Su%$0f"i)^R5tI=4o2k8%p%j,-CUP6`V;Y^)7E0bdkK%#Z97K%6bWfue;ODKO^0eVkIs]F53EC9W-BUL]E#6PaR%r>aEu82i,CrB:TN%3Ng>_n_&:/g+[=>2n!!s+En4]T&U0Ej;Ca=lE"W&M4'i>pS`QGOZ\)l0`)U7_^B'*ECHH`VhGhuL\#&_oZB'69!;eicVtPgQc2:i%;_/^$=+75&)fp#aEKAZ2$.1'D4`$2NnXFtk>h8SFQOel'?L^0pRCZ:\<;CM4e'>'m&mftDF(\c7UEhsbq5<`$e7j0`YTZo%I43kg%+AEiu=^j-acsm.2Dj/tk8hdA4WkF0>j'P>J[AdlFQU1"<p0KVeIg7%4e22XI9cGJ=q6Qt4m>Z1spP$&Ego_H/^6r:+2DIrcUtFA<%K>LC7k5HCQ\3\^P.;+s"GP@gtMJ"Xm%I`G]@`Vs-jb6m6GADVaL8KJBh_QHJHH*Un<:87:\_)7'SR6)9dT\(FKk[iYcnRT#J]k49%g8S#.''nEQPh2Dn.$I:0r6r((T_e3&rr+XY\bW@<[2!::6=QJbo=O*j:<iW!,&3mT0ZMdH"rjU$^R=2cA@8UX4e-<Kn^UEODa?2J%3c*mF-S*I,rY,03BiYNI>!=B$WFL@<GA"Tbb?k(1]<lD@*]-LnZmhGQ(8hI9-9JX&P(ZUi4e?Mt:Wn\BrEWT;`@=[I=nd$fl7+Vp%;ch5Zgd[7U`gnQNjdh_kn]f$"kJhAE6b[C#rb>1f[,D"7QM7W+K:;MJCOGKTXGL_0(EZ"m^<r+Ork@p97$c$%K4''GUFjL<c53hZ%=oardXLQLbq2#:CeRoK$,;X2fD!Ra+kSA$2@G6joIXG\D@'K>]?lQ0'XQc<:h*:sXMgd&S%O!Vlm)i)E:5Z"Vp)#e-6FDB;@XYA;%m@3+Nj"m2F2bPDh/Ih(Zl-:!tWIUW'k8\<&@qE&$?58GW-Aaf<hD]>i)HW)tdJ#\YJ5Ql\AIkg6rFW%!C.i9*[_0c6G5j]/XZ['h%^asPUYfCAiR.8nA%D#NJ1*L$@.tjBKP27S,/2,]1KO^=7r+s6TQm&]AFCA\FE%M;+B@h$l"_]h"E;^ah6P)?7W/%LhXg8#pjoB94%:Yu"=^%H`R2TZ$-Rfd>EMjXTA[^f7R/Q[%h/3ob_5W8qp36T<:(8/4j)eo:GZN0CT!8?q)9sOan@O2(5ik@Uo25r`Fb,9G.g\rkf%ZP/&IrDGg>$MSIFasZ#dp9.fFB=sD;cV+'Bnr`Zo.GlIbWGR,6TD#^pJ*0]nc2Enh>frrfW>9h^YDOg3k=8aU_<^jlRG[;=_:_Y^%p\J`iagJ%QU"4,Sg\u";ot>h:9f(XC]@jlH#)!8kqX&GaP^K[,H%RZnL9c62T35-,Ek.7;Tn"l[]?c`XXSK"'o6^G[[k*[[H1u[a%bRJ`@#LRG`qMCVFqR?;Mms<jP?GH0)</,JER9\M(lY"R$iE!^!ig.`6rQOBPlirPGme&B\]!HYl]_/seHcWDGjmir4SuZ/coeXA5%:Ws[0oj0jC[nUejD3:)qGnl1l'<!h(f?a@q^HLq8`gUgY)7+IhT:J'SG/)X)KVC]mD13S!eHjZWU<OS/p0KrcOouTP6<i0Xf5Ee[%=*^j=;<Ho9p\L;Y%#6DBch^s4o3;1#rNbh(IRY9ZafU#\ZTGV0f5GNEX)@Ub,qFs4DmR<@&?m#74kRF!c[;EZd/5u_l^'E@eSjLF%pbp3?0T'+PJ$5I[MY]kp*U_tB^kaqnk1K005?!R8Lj.VA1[dX(<^1U3bs(\>b\m+.-nB0#r>Fo=6egG_B0]Pi?tX7[H*?-!f(^Td%qO'\O+*et&qO*uBZ,qEAg\]FikmctQqJC<hT9^biM)p!of2"DIeo14;=W&qg[a<ms[rka*hNHjVFOU3DlfU4?e^+5o:$23HD34M'%_nCM6-oOk>f_Ac;F"#'&na1cW\pUQNE^ht>;If$!5P&E1bHo[*_pI=J5P'VF,OjIElXt[IhqBWijh6+4l!k<"^[.'RPjqkOZTC(d%Gr!"`cVE89pNul2HZJN7aXqP)PkY%A]R/#V]mf*uTmB^\qg8:c%7>,pDqB@7<30?:ePGR8Ck&X\q210+?Zs$4c[7s],.i#rHi5c@%dj2jMXX.h1YFg*9e)]SUNUHJGPJt*0]me,GTb\#M-3q=aMj]Z#joqeQ9M_BQkttQ(Y*?SRWLknU^@>O#[\sXLWFK&Nl4r/ocU8ZA%_MVL-&-Sm;Lac.Lj\gW_'8:ffQflW*EWs?.f:ck0I3`%W[0=lH(6$GgkO68RGNLm]HlZkZ$3+IR&Y?+.-WMdap78r=]cO[9Q<kBF%hM2W1T8Cchj8#q?*_dT]'5fK7-5s;LYN2WdlfUdq2hNW`O\XfH=+?A,g7[V1]uJuJ3.@r^Y?+M,'sHfdX6B<W1ugg0PIge$2tt)L%Qb9rh3T9etOm?Dpc,+A`BQ36bX`^65C&bRgpNn`r;-iq'`:N/[]$'hF\TUCK[q#GP-^Me3(nTn=p>MF9.Yk>LWcEGBi;)>WOC&H;%-]=2(9cKPh&i)%[^LdFJlK/Pe`.c[sW:EmXMdQ*0&#o%MVlPiRI_kiV\](lHatbjJN&g4F=$Vpq"A]B>p\N)Pe$6pNn`Z=c:D5[i%kF4!:VPRs*b&(F4LQ6c&m[*cIl?$9Mf,L!uPOHN1=Y+uKSa]:oTr=I;bJ@`Vp]lY0T3WG@(I8j%r!5Xkk<58;DL(ng_UaE'JA0iL%<GWDo#pJ//OIITC5"\#/-VlM<ZUh1q>ki`iLR5`<594Np$fsnooaCWhqD-rTI(3UbM=2C53du7tVN:/W`K/3[.W/srd.EZ]9]NbS%Eg:8JXKZsIV1<p3HE%btFSR_V/Ikun)EMM7mYlVD<;:#=N-nX;3%)!()h^6N#^/T=Tf/>ncXrs9q;XaH0@u#krU9qO6W?#doAZs0%A,.#=RdoFABJA?DU9FA8q>.AS!r.ts*BhPW^Y(:/gD/99bkL_,2&D>;^/>R^TVgVp"/#-MdG:*0"I'E<l)sXYcFHh8lC[aF8!N"!%nE==(5.L.BQI;&P5th(!Y:*ZO%!A?N62\OW(*:^V'`8jb-AD4("URg8\sfQdi+n"]DL]5DfQVdBUckX7S;t4SUi;?UW-I6DR(En^%ic*A;6kSA4;>Adg\l6;]?Nm[)f/FV[.9*h!qSUpE;%u0A#iMTmD^$D\jrm-s:u7r]'cAscjZqPsR6RO>Nmp/&ONJgu'ml>6hQ*=F%&]Cms6p5c)[l$QG!Kdj60!bJs;a-=jN8620O047s-LY`f--1#r/](1n[0:XEr;;P.$hXm`=2_`9Nl7eZ.tf3HWh+bfpe7JF;L6$L%M:e.U[rLBUpb<t?>.o@D_&b%P>@57F83`+pp)GG&^0^C2nMPu@<$G[ZjLjO,?`SMSp:'cbP.&tuJsu/WmZ6u_jtAs4<1tm\79a)`%1G+t#MVR!n\Qbb>,V<D2c,=*pHk1/h1*9iHc`sW%X]kC%>rACfV,rcRb6`/ocpZg2bsg@W&o.]d=QJ]_qdP*fLk#a/n@jG9@B%*3%_TqC*mD17\hn+`Z-@J;"Zjn!/$laSm?_R4VL;=2P@(3cmlf![:p;<PiA<n&f]uS?dD?pI2T6ERDV&+AA#>PJ3ck]ra)G)S*Z@(cS%"?YC(ncpB(!n!Ac@Qin*%@s92pgD7mJ^5U>coS_u;mlB`@_0WMSJMDT>fh5aF0>$:bD8)++t@]rd??o1gV:]_FqYEd;a1IAFqYMb%gn$o%O"t>_I>NKf$HLQZ%J]gO9TH]sIAc:(5$C:qY+HMR+:Hf4`[!5,5\)No_4Kr:iE6rm^`P"J$eHa&``6]Y<<*f1Y3>:6h0I1E%"QNdEYG_q:+03c/cLaG1R^hJ?SaIK*ZMsI:EKp0Xc>o_1IEXd*V%u1T4/KiH@tn@'J8]k2^U.IHYS8=53*i6LT'3HFKFrX[b6b&$%p(b.bR9=Q(8^Pq"-l=tob.Z@B;<GDmU'%f(*ff&O,LQHu"]*C+A!jdqF_[>N_6KUjRa8S.BEB8%,!K)>C6N-T(fbf_J"`u)jups5%:ACMi_P^8Nk6cbO570j)RZ4^h!e3?a#e+/j7m=\iA1[<Mr/.<?0R3l_4ABgj[lgX'VfR.hEB*F'X4KAcIH/[72_:==#s.Qt;Z<$Z%-/q(6a[3`fUP72fjko8<A1\pu/ol'1GjCD3Qg\\J@HFbGn3q[^fS1+3I1[ohcQ(s#H!")NCM2?O<C&NK7cZ]JE&XKLqK"!nhGt'7%%at#@YA0.g&WI[(gZ`Si26C*q=2QRn-%$=>Nm?K&V8@LF-=lKXflc*X65iE$!G!.t/UZ!g)H^>]]qd:8T+("O@1Dip(6GD18VHk1%>i4-N7B/*7h$=PGo8?m8`um^Cm$pTTnYoXc(HD\PZj[Pq5rS"7/^CgFU^m-&ci_<6ecPOHB'i%%fEs\Js5:["Gb%il4,AZ'k2Y>=%DRe!k:@QcZGe[/10So(@6NQ3+4V1MD(uuaQI#pU8^P(7XU[%Ig'!F9:\C%LZ'o?cI^IBgjSO:];akk/_maa\*%[@$oa&P-+!urJ>%j^:5pLto&H9a#`u3TTT2Wda^WP(!d3^EH6!cp42_d_c_+O7Is1'p0NAc1iQ^Dt1W;ZO""(Y,D&WVgW[eN\%M=7=1>_i.sXN@bqVa%-j*4%&u-<#-9O7%@N=FK)jRi7QV?V0K(hkE*`P?j#="8/D?/W"nEK3o'#j@1^Pu5*Vjrfe/=O3l$)d;]<\tp^^^gtl35c/ooE13s%`R-n6"V]bfBNo"6L6c!#/\ZBm72CQ..MfsO0aet=JGlHX6DT)Y1#Z-S"O3'4bM999$X24&bQ9&"5Yq#h9W,7S:C<o7O[L9H'22O?%P%F[42%,b)PJIenbr9uiJG4D#_-XZ_(:[h3[pt6u0,ciIT1)!tYTT\4DBqhX&F4]3ec;B"[h%J4[NuBWD2FVYG8LqQ'N?:q*,^,J%pu6L+V6GSca(B9`EuN,E0l=p<$_^H!(qXb4a:9?X:U3e7O):uoNCJ-*3O8b'%)Daf<t/+.qUMKP>p<,6lZ8fF>D%/X@jSUGqgrc\%V`/un$4uC>hjFhi^d=tVh$KNW9>tSPS!p>&>T,e^*4%ddlMQ2=U,e?MTW6VgNj;p]?':`?]96Y<qb^A\4)TMlX_#_X<R%sm(>F^$%:!Q!heqI(d0o_PY#E.DmCNH9_&1,@TBZ>/%d;Ti%$P`s([:;!n#=^I\GJq6;*a6r&=hMoX>UN="L?<TN[LJocUS5s2lI"O/Ro?!^%0sE6/)B,Ch\NO-_2WEK?V'.AN);.u/[=>[83ceh\<B]D$GsB5)j,1pRb5H"c!nT(O="kBeF<-WE7@-4t\oIO-_)muB>)g,kYF[j+%nm%Is>;[q;Rer3JCofIH's/`a*Od,\^@>Y\3+<515bX"3O5/X@RkI*=$r/R&':8`l<F@L/h4<,89(FjibuHA>PIBBq""@+Y6#k,R%aq-53"U+9Prj<I(Nmi5%%icjtJ0'*9r4.LT13JpY<ESCdpf=u;E&E_qHWK8(gf_72mVb4Pc9:"8BJsn`PF[$dMilJ6Q"rI]obUd;%aM1Q,P/e'QI7>W=du-9_7-0M8:=sUJ3i.Z+'U1[>`5jafG>.!1Kl.21"js/GVYb\r'NPZI^X(%[TSo"4fELWj`$QIA725Q<FF-V<%R???N)$TPnK8:Cdlm\cb*Vl:,&CQoag&p4I"8hW$YTk?5Iie.:-bsl(#5mZV.N7i#doBg0&_T@c]91$Z(/_VY$MR`Rh=Xbm?P<de%kF7W:SAK-,pAua_^BEmD?*qL;0M]o/3P7U"aPCX=.e>+bF&L73@dsfb.N`bWcjSqZjjQdR4KR=>@(?u[))p\s(u%,?Hb?7(Y^1Er%B;K,^3jFVbAc-3?o*FB-ALfTN3ld$'j2b^;oj<Qq22"B/V5L:"G5EcJ@D."RGE.gm\sbab;O>Qc(>m-!8O9_h86sWF,4=m_q:!TR%ZGW-?B9DZGO'C7U*fi(oEZ$S^H3o`1(h-l:-h6VUl?_lfAAsp?N)">]&]_gBnYs)&QBmaC+Nj'r7*]orkf!&-K=l67lZ_l1(^FPE%<q)AsIf7\dfW\s-Pgi&c24@(ii`m<R4/iar%Te,`*DnJiY`S7pCQVpb$HW8lfs<4Z]m/a/A-"iK@+s8l`aKg?U0LdT-Nrd:=obVj%isha646QbYMcq?%]uP!k8O%>h#'$edG>*#DbaER4X>i%.\J%R@+LbiPlEV&oB_2=aQSjc\-.<X$U;SA!(Z8pqX[lQR&jfdbkQ2Oj%]X301>DsX#'!XtVfIF^^aX9u:qZWV_-L<!&@p6dcX'0a%4"J/(JHXN8G/4gV"HLM@V9feIZ&u?\MJReT#,KmLOCVIsQ.eiaF"pOL%jM&8;AlV.gQiFh6n(`dN<u-7:IYYpQ6:95gXe!S$Cp:1LZ#Kh4)b7[E\EBGJpY!<=$G.5]0`LUEjd@u"QW,Gg/QG\?g6qa,lHM@"%Dqc9_&Lg-MqOd"li,'\R#!6?0D4?Q?,>,Z'!;SBG&Yj9s9--"J[+9]M,ss=mDIT52(mpN[kigc%#Q"Ar&MUOMl_\g;G<iI#?X\Cn%hG734NoMYRS1`j>btZOm:@]+IQ64"(%3jJj1@B&CMh(a'M8\ho[/n.eG<]sc[9:"\4H,7=qOug;c&rgI,Aq]F\i)9Z^[Ej>C'N]P%OqWXUeu_SJSbW$XA6j6Cs3/lsRkm5%7d@o'LE;:qp#o?hRB<5]%YbglGt,FB/Z-FXHZ`p7pDt,9C7MA3_Dh/-krVeTPfr_J?&cHq%].R*pF>r.c[Hl]emPWWKXSiC-iq6M2>gO0k[0(U,B=!>:hf'39kXHq1;G[1rhS)*ta\WQ%`1uM[<:o[!AWF8M?.k$L/a!t6Oc[fh%j4`9me,:D$a1N?le"3GnSa8R_EuNdog/$tM&\D66Eg<dk#E<Kjj]9(WiOR?9$tSBS:V[[1*s.q">GeN)r3_,r(PeV@EDmc7%):*-%LHgQ*5O\*jc6Unen\j%NK$mt.gm1Tf*^<cq<u0h)^)ihY]M.%ZN@hiM7q7H%g[a"E2&)tH-G=j?ZhIgV*WOiBS$*mJ(qCKn\%$D'%g1T#@Z^e;3fHqcii'8KaQJeJU&+#Gq5C9rDE%8odc3E,70A1%m*/%ZZ(s9kn`e23HoXPP,)cD?W725XG)l]B&\7$?R:`Sk8T5gr!%h*Sa'5.dY'L3)]hJ#$FjdA<O*&f06Jpd-R6[W!=)^N_$9DmcZ]mF;@]`*-i2E;[/"4Ck=kqSE+#AP1AVD=^pS\g('e!CM05&Ma5X%(n`eYC4o][KH28Wmbq[/pgr_`/iQW";.#VDmPaY37;W#dO>6BPD$-C9bbL/[X]^[m!)>Y5p?+cTqD0<Aml@?TNPTBY$mCt,n]qoR%E#`n2F<Ak92TL4h)Zd&g=sDkCb7R^J2PF]#-fXj_iAHJTgAU_SD"cWZKi?,ZbM8SPGqcUo`ne23<RWGcA%]`JOt;RK?]@6%IPn(G%DbYW$k3"F]o8qP;kB1_FDM30OOdX8&jCg.MTlGuK`]q(=O2=tdXt_W65)s?$+1<dB*FZ68K-bVLH^Tq[?ra/AnpD\2r5UnQapZG[%g.8;rHMVApM,hgN]cRV)F4QrTq=&<6N&OPr1rmn`.Sc9R*9A0r>DmKF4iqH6I+]@G/feGM?&n?G\"h_gZWgr';?PlM+k*AooY#f$%lrJKp0R-bh\!/^sA(r\!#tGfS@0p4I2>5.9;.FgbNCff*K:b.-C8)(JR-^m6nb@(llP^iqknR3.G/WfB=Kt'g@!BB1dBq>&p;'W,%ptYe3<Q-"ik>1LfXhK.1q";ICq%%1Js5:+%%(,an4GQ/Wf)ro8pLc1aj1H.Oi<L(]\TGD]A[=-&hMgmQ,*cGhYMh:M>U"ai;TRJQ%:`rP14Lt3D^.'dU2/Q6WZ1LR(T_0ou3hN&1$./PK<.d?D\(^ge%JIoI./LG<Y^t5868Uucr?^<[43AX(dhmE#k1o.ZS%Bg;c25n'%RFFtO<o?TlbGW9e?s)#&TT:]qm^38YDfQQpn)'4de`T;qn^t><Q"9+W];]=SH?g7dhY\Q=I44Ug`;#DHBObb(93MOs):'=j<39!2%-9&5h>t/>nHC"*[p-eZ"DYo_`62LG-c917\IVS?O3V/WP!(V5261\21M_!"]l1"//a0[3;GH'ER4@X3CEh,Hop%7+oeqCekI7Ifo%[l4$hDtdc`b+*!D]-@,3,"F;/7.RHS=1KN_dWk]hfg<"6q!$9,2Y-A#;.)QE@_GLom28F^\)YGAcsRY2:N,q\L]e1FeMh9@olRO?%ZNlL.XFH&AAB$TGBZMM^#(a[F7e7]VR8r[%_;9T6k+T'!d=J!t?QUrWpUkh(e(tXVgO7D]=n@)gXm!Oc8]R%^]0'/c2sOt)bXh*3%U\TK`\R\Ek@]eV<:%0;Jp]<$Rqu3QPHQm:se*6AIb4K`N>rL\lljO?15C\*AS&p9b6PiCVr%MB]`)/P(&`%?f#?U#fh)JA'l5aJk%""QRc/TLsYnD]qhT%4PrQM)r,EdI:O\7i>AVapJoL%U2kqXMDWN*^-3>1KCiOuq:R@^9#%ho)>i2hTiT%H!gR7p&RTBAKH`9^8Ye%C?Eun%I0B.IYC@QVUAZ'rgB"!XQi6[^aP?qYcq<P*q8N#56_.3fA:W)*?;j^r9%(0IpDal%R1t--O[]'ll\sC5SKUC0Wd:a#4epK%:Sl<%rpulaVP_\`7m0=eP:b%pc[X'6k$#,S]f-kEgHNs(]LR=P@=bYcKD5'F?\.[cHtE-@!iZL$b#_uU1J5t*[g6fp@NNj#cLQFM%43Zh>n5,#Ro5DDEa*a(CcCD?(BWN7lp<GFC)![X<g>D2*fq7`W9J.sa$r*;X.Fr,rB\9WN_[f-,!qKHY/qJ8jcA14`7=(B(4%/!Z%8&J>@:TSl?'Z(?dh/"OGC*.1RiKX^qhJ`(heb]'rLUUrg]^f0C^j;="+QN7QCRm&N(0:CIE6(`ppDQbSXXOYr?Q8=Yg@5c$cOY)R%082SrCW&/1C96jH`>TAiHp55?SDj[6j4C:MLHE/U/_RneOX[5IIN]T_5:Zfl7dcc%[hK:)d2!D0o57r`K?hc8+/XfZUh4oK_(p?(%*tj23fu)Qn+!RqnL2sW854H?=IAkf86Ede0A+eM9oU,Gk>VMc)^Y/k_jOSd/ot=0as.+LD>(JI2jia:f^,Y!X8#cG)mu-eNoUHT`%mI4u*0/2iQ2k=M*,Bcf9.'@8:Ga`H4:5"1Ls7Ek:diTDq`5h<&/?7ANNScIK7P6QVC.?TN[b0!:8W84H=^@c/N;[8B/aLNqQ]4Et%@_,SKcRTt14:UWT':s[k*un"+%npp8H<PoqUOs@q/&FYW;mXj@c:mm"r+jkf[YKJ<,PE'=jD#0V&`(Mq##C/^he".#ZB</q]5b%5%`:`T1q/&TA.3%6[g^tdAe;<M(f!f*6pEpb9Y2Ngr-*f4fW0`XZh@`;@b\an3`n0md^kgee,Is%uYf1fjs2oJt/%G;Vnun_S@F2b%%"o]8:S3L19Z^*&a`.sgD$Y2uJn32(PnRZlf'/\@'V-I&I('DmKj22sOM(=![V8V7+]gJ)p)+pA8$EodXB.5]m6?<+o=\=[IOM-/<%/>^?_)M<NmV>OZ$JpDQ(q=(ht$57hi9)mWiDAPR\0ti'kY;i]El'?P=<ub:Uo^#-QHmS4>.snla\ujG=0NN"U]XBN6?.s%"Lc.^,%62rr0=?lt%=lP[eX4$S_%VH-Ts.Ob_g<T]`Y=n.\BpiL?[+\>\lrk/8qC_3-\U5G8q(T(7J%>_,g])f**#Mg?)o<7@0*fM.*B_s%%RD3NSVK$IZ.,(%N>N<%+]rYkb7L*i*o=+q4SQsM(14g`8I]:YiT?!c_Gh5-GINB;Rcf3toBDOR#\pUL<O+&,dfgicnkCP8]P&#q/%&pn\f>a!5Nqeo&!/DNrYV8p`g>DteB'DNuiNEJ;FhV_TEqA_$5h#qr?inl\kEHoMWoss_d\EF=eIe,bDTSKUE`U1p6,Wnaf#1<i8%q%95uMnA"*$-]YLNX&b5nD$W*k>or:1P=#2j8e1fI:g7+@Y4A)HQM;Hdt?lCiQ_e)Ve132Ih9(:h^me8.6s_tS5'jVY@V$n9mcI6%c@adVdlL&A`+t"cCUin?iEjspef8Y<os&%@@![7\oCmJAPbbQcrKrgnC^?GnlflqN.bm\.V?V-Pro;haqWEH>>(P<%Ns3KZDQE]j%8G-s]*F5iGr4ZBi:8NqDh)6[9Y(a&d0(iZNU"sJ6(r`O9d&m(=:J_Jr/S-=&%u,5]rQ;_XlUK,EF_o"PP17h,$VJV5oRhpl_i/J<%k35>/cMNCq4hY6$Tf?>7gRlNE^Rj;sT&)]ll)bs<\XBA)o@MIgf@0WKe,.bGMi<=lYJ-j2GPnYBpTLLhYG_,uV`27G6t9bFj6:F\%p%87Vo\M0@)0aelG=VD"@4nOk#Q>5h(Ks2B4X>N/\I`NW%eF>$$S;^BKtGV2UQ:o/bUkt,r*E8KWaDF5ZTX'VEfMe5\"RlP%%Qq?%rcLQjDAbEhRaMX3kAD.s=$-4k6g(K@:>ero]ns=,%+`bJQ+.hVXBQA%!UDs(]^oU]0KlJ=m,77rXPSnaS!d61oFWbB(n&6r)0-Si%mOIEX?fundgAg_J2>SAVmsdSds7gYCHm./_\A)#@`':.:^cjGks6%\6cj+oM1B9?u!?hBHg>-D.gjJf>\<GnVB8lIV@f;P=h;3P1%(qfYnUTpk;5._IK7UI(GN=OEa#/G(\4IIbe,6^"f:[cqun*P,Rs2!:)9\\HnnDj".6-ue8??\?%-3[J3q0WjjIQdVDF^+OX2%D8M%>E$07]K@aZ82/WKmShL6UU@Z"._.b]c]67VQpG!&.;fjuJ;O6`,&V=ZAbD6W]GUqo`[m+aR02.F-5i8DHNZHTCaN;0Zo<hhm+"c1%h"#!0:DN)e,JG3.(s_XZ6Kd[^<^3.+Ts])rHUL4UZGNTA00$;MDg-B@R=D%sqmBIcdEu3VXL,/Zm<Pnl*8Ec(bHE?(cb.Ce?!pp(%X1mYiWkkpC,bQ1Z]c,G8cqtdqkt,u+!Z*r^6<rj/K&3h!reie0bLpLAK4,^ee;VLHb0Y?X]Vj%ekM*.ugC\spQ&_4$mUC*@1H$JE%;1#O&<&T\1GBL+7O1DOeCL19aG8W)b422nTF$bpWCdfc4a-->MaZ4l5L5o*G!^El!cQ\eXh%#S$,);elO/qDd0e3+qa_$<)AF2V7%Nc9%uL-Hakgh!dqL/'i.rEAqWH7Iq)H<X0b!b7[^FpHdn;b)2:O,KY%Pq>ktgn?2q&VEGNr\M(PEJ.EJ'0_2^$]7#CT-G<D)hX'@%MiAedcPK>`L5P!qnu"/7+gf0_YP8%j4kt-XjZm8i%_#S!+lArr%jM;FnHHW$e@%kigVcY)@"YF8]hZ?'diNt\BYB3-qR4kh_]?!>%!QOL-RW2GKM_k(mIlhUfRiOg!4*/isDkBojs84qL`"jC@%].tj]VD^8pL)!g]@WJGEpq*]2]gW*RAr`I@D!"`S8P/I9o7clZ;:M>%_!,KW=khI7-!j!Pp.:aE#I6Qc'ck0g&RY-=&"XUZe<a=h+rf>mAH-HR%m6K_=aMMmZjRR25GZE*p?AN`aOf,<M'tI@5[Af5j1k!S%@kh/53;kuAPc`T?g%t5SllXtkA,a$\4aQSUn[Q6\oj`#/FFf/GRr&jNR<>fIR?[sRDdrV'pup>\Y:lN^S2T,]WQ)lnH5uCDIe^YJ%lfdR.dJodkIICL4*1`Z[-^tbWcPG-abA?FAqu+DET[S'U@<qX81elOsEg`ZC[b9*LCA$?85MIt!9-9p1ZZT!LQ)r6gj/1R=TT.3F%RiZ6+IU*Di5C\6cpE)I!@i(?TjN??COl8ZSraACuX?8/ZfD3PSl1+Kuhi!gmoV#l?U@TH@[Y=F9`t.>lWjCB!D>IgVjnnB9`U^4A%Y9Sr$TiXO:om*I4S2k_k?;)@XICF6Jm]=`AG6chTp6P5(iSB'InUl2@^PDSs$<?OBd-IC=J_$1Jfn&\BVf+:jX$UrOY\'JiYj<_e%oc_Dg':/SbV+g>>'UJ\c,m_jZ(7+ne-&_$"'UJ\cV;%6F.q.+,<8P#rgRdV!Y;(:R_Qof4Zqk>kRBZ$*.ck]63u""Z6mX5`<sq[_%?@)-RcR!7Qiur2S"um#HRQ?o=juJ%KoHEeM-cg)S#262ikC)",rApG4F1@O$[,0iN#<u)V]_[=0R7HaSF,-i0HT0)$5LsoJoa"8_%]IF)W0D[[+F%dQFYJ,'cVAYsIGUHi?3=LA=-Z/]>'45q/47\hAHZG&r(37mr9KC<^c`["/Uj^E:ik*ZOMjD[tA?F/&N+nJ7jL*2)%:5jVSQuGi6q?ddQ*@o6As-__MQRV[5`=J`#/>r@J+cW,_>[?ed_+hsOc%mJfe:48IN.KdprPnI.93KsB(!jWgC$\Z^Vm]p]T%`1`%ns3(GrFNN/@VkT6*8bj.TsJ@,HBm!O't\[.G&C;%(&L2[T+EB,I!0F>A^HS'pG1FimZRfIilamN(g0"^pf\X7I`lZ-`fm*q2_g9]%;B'a(I[M7\D22(i$TjmTmVG*2\YrF,4aGo*s"f&oQ_HU?fs'kjkL'*lUBg53YVGlWf#ZX9GF,rV25UoL>kOK$eZWK@'6(F10oX>9%eM.qpV6afX&Dm89E:IP`%`3,Y>h59$"IHe=eel'bc*63ZV1W`XpE]7]C)R/@a\o7R\^$i.hZj18_mbK'T1sCuJ00KE]br`e-8rOT%G1.8F=sMlPio>+VkZBg0XsDDpOgkUHg,5S+d@6=*$&nO]&+j/1]-:GG>IMB5A+*X^^Y=anV9@SB$Ll2U9`.X)M"A*Mhjma:eHFt/%]W4T1>M!!5=0:l`BOgOU8c1c-Bt#`=ESVM[js_T$Ft&9@%<W<VG6Rklc=Hq=a9_<H,]PNI'pA?o8VI<&P_'LZ*JsP06g7VUXo19e%UEoD[h"!M<\%8g]i(].k]_eVKe.]Z&3AD]6fX9ko<P=j2%bGD'?:eW(2s:!)a.$SJ>O`BYSfi3:ooOuY[i6C?Baik$)s0V,TK-%k%7IooJD(V<("D0g)iR_n3"9_DhlSs`Kh2sDYS%#(<Oj3>i.b!W@,C1X+<F<XK8%Be_<F]6.,+If-o<QpOfteSq5@\W1]K^6TVHJ<r%f'A-)VKmW_XeSg7f'[u+2u@A4g@!lA*WmYM6&1C+mi8%6@ne<Xj&9tfF"P;T*A*!tH%**qE<b<k*Kf_JSD9a.IP:E_hY\be7eW;h%qNh:k?[He^ct9]a1->"2Rh7WJ5L"S_)3L7?IXh=&Aiss.:LPTRDVdIZWFNZ!]@Z<$N,_)Ba!?,Pa4@`p3$N]6?HY:t,<k7:nD_@!%6)I=<q<8_@*WCk7-9iN[)Y8@ejb:&OUNH)rV"6DeKg+q-D%S1,]<C,1l7#pTRs=Sl)_UXClF4^`AF.)7GP[`fB7nCpWjSb&5C783%qX`T-HhS34@m,$$1$WuK?t1m_h+8\A'^n5Ee4uDuYMV;Ue9a-fn6YL#g@:Nd<5D[>>l-1"G2o-,YoJWU9AM1>+>4c()#8=EArjF/%QWj^lo#lF'O@7)6p0Z,j`Rc+;hSBH1+tgKWZ-BZ#qpt1Jp[ql4Y<D?P5((n8^.tf^n'Ldi2-o6c%=aZ7<]0lL^WLi&-ogo2q5^$p%MWDr&nlLfRDj<GPIQ`22g&K;TVAb)sM6t$FqSD&SC((S=b-Rl7M][b:m6<T,o]:2di4hds)KCu@NSn1A>?&l"PYI?Q!+_J.H.WrW%gh,>VDLs%;5I'_DI-F;ur6+i`K4"Xq:1DZ>UWoA&V<2<PEVBKXW]:-_M=prhZ<FbR[1=kEDa_hRpi#mkn7N^>>AZdV!(d#@!"\&/%=%N0`1QIobRW%%Obn!oa]2=f`,&>1eehL>!7)1q1R`CC=0pidXJp89$4)UQG7P>[Wq4G9o=!L\bJ(>ImJYBf`_IqICEhPI(fl?+:%N!b<FN%sjUI_2+0MM[ea.dUT^L1r/m^`J5%D:S:5b=Z_le!4Lkb>7_k\A0.T<dNF)G^4SbEP3./b:]QO\A0.TA\;g^>b6cb^ZbfG%q/P\\\UklSah?[>G^2jm&80A5:WoEq$@<V8jQb$CDeb.h+O6XH?\Voe@1T,*K3=nP_apNG)g[(Jlo=pG$@<Ve%'!.V_al8l)Zk?]%=lb&4"[.OoKN7++Q'2ou2\sc`0@R-EAc3i$<R,_X,6W)oBbYr/!PSCjr6bq!(eGE`6X^KMNP1ArOI)MlhcjM",7hPu_B)/Y/7\dp%r3C8N^u&I!'n0kN*C^eJ?Wo]Jho&hR!a_J&6`I[NMnP:e!r&e+%"C@^4rHa&$ICJHjC\kaZ@VQ!4S\;!P1!pWDjQS(QN=jX;,^+]%T"?!;m>@-jbCJJ&U[i0']\8RjeW.CML6;"j49f(1&n'7=5(g"_=p<Rf]'MNcZ5Ic;71j&dkd%7nD,m]TBb[pK5[-@1.o-R/j>)q;%cQpSCVM1X6ONYjX5Ed4n9sc*\/jZXR)76=N>*MI)M\pK&ET,5)!F9j]#MBNs<b5u!k65tHZRX%.ct*;DoWoEWfk&gE12L/9"`4q"%[1*p[I5,&D-,ubfZ5Jn7%a-lt7.<tRb%%?LP,^'1O46!e.<cRHDkO:J'0'FWI$]"s"3P-i@qDM#=f,!q1d)h&e.5q:6?<c5!^:-=%e&`h<Dj^XR!"7#kE9'h59XSr<ZFSJ;O!-aTA1?,m1Bh3PW-cH\%?+b]Pp):skWhk<$(31gAfT!4^][B)TO&n7.cnN(;%9V",bk^p%!lfrjiG^>.,0hYVG29AZ.6SNPJJCT&ND'RD"HJ=Z*N_0A4"5<i+U)te-BiK=Ets)5#=Af]bCET9/6Fg!37\,J(!ZpDO93!m;\TUp%B+^Y9#d@b,ER=2"UbX&<`)5PFA^I)6*4,\np5#5iDBWI6'1F'bi%ZVq0b#$4;$*J-(gp]K9*-jY#L,d0WDYSkO-*j?QK4kE!?Jlh%NgMP`V8,]c!R@Chj;ErEO5s69C5?es,ir4XbX-i=U&kQ.YdHUXDBSmo*GN@mk2R^.&Z?n66o+<q98rCK^k]*]6^HFT,[.(elo[qF%&(h[?.15:/Jc<iF<90dt7LhNbh)F=JK2j$g'm1?=YkH+:"co(,jAVmiEgG4cWo\p:!Bi)\e4Meu=`I4]4-pCk0K<egN_bmS8I`ja%<$=r$.KHD$"uousBUH*2`N2U<e]@=%@DMsPOGkCc'ptqfA-H*fL40.1HlHUWW!6oa5YjX7.U>sbHOMSP.=MK0=$^k6`/u2P:r))q%Y$E$:"?;s"75i2*D9A2'YU4@+4IgpMePab5UdeI6>im(9"lPU&#c39#3,2)q1T$"?oJ*F?*$HCQTM%.n5*m%I(m]HI!8t^A_4cH8%^i)c_OW&UNq8tFN)@fbt@2oHDDCX'R;DjnQ#6Jq_>X!l0C\`VuNQTh70UMNRI%jRJo>_9R/_g6#!s(Po2@i+aB09%!cTh\N=dDJr%1Rn-$I&^:CR8PQV23H).is'lK)Pnq3Je^></<^/"6t><K/KJlmLa#Y2AJA2gr=e+R5TUX@;o3KSW!7?A;$G%+<77Md1=W,]GFkif%Q3_G].S(.^V1G?e?t-30ROD^i]$-$F8esMj<=.hC-%I,9d,/0/69RAt.W:_^0OpYPMV?iF.L>%5K0WkqlSr@]cT6\N#J.48ee+!C%IR/L#.F!\UMIg?,R)G.jcu2U]7"Ge>kmAUgXX[N^J(mjZ_c34nHXbqb[iOBQ.OcaP<_Nri)PS&M)cc*eKOI0L'O6)*2fX;;n?8(Y%1gG"L["pJVo%P]F+N>].O]B<,=JWjT,s?q*d)[V*b;d8Dh8s+00fNNU?FKCJ'7l%`(<,1>SBYGW%Q-n^<8bnKpb=96P(FO=#Q$=b%@4hWDV@ukK2*Z.)jVQ3GUYd=f0V&N4J;Qql\h)q&Pnl&s5tDS4K><1GG"HWsT:;N2[CHWQ?GU5`)AY2a.i;J`QV,8,#A[0i]93m,%Z2u!0%,40:RmijjA(4$c\\`7VV6jE>9#+kc"E's&>DP7nL?+L@m3;L\e6A8>"X9HFG>#,9;kC=pUlSn3Tp2B(?tD>EkeRU8DTpU8%2WGUR>VVUIY&%Ei"Z7N5YS90#iQD"?$l]nDJf'=Lq_SYB`X:o&;_!c3LJql2(hj&E0KTKgojCZjN\f-Z(1[NQWlP===fl5'q'B<i%7^._<:W2.Ej<X@:dkb&'$GT-UCJphH)Wt'P'%:-EHJ(<V`'d`.UC5e[b:sTG"4^fnjpO=pGmfuBV5(sZX*I.]9Od_#nF'7h(=FD#%=d5I.a9H0TZ4J^Tol<W$8^Xh-!]_NcE)qP.1M=is4Eb+;Gc=plG5-b@),rrh'.W$_\4SS]3)dWBk*J1I@]Jr2p[]p'LiK8bG/#S[%[\W%30nVnEk*a)0;CB\<N;EBqhY7@S,SuYH5nasYN@V&4L*?@L$9H&fRaKZOTU3^F,NLD"<[E@KZUJH37!$g"01iZF4IIa6h2b.E%/J7_&>/I.k^dU"q]#)J;_$s;C=%IQAWMF5-'XgpNNU+HY+@b4e+`NQCGdW55<sb']$cO5$*^Z0N7F+sfQpr^cJs]bsH!Jq_&nn@E%6=l.Q>R#KO-!eD&/hQadRo1_&`I7=h\;5"6_JYAfM*sj989bD/V+q],`5*3VLt\DpW)H(A,"=thK7ia7\AF\775A1K2ssRD%SXt8%i]>9(YtbH18i@G"G<(qq3G_"#c)!l6+0$e8n\ZPpnkr(6+$o1&:a6h55RdEa&X*Zk,)3nh7V7fY<TUL'LjNgR5s8>iVSI;,2;>K;%d/W@^,;>FGQ7.K'X4!s>V[L1,qkT#lj7UfrB_t%TbKD0?4c%K)',e!7BE6*6TbEB`LIN!-K4SkV[SNl9&%!D07r=+%W-W,V[<ceY%%@quT%i*[(JZ-jZ9<bN')%i]On'IhtJMJf+@!)Y7/M&b_=PKY5[FIt.oh+PZq.6[U):6Ep`M*Is4b(R/W_b#7dU5@@0G.3eO/%Nn%B&#s%E\[WU73%eKXc5A=6M"-\5R,gg\J2"Rb.4mdPG!T7P[^R<XO!bOIF9SUX6?6VmiV3@]a1TbgGFhM6[3<!rK@@gO2E<N[6cFM%f2A$?PQIs0s)D(b=K"QAP['*qLZN=j/BF>$=@*>/?<Ego_9nEHH!"4?;G[=kf;NA5,pSHJ#dl%LL78BT`g((1ROH.YR!)rW_Te!j%E?k]kJI5kL-U(R3VkbcM4tL?qd+J\sfM^^g%)4uqJtjWoE`fJ'8u\_<e8$a_X-?YYYqt13AMPpTFJs.s)6GH]9,VUZ&5HYH>_[]U%Rc,#4WDdgd`m/Oi(<O3g8iT>XqJ6M!QF+eC\X"bBT)MTj1LL2oPQ\[CC"cVCF3]udlOR_6N8o3nAku:O%(B?9LQ\XeLZN?@[T+ce%rb-_/YI.BefYho)4oM-^PD3',=,`j\Q#87WlD,.gTbPul@$383EFjrkdagP?BM+V7]td*.IB9r6;I$75bLn^+&.CV&/L>(GXZfIq%EnW"$j]\gOHMU.F7X<7I!jIElU(')KL2&bu+cu;i?U.&9Kq!=]@7Ua4!qc`J0bb#V@#^=BOnt`@97uZ!\/LVFnc#1FS'l0+<d@eY%&#FUPW7U7s+l,GZ9"Yk*GR92B']_ID)]W%9gQJXV0T>CZ7,JOaFR4]<>RK!`AS_^"A9*d4NXEg(\9]"3HF+uU;=r3`C@tuq'Dh34%?5aCI4J,mtb_cPt>&Y:j`;R(\GB7cd7(@_430M^,TN`k%Bg,0nJrDLYjJ>Cq=AI=a7k"ZENY66hL@o6fNfpin@HB@=^&@8[_O[sU%2C?s\HYL%!2%cCtPhMa#F:q=4dY9F@,SmH)l]bXHC4#?r@d1:sKF301T;LO[Br`4S<i=Hr5O(,KFj_j8@=.Ci.W&rP3XN#.VN4ag%iFiS*Jt.),YoQkKVrU__gM<.A8m<kn[.;-21o8rGXg2'3j[uMMJ(/7ul_HD6M/mDc/Rpu6'TqT)kc[H,Z8``":_&Apm];U3XJAV5%V'O2L]sNUkXJ5nl\Q5?"i+Qi*/=((^;X3KgofA-q;-)ec<tEG+=f<q^=CM;`R:NflLiWmd=,9:g53#0@Zm(,o<92'>1-LjqXZe:K%e)1K/C-"s@7r%^2$C9.A=Y/0FV:<sYl8?_,P1cK<M:V'jAZRC0Bd#N/<j7$G^(nX:<!uGt[ih6[@7<>DU0;tIcDF%3.m$@;=g(V"%Yai/E@9#ITlM[JaUKf17SY91l($(P+1`3/J_g.)i3@+Q318]lHIP&F!'PI[8(8ON(/5t(JfbCP!b.0>cp0hDl9(:5Dok=caVlauA%AIkV`s/=Ntf1BS,$Ce;!fh6t*&1?-,<-/aTE"QQQ1Qcem9n??<DF$=?`<'1FUZ>=K4tNUGd'>(=H"e]nlYH0-$BCF\b$jCS8j3-J%?A"JT)3-$PCLSn*=TRe`kXfDm!"B^^,/5_iUoG<+S"=a0MhV'-+XNVPojKkM<j;Sa-m;e&ldM)9_mRWqAT^U.rM*\oUaIUOIYEY!%h)5G:/jP=e0I@7:!VEZ6'ta8R6f9T9rrE#?@:V56?4,58ASas?<WG0]P_qa;Lf]YQ3'Pb'8b(La2!Y&(Orkbm)MT$lk*j-jCPbT@%jaO3.Ih2Se5tb(I+RMJde$-L%)=)_e2QRpFjeI?T,kPC@S?M>/nj3/P7jWp[l"2/m0JU(#+Q_'M-7a"#kYJ,cAn2\+I#q#8Q8O[X%@N4"]ig/66]J&>_&L";X/"+gV/aKm63e8L-+?(Wi4lUl8RteW]i[uMbC?,XI&aiONNheqrW!4L]\7Mr)*_LFS4tL?qT].e@*mU"s%L^NIs'J-/aZ<49k8u\_<e8+-PTS5<Z>#-+u?<Y>9(Z\o`4@gmE.M?&`319oNaC9<\3%U"A$RrWN>TG>$>0?7L7k$@hqD8BAdoJK1%ZA2>kJ(/8`l;H2)A=$1m.M`)aj^fbNr?EHlNY.9]`c_I!c>qt(,\9M8iER849hCcK3uY%bq=Q/kD7I#6S>&KLW7?Otgc5a@N(Ogr%_53D@i_ca#Z&C_$M.PNY&\VD%2sP%Q5_a$Y9Mq]u;[P%f]eg>kN`)"jlRT'Bi*,6HniEV=r_]jri,Ym:"L'<]X6jS%O@[CT##_iX%['k'1e;rT1KtG6RAK+HC3*'$a;fM'UODV'UE-Ks<8)\@'[Dh+#+dH5\W/iZ^":DUPe^p[k\glR81e#/n,UtDB@*ncc=g]&o0PQ)%%&VlR)<"ubjW(dj]e^@!g18r713%iVpLSLtO.^f7P+&TD>i(RQ*l^)^-\U4Ph%RpJXJN5Q9'OAU9f!n%20*uY0/#cD:;GnNL0+DHG%+^_!B6FT<aT;LNpBra)8CUm:,m9c2(JRT=qjS,Fr."srF(?jEQM,0k6]RC.H-B1>tMM<G)DY$T)]^b215/X6#FX>)WQWbGP;NF"/%Lp-JE^9l4P&)'fB.Op>&8u+fUB%!9F?l=s<>GNWdA6]uZH^*qV1CD;pN\Y'"(eIA:@GFs#b5AU#E7J]8'pbtLar(+YZKS*D(5hX&%.2D0pELsKBVN$n98MP<V2dVS+@3dRaElGic4Wt9$6M3S]Q]eZ2m&6T>mao?1etXfoN3\4.=fVef$]@cE8%=[p4_7rgpp]66@uD@;%*6C90;2U<B4_6@8Z"3ep/223^P['+=>^:&IhnfP0.@!oH^9VePBr`4Sd6jni5O(+`f!L:SKgZNW.Ce&$m7^XWAg"WTpgSbtPWBZH%8"kr0gu0N(84DK:"gguY/AaOg;6?G2f&PInEO(ZuXZt<*'W*9,1RR*#5m"qs93?S^GZ6Jq(tf=B3c=^iX=`C%$FBd:3f7hd/#uTh%.8h7Rdkp9#>2j_:V3L'6qD8@G8R#c2Cs+E,T)MTj;7(AF]?Y"_.:`XOLkTcEr`'AC:.kgZr@$/mLjM*Q84DL]c=0L&1@lKFW)c])%lZ$c=*,VfUWV)&CLnZbFAm)"&5FV]u]teQ;gIirB0uf_GC`)\LjUR$V;5g6$pM`fcM@&Ra16Rg)Qd2?<e`qur4glr"UTING[JiuE%;4+)NbR+Xho2:*c-ST3N(l.Z?@tPL@n0q]r>*.bi[5C1OQ]HbKTR]bP>pAKuV81LQ[KZr0J@9tA]I!u:H8i'D,s!8ahH'LOC_@XO%3:qGB-:bq_m>ErKU4G$3*E_s$UY!m?JNO7<fEA=UgMf^f&&+m'VR;jLU"cfRYrH<c9"e#+)ncqCQgbDSRH/YEN6pa?o%?)GW^#^5%PMHC'A!3`.=%+j2(9V*Od4(!0VN$Wd+Cf$W5_'i48`WE!Y9N#'`,Y(YIMn>`A$h2lBGohPFOu=#3h"2g9GGT<7lU6&hK"1F<O:Ct%_3'n.?<%K-dP91-SL&ZDPQ<3SR3"W@/-2Im7njAKgn6?S-Cm`IX`F>>7c#fCeM9NYcB1^!Elp+b$m&VL%T''+d192eT+o\=PG:TV%2cK]!n?I[W4a`]oI:8$Ud,RKjFPnh"F0fDjl_.GaN!,THZ)Ia6bp,N0,it,$R_(7@A)Uo*CZo5*<deD3n'e$MjEtXD&VM-J.e']q%j`DE\:A0AV5G6&08LkSn9G+H\8=4p4U-Ha_(B=ri,Jf.*Et3iRkfT8G22L>/JAA%F'o2d`5-Th2e"^E7Q,K`h_#SY<$@H[K=ACgm%5+^R4>Ps!me\K3i;o9dGo]qlo-%%g3pO@1c/]23emI^g4!l-4/Cr)Y%h'L@W%U*D('H[G%H08GY@q5of$YW=K@&.]OkTT+!37EMN%Z(,U'?cW)&Y-4KsMs_DC\h\AF;3#I)*%i>>pg`gGJo\=fbWb,LW5q.O51bX'O;p@)W)acJJRnC^3iH#1/7rUGT@p!-Ub=&/p"6&r%S8tV]:*]4ok%Yd.T^jCGo&2[J^p+&V6H+=p6jPK8,CoDS#g.G39RpWd0nR@_hGmAS"O.^KF-n5+S#bLR%dp&,GII[fFFtBo2(,*5%"MT)4n(onU$ltiXXe1&%qHnc(,u-Qas8M?!RP<9*Us2C=]%Q%0,B&ULR_(4k5d9IKGACCX*R`*uOB-[_[)tJ+<S\h#34_IdI4!Y7%)j]8*Z+KpunQjGFpb!qDr9p\LD@4&-D(g9J@.0@6GkFA=GLt29"fQq?q>Le%c\ddLj.8:TnN@Vt#8k00^dkP)]GYMN1P&KnZGSl>%^YTQHlouR=_K[-/Q&7nh(K!f%]CHg-M8$V20.JC6DMWm!;YKh39l1_SU_kG^e$(9+:Uf;Zk\e&0JcRBN4UcNRXsJsfeS3P0e%M.`%M6A3oA<a997*8?t/26cC=jGGse9ZgYYp\Y'<tB-;"*uA!DpZlnQBlrD=l7su7mIG5U8#e7=Q%etdne5N#7hT]h2@Kan)jq3)I3:[%1hZC\?V7nWqLPdZ*?T2.%R)oJFS,L__3a2W?]@io#QJkp4?,Jm;F`qoVtoT/d2=e-W-S+4qgU:'MCA>Zi:>Gkj8T.bXaY6~>%AI9_PrivateDataEnd