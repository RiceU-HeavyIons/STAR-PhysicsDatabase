%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: fig16.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Gary Westfall
%%CreationDate: 2/25/10
%%BoundingBox: 0 0 507 362
%%HiResBoundingBox: 0 0 506.5576 361.6172
%%CropBox: 0 0 506.5576 361.6172
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-01-20T14:49:32-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2010-01-20T14:49:33-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2010-01-20T14:49:33-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>184</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq890K28uXv5i&#xA;ec7HULayub43drPHHcKJJ/SGm2iVVJI+PDlXdW69RkPEjxcN7uQdJlGIZTE+GTXF0tlv+E/Kv/Vm&#xA;sf8ApGh/5pybju/wn5V/6s1j/wBI0P8AzTirv8J+Vf8AqzWP/SND/wA04q7/AAn5V/6s1j/0jQ/8&#xA;04q7/CflX/qzWP8A0jQ/804q7/CflX/qzWP/AEjQ/wDNOKsO/MzyLaXem2I0vQFubeOeRr+100Q2&#xA;l1IrW0qQFZeUHwpctG7DmNhXcAgqsP1v8rfOF5qmkiezgWcWsFmbvTooo7SHkxW7vLgNNCzXCRtz&#xA;iUQOjMoXoWxVKr7yb5r0bTXsNS0WC80yW80sQau68ZI1/TcKxQhRJdXNWSQg8hJJwIDSuV3Ve6R+&#xA;U/LJjUyaJp6yEDmq28TKGpuAxRaj3oMVXf4T8q/9Wax/6Rof+acVd/hPyr/1ZrH/AKRof+acVd/h&#xA;Pyr/ANWax/6Rof8AmnFXf4T8q/8AVmsf+kaH/mnFXf4T8q/9Wax/6Rof+acVYH+bn5epqOk2A0HR&#xA;w0lvcPNJb2EMEbSt6EiQpMxnsW9H1HHLi/gabVCqF80/lz5jvIYJ7KwsYdQFjqMHoWSxRWokkgH1&#xA;aRvVXmZvUqFapVevvirFp/yp82ROdW0axmitGllNr5bveEksVlGwbhJN9YdGkmdjQEmQJssyU44q&#xA;y/8ALnQ7e78x+Z21fy5Z205nsjcW4hWSK3nbSrJ5IY2+KE/G5rwFfEkEYq9A/wAJ+Vf+rNY/9I0P&#xA;/NOKu/wn5V/6s1j/ANI0P/NOKu/wn5V/6s1j/wBI0P8AzTirv8J+Vf8AqzWP/SND/wA04q7/AAn5&#xA;V/6s1j/0jQ/804qx38xPIOn6l5F16z0PTobbWZbG4/RslpFbwzG5EZMKLIy0Tm4Ck1Boeo64qxSH&#xA;yBrcXnDUrmDQ4hbE3puZ5vRa2nt5XhNiljAS6xzwxJIpLRovI/EWDYqxPTvyz8y3dsiv5cvtMkuC&#xA;Fs/9JjkNhOXtg808s00n1lfSjkavpceRZREK1ZVOdF8leadATVrPU9Jt9Q0cafetBrUqIJYfQNwY&#xA;uKySzzc2YhgWZ2KMtX/d0xV7rirz/wDNPzDr2n3el6fpWqHRlubXVL2e/WOCU8tOthLHDS4SSMKz&#xA;PyfblxU0K9QqkP5ifmf5t0nyZ5avtPsri2vNVgs73VtQjsp7uG2R2g9S3HpxTIsspmKr6lNg1Pj4&#xA;gqsq8nxadL5285Xq2/8ApzXdqguHhZXEB0yzYRl2jTj8RqU5k+IGR4Bd1u3HUZDjGPiPADfD0vvp&#xA;mmSaWEav+Zw04X92NEu7rRdPuJLOXUoWjatxBX1FWAMZeAZTHypUvsBQ1xV0n5zeQI5FikvJ0mMU&#xA;shhNpc8w1vI8MsJX0+XrJJE6mPr8PyxVZd/nZ+XtmsjXV3cxCPiw5Wd18aN6oMkdI/jRfq0vIrX7&#xA;Pyqq1efm/wCX4otcmtYJ54dDtUu5LiVGtYZle4ktj6Uk4RWRXhasg+H3xVDad+efkqW2SS/mNo8j&#xA;3Co0Nb22dbZDIzxXVuHidWVSBQ/aBXtiqtZ/nT5UuZJgbfUIY4ZJIxzsrn1W9Ic2kEKxtIIxGGYs&#xA;wFKHauKqI/Pv8uYuaX189pcJJLCYTFLJWWOVo0iDxqyerIqiRUrXia4qv/M/UoNZ/K36/pcpWO+u&#xA;tIks5poX+Eyana+mzwNGzni1CUKVPSmQyAmJETRcjSTxwyxlljxYwdxysM20db1dJs1vpxc3ghT6&#xA;xcCMw834jk3pndKnthgCAL3LHUShLJI4xwwJ2HOh3Wi8k0uxV2KuxV2KuxV2KuxVgvlK6tU/MXzv&#xA;bEgXU17bOi8DUpHpdiDVxENgXGxlP+qOrC2XCautmdYWLsVdirsVdirsVdirsVSrzZ/yius/8wNz&#xA;/wAmWxVNcVQOsaDoetW6W2s6da6lbxuJY4byGOdFkXo4WRWAYV64q22h6K0FxA2n2zQXkouLuIwx&#xA;lJZl40lkWlHcemnxHf4R4YqwuKwvdU1fzxp2l6udI1JtVspRcRBJJBGmm2RNYy5PFqUrxX5sKjK8&#xA;sJSjQPCXN7P1GPDlE8kBljR9JNdHoCAqiqzFyAAWNKk+O1Bljhk7sav/AMuPKd/fy3l1bzO00huG&#xA;txc3C2wuGXg06W4cRLKyfCXC1oT/ADNVQl8n5Nfl/JqsmqGxlF1NcTXcvG6uBG09y8sksjRiTgSz&#xA;Tt222pTFUqtvyI8syXmoz6zc3GpR3bqbOASzW62sSvO5jiKSnjz+tyBgnBfBQcVZHa/lr5Rtm1Ax&#xA;28xXUlSOeN7md0WOOZrhY4VZyIk9aRnolOvhtirXmj8svJ/mfUl1HV7aWW7WBbbnFcTwBokZ2VWW&#xA;J0VqetJ1H7R9qKqVx+VXkyeeWcwXMck0hldoby6iPxx+lIgKSKQjoSGXpue+KoSb8lPy6luZrn9H&#xA;yRSzGR3MNzcRD1ZCSZQEkA9QBuIb+X4emKqfn3R9K0L8t7bS7CMW2m2N/oscSM5oqLq1r9p3kjPu&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">balance_separate_subtract_shuffled</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:35255C8C22206811B005DCFDD4A218DC</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:35255C8C22206811B005DCFDD4A218DC</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:36e0cac2-6b4a-ba47-8beb-e35fc4bc6fca</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:34255C8C22206811B005DCFDD4A218DC</stRef:instanceID>
            <stRef:documentID>xmp.did:34255C8C22206811B005DCFDD4A218DC</stRef:documentID>
            <stRef:originalDocumentID>uuid:36e0cac2-6b4a-ba47-8beb-e35fc4bc6fca</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:34255C8C22206811B005DCFDD4A218DC</stEvt:instanceID>
                  <stEvt:when>2010-01-20T14:49:24-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:35255C8C22206811B005DCFDD4A218DC</stEvt:instanceID>
                  <stEvt:when>2010-01-20T14:49:33-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -361.617 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 361.617 li
506.558 361.617 li
506.558 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
52.4937 320.066 mo
203.494 320.066 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
203.309 320.082 mo
354.308 320.082 li
@
354.558 320.332 mo
506.058 320.332 li
@
51.7485 210.301 mo
202.749 210.301 li
@
202.563 210.316 mo
353.563 210.316 li
@
353.813 210.566 mo
505.313 210.566 li
@
51.8789 101.25 mo
202.879 101.25 li
@
202.694 101.265 mo
353.693 101.265 li
@
353.943 101.515 mo
505.443 101.515 li
@
51.8789 110.25 mo
202.879 110.25 li
51.8789 110.25 mo
51.8789 .5 li
202.879 .5 li
202.879 110.25 li
51.8789 110.25 li
cp
@
200.879 108.75 mo
200.879 110.25 li
196.129 107 mo
196.129 110.25 li
196.129 107 mo
196.129 110.25 li
191.129 108.75 mo
191.129 110.25 li
186.379 108.75 mo
186.379 110.25 li
181.629 108.75 mo
181.629 110.25 li
176.879 108.75 mo
176.879 110.25 li
172.129 107 mo
172.129 110.25 li
167.129 108.75 mo
167.129 110.25 li
162.379 108.75 mo
162.379 110.25 li
157.629 108.75 mo
157.629 110.25 li
152.879 108.75 mo
152.879 110.25 li
147.879 107 mo
147.879 110.25 li
143.129 108.75 mo
143.129 110.25 li
138.379 108.75 mo
138.379 110.25 li
133.629 108.75 mo
133.629 110.25 li
128.629 108.75 mo
128.629 110.25 li
123.879 107 mo
123.879 110.25 li
119.129 108.75 mo
119.129 110.25 li
114.379 108.75 mo
114.379 110.25 li
109.379 108.75 mo
109.379 110.25 li
104.629 108.75 mo
104.629 110.25 li
99.8789 107 mo
99.8789 110.25 li
95.1289 108.75 mo
95.1289 110.25 li
90.1289 108.75 mo
90.1289 110.25 li
85.3789 108.75 mo
85.3789 110.25 li
80.6289 108.75 mo
80.6289 110.25 li
75.8789 107 mo
75.8789 110.25 li
70.8789 108.75 mo
70.8789 110.25 li
66.1289 108.75 mo
66.1289 110.25 li
61.3789 108.75 mo
61.3789 110.25 li
56.6289 108.75 mo
56.6289 110.25 li
51.8789 107 mo
51.8789 110.25 li
@
51.8789 110.25 mo
51.8789 .5 li
@
54.1289 2.25 mo
51.8789 2.25 li
54.1289 6 mo
51.8789 6 li
56.3789 9.5 mo
51.8789 9.5 li
54.1289 108.5 mo
51.8789 108.5 li
54.1289 104.75 mo
51.8789 104.75 li
56.3789 101.25 mo
51.8789 101.25 li
56.3789 9.5 mo
51.8789 9.5 li
54.1289 13.25 mo
51.8789 13.25 li
54.1289 17 mo
51.8789 17 li
54.1289 20.5 mo
51.8789 20.5 li
54.1289 24.25 mo
51.8789 24.25 li
56.3789 28 mo
51.8789 28 li
54.1289 31.5 mo
51.8789 31.5 li
54.1289 35.25 mo
51.8789 35.25 li
54.1289 39 mo
51.8789 39 li
54.1289 42.5 mo
51.8789 42.5 li
56.3789 46.25 mo
51.8789 46.25 li
54.1289 50 mo
51.8789 50 li
54.1289 53.5 mo
51.8789 53.5 li
54.1289 57.25 mo
51.8789 57.25 li
54.1289 61 mo
51.8789 61 li
56.3789 64.5 mo
51.8789 64.5 li
54.1289 68.25 mo
51.8789 68.25 li
54.1289 71.75 mo
51.8789 71.75 li
54.1289 75.5 mo
51.8789 75.5 li
54.1289 79.25 mo
51.8789 79.25 li
56.3789 82.75 mo
51.8789 82.75 li
54.1289 86.5 mo
51.8789 86.5 li
54.1289 90.25 mo
51.8789 90.25 li
54.1289 93.75 mo
51.8789 93.75 li
54.1289 97.5 mo
51.8789 97.5 li
56.3789 101.25 mo
51.8789 101.25 li
@
202.679 102.56 mo
202.679 100.904 201.335 99.5601 199.679 99.5601 cv
198.023 99.5601 196.679 100.904 196.679 102.56 cv
196.679 104.216 198.023 105.56 199.679 105.56 cv
201.335 105.56 202.679 104.216 202.679 102.56 cv
1 0 0 rgb
ef
196.439 96.0801 mo
196.439 94.4238 195.095 93.0801 193.439 93.0801 cv
191.783 93.0801 190.439 94.4238 190.439 96.0801 cv
190.439 97.7358 191.783 99.0801 193.439 99.0801 cv
195.095 99.0801 196.439 97.7358 196.439 96.0801 cv
ef
190.199 96.3198 mo
190.199 94.6641 188.855 93.3198 187.199 93.3198 cv
185.543 93.3198 184.199 94.6641 184.199 96.3198 cv
184.199 97.9761 185.543 99.3198 187.199 99.3198 cv
188.855 99.3198 190.199 97.9761 190.199 96.3198 cv
ef
183.959 101.84 mo
183.959 100.184 182.615 98.8398 180.959 98.8398 cv
179.303 98.8398 177.959 100.184 177.959 101.84 cv
177.959 103.496 179.303 104.84 180.959 104.84 cv
182.615 104.84 183.959 103.496 183.959 101.84 cv
ef
177.719 101.6 mo
177.719 99.9438 176.375 98.6001 174.719 98.6001 cv
173.063 98.6001 171.719 99.9438 171.719 101.6 cv
171.719 103.256 173.063 104.6 174.719 104.6 cv
176.375 104.6 177.719 103.256 177.719 101.6 cv
ef
171.239 94.3999 mo
171.239 92.7441 169.895 91.3999 168.239 91.3999 cv
166.583 91.3999 165.239 92.7441 165.239 94.3999 cv
165.239 96.0562 166.583 97.3999 168.239 97.3999 cv
169.895 97.3999 171.239 96.0562 171.239 94.3999 cv
ef
164.879 93.9199 mo
164.879 92.2642 163.535 90.9199 161.879 90.9199 cv
160.223 90.9199 158.879 92.2642 158.879 93.9199 cv
158.879 95.5762 160.223 96.9199 161.879 96.9199 cv
163.535 96.9199 164.879 95.5762 164.879 93.9199 cv
ef
158.519 99.4399 mo
158.519 97.7842 157.175 96.4399 155.519 96.4399 cv
153.863 96.4399 152.519 97.7842 152.519 99.4399 cv
152.519 101.096 153.863 102.44 155.519 102.44 cv
157.175 102.44 158.519 101.096 158.519 99.4399 cv
ef
152.279 98.48 mo
152.279 96.8242 150.935 95.48 149.279 95.48 cv
147.623 95.48 146.279 96.8242 146.279 98.48 cv
146.279 100.136 147.623 101.48 149.279 101.48 cv
150.935 101.48 152.279 100.136 152.279 98.48 cv
ef
146.039 91.52 mo
146.039 89.8638 144.695 88.52 143.039 88.52 cv
141.383 88.52 140.039 89.8638 140.039 91.52 cv
140.039 93.1758 141.383 94.52 143.039 94.52 cv
144.695 94.52 146.039 93.1758 146.039 91.52 cv
ef
139.799 90.3198 mo
139.799 88.6641 138.455 87.3198 136.799 87.3198 cv
135.143 87.3198 133.799 88.6641 133.799 90.3198 cv
133.799 91.9761 135.143 93.3198 136.799 93.3198 cv
138.455 93.3198 139.799 91.9761 139.799 90.3198 cv
ef
133.319 93.6802 mo
133.319 92.0239 131.975 90.6802 130.319 90.6802 cv
128.663 90.6802 127.319 92.0239 127.319 93.6802 cv
127.319 95.3359 128.663 96.6802 130.319 96.6802 cv
131.975 96.6802 133.319 95.3359 133.319 93.6802 cv
ef
127.079 91.04 mo
127.079 89.3838 125.735 88.04 124.079 88.04 cv
122.423 88.04 121.079 89.3838 121.079 91.04 cv
121.079 92.6958 122.423 94.04 124.079 94.04 cv
125.735 94.04 127.079 92.6958 127.079 91.04 cv
ef
120.839 83.6001 mo
120.839 81.9438 119.495 80.6001 117.839 80.6001 cv
116.183 80.6001 114.839 81.9438 114.839 83.6001 cv
114.839 85.2559 116.183 86.6001 117.839 86.6001 cv
119.495 86.6001 120.839 85.2559 120.839 83.6001 cv
ef
114.599 80.2402 mo
114.599 78.584 113.255 77.2402 111.599 77.2402 cv
109.943 77.2402 108.599 78.584 108.599 80.2402 cv
108.599 81.896 109.943 83.2402 111.599 83.2402 cv
113.255 83.2402 114.599 81.896 114.599 80.2402 cv
ef
108.359 82.3999 mo
108.359 80.7441 107.015 79.3999 105.359 79.3999 cv
103.703 79.3999 102.359 80.7441 102.359 82.3999 cv
102.359 84.0562 103.703 85.3999 105.359 85.3999 cv
107.015 85.3999 108.359 84.0562 108.359 82.3999 cv
ef
101.879 77.8398 mo
101.879 76.1841 100.535 74.8398 98.8789 74.8398 cv
97.2227 74.8398 95.8789 76.1841 95.8789 77.8398 cv
95.8789 79.4961 97.2227 80.8398 98.8789 80.8398 cv
100.535 80.8398 101.879 79.4961 101.879 77.8398 cv
ef
95.6387 68.2402 mo
95.6387 66.584 94.2949 65.2402 92.6387 65.2402 cv
90.9829 65.2402 89.6387 66.584 89.6387 68.2402 cv
89.6387 69.896 90.9829 71.2402 92.6387 71.2402 cv
94.2949 71.2402 95.6387 69.896 95.6387 68.2402 cv
ef
89.3989 64.6401 mo
89.3989 62.9839 88.0547 61.6401 86.3989 61.6401 cv
84.7427 61.6401 83.3989 62.9839 83.3989 64.6401 cv
83.3989 66.2959 84.7427 67.6401 86.3989 67.6401 cv
88.0547 67.6401 89.3989 66.2959 89.3989 64.6401 cv
ef
83.1587 68 mo
83.1587 66.3438 81.8149 65 80.1587 65 cv
78.5029 65 77.1587 66.3438 77.1587 68 cv
77.1587 69.6563 78.5029 71 80.1587 71 cv
81.8149 71 83.1587 69.6563 83.1587 68 cv
ef
76.9189 63.9199 mo
76.9189 62.2642 75.5747 60.9199 73.9189 60.9199 cv
72.2627 60.9199 70.9189 62.2642 70.9189 63.9199 cv
70.9189 65.5762 72.2627 66.9199 73.9189 66.9199 cv
75.5747 66.9199 76.9189 65.5762 76.9189 63.9199 cv
ef
70.439 52.1602 mo
70.439 50.5039 69.0947 49.1602 67.439 49.1602 cv
65.7827 49.1602 64.439 50.5039 64.439 52.1602 cv
64.439 53.8159 65.7827 55.1602 67.439 55.1602 cv
69.0947 55.1602 70.439 53.8159 70.439 52.1602 cv
ef
64.1987 37.04 mo
64.1987 35.3838 62.855 34.04 61.1987 34.04 cv
59.543 34.04 58.1987 35.3838 58.1987 37.04 cv
58.1987 38.6958 59.543 40.04 61.1987 40.04 cv
62.855 40.04 64.1987 38.6958 64.1987 37.04 cv
ef
57.959 15.4399 mo
57.959 13.7842 56.6147 12.4399 54.959 12.4399 cv
53.3027 12.4399 51.959 13.7842 51.959 15.4399 cv
51.959 17.0957 53.3027 18.4399 54.959 18.4399 cv
56.6147 18.4399 57.959 17.0957 57.959 15.4399 cv
ef
54.8789 78.75 mo
51.8789 78.75 li
51.8789 84.75 li
57.8789 84.75 li
57.8789 78.75 li
54.8789 78.75 li
cp
61.1289 78 mo
58.1289 78 li
58.1289 84 li
64.1289 84 li
64.1289 78 li
61.1289 78 li
cp
67.3789 79 mo
64.3789 79 li
64.3789 85 li
70.3789 85 li
70.3789 79 li
67.3789 79 li
cp
73.8789 78.5 mo
70.8789 78.5 li
70.8789 84.5 li
76.8789 84.5 li
76.8789 78.5 li
73.8789 78.5 li
cp
80.1289 78.25 mo
77.1289 78.25 li
77.1289 84.25 li
83.1289 84.25 li
83.1289 78.25 li
80.1289 78.25 li
cp
86.3789 78.5 mo
83.3789 78.5 li
83.3789 84.5 li
89.3789 84.5 li
89.3789 78.5 li
86.3789 78.5 li
cp
92.6289 78.5 mo
89.6289 78.5 li
89.6289 84.5 li
95.6289 84.5 li
95.6289 78.5 li
92.6289 78.5 li
cp
98.8789 78 mo
95.8789 78 li
95.8789 84 li
101.879 84 li
101.879 78 li
98.8789 78 li
cp
105.379 78.75 mo
102.379 78.75 li
102.379 84.75 li
108.379 84.75 li
108.379 78.75 li
105.379 78.75 li
cp
111.629 78.75 mo
108.629 78.75 li
108.629 84.75 li
114.629 84.75 li
114.629 78.75 li
111.629 78.75 li
cp
117.879 78.25 mo
114.879 78.25 li
114.879 84.25 li
120.879 84.25 li
120.879 78.25 li
117.879 78.25 li
cp
124.129 79 mo
121.129 79 li
121.129 85 li
127.129 85 li
127.129 79 li
124.129 79 li
cp
130.379 78.5 mo
127.379 78.5 li
127.379 84.5 li
133.379 84.5 li
133.379 78.5 li
130.379 78.5 li
cp
136.879 78.75 mo
133.879 78.75 li
133.879 84.75 li
139.879 84.75 li
139.879 78.75 li
136.879 78.75 li
cp
143.129 79 mo
140.129 79 li
140.129 85 li
146.129 85 li
146.129 79 li
143.129 79 li
cp
149.379 78.75 mo
146.379 78.75 li
146.379 84.75 li
152.379 84.75 li
152.379 78.75 li
149.379 78.75 li
cp
155.629 78.5 mo
152.629 78.5 li
152.629 84.5 li
158.629 84.5 li
158.629 78.5 li
155.629 78.5 li
cp
161.879 79.25 mo
158.879 79.25 li
158.879 85.25 li
164.879 85.25 li
164.879 79.25 li
161.879 79.25 li
cp
168.129 78.75 mo
165.129 78.75 li
165.129 84.75 li
171.129 84.75 li
171.129 78.75 li
168.129 78.75 li
cp
174.629 78.5 mo
171.629 78.5 li
171.629 84.5 li
177.629 84.5 li
177.629 78.5 li
174.629 78.5 li
cp
180.879 78 mo
177.879 78 li
177.879 84 li
183.879 84 li
183.879 78 li
180.879 78 li
cp
187.129 78 mo
184.129 78 li
184.129 84 li
190.129 84 li
190.129 78 li
187.129 78 li
cp
193.379 78.25 mo
190.379 78.25 li
190.379 84.25 li
196.379 84.25 li
196.379 78.25 li
193.379 78.25 li
cp
199.629 78.5 mo
196.629 78.5 li
196.629 84.5 li
202.629 84.5 li
202.629 78.5 li
199.629 78.5 li
cp
0 .4 0 rgb
@
202.694 110.265 mo
353.693 110.265 li
202.694 110.265 mo
202.694 .514648 li
353.693 .514648 li
353.693 110.265 li
202.694 110.265 li
cp
0 0 0 rgb
@
351.693 108.765 mo
351.693 110.265 li
346.943 107.015 mo
346.943 110.265 li
346.943 107.015 mo
346.943 110.265 li
342.193 108.765 mo
342.193 110.265 li
337.193 108.765 mo
337.193 110.265 li
332.443 108.765 mo
332.443 110.265 li
327.693 108.765 mo
327.693 110.265 li
322.943 107.015 mo
322.943 110.265 li
317.943 108.765 mo
317.943 110.265 li
313.194 108.765 mo
313.194 110.265 li
308.444 108.765 mo
308.444 110.265 li
303.694 108.765 mo
303.694 110.265 li
298.694 107.015 mo
298.694 110.265 li
293.944 108.765 mo
293.944 110.265 li
289.194 108.765 mo
289.194 110.265 li
284.444 108.765 mo
284.444 110.265 li
279.444 108.765 mo
279.444 110.265 li
274.694 107.015 mo
274.694 110.265 li
269.944 108.765 mo
269.944 110.265 li
265.194 108.765 mo
265.194 110.265 li
260.444 108.765 mo
260.444 110.265 li
255.444 108.765 mo
255.444 110.265 li
250.694 107.015 mo
250.694 110.265 li
245.944 108.765 mo
245.944 110.265 li
241.194 108.765 mo
241.194 110.265 li
236.194 108.765 mo
236.194 110.265 li
231.444 108.765 mo
231.444 110.265 li
226.694 107.015 mo
226.694 110.265 li
221.944 108.765 mo
221.944 110.265 li
216.944 108.765 mo
216.944 110.265 li
212.194 108.765 mo
212.194 110.265 li
207.444 108.765 mo
207.444 110.265 li
202.694 107.015 mo
202.694 110.265 li
@
202.694 110.265 mo
202.694 .514648 li
@
204.944 2.26465 mo
202.694 2.26465 li
204.944 6.01465 mo
202.694 6.01465 li
207.194 9.51465 mo
202.694 9.51465 li
204.944 108.515 mo
202.694 108.515 li
204.944 104.765 mo
202.694 104.765 li
207.194 101.265 mo
202.694 101.265 li
207.194 9.51465 mo
202.694 9.51465 li
204.944 13.2646 mo
202.694 13.2646 li
204.944 17.0146 mo
202.694 17.0146 li
204.944 20.5146 mo
202.694 20.5146 li
204.944 24.2646 mo
202.694 24.2646 li
207.194 28.0146 mo
202.694 28.0146 li
204.944 31.5146 mo
202.694 31.5146 li
204.944 35.2646 mo
202.694 35.2646 li
204.944 39.0146 mo
202.694 39.0146 li
204.944 42.5146 mo
202.694 42.5146 li
207.194 46.2646 mo
202.694 46.2646 li
204.944 50.0146 mo
202.694 50.0146 li
204.944 53.5146 mo
202.694 53.5146 li
204.944 57.2646 mo
202.694 57.2646 li
204.944 61.0146 mo
202.694 61.0146 li
207.194 64.5146 mo
202.694 64.5146 li
204.944 68.2646 mo
202.694 68.2646 li
204.944 71.7646 mo
202.694 71.7646 li
204.944 75.5146 mo
202.694 75.5146 li
204.944 79.2646 mo
202.694 79.2646 li
207.194 82.7646 mo
202.694 82.7646 li
204.944 86.5146 mo
202.694 86.5146 li
204.944 90.2646 mo
202.694 90.2646 li
204.944 93.7646 mo
202.694 93.7646 li
204.944 97.5146 mo
202.694 97.5146 li
207.194 101.265 mo
202.694 101.265 li
@
353.385 101.375 mo
353.385 99.7188 352.039 98.3745 350.385 98.3745 cv
348.729 98.3745 347.385 99.7188 347.385 101.375 cv
347.385 103.031 348.729 104.375 350.385 104.375 cv
352.039 104.375 353.385 103.031 353.385 101.375 cv
1 0 0 rgb
ef
347.145 96.8145 mo
347.145 95.1587 345.801 93.8145 344.145 93.8145 cv
342.488 93.8145 341.145 95.1587 341.145 96.8145 cv
341.145 98.4707 342.488 99.8145 344.145 99.8145 cv
345.801 99.8145 347.145 98.4707 347.145 96.8145 cv
ef
340.904 96.3345 mo
340.904 94.6787 339.561 93.3345 337.904 93.3345 cv
336.248 93.3345 334.904 94.6787 334.904 96.3345 cv
334.904 97.9907 336.248 99.3345 337.904 99.3345 cv
339.561 99.3345 340.904 97.9907 340.904 96.3345 cv
ef
334.664 100.175 mo
334.664 98.5186 333.32 97.1748 331.664 97.1748 cv
330.008 97.1748 328.664 98.5186 328.664 100.175 cv
328.664 101.831 330.008 103.175 331.664 103.175 cv
333.32 103.175 334.664 101.831 334.664 100.175 cv
ef
328.424 100.415 mo
328.424 98.7588 327.08 97.4146 325.424 97.4146 cv
323.768 97.4146 322.424 98.7588 322.424 100.415 cv
322.424 102.071 323.768 103.415 325.424 103.415 cv
327.08 103.415 328.424 102.071 328.424 100.415 cv
ef
322.184 95.3745 mo
322.184 93.7188 320.84 92.3745 319.184 92.3745 cv
317.527 92.3745 316.184 93.7188 316.184 95.3745 cv
316.184 97.0308 317.527 98.3745 319.184 98.3745 cv
320.84 98.3745 322.184 97.0308 322.184 95.3745 cv
ef
315.704 95.3745 mo
315.704 93.7188 314.36 92.3745 312.704 92.3745 cv
311.047 92.3745 309.704 93.7188 309.704 95.3745 cv
309.704 97.0308 311.047 98.3745 312.704 98.3745 cv
314.36 98.3745 315.704 97.0308 315.704 95.3745 cv
ef
309.463 97.7744 mo
309.463 96.1187 308.12 94.7744 306.463 94.7744 cv
304.808 94.7744 303.463 96.1187 303.463 97.7744 cv
303.463 99.4307 304.808 100.774 306.463 100.774 cv
308.12 100.774 309.463 99.4307 309.463 97.7744 cv
ef
303.224 96.8145 mo
303.224 95.1587 301.879 93.8145 300.224 93.8145 cv
298.568 93.8145 297.224 95.1587 297.224 96.8145 cv
297.224 98.4707 298.568 99.8145 300.224 99.8145 cv
301.879 99.8145 303.224 98.4707 303.224 96.8145 cv
ef
296.984 92.4946 mo
296.984 90.8389 295.64 89.4946 293.984 89.4946 cv
292.328 89.4946 290.984 90.8389 290.984 92.4946 cv
290.984 94.1504 292.328 95.4946 293.984 95.4946 cv
295.64 95.4946 296.984 94.1504 296.984 92.4946 cv
ef
290.744 90.0947 mo
290.744 88.4385 289.4 87.0947 287.744 87.0947 cv
286.087 87.0947 284.744 88.4385 284.744 90.0947 cv
284.744 91.7505 286.087 93.0947 287.744 93.0947 cv
289.4 93.0947 290.744 91.7505 290.744 90.0947 cv
ef
284.264 91.7744 mo
284.264 90.1187 282.919 88.7744 281.264 88.7744 cv
279.608 88.7744 278.264 90.1187 278.264 91.7744 cv
278.264 93.4307 279.608 94.7744 281.264 94.7744 cv
282.919 94.7744 284.264 93.4307 284.264 91.7744 cv
ef
278.024 89.3745 mo
278.024 87.7188 276.68 86.3745 275.024 86.3745 cv
273.368 86.3745 272.024 87.7188 272.024 89.3745 cv
272.024 91.0308 273.368 92.3745 275.024 92.3745 cv
276.68 92.3745 278.024 91.0308 278.024 89.3745 cv
ef
271.784 83.3745 mo
271.784 81.7188 270.44 80.3745 268.784 80.3745 cv
267.128 80.3745 265.784 81.7188 265.784 83.3745 cv
265.784 85.0308 267.128 86.3745 268.784 86.3745 cv
270.44 86.3745 271.784 85.0308 271.784 83.3745 cv
ef
265.544 80.7344 mo
265.544 79.0786 264.2 77.7344 262.544 77.7344 cv
260.888 77.7344 259.544 79.0786 259.544 80.7344 cv
259.544 82.3906 260.888 83.7344 262.544 83.7344 cv
264.2 83.7344 265.544 82.3906 265.544 80.7344 cv
ef
259.304 80.0146 mo
259.304 78.3584 257.96 77.0146 256.304 77.0146 cv
254.648 77.0146 253.304 78.3584 253.304 80.0146 cv
253.304 81.6704 254.648 83.0146 256.304 83.0146 cv
257.96 83.0146 259.304 81.6704 259.304 80.0146 cv
ef
252.944 76.1748 mo
252.944 74.5186 251.6 73.1748 249.944 73.1748 cv
248.288 73.1748 246.944 74.5186 246.944 76.1748 cv
246.944 77.8306 248.288 79.1748 249.944 79.1748 cv
251.6 79.1748 252.944 77.8306 252.944 76.1748 cv
ef
246.344 67.7744 mo
246.344 66.1187 245 64.7744 243.344 64.7744 cv
241.688 64.7744 240.344 66.1187 240.344 67.7744 cv
240.344 69.4307 241.688 70.7744 243.344 70.7744 cv
245 70.7744 246.344 69.4307 246.344 67.7744 cv
ef
240.104 64.4146 mo
240.104 62.7588 238.76 61.4146 237.104 61.4146 cv
235.448 61.4146 234.104 62.7588 234.104 64.4146 cv
234.104 66.0708 235.448 67.4146 237.104 67.4146 cv
238.76 67.4146 240.104 66.0708 240.104 64.4146 cv
ef
233.864 65.0146 mo
233.864 63.3584 232.52 62.0146 230.864 62.0146 cv
229.208 62.0146 227.864 63.3584 227.864 65.0146 cv
227.864 66.6709 229.208 68.0146 230.864 68.0146 cv
232.52 68.0146 233.864 66.6709 233.864 65.0146 cv
ef
227.624 61.5347 mo
227.624 59.8789 226.28 58.5347 224.624 58.5347 cv
222.968 58.5347 221.624 59.8789 221.624 61.5347 cv
221.624 63.1904 222.968 64.5347 224.624 64.5347 cv
226.28 64.5347 227.624 63.1904 227.624 61.5347 cv
ef
221.384 50.9746 mo
221.384 49.3184 220.04 47.9746 218.384 47.9746 cv
216.728 47.9746 215.384 49.3184 215.384 50.9746 cv
215.384 52.6309 216.728 53.9746 218.384 53.9746 cv
220.04 53.9746 221.384 52.6309 221.384 50.9746 cv
ef
214.904 39.4546 mo
214.904 37.7988 213.56 36.4546 211.904 36.4546 cv
210.248 36.4546 208.904 37.7988 208.904 39.4546 cv
208.904 41.1104 210.248 42.4546 211.904 42.4546 cv
213.56 42.4546 214.904 41.1104 214.904 39.4546 cv
ef
208.664 22.1748 mo
208.664 20.5186 207.32 19.1748 205.664 19.1748 cv
204.008 19.1748 202.664 20.5186 202.664 22.1748 cv
202.664 23.8306 204.008 25.1748 205.664 25.1748 cv
207.32 25.1748 208.664 23.8306 208.664 22.1748 cv
ef
205.694 77.7646 mo
202.694 77.7646 li
202.694 83.7646 li
208.694 83.7646 li
208.694 77.7646 li
205.694 77.7646 li
cp
211.944 78.0146 mo
208.944 78.0146 li
208.944 84.0146 li
214.944 84.0146 li
214.944 78.0146 li
211.944 78.0146 li
cp
218.444 78.2646 mo
215.444 78.2646 li
215.444 84.2646 li
221.444 84.2646 li
221.444 78.2646 li
218.444 78.2646 li
cp
224.694 77.2646 mo
221.694 77.2646 li
221.694 83.2646 li
227.694 83.2646 li
227.694 77.2646 li
224.694 77.2646 li
cp
230.944 78.0146 mo
227.944 78.0146 li
227.944 84.0146 li
233.944 84.0146 li
233.944 78.0146 li
230.944 78.0146 li
cp
237.194 77.7646 mo
234.194 77.7646 li
234.194 83.7646 li
240.194 83.7646 li
240.194 77.7646 li
237.194 77.7646 li
cp
243.444 78.5146 mo
240.444 78.5146 li
240.444 84.5146 li
246.444 84.5146 li
246.444 78.5146 li
243.444 78.5146 li
cp
249.944 77.7646 mo
246.944 77.7646 li
246.944 83.7646 li
252.944 83.7646 li
252.944 77.7646 li
249.944 77.7646 li
cp
256.194 78.0146 mo
253.194 78.0146 li
253.194 84.0146 li
259.194 84.0146 li
259.194 78.0146 li
256.194 78.0146 li
cp
262.444 78.2646 mo
259.444 78.2646 li
259.444 84.2646 li
265.444 84.2646 li
265.444 78.2646 li
262.444 78.2646 li
cp
268.694 78.0146 mo
265.694 78.0146 li
265.694 84.0146 li
271.694 84.0146 li
271.694 78.0146 li
268.694 78.0146 li
cp
274.944 78.0146 mo
271.944 78.0146 li
271.944 84.0146 li
277.944 84.0146 li
277.944 78.0146 li
274.944 78.0146 li
cp
281.194 77.7646 mo
278.194 77.7646 li
278.194 83.7646 li
284.194 83.7646 li
284.194 77.7646 li
281.194 77.7646 li
cp
287.694 78.0146 mo
284.694 78.0146 li
284.694 84.0146 li
290.694 84.0146 li
290.694 78.0146 li
287.694 78.0146 li
cp
293.944 78.2646 mo
290.944 78.2646 li
290.944 84.2646 li
296.944 84.2646 li
296.944 78.2646 li
293.944 78.2646 li
cp
300.194 78.2646 mo
297.194 78.2646 li
297.194 84.2646 li
303.194 84.2646 li
303.194 78.2646 li
300.194 78.2646 li
cp
306.444 78.2646 mo
303.444 78.2646 li
303.444 84.2646 li
309.444 84.2646 li
309.444 78.2646 li
306.444 78.2646 li
cp
312.694 77.7646 mo
309.694 77.7646 li
309.694 83.7646 li
315.694 83.7646 li
315.694 77.7646 li
312.694 77.7646 li
cp
319.193 78.0146 mo
316.194 78.0146 li
316.194 84.0146 li
322.193 84.0146 li
322.193 78.0146 li
319.193 78.0146 li
cp
325.443 78.5146 mo
322.443 78.5146 li
322.443 84.5146 li
328.443 84.5146 li
328.443 78.5146 li
325.443 78.5146 li
cp
331.693 78.5146 mo
328.693 78.5146 li
328.693 84.5146 li
334.693 84.5146 li
334.693 78.5146 li
331.693 78.5146 li
cp
337.943 77.7646 mo
334.943 77.7646 li
334.943 83.7646 li
340.943 83.7646 li
340.943 77.7646 li
337.943 77.7646 li
cp
344.193 78.5146 mo
341.193 78.5146 li
341.193 84.5146 li
347.193 84.5146 li
347.193 78.5146 li
344.193 78.5146 li
cp
350.443 78.5146 mo
347.443 78.5146 li
347.443 84.5146 li
353.443 84.5146 li
353.443 78.5146 li
350.443 78.5146 li
cp
0 .4 0 rgb
@
353.943 110.515 mo
505.443 110.515 li
353.943 110.515 mo
353.943 .764648 li
505.443 .764648 li
505.443 110.515 li
353.943 110.515 li
cp
0 0 0 rgb
@
503.443 109.015 mo
503.443 110.515 li
498.693 107.265 mo
498.693 110.515 li
498.693 107.265 mo
498.693 110.515 li
493.943 109.015 mo
493.943 110.515 li
488.943 109.015 mo
488.943 110.515 li
484.193 109.015 mo
484.193 110.515 li
479.443 109.015 mo
479.443 110.515 li
474.443 107.265 mo
474.443 110.515 li
469.693 109.015 mo
469.693 110.515 li
464.943 109.015 mo
464.943 110.515 li
460.193 109.015 mo
460.193 110.515 li
455.193 109.015 mo
455.193 110.515 li
450.443 107.265 mo
450.443 110.515 li
445.693 109.015 mo
445.693 110.515 li
440.693 109.015 mo
440.693 110.515 li
435.943 109.015 mo
435.943 110.515 li
431.193 109.015 mo
431.193 110.515 li
426.193 107.265 mo
426.193 110.515 li
421.443 109.015 mo
421.443 110.515 li
416.693 109.015 mo
416.693 110.515 li
411.943 109.015 mo
411.943 110.515 li
406.943 109.015 mo
406.943 110.515 li
402.193 107.265 mo
402.193 110.515 li
397.443 109.015 mo
397.443 110.515 li
392.443 109.015 mo
392.443 110.515 li
387.693 109.015 mo
387.693 110.515 li
382.943 109.015 mo
382.943 110.515 li
378.193 107.265 mo
378.193 110.515 li
373.193 109.015 mo
373.193 110.515 li
368.443 109.015 mo
368.443 110.515 li
363.693 109.015 mo
363.693 110.515 li
358.693 109.015 mo
358.693 110.515 li
353.943 107.265 mo
353.943 110.515 li
@
353.943 110.515 mo
353.943 .764648 li
@
356.193 2.51465 mo
353.943 2.51465 li
356.193 6.26465 mo
353.943 6.26465 li
358.443 9.76465 mo
353.943 9.76465 li
356.193 108.765 mo
353.943 108.765 li
356.193 105.015 mo
353.943 105.015 li
358.443 101.515 mo
353.943 101.515 li
358.443 9.76465 mo
353.943 9.76465 li
356.193 13.5146 mo
353.943 13.5146 li
356.193 17.2646 mo
353.943 17.2646 li
356.193 20.7646 mo
353.943 20.7646 li
356.193 24.5146 mo
353.943 24.5146 li
358.443 28.2646 mo
353.943 28.2646 li
356.193 31.7646 mo
353.943 31.7646 li
356.193 35.5146 mo
353.943 35.5146 li
356.193 39.2646 mo
353.943 39.2646 li
356.193 42.7646 mo
353.943 42.7646 li
358.443 46.5146 mo
353.943 46.5146 li
356.193 50.2646 mo
353.943 50.2646 li
356.193 53.7646 mo
353.943 53.7646 li
356.193 57.5146 mo
353.943 57.5146 li
356.193 61.2646 mo
353.943 61.2646 li
358.443 64.7646 mo
353.943 64.7646 li
356.193 68.5146 mo
353.943 68.5146 li
356.193 72.0146 mo
353.943 72.0146 li
356.193 75.7646 mo
353.943 75.7646 li
356.193 79.5146 mo
353.943 79.5146 li
358.443 83.0146 mo
353.943 83.0146 li
356.193 86.7646 mo
353.943 86.7646 li
356.193 90.5146 mo
353.943 90.5146 li
356.193 94.0146 mo
353.943 94.0146 li
356.193 97.7646 mo
353.943 97.7646 li
358.443 101.515 mo
353.943 101.515 li
@
505.484 99.7046 mo
505.484 98.0488 504.141 96.7046 502.484 96.7046 cv
500.828 96.7046 499.484 98.0488 499.484 99.7046 cv
499.484 101.361 500.828 102.705 502.484 102.705 cv
504.141 102.705 505.484 101.361 505.484 99.7046 cv
1 0 0 rgb
ef
499.004 96.1045 mo
499.004 94.4487 497.66 93.1045 496.004 93.1045 cv
494.348 93.1045 493.004 94.4487 493.004 96.1045 cv
493.004 97.7607 494.348 99.1045 496.004 99.1045 cv
497.66 99.1045 499.004 97.7607 499.004 96.1045 cv
ef
492.764 96.3447 mo
492.764 94.6885 491.42 93.3447 489.764 93.3447 cv
488.107 93.3447 486.764 94.6885 486.764 96.3447 cv
486.764 98.0005 488.107 99.3447 489.764 99.3447 cv
491.42 99.3447 492.764 98.0005 492.764 96.3447 cv
ef
486.523 99.7046 mo
486.523 98.0488 485.18 96.7046 483.523 96.7046 cv
481.867 96.7046 480.523 98.0488 480.523 99.7046 cv
480.523 101.361 481.867 102.705 483.523 102.705 cv
485.18 102.705 486.523 101.361 486.523 99.7046 cv
ef
480.283 99.2246 mo
480.283 97.5688 478.939 96.2246 477.283 96.2246 cv
475.627 96.2246 474.283 97.5688 474.283 99.2246 cv
474.283 100.881 475.627 102.225 477.283 102.225 cv
478.939 102.225 480.283 100.881 480.283 99.2246 cv
ef
473.805 96.1045 mo
473.805 94.4487 472.459 93.1045 470.805 93.1045 cv
469.148 93.1045 467.805 94.4487 467.805 96.1045 cv
467.805 97.7607 469.148 99.1045 470.805 99.1045 cv
472.459 99.1045 473.805 97.7607 473.805 96.1045 cv
ef
467.443 94.6646 mo
467.443 93.0088 466.1 91.6646 464.443 91.6646 cv
462.787 91.6646 461.443 93.0088 461.443 94.6646 cv
461.443 96.3208 462.787 97.6646 464.443 97.6646 cv
466.1 97.6646 467.443 96.3208 467.443 94.6646 cv
ef
461.084 96.8247 mo
461.084 95.1685 459.74 93.8247 458.084 93.8247 cv
456.428 93.8247 455.084 95.1685 455.084 96.8247 cv
455.084 98.4805 456.428 99.8247 458.084 99.8247 cv
459.74 99.8247 461.084 98.4805 461.084 96.8247 cv
ef
454.844 95.6245 mo
454.844 93.9688 453.5 92.6245 451.844 92.6245 cv
450.188 92.6245 448.844 93.9688 448.844 95.6245 cv
448.844 97.2808 450.188 98.6245 451.844 98.6245 cv
453.5 98.6245 454.844 97.2808 454.844 95.6245 cv
ef
448.363 91.7847 mo
448.363 90.1284 447.02 88.7847 445.363 88.7847 cv
443.707 88.7847 442.363 90.1284 442.363 91.7847 cv
442.363 93.4404 443.707 94.7847 445.363 94.7847 cv
447.02 94.7847 448.363 93.4404 448.363 91.7847 cv
ef
442.123 90.1045 mo
442.123 88.4487 440.779 87.1045 439.123 87.1045 cv
437.469 87.1045 436.123 88.4487 436.123 90.1045 cv
436.123 91.7607 437.469 93.1045 439.123 93.1045 cv
440.779 93.1045 442.123 91.7607 442.123 90.1045 cv
ef
435.885 90.8247 mo
435.885 89.1685 434.539 87.8247 432.885 87.8247 cv
431.229 87.8247 429.885 89.1685 429.885 90.8247 cv
429.885 92.4805 431.229 93.8247 432.885 93.8247 cv
434.539 93.8247 435.885 92.4805 435.885 90.8247 cv
ef
429.645 88.1846 mo
429.645 86.5288 428.301 85.1846 426.645 85.1846 cv
424.988 85.1846 423.645 86.5288 423.645 88.1846 cv
423.645 89.8408 424.988 91.1846 426.645 91.1846 cv
428.301 91.1846 429.645 89.8408 429.645 88.1846 cv
ef
423.164 82.6646 mo
423.164 81.0088 421.82 79.6646 420.164 79.6646 cv
418.508 79.6646 417.164 81.0088 417.164 82.6646 cv
417.164 84.3208 418.508 85.6646 420.164 85.6646 cv
421.82 85.6646 423.164 84.3208 423.164 82.6646 cv
ef
416.924 79.3047 mo
416.924 77.6484 415.58 76.3047 413.924 76.3047 cv
412.268 76.3047 410.924 77.6484 410.924 79.3047 cv
410.924 80.9604 412.268 82.3047 413.924 82.3047 cv
415.58 82.3047 416.924 80.9604 416.924 79.3047 cv
ef
410.684 79.0645 mo
410.684 77.4087 409.34 76.0645 407.684 76.0645 cv
406.027 76.0645 404.684 77.4087 404.684 79.0645 cv
404.684 80.7207 406.027 82.0645 407.684 82.0645 cv
409.34 82.0645 410.684 80.7207 410.684 79.0645 cv
ef
404.203 74.7446 mo
404.203 73.0889 402.859 71.7446 401.203 71.7446 cv
399.547 71.7446 398.203 73.0889 398.203 74.7446 cv
398.203 76.4004 399.547 77.7446 401.203 77.7446 cv
402.859 77.7446 404.203 76.4004 404.203 74.7446 cv
ef
397.963 67.7847 mo
397.963 66.1289 396.619 64.7847 394.963 64.7847 cv
393.309 64.7847 391.963 66.1289 391.963 67.7847 cv
391.963 69.4404 393.309 70.7847 394.963 70.7847 cv
396.619 70.7847 397.963 69.4404 397.963 67.7847 cv
ef
391.725 63.2246 mo
391.725 61.5684 390.379 60.2246 388.725 60.2246 cv
387.068 60.2246 385.725 61.5684 385.725 63.2246 cv
385.725 64.8809 387.068 66.2246 388.725 66.2246 cv
390.379 66.2246 391.725 64.8809 391.725 63.2246 cv
ef
385.484 62.7446 mo
385.484 61.0889 384.141 59.7446 382.484 59.7446 cv
380.828 59.7446 379.484 61.0889 379.484 62.7446 cv
379.484 64.4004 380.828 65.7446 382.484 65.7446 cv
384.141 65.7446 385.484 64.4004 385.484 62.7446 cv
ef
379.004 58.6646 mo
379.004 57.0088 377.66 55.6646 376.004 55.6646 cv
374.348 55.6646 373.004 57.0088 373.004 58.6646 cv
373.004 60.3208 374.348 61.6646 376.004 61.6646 cv
377.66 61.6646 379.004 60.3208 379.004 58.6646 cv
ef
372.764 50.2646 mo
372.764 48.6084 371.42 47.2646 369.764 47.2646 cv
368.107 47.2646 366.764 48.6084 366.764 50.2646 cv
366.764 51.9209 368.107 53.2646 369.764 53.2646 cv
371.42 53.2646 372.764 51.9209 372.764 50.2646 cv
ef
366.523 42.1045 mo
366.523 40.4487 365.18 39.1045 363.523 39.1045 cv
361.867 39.1045 360.523 40.4487 360.523 42.1045 cv
360.523 43.7607 361.867 45.1045 363.523 45.1045 cv
365.18 45.1045 366.523 43.7607 366.523 42.1045 cv
ef
360.283 33.4648 mo
360.283 31.8086 358.939 30.4648 357.283 30.4648 cv
355.627 30.4648 354.283 31.8086 354.283 33.4648 cv
354.283 35.1206 355.627 36.4648 357.283 36.4648 cv
358.939 36.4648 360.283 35.1206 360.283 33.4648 cv
ef
357.193 77.5146 mo
354.193 77.5146 li
354.193 83.5146 li
360.193 83.5146 li
360.193 77.5146 li
357.193 77.5146 li
cp
363.443 77.5146 mo
360.443 77.5146 li
360.443 83.5146 li
366.443 83.5146 li
366.443 77.5146 li
363.443 77.5146 li
cp
369.693 77.7646 mo
366.693 77.7646 li
366.693 83.7646 li
372.693 83.7646 li
372.693 77.7646 li
369.693 77.7646 li
cp
375.943 77.5146 mo
372.943 77.5146 li
372.943 83.5146 li
378.943 83.5146 li
378.943 77.5146 li
375.943 77.5146 li
cp
382.443 77.7646 mo
379.443 77.7646 li
379.443 83.7646 li
385.443 83.7646 li
385.443 77.7646 li
382.443 77.7646 li
cp
388.693 77.5146 mo
385.693 77.5146 li
385.693 83.5146 li
391.693 83.5146 li
391.693 77.5146 li
388.693 77.5146 li
cp
394.943 78.2646 mo
391.943 78.2646 li
391.943 84.2646 li
397.943 84.2646 li
397.943 78.2646 li
394.943 78.2646 li
cp
401.193 77.2646 mo
398.193 77.2646 li
398.193 83.2646 li
404.193 83.2646 li
404.193 77.2646 li
401.193 77.2646 li
cp
407.693 77.7646 mo
404.693 77.7646 li
404.693 83.7646 li
410.693 83.7646 li
410.693 77.7646 li
407.693 77.7646 li
cp
413.943 78.2646 mo
410.943 78.2646 li
410.943 84.2646 li
416.943 84.2646 li
416.943 78.2646 li
413.943 78.2646 li
cp
420.193 78.0146 mo
417.193 78.0146 li
417.193 84.0146 li
423.193 84.0146 li
423.193 78.0146 li
420.193 78.0146 li
cp
426.693 77.5146 mo
423.693 77.5146 li
423.693 83.5146 li
429.693 83.5146 li
429.693 77.5146 li
426.693 77.5146 li
cp
432.943 77.5146 mo
429.943 77.5146 li
429.943 83.5146 li
435.943 83.5146 li
435.943 77.5146 li
432.943 77.5146 li
cp
439.193 78.0146 mo
436.193 78.0146 li
436.193 84.0146 li
442.193 84.0146 li
442.193 78.0146 li
439.193 78.0146 li
cp
445.443 78.0146 mo
442.443 78.0146 li
442.443 84.0146 li
448.443 84.0146 li
448.443 78.0146 li
445.443 78.0146 li
cp
451.943 78.0146 mo
448.943 78.0146 li
448.943 84.0146 li
454.943 84.0146 li
454.943 78.0146 li
451.943 78.0146 li
cp
458.193 77.5146 mo
455.193 77.5146 li
455.193 83.5146 li
461.193 83.5146 li
461.193 77.5146 li
458.193 77.5146 li
cp
464.443 77.5146 mo
461.443 77.5146 li
461.443 83.5146 li
467.443 83.5146 li
467.443 77.5146 li
464.443 77.5146 li
cp
470.693 78.2646 mo
467.693 78.2646 li
467.693 84.2646 li
473.693 84.2646 li
473.693 78.2646 li
470.693 78.2646 li
cp
477.193 78.0146 mo
474.193 78.0146 li
474.193 84.0146 li
480.193 84.0146 li
480.193 78.0146 li
477.193 78.0146 li
cp
483.443 77.2646 mo
480.443 77.2646 li
480.443 83.2646 li
486.443 83.2646 li
486.443 77.2646 li
483.443 77.2646 li
cp
489.693 77.5146 mo
486.693 77.5146 li
486.693 83.5146 li
492.693 83.5146 li
492.693 77.5146 li
489.693 77.5146 li
cp
495.943 77.7646 mo
492.943 77.7646 li
492.943 83.7646 li
498.943 83.7646 li
498.943 77.7646 li
495.943 77.7646 li
cp
502.443 77.5146 mo
499.443 77.5146 li
499.443 83.5146 li
505.443 83.5146 li
505.443 77.5146 li
502.443 77.5146 li
cp
0 .4 0 rgb
@
51.7485 219.301 mo
202.749 219.301 li
51.7485 219.301 mo
51.7485 109.801 li
202.749 109.801 li
202.749 219.301 li
51.7485 219.301 li
cp
0 0 0 rgb
@
200.749 217.801 mo
200.749 219.301 li
195.999 216.051 mo
195.999 219.301 li
195.999 216.051 mo
195.999 219.301 li
190.999 217.801 mo
190.999 219.301 li
186.249 217.801 mo
186.249 219.301 li
181.499 217.801 mo
181.499 219.301 li
176.749 217.801 mo
176.749 219.301 li
171.999 216.051 mo
171.999 219.301 li
166.999 217.801 mo
166.999 219.301 li
162.249 217.801 mo
162.249 219.301 li
157.499 217.801 mo
157.499 219.301 li
152.749 217.801 mo
152.749 219.301 li
147.749 216.051 mo
147.749 219.301 li
142.999 217.801 mo
142.999 219.301 li
138.249 217.801 mo
138.249 219.301 li
133.499 217.801 mo
133.499 219.301 li
128.499 217.801 mo
128.499 219.301 li
123.749 216.051 mo
123.749 219.301 li
118.999 217.801 mo
118.999 219.301 li
114.249 217.801 mo
114.249 219.301 li
109.249 217.801 mo
109.249 219.301 li
104.499 217.801 mo
104.499 219.301 li
99.7485 216.051 mo
99.7485 219.301 li
94.9985 217.801 mo
94.9985 219.301 li
89.9985 217.801 mo
89.9985 219.301 li
85.2485 217.801 mo
85.2485 219.301 li
80.4985 217.801 mo
80.4985 219.301 li
75.7485 216.051 mo
75.7485 219.301 li
70.7485 217.801 mo
70.7485 219.301 li
65.9985 217.801 mo
65.9985 219.301 li
61.2485 217.801 mo
61.2485 219.301 li
56.4985 217.801 mo
56.4985 219.301 li
51.7485 216.051 mo
51.7485 219.301 li
@
51.7485 219.301 mo
51.7485 109.801 li
@
53.9985 111.551 mo
51.7485 111.551 li
53.9985 115.301 mo
51.7485 115.301 li
56.2485 119.051 mo
51.7485 119.051 li
53.9985 217.551 mo
51.7485 217.551 li
53.9985 213.801 mo
51.7485 213.801 li
56.2485 210.301 mo
51.7485 210.301 li
56.2485 119.051 mo
51.7485 119.051 li
53.9985 122.551 mo
51.7485 122.551 li
53.9985 126.301 mo
51.7485 126.301 li
53.9985 129.801 mo
51.7485 129.801 li
53.9985 133.551 mo
51.7485 133.551 li
56.2485 137.301 mo
51.7485 137.301 li
53.9985 140.801 mo
51.7485 140.801 li
53.9985 144.551 mo
51.7485 144.551 li
53.9985 148.051 mo
51.7485 148.051 li
53.9985 151.801 mo
51.7485 151.801 li
56.2485 155.551 mo
51.7485 155.551 li
53.9985 159.051 mo
51.7485 159.051 li
53.9985 162.801 mo
51.7485 162.801 li
53.9985 166.551 mo
51.7485 166.551 li
53.9985 170.051 mo
51.7485 170.051 li
56.2485 173.801 mo
51.7485 173.801 li
53.9985 177.301 mo
51.7485 177.301 li
53.9985 181.051 mo
51.7485 181.051 li
53.9985 184.801 mo
51.7485 184.801 li
53.9985 188.301 mo
51.7485 188.301 li
56.2485 192.051 mo
51.7485 192.051 li
53.9985 195.551 mo
51.7485 195.551 li
53.9985 199.301 mo
51.7485 199.301 li
53.9985 203.051 mo
51.7485 203.051 li
53.9985 206.551 mo
51.7485 206.551 li
56.2485 210.301 mo
51.7485 210.301 li
@
202.548 207.332 mo
202.548 205.676 201.205 204.332 199.548 204.332 cv
197.893 204.332 196.548 205.676 196.548 207.332 cv
196.548 208.986 197.893 210.332 199.548 210.332 cv
201.205 210.332 202.548 208.986 202.548 207.332 cv
1 0 0 rgb
ef
196.309 205.412 mo
196.309 203.756 194.964 202.412 193.309 202.412 cv
191.652 202.412 190.309 203.756 190.309 205.412 cv
190.309 207.066 191.652 208.412 193.309 208.412 cv
194.964 208.412 196.309 207.066 196.309 205.412 cv
ef
190.068 203.971 mo
190.068 202.314 188.725 200.971 187.068 200.971 cv
185.413 200.971 184.068 202.314 184.068 203.971 cv
184.068 205.627 185.413 206.971 187.068 206.971 cv
188.725 206.971 190.068 205.627 190.068 203.971 cv
ef
183.829 206.852 mo
183.829 205.195 182.484 203.852 180.829 203.852 cv
179.172 203.852 177.829 205.195 177.829 206.852 cv
177.829 208.508 179.172 209.852 180.829 209.852 cv
182.484 209.852 183.829 208.508 183.829 206.852 cv
ef
177.588 206.131 mo
177.588 204.475 176.245 203.131 174.588 203.131 cv
172.933 203.131 171.588 204.475 171.588 206.131 cv
171.588 207.787 172.933 209.131 174.588 209.131 cv
176.245 209.131 177.588 207.787 177.588 206.131 cv
ef
171.108 204.211 mo
171.108 202.555 169.765 201.211 168.108 201.211 cv
166.453 201.211 165.108 202.555 165.108 204.211 cv
165.108 205.867 166.453 207.211 168.108 207.211 cv
169.765 207.211 171.108 205.867 171.108 204.211 cv
ef
164.749 203.252 mo
164.749 201.596 163.405 200.252 161.749 200.252 cv
160.092 200.252 158.749 201.596 158.749 203.252 cv
158.749 204.908 160.092 206.252 161.749 206.252 cv
163.405 206.252 164.749 204.908 164.749 203.252 cv
ef
158.389 203.73 mo
158.389 202.076 157.044 200.73 155.389 200.73 cv
153.732 200.73 152.389 202.076 152.389 203.73 cv
152.389 205.387 153.732 206.73 155.389 206.73 cv
157.044 206.73 158.389 205.387 158.389 203.73 cv
ef
152.148 202.771 mo
152.148 201.115 150.805 199.771 149.148 199.771 cv
147.493 199.771 146.148 201.115 146.148 202.771 cv
146.148 204.428 147.493 205.771 149.148 205.771 cv
150.805 205.771 152.148 204.428 152.148 202.771 cv
ef
145.909 200.371 mo
145.909 198.715 144.564 197.371 142.909 197.371 cv
141.252 197.371 139.909 198.715 139.909 200.371 cv
139.909 202.027 141.252 203.371 142.909 203.371 cv
144.564 203.371 145.909 202.027 145.909 200.371 cv
ef
139.668 198.451 mo
139.668 196.795 138.325 195.451 136.668 195.451 cv
135.013 195.451 133.668 196.795 133.668 198.451 cv
133.668 200.107 135.013 201.451 136.668 201.451 cv
138.325 201.451 139.668 200.107 139.668 198.451 cv
ef
133.188 197.492 mo
133.188 195.836 131.845 194.492 130.188 194.492 cv
128.533 194.492 127.188 195.836 127.188 197.492 cv
127.188 199.146 128.533 200.492 130.188 200.492 cv
131.845 200.492 133.188 199.146 133.188 197.492 cv
ef
126.949 196.051 mo
126.949 194.395 125.604 193.051 123.949 193.051 cv
122.292 193.051 120.949 194.395 120.949 196.051 cv
120.949 197.707 122.292 199.051 123.949 199.051 cv
125.604 199.051 126.949 197.707 126.949 196.051 cv
ef
120.708 191.971 mo
120.708 190.315 119.365 188.971 117.708 188.971 cv
116.053 188.971 114.708 190.315 114.708 191.971 cv
114.708 193.627 116.053 194.971 117.708 194.971 cv
119.365 194.971 120.708 193.627 120.708 191.971 cv
ef
114.469 188.372 mo
114.469 186.715 113.125 185.372 111.469 185.372 cv
109.813 185.372 108.469 186.715 108.469 188.372 cv
108.469 190.027 109.813 191.371 111.469 191.371 cv
113.125 191.371 114.469 190.027 114.469 188.372 cv
ef
108.229 185.731 mo
108.229 184.076 106.885 182.731 105.229 182.731 cv
103.573 182.731 102.229 184.076 102.229 185.731 cv
102.229 187.387 103.573 188.731 105.229 188.731 cv
106.885 188.731 108.229 187.387 108.229 185.731 cv
ef
101.749 181.651 mo
101.749 179.996 100.404 178.651 98.7485 178.651 cv
97.0923 178.651 95.7485 179.996 95.7485 181.651 cv
95.7485 183.307 97.0923 184.651 98.7485 184.651 cv
100.404 184.651 101.749 183.307 101.749 181.651 cv
ef
95.5083 176.611 mo
95.5083 174.956 94.1646 173.611 92.5083 173.611 cv
90.8525 173.611 89.5083 174.956 89.5083 176.611 cv
89.5083 178.267 90.8525 179.611 92.5083 179.611 cv
94.1646 179.611 95.5083 178.267 95.5083 176.611 cv
ef
89.2686 172.051 mo
89.2686 170.395 87.9243 169.051 86.2686 169.051 cv
84.6123 169.051 83.2686 170.395 83.2686 172.051 cv
83.2686 173.708 84.6123 175.051 86.2686 175.051 cv
87.9243 175.051 89.2686 173.708 89.2686 172.051 cv
ef
83.0283 169.891 mo
83.0283 168.235 81.6846 166.891 80.0283 166.891 cv
78.3726 166.891 77.0283 168.235 77.0283 169.891 cv
77.0283 171.547 78.3726 172.891 80.0283 172.891 cv
81.6846 172.891 83.0283 171.547 83.0283 169.891 cv
ef
76.7886 166.532 mo
76.7886 164.875 75.4443 163.531 73.7886 163.531 cv
72.1323 163.531 70.7886 164.875 70.7886 166.532 cv
70.7886 168.187 72.1323 169.532 73.7886 169.532 cv
75.4443 169.532 76.7886 168.187 76.7886 166.532 cv
ef
70.3086 161.491 mo
70.3086 159.835 68.9644 158.491 67.3086 158.491 cv
65.6523 158.491 64.3086 159.835 64.3086 161.491 cv
64.3086 163.147 65.6523 164.491 67.3086 164.491 cv
68.9644 164.491 70.3086 163.147 70.3086 161.491 cv
ef
64.0684 157.651 mo
64.0684 155.995 62.7246 154.651 61.0684 154.651 cv
59.4126 154.651 58.0684 155.995 58.0684 157.651 cv
58.0684 159.307 59.4126 160.651 61.0684 160.651 cv
62.7246 160.651 64.0684 159.307 64.0684 157.651 cv
ef
57.8286 154.531 mo
57.8286 152.875 56.4844 151.531 54.8286 151.531 cv
53.1724 151.531 51.8286 152.875 51.8286 154.531 cv
51.8286 156.187 53.1724 157.531 54.8286 157.531 cv
56.4844 157.531 57.8286 156.187 57.8286 154.531 cv
ef
54.7485 186.051 mo
51.7485 186.051 li
51.7485 192.051 li
57.7485 192.051 li
57.7485 186.051 li
54.7485 186.051 li
cp
60.9985 186.051 mo
57.9985 186.051 li
57.9985 192.051 li
63.9985 192.051 li
63.9985 186.051 li
60.9985 186.051 li
cp
67.2485 186.301 mo
64.2485 186.301 li
64.2485 192.301 li
70.2485 192.301 li
70.2485 186.301 li
67.2485 186.301 li
cp
73.7485 186.301 mo
70.7485 186.301 li
70.7485 192.301 li
76.7485 192.301 li
76.7485 186.301 li
73.7485 186.301 li
cp
79.9985 186.051 mo
76.9985 186.051 li
76.9985 192.051 li
82.9985 192.051 li
82.9985 186.051 li
79.9985 186.051 li
cp
86.2485 186.301 mo
83.2485 186.301 li
83.2485 192.301 li
89.2485 192.301 li
89.2485 186.301 li
86.2485 186.301 li
cp
92.4985 186.301 mo
89.4985 186.301 li
89.4985 192.301 li
95.4985 192.301 li
95.4985 186.301 li
92.4985 186.301 li
cp
98.7485 186.551 mo
95.7485 186.551 li
95.7485 192.551 li
101.749 192.551 li
101.749 186.551 li
98.7485 186.551 li
cp
105.249 186.551 mo
102.249 186.551 li
102.249 192.551 li
108.249 192.551 li
108.249 186.551 li
105.249 186.551 li
cp
111.499 186.551 mo
108.499 186.551 li
108.499 192.551 li
114.499 192.551 li
114.499 186.551 li
111.499 186.551 li
cp
117.749 186.301 mo
114.749 186.301 li
114.749 192.301 li
120.749 192.301 li
120.749 186.301 li
117.749 186.301 li
cp
123.999 186.301 mo
120.999 186.301 li
120.999 192.301 li
126.999 192.301 li
126.999 186.301 li
123.999 186.301 li
cp
130.249 186.551 mo
127.249 186.551 li
127.249 192.551 li
133.249 192.551 li
133.249 186.551 li
130.249 186.551 li
cp
136.749 186.551 mo
133.749 186.551 li
133.749 192.551 li
139.749 192.551 li
139.749 186.551 li
136.749 186.551 li
cp
142.999 186.801 mo
139.999 186.801 li
139.999 192.801 li
145.999 192.801 li
145.999 186.801 li
142.999 186.801 li
cp
149.249 186.051 mo
146.249 186.051 li
146.249 192.051 li
152.249 192.051 li
152.249 186.051 li
149.249 186.051 li
cp
155.499 186.301 mo
152.499 186.301 li
152.499 192.301 li
158.499 192.301 li
158.499 186.301 li
155.499 186.301 li
cp
161.749 186.301 mo
158.749 186.301 li
158.749 192.301 li
164.749 192.301 li
164.749 186.301 li
161.749 186.301 li
cp
167.999 186.301 mo
164.999 186.301 li
164.999 192.301 li
170.999 192.301 li
170.999 186.301 li
167.999 186.301 li
cp
174.499 186.051 mo
171.499 186.051 li
171.499 192.051 li
177.499 192.051 li
177.499 186.051 li
174.499 186.051 li
cp
180.749 186.801 mo
177.749 186.801 li
177.749 192.801 li
183.749 192.801 li
183.749 186.801 li
180.749 186.801 li
cp
186.999 186.051 mo
183.999 186.051 li
183.999 192.051 li
189.999 192.051 li
189.999 186.051 li
186.999 186.051 li
cp
193.249 186.051 mo
190.249 186.051 li
190.249 192.051 li
196.249 192.051 li
196.249 186.051 li
193.249 186.051 li
cp
199.499 185.801 mo
196.499 185.801 li
196.499 191.801 li
202.499 191.801 li
202.499 185.801 li
199.499 185.801 li
cp
0 .4 0 rgb
@
202.563 219.316 mo
353.563 219.316 li
202.563 219.316 mo
202.563 109.816 li
353.563 109.816 li
353.563 219.316 li
202.563 219.316 li
cp
0 0 0 rgb
@
351.563 217.816 mo
351.563 219.316 li
346.813 216.066 mo
346.813 219.316 li
346.813 216.066 mo
346.813 219.316 li
342.063 217.816 mo
342.063 219.316 li
337.063 217.816 mo
337.063 219.316 li
332.313 217.816 mo
332.313 219.316 li
327.563 217.816 mo
327.563 219.316 li
322.813 216.066 mo
322.813 219.316 li
317.813 217.816 mo
317.813 219.316 li
313.063 217.816 mo
313.063 219.316 li
308.313 217.816 mo
308.313 219.316 li
303.563 217.816 mo
303.563 219.316 li
298.563 216.066 mo
298.563 219.316 li
293.813 217.816 mo
293.813 219.316 li
289.063 217.816 mo
289.063 219.316 li
284.313 217.816 mo
284.313 219.316 li
279.313 217.816 mo
279.313 219.316 li
274.563 216.066 mo
274.563 219.316 li
269.813 217.816 mo
269.813 219.316 li
265.063 217.816 mo
265.063 219.316 li
260.313 217.816 mo
260.313 219.316 li
255.313 217.816 mo
255.313 219.316 li
250.563 216.066 mo
250.563 219.316 li
245.813 217.816 mo
245.813 219.316 li
241.063 217.816 mo
241.063 219.316 li
236.063 217.816 mo
236.063 219.316 li
231.313 217.816 mo
231.313 219.316 li
226.563 216.066 mo
226.563 219.316 li
221.813 217.816 mo
221.813 219.316 li
216.813 217.816 mo
216.813 219.316 li
212.063 217.816 mo
212.063 219.316 li
207.313 217.816 mo
207.313 219.316 li
202.563 216.066 mo
202.563 219.316 li
@
202.563 219.316 mo
202.563 109.816 li
@
204.813 111.566 mo
202.563 111.566 li
204.813 115.316 mo
202.563 115.316 li
207.063 119.066 mo
202.563 119.066 li
204.813 217.566 mo
202.563 217.566 li
204.813 213.816 mo
202.563 213.816 li
207.063 210.316 mo
202.563 210.316 li
207.063 119.066 mo
202.563 119.066 li
204.813 122.566 mo
202.563 122.566 li
204.813 126.316 mo
202.563 126.316 li
204.813 129.816 mo
202.563 129.816 li
204.813 133.566 mo
202.563 133.566 li
207.063 137.316 mo
202.563 137.316 li
204.813 140.816 mo
202.563 140.816 li
204.813 144.566 mo
202.563 144.566 li
204.813 148.066 mo
202.563 148.066 li
204.813 151.816 mo
202.563 151.816 li
207.063 155.566 mo
202.563 155.566 li
204.813 159.066 mo
202.563 159.066 li
204.813 162.816 mo
202.563 162.816 li
204.813 166.566 mo
202.563 166.566 li
204.813 170.066 mo
202.563 170.066 li
207.063 173.816 mo
202.563 173.816 li
204.813 177.316 mo
202.563 177.316 li
204.813 181.066 mo
202.563 181.066 li
204.813 184.816 mo
202.563 184.816 li
204.813 188.316 mo
202.563 188.316 li
207.063 192.066 mo
202.563 192.066 li
204.813 195.566 mo
202.563 195.566 li
204.813 199.316 mo
202.563 199.316 li
204.813 203.066 mo
202.563 203.066 li
204.813 206.566 mo
202.563 206.566 li
207.063 210.316 mo
202.563 210.316 li
@
353.254 205.906 mo
353.254 204.25 351.908 202.906 350.254 202.906 cv
348.598 202.906 347.254 204.25 347.254 205.906 cv
347.254 207.563 348.598 208.906 350.254 208.906 cv
351.908 208.906 353.254 207.563 353.254 205.906 cv
1 0 0 rgb
ef
347.014 204.467 mo
347.014 202.811 345.67 201.467 344.014 201.467 cv
342.357 201.467 341.014 202.811 341.014 204.467 cv
341.014 206.121 342.357 207.467 344.014 207.467 cv
345.67 207.467 347.014 206.121 347.014 204.467 cv
ef
340.773 204.467 mo
340.773 202.811 339.43 201.467 337.773 201.467 cv
336.117 201.467 334.773 202.811 334.773 204.467 cv
334.773 206.121 336.117 207.467 337.773 207.467 cv
339.43 207.467 340.773 206.121 340.773 204.467 cv
ef
334.533 205.066 mo
334.533 203.41 333.189 202.066 331.533 202.066 cv
329.877 202.066 328.533 203.41 328.533 205.066 cv
328.533 206.723 329.877 208.066 331.533 208.066 cv
333.189 208.066 334.533 206.723 334.533 205.066 cv
ef
328.293 204.705 mo
328.293 203.051 326.949 201.705 325.293 201.705 cv
323.637 201.705 322.293 203.051 322.293 204.705 cv
322.293 206.361 323.637 207.705 325.293 207.705 cv
326.949 207.705 328.293 206.361 328.293 204.705 cv
ef
322.053 203.266 mo
322.053 201.609 320.709 200.266 319.053 200.266 cv
317.396 200.266 316.054 201.609 316.054 203.266 cv
316.054 204.922 317.396 206.266 319.053 206.266 cv
320.709 206.266 322.053 204.922 322.053 203.266 cv
ef
315.573 202.547 mo
315.573 200.891 314.229 199.547 312.573 199.547 cv
310.917 199.547 309.573 200.891 309.573 202.547 cv
309.573 204.201 310.917 205.547 312.573 205.547 cv
314.229 205.547 315.573 204.201 315.573 202.547 cv
ef
309.333 202.785 mo
309.333 201.131 307.989 199.785 306.333 199.785 cv
304.678 199.785 303.333 201.131 303.333 202.785 cv
303.333 204.441 304.678 205.785 306.333 205.785 cv
307.989 205.785 309.333 204.441 309.333 202.785 cv
ef
303.094 201.105 mo
303.094 199.449 301.749 198.105 300.094 198.105 cv
298.438 198.105 297.094 199.449 297.094 201.105 cv
297.094 202.762 298.438 204.105 300.094 204.105 cv
301.749 204.105 303.094 202.762 303.094 201.105 cv
ef
296.854 200.146 mo
296.854 198.49 295.51 197.146 293.854 197.146 cv
292.197 197.146 290.854 198.49 290.854 200.146 cv
290.854 201.803 292.197 203.146 293.854 203.146 cv
295.51 203.146 296.854 201.803 296.854 200.146 cv
ef
290.613 198.227 mo
290.613 196.57 289.27 195.227 287.613 195.227 cv
285.957 195.227 284.613 196.57 284.613 198.227 cv
284.613 199.883 285.957 201.227 287.613 201.227 cv
289.27 201.227 290.613 199.883 290.613 198.227 cv
ef
284.134 196.307 mo
284.134 194.65 282.789 193.307 281.134 193.307 cv
279.478 193.307 278.133 194.65 278.133 196.307 cv
278.133 197.963 279.478 199.307 281.134 199.307 cv
282.789 199.307 284.134 197.963 284.134 196.307 cv
ef
277.894 193.906 mo
277.894 192.25 276.549 190.906 274.894 190.906 cv
273.237 190.906 271.894 192.25 271.894 193.906 cv
271.894 195.563 273.237 196.906 274.894 196.906 cv
276.549 196.906 277.894 195.563 277.894 193.906 cv
ef
271.653 190.786 mo
271.653 189.13 270.31 187.786 268.653 187.786 cv
266.998 187.786 265.653 189.13 265.653 190.786 cv
265.653 192.441 266.998 193.785 268.653 193.785 cv
270.31 193.785 271.653 192.441 271.653 190.786 cv
ef
265.414 187.906 mo
265.414 186.25 264.069 184.906 262.414 184.906 cv
260.757 184.906 259.414 186.25 259.414 187.906 cv
259.414 189.562 260.757 190.906 262.414 190.906 cv
264.069 190.906 265.414 189.562 265.414 187.906 cv
ef
259.173 184.786 mo
259.173 183.13 257.83 181.786 256.173 181.786 cv
254.518 181.786 253.173 183.13 253.173 184.786 cv
253.173 186.442 254.518 187.786 256.173 187.786 cv
257.83 187.786 259.173 186.442 259.173 184.786 cv
ef
252.813 181.426 mo
252.813 179.77 251.47 178.426 249.813 178.426 cv
248.157 178.426 246.813 179.77 246.813 181.426 cv
246.813 183.082 248.157 184.426 249.813 184.426 cv
251.47 184.426 252.813 183.082 252.813 181.426 cv
ef
246.213 176.625 mo
246.213 174.97 244.87 173.625 243.213 173.625 cv
241.558 173.625 240.213 174.97 240.213 176.625 cv
240.213 178.282 241.558 179.625 243.213 179.625 cv
244.87 179.625 246.213 178.282 246.213 176.625 cv
ef
239.974 173.266 mo
239.974 171.61 238.629 170.266 236.974 170.266 cv
235.317 170.266 233.974 171.61 233.974 173.266 cv
233.974 174.922 235.317 176.266 236.974 176.266 cv
238.629 176.266 239.974 174.922 239.974 173.266 cv
ef
233.733 171.346 mo
233.733 169.69 232.39 168.346 230.733 168.346 cv
229.078 168.346 227.733 169.69 227.733 171.346 cv
227.733 173.001 229.078 174.346 230.733 174.346 cv
232.39 174.346 233.733 173.001 233.733 171.346 cv
ef
227.494 167.506 mo
227.494 165.85 226.149 164.505 224.494 164.505 cv
222.837 164.505 221.494 165.85 221.494 167.506 cv
221.494 169.162 222.837 170.506 224.494 170.506 cv
226.149 170.506 227.494 169.162 227.494 167.506 cv
ef
221.253 164.146 mo
221.253 162.49 219.91 161.146 218.253 161.146 cv
216.598 161.146 215.253 162.49 215.253 164.146 cv
215.253 165.802 216.598 167.146 218.253 167.146 cv
219.91 167.146 221.253 165.802 221.253 164.146 cv
ef
214.773 165.106 mo
214.773 163.45 213.43 162.106 211.773 162.106 cv
210.118 162.106 208.773 163.45 208.773 165.106 cv
208.773 166.762 210.118 168.106 211.773 168.106 cv
213.43 168.106 214.773 166.762 214.773 165.106 cv
ef
208.534 164.386 mo
208.534 162.73 207.189 161.386 205.534 161.386 cv
203.877 161.386 202.534 162.73 202.534 164.386 cv
202.534 166.042 203.877 167.386 205.534 167.386 cv
207.189 167.386 208.534 166.042 208.534 164.386 cv
ef
205.563 186.566 mo
202.563 186.566 li
202.563 192.566 li
208.563 192.566 li
208.563 186.566 li
205.563 186.566 li
cp
211.813 186.066 mo
208.813 186.066 li
208.813 192.066 li
214.813 192.066 li
214.813 186.066 li
211.813 186.066 li
cp
218.313 185.566 mo
215.313 185.566 li
215.313 191.566 li
221.313 191.566 li
221.313 185.566 li
218.313 185.566 li
cp
224.563 186.316 mo
221.563 186.316 li
221.563 192.316 li
227.563 192.316 li
227.563 186.316 li
224.563 186.316 li
cp
230.813 186.316 mo
227.813 186.316 li
227.813 192.316 li
233.813 192.316 li
233.813 186.316 li
230.813 186.316 li
cp
237.063 186.316 mo
234.063 186.316 li
234.063 192.316 li
240.063 192.316 li
240.063 186.316 li
237.063 186.316 li
cp
243.313 187.066 mo
240.313 187.066 li
240.313 193.066 li
246.313 193.066 li
246.313 187.066 li
243.313 187.066 li
cp
249.813 186.816 mo
246.813 186.816 li
246.813 192.816 li
252.813 192.816 li
252.813 186.816 li
249.813 186.816 li
cp
256.063 186.316 mo
253.063 186.316 li
253.063 192.316 li
259.063 192.316 li
259.063 186.316 li
256.063 186.316 li
cp
262.313 186.566 mo
259.313 186.566 li
259.313 192.566 li
265.313 192.566 li
265.313 186.566 li
262.313 186.566 li
cp
268.563 186.566 mo
265.563 186.566 li
265.563 192.566 li
271.563 192.566 li
271.563 186.566 li
268.563 186.566 li
cp
274.813 186.816 mo
271.813 186.816 li
271.813 192.816 li
277.813 192.816 li
277.813 186.816 li
274.813 186.816 li
cp
281.063 186.566 mo
278.063 186.566 li
278.063 192.566 li
284.063 192.566 li
284.063 186.566 li
281.063 186.566 li
cp
287.563 186.566 mo
284.563 186.566 li
284.563 192.566 li
290.563 192.566 li
290.563 186.566 li
287.563 186.566 li
cp
293.813 186.816 mo
290.813 186.816 li
290.813 192.816 li
296.813 192.816 li
296.813 186.816 li
293.813 186.816 li
cp
300.063 186.316 mo
297.063 186.316 li
297.063 192.316 li
303.063 192.316 li
303.063 186.316 li
300.063 186.316 li
cp
306.313 186.316 mo
303.313 186.316 li
303.313 192.316 li
309.313 192.316 li
309.313 186.316 li
306.313 186.316 li
cp
312.563 186.316 mo
309.563 186.316 li
309.563 192.316 li
315.563 192.316 li
315.563 186.316 li
312.563 186.316 li
cp
319.063 187.066 mo
316.063 187.066 li
316.063 193.066 li
322.063 193.066 li
322.063 187.066 li
319.063 187.066 li
cp
325.313 186.316 mo
322.313 186.316 li
322.313 192.316 li
328.313 192.316 li
328.313 186.316 li
325.313 186.316 li
cp
331.563 186.066 mo
328.563 186.066 li
328.563 192.066 li
334.563 192.066 li
334.563 186.066 li
331.563 186.066 li
cp
337.813 186.066 mo
334.813 186.066 li
334.813 192.066 li
340.813 192.066 li
340.813 186.066 li
337.813 186.066 li
cp
344.063 185.816 mo
341.063 185.816 li
341.063 191.816 li
347.063 191.816 li
347.063 185.816 li
344.063 185.816 li
cp
350.313 186.066 mo
347.313 186.066 li
347.313 192.066 li
353.313 192.066 li
353.313 186.066 li
350.313 186.066 li
cp
0 .4 0 rgb
@
353.813 219.566 mo
505.313 219.566 li
353.813 219.566 mo
353.813 110.066 li
505.313 110.066 li
505.313 219.566 li
353.813 219.566 li
cp
0 0 0 rgb
@
503.313 218.066 mo
503.313 219.566 li
498.563 216.316 mo
498.563 219.566 li
498.563 216.316 mo
498.563 219.566 li
493.813 218.066 mo
493.813 219.566 li
488.813 218.066 mo
488.813 219.566 li
484.063 218.066 mo
484.063 219.566 li
479.313 218.066 mo
479.313 219.566 li
474.313 216.316 mo
474.313 219.566 li
469.563 218.066 mo
469.563 219.566 li
464.813 218.066 mo
464.813 219.566 li
460.063 218.066 mo
460.063 219.566 li
455.063 218.066 mo
455.063 219.566 li
450.313 216.316 mo
450.313 219.566 li
445.563 218.066 mo
445.563 219.566 li
440.563 218.066 mo
440.563 219.566 li
435.813 218.066 mo
435.813 219.566 li
431.063 218.066 mo
431.063 219.566 li
426.063 216.316 mo
426.063 219.566 li
421.313 218.066 mo
421.313 219.566 li
416.563 218.066 mo
416.563 219.566 li
411.813 218.066 mo
411.813 219.566 li
406.813 218.066 mo
406.813 219.566 li
402.063 216.316 mo
402.063 219.566 li
397.313 218.066 mo
397.313 219.566 li
392.313 218.066 mo
392.313 219.566 li
387.563 218.066 mo
387.563 219.566 li
382.813 218.066 mo
382.813 219.566 li
378.063 216.316 mo
378.063 219.566 li
373.063 218.066 mo
373.063 219.566 li
368.313 218.066 mo
368.313 219.566 li
363.563 218.066 mo
363.563 219.566 li
358.563 218.066 mo
358.563 219.566 li
353.813 216.316 mo
353.813 219.566 li
@
353.813 219.566 mo
353.813 110.066 li
@
356.063 111.816 mo
353.813 111.816 li
356.063 115.566 mo
353.813 115.566 li
358.313 119.316 mo
353.813 119.316 li
356.063 217.816 mo
353.813 217.816 li
356.063 214.066 mo
353.813 214.066 li
358.313 210.566 mo
353.813 210.566 li
358.313 119.316 mo
353.813 119.316 li
356.063 122.816 mo
353.813 122.816 li
356.063 126.566 mo
353.813 126.566 li
356.063 130.066 mo
353.813 130.066 li
356.063 133.816 mo
353.813 133.816 li
358.313 137.566 mo
353.813 137.566 li
356.063 141.066 mo
353.813 141.066 li
356.063 144.816 mo
353.813 144.816 li
356.063 148.316 mo
353.813 148.316 li
356.063 152.066 mo
353.813 152.066 li
358.313 155.816 mo
353.813 155.816 li
356.063 159.316 mo
353.813 159.316 li
356.063 163.066 mo
353.813 163.066 li
356.063 166.816 mo
353.813 166.816 li
356.063 170.316 mo
353.813 170.316 li
358.313 174.066 mo
353.813 174.066 li
356.063 177.566 mo
353.813 177.566 li
356.063 181.316 mo
353.813 181.316 li
356.063 185.066 mo
353.813 185.066 li
356.063 188.566 mo
353.813 188.566 li
358.313 192.316 mo
353.813 192.316 li
356.063 195.816 mo
353.813 195.816 li
356.063 199.566 mo
353.813 199.566 li
356.063 203.316 mo
353.813 203.316 li
356.063 206.816 mo
353.813 206.816 li
358.313 210.566 mo
353.813 210.566 li
@
505.354 204.477 mo
505.354 202.82 504.01 201.477 502.354 201.477 cv
500.697 201.477 499.354 202.82 499.354 204.477 cv
499.354 206.133 500.697 207.477 502.354 207.477 cv
504.01 207.477 505.354 206.133 505.354 204.477 cv
1 0 0 rgb
ef
498.873 204.477 mo
498.873 202.82 497.529 201.477 495.873 201.477 cv
494.217 201.477 492.873 202.82 492.873 204.477 cv
492.873 206.133 494.217 207.477 495.873 207.477 cv
497.529 207.477 498.873 206.133 498.873 204.477 cv
ef
492.633 203.756 mo
492.633 202.1 491.289 200.756 489.633 200.756 cv
487.977 200.756 486.633 202.1 486.633 203.756 cv
486.633 205.412 487.977 206.756 489.633 206.756 cv
491.289 206.756 492.633 205.412 492.633 203.756 cv
ef
486.393 203.756 mo
486.393 202.1 485.049 200.756 483.393 200.756 cv
481.736 200.756 480.393 202.1 480.393 203.756 cv
480.393 205.412 481.736 206.756 483.393 206.756 cv
485.049 206.756 486.393 205.412 486.393 203.756 cv
ef
480.152 203.516 mo
480.152 201.859 478.809 200.516 477.152 200.516 cv
475.496 200.516 474.152 201.859 474.152 203.516 cv
474.152 205.172 475.496 206.516 477.152 206.516 cv
478.809 206.516 480.152 205.172 480.152 203.516 cv
ef
473.674 202.797 mo
473.674 201.141 472.328 199.797 470.674 199.797 cv
469.018 199.797 467.674 201.141 467.674 202.797 cv
467.674 204.451 469.018 205.797 470.674 205.797 cv
472.328 205.797 473.674 204.451 473.674 202.797 cv
ef
467.313 201.836 mo
467.313 200.18 465.969 198.836 464.313 198.836 cv
462.656 198.836 461.313 200.18 461.313 201.836 cv
461.313 203.492 462.656 204.836 464.313 204.836 cv
465.969 204.836 467.313 203.492 467.313 201.836 cv
ef
460.953 201.115 mo
460.953 199.459 459.609 198.115 457.953 198.115 cv
456.297 198.115 454.953 199.459 454.953 201.115 cv
454.953 202.771 456.297 204.115 457.953 204.115 cv
459.609 204.115 460.953 202.771 460.953 201.115 cv
ef
454.713 200.156 mo
454.713 198.5 453.369 197.156 451.713 197.156 cv
450.057 197.156 448.713 198.5 448.713 200.156 cv
448.713 201.813 450.057 203.156 451.713 203.156 cv
453.369 203.156 454.713 201.813 454.713 200.156 cv
ef
448.232 197.996 mo
448.232 196.34 446.889 194.996 445.232 194.996 cv
443.576 194.996 442.232 196.34 442.232 197.996 cv
442.232 199.652 443.576 200.996 445.232 200.996 cv
446.889 200.996 448.232 199.652 448.232 197.996 cv
ef
441.992 196.797 mo
441.992 195.141 440.648 193.797 438.992 193.797 cv
437.338 193.797 435.992 195.141 435.992 196.797 cv
435.992 198.451 437.338 199.797 438.992 199.797 cv
440.648 199.797 441.992 198.451 441.992 196.797 cv
ef
435.754 195.836 mo
435.754 194.18 434.408 192.836 432.754 192.836 cv
431.098 192.836 429.754 194.18 429.754 195.836 cv
429.754 197.492 431.098 198.836 432.754 198.836 cv
434.408 198.836 435.754 197.492 435.754 195.836 cv
ef
429.514 193.316 mo
429.514 191.66 428.17 190.316 426.514 190.316 cv
424.857 190.316 423.514 191.66 423.514 193.316 cv
423.514 194.973 424.857 196.316 426.514 196.316 cv
428.17 196.316 429.514 194.973 429.514 193.316 cv
ef
423.033 190.316 mo
423.033 188.66 421.689 187.316 420.033 187.316 cv
418.377 187.316 417.033 188.66 417.033 190.316 cv
417.033 191.973 418.377 193.316 420.033 193.316 cv
421.689 193.316 423.033 191.973 423.033 190.316 cv
ef
416.793 188.156 mo
416.793 186.5 415.449 185.156 413.793 185.156 cv
412.137 185.156 410.793 186.5 410.793 188.156 cv
410.793 189.812 412.137 191.156 413.793 191.156 cv
415.449 191.156 416.793 189.812 416.793 188.156 cv
ef
410.553 184.796 mo
410.553 183.14 409.209 181.796 407.553 181.796 cv
405.896 181.796 404.553 183.14 404.553 184.796 cv
404.553 186.452 405.896 187.796 407.553 187.796 cv
409.209 187.796 410.553 186.452 410.553 184.796 cv
ef
404.072 182.156 mo
404.072 180.5 402.729 179.156 401.072 179.156 cv
399.416 179.156 398.072 180.5 398.072 182.156 cv
398.072 183.812 399.416 185.156 401.072 185.156 cv
402.729 185.156 404.072 183.812 404.072 182.156 cv
ef
397.832 178.796 mo
397.832 177.14 396.488 175.796 394.832 175.796 cv
393.178 175.796 391.832 177.14 391.832 178.796 cv
391.832 180.452 393.178 181.796 394.832 181.796 cv
396.488 181.796 397.832 180.452 397.832 178.796 cv
ef
391.594 175.676 mo
391.594 174.02 390.248 172.676 388.594 172.676 cv
386.938 172.676 385.594 174.02 385.594 175.676 cv
385.594 177.332 386.938 178.676 388.594 178.676 cv
390.248 178.676 391.594 177.332 391.594 175.676 cv
ef
385.354 172.796 mo
385.354 171.14 384.01 169.796 382.354 169.796 cv
380.697 169.796 379.354 171.14 379.354 172.796 cv
379.354 174.452 380.697 175.796 382.354 175.796 cv
384.01 175.796 385.354 174.452 385.354 172.796 cv
ef
378.873 171.116 mo
378.873 169.459 377.529 168.116 375.873 168.116 cv
374.217 168.116 372.873 169.459 372.873 171.116 cv
372.873 172.772 374.217 174.116 375.873 174.116 cv
377.529 174.116 378.873 172.772 378.873 171.116 cv
ef
372.633 168.956 mo
372.633 167.3 371.289 165.956 369.633 165.956 cv
367.977 165.956 366.633 167.3 366.633 168.956 cv
366.633 170.612 367.977 171.956 369.633 171.956 cv
371.289 171.956 372.633 170.612 372.633 168.956 cv
ef
366.393 171.835 mo
366.393 170.18 365.049 168.835 363.393 168.835 cv
361.736 168.835 360.393 170.18 360.393 171.835 cv
360.393 173.492 361.736 174.835 363.393 174.835 cv
365.049 174.835 366.393 173.492 366.393 171.835 cv
ef
360.152 172.796 mo
360.152 171.14 358.809 169.796 357.152 169.796 cv
355.496 169.796 354.152 171.14 354.152 172.796 cv
354.152 174.452 355.496 175.796 357.152 175.796 cv
358.809 175.796 360.152 174.452 360.152 172.796 cv
ef
357.063 186.816 mo
354.063 186.816 li
354.063 192.816 li
360.063 192.816 li
360.063 186.816 li
357.063 186.816 li
cp
363.313 186.816 mo
360.313 186.816 li
360.313 192.816 li
366.313 192.816 li
366.313 186.816 li
363.313 186.816 li
cp
369.563 187.316 mo
366.563 187.316 li
366.563 193.316 li
372.563 193.316 li
372.563 187.316 li
369.563 187.316 li
cp
375.813 186.566 mo
372.813 186.566 li
372.813 192.566 li
378.813 192.566 li
378.813 186.566 li
375.813 186.566 li
cp
382.313 186.566 mo
379.313 186.566 li
379.313 192.566 li
385.313 192.566 li
385.313 186.566 li
382.313 186.566 li
cp
388.563 187.066 mo
385.563 187.066 li
385.563 193.066 li
391.563 193.066 li
391.563 187.066 li
388.563 187.066 li
cp
394.813 186.816 mo
391.813 186.816 li
391.813 192.816 li
397.813 192.816 li
397.813 186.816 li
394.813 186.816 li
cp
401.063 186.566 mo
398.063 186.566 li
398.063 192.566 li
404.063 192.566 li
404.063 186.566 li
401.063 186.566 li
cp
407.563 187.316 mo
404.563 187.316 li
404.563 193.316 li
410.563 193.316 li
410.563 187.316 li
407.563 187.316 li
cp
413.813 187.066 mo
410.813 187.066 li
410.813 193.066 li
416.813 193.066 li
416.813 187.066 li
413.813 187.066 li
cp
420.063 187.316 mo
417.063 187.316 li
417.063 193.316 li
423.063 193.316 li
423.063 187.316 li
420.063 187.316 li
cp
426.563 187.066 mo
423.563 187.066 li
423.563 193.066 li
429.563 193.066 li
429.563 187.066 li
426.563 187.066 li
cp
432.813 187.566 mo
429.813 187.566 li
429.813 193.566 li
435.813 193.566 li
435.813 187.566 li
432.813 187.566 li
cp
439.063 187.566 mo
436.063 187.566 li
436.063 193.566 li
442.063 193.566 li
442.063 187.566 li
439.063 187.566 li
cp
445.313 187.316 mo
442.313 187.316 li
442.313 193.316 li
448.313 193.316 li
448.313 187.316 li
445.313 187.316 li
cp
451.813 187.066 mo
448.813 187.066 li
448.813 193.066 li
454.813 193.066 li
454.813 187.066 li
451.813 187.066 li
cp
458.063 187.316 mo
455.063 187.316 li
455.063 193.316 li
461.063 193.316 li
461.063 187.316 li
458.063 187.316 li
cp
464.313 186.816 mo
461.313 186.816 li
461.313 192.816 li
467.313 192.816 li
467.313 186.816 li
464.313 186.816 li
cp
470.563 187.316 mo
467.563 187.316 li
467.563 193.316 li
473.563 193.316 li
473.563 187.316 li
470.563 187.316 li
cp
477.063 186.566 mo
474.063 186.566 li
474.063 192.566 li
480.063 192.566 li
480.063 186.566 li
477.063 186.566 li
cp
483.313 187.066 mo
480.313 187.066 li
480.313 193.066 li
486.313 193.066 li
486.313 187.066 li
483.313 187.066 li
cp
489.563 186.566 mo
486.563 186.566 li
486.563 192.566 li
492.563 192.566 li
492.563 186.566 li
489.563 186.566 li
cp
495.813 187.066 mo
492.813 187.066 li
492.813 193.066 li
498.813 193.066 li
498.813 187.066 li
495.813 187.066 li
cp
502.313 186.566 mo
499.313 186.566 li
499.313 192.566 li
505.313 192.566 li
505.313 186.566 li
502.313 186.566 li
cp
0 .4 0 rgb
@
52.4937 329.066 mo
203.494 329.066 li
52.4937 329.066 mo
52.4937 219.566 li
203.494 219.566 li
203.494 329.066 li
52.4937 329.066 li
cp
0 0 0 rgb
@
201.494 327.566 mo
201.494 329.066 li
196.744 325.816 mo
196.744 329.066 li
196.744 325.816 mo
196.744 329.066 li
191.744 327.566 mo
191.744 329.066 li
186.994 327.566 mo
186.994 329.066 li
182.244 327.566 mo
182.244 329.066 li
177.494 327.566 mo
177.494 329.066 li
172.744 325.816 mo
172.744 329.066 li
167.744 327.566 mo
167.744 329.066 li
162.994 327.566 mo
162.994 329.066 li
158.244 327.566 mo
158.244 329.066 li
153.494 327.566 mo
153.494 329.066 li
148.494 325.816 mo
148.494 329.066 li
143.744 327.566 mo
143.744 329.066 li
138.994 327.566 mo
138.994 329.066 li
134.244 327.566 mo
134.244 329.066 li
129.244 327.566 mo
129.244 329.066 li
124.494 325.816 mo
124.494 329.066 li
119.744 327.566 mo
119.744 329.066 li
114.994 327.566 mo
114.994 329.066 li
109.994 327.566 mo
109.994 329.066 li
105.244 327.566 mo
105.244 329.066 li
100.494 325.816 mo
100.494 329.066 li
95.7437 327.566 mo
95.7437 329.066 li
90.7437 327.566 mo
90.7437 329.066 li
85.9937 327.566 mo
85.9937 329.066 li
81.2437 327.566 mo
81.2437 329.066 li
76.4937 325.816 mo
76.4937 329.066 li
71.4937 327.566 mo
71.4937 329.066 li
66.7437 327.566 mo
66.7437 329.066 li
61.9937 327.566 mo
61.9937 329.066 li
57.2437 327.566 mo
57.2437 329.066 li
52.4937 325.816 mo
52.4937 329.066 li
@
52.4937 329.066 mo
52.4937 219.566 li
@
54.7437 221.316 mo
52.4937 221.316 li
54.7437 225.066 mo
52.4937 225.066 li
56.9937 228.566 mo
52.4937 228.566 li
54.7437 327.316 mo
52.4937 327.316 li
54.7437 323.566 mo
52.4937 323.566 li
56.9937 320.066 mo
52.4937 320.066 li
56.9937 228.566 mo
52.4937 228.566 li
54.7437 232.316 mo
52.4937 232.316 li
54.7437 236.066 mo
52.4937 236.066 li
54.7437 239.566 mo
52.4937 239.566 li
54.7437 243.316 mo
52.4937 243.316 li
56.9937 247.066 mo
52.4937 247.066 li
54.7437 250.566 mo
52.4937 250.566 li
54.7437 254.316 mo
52.4937 254.316 li
54.7437 257.816 mo
52.4937 257.816 li
54.7437 261.566 mo
52.4937 261.566 li
56.9937 265.316 mo
52.4937 265.316 li
54.7437 268.816 mo
52.4937 268.816 li
54.7437 272.566 mo
52.4937 272.566 li
54.7437 276.066 mo
52.4937 276.066 li
54.7437 279.816 mo
52.4937 279.816 li
56.9937 283.566 mo
52.4937 283.566 li
54.7437 287.066 mo
52.4937 287.066 li
54.7437 290.816 mo
52.4937 290.816 li
54.7437 294.316 mo
52.4937 294.316 li
54.7437 298.066 mo
52.4937 298.066 li
56.9937 301.816 mo
52.4937 301.816 li
54.7437 305.316 mo
52.4937 305.316 li
54.7437 309.066 mo
52.4937 309.066 li
54.7437 312.566 mo
52.4937 312.566 li
54.7437 316.316 mo
52.4937 316.316 li
56.9937 320.066 mo
52.4937 320.066 li
@
203.293 312.336 mo
203.293 310.682 201.95 309.336 200.293 309.336 cv
198.638 309.336 197.293 310.682 197.293 312.336 cv
197.293 313.992 198.638 315.336 200.293 315.336 cv
201.95 315.336 203.293 313.992 203.293 312.336 cv
1 0 0 rgb
ef
197.054 311.617 mo
197.054 309.961 195.709 308.617 194.054 308.617 cv
192.397 308.617 191.054 309.961 191.054 311.617 cv
191.054 313.273 192.397 314.617 194.054 314.617 cv
195.709 314.617 197.054 313.273 197.054 311.617 cv
ef
190.813 312.816 mo
190.813 311.16 189.47 309.816 187.813 309.816 cv
186.158 309.816 184.813 311.16 184.813 312.816 cv
184.813 314.473 186.158 315.816 187.813 315.816 cv
189.47 315.816 190.813 314.473 190.813 312.816 cv
ef
184.574 311.857 mo
184.574 310.201 183.229 308.857 181.574 308.857 cv
179.917 308.857 178.574 310.201 178.574 311.857 cv
178.574 313.514 179.917 314.857 181.574 314.857 cv
183.229 314.857 184.574 313.514 184.574 311.857 cv
ef
178.333 311.137 mo
178.333 309.48 176.99 308.137 175.333 308.137 cv
173.678 308.137 172.333 309.48 172.333 311.137 cv
172.333 312.793 173.678 314.137 175.333 314.137 cv
176.99 314.137 178.333 312.793 178.333 311.137 cv
ef
171.854 310.656 mo
171.854 309 170.51 307.656 168.854 307.656 cv
167.198 307.656 165.854 309 165.854 310.656 cv
165.854 312.313 167.198 313.656 168.854 313.656 cv
170.51 313.656 171.854 312.313 171.854 310.656 cv
ef
165.494 310.178 mo
165.494 308.521 164.15 307.178 162.494 307.178 cv
160.837 307.178 159.494 308.521 159.494 310.178 cv
159.494 311.832 160.837 313.178 162.494 313.178 cv
164.15 313.178 165.494 311.832 165.494 310.178 cv
ef
159.134 308.736 mo
159.134 307.08 157.79 305.736 156.134 305.736 cv
154.478 305.736 153.134 307.08 153.134 308.736 cv
153.134 310.393 154.478 311.736 156.134 311.736 cv
157.79 311.736 159.134 310.393 159.134 308.736 cv
ef
152.894 307.537 mo
152.894 305.881 151.55 304.537 149.894 304.537 cv
148.238 304.537 146.894 305.881 146.894 307.537 cv
146.894 309.193 148.238 310.537 149.894 310.537 cv
151.55 310.537 152.894 309.193 152.894 307.537 cv
ef
146.654 306.816 mo
146.654 305.16 145.31 303.816 143.654 303.816 cv
141.998 303.816 140.654 305.16 140.654 306.816 cv
140.654 308.473 141.998 309.816 143.654 309.816 cv
145.31 309.816 146.654 308.473 146.654 306.816 cv
ef
140.414 305.617 mo
140.414 303.961 139.07 302.617 137.414 302.617 cv
135.758 302.617 134.414 303.961 134.414 305.617 cv
134.414 307.273 135.758 308.617 137.414 308.617 cv
139.07 308.617 140.414 307.273 140.414 305.617 cv
ef
133.934 304.178 mo
133.934 302.521 132.59 301.178 130.934 301.178 cv
129.278 301.178 127.934 302.521 127.934 304.178 cv
127.934 305.832 129.278 307.178 130.934 307.178 cv
132.59 307.178 133.934 305.832 133.934 304.178 cv
ef
127.694 301.537 mo
127.694 299.881 126.35 298.537 124.694 298.537 cv
123.038 298.537 121.694 299.881 121.694 301.537 cv
121.694 303.193 123.038 304.537 124.694 304.537 cv
126.35 304.537 127.694 303.193 127.694 301.537 cv
ef
121.454 299.617 mo
121.454 297.961 120.11 296.617 118.454 296.617 cv
116.798 296.617 115.454 297.961 115.454 299.617 cv
115.454 301.273 116.798 302.617 118.454 302.617 cv
120.11 302.617 121.454 301.273 121.454 299.617 cv
ef
115.214 296.977 mo
115.214 295.32 113.87 293.977 112.214 293.977 cv
110.558 293.977 109.214 295.32 109.214 296.977 cv
109.214 298.633 110.558 299.977 112.214 299.977 cv
113.87 299.977 115.214 298.633 115.214 296.977 cv
ef
108.974 295.057 mo
108.974 293.4 107.63 292.057 105.974 292.057 cv
104.318 292.057 102.974 293.4 102.974 295.057 cv
102.974 296.713 104.318 298.057 105.974 298.057 cv
107.63 298.057 108.974 296.713 108.974 295.057 cv
ef
102.494 292.416 mo
102.494 290.762 101.149 289.416 99.4937 289.416 cv
97.8374 289.416 96.4937 290.762 96.4937 292.416 cv
96.4937 294.072 97.8374 295.416 99.4937 295.416 cv
101.149 295.416 102.494 294.072 102.494 292.416 cv
ef
96.2534 289.777 mo
96.2534 288.121 94.9097 286.777 93.2534 286.777 cv
91.5977 286.777 90.2534 288.121 90.2534 289.777 cv
90.2534 291.434 91.5977 292.777 93.2534 292.777 cv
94.9097 292.777 96.2534 291.434 96.2534 289.777 cv
ef
90.0137 287.857 mo
90.0137 286.201 88.6694 284.857 87.0137 284.857 cv
85.3574 284.857 84.0137 286.201 84.0137 287.857 cv
84.0137 289.514 85.3574 290.857 87.0137 290.857 cv
88.6694 290.857 90.0137 289.514 90.0137 287.857 cv
ef
83.7734 285.816 mo
83.7734 284.16 82.4297 282.816 80.7734 282.816 cv
79.1177 282.816 77.7734 284.16 77.7734 285.816 cv
77.7734 287.473 79.1177 288.816 80.7734 288.816 cv
82.4297 288.816 83.7734 287.473 83.7734 285.816 cv
ef
77.5337 284.258 mo
77.5337 282.602 76.1895 281.258 74.5337 281.258 cv
72.8774 281.258 71.5337 282.602 71.5337 284.258 cv
71.5337 285.912 72.8774 287.258 74.5337 287.258 cv
76.1895 287.258 77.5337 285.912 77.5337 284.258 cv
ef
71.0537 285.217 mo
71.0537 283.561 69.7095 282.217 68.0537 282.217 cv
66.3975 282.217 65.0537 283.561 65.0537 285.217 cv
65.0537 286.873 66.3975 288.217 68.0537 288.217 cv
69.7095 288.217 71.0537 286.873 71.0537 285.217 cv
ef
64.8135 288.576 mo
64.8135 286.92 63.4697 285.576 61.8135 285.576 cv
60.1577 285.576 58.8135 286.92 58.8135 288.576 cv
58.8135 290.232 60.1577 291.576 61.8135 291.576 cv
63.4697 291.576 64.8135 290.232 64.8135 288.576 cv
ef
58.5737 289.777 mo
58.5737 288.121 57.2295 286.777 55.5737 286.777 cv
53.9175 286.777 52.5737 288.121 52.5737 289.777 cv
52.5737 291.434 53.9175 292.777 55.5737 292.777 cv
57.2295 292.777 58.5737 291.434 58.5737 289.777 cv
ef
55.4937 296.566 mo
52.4937 296.566 li
52.4937 302.566 li
58.4937 302.566 li
58.4937 296.566 li
55.4937 296.566 li
cp
61.7437 296.566 mo
58.7437 296.566 li
58.7437 302.566 li
64.7437 302.566 li
64.7437 296.566 li
61.7437 296.566 li
cp
67.9937 296.816 mo
64.9937 296.816 li
64.9937 302.816 li
70.9937 302.816 li
70.9937 296.816 li
67.9937 296.816 li
cp
74.4937 296.566 mo
71.4937 296.566 li
71.4937 302.566 li
77.4937 302.566 li
77.4937 296.566 li
74.4937 296.566 li
cp
80.7437 297.066 mo
77.7437 297.066 li
77.7437 303.066 li
83.7437 303.066 li
83.7437 297.066 li
80.7437 297.066 li
cp
86.9937 297.566 mo
83.9937 297.566 li
83.9937 303.566 li
89.9937 303.566 li
89.9937 297.566 li
86.9937 297.566 li
cp
93.2437 296.816 mo
90.2437 296.816 li
90.2437 302.816 li
96.2437 302.816 li
96.2437 296.816 li
93.2437 296.816 li
cp
99.4937 296.816 mo
96.4937 296.816 li
96.4937 302.816 li
102.494 302.816 li
102.494 296.816 li
99.4937 296.816 li
cp
105.994 297.316 mo
102.994 297.316 li
102.994 303.316 li
108.994 303.316 li
108.994 297.316 li
105.994 297.316 li
cp
112.244 297.066 mo
109.244 297.066 li
109.244 303.066 li
115.244 303.066 li
115.244 297.066 li
112.244 297.066 li
cp
118.494 297.316 mo
115.494 297.316 li
115.494 303.316 li
121.494 303.316 li
121.494 297.316 li
118.494 297.316 li
cp
124.744 297.316 mo
121.744 297.316 li
121.744 303.316 li
127.744 303.316 li
127.744 297.316 li
124.744 297.316 li
cp
130.994 297.066 mo
127.994 297.066 li
127.994 303.066 li
133.994 303.066 li
133.994 297.066 li
130.994 297.066 li
cp
137.494 297.816 mo
134.494 297.816 li
134.494 303.816 li
140.494 303.816 li
140.494 297.816 li
137.494 297.816 li
cp
143.744 297.316 mo
140.744 297.316 li
140.744 303.316 li
146.744 303.316 li
146.744 297.316 li
143.744 297.316 li
cp
149.994 297.566 mo
146.994 297.566 li
146.994 303.566 li
152.994 303.566 li
152.994 297.566 li
149.994 297.566 li
cp
156.244 297.316 mo
153.244 297.316 li
153.244 303.316 li
159.244 303.316 li
159.244 297.316 li
156.244 297.316 li
cp
162.494 297.066 mo
159.494 297.066 li
159.494 303.066 li
165.494 303.066 li
165.494 297.066 li
162.494 297.066 li
cp
168.744 297.316 mo
165.744 297.316 li
165.744 303.316 li
171.744 303.316 li
171.744 297.316 li
168.744 297.316 li
cp
175.244 297.066 mo
172.244 297.066 li
172.244 303.066 li
178.244 303.066 li
178.244 297.066 li
175.244 297.066 li
cp
181.494 296.566 mo
178.494 296.566 li
178.494 302.566 li
184.494 302.566 li
184.494 296.566 li
181.494 296.566 li
cp
187.744 297.066 mo
184.744 297.066 li
184.744 303.066 li
190.744 303.066 li
190.744 297.066 li
187.744 297.066 li
cp
193.994 296.816 mo
190.994 296.816 li
190.994 302.816 li
196.994 302.816 li
196.994 296.816 li
193.994 296.816 li
cp
200.244 296.566 mo
197.244 296.566 li
197.244 302.566 li
203.244 302.566 li
203.244 296.566 li
200.244 296.566 li
cp
0 .4 0 rgb
@
203.309 329.082 mo
354.308 329.082 li
203.309 329.082 mo
203.309 219.582 li
354.308 219.582 li
354.308 329.082 li
203.309 329.082 li
cp
0 0 0 rgb
@
352.308 327.582 mo
352.308 329.082 li
347.558 325.832 mo
347.558 329.082 li
347.558 325.832 mo
347.558 329.082 li
342.808 327.582 mo
342.808 329.082 li
337.808 327.582 mo
337.808 329.082 li
333.058 327.582 mo
333.058 329.082 li
328.308 327.582 mo
328.308 329.082 li
323.558 325.832 mo
323.558 329.082 li
318.558 327.582 mo
318.558 329.082 li
313.809 327.582 mo
313.809 329.082 li
309.059 327.582 mo
309.059 329.082 li
304.309 327.582 mo
304.309 329.082 li
299.309 325.832 mo
299.309 329.082 li
294.559 327.582 mo
294.559 329.082 li
289.809 327.582 mo
289.809 329.082 li
285.059 327.582 mo
285.059 329.082 li
280.059 327.582 mo
280.059 329.082 li
275.309 325.832 mo
275.309 329.082 li
270.559 327.582 mo
270.559 329.082 li
265.809 327.582 mo
265.809 329.082 li
261.059 327.582 mo
261.059 329.082 li
256.059 327.582 mo
256.059 329.082 li
251.309 325.832 mo
251.309 329.082 li
246.559 327.582 mo
246.559 329.082 li
241.809 327.582 mo
241.809 329.082 li
236.809 327.582 mo
236.809 329.082 li
232.059 327.582 mo
232.059 329.082 li
227.309 325.832 mo
227.309 329.082 li
222.559 327.582 mo
222.559 329.082 li
217.559 327.582 mo
217.559 329.082 li
212.809 327.582 mo
212.809 329.082 li
208.059 327.582 mo
208.059 329.082 li
203.309 325.832 mo
203.309 329.082 li
@
203.309 329.082 mo
203.309 219.582 li
@
205.559 221.332 mo
203.309 221.332 li
205.559 225.082 mo
203.309 225.082 li
207.809 228.582 mo
203.309 228.582 li
205.559 327.332 mo
203.309 327.332 li
205.559 323.582 mo
203.309 323.582 li
207.809 320.082 mo
203.309 320.082 li
207.809 228.582 mo
203.309 228.582 li
205.559 232.332 mo
203.309 232.332 li
205.559 236.082 mo
203.309 236.082 li
205.559 239.582 mo
203.309 239.582 li
205.559 243.332 mo
203.309 243.332 li
207.809 247.082 mo
203.309 247.082 li
205.559 250.582 mo
203.309 250.582 li
205.559 254.332 mo
203.309 254.332 li
205.559 257.832 mo
203.309 257.832 li
205.559 261.582 mo
203.309 261.582 li
207.809 265.332 mo
203.309 265.332 li
205.559 268.832 mo
203.309 268.832 li
205.559 272.582 mo
203.309 272.582 li
205.559 276.082 mo
203.309 276.082 li
205.559 279.832 mo
203.309 279.832 li
207.809 283.582 mo
203.309 283.582 li
205.559 287.082 mo
203.309 287.082 li
205.559 290.832 mo
203.309 290.832 li
205.559 294.332 mo
203.309 294.332 li
205.559 298.082 mo
203.309 298.082 li
207.809 301.832 mo
203.309 301.832 li
205.559 305.332 mo
203.309 305.332 li
205.559 309.082 mo
203.309 309.082 li
205.559 312.582 mo
203.309 312.582 li
205.559 316.332 mo
203.309 316.332 li
207.809 320.082 mo
203.309 320.082 li
@
353.999 309.832 mo
353.999 308.176 352.653 306.832 350.999 306.832 cv
349.343 306.832 347.999 308.176 347.999 309.832 cv
347.999 311.488 349.343 312.832 350.999 312.832 cv
352.653 312.832 353.999 311.488 353.999 309.832 cv
1 0 0 rgb
ef
347.759 310.912 mo
347.759 309.256 346.415 307.912 344.759 307.912 cv
343.103 307.912 341.759 309.256 341.759 310.912 cv
341.759 312.568 343.103 313.912 344.759 313.912 cv
346.415 313.912 347.759 312.568 347.759 310.912 cv
ef
341.519 309.471 mo
341.519 307.816 340.175 306.471 338.519 306.471 cv
336.862 306.471 335.519 307.816 335.519 309.471 cv
335.519 311.127 336.862 312.471 338.519 312.471 cv
340.175 312.471 341.519 311.127 341.519 309.471 cv
ef
335.278 310.672 mo
335.278 309.016 333.935 307.672 332.278 307.672 cv
330.622 307.672 329.278 309.016 329.278 310.672 cv
329.278 312.328 330.622 313.672 332.278 313.672 cv
333.935 313.672 335.278 312.328 335.278 310.672 cv
ef
329.038 309.832 mo
329.038 308.176 327.694 306.832 326.038 306.832 cv
324.382 306.832 323.038 308.176 323.038 309.832 cv
323.038 311.488 324.382 312.832 326.038 312.832 cv
327.694 312.832 329.038 311.488 329.038 309.832 cv
ef
322.798 308.271 mo
322.798 306.615 321.454 305.271 319.798 305.271 cv
318.142 305.271 316.799 306.615 316.799 308.271 cv
316.799 309.928 318.142 311.271 319.798 311.271 cv
321.454 311.271 322.798 309.928 322.798 308.271 cv
ef
316.318 308.271 mo
316.318 306.615 314.975 305.271 313.318 305.271 cv
311.662 305.271 310.318 306.615 310.318 308.271 cv
310.318 309.928 311.662 311.271 313.318 311.271 cv
314.975 311.271 316.318 309.928 316.318 308.271 cv
ef
310.078 307.791 mo
310.078 306.135 308.734 304.791 307.078 304.791 cv
305.423 304.791 304.078 306.135 304.078 307.791 cv
304.078 309.447 305.423 310.791 307.078 310.791 cv
308.734 310.791 310.078 309.447 310.078 307.791 cv
ef
303.839 306.592 mo
303.839 304.936 302.494 303.592 300.839 303.592 cv
299.183 303.592 297.839 304.936 297.839 306.592 cv
297.839 308.248 299.183 309.592 300.839 309.592 cv
302.494 309.592 303.839 308.248 303.839 306.592 cv
ef
297.599 305.871 mo
297.599 304.215 296.255 302.871 294.599 302.871 cv
292.942 302.871 291.599 304.215 291.599 305.871 cv
291.599 307.527 292.942 308.871 294.599 308.871 cv
296.255 308.871 297.599 307.527 297.599 305.871 cv
ef
291.358 303.471 mo
291.358 301.816 290.015 300.471 288.358 300.471 cv
286.702 300.471 285.358 301.816 285.358 303.471 cv
285.358 305.127 286.702 306.471 288.358 306.471 cv
290.015 306.471 291.358 305.127 291.358 303.471 cv
ef
284.879 303.232 mo
284.879 301.576 283.534 300.232 281.879 300.232 cv
280.223 300.232 278.878 301.576 278.878 303.232 cv
278.878 304.887 280.223 306.232 281.879 306.232 cv
283.534 306.232 284.879 304.887 284.879 303.232 cv
ef
278.639 301.551 mo
278.639 299.896 277.294 298.551 275.639 298.551 cv
273.982 298.551 272.639 299.896 272.639 301.551 cv
272.639 303.207 273.982 304.551 275.639 304.551 cv
277.294 304.551 278.639 303.207 278.639 301.551 cv
ef
272.398 299.152 mo
272.398 297.496 271.055 296.152 269.398 296.152 cv
267.743 296.152 266.398 297.496 266.398 299.152 cv
266.398 300.807 267.743 302.152 269.398 302.152 cv
271.055 302.152 272.398 300.807 272.398 299.152 cv
ef
266.159 297.832 mo
266.159 296.176 264.814 294.832 263.159 294.832 cv
261.502 294.832 260.159 296.176 260.159 297.832 cv
260.159 299.488 261.502 300.832 263.159 300.832 cv
264.814 300.832 266.159 299.488 266.159 297.832 cv
ef
259.918 295.313 mo
259.918 293.656 258.575 292.313 256.918 292.313 cv
255.263 292.313 253.918 293.656 253.918 295.313 cv
253.918 296.967 255.263 298.313 256.918 298.313 cv
258.575 298.313 259.918 296.967 259.918 295.313 cv
ef
253.559 294.111 mo
253.559 292.455 252.215 291.111 250.559 291.111 cv
248.902 291.111 247.559 292.455 247.559 294.111 cv
247.559 295.768 248.902 297.111 250.559 297.111 cv
252.215 297.111 253.559 295.768 253.559 294.111 cv
ef
246.958 292.191 mo
246.958 290.535 245.615 289.191 243.958 289.191 cv
242.303 289.191 240.958 290.535 240.958 292.191 cv
240.958 293.848 242.303 295.191 243.958 295.191 cv
245.615 295.191 246.958 293.848 246.958 292.191 cv
ef
240.719 290.512 mo
240.719 288.855 239.375 287.512 237.719 287.512 cv
236.063 287.512 234.719 288.855 234.719 290.512 cv
234.719 292.168 236.063 293.512 237.719 293.512 cv
239.375 293.512 240.719 292.168 240.719 290.512 cv
ef
234.479 289.551 mo
234.479 287.896 233.135 286.551 231.479 286.551 cv
229.823 286.551 228.479 287.896 228.479 289.551 cv
228.479 291.207 229.823 292.551 231.479 292.551 cv
233.135 292.551 234.479 291.207 234.479 289.551 cv
ef
228.239 289.791 mo
228.239 288.135 226.895 286.791 225.239 286.791 cv
223.583 286.791 222.239 288.135 222.239 289.791 cv
222.239 291.447 223.583 292.791 225.239 292.791 cv
226.895 292.791 228.239 291.447 228.239 289.791 cv
ef
221.999 291.232 mo
221.999 289.576 220.655 288.232 218.999 288.232 cv
217.343 288.232 215.999 289.576 215.999 291.232 cv
215.999 292.887 217.343 294.232 218.999 294.232 cv
220.655 294.232 221.999 292.887 221.999 291.232 cv
ef
215.519 294.111 mo
215.519 292.455 214.175 291.111 212.519 291.111 cv
210.863 291.111 209.519 292.455 209.519 294.111 cv
209.519 295.768 210.863 297.111 212.519 297.111 cv
214.175 297.111 215.519 295.768 215.519 294.111 cv
ef
209.279 295.313 mo
209.279 293.656 207.935 292.313 206.279 292.313 cv
204.623 292.313 203.279 293.656 203.279 295.313 cv
203.279 296.967 204.623 298.313 206.279 298.313 cv
207.935 298.313 209.279 296.967 209.279 295.313 cv
ef
206.309 297.332 mo
203.309 297.332 li
203.309 303.332 li
209.309 303.332 li
209.309 297.332 li
206.309 297.332 li
cp
212.559 297.332 mo
209.559 297.332 li
209.559 303.332 li
215.559 303.332 li
215.559 297.332 li
212.559 297.332 li
cp
219.059 297.332 mo
216.059 297.332 li
216.059 303.332 li
222.059 303.332 li
222.059 297.332 li
219.059 297.332 li
cp
225.309 297.582 mo
222.309 297.582 li
222.309 303.582 li
228.309 303.582 li
228.309 297.582 li
225.309 297.582 li
cp
231.559 297.582 mo
228.559 297.582 li
228.559 303.582 li
234.559 303.582 li
234.559 297.582 li
231.559 297.582 li
cp
237.809 297.832 mo
234.809 297.832 li
234.809 303.832 li
240.809 303.832 li
240.809 297.832 li
237.809 297.832 li
cp
244.059 297.832 mo
241.059 297.832 li
241.059 303.832 li
247.059 303.832 li
247.059 297.832 li
244.059 297.832 li
cp
250.559 298.332 mo
247.559 298.332 li
247.559 304.332 li
253.559 304.332 li
253.559 298.332 li
250.559 298.332 li
cp
256.809 297.832 mo
253.809 297.832 li
253.809 303.832 li
259.809 303.832 li
259.809 297.832 li
256.809 297.832 li
cp
263.059 297.582 mo
260.059 297.582 li
260.059 303.582 li
266.059 303.582 li
266.059 297.582 li
263.059 297.582 li
cp
269.309 297.332 mo
266.309 297.332 li
266.309 303.332 li
272.309 303.332 li
272.309 297.332 li
269.309 297.332 li
cp
275.559 297.832 mo
272.559 297.832 li
272.559 303.832 li
278.559 303.832 li
278.559 297.832 li
275.559 297.832 li
cp
281.809 298.082 mo
278.809 298.082 li
278.809 304.082 li
284.809 304.082 li
284.809 298.082 li
281.809 298.082 li
cp
288.309 298.332 mo
285.309 298.332 li
285.309 304.332 li
291.309 304.332 li
291.309 298.332 li
288.309 298.332 li
cp
294.559 297.832 mo
291.559 297.832 li
291.559 303.832 li
297.559 303.832 li
297.559 297.832 li
294.559 297.832 li
cp
300.809 298.082 mo
297.809 298.082 li
297.809 304.082 li
303.809 304.082 li
303.809 298.082 li
300.809 298.082 li
cp
307.059 297.582 mo
304.059 297.582 li
304.059 303.582 li
310.059 303.582 li
310.059 297.582 li
307.059 297.582 li
cp
313.309 297.582 mo
310.309 297.582 li
310.309 303.582 li
316.309 303.582 li
316.309 297.582 li
313.309 297.582 li
cp
319.808 297.582 mo
316.809 297.582 li
316.809 303.582 li
322.808 303.582 li
322.808 297.582 li
319.808 297.582 li
cp
326.058 297.582 mo
323.058 297.582 li
323.058 303.582 li
329.058 303.582 li
329.058 297.582 li
326.058 297.582 li
cp
332.308 297.582 mo
329.308 297.582 li
329.308 303.582 li
335.308 303.582 li
335.308 297.582 li
332.308 297.582 li
cp
338.558 297.082 mo
335.558 297.082 li
335.558 303.082 li
341.558 303.082 li
341.558 297.082 li
338.558 297.082 li
cp
344.808 297.582 mo
341.808 297.582 li
341.808 303.582 li
347.808 303.582 li
347.808 297.582 li
344.808 297.582 li
cp
351.058 297.832 mo
348.058 297.832 li
348.058 303.832 li
354.058 303.832 li
354.058 297.832 li
351.058 297.832 li
cp
0 .4 0 rgb
@
354.558 329.332 mo
506.058 329.332 li
354.558 329.332 mo
354.558 219.832 li
506.058 219.832 li
506.058 329.332 li
354.558 329.332 li
cp
0 0 0 rgb
@
504.058 327.832 mo
504.058 329.332 li
499.308 326.082 mo
499.308 329.332 li
499.308 326.082 mo
499.308 329.332 li
494.558 327.832 mo
494.558 329.332 li
489.558 327.832 mo
489.558 329.332 li
484.808 327.832 mo
484.808 329.332 li
480.058 327.832 mo
480.058 329.332 li
475.058 326.082 mo
475.058 329.332 li
470.308 327.832 mo
470.308 329.332 li
465.558 327.832 mo
465.558 329.332 li
460.808 327.832 mo
460.808 329.332 li
455.808 327.832 mo
455.808 329.332 li
451.058 326.082 mo
451.058 329.332 li
446.308 327.832 mo
446.308 329.332 li
441.308 327.832 mo
441.308 329.332 li
436.558 327.832 mo
436.558 329.332 li
431.808 327.832 mo
431.808 329.332 li
426.808 326.082 mo
426.808 329.332 li
422.058 327.832 mo
422.058 329.332 li
417.308 327.832 mo
417.308 329.332 li
412.558 327.832 mo
412.558 329.332 li
407.558 327.832 mo
407.558 329.332 li
402.808 326.082 mo
402.808 329.332 li
398.058 327.832 mo
398.058 329.332 li
393.058 327.832 mo
393.058 329.332 li
388.308 327.832 mo
388.308 329.332 li
383.558 327.832 mo
383.558 329.332 li
378.808 326.082 mo
378.808 329.332 li
373.808 327.832 mo
373.808 329.332 li
369.058 327.832 mo
369.058 329.332 li
364.308 327.832 mo
364.308 329.332 li
359.308 327.832 mo
359.308 329.332 li
354.558 326.082 mo
354.558 329.332 li
@
354.558 329.332 mo
354.558 219.832 li
@
356.808 221.582 mo
354.558 221.582 li
356.808 225.332 mo
354.558 225.332 li
359.058 228.832 mo
354.558 228.832 li
356.808 327.582 mo
354.558 327.582 li
356.808 323.832 mo
354.558 323.832 li
359.058 320.332 mo
354.558 320.332 li
359.058 228.832 mo
354.558 228.832 li
356.808 232.582 mo
354.558 232.582 li
356.808 236.332 mo
354.558 236.332 li
356.808 239.832 mo
354.558 239.832 li
356.808 243.582 mo
354.558 243.582 li
359.058 247.332 mo
354.558 247.332 li
356.808 250.832 mo
354.558 250.832 li
356.808 254.582 mo
354.558 254.582 li
356.808 258.082 mo
354.558 258.082 li
356.808 261.832 mo
354.558 261.832 li
359.058 265.582 mo
354.558 265.582 li
356.808 269.082 mo
354.558 269.082 li
356.808 272.832 mo
354.558 272.832 li
356.808 276.332 mo
354.558 276.332 li
356.808 280.082 mo
354.558 280.082 li
359.058 283.832 mo
354.558 283.832 li
356.808 287.332 mo
354.558 287.332 li
356.808 291.082 mo
354.558 291.082 li
356.808 294.582 mo
354.558 294.582 li
356.808 298.332 mo
354.558 298.332 li
359.058 302.082 mo
354.558 302.082 li
356.808 305.582 mo
354.558 305.582 li
356.808 309.332 mo
354.558 309.332 li
356.808 312.832 mo
354.558 312.832 li
356.808 316.582 mo
354.558 316.582 li
359.058 320.332 mo
354.558 320.332 li
@
506.099 309.002 mo
506.099 307.346 504.755 306.002 503.099 306.002 cv
501.442 306.002 500.099 307.346 500.099 309.002 cv
500.099 310.658 501.442 312.002 503.099 312.002 cv
504.755 312.002 506.099 310.658 506.099 309.002 cv
1 0 0 rgb
ef
499.618 307.801 mo
499.618 306.146 498.274 304.801 496.618 304.801 cv
494.962 304.801 493.618 306.146 493.618 307.801 cv
493.618 309.457 494.962 310.801 496.618 310.801 cv
498.274 310.801 499.618 309.457 499.618 307.801 cv
ef
493.378 308.041 mo
493.378 306.385 492.034 305.041 490.378 305.041 cv
488.722 305.041 487.378 306.385 487.378 308.041 cv
487.378 309.697 488.722 311.041 490.378 311.041 cv
492.034 311.041 493.378 309.697 493.378 308.041 cv
ef
487.138 308.281 mo
487.138 306.625 485.794 305.281 484.138 305.281 cv
482.481 305.281 481.138 306.625 481.138 308.281 cv
481.138 309.938 482.481 311.281 484.138 311.281 cv
485.794 311.281 487.138 309.938 487.138 308.281 cv
ef
480.897 308.281 mo
480.897 306.625 479.554 305.281 477.897 305.281 cv
476.241 305.281 474.897 306.625 474.897 308.281 cv
474.897 309.938 476.241 311.281 477.897 311.281 cv
479.554 311.281 480.897 309.938 480.897 308.281 cv
ef
474.419 308.041 mo
474.419 306.385 473.073 305.041 471.419 305.041 cv
469.763 305.041 468.419 306.385 468.419 308.041 cv
468.419 309.697 469.763 311.041 471.419 311.041 cv
473.073 311.041 474.419 309.697 474.419 308.041 cv
ef
468.058 307.322 mo
468.058 305.666 466.714 304.322 465.058 304.322 cv
463.401 304.322 462.058 305.666 462.058 307.322 cv
462.058 308.979 463.401 310.322 465.058 310.322 cv
466.714 310.322 468.058 308.979 468.058 307.322 cv
ef
461.698 306.361 mo
461.698 304.705 460.354 303.361 458.698 303.361 cv
457.042 303.361 455.698 304.705 455.698 306.361 cv
455.698 308.018 457.042 309.361 458.698 309.361 cv
460.354 309.361 461.698 308.018 461.698 306.361 cv
ef
455.458 305.881 mo
455.458 304.225 454.114 302.881 452.458 302.881 cv
450.802 302.881 449.458 304.225 449.458 305.881 cv
449.458 307.537 450.802 308.881 452.458 308.881 cv
454.114 308.881 455.458 307.537 455.458 305.881 cv
ef
448.978 304.682 mo
448.978 303.025 447.634 301.682 445.978 301.682 cv
444.321 301.682 442.978 303.025 442.978 304.682 cv
442.978 306.338 444.321 307.682 445.978 307.682 cv
447.634 307.682 448.978 306.338 448.978 304.682 cv
ef
442.737 303.242 mo
442.737 301.586 441.394 300.242 439.737 300.242 cv
438.083 300.242 436.737 301.586 436.737 303.242 cv
436.737 304.898 438.083 306.242 439.737 306.242 cv
441.394 306.242 442.737 304.898 442.737 303.242 cv
ef
436.499 301.801 mo
436.499 300.146 435.153 298.801 433.499 298.801 cv
431.843 298.801 430.499 300.146 430.499 301.801 cv
430.499 303.457 431.843 304.801 433.499 304.801 cv
435.153 304.801 436.499 303.457 436.499 301.801 cv
ef
430.259 301.082 mo
430.259 299.426 428.915 298.082 427.259 298.082 cv
425.603 298.082 424.259 299.426 424.259 301.082 cv
424.259 302.738 425.603 304.082 427.259 304.082 cv
428.915 304.082 430.259 302.738 430.259 301.082 cv
ef
423.778 298.922 mo
423.778 297.266 422.435 295.922 420.778 295.922 cv
419.122 295.922 417.778 297.266 417.778 298.922 cv
417.778 300.578 419.122 301.922 420.778 301.922 cv
422.435 301.922 423.778 300.578 423.778 298.922 cv
ef
417.538 298.682 mo
417.538 297.025 416.194 295.682 414.538 295.682 cv
412.882 295.682 411.538 297.025 411.538 298.682 cv
411.538 300.338 412.882 301.682 414.538 301.682 cv
416.194 301.682 417.538 300.338 417.538 298.682 cv
ef
411.298 296.281 mo
411.298 294.625 409.954 293.281 408.298 293.281 cv
406.642 293.281 405.298 294.625 405.298 296.281 cv
405.298 297.938 406.642 299.281 408.298 299.281 cv
409.954 299.281 411.298 297.938 411.298 296.281 cv
ef
404.817 296.041 mo
404.817 294.385 403.474 293.041 401.817 293.041 cv
400.161 293.041 398.817 294.385 398.817 296.041 cv
398.817 297.697 400.161 299.041 401.817 299.041 cv
403.474 299.041 404.817 297.697 404.817 296.041 cv
ef
398.577 295.801 mo
398.577 294.146 397.233 292.801 395.577 292.801 cv
393.923 292.801 392.577 294.146 392.577 295.801 cv
392.577 297.457 393.923 298.801 395.577 298.801 cv
397.233 298.801 398.577 297.457 398.577 295.801 cv
ef
392.339 294.121 mo
392.339 292.465 390.993 291.121 389.339 291.121 cv
387.683 291.121 386.339 292.465 386.339 294.121 cv
386.339 295.777 387.683 297.121 389.339 297.121 cv
390.993 297.121 392.339 295.777 392.339 294.121 cv
ef
386.099 294.602 mo
386.099 292.945 384.755 291.602 383.099 291.602 cv
381.442 291.602 380.099 292.945 380.099 294.602 cv
380.099 296.258 381.442 297.602 383.099 297.602 cv
384.755 297.602 386.099 296.258 386.099 294.602 cv
ef
379.618 296.041 mo
379.618 294.385 378.274 293.041 376.618 293.041 cv
374.962 293.041 373.618 294.385 373.618 296.041 cv
373.618 297.697 374.962 299.041 376.618 299.041 cv
378.274 299.041 379.618 297.697 379.618 296.041 cv
ef
373.378 296.762 mo
373.378 295.105 372.034 293.762 370.378 293.762 cv
368.722 293.762 367.378 295.105 367.378 296.762 cv
367.378 298.418 368.722 299.762 370.378 299.762 cv
372.034 299.762 373.378 298.418 373.378 296.762 cv
ef
367.138 300.361 mo
367.138 298.705 365.794 297.361 364.138 297.361 cv
362.481 297.361 361.138 298.705 361.138 300.361 cv
361.138 302.018 362.481 303.361 364.138 303.361 cv
365.794 303.361 367.138 302.018 367.138 300.361 cv
ef
360.897 301.082 mo
360.897 299.426 359.554 298.082 357.897 298.082 cv
356.241 298.082 354.897 299.426 354.897 301.082 cv
354.897 302.738 356.241 304.082 357.897 304.082 cv
359.554 304.082 360.897 302.738 360.897 301.082 cv
ef
357.808 299.082 mo
354.808 299.082 li
354.808 305.082 li
360.808 305.082 li
360.808 299.082 li
357.808 299.082 li
cp
364.058 297.832 mo
361.058 297.832 li
361.058 303.832 li
367.058 303.832 li
367.058 297.832 li
364.058 297.832 li
cp
370.308 298.832 mo
367.308 298.832 li
367.308 304.832 li
373.308 304.832 li
373.308 298.832 li
370.308 298.832 li
cp
376.558 298.582 mo
373.558 298.582 li
373.558 304.582 li
379.558 304.582 li
379.558 298.582 li
376.558 298.582 li
cp
383.058 299.082 mo
380.058 299.082 li
380.058 305.082 li
386.058 305.082 li
386.058 299.082 li
383.058 299.082 li
cp
389.308 298.082 mo
386.308 298.082 li
386.308 304.082 li
392.308 304.082 li
392.308 298.082 li
389.308 298.082 li
cp
395.558 298.832 mo
392.558 298.832 li
392.558 304.832 li
398.558 304.832 li
398.558 298.832 li
395.558 298.832 li
cp
401.808 298.332 mo
398.808 298.332 li
398.808 304.332 li
404.808 304.332 li
404.808 298.332 li
401.808 298.332 li
cp
408.308 298.332 mo
405.308 298.332 li
405.308 304.332 li
411.308 304.332 li
411.308 298.332 li
408.308 298.332 li
cp
414.558 299.082 mo
411.558 299.082 li
411.558 305.082 li
417.558 305.082 li
417.558 299.082 li
414.558 299.082 li
cp
420.808 298.332 mo
417.808 298.332 li
417.808 304.332 li
423.808 304.332 li
423.808 298.332 li
420.808 298.332 li
cp
427.308 299.582 mo
424.308 299.582 li
424.308 305.582 li
430.308 305.582 li
430.308 299.582 li
427.308 299.582 li
cp
433.558 298.332 mo
430.558 298.332 li
430.558 304.332 li
436.558 304.332 li
436.558 298.332 li
433.558 298.332 li
cp
439.808 298.832 mo
436.808 298.832 li
436.808 304.832 li
442.808 304.832 li
442.808 298.832 li
439.808 298.832 li
cp
446.058 298.332 mo
443.058 298.332 li
443.058 304.332 li
449.058 304.332 li
449.058 298.332 li
446.058 298.332 li
cp
452.558 298.332 mo
449.558 298.332 li
449.558 304.332 li
455.558 304.332 li
455.558 298.332 li
452.558 298.332 li
cp
458.808 298.832 mo
455.808 298.832 li
455.808 304.832 li
461.808 304.832 li
461.808 298.832 li
458.808 298.832 li
cp
465.058 298.332 mo
462.058 298.332 li
462.058 304.332 li
468.058 304.332 li
468.058 298.332 li
465.058 298.332 li
cp
471.308 298.832 mo
468.308 298.832 li
468.308 304.832 li
474.308 304.832 li
474.308 298.832 li
471.308 298.832 li
cp
477.808 298.582 mo
474.808 298.582 li
474.808 304.582 li
480.808 304.582 li
480.808 298.582 li
477.808 298.582 li
cp
484.058 297.832 mo
481.058 297.832 li
481.058 303.832 li
487.058 303.832 li
487.058 297.832 li
484.058 297.832 li
cp
490.308 298.832 mo
487.308 298.832 li
487.308 304.832 li
493.308 304.832 li
493.308 298.832 li
490.308 298.832 li
cp
496.558 298.832 mo
493.558 298.832 li
493.558 304.832 li
499.558 304.832 li
499.558 298.832 li
496.558 298.832 li
cp
503.058 298.082 mo
500.058 298.082 li
500.058 304.082 li
506.058 304.082 li
506.058 298.082 li
503.058 298.082 li
cp
0 .4 0 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 37 /percent putdup 40 /parenleft putdup 41 /parenright putdup 45 /hyphen putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 55 /seven putdup 56 /eight putdup 66 /B putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/percent <1C60D8A8C9B59F85E959DC9E62959B5B049387399C5A88EDF2D5DFBD776DAFCB889B62AC98B872299D239B948311090C1C069798A7F20A8D7BE29B8C384DB55F663943C1B42044C054991C856F3C3AA085C2B4902C8215DC2701EFD5FA664B5C9C44640813B5AC440B37B70CE58EFC65A9AFC0BCC84F3CDC68795E4995966F74639212F5372957A607AD4B6B94BBB7C36A3A6EF325381FE12C0468B5DD1F216D01C174551A50AC78A5328CDA24DAC0484DFF3993D32A7CA064F169906996AA1E2F6A555998F55A1AFCE2776BEE589EC3162F968A180A5713C4537EF11B8529CE22F8373BC7632472323D1F8491B48E948870255C9E830736EE70F30EE309DFBBB8294CCC2BB5ECB81667BEB60155> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/seven <1C60D8A8C9B7EF326C86E2C8FFDAFAAAF8B2EE45CDE12ADFFACC9341D807009D1D241E6029AF890199C52728BBB0F3ADB8945AB4753C3621AAE632A8EC4FD7F79CCD78EF> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-/B <1C60D8A8C9B64EDFF4E8F029E491459914546F05F980240E216037EFFB56810F73C7B1AD75758AC950CDF0AE7CA5E10B4B98E91DD14CBA33340505432C4EBD036ED5D8912D20451B0A88BD5908DF5F74741DA09743ACC2D69ECC46C5DD005482FE9F42B63F3612F31E021BB829EB7CDDF491856FAD0A1D6B2854CE32CAE2827DAD35AA4DEB8EA2DDAB1E824241122D8E6929DF014B94E2393EF8A13B> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ADNAIL+Helvetica /Helvetica findfont ct_VMDictPut/ADNAIL+Helvetica*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 9{/.notdef}rp /B 189{/.notdef}rp]ADNAIL+Helvetica nfADNAIL+Helvetica*1 [18 0 0 -18 0 0 ]msf48.1729 344.572 mo(0)sh95.5063 344.572 mo(1)sh143.505 344.572 mo(2)sh494.506 344.572 mo(3)sh199.172 344.572 mo(0)sh246.506 344.572 mo(1)sh294.505 344.572 mo(2)sh350.506 344.572 mo(0)sh397.839 344.572 mo(1)sh445.838 344.572 mo(2)sh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 68 /Deltagreek putdup 102 /phi putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/Deltagreek <1C60D8A8C9B7D7E8D30894797D5AAF286B71BDFF6614E4B5AD120122FA30F5DFD5F63E0C3E5314> |-/phi <1C60D8A8C9B7B202A5070E4C89CE6FEBAF8BFBA54E083F9B6D68FF9D61A743A352AA77DD6A9C82DC9867B90A5499DC7E675C99D0626484D42D456AA38B222F664E29B675558155AC2993505E3B23A971292A2880AD39D9096E1F14728BB6D12DC2F6EBFC87D71712B99243BEFFA9C5A2C50CEDD1FA0E799DC1BDA6F31AF7466E5E6E429A5606437B0DC4B38C506A6F08B2BA1A5DAC002F850CDC3F9D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ADNAIM+Symbol /Symbol findfont ct_VMDictPut/ADNAIM+Symbol*1 [68{/.notdef}rp /Deltagreek 33{/.notdef}rp /phi 153{/.notdef}rp]ADNAIM+Symbol nfADNAIM+Symbol*1 [18 0 0 -18 0 0 ]msf269.507 356.238 mo(Df)[11.0127 0 ]xshADNAIL+Helvetica*1 [0 -18 -18 0 0 0 ]msf15.8403 178.574 mo(B\()[-12.0059 0 ]yshADNAIM+Symbol*1 [0 -18 -18 0 0 0 ]msf15.8403 160.574 mo(Df)[-11.0127 0 ]yshADNAIL+Helvetica*1 [0 -18 -18 0 0 0 ]msf15.8403 140.184 mo(\))shADNAIL+Helvetica*1 [18 0 0 -18 0 0 ]msf38.7827 326.736 mo(0)sh23.771 254.07 mo(0.4)sh23.771 290.404 mo(0.2)sh38.7827 216.404 mo(0)sh23.771 143.738 mo(0.4)sh23.771 180.07 mo(0.2)sh38.7827 105.736 mo(0)sh23.771 33.0703 mo(0.4)sh23.771 69.4043 mo(0.2)shADNAIL+Helvetica*1 [14 0 0 -14 0 0 ]msf167.86 12.0723 mo(0-5%)sh309.839 12.0723 mo(5-10%)sh453.589 12.0723 mo(10-20%)sh152.288 123.322 mo(20-30%)sh302.053 123.322 mo(30-40%)sh453.589 123.322 mo(40-50%)sh152.288 233.072 mo(50-60%)sh302.053 233.072 mo(60-70%)sh453.589 233.072 mo(70-80%)sh142.719 136.573 mo
142.719 134.917 141.375 133.573 139.719 133.573 cv
138.063 133.573 136.719 134.917 136.719 136.573 cv
136.719 138.229 138.063 139.573 139.719 139.573 cv
141.375 139.573 142.719 138.229 142.719 136.573 cv
1 0 0 rgb
ef
139.719 150.323 mo
136.719 150.323 li
136.719 156.323 li
142.719 156.323 li
142.719 150.323 li
139.719 150.323 li
cp
0 .4 0 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginADNAIL+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/P <1C60D8A8C9B64EDFE336D280AD0769103D1650D4946BC89E21A88DEC51613F3C79BEE823BD11DE4DA6DB5B89497F0D2976B3DEFC67AF28487C3BB530BC49F1D09A090BACE6D7137C10758B70768799060F36DCE81F308AA18889AF5053DE> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/f <1C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58ED82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |-/g <1C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |-/h <1C60D8A8C9B7EF3217E3BC2FA8B1DA462FB5094608F57CE7723860E586F183A8CEF3068A0C010301729338C182E1C8129546DF528AA710511DF02DFE7ACA98F8F6531E02F7C3E3DBAF3320F3D602AE65A66CA41E6984> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-systemdict /gcheck known {setglobal} if end {end} ifendADNAIL+Helvetica /Encoding getdup 32 /space putdup 67 /C putdup 68 /D putdup 80 /P putdup 83 /S putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/ADNAIL+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 9{/.notdef}rp /B /C /D 11{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i 2{/.notdef}rp /l 5{/.notdef}rp /r /s /t /u 138{/.notdef}rp]ADNAIL+Helvetica nfADNAIL+Helvetica*1 [14 0 0 -14 0 0 ]msf145.788 141.822 mo(Data)sh145.788 158.322 mo(Shuffled)sh81.5278 35.0732 mo(Charged Particles)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ADNAIL+Helvetica*1 uf/ADNAIL+Helvetica uf/Helvetica uf/ADNAIM+Symbol*1 uf/ADNAIM+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Gary Westfall) ()%%Title: (fig16.eps)%%CreationDate: 2/25/10 1:01 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB\U>dP,ubJ9q:NjO?oL3J.c!?lNU.#u*,$h6:PCqr:rYOjpr+6s.dZqjhZffj6qEX/&WnWN&oDRE`:uEB@HDkIKE`@n&D;%)h#G^0b=d3K9:u+Cp#<r#YNMLo0gHX-uA+`rOrPN*V>$%OYD#+lj3p5>D:no\08;9(:fnG'U@RXG9dnZk5UCK`lHIH4;f#``-T,o%QSGrj9icjI9"XHk1p%>TIu)!_1'3N,`qH%LGdeHqC*33Ioob]B[a%p+_pWR"P]l,"F>/;qA+3"D2p<;/lfll<1FC21d2r_5TD_.,%bq91r#J(7,dm$pCPP&ofZp7-<BlsM!;t*(tLd&;)_Z>i'F92]g?ckCfQt&SorSQ1U+m)G_5`Q>th=f%;i$3ICc%oV%FL)PH1PVYg%qH8U+m+8!7JOo4L6:O2,''<Pu"W/,'MLue^N592C(_-f7B0?-LJ!S$f@Y![+jn>pR(A&_Rb6^n7/9tn^rs+K!%g4SFr_#J$3N`[o%]3RboU-;$1=!)Wb@Z:T8]O+j'jqKmRSGu5@k`!SCE<&,.>9DhVA&\e4!RSS9qEp>Y""cQMmYPdnpPO:``dNB`r-i-(KR*&`-tpO^%i'0=<!P\Ue%3\DRJBShkOQ5\7)?YWtTs8:H4I]P_cC3g7^>-_q:54O8E]N7E1$g\ckW``#Squ=>./P+B@5.DmJ_2^[!0!1mjPaL6%kHPIM(:VcjD?Hd=n;TF5(h!esAA+J]ca_<b$$cEY2tRRYW;$%r3tN*V[3gj[OEXH[rZT'j,Mqd/8W_j:jirtHYr<3gEk,M;]Z&:Z%GTaXp#Jf/K\&gNaGe;`M,J(u&61Y/\+9ACaf#5>:,JFWcrWiOsYeUS;VSPpPY7cFg$1?=i%=UmX=UNk6\MdXphVd5;D0L*VSY5A1%CV-@REho0Gl)$tbWPNrBg.k003C.thTS!C+SH*t_W<5Ghi@$*`!kHW=5-EMU_7LeOO95<5(VI!jD5ZDOTG!)l'L8.6-bK=!^a+hj%(Wbs-J5Y[/qnSosCj1X`1%T"8hBoWO;%!L#dsc_@2TtKMDoDYPLY-o38*S?SPBQ<-4*!A,!3#"FJ=ebFC3!Rs05Q7Qpmo8#HR("!%aQ`,">;,O8aa1<[*s$Qdc+!s2E,X!O+>:4%h3\;X\0a,G_jZr5phqu8JA,@XiQ.u]d"L7,4W.CWfpI8HhAt[>m1aZa95Ms>Llh^p%&Q&0/%240MJ#@dd0)o'@#2tBXdCdMJRZSh@7Z0cWLO+h'L$L\oL;4\>ZR$GB_]AfaG7X30VN=*j>k;to*`3'l61b=;4Y1bH$F#?&%Rh`/@;=HS=F%2;X>`g@-Q2\HHACi<_W(K!`dZ'[sGjMr0FGhd-U+6AqV&rFj9Ms<f.sRPTLs9U"6@K.I!,=E\+G$1SR[.W>GB)E`%8*"Zr*ZYbV%X2,djdh@GH\P9-C!^7)fV-)Q&i2_&L\0;Pe5UELfg1N=AfPi,Y@&+5Hhj;IHimPHG<T\*5khNkN#hI[FT1V5h,ro!%SmCU^55LJ0q-=6&4s%QYARWNpIP2g)nTu7X_3^7-\X`bp48]\H1*e\k!&QDbJuf'h)"7e@,oUH]_fE,U/nZsnkkbQ9o\MaARiWqB%h^efH"4Wh@HmIuoDM\,0BY^B/02O;u3fSA@llGK0$iagb&WM#C`#9Ib5!6W:";'\p+guI/kR1e&nJVZ>1[q*naFc>&L4G470_96h%1-Fs_PK9u95(Z:9Ed-;?\$MXAQC[H`"<\5^'^!Etp]m`k]@"Xr^jg)@QNtA`>41dXJABT(&k;^@GStp@s4)S15g4c+`kP:K>29*E%XET!l=RHtJTZ4GQ\^q#pm'uG=1nrkfaGhKJ>?`=;,9AcCRgu*d_ZH425jqPi9_te,*rVQd]_2IH(8NZT*iXjuZeMTBYi8.mFQR6.%.r>7CJYRp*fJ^2qJPIpS%A]AA?27i_"gh=M!$;+u6dLh/if,L\j[9T0b]=7-rTkND6CMRZD0ULBr6g1cEj@%GIt4Z/;1f(P!S$TQ%0HsCUHuF4u4`j8TmDWa7+IIpQ$+4Sj!/",8$WWhRXf`>`IN_<JJNhTB%p0k]hYJ!)>j.)##,nf_D;f5=2gV)c)oCeoGhYmLee)^+%bh*'ubmgc3KGi\IJ1ieLi<T;Q04VfmB^C4W`[U]Ur<9TU#DNMdW8\"+=<V;7?O>RQpiU[`+265:HSFqR5JXAuJc>]H#eU/A"5b0k%_5EuG1_fJT&"(]+KDlF:LB?fZZFU9o.gu[q(X*(Z>0ZkWNIYFJr"Fmn2:gSdWFq52aS5]hS9XD&M4p3p]"qi;LHc[WS8`LD7Yr$g%_MC0@5GH+*K)'n`T)g(VNs`[j^9W<B_WW[/R"o#A45_"OD2E)s&buZ[\+Lho-$e8_H1rAc>^*d_[MIdYBP[a4Xl?jQK7j)+,NC]b%_/99`QoGp+S([n8Sg"2q\@2fOZq^9f&)AMHr%cs-8bs7Ikfj.YA@)@BBdNRh"S<3&'@-SFm<8g3-\'5$I3F-OA_W9C;u3s_m'AEn%4RA"[,NoXjs+c]O"S=J;Ja+D<e8fV8,9Gf_TYA5X5gbR8,B@Oh^q^6]!^2=DT.I2kZXC$;YX?a"jG4s2An:q&,@SME7Ol60E7DpW%%,ou34*ln^#,ZsF5;OJn+%3qe2<5!__0209U&8U$c\Q=WA+mW$2P.^+b&RI^r9k*a/>n.?9IRFk"%S&+)9gtBE<Guf<g*]+TLa[&%:R:n1Vsr$kc^l;?c*F1#s,9Juc4aI4oUjP-aL6f;;[Vp#*<.fXTg[f;QVn'iItS<KXETjC1"AW/[cNJco?qW<QREi6lPLRK%\WB+%oqjl9@I"k,s-8ha<@OVWr6*K4:$?#5but#&,j;L_FGi1rqB+j535!@q3p\d)=\\Vapb50sTEP`5)^&U9g$u8h"mF-Z;-3`mOA]ie%YQ*V4pcg;6e9X.Nhl_mJI:pQ?<uUBH4gY%K5HT7Bm<"?8r*'u@rhi7"`'U&'0HALZc+fRn_a;\*R"kXo;>ESh-\Oi_<..^R!cC!^%)&Cut5<CLC+]]N.G]s-76%bOFkUgj=6T]_Z^L6k-HEY"DOqRmCZi%kqJ$;QDVn9/V%\kI,LT^#7oZDX<:RTR^*psXtL;/Cn6%;]c%jC6&e@h+PBG_>$G(6!7@"[;&9GVIG-%3_"6954]1EWAc7q1$UF">Nq1^`GTNe:NStTtla44N8d@?N@688tGYniLZk%[Nt/Lq_:r4%R`E;eN(Uc24os^H3SIC.&X_.k+4,Z%e4=RF+O+6^ACd7__;I0)EeD7u1P145j?J=&6i?gh/5DOed<N3.*r^t*CiYZY`b7FuNol#"%[G/%:/Hh(OB3]7nc_B+k6]cX3/u;>=6hg^j,FG!0U^lI'7HeQ8!+TF5JI-WTCeCEnFT4^%%Y-+jd<`0j86*1\Q-"?_#@rK?cbGGn%Z":roYr4`&_*!;TTl$'sQB(8g9;u!EUd0"jPgRfTb>4q;gVgZY3e2Dn]?+^q6Pkt0`i.7m$<&UX"^t'_isp0$+BJ1Ji9SLFS.a<"%%N2rU]7]<%/tDoMX)2ZFVGB`=T.sQ(Z@\sJXYasj<ZQ(p1ciM!VO(Z[]Ka$5#B2WO,?"IgD70[c$=n2&ca55[1pYMTXknq=/b`bj%2_2LTf3l/q8J,nMUcu/ebd-#H\cEq%PC5eP[Q#YeE$)$e)oE+M,L6CB.A`q/73J!Y5FF'-(qeboGbI#J[n'D?e<6@:Kq/[hQ3QW/%au76GO6*'#jr&_t&IN&.-lF&-Zb<QL\E?9>/mN5Ven(47!Yl\KJY6'dM3\s[%.m1%8/o(>$su>)<;Mb9$"uZkU]K:RR0]^-AVF#Q%/%V-d@aWHHV&'#q2RtG:"oCIITjqu_Op9Z7km^!lai$1m7+tDo.YXXTXb<:$X[(+GaJQuI+(Kk,rW?_<9mYdq]JYGcTpSAsU>/;l%&NTET7`["*X]\&?3sE,@4WEn!>0"^`B1L61Wh!eVr$,=Nj]bSi5pTQ7RdL)OkrELc?VgYLEsg`8ZDH&A$JHJcCX.$eji[C2je:UU%Zpl"=7'kI4@[d\7gFIJn[QSl4CXJBf[\8^kG#WoN9U'0!Q7\@*&@<9-TkLHJQh"sLq2!pe<G45BD%C;]9;TlOLWdg'E2$,RmAS!;%$BmcdNm"k_2Vj[lU^BrNlJHrLe0pPs")UBdNe7PJrFDhRJ5R7GC+qfNXrf,+$sm!O?sk_iEZDP%>m^V?*c8CQ<kl;@Kj&2)iQ4Q^%3,DkrgLGUU`aBql<nu4"BktI@>G$*!5<e`]!AJk@2d<S^jc`1<1I[Y3K.BRV;1f<o8ik!u[/QZ4V[dKc5s`L$CZ]=B'>DJnkN>C^%48UJ&gj6$5;u<P3i:OBrDr;5(2/`d/FZ_?:>[PYVX0l>4NG;+L?c0`H`AO!"9*`Hnf?W2g7M,m-Ad_0d=W;c]:s8ZXFR&><)Y7Gc%0W#$d2&*:!C:b'8?62!L'qGGrdVVO34f,N9"8rVOPQT.f;<]QHak?Du=CJ)@..0W>'94orK8)1T65M`SIi.lUBSB[t+Y3dI!q^Fp%g1sn39KNss!NifK(Ac;PjG.'5OT=pXWTP9UAV]AuRt$JP.*M:f.1g3,_2GE]q6!(lG6rX\NFnt/-VqqXJ0C`YLnn"+bM+a:RKWIQ%7q5:_k\*VH$sg!d68]?QCl[cb`P'jMR-V/?[XqiOBJ&SYX9g3lj,kMm]1EK]<KUbE52;@.h,[8&O]Ai@)MD"$$Xdrd#I-;N`tSq"%;Q>h?1F^prY"*V#l\j>!#@TkaV&^RDe1cVF&he#cdP_d!UJmC4An7FYn]o8=O.*fD)t"1Dep\0#E3a;$5n&NC`@mIC8-)[9]D[;@%!Jk59[GBKfU`TnA6ZYoO^Ws:ZeS6@3+J>lh%g2'nV=.*j-*?^b];t)'1u5\N=l(]=o<"um1:_5Pr,Ukl*^\[T0m"M\FN^Z(5W[Kk%Zp&*Cj!7kZqApkn4:o$C0WOV@R(KSX9RPc<A.l%.Q(dJ,YJH`c2bYLOW-68,/'j2K,!`O,b@G?cn9D&+'3's*&)[g39'07NUO4Kf%I,tDODHD"fCJ`]!qlk%:6MJMu+n4ueqcR.\%-GD8X,U\A4bTT:nEY/q1Y^#u?BpW[gVpl^M,idj';IZ/B>J.CQ>G[Ib[<oY.X_hs%a273//Y$$Xf'fkHDK3`N_B6:D*8d(!"E43M&o$YN%0q!Caq*We*Va1@/QAWJ;pHEZH-!GMpKP3>n"]-p@#k6=S<MqXph\,,!lK7,%C\Cu&\L6"<1R#:k96oO\8A3UB(\,UX["=p9cJkq1TJ>JoG8)Bj&)XYRTJk&sc"X5JFFG:;NOIpbp>;Huf+rgf3>?uAb%.splc,??%N-iI3cf?i$p/3\rQCLook:24-&1</Moa8bU[M%OX5;nKQoA1(H?i2WmF1[7`3o&H9,Nq#/R=$l3s&O51K+s]>C-Qg4$KlU8BB"'f%O86fi?O1I_CBal5KcKi+9)>6jd.8%$.@",j6Z.W9?`+>As13\2GXi'5alN@B+dN[e0L/H2'8%/Ahc0dBZSPTR0V8tr`B)g;mj`e8%^jJ:P'sR*fk"MV//mfbb:GQnGP)8u+k@oHYP3XfPf?=C9/>,kC`c^3tmf75u^;*3+!<!ZijU+@Cl2j8J"/1e&cQq6or&>'?DuI.)%)He/&TlKfeg+pEeZd!m#<LC1\^R<u_f\Bl["aZ^_:!A[FoV4CaSZfT>Ha[',r4EL1bFakT522IfV>SPg!s5@6_r6sHNlMrMs).,T%B#@J!($sC19cKDF2"-(M5O:PZcLgGdQQAsQ'H(KAS\naA;`bspLF/^rJ.Cp6]TXZX<#\A'1Oh*GM]Ymhh"R@1(U2>#`fF4EnXV'C%!-^D-cJ1$5ONs,YZGMH0-\CKNoR]+J.Y4i1ku;G_Zbm]A3%!V>a1k9U=l#:\&tKQ*rF(e\4!H"AkkGc:8iFlLSmR.W<^gZ=;rTeP%#XE;52,(VAKcHN^6FF(KU#"Jpo0ncKa!]]0D"tpB-CociAc4*1I9/&4?/qm=PXJS@4`<#e4-*;fcnMG4+kPq[jEc_f$JLbli>E2q%U(?j\"-9@MF(gj*X`_9U#_)Q=WUdOQ@-5K57Q$U!MM5Ft(NMHAOi$YHPuebg>4@"0*P%f[FH]pI?[(2Kir&n.W&m!>qk@m#j==Bg%iI:K3[]kA8^+?gVZa$12V7eRh<^NIg]*5;?Mm)Ra<eUVYorjCjPaNoVTn<:sN!#!ICtCeC`9f,/QVN#Nq,t<C8>G\_!PlQ:hpnr!%DIqQU98PEA'Bo.N(WT';'<mc.PVnJ\O%!:DpPiNo,YnFggCE1&kT8,8Gold)`iIStB^Eih0S^b%rG;ACQ=ldYZeq0=-1:k/^0cF,%BNT<Ma)RJ`+$0N&.;B:`)#.O'+X\uP4^18Ko_&p^Apt[/f15R;mEj0eFk`c!r_.B8*M6s.:UOLa$9l/$^i-!,n2G`d6Z2rU_NlG/%`O]oXB4(Q;TBsr@r=8EWMh$OL"5B/-]CZL+oM_EP0TGf`(9W"gOUr#>Z7/=1#Wg;F;-Qa&9Q0,I_9O2PTFVSA4\PtjG06Cle%[WQ%d&7KkppQDT>aM9X)[V6W!$3%O5:q,lG%`3fUM_"Jl">^G7-JK?$qnRXZ[`084[6#D/<iGdV_#V-SgaE64a/(qe%fD^RE@(c5Y%7)%r=hmP&NT&ur)]=o&Ec=&VgVAYMk2@`,G79+&=KGjYE1?o]I5Ig$<qnF)T#AAXE$oaoDi?_,8NFC6j]/!Jhb0_Z:%-o+W*"&5`T=%%;1j'0HlNE3DZiC!&%A/D+bfE!V!f`X0DoXCB9f>7KLe$,P`QOn7NgZ*:]Q/BMGX8uo)bPV9571M5pUrXLW8p&2t?f-Zl%*[(U5-P%&n\Y0@RuY*DL8>(IR4-g_k9M7r=k`MNbmmd^+Eot6jHij1S8X&Lh=,(Xdh=BhiGHQalMrA<=C+lYm@tq],uRb;HRMem^r)gE\P]O%-`^S^]p&iIM;Y)(m*5m]%d+dOB7MW^G%a]B$Zid?9q-U6Wr8,gj$_`>G+X&fg7nD^n`?NBYQ*a<"3M(0m)uiabd7W9(g+$.bQ\kn%E?a9`p4TQ'$28XX-[k9nZhK"aqRS=T>TI`8jRThbINtF'cO5E$=Q+*IBIVJl;4]J#(%rMZ$=#N`&HQ-8khASYV;7(gcV=JQ#Jb-C%SbM[91CO'`/1"]+#=#A2:3<umcr.I'3RQfS0NK:9Tl)hHg1;&q^4R0hTg[HQZGOgOf=YSZU\@q%RB\lFGYnEQGo"J`B)S^OB;(n)%=TJU$3;8s-4*&[0Y6-P8Z!&"UbKriEM]fH(L$G6rod;l]aTaj882uA%fki&5\o)Vqc#+Q+4-34+3Ve[`3>FA6;k];*'7b+@*Lc_b%okuPUpA\hsM.WHo1(upcSeEfV0`dnOL[tF^*0!#>JL<2)L4YVPYgOGeS8GGc:@RuT(SA@9S%_SJ'P0DWNe7>M=p6aQIc&325/6kL%`B]366[&1<4CGZ?+T&_"UD#U2X]^/fO;N'J#.^!PC#U4Rb`9Z>Rl(DJW@%1u6b-*hq!$b1KM-qNa*jqs4T_VTRA65Wbuq1SDa+l+%1hsSa<i4ubpGPf@7uofSpA(]d$@Qdb_:t$CU%-E[Kic<7$Z#)llS@!98-rlt.ODTCNS._%=L+/7a[J-"H[JI2"E>t5s+]B9*h,Ui%<<;IK5$,i0N]@MlFX`Mf%f1fo1gYBI%m#8KcSCE+Z(`a9hUO)%LYW[FlKSiR2m2B\XA1FFda2l8^leILM=FuCH$a^<@LHgq#o:;>%&)qY]G!64?<8<0Gl1h-$m$)!R`>%-kP@"nUIF@EhAM%R!KQ.h\q=X>F7s4&2F9G2hE!:Hlr/t6<?rXtu#PLOT2_T`\_oijHI5ZYA%S!@;E?I%0SW(@DYR%AipgO$%i[bep"oJ@o\:Xd1&'6US(B=e7pH5\<p/,/[FjPH;&*]ait8'g%T_&2]Z+W*7?>2J&go7@(;m4C(T%$t^F<;`F8I*"L2@d.t4$o:$]O\.reqnK#ufTa*BH7'm<QS9],@rE+qo(o4G6aEM:Jlc'oH9&[8"I9X@-dk/HDIuu,hRc>Qq:#]".%bj<<*'DouXCscmgrn\j+/\n%Rhe*SdY,+tN/Gm!9lanPAltFYM0-+[3aG[V,(!`rN.4I)RkQN9s/QDTV#;e>F:_TLm'5b;*7llrk%G%l2>knRf\?Fb4>_,[Gelo&D0E3bNUM7Im8GTqGMT09Ot1.VLT&Ug@1:.JtE>i+CDm>&5<k4R\Pi%R+*'[KLI6_acH^0Io&EJkl@%9j"f1:,!g#obBo/++In/f[BWo#Y[9\[T)Hj*-+C[[0o#)k4mQ2s/FT5eId8!`1)o:EFN<_Tf?6BBc^Us?+UUeBZ;0dD$N^@jitVM%L$a=k%<KBTpCp_&*Z)1,P7G9mo2#26["LB*h$_Z\#A3Sr$^g#!YJ<205[b^!hRC27N&Eq3k.h)[ZQ9H"9>?`[@GM4[7PHWTK6pO*%f)FOfQZis+^t=3MG+5N"jELsU$Y6j2DR,<ecFeD1)(X8on_@GaGr%TVfJ96aHA"=>P7<"9T*hpg\$u,u*%V_K7XmsE#H[fT??Wek%3WR.;befc@kj'VRH-iO4<PTo[AB6FE+OO2tfZAlC0?@rL(1tl,=HR;t_=Y0V?cm#rk,!H;r_e#4imhkp]?88TaZ=l+YFXsWPUILS%]`FSsr[nk2,NbE8SfFK7j=-ChcgF&>"h:M=coY.ZbS*?8Ph1s8B.@/hJG&$u,MqH-aq#1tOb.$<B>>NPQH\ZrEtlDbKkeY[k@Nr(%`1DEY!ok9ul%JIsgH;h8_MRSsf%0o.^B(C-M#>i3G<lYO=],n6+ZV$sA"bZNW.Jei.OOKmjt>T2hJ[;\9Ee5fjnTB;?`O]N.E-9G%cuT4D0\&5@_Q6*+B+LJK";4h5^:qeQP,Y#rmg"WbCe&e^(cD_%c++k_mC\eVZa?>@+3&e]`^(FG@VHLVo^Mjd`-fDOU/4UQ$".41%6Z``[o(kXl@,iP;Fnu<5b>5&]h?u_\!*t;RPBR#[>opbuArd):p`$Gpb!4Q+T(<%C42&c^;Ytg7/@&k!pb_XNW/+<RO&2hq-t\,"%qD2(bpaI!.#^(5cno\KpUq9N7>FYi*!41EiQQ_YP)f@m+^`;uMfj/c5PK*_Q?]QUdYQ=%rS&ZS@I^"uY/1+Yc.UmaN?Bc;!$bg*U%+N0gf(A"@qc[`"/Z/VQL"q-jArg.Kgg-L?D6o.`OQW^)C6cQ]V->O\\!Hl2Xo9EO81CqQl?oBc-E-!2h3'r&`&p)A3,WAV0#i`*u%a)^M=r`eBto/n@%[`??AQEU]JGQqW5IZRir#e2C)%l\:.m)uPO.(G_\;q=iM*P#Jaf,'+Z;OlNr^47S@,"onr91<T3r)R,BaAIuD%2AQ[>gODQ&/L4g,49CLJoUs;1=B'*opfl/!ZoS3g#B$qmWCJ(co`p#XjH7>r0QXb]15U.q0!rHk^tQqO#=\DHs&=r+UBSW)U-><a%EWk)/%Ol+=[eHGMo&O*5`tF=sb;LgZfA7(cOeHnEr&ucG,A$-?\%^ZE>L!,8a1E9?:;e\&0]j1`&9I,\K<.VBPLC13X=]LdaEToc%/."l+IQWZ@^t.7Kn_'$IV5eb&.!Po6E#Z]NBaj.N0-4s4Hb3Q5A`eNbgW.T=Rt!fHks]]EI_[19T/Rjr7hUm9[OVIBAa\1XYor0[%:6'P9CrG_OK*GaT_HpV1g(Ls3C,ug;G/%?.iH2es?hC7?d)3H<,bFse6G8u#j#2glY5s!O1pRfOnZOQ!42]B>biehn!%n5U!c.4?%T7'iIhaC(]oU_cCmrsJ3bn&J+5.?kWW9g[8lQb1&*k)>0BUMX3k/#DM_KGc]L/PdH,4L1(^SO>4_Jg`tT/bB>l6Ji[;2eH$Z8e&9%n6H(V%Y0RejhpKM/ci'DrPQFq#<-/Al(f!aN?#(Ug5U=!miV"&0JA2$+3gRM4:T<NdeD@5!OFAZa>\-X?(Cta#iT<(nE;cV2J-:i%)jpE'/\<%L.8I@/+:`c<Zj$kX/4<lQJakc\!Wr)>5cm0kq56'1]k':]E/1>sFHuZ9J<=d,6m52ojmP.47-u]YM^=tgJs[r1<mI/t%'HBd7,iS%=F4lAM$K5-R?n=iL3J0kZo'GEk(1%Ri;n5K.=g,X.dWlAO_'eNro,UpQLjjaD[eg*^X1.k6/et.nAT@4RkQ6Ium`@<c%%X"9>+%F.)8tV!F9D1`#=.Fs1_;(gA^'nq\cVE\\9;Bn\@,6;`=TLTKHkbDMa?18`o=G14^DscGfhR*=KRW6^F;"Ag2W.gdE%sNd%MB`GgAK4o#$X_*6]n"Ki3683,CX,BUK`='Ia@tEDl8nql=n4<)oB1PD<mO4M]X0k-42L\\EUXO;)4&YL$l6mS@Z]3#,0V.UE2ZH-%^m^7EHpgh*"o?;hCatIU`/:>Y+'3WT2RQ07[P&^:L<i321rK+VZ*9"9GdU\"$,tc5@k\[m`0c@2eJN.#_rbA#JXL-U#X3sIqG?PX%935k*0KO:k+.Z7OF\Wa7Tak(mUac@Df<Tm^G)Q<SkkknbaIm/\(mjt*ZCStq!;lQkVRYtQESan#Q0+jco!#Vl:tVd"G;s#XoFLJ:%>T]:/23AX*B55qqKk(hq?s[3@:nk.CaRbgcp#VLa2*SY'K8%EH%t`td:*?1q(JsA<j)2Ju/BHY%OR8'5HK47jL#'MPoU/PRS$ImR%m&NjFEF/e9!h0+(8$3cqWOIcRFkA6ML!h+"jnfAeoa,4<k)r'r[!(c3>5=PW8p3K`V6miq:-F]@>WSq4?#cqt\uGs?e05p77SZ#Q%Ju1K"f+_fa=/X"1Yad;qWh@>7_NK(ai=5,[AE,HpY$A1QONfm'1,R>"kXq<1GkV`BQF4rN>:)jipigk$(J[o!c2c-baPD)_TJ'DU%C.s!^'?r$>jo29p/FMuK=>eqLk_eQ`Ld*NO4Q4Nk'AZZf.iIVDJb;$^H,<jRFT$p>ka0VB=&Y:FE//P3&<Y_uYHEGD_C?$<j0u..%PHq(d'0IQD^s.r6oN<>16=4"Q3tKPTd!ml6J6EcI<@i7RPu%u>&08I4V$N;Jh[pRdWhF)J7b]@ofX7]0l7<iHp?W%WRA2,=E/\Om%Ko:.FE,^ao#4C[ZD><V#VQ+B.OGMk9>d9>CW+O(8>lZP(&t)LPXZPTao*DC%<!mk<K[+:sq2&8_A5ZEW_)5\D+?GG@B"T-9f51DC%``rQT'V12X:p))bm$jY++'2GWmGf$5RGIT+!kFj6WQkRdT+PB0E``lBVR4fC0iqj&s0WuX7V_Q+'XlE?.+AJu^DTNUr0a`)@8C;%%(kIc6OPm;ZfUq!I\-LT:&JuPl/a3Nu%;n@5DW*#d!^nXc5fULK"Z'RLll_)j@9fNO5t8lekRTcm$=:*FSBs_7Fdt!jpSusLWib?u%d+GdWZ:E9Rh2Fk=Ul<@]$D,W5dAL^ZkR"fTX&g!T63p8^2e!3!3RaspjU>L57MQfQHIphk&9QE^$BV^s7,Sg;!Ld48^^AEjM"")4%g,51k*Y!e"6,*bAd=p1k&0:1D22)jr:RKQj,f/d=Ufro,^&XILrLVrncNh54r`l%!\CkLB/gl/'KD>!<3-tF!!dNW1qojSh,5am<%*6afXIYXKYf<H.`3Zjp<o]"eaT6u4.F3MrnGih2`#B>7)F3#).dIO;Xs,nA<?)\P4eE9N>KGGn=hsk)p4hgY!As7;qBpi5?;VpKY%,YXRafs;o&5uZY>*2%]/,Nq[,'hC9u;uU%?*sm@K2BO@G!eiN,Vc[M$j@M*q*Qm^"r`>s<92tJWH*)!=j,Rqla$B8]>gd2q^QLFa%^"+!`1UTiBlq\^#PA@E+&&)ZtPOfW,K<]qM'hiN3d0GG8]5eb1ERqOIWb(Hm.M\p.hE7Xj8)Vp*/s;hK=Q-%)l]dRcj9,lC]G1i,%mrl>DI#X69%+,1Jp`%V9dj>N],i_kE?j9/,<QlCqe&1*j7R]q)=5RDpZ=$T=N\ED;YiHTi,lm;Qd?uJR/H!:H?7Jh_7"4/\i+mTI%hX)$XO,;54P$a9BcgjWMiB].u*I)+W%N_2[MF\3=d'?t9o4WhK'.+YiiFYt/BaaqLh"bCh3M_nip#tP#)U'D4_1c`:m1n`F#(#`?%$$/5O,/#L$6P&,lqi`!tK,H1^h?jU"%GdLXm;,f0kr2YWs6.TM/\<gilIb]gO;c>@!e:3.64D;.eLD`H5CQ^1&Q6E&j.^cnHfUNs%p&pN3,tJJWn?/Z283Z1,!,Z+f_FfGK8J,ZUh7Pft+WZ[IMtn)2Kfg\nV:$Wr[>+Ub8?(sB?O:EmYj;%,E_(boOGQ%<AIVj7\Zq=<%Dqo0<V>FV?8?l("Qr60f\pnD.P&Z-hkqV^1"2-@hoMp1!6OHqPMOR](f=!6YZKq92LX]^$BW]38e!)5!_W3#BIHpnXFe"Qf\`?;:%1T!Zm1q]/!D1lsnKG:RB4h"-@ekiu`HDQ`>5?B/Y83\k3UL+GP,/(&T;W61)F%ClsDFR"#Nt-3PN:dm!Ai7eF'p/.V=?AuKnjr*7%ch`lF*Iq,3NO:oC`ta_#I9()C-)>hQebU>L+9bk\[#OrmHTn#jA<FSan=:cODV86#.j;$)YBta'@$)IF,AhoN]R=F(OhR[4%Rm22%@J91;5mjmDBKlUO=0lD'8,C`*s1B-\%U#T7#LB_#dS7o!GrM**`qiiTL<mU@H)/]DSa:!g]I_LjO#nUQMQecA_Y!PT2/&e\]0f^P%1hlOUedk$Ac4cmchT,#9j(8RY-:oZ7Do^$'O@gGY.dE+s1`#HJ.>X)^X=7@BN7:3mo@c>ql982Y%?KcF5#_SS1DE._<\].Tr7j_T%UhO&\,pBKA>A@>UUgJmZ9gi<7f,:b;CCmK><"X:nK@q8_=FL8(dS[#oa^s2O+H8O2`$;C+F(S&H+n_bFNJ;,BpO+MNm^F<:$mA%E%)K5h.MH]H)&'n7+e9@XXam=9,Fdi78q5:cZ[F]8Cf&WD(c$p_$&m4hUH'!IO33oFN&_4IZHOAo.j>*-E%gD`-7]hZZTlB5s7iKBk%_DZV'`L^AXjIU82E:^+C<-W^K7.A\rR"$T[fNm$:au&"5cgl!U&+OtRG#-4EX^b]IV_`R^HOA@&]6\/cPXumt$?+O/X]YAK/c.Bq%oRX>!WR#^eVm$C_P;L6RH+jlrF@Z:=9&XL$p6ndiAJC`u*,cAK1<2To;lii9%J-:=Vu5;1g!W[Em^LA(I<o&o:rB#+mO=sae,.J2%:O.?qDf:)KmM-=rJ(jd7KjI5dKm19OIDjr6'H@%cZMID[l0-ri]Q8d"nkY,:VpaP,8LRGPL4(YT5LhjK\'8j;doW%'.4t:Y,a6,Y%J*,ErK24Y.;Fr3`\SC^r[t2k$e.A#gDCEu#[35A=p`6\$bR)b-_UG=:Oa2#,BSt3`;gWk#cZsnbUngo9b/4b<?<H=$Q02DYYe"U^%En'-Za]3S21V$fsaKHRY42>R=+5s+5oK`!pGC9a5U%_QSIPI,CX[$gY)2+'km!Xh/XhYs*59a_FW7G+'6[J3,-HC:;hq]$@2;[n5%U9Tl*5&7IcB&&r4ST$G[h><oBYAIrcBDh8)ig$n_Bu'_i,=Uq4&1p_/"1KIPXHX)M'p&L7GjCD$jcI@4&+g'`@g2:\.B&34>UFe;%;SNKOUiQJS3e$YcIX*Lln<X]#T`#uu)L9W@#`qe5Q?s[P1VW9@aWX+(G]3]ZD9n5BN&8oI.3lMVbqVY_aE%ooqgJj&U$j[9698"1%>/k#l8/Z1_=X4=W#)3;c8@n@_'.0("8?3M_L*?#)<u6(U%\QVA6p)KfP1c1?f=WIFgAtZ?DgBr.RWLe?O2I5cTIo)hR5_iqBo1c"%G?m+kY"q4.g^cU1U&A%]KOJT<8US)E!iZ%\@fE/X6261k%g?2k6>:1;J9&$jo,P_=00'^q9C6TFN`7k:oJuAl.%&tcHObTo0$FKF%dkBX>geS57n[#qHYP(knU06sjBL^k8QGi!Y@7Ph#-HpH)%V)o>fo5nqAp>!Dr(PG*g^"84eC\+?&5YXfEjl4d>+h@-FJsBi@VJsn%ohN?Q<u:^#e!#gD+?2Kacm3NLj[`.m5#6:mk=+TubD\*6f,IoR6[qSo"Z1^&KLB\^rTVqZ,<phOoB1F1pkAEtAB,LA=EMi]f)1ff%>=JNJQt;,N!poR]AuF[!;IX&jlgO`$S-A_'LQ<LX("s>9Rdsd-\f8qgr0Y&l1Vi4Q7/?I[>GQWL]e+]qpHf#<k]NmH`Y/UL*Ye/(%(KKT_puMfaY$2a<9SR`0cfRNr2ZfsH]%mPioS#T_'A=1p#@1D-gTj^k=-UindJjc]2m+.Sk<0_%Vj$46D4tN3W?W67)Kmu.A[`N?%EQPP6ca=QB'UK9-i/q[i:(0Q0"s[:mMqD&H:/e1jq5_el#$lnM`G?VgX7S3g2#Jij<8hA(QM:#)"t#JDZ#@ZU*L[d0^!U+QA(:@@%r)&;d,+(sUk%El*<HQW<R(:)Cnn^&Shs$P(pkRsA3fGZ.*M^5:>S3?IZ#_6fq\B!.>5-(O?XN4G>*ET$=3`.&KrIeg.^GBh6A$/g%h'H'DX^9OVL1DaT/P?;S/t5]l^XKJjX.Cq:VmFRKQ'1rK7?4j^Sj:oJ-A,Hl=E&Xo/XBU0mhEBe3at(H;i?"!/nK9qQ(("cmMhT\%%?k[S[-F2HhOn@'^"P9@1k-d[==H%Y_5nU.e2f(N`E>;OZ"F)f8N`&L#0Cra%4Htt\m&$*XD>#8Qrp,S3CkL"`A!`6pYKs9\!<d,%pfrBE;S7R'Hq6j%L<t:4\e=RS0X#.a"E.VQQ@`'c.oK1@@]>l!Hsap!?'WI+NcIB;R0?J9XiJ[ABM_46gF$o0_9$S31j$%=VGN^q%8kUU`56gMXk]cP24(9mZXaGG.,.9(!4(?Rc'eQ\WG_T_C?*Z^M<Z_n%@Gj8?SDM]T6JR/=mlQ94aBq?$;VG/2S;0?QW)86YDHYAA%O]*>/!Wq.2jY^AL9*/Hoe>XB9J=e;h!8@Fd[K6HhZ^g@M.hXucH[\(E@gfmo>$iBoB\<_*Y#V^eI:(Jj@*(32d`"m[md5.1#&&uP%1FS`\Lh73fiHMsCM'__U+L03+E>;pdcWD\nM'Wr-j?Y!L^b2`0jnpSt_jhClX%>`b.@.b>&n"C)_Yn`X6/?8)CVT`g@PCKK*?ifB%P-%=CGF>-BUk=jKRdJhu7LdKJ=I?L%IF[i,VM5]4l:l7`#.**$SIVTA]I$+gn<j5!qAZr50^r%-;Bsa?M1J2B2?N0B`,"F560q\6%,E%OqR$rtjpOMO,;d'P0@nOqc9C2KR>2%LQb95LP(\^Go6Fa5jQEU]dcrQdY65Y'`>$gJjp;Lg?[T8RULe58S8Om@='B/S]]4V(#%"/7fdI^80CTE+\.l"VSJ?d9jS>e!Uc/M#-2AZ-9n5okB^XPN$7ZYfN_=>6cLp4[O2@`/?`/<),a&G(XmGIQGZNqLAUeiO/]X,"Bu%GcR@f_63Y8(j<%NjT.M#7m/n9PulA7?*`MtoD)NK@Rotja[&aVngCa=c\/($;o(guge0tQjB'':f=go:Z7a'WKP(=LKZ2.%Xjl3\%^Bpu]"f7nO*X@3E/iO"+R=Q1,>Eqo)ff_Nso"9'dP#>tB.VU`n[WFLJ)/0XTpLY?2FXN01>bocGQ%fq"++]3_PW+$?2;61K!eL0M%enDibB]!)Kqq\S8RPKqHDkbXj8>D#OI@%g]_;6\o1K<-jb@&8^lXb<3hA0c3U=O;+ig=1?7C71c+)teXJa%t*\A'JJ1cCr?3q7b?%rN!krQEeH;/MfA[B.6u:78_;2?okE9FX;ssQeq`,lj&oUU[0`Sbdtd(pfVQBW"^M`?dLLfFS<^!JKc3'd>"F>'',_,7Rn%1A]`=X%aX*VLF7[H%m!G)C>53j'67.'Kb16"Q=+)[MjmbVY94J!$?OK</%tNnb+'%]T%[95+6kh_@d7/>u_tC(_gFY`q#R[qID?38N^Xf`K%]q&`lb<\Fc3.c5-C+,OT8"W0TKfjPXC'^$??'5?RPKXiZY3<EsiO`8i=dV7(dP0=t@AWLHSdf3NdM#OL!i`^,#+Yo,Mc.$\$U@;8%1Bl%,8%N3=T\`4s%Z5+GLm3X88TXI7:,uD14U%RQ(qQTNU%IF.$/%s?87dJ_GY)WXP=K4nlCIC>.HOe8QVqC'dZM'e*.8@Z_MN<t%<Q.U`<H@Q/4#p2FODPAVrT[Kg"O8f)=YC0LE'4l@'[m^k(@;PZcD4q?XmDXhJr,WaGZBoFKcK':FQmm+!Hh!`0RQWu.W6s#?rR1%%7P[@C*@LIL&2q'75AaL?f.a`[m\-G2:;)7>?!jb:Ti8.f1RN)Z6`46VLJA/c5n0B2"Wa[8]gWC$;mh4;Nf[LQ6`46V7op()?UK$p%<*2F6;_<5k%@qeK*HQDEeMVIHSBBBe_-55jeBk0rcnQ8Y=4bfu=3sM_,T#(ZM2H1G.d3ZDX>hA+\IrSZ_s%p!^aiIfA^n'4oQH)@%o#)\9flWG`Wb8jZcA:Pj//l([qBN\(:+apHk[_AjprF9#8\39@k*\5k_o;$5W>'tFc_T#=.(3^j!-?tN&*3$<q"bfc#dq_93NGe&%Q&jA<*$q=pG6tlJ?Hsse;pJ=ia07]CWPe*ZBGODnQRD)p"[NpjTQls10q96:;PK@+23";8Q3nh][-tR!lH(/0Mqt3!iX6sD`Ud"o%jQ^&[I@@IdYB.S^OG.$NA25@Y*"c=]g@\UI`_$9!3!B]bXC\<^La[!5jLTL)kjD_2VPMu2V1%FQq*h.fl>KXbgWS`%np.rt8Tc[j%)E?b*V@kk1Sq]h6jg,;M<-PEE&`plY^8!_5F,7m5#Bb)SIiY/u_$-@DImtHGB'mt*NXo<%lrfm"SN<Q^$HqLuV1kp0nD**hWf;m"%W3<^Dea[K68ditDj-)qdY@.Y/'El8KEWn.V&fKi=':loqZKfc2Qq#?E3J1j#6>f.FNM@&l-mfH%L<5WYVaF)JF:hn=$F6@i%.&7.%ZY5[?FsR,BC9:@CW!,LdiH0#@rK!7d+4;(UXhN=/[$4<P].2*tX=<;Tp$O@L-b!c@GTZ5E=sOg@.dM5Ab%]._FD"!ZI:7OFjUsL(%fiKGRTIN[Iaf(OG3bm`cSTiH_Ve!>;FND!rCg9jSqaHK-@QUlq<>@$(1R0urMqXa9[a8A&GN)b]h,WQoW3aX1ea,$;.6Y3`3]8pJ%[er2=A-M[C3a!30,cIrr6RTS+*NdDJUc(t0d\'Xb`^XLKfft*B`Ei&,[u./-lE#f#@Wo=f=e'q%M'Fci]LJH^h;Nj>mPTAQ4V=)=%?<9;k7<b&$m@&ii,R8cs]2:s#$r%j.QY$fZcAK[km"rV8[&YE,YR&Lol`k6Jcu_]e$tbLq]W384O=]+Rp6qi?*-FTZ3*BVb?KQK1%LDkLtC$1KAM+6t"\#;klGB*;7!POL_>qVotNfE?7lKmhLA^5>nqr5.[GE_adbK%+=O'Q*FX/j]rDAXCF=0/I7\ph#Hr7%dR#@Uo/%AdO;[=+U]-Y#>g^C.^-!M^VR9i4cZmG#H.p2YE"[NJ3Da?UPWKQ_nmUe\_^Rr;*HacE2k#3IgCMol/MqW9U@;e!$JOI6AR@f-d\V%]6-9lq:1(`eAKDqN$)LeXbW[HUXG%0>M$b!@^)3f\S9X4nYZKq/)lfUjjJH76.B)$C3`Z>SAMG4Cq\I18idsFP$lM>ojYLR,#8[d%<Zn&$84'/CaHJ03b@JA7I<dtT696nGFhgj9ejAO008(QABXi"\@O(lh8hLB>fl'&GaeX2U;%1(:!APVV"RK9+S/BCbjhW.LMo>*1%g&i]h=qc%0(b-O/N0p.rZV.bE(-c/K8<-XT'l0msZ:WO./:"G3&7076__q?=VZA#%(Q"gg$9e:<MBV2CW\:LCX;`(<Np:Qe_d9'G%+>E<t1Kp\NWFRs'nMsB_!J%q"*\O/,TnX:Q\#;jrr4QN-.KFY(MU]u0)cWWmGKN?5B2k[emN,XMl8qj3.Y)RB]a:?&IAi&R;?<<Z%ga<8BWW*fKXcO;2%te$HcrBCk-)ha$CbA:-)?-LYWjtkZe0p"alrNGPf"%jr:-POslV]]jkJ1G/$E#7hH$q-3XC$8E;E240s7W:.%>h4n;)XWGTiP:Uh0^CD%iVIiMM=?ZCGta&.,d+/Jj*,=(lnR=Q?3$@9:7smc!#Yje4NL@&%5Xm"LC@P$\U[<)p^J4ne$N(P(LWN#%8rQNN36:828iif4,EruL_4<%$oW<,=m*(oIk^q%JX?R(/5"`$GN;&EL'ZiX]R-YMfGWt;m]bTsl>.]l>[QDUe[ke.NQ%9)H>$CNo%pWq:;B2.1skiE)(HNiqMk*)arm3sWg`KFIBGQ6B4M)&&L-"*]S^>Dj=G'd;l4+fK`iJL1bmF[fd;&D/((V>B.lsEB(DQ4FpHbXfl%7oJ\ss3Xh7$Er!O/(J+^'l1)$I=+>Q@'&?#0Qbi%LK%ID"u"&&/)8ol=08^=.ucZK8?l&Ud8E4J\i0kc$K&u@G!iZH[tg&#ddm#.%LB>mp`S=]^Ng)'\?<$@QH`Fh1,:s\C-1RKhT]6Am:4<c(iZ0%2Y?]87G5aV$UE0'qLh0#CO@h*qZ/)+p0:cLp]n"TDjYh'gQIEM3%%^1&uXX$WtOU^$`4%+eO1K?'1UIf2?eSI4%Rjd0(V/Vg3N\3n@b0+SUdA!tC:7CDrPB1m.9lb:%-2-tc95g!B)hjIqHZfR`G*p],%iX0sZQX(d_)hip;AGo+@QcSD4+5-it4U5<fppBUh-1ro@SN<fP5ggrE<'eS'EOtB[%c>@`/1HqRHK><Ph!GM/X/=@%_q_2Z:9KmX%a'G3J<n#/"NQWM*iQt5ul,5F81RVOXY,7C%OETaGp"S,O,)f^_[[Kt:q4M=!QIU*RZ_4M$VUJe4Dc0:W=%fG.[D'/>:+jgY8)\>g%9rBAJkPApS\QCq[gN0]93k8G*PB.JAY,7C]XgEhnAMp#`Q_4e/gM/bq9Bin8FE6t#+6gJ9RdO_cZu;>CTUJUce9O-gHE-5j5Uk5b%?=$?M$;-b^G`-=JgJCSe0[ucJNN26-DD&Y?24[u(S`Gg\)cY;.e^DR0fl^j`SNsWo=uqrFapY97j8^TAQn,3$jD*onmsMdXRSL#O%:0.(lWhtu\V:.JZ7Ze['/T9&N%^3(5PNrj_jAK+<F?>"e>Ci"uJA*[O/hf"nWP#H#bbUR7C$S*rn4@ikX]dQZ$>9CIpXQ7_@;^6q%SQmb4gofj:<U84.I<=KC<qYZ2eY*]fReP1G]qh-&<N"4jiU(Zpi?pVn5lHp''fp'c4tG#7.\.b?Nn]XoR::Ze_dF(%7%9Xt,Eg/5%dM&%4??:<f2UpF3gn?hVXc)Vmb"%[8)O)$YqnlKAF(`j&89`mXi$`YKl_;"lYIP<^9<AQ=9?WP&;Q5&kSZ[hQ[;52p3*BT(U>B\R%/ia`nTC+c/cXI*hojqLF;4U-:p2&8\/#mH.K;$8#=4d$0lah*keG.L#L4s`\mb?,=Uf/]l'(#.&(=HK[qoc+,Yej3sM*n3!!j]l_%^T-+PWaJ*Dc`\]/T5Z3\-u*Tol\Sf7o+sI`HqQ_4cRgbC]3R<oqj,o3m;#`a@HHP"_?UbCm;bY^ii%Gm3-o@TGpkGu:Ctf'l8e7E%r*=G@U0V[`]4PXk!d7"@/a)T/Go<!n&]N\;V"uRCs&;5h/?`<mEfPhY62>WZ0dKl5'M8*f3-:9\FPj-&%Q1KAm*Zkgn=.ED9i=bl%0o*>erZ0O0"^*ds_=2Sk_]'"kGNTbtaAtK2F\aSn?Pn"V:bKLmki@ufMfu-5S=A#L`\mA`Fi"_,<h*Dea7&S4-I>'[\Zh/]IYS`n%?B14I#4&J47-KWGTA4F1@:>Kj#j$(toST@A)t#QOXhMmdGBE6,e]1j,gi.Jo9mN(_O7]<^S()MNgi.K%9mPpXE2OZpVsh,W$^eq^%YKD(E?'o:KY(#ru6B>iYCZms+'ET6=W.gKoF/7uZ6=AjF63]4-_ODgkl/KiU]nNk]auNN[SEgPu!>Oa$CYt>S"--ufP<g:\1[<`V%6<\b1#mnZ^lJ&in-9!T2!\EfL'#U)2>-alI+.mouPDGGj;K!/2^k,Re#eMj;;+.Zn*Gl9PM;7fGj-F/3kq-AmXr*&L4E<(P=[c"4%YO>KegnHT?>X=_;3.d&<S6t<FpUF!-_n8LJ_r=UaFOdnpcFWF@CIRsYhA;%s2<_dBOgE+!*Y#SLIuS7#,?pI[HCon_)V;Vlq/!c$%D4$ObNCu2Hkdq#%YAo8_j=)a-ii6WsKph+1pF(Lq&MLnd[kr3MiFAqCLce8+EMc.-P7I<o+/N;An51Gefh/2AbND!OHp6_q4-?sf%n(FPX]G>^PM(VBf@I*@5IJJ3!KW-V+%u9jbd62<NQB7A"ol/4OUo@=H(L/rD$.DYK#`l.d'DQ%r1;'Sf&LgcGjIR*JL@4je0chdn%@gq(0Q.j!Y4"<KF]n\3%Uc>0ud^6geU(QS%=%Vf:SP?@GNBD[Mb!gR#7!p5mE=U5W1KKdqo`Dh@g?!5lj`3_i[-Mf:G-\LKcdEpO%;^J5m=qTW_]*'Qd`OI\9Vg_d2^nT![V+@4SjqNUuK-&i)_Jslq]d;8_Y,bjdZQZKT<,QDgd4LbtZ4W6S3a'9N*S8`9PD^'shYi\$%>OO829*h'BPMMmtAZ%bB9PnY7(UR(K:*V%,ofp2-k&O)fpHb_&8qg-F[SfYt3r`fXIR,Kfm51?6jRKXZ\l6u*V[aTT\#E!K])P0J%<LQs>Js9"s:uYS!XLls,e'^0=@@!4>lp8$W5b5!u<cP-]8gRD?DjSi8VO$%@H!4rgP0_RNGH<QAIni-IZ+BMm:=N:i[FZ"#eo>?F%TQp/'-+^WhjkR@e1?=@Nm]Y])6QH[+TQl)p*\atICZAoWU*Qma=aUY%q,pqQnp07SM(BHg#=8/D7U:\p>q`)>[6S-ZZf97lj<rl3%&YDKGp?eYUZ_P-eU0D`*L)KlK\+,RqK>H!bJ9C4)QW/%gA-2jG/FoJ7GR0`.@97bAG$I^pZ,c'l+[cV>AaO8EFPdc;4[-j(n[q2o%a?e2piU0Ce>m`Pf5Ngt+)Cqr&GYp:u\P'l3Eo+;9CL#L<M8#<*"QX<B2.oaen'<NG'O+21W9.*g]'&P4XmK9T#GtYqK02>g^m+TE%FnA=K.h_o[YsWc]+RrZ69_4FLF"!o2aj2s]$Rc'<.2Q$n%Spg>;0D9F<IfC2!)Loa;$:mXNI&\2]=82ED[kVNn`9:[e2t@alC9=h%]et<i\!SVkjH:JT:235DWWJDf#\7]NQ)e`n;us#*]oqMB[gGrM%A41Q=euI%-!%nTL<]$_glo>.V0m;BZJGLX5!;cQlS%A[UMt_S%;EjM<[_I,;TCPb:/MH3aW(4SlV0qHrV0;[2I+$cTrm%?fP5?c5\<Ke;V+0BA]IPJ=T"DR+K2:t/;nplON3f3Wn+Ac?P3YSM6_3#t%GPTogid:XRLSgSYHeuGb$6<Pmot0X../mO;o`8cs%Air.5IIH:VKRm(TcddnZd4=@XEmp"qRq@C.?!hUI/Ua-l39>B6$1qrIV^<s%r2kFb]:Q4:fC*f.L#H9V-.h8QqC)i4\^g/;\>A\$5BZs)])gu_Hi6pEmW>$&YC3V3%I,II\bngZF*6l`Id4E=Yn]XXhWr56[`M+s%"]]9*=-;]0Ja3/[rR>cY]0R2hdX5-fR'(f7o\@Q2rOmY2'_s'Dr;68r,Z"u.ZtACIHi4Yi`43#ig/@[YI]$2U_HZu'.Nd!Mf2#[`%(j&o*g@tHChs)S[QV6f?;bFQsDtT<ah/VtuIO>a]]%-8<WjIrcQj%X9K13?=60Gq1l5O#fk.gb!^Qe#cIV7QYG=LD@;WR-6Hi9a:%`((/>E?F'U7_E1fa-l\uWG8dmb-nuph1P'rIe5'G\#=XM]@HAOWjI]U1JTHT0"]_2TjPLFX0$C#]mc;Pj6,4`V[`n,aLA\2:]4gb%F7/)#gm@/!D`GG^n#WSbUg9.TW,n/LrIg>THE3[\cA65?L%J]dMlY9D<X]L72ndJLISSEtrUc`9UjfN))0N,ah!6>BU@\#3Zg[Qc%LSB/<ht>Tqo=+Q&=(I#L)I<+6W>EHfSt.JK6\Tmce-@Uc^gDDkTDG[=-`bmRp\H>(O81'mE^e5Obbe7_DE+ER8aThK4`S[2n+Dm:%acho90;s./hWoB.p7SR8rR;9DnZM*;p\Lj.L?ou=[J0NS89o6VT@gK[r*DV\*?2i->]m6BH9SR+](W.Nr?N)@'Z;Kg-(TCdT6d;3%jlD`6me,%-`HhEqI_s't&b&=,#Df2g;!BaK/nc87C@seZ='j"Z;Z%T5I)V1nik;j<;&[jqa07,S*St_h7Mt\_MOD'f"I0:t,u>34%<e/g9L%Sh#>Mjld\\6QaO1u9Ti2uMR7?ThaCN@Y@B<U&0ZhWE!K@sYR8M-t!h/Qu-&<Wn9h1,401K=s/;mu>X^$?+oZ%r&-IDNSM%[Mr7VZ$1uWNSe/h2/UPnX7)rTSS1Ng:S3nZi4ZShI=9[Q4>5=BZM3na3\9$&_dVD9s60]:R[]U!52/.`1'c7_[TQ2Ms'WFm&Nd06%HW\5R+-"CC1[9@pV1'LE%;]e9(.^2$CRH/Lj[YLff3CDtP<]?.@$j\tV9W9O/)TfeY]B>L6'BEuRli<$<m']R)T/8<QqGQODpau3%4S@ZtQr)HT<dY>e8SVSDa1P,5<ZQ2OK'H!-e=lA/au2l6Ci[C"!D2/nB[-Lia:i?K#MP+(__7G2L7V(W:N`RGUd-F*Yo^YC%h=Nn%^%DqnYB/i,]3M[k\#[V9eFFGsElF_[RQcYtE5V5KfYUdcmRgKgM-PLT@0,O!=B_/h=IP=o_$eW!GqFoU6?@a8\*!IZnZ._4%dC2T%B%ct]`OFXkCW:^?'V*RdfUFDf.UZSuYE-*8XP8$C<^P\>c=eo"/k$jgVYRFLI0GV[Qg6Yi1f'mYn5A@,)r+l,3=@J2Z"0n7X*AUq%9B;Ea0+K@B>F_dDUR:e(jn9-6;cJr?qK9\5rW-V!\Dc1M_+a8trcIn[K=5Pth0s92c4K+I#41P(TNGe2^;c],.hLj0?gor5VS@RW%KF<2`R/IPP`-5p/n(4ht+>_?^)^Z3i].WHK$ep,O%iiFkH1RDMi"A6;i`#7G4Qf?+BV(`6O"eBPpHs)>5'XB.OlGKBh2(sQ.;2s-%GUD2J2gSjc1QV5a%0#O'(5:Z["q-_TGU:l/_66$@p3:!-?p?a;-K@6!cfo[tEsh(2Y_inH%eK$Q9akW]'$<R$cPS]$*hQE#kUQaY%o$PL?Rt>p4-)^LB^%-fR*>a%eZ\N!0@6,GJ$YFmE@(pd<>]`F%K1m83I1U%7!L66W<9.JZHEW:i#8"S+&EVgfbh<U_!CY^i:F2Oe%3#P>2"&IV>f@38_PPq7n@edFapLQ:q#*l=*]mV-f!qQKHb@a%7=7";k"O,jU<0GT@I&"7,=88`R1trfnbolUlh=WLpNr8tkG$iW\%)D[q4o,sd[>EB%Dr5_-Z+!+CViZ#%Oo8_ZK*a]c:htD8SgHL":hL*AA5MUmAZhXB'JR]Q*`pt9XBq^q;W6J')blTc?B`\0I-5]:H%H[$43N0i7rOfg,Q8$/YiRZZCRbA_iG6b=sY+g@a#!c;(-R_d*(H2U1GR*,S7^]o8_Uu6;I2rIIYF#o-3O:"ALDM#'##H_E(GO5B^%%=P0^B(ge15m?)kDYX:`_^iji_gju1"Du6(]!8tc#R9Lb:PL%'5O\^AZ7`dd>M+XE,^P!'jgl+JfO0G>rW8XjJj-(&8C,ss6K]i-%^>"rmf-!`mZq`+K>028tZ;Y/+mW4="0$!<tEZWU3bCDJ_RT8itf+nCn4)Z;aHZCj@Bc_dep>fZE>TZK2+(E?t4@d1l"cMW=5l:FB%X>Xt7IG_cT2k!Rm#^>@,"e)%BOGNXN=%reA\&m!473/#_O`;j\S."X5CKR^/M1Obs(%g2VedP8k8+n`sO@##d=m/,D(uD_B\9R%O%)9sLhb#ohjQ26iIFhnQJ*ni1=P@Y/Kk+:9,1.oNjE>6m1i8_g6kKaq0;=A#8(<4D0-9?]JG*e!AWMnd@0Eusr<QOo?9\1+O8djOI%cOPmRIl?6iEck`B,OLhkhAF=Hh$D'a-pAg[fPg9rS).`B*J_kcANH1E[85:(qKeb6=Age`-oCGM[u#GA(j=l@aTiI_ET#(H<]a:0%cEtn4nI;N0'n,]:E^1ZRL3%;<h<3_nnll`/&`Bu#I0DP@A(C*hlcX^q!shiJ@'uW/%ER!k?73J$5Pq!(W:MAYkN>;o,gF,\U+3lD%eK+9Gc9,Nbp?AP&@2h5(;3V=J<"29R$KucTpc*S'I!?Ot(76'SXVi+AG+WXN?3Ir9!YaV;*7R-cg!H1ccajFRVdZ1>V&V!$Be(hP%MF,.t@0C%h%R(kGa"e4*:fSOn8IdkuB?`,>BX1[k9f?htg-12'bMJoWcPGA)i&<cL:EIB$6**jJln?9N<$#TKQJtgP*o*@lm*gX\%Q,'R$cr)Z$NXse?@"^^OG0LE)bLT5L;)?-M&:n:&!%^<.l!RCKq`kQE@MK"!@f#^&>p(d?-<RnSH"FEECQKo*]HXYM@t+#[TBE-B%6@>a"<=djZID_$N%(GNkb=80.nI2#n"&PKooEfV\j/1.Ve$3(AA#bdfID9nK^]U('_/b/C:kb'uDJOqnSF!_R.@j-$SNfcu)u([g%XZKIp0-B1RF\_%0?ZR,_Gb+Pkpu1'WXAFHar0F7i3&\s@b'rs3=p=oYgriVs'S0>^XY.b^5JSc!S(@Pkf4bMo\G$`QAbkk40`Mjg%!IqaWfM/S.I=K2/m!!q7i6NNuFtRp]jk2Err-_r2H'8HG/V0Md-=AH3iIms$G+mJ!hTLP`n8?*]q>Td`l?qU,C7&UP=)@.`?U,m#%.-&"he+ar:doc;+]^@a5r'q<*[rC:OU/T>ob[ETsBX6PH-Jm_u:*QL$rb6HU>G7J(b6q8,/:7`H"`34NoW7#8F>]_DT)<KCAR[A>%D1J39T\I&Bo(_9_rl`<*#PbW'!<sY$4V\9W[`s:(@fuL8^r[JUJULL<?7cr`6IB"mU!4+T)_h#M5/h4M#51i9]bs/7HEOA(d#(.-%8ad1R70%tL'o]X1H?kCAhopYL_D;kn:6J?qgE7&aF;oe(!E;9h*\i16W]P=<.bpAC_$i^/?-sg3FP-U7r"_<@)[)H;?VNdSq@L2*%P6M%,5G&!:$31pe-;2<UiO:rm:$=Cr@!ofY9Y$aBGk!TO#+mA?prUGPk2h'0^o-lZjuq?f3_Y.Yi6o_bO"a_-gjt:=m(%U;(fl%>%U'J-s_ojDk\dOb!#6H[.4?0!arCa@:!07=p[fYnZ0JDA34gS.mmQQIc@4W@0??5a#(P/c;H1$-m./49^p+S2Sg<j+*[WI!Ng9sR5%=GlplbnY;uSaVA%Uj)`.O>,+2L\`5Z5L1Jq6(de1=VAYlScncba)li&!+m>G7nA<K01U\HO9iSr1Im*/+UKFW;BA`N&eZmg/0r(\%n\c*Whd>CUC%\\1.<DZLQT>EUHHa9Js1<"./^d$0F1o:O5!VP8Lp<!fScknjeVA<'98%L(5+lhFU8dpe`(J/Pd#*c[fImFpVmEB)%J?l?ZU:8_t&S_;Rrn*LR(m6o[W(J?uZhCt=&-ks7?94%!1/gaEJD$7oYr:hMTqIr_H'TAq'K]C->J8iql2ck*"N9L&3XsOV8lZQu%1#91`)O'`?&-DWg!"bdUeKQEdfl0%Z5c""d3t["^6&r4d=S*,6FhCP\fM'@cCM2(mKUQ_aa?(/&Do2[m.Z_9"Qt!a)Nd#f$hI<=b%MPtct2q5Ydmp[?%FK.;!]h[nc#UtCF4JnH>HOFZp3U)0L@OkRs3F`o\UDt^+O6I\iH)]BRGcZ,%]2%?MmdIPbA0:KdK.pG8(Mt=O%nb=T9K2/$`I^LStd>*F-em\G@Y:jXT(pBn(3+BN`E%CL5MJN-j8*e7!aEq<F<G_/H,U_@e$jsH;7*`j&j@lZoi6P2XcUj9m@,e:P%pgTo#KS^dZjJ;?\+j:_mH_8Q(JXBB:W'f/@1[g/f_su=b:P=L0MbB/!KaLspGU%r$KP=3s3%&$Y?^LO2m*[]o/d3@UhcdXg6kQ"N%bco@+CGE@85983?+\\=U5FX'CV%+,c6DpG/VslR<^0KPMODM*fLWdZTqInIp9S?F,2UjX]U@0hR\]d'Bas'Il]"j&\4oh2pOiX/Q%p`m'.8%Qa:a,GK)fQj12>.)@Y_2CZuQWCDSa^c,4h^J[uR"k.E/,O?/rX+_9@#jDV?6><e-$^3,oStVd4_r*/X)Jd@d)-8V!e<"Z%.P(TtMC<1NRs8?U.cR7nTSs-^PhCCP@,kU`@?"%uTFY$mW=md(,:2D/;/a<9ek1fm353:d6RDl@JR&2U"08+L*fMMYpI2S4hFB[4%%iQHJ;b*J5D])FZs$Q,_<A=(lqePuf@8ulI^R<MPD>]R8lM(XUrY("uaoYljr1Mlp:G-Z6pYr1kobIFr3kV7;+F^SJ9l2OH3jX[9%<`ZBpG$$YUH^?=+!b^3*AW!bgaY]d?E=k[ep*UA]6>UbfiFh10R0ail=e'c$kq8UAj(+WC`1:1@ADS(ONE"?J,gs>8pU#<K^0>kX%/3JM:_5BDFSl?-g5o.W8AM%lf*api=Ft:?s4snr6pHE]HW?=m7#h45MG:B)>_`-TEL@/=9d!?fCk47-Epa<P2gdg9Vn"CL:R9[XD%#Q1!;Qn3f'^grj$lGE<._Ir9!q9YK_m*pC&`=bmH$3T+N[M<)\mXq5O@!0)"LHG)*%tXQgVol;;dBd?U3=J.#l2c]9.b*`<[q<uJ%P#_!bX@6=YTX^?dp8qa"*Moo.j^];;r=b`G_8C^k87@748,N>k+Y$6o(#iNCbRo6ngk?*Uk3#ju.3k8k'Hi.851Bl"-VG0%nlUH^%U'r!X*&^;F]S5st,fJ(D+aslME@9sQUN^N8G<mXB]o3&c]E"4,Y=;`(Kj=I6$%,5jHp`>idi%e\GnNX!PVYfq*,Ic'4)YO^Ze^(g%5M#nKDO+[n>R3mr:X]")0/d7!@LS=o/]CNucoW''eUep_UTea&ES%D+![.>+^0tRT)ESQT!4MG(GHBF!re%_?AhQDU4&90>q\9?#%![*$p)_H(KW^-471ho[Q#*d5@cZBS-PB.bcRp;$C'pJ7,RT)3Z/i436*fE1.oU6(&)@?%-'Y;PB$]P:A?8DTql,,<:"NF?6MgDeU%";rH#Y/<f']d2EG_M(G\'2R1p-7Bc=:^Q*<7Y9!u:bi]s0^CBE]56rgWK@/hK!a?\n$ahi;QsUk!5?IT0NU&hcB1CN_b$/_E:H/O%14IDjVkRi^aM(]aoohXNV-CUWJFY<F[Mnel%,<9gE`RfK2n4hs!;;f0@mD=U2cKt:C!'ht`adAr$@#<0cXX2OV$b/=2fKg*3="mq%\s`fjWX0rYFk;9,G9RZUN!Q$`X=kVFI+L"(>D@F--[VO*[_g^`!hIqE!fQU0*SCccn$;jhL3`VjdG!sjk![j-@g`<8DQnR*flPP?%bloF!rXsj78%J]u1:mq1,jZB"_]GirhEOj\/"6E49"L'gl\-#I`:HfW4.nRg$\c=4g]nOrUFZI)4K-"&N.a@0ijV$M6Dn`(X-ZJ5%#/g+;ICAqO;"c1I6!;Q`o@-Y-%6'Y]LS_fJOQ`tb-I>f7^s]*GaZ8m%J:L$#0XOY4\[29qan^<cJe+:_pHi7l?L;(OJC0XcF%dJc%e\#[t-E#3:@4n4ZiT!DXc<%CZb#kMVcNY6c9omXk%X!u?I(!gIDqP2Hp)\(2"kVe6"^QT?N!>fJn"]P=(?mOlT<MQe<76:Q'+5!s%f\_H2JIfN8Li>+ppbX&u9F/FDqMY]LZ4Xq9:=:rj^2cm=&!WF-CIHaXOL7%fodhY7[gUeI:%s7JqOG.Q$[N%,fs@CJPH^QJGm<*K%X>--\XCVl,F<'0!I3t"VdP"H@k4dCV$I_>Y7%os/!(MY-N]//0G'CaJ4Rg<AYdbnfAge])m9mnpht"@8T\8m#`/?Jr]mCXTdqs-@%mr5dfAnVW'&:GP;*.[u!XjO>K?_?TjY@6?J=1(ZPMM<B0_R4F%<_W_`aIbfU'N-QR\`ALa%sAs?L/c&=>TfFS^S!ClPleHo1Or54%J]1q"ZWQ+s7)BMf#u`.[pjs!HKWIkm1,5/aC6nG=6^o4*,Qj%Oe?o9(%TTh8_i`$F$tQP1SthEg.JoY(([>"!)mFar6B\>/\<(mB%4,(%YqLO(0]*#cpB5A>Q820c,6U!Yh5>4RDh^$:Him7"#F_$ShLJ1+=1'Otq,c*t,+4;A%'OqbZ&IGh&,sDQ?2@&M*IYYb`HQJp3%0^04QL9(q2MhJE,r/djpd1Rs,!50c^`E*Da>6rR**+G]Ea=e^j52^aC@MAB;=[4,R@<ds5>r`nufrONJ4G1`\S=!j:=3+Jo[-:D+%Db;"R:W7P*c!Tu-q)mj;Ien;RH2GPAR)NC[J?kk=3[0^+O+*^L)MQRG=K*UJ-Xu[T2;A_1KL`D4ig/JA^aZcD<Y-]AM&dMY9_=Ft%*-Jt8o:<<$pc>?Pfnem8Cu?q,K)L5*h=TD3lILU(HlMrK7K!6OJELHj%lnnee0-65GsW2$m*Zo+!#4I:.U]*f7k7l,2K!&2M<@gr%H:<Bj2rjFb*Yj($`)pR(O$1k>p+cOLbR<Hj#Q\F&U@O8FB?pYQeoANtK`Gi_f`HjaNUEnij$K@C=V@jn:)'*1d*@P2=/?>p*DFQ%%a9$]6R7.#^=L=Ph!@U">&%mh+TOm#`!<(EGTJ3;9mF1R#6g2p#J,R#MLJ3>Ap+/$oK1/;X1uLAs`AkB]1_AICU1>6KD&NE-f/=,A%2@Yb/XCWAbR0L@pYI\F5>=qNB'el+F1HeosBcrR2m@`NoV?)W]BGq+WRg+HMM6_,O9EQtuRGSBH"+sa3EH&="?ngn#%PBRIY[Y9,%@sC\&EH&="^n#4h;.r8!Bu"uQIlXkY[.tGrKC_e>hq'#Pj%TWL<,.1(*,ob<T5PXpSqVo=E4'B[I:Q(4i+g`V@+Ja+aI<Cq[7RQ9%J8WNY1(LHF%1Hhh`kg3&!NP.l6/4`]1_ALDE_Y=Sh)$h@-uP\q)@.RFf>J-J9`oJBpYp.;g]/\kC75@9hli8#%@FQolF;DVBcuTR%>S8tlNuFZRV&R>^e4g%V;Y^*uJS%=?-?0-1df@\:/`I!"VLe4nX_Zo#lD=T1_pn@!"*N'XFH.P`*2$fA/kTDg^iVi>`&&$MY?/[P%e4g$ig;tr+#3r&diisH@%Fh-WE;"2^2c)FBJ@<*^gd#-Ga@6l/iWd<`$V^_J(;VT^#3r&dS(mOY[hQWjga$d1DAn&1k_U7c`oQ6Y%_3gJD`;4\d'Gt3D05i9^X7$74"*N(C?BO.0P?$(;kP\c@;Ll'&Mn">LBqR,RW#.JgIdQrRQj/L^nX$^!:h@cYiWe\F!O.c+Q]e#?%rX^Ga&i\`De^\.J!%_U>!%u:b>Akt;]0+]c%Fe)SQj\+r\:M5*5bG'MA/r7"DmQ8?V=GCA"*N&mY/n).)mH1?d?ZQt,c@.2V(IDM%4JfftV-l"7->oJo)DIS@2qV#AII=;;J3ZQM=.0>k;Y`8['^.ZUlf/37VL^Q2V\M/K&t@3&%8`&7%H7TWV?'m%n[Gq@lE07C%esL_%.ukJ'Mq?*%ieT:^?AC^0fc>PkN[W+I<d#6HkN-'J%sg=glFXu;JEJDPTb$@4\Ode2VZbYdJKYU0?i(#AL&?gKk?@HqU"@V"om@UI%!"HZR8nE82dQg_QG]rBK!)ZG3=^[?f!69?"-eeX]qoJ#S1;'j4%48>P.OkV/1I<s,NC*t)k=[7O4I?qH@,kh2Rc>O5.L!Z#(&,H/%ZYt^5BJ'ueFK!hO^J^0[bS)u&&/+d/Z7&<+,G"0`2EBp32UW&6maq@/AIr\->$;,]MRRM)"p*ljB(>oW1'lSI^T_\2/uOQfC-b;B%10$B<;(D56eY)38T^Xe?>?$4^X'-c<VuE.Z/#VfRf=]jV;=b8Kq65kd(B0%n;%3nXgErn.\Yatt@+JQ"_C89aH3K5a;G?.SO.E7X%JLe$d)O<bUpR2F)Gdeg'#bN$&FS5MY3X&/RUC21LCVRt8HG]:Ko"="?/2MTJ4:h(4\"I2ud3?B.6c-f%:PUlROV67L+ru_fX;Vq_%3+Mr(,$f>g<YIEr*bR&c]P^G*^q*AliTtEN9M#`OH!")\nMs:h05t(b6c6BlQ9;m[L5tp"`1/@a;)mO6C61%2Jj[*bJmM9@e+=$\%R3T1+M0BTC,t]qZ6?XDtJMjZoL"B%,]Z$`.:IMk=n\,LV,m'5l-+[WdbMKqQ;J5R[.!&$=FOjqnJ!QTN!DWL-=YD^aKjOOG.d[9;%fb`'++mWG#!X3i570<D\Sq'g6kh$";$1DhEnH(KW(<FB4F-*D3N&SO9#.*7)-D470lm@rjaFKW"s1=cis/Xt/o%J3UD?>(Ws6_63%hq`t/ZOdcP#QFC:#cV_k#]DFZDbC,e:oSM/J\,4UYAPdCkDoPD/Htt\6?ZZfgJY9@X\t6D:W\(O.L!!GnZQgZ0R%SOCal$mb8"4g%.'m^O!d6jn%@jVS?S3'*h@tUC`si0W?/AB+5a_MXMt3(PqgKG#LAp1^>CQ/Ca53;'=]/JiU//#M+U_5'U9[h!<s3qUJEale%&R<<%N*-ISAt45IS7fU*;jr]A=@lP;p)a*;HaoU3MbgZVW7MFa=pBdMC9,nr4@m#$))e7-*dEdPNp1t:6-<-@5I:modkXIUEk=3hXq"=>%q]P"&o9:;DOE0/O\A(S15Ah@m)!7"K`iHKUQZ"[%rVf:@n6fE(3*#"4L*sEt`T>u04IATHpTVOKYu,2t.6Y?5`;.^!LCp,fq)-3&%AaX)9^W2P'8n%bsq,X9;p;A%ZGbV;54O!:_C_ZB9mtVLHfR:="#>kWu+.e9##^@uW_[K>RWtQ#XGjk@be'Ib!DcNM"2?1FqWmD37%mWDOgMgLL^/8>+hY:A%FomTpV@PRKQVsX;L(]NKq!Z\<4mMGo6>'(CIJF]W$T8+qIf#q9Pg;<K]bq$c=pKn('_h2Y@rp[jYX1&KZ%T0KulT!-X!r"&\iq9l_1C+[=fmcUY6P59[p=3pWr18qCJ2qs(tA[q#&#eFT7qu&_t2;CjJ!:uP4ot@--$kG!dBoM;)=Pl4>GD]>1%s1$$Ls8MV<`$sZ)5lW]]8s_@AI@S`<rSI),e`)gr'Xr=P9aErIkTP?B-qfQ3lOS8,J\OphVeq6:?WFV*D2A3(Ws\U,e2XT\gpiF:%RVtNSk@=NZ<u#tZnNKtgmU?j(c7JBl)re#d)WBQ<HeO4aX-R2'rTK<O+mu@AJG8UG2CO?HTmcP3:qh4<QD%u;(`S],bCFI#e[H^)%HK!&o1;G?`?[Znr.f86:jVYCp)\I9)rYRN+G4D4a.#4)h^.l,8D2>f=)>]h\+4peZcnb)n":o0uo$\QG:I"jVk@#PXDu[PL'$pJr%EdcmWDjf:M8pp?N?*,dHY!8/M`%[>#,:,P:i'+"N+8iXV^49&`=-uUq"fK7;U0TPdm&Qb.>UC$.RFb6;09hXti3%C9H0V+/Cb;i>%e\aQ,#6h5@3u@`odJ`nlpAFLi4(%X\#J/so05o^+6_'tJbAXRK=&3l:p>)(,KA0fMqc^`-!aH!%HAdG-A^J.V''WBiXb;I"^O"#:%nB31:&@G.h*To'N=j$@AqpLM4*.=Jg$LU\Sq7ZUpUPi@>a)>=4llj=tnF#!4McI:(=mc7.YmShWHJbt7r#*[@`@=,rr4*algfR4X%^%4?#^='"6%jbh5D>,A>OBWdi=S2CB\\>4[qs8EplK_ZBrn`Q]^WI]Yc>V.uk#7E.P2/-DbKNoJ\%e!-^PYOe:M7)Q"h+GYBlAl\%d\&a9hfqO2^Ac&$Dr(El:J[S"G2eF!("B9D(HW-R><abm_O$lX"`&iGWU$).!i*n`Bb-fB?[r(#e&Ck'T=qm#^p?)"(?%Qg#;*(h%)hZnK4o`gP1.$6Mg4N^CCgTCA2dZ@J^:,Ca%Lqpp5L@m3[tY*0mGc9X%ifn;G=.#^edT,KlgA\>JSK2:CCg2PZYR$V_&M&k[LZe4%61,24Zd\$uJDmfB8qN[@#CZF%ifh.6lWIuPrZ(oRbGbC!0E0?HDgF8^J^6qrc2J%%E6.]FdXQ`Fr$p_/(al@7p/K!`Fo'?AT<C3!%9bk:#&%7\8G3e<-h(/Ji2^K?srH,FZ_YphHQ_(&Ila;.T&)KOcn+P]1gDM&3HQ]dRguW)*s7Ygg=(i-Dn90Q77GYQ,p4/p.H/6pI%q6kYJ]<?+=Y&8YTIrr&#`UE@M(\h>'DJsU,]=V>+WlTP"ql-tfQX:I6T:J$5.R;M.qV1gn=eoS9HM."+?iU"?^]G"SMX8rdJib&]%;\%1ZjCU/L;1.A[=8eaUqWQ$UiMh/JDr1.=O`u$Ddg'i1m#>e1IcjXNmEtr]pq]rpLK5cC?0NEpr[ua%ILb2)&2J]5H_:%'b87Ru%lOW$FgA\tEf,dksUappn3ul(aL&$>3S`.$&<kR6[#/']`*c11EhUCjeQa[4(G4E@#O$2/;W&Q(_KDd7V((X`_IVWg3ADhq>>(KIV%CBOU/5CMDdjbL%rJ-W&qjDPOgK283/J,.mC_sNQZr68SU1>i*#1";QIdXR;sV4f?JriP#Vs#3RMGJ$d6T+5B/j7ALaHhK]&2tf@O%]b/FA]p.,5ShCMa$$SC>\E\H-`l[s1A%:fO!HRPt)+/6EE5hln$/LQ6cTl1TqYA!f[(F'",&AXV1PVSHq6+""I+jn^_Pak_^@:XO%Pk9@^_8If$d<sof4AP,^<tP#d_@PrGpc9S=mWQUSE=Oda>Q$)@CondAR'3,sAUbIB/@W)H(\"NOHbMugFu+'oe*RRn^[D'n_ln31%5Ar0%qJk80HtdMVnUF3\Z6ET"B[=H'p*+t]ptT("pYN<Ss7uE4e1@--8E.Ng:2D_VkOKh2H\q0Jojup%rmDh]o'sUFmJ27SE3R+0%EHh?^?L;tmA5RjLr6$b>r9'idkP302DgU8VGVFIRdg>Di/\1mh-/<;2Dgas!^N=L7-aZ+SkF$_Mf@bArHf%$`Chkg'mC'L=HL@2u%V;H:jk802qScrqcg[fpNHKF^e@INAc=O:MA]Q8,&iBHrRDTQ3Pag"K_)c#cX"IMA9%sQ)Z1[d2Kq^[U9>T&!>*SX."APDX8,:Xr>%o!.:cBcFQnnD+4VZXrorV[m@)Duh2Is4i3na7BQa[iBjG%MfaN;rM)195Rc.hcNmW6W"jE$?`H2fOI`Y5HeAlZgk.>g[OR)O1sP'%ba0X1N[gJ78$ILCV%0QLP\]0!g\]#j#EIi93Ya3J*7iupCVKd(NXkS,/jY_oV4heKmbGh+W$b@Z/cr4DbP25YqSj!C@/]ICIW/4M%Gk:'K+5G9T50r-G"4Zn]D>i\]QbMK:<]t^#`W*`:^tVXum)-lY-M#pSqS@C7)h%cM17Y"L?[MEj4BC[n15*:B#@bGRO#DS_K]2*@%>5$S*h1V;HY6O-Rl"GOO%4BHY_J&HUmGZVP(+?ZV#55rUY=#R?YDGETpE>Fe:oOAHPmXQaSUoV,'qi#6<Fnigq0N([j8QYgndkbJ%'8Ka\SY]AJ_sE+V-T5RC]CY[V'"?rh/sH(eS'T<6bUq_cnA4RSIfIP<hn3`HZX(_Wqs=('T>r*Ekqt[!<7h*f<"&</Hhk4rL#o'F%q!dj$0>R_78%32WqGECRok1LLooZ)-lUTV,rWI^rr[UqKY<6ri0ZQ@k'#-EaMuSI.]q6/@99hDK]>#_/54SKcb<J,C`XtH543A6Q%HEfP=`,;`;K<d^):(#kSZ.6+'^3u^kJ]FAXJ;2sXI)5nr[pTJU:k4&`UK>0E.iViDZ+nu;KS6'(9-*2tI0*EFB=Nq";lnX,R,,Wb%MRC&QO7.JOEq.[=DU?uTGAako*1-#*h%%2JHem%`hMjb/J''!P"l\M!^%pg\a.I0dp":_?NAAQNr0pL0A>oC7C:2*^E;nZL[pT-X%dm'6e^9bj\%bCG?qWK^Pi>u>g54[_SHgB)2s2DCSSo7pcg8f-UZ>]`UqYX'$7c/e=.@7$Uo>SIGn(\!;2fQm6G54B$T4`@n=lMW:%/TJnos),UOqsiEJhYH:1n%Shlm!SQWme.$l>PmB?hu%TZQZ'Y;laQo?D_M-4q#04,++HA!o'H&X+2%7BlUuX$gVZhEI!^$Cj7P3P%P;c^\hF7MEe9J%FOdH*Y^A>`_IsV-_Y?q4+q>7MY@aY_cg,%>uh0uHL:Tfu)b1"s[]`#rumJL>KQUbE^F+<T>mn\COmJO)I?bU^,%]]JEX?D"m/5F/:DYtrfe-VrXro$1&,,B(:67[C8.?)DBjSH&N\?_2aWrUnk*[AQ7ChtcN#n@)JJq8Xie7r*=?H/Y.nFrb<Y-BSrh%LR75O';++V]ri0$I-piMT>+9_s6/KYO5Kg!&b,6BnBY%bDS=uc/RJJQo4p;!5<aG]erT:uj4_bq*nHV.lf1#aN-_]9jo4dkXHU9^%[B]_rd>NK^\LU,,n$-6Y\j_V!5CVu9]H5Np?Z<koWDuad[0eG;H+U*]VDD<`pRL`]/3!@erq>rA<$0!;D!5M!7?Ih\)c.S<?aRm!%R?^?lW=Ms4qWs\@*bb5M5)FhE2mh^FDcEk9>jF#m8$]O5i.kl/nEQLP>@[?k3sOE7S#)]_r)S8qkWj<jmpH%%2?@A["I/L9e9L`\%>;?T_rJ=QThL0I+Uc,r8pO*.-:g<qp#(D#+`KpAkj1b2IO7$qn6-e@p5HgQCAQ&7:od"smdo5.QIcI%Rr@?]LV_(ii66mVDg+>_8%5M_L`qmX&qmB5?Y`"1,4*9kY5rfuC9q1ZStnDd$E3RYX9JId7?j8#aB:/o!cYMVJ*(\UjuNd^kT*?pdrn`:__YHK#C)n([fda,:6%-_(F+U@e*DpfDgM?[ils^9h&$%j14JM8bdi[QK9TMX2-#YCCunkY'5YCOZ'$Yr,l)nK4&O$9e5<:hTDlgmH.0l'Jb<VMEcic=3K8%.4krb1h/=?)UHHt2>moiS*r[Jo@gVD)peJ*UR?CLCh@F=0C<Nq-%`aOBDi.:nK7\a87c+$_sfE5i*eV>]knqggOF^"Zct"nhu;eK%s1t>hT>1D*Vpk(=kHB;'hb]RR#2[qCkP0(8J,f%W=;h*cqtot4DrQ3NY+JBV%N[b,\$t7n"d8o%R4YRsQe!A<cn.qlX3WtNP>$G#%NHE@nCL9TncfW!Up<o9l]^QBE<G?SLr;)E92TFpZ]U\HI_7m2`e&at5h#GD&X[]u"dWrgs2!!3=pTi]H7jXm6n))dnq"!s53X>(2%DkDfEb2:s^:&O79g>k](mbNQjIfo9!$Mg;ipH,nQf,Io3q=h'$,&Y-ek]<r#AT]a&nb)?W\n/h&"S]H.br=7(I/0+9T)%UW]o\19%nun,0\T;%EQu=('[g*KeJ,J^B/E6QI]7$ANFR)1*hVTj`Gj:Upo2D:8P/f5JQanU^WOHc33A@,&?i8ZmU7_D\Ku\Y)M?$>F<R1X/%Z0L5qm^r3c[J9Ok?[`;?5(f<q8:C!WiLRGc3;WtDpcIW/>%`,>*W"A$c[YT*=/?m!o#`W#J,,&@_(\'_nb@0tIT?jdYEfE:hlX-C%1`>2on(0hh[JC*EYFkg)Njc-Bg5k4?T:.p`&)UD@kLmVBs4DAY`>`aRp]7_lZi)-KrikJ4br\AY*pW:-5I!(9]p;_YASWX*r9FTX%$3/A?nGB-PE$ftf'qi$RW\!r;(]Q@(_37p*@!DRh9:pV'3FtO^7qVm&h%Q2A=n'A).LVhpks%Ds3/5I\rWTX$PiS^MAjUhjJ"-hT%!aV)fr6>g)$f(2oWuPNc6RrJ5$+Ha=IsgX]gTT+#puTK0Ik$lUpt(S@s,RiTi5Xe,(U$&Om7WC^R>TFh,&Rf5Xrq,.&%hAMh2CJ#%gt\n?pg1+,,As%/UCD6Y`f43slc/p7[GG3(U)UT1`s-AUDj^DR<;(>52)=r)&a)*U:qJB]gZMB!Y2?F=qeoogcVKA,C5FpR7B5J%%8J.L&UPSj`?Di;P]uM582Ano1p"VXBM#/Z$+@(f`ag$1+@BYcX;DYQFO!5R#8:Qffp$3j+^@>+A]D[EP*rXJNokrgG\Ss_#k*=*A%AR=3,8uo;1I]8--pK>d[mo:7;[i0bnap!IAfHe>hY8aLlfj2?O2r%]lJ7WQ(_Z+UmHS%AO<ghO6%DP"EI4)giXcE%p=3V%qIeP`/%4gM]W6KRoF-"?/%07+Z+.YA[V\;"TgH=UZk=tU%!>5VV%lKZ>Lc-ij;+19efj(b$[epZENp;aV)rUCE-g_[/BF"Z4\\/#NfpMDLN%GCS@F1%#.u+)s6Q7A%'>f_FOP2R14$[.sR$qX_%#^TDiXrm@X9rj'dm5C[!_HaK4(k/T.N_%YX.T>\h/S5lE]d.4'[)ghPA]4_,b%&+l1=Yi&b^B7SNEhTpLPmq7nW'5pa\XnT/.rV9$0M/W">inF\#qt@Gi-G7:+l^!)"qXa#[ahHAR2_4.YT.Q;gpZ.Fl8*^u!"l!,$%+h\#!hD7%#oC1Hqpp5f?I.F85Q*NJ1Dnkt]%oC+B9'_d^rZc&L(\-gO+'a<WI(f&1mFom-C"\c<J%GUSgYI/7%mm#DMFlZ1:X=J,%hL6Vtp<DX8-O.QU:Lsjt9.=38`p_g_^jA]:HF)kDB;"[BZu>h8T=eL6<e>74%e$b.jHkoL](XbET71+AC0nI@eJIU+pK[n6Z#)%?%niTJ@A<1/VmYg+pFfWo<nb`4Ng86NAI/GXCqk#j]X7Xn#s5r^G^oMokZS.s/I`E2SX(8VQpCPrWA@2b>c$3@V<O,fI?T:0$or=Lo%>#j=^/$;tPqL>*m4ghm3Rn-o!o&DZT")2uXH9jaip:&q/#"&7I`G`Ngrl6t4qVU30ZEn3:^S^oFrlsbsFj$22Z2BE.^A7HiETE_E%)eX)TM9$LB?hi`lQbPc_pAIcOIeCna5'mp8O5G9T_q/6ZHh+7Y^F7m8c5nXiQnJfY4LtR*<aQOK^Y"s\(WubAra4cZpWNSCh3hk?%!WRB>nX&ge^C0\KcE'$Qlg3*Hbh4q:i;Hrcqd`&XF"-S,imZT"cE;'#Nk5f5%;p#r=piX^?_Bh1huT3c"+pb`=QA7Q#^F2PQaEVG%T*lE8LPkJL<Q2qq,rF,HM*AFa).Q[SgTS>b[Q5)Q:^N)SEdJRf[#`blp,=F)Cfh8V9+4Nt_4k>uVb%>?*grZPFr2p*p`9%hN;C\h%Y[-KY+6`-A<74Y=a5*p[Z/ub:+-Q!0luNgmO$a%(Pk'%7J((`;p@P<^a\O+JdiPp3kufe/!WKoK'E_6'?c<$AS"A`W#.-VjaXRMA%ht1^knr3S1B<.C#J+J<CM]).G5?ld!p*W#.`q(GO>FmEU#QN_[er(jL6TrS$$if._cDd`66_7mEW;Xue]Mf$^%saV/61@5_"\5PD%lgU]DTca1h=tulP/^KS8KmrO?A.`3bg2BDNPSX:.4<%iCrK*pS$u1:`Z_C)$U*&q_p'*,=D@%iDMY`[>SL:FcD%b4<ed-8BK_<ok%Je]l>cg'Ea@A#!AK3;@U;]\A;=^:j9[1Vne+7r,?2BDfsO/s"/ol'd_d?E(r.uV;07DJF<Xo>Gc\\r>hqcc5UL1TA:qG@ftol'd_%MpV=0=;*7/`'78-&4L40><c@\B)PpsN/iVOTDDCtU%N?/-*AGuriHe[cSG#dr@!TJPQsR^oG6h4r@kHPr)7FRMo_uLo<ZW_n`&ea%f5PT\>F2bk?D#SD%:#u:?iS[fUXZ_#("&PbZSQr,ro;23BYU^!>o"8$&QVCp++L[+B5a%I>T"Bp80G,%;X?$2QXsIW!2X+<?\Tio%XAo"DL^C^u.a+,B)Q+a6dUn`K7gPOt7mV_p8]FkX]k&%$-A($Kc#GMDM-+4G$(ALgm-^O`Qjg>CA^$F>c[tu+GA(`j9f=WNpf*P2%MAiB9#Ae*Uj#*mMk!>.QQI?.@hMt%&8Q'POcpnB*,HHJ4-V:(_k]P;:/`]>dK/Yb('s%i8Q3c()rL-[X&Qq">i\Ue>#A6EEnrk=`%k_!u1/Z"bG%kNlCr#,,=!pRcU@BG`hdD+s(R"KZ$pT&.;1KJg_KXR1ei`iQ0$i8`"Bh5KQ($3_V<bZX[8V0?%`u$Y[@&lh=P<R%O%`%#Bp;:=MIHC[ZVo<%#;EIJj?&=3'KJT@1<5-1-PCLu2I^c"qT^j;qcTjsK^Or<mX3lXc0=c38+a\VcGUgpHmPpT(tJ(8>@pTaY3%RTI(MoU<$e>![C#V1UK<96dHf)`)IP;QM:1Jo!co$Bq8>k_!u9Q+FGj=0*[88Y;,eC_a4nEfr9TLL->C(BBAs%cbk@1H<`e-BP(U%6naWu`j,*0W"#TO"Dkf.&/LNp/0Z%cn?]dG%+[sIULbBVMfL-IQ!W4)NeB1$%^!m!>J1Vbh6.,Z.V"5kendWQkp[O+&?rOkQr67-%b>+5eTF]I*QAY4r-:o[%CsY\n@4,(^.o2<ts/O\i^_L0jZ--_NR?3SMX$]NQit+jHK?PhclPF$gn"S^++_/;SeeiCk_+<)YBc+sr%'&q5*$;BfoT)'E(,YK%CX="m<5NlV)<!ohH;W^):cPS**a9#(l01E_:HX21)e%<W8hdC@?qAM!q[uN3H8M,oEAX&OTEtg'Pd,R\.%>LF@.Oq@p^`CC/]!p4aimT$L!Fc%lJc,J1G9^Bc)X;j^FlI*8Ad';@OaUS(V4,(Z).?Yt@W(EWLcH.QT=sch9J(8=9IPbacX\5/3%2lrftV+n;Am`h3cRmNDm;kq?HaIt4#/>6RM;3E%fdP4c:>Nd+rP+D5J:+''S9.VG^PCMe=dHF8Nru'Q?5t[D6:_mp#0/;Dnb@$J\%!r`D1bH*5$if":%M(kJ=8Ae!_K-D!uOl?U/T$i]DNK>J!Bi%_j1sedZneZQG5Y,]sI[M]6M^:BmDVCo/aP<$sZ8\K;pd'f+oGi%5%\CT2g$p3[XP(mg^c8nL!#<d9-;g,$A(JQKnJjI;:8j^#]\YQU0Ebq_<PsNK"#B_d*5t^t?KZNW+8Jip;;0kPA;%+Go&-?`->D2'a%.C2\*-reh&3GhS\5d'.7o%Ha[mr8()):/^Ao!;Hap59<I@=&<hdngZ6^t4^,Uj'KV`sLB&@cUi^*]+S?/7ri?eAEr<$SVi>4\ps3%c\"(oI(ZDm&%g84iP7l'8!Puie3^;'6TETXA5N7r.fEYOUm.P&8m6'^fNncf3Nc"\,-"(mU!bJXTdcbo@*?_G/J'[V&HJFbHF7>(%BMB$`0>.Yj9j/#gJMNN.&lIA5?4-d&9/D5M@1Y0i!Y,u/dGZi^WHu(oh1.geV'1V2M@@&W;J!XaVN[XkdaALNY8OL0i&V;n5m'a,%Ml"QhHIHX`S:GH!`mRL^"q>cALWdqD>b5@(&t(N-/b?L&f@O%/Br/lFo<<j!,T$5q)H&@fjVL)_9BiO84!_V=:4E.EHtqs4D_\_t%*pa,uM?YV!4G+cLblL][mB5hN+f!97n2X8g;Ao!V?8G8._/pSfJd/TMJ>>-;#+eGC%E(fNKJ[APZ\r[K-'kf>>d/qhPkQdU=?NX"%.:mU-3AD,@!JasKcf(m_E;V-'&"6*7L.Z+@EM\nq\5AIM6u3<PeksTR'0=j5<+7\,/0]VFj+qC7i^o(g![t_T]T!K>;O:c0:o5[i%H3$]45X:_=iXg\fPUBX%rE3AM$efYdU`Xsa[mF:TM5A;%ae1o5cJW*B&(X6[DNh4Y1M[DjR0?Yn>(gBU.<a'[fEl(\UL%Oi/1%EN%-3=Z=[Y?efPVW(<N^!"1cCV^S\$Ym&0$i.UP(,YKA\\@_\#rCog^5R@qZ*\+0C3(j]C'Ip_J&>A*,XHOn"]gS[/4UIIkuT=IfI!s%77[Pj>;2j[8,cLij`/snqULs*$;/RBm_,u>'UH#bpJHBdqRpeHAq'#oK*J*hVl[E'K*D)@#E(F0]]As[:8Z>tqFru>de7VAq_>!Y%DEcQ]*;XZ>+201mIoKU;+!?VfZn?=ZL3C%B)gTCPH2,!k3%[`0U%^\YV'ZVI.cg!SbR^K;d(5D+^6K[G[_I7>1B(Q>b?fI"[tVZn%qWcn:INR[\CVP;Qr_<;c*boYN/9RP#^qY8^hu-QI-F(lp%B<P;UFMNbm3cJ8F'Cks]^GZ%[(c:jRbekW9to>grL<V3o\F%l$_Y\>%qMg!6RW$I?2fUVQ%?d[he-S^D=%IgN()jsX"1(siK/?\u+^%\u<[f`4:Ybo*KV1pI%d.&KZ)G*A;=+jRj7V<J=lf#qa`c2\pMDDY%CbKo;Rm.j;YsV7-;&>k['o:Y1QFq&3,%g17:?(Cmee'&)3qBKN7^LkGeX3E:<MXrG1`=]-N7aEDn2G@"[P-3HdE4<TYG>.+?`aaW%FlO8mPQ(5*`!#="-tN#Ba?Mhgg%sCCSL=nZ$EZF">QL'Cr55:;r<GLn>RG8RPJIjIX"$pR,/@rd(1S1q;8]RsG\[]I[)WW$=;Np'%Co+"2//:?\@*I)&ea`#6j'5!=rCZc>VO5ZE6@I0Z=N=+><\c?HdnFOiVI1E#:*'_m1!:8AoLNC21X7$JVO?;b9Yic%S37LdA$3..%N-3>UArd)\R-Orth."5Zf]\H**HRc7&kk)iZZ,PmZ(AMMFpb+7g!<@.3p&2E,a`0rIeH=:NgXO@)!dQi,?/1\ehQd_O^O(2@B"+*%WN_DN>7d`F18^Jj;7J$$,ZrAde@p`4_)0Wo(2g.>Jos`m*>k3'Br8?q;m;:MArde@7j^V-O4jd'gY8cP!?]gW3OST/J\?-/Df(n0%/!1Bc2n%[u%88El3&;L30P=<%l^/Nb2eZi_H4XH20PP09OL`RQ79IlhTY=8b@08=2g'J^cl`?Y]hBN:-*46I2bCk\eM:o,)=h9Sa%4(/4Ibh<@BR!I7X=RT+kZZa33R1NFZas:e20!f`<H=h9*G/=GqR^L2C<U(\HEFQ(Tg.PL(Bd[_)k#m&R>JB9GI)XaR%'t,oHB02u%E0@bJpjO#r#QuPM9XiP-^r">Q@U-B_rf?Flh\SB;&n(kuDD\&lCN&YbL_@_MdDVJ850)<qcOF+P-(.!h_7$:nAZ[NP=5l't:jS)K%s+`IG<Z37jOsD&XAHiHJ:aenadcWW]=@FdGS0Ui._87L3F:!/W@FLor/QbTMU918KG..&X*j+qMBug>PhIP31=_<h-#(;Sn0T7nm%JOP_of/Vt="O`E4_Fg#fdD+sh.0sK5>Jgkdo9up>bfaCp>P;d9WCBhebI^H<L(l.G2NUt?=^dI-#(;Sn0F3,d?n4m%!6JOh+cq_c%@MW1nOs^4Uld@BH-+Y#YR%qQ]'k:'iD(%G<@iK7"*(-#F1S`)9Uf^JT6gL%<YqTLZP9`\bFGsW6$a<1M&k7;&JCe=sYl#n`ndiDd%)Ij&\P^"+k102D4Ws.f4I_o,-O]=MW*'t,p$=9#ECR1M:fg-^U@k@%HL>'_3MEc_W64Q)^8m$A%2#::e[LdG@Z0"o!-<Oqu&4TWd%)Oj[[%1!HBSB.g*R?sg\JS%217s%oI,>QZAAm-.lP.4e.IB)sNX-b3!PGH;boXYGW(H6Rj(u#B<]%-4NU*up6Bi:9GQs5nCO@%S*%KsB)P8Xq,Ug?E46OMW8VoF?6QKlIE!r0h-4\KYGnG$7UoND<F$,0R*N3"5oK9>g-tVcdo#j9C$fS\ebi]`O*;Q/6-"8'#*d<XEQ0%,`Ve'Y=fXa<jl2HV6JP*3!]jI-;'?[+F>Voq^n2;Ve+DS1^Xl682A&\ZXH/L+,Mo?[DXD(Z/$sEnd^)&3,);aUl0)`JKTbMZ*n>!%a9l,Rd#\C2(7!;JYe9T8!LkejR8K"/F[7L/I*%U.,Z/%+W67a^2Maq=P`nRB`S!#<>S7hG$o'a`QYI@ih-!sf%`:A9:"E:,bGeAV%.44+"fAI,=Zhu)i&*aWdKp<]k?%LNOiJ/VJ5"6#D1.m\[8^Q[,osp%<QKTj&<Fs!eX+8mj9k\IP<gke5BUjdW<[tF+[jk:DSG38?%^IaM0;3EXL>5_qsDUKj@LY0Nr[[RCohP&7%U'dqWXi2Um?<:uV'1<b-"W%ng>F\$T=Di?s9G3\PA4JYgf*/,Z9!sdm1",JK?)hsR%K+obqEq6.:S;#:AE9fE<[u@.q-AI=AU!?AWbXBQh!mGb+9nZ)HOqS%:LRl:e1R&'r8Xj6CS&BSf7QHZNk])8OK-HauCb=$CQ%<a(%6TPI7,7\%`23m6sXV:iP!gpSORY1\l=q1Y&;_\D0LF_R40u_:A(BL1e$kcGTjb-L_*Rkj0HV_!_/6HV$<XX(<"GsPM$*mflNC*tR%?3[`MeKd'[Ee?DD``OYn)-U)S<.#Rj&H^(q-=JKiT[CC:Z_Jg&99T^:q)T6=SU>->/;,aciB(jc1_(&e?(($`;`YW38u!XtXJ@'L%__^9EYU#$Skk,Mh?B\C5@`qp&j<&^89-0s,A+6FnB$AY!WD$-jK3WQK.XFT)BfjLKD)&)'\TO.TLm:8m?o1hl8N)S)X:2\m.Ug:f%dc_d!%:L&*eh<ZM<(^Sm:4Sje00)^3gdIGYIl'op.>i2N3OLE,jX3WKcj/ePZZQ>F,ah5rO`YCSZdq^rk[4!$f"c70eo@f-/@<P*%63=mefP1t.?0+JWB99rIm9"(e,`%Y+N*3*=AUqd`loODV"M?(^QmJ&^Urbjn)M1aPHY:XTnX!W01G]FQD(-h:F*4T9="7tF1^'m5%F_Fo=QC0"d5p)n4XM!NuD3.<ZP<LYafICL08^cg0obsS)EG<'JcLkHN#2cQ")o>AP+BSMF=UmglOjfD$"iU"f[:=n^;Af$l3l^19%>'NCYa\VcGUgpH]-'jajaZoD9\iJB.jNBZfDT4J5MH,>`B](!PBIul<M(I<5Y8fmeMsdu*@PMK<#cO)cO@@SPQ:dVO@?W5K[M4%9%KRhZbQ*A+JC%`'%*Eh,p<%OfTeoN8kfDYu?Z9s/JPZf.0$djsO4\9?DlQVX(fh%>IoGr)^o<l>1P2)kZ8NO;;=a?/eqKLhZWjqbm%6Ammfh9d9*C<Z!7Q:iosG16Q?/[56?mAS\HfMQ-b>B:+JdZ-@bZYOpK3$b0qkV-C7NU^m9Y/?jN<8(2>e_G>3[Eg`AfMQ/<TC\CX%P'59)RVeGLZaKD:'$P-,0#:N@;$UhoMnB/GIlEL5O*T&H@@f2hjZUqW8iu=:RX(6FQ'dJ@^lB=sG7#jAV_NJCP7Gru.q:F"$kaB)%@n2N(_3W7uQ$1Z.RULWe%[r_@?q63%D9XAo8iu=:R_9-:=gK!MUW0sTjq:@a*He%;SE(^;E%_"g4)2tI[U+]f[%iY]fgnkW6rP/2%UW0f#iSqsn9[ZZs:icu,'-).+#OJBDnLs"I0U6h2JXU)?F$#+:a'tEW2OV`BQ$1YS2;>ZBKoMN52JQ%sQXQ&#dXdk)fO!)Wn^rRF%9`,:AAXH(O[u%lfe0J*f=>r6XG'd5A#a;7V(8fN?3iZfB?9+Dlp=N5PgcN;^o+FaF:-)4X9674U)`>NMe0)5,L8hPTNiLdV[E<C:%%(fAhSA,Jr[$)!LCoM9W*%;"Xq]7gKbQPc1-(%Fhl9NT@caCo3e-rZ\K<2Tl;e\`B<V+jL?.;H`O?3f5S2K7\9QGL.;'W-^T"KtQ%itA%>03Gps;ebFB_AGcqa*;3V4^otZ%U)TI7sf,^SG'H9&'$sT>..=-*4\+8Pfr'PA;HVs&husf42Ea0\sXGl-8S;".5URM[6?U-%(+#hc*A]WRH,Nh*bT%?J1:,a+4f?u.S@1O`m-N,/[ldjB"uC*N=$(c9g+AB:1jcU,%?EiX.ihPs*A^I).nha7CX=j@l^2\_8?e-=%bk0a,ehQ4OO^K2NSNRTZ1OYXYJp#;&%ce@c)!dP4bT7)A1"Qls]#BV:p0Fn_\]c*$VO>QP*\l5%Qhe<&VO?,`*XUCPQe<V"1ir1C%F4k<E_EtAinn?]k_<uoc]%M;DqY'W_?,-]QAYsWINd[L[K!$[]f-XY\&EYHOKt2MD_hkpEn(KL/;]4ngYYdJsB8h.u[Up'tm>MK0%QT:hbZDHC2=Z^$o1X=\\)jormh6'pCH0!b^h75-)/ku9q@m/;1=h?Us^3`([pO5cIca.fPI2>0j"ZpK1G"[/fZh=s=["i5D*gSD8%URSY]\"u7-=aQ*3V(SpWp:,!S:O^ldr0I&@B'h$aq4?d>'k7>%bh@-j.Wo\Wk9Mj%pjP/=LmqTQ_Kr*YE^mIQ)`dr=G*;<PSTAMM%>Ih,ZN@$K*mHm'TO^ln%M)Bn0KLk.dL6[$Q%5W]_At/+sA\c._46-qSLO,2^2locZi5F8SOs#[YA#r@/QaMR6<Ct0I5p%6r*Eshk%0M7f3_im:B\7!q*"9Sk:#ZSBJK*TZ!I9p_!#so9'WK[T,Yi?1,=Z"6[Ea5dU;DeaWWn!_u(s%S0(BKVT$kguDb#q2>i,"hFeK?;#%nd"nY'aA6ket,+Sn[^u;U:jB>'d@T(9Bc^fM^WAB3!p;:8ijh^*/(_Z#Z)/PL%kEL!LK9Q9ObV:d,\IqasE>^#^rrnN!a'/AUFrG%U&nPr6^=F(2&pSB/7,U03_C#QMR?hk(g.If=OsC-2-VB.3(Y%e6a)Ef?pZFMdC"NS@B8)9"`8s%V5ZX&/!Lg^E>eo0QgmYjejf4o%+?uedlkBYtL@BHg$%gW/H>S<TG%-Z>ek+6P?1ln$dmeIc(5s_O.UFZJN],IZdM"O!e7LZN.BQIRdO7ZuWR$NC7:\tp=';/qd;0Q(%fQ*97q1i9HRQ/p*YNrQM1!"?Z6#b))__C@T=Wu4HL(LT'N#Kt#1s8RUbb,Kp0kTAG)door1[-]YNicbkRO!ml<Nk@4b')iaaV8R5%"G<XjBRn52CJ!/tqoT7bY!V5,Uf[X&ieM*mX>!3QK>,5u0F30J=3QgM7(Uu?#c&]GR)PAtUrbjn3l%^lF:PUW-!W.]3X*%'#NDQK%:*<qu@#39n"&@7W=d!6ZdI88M&1?]Z.mpfLDho^U);Vti6GRBB8m$P,2#2o5j![(?cT'KThmHj2,TV84jP_e1PA9#0Y[G#9E>eo0%_dSZ%%0a*),fpPm+<=t=,f=hC,0<RUS>9YqR$B$jUOUh[1?/Z-Q4[lV"C#(Lj@\H?nGF6Sg'tMj%O5p$=_``'#qJc6ih5bE;cmjQ%&4r%.On@nhPH5C_=AG#+s3PQ5N]5"/r`63+>?YlcI\5hKk$!D[N3dM)Y%Ot@L7]SDX3=rV8V/3_-Wk2m;'bs/T<ohP'slmFC%MqL%[`^k4G$])\[1+Jl5=gQ;cX9C+J^4PjbUd/<_I;I]"KW,Q@V!h:2bA%B5"N^2KMb*R,Y8$_9[W\RJTT-d`EFT[UOUh[198AR*tu3J%&hLHi`g4%95+mPIO4m+>/m@?fgliSR]F]K:X>EN^,YC,;I-Y]=P+2)(:+''S9.VG^PCMdRKI)CM/M.tIQ>jhpI&[6b&?H0UN'"J5%'oXM86OpVBm2(^CAsSi1R6_pj@gj[s:p=)#Z$"D`#c&]GKU!lUUOW&i>C#as#rSkG/bK3)`[k(BpqX"2b5`X2JNq5--2bbsaJ#C[%*>X$]Vc\D2j9L*pN\U;i'g=Qf8]@;f+!H`+X:j)F8K.Q.?:-h=*&2.j<;X6U_&,T"QOXTc1tKW6N,(nKLT`NbV]j"d]Q.R\,ku2]%(F4g'A;o3qL5@$/Beu8QCgr\P"\mjIcO3/%LDk\K4)9QnW7R`:V&]k];RC5QU0g6^E7a?@Fr@"ufhmdsFWGW,/[]d;0bB5tkop+*%O[2=VURXI3!b]c,#r1'$gcE\X=G#3<>`4CCJ\aA@5_3,P)^3\s"h)qIZ?E<'M$\ei8B7*uF!E!Q:AV&fX!SEICaLm#BBX8OCFHI]%@s'_lZ.-p)DQ>LsN"'O\ad+mo(U;IjG(c-H;3E&!dP9lg5nln.dcWT\=N.?q8t,ZFY>\_"JLGJ)gSt_RVKORU[3Z\M5Sm!U`CAfm%_l'rQUI]9ej*G!dSNs`//0`*16'k6-M@:-G1<N`h?/TO'7F;M*K#'$$:_lu8NesI3j8.EZC`#1jIQ"@q-rq;k$'HSTA*"6r<^7r+%0^9kc>]*"c8aIciPBZ53ChkF1MquD,$HmRFlsj7ZJVAG]_:F(qn4_]Z[^%-ZY`=kLM4@<p?Ur10P+2)(dDo9B.o)6ss3U)Y<`('2%n@I+Z'a0G;JE'"$O,<?9JE9-B:.)hn]!S5'IM1]HFbcO)@!2fg+g<(NBsWt]D.;'W#o^LhmjN3]!381i]K_*#:`X^YR,P^dM/Cq_%<8'nKT'*W%.@(p=NlTdfKmCM#b:o3)e:F'0gEG04k;Zj>Kdm$;HO6RuN]O1P-TT#TnEYTF'ddp/@*NCZV4D_$k+lJQGurl6fMQ-b%Yk9bFV&a]Ok."#_48BlFJ/pN0,p1oRQqBI*W1*Zi[V8l?^FR=R4,rJ;9W&nRe?_b'm5^):M@.b1):Md5-(%FhlDU/RP^&4.=U+5k%0mTZ?>_Yi(8I'#(l5KfUC^9=*1"#"PAXH(Ol9NU3r_=WH31!FW]XHr89VpSA:'$\T`Y)n8!BVc)]i,_#_,T,[8%m])Cp3+j_pf/N%VR5";&ko3ogVfi>N&A@Fp88ldC!KlI0#LZB\TIqt?HO:r,fU8F;.J$hQuj4CdZ-@B%WbY;(%$FQI_^s^PAa7JoeK4;*Hb?+WohdW%Fia`/<1*:f312pdWO.j!e@^G`[rE`UjGq*i[cS2rV&a]Ok+&?TNK_5Q/.*`c)!?,k0qEL;;)PEJMV`DX#4/9CH)EZ-L.U)j#AR"D%c*%_aA'Gf`q3RC?0V*B)?&IdSb[ilU\U4`2rZun/VUCJcWb+3_cT\F/Ik$iV0?-X=Q$1SQj/USX5Jt!Zlq[d`>/GRlVULPdjsY70%U,LtH+4_0.LCIF@+G=-V"+=?(q^IJf*bT2pd@=0PV54H<VSd/dg0)q1@FA`[3lQf)'FtC#WTOS`H2(6YcXTN;<\d-hl\9g:9R\\F%n^bemJJ8Wh('_GRC#1oH+ct]KL2Z,ZUj:/E#=Fq]Re>&=JM_;5r")Ehi,4@5W3D;m9Wfd;1Td.:&ZfX-aW6(LAf2U`9Yic%Sim][%1Z8Pe;5R_A1X-sqehMfJ$Eh6,Astjq9J`H74VFi+VV*311_\/BZ@bZ+ouoCB,a`2\F\SWS_)c1u4VCFEi;g5^VI1E#c5nQAD9L`h%k@R7nIB.\%7NS>C"1\adPP8%2lLtV0W&"(P6Rtl-cO3Ze:/K9+9Ot*^5qKnrO.b&c<'Sqnkp<9p\(9$o1p936(Q>EjV6Z2USlb4#%3q+';nR0-oa<O7Q&ZhVs'%G+JP?ri%*o&,'n-J<)@F@eFcW_a0"Ef/Y.lQl&lK%b#kp<:kXcm(C3Ze2Rn-J<)C!oXNk=;'">;R;\%-&+uE5s6ksH=Ph$2q^bU5s6krH3rm78Fq1$)t31:m/^J.2t@m:o?:0`$+_YaaPZ?]Hm,HOV(#aW]([Uk(sf(deh+XEQSud!:miuq%(#ueK*-4D.Ot?#=,GbHsdY,L=EaEhH-q4ccW<e*:L/LSqEo86d\f(RH`fN@%@?Xj<kSKhT"/i3;hCk8WI9p,*eZeVMnTng&%up\"%V3,>'c^9gsG*k::bpn@r6'<@Ndg9'$n\qC^O]3A2q?R+MA<jCY,\cl]]nSg0li;ZD)3/:Acr`j@#I@Uf'o"@pO_&7iQk?R:9Zk';%=FQFo#CVAu_I2sJP-H,cWAB]rNFLI"$6$UY5"!ZInn)#@r7"lR19Z\2'GB+8L:#%-F\Ir%.7PRBCrpn&1eJD!834WG8qGnm"^jp[%=0IYrE13k;(0f(I-NDG.f]+iV(D]JrGT"/%Idc3j//W'sKUE`.$a5&]S;)ReV:J,nZ-4K8%/LGq_(l-_\5H();I2h@KH,/EQ*A[^%C%STTD>)74]:s4M1Bq,T/EI!nLg0[E(>_mP>5:X`=96SfflsMO8IC*a_bOXEU$PC8,a-BIcU^+*MHF=J8XfQEYG7H#BW1[E$WO,=%h!o,f"inRsUK)hT,7dL!:eV.6QCSQ'JPXsG0nKO'`DDtU@N-k=m&8**.^=agIM=U7L!GErK01c4QFDD93l^(\Gn1Z)HP9HC>Zl$T%BB(fO/2*HdmoXarA-[O<S\j;7@Lq//P3f!j8ijD<=a?/eqH(A=2+eS02(s(+BuAk*\57#7mILAJ#?c!NC#_&2J2?Lj*b\TE,fN(,%@Abf8mXbXE,hYb]Q#pgWZ,C[G2#2o5_[UXh]ee;s5J,:p\i1[jM=[<Jmn@</.RW;/!`m+/?F(c_V3`Guk&c3oI<MbMn14l`0^/0A%!rBtf@DtgdkT>+VVApFp!-U@>[Tt9iK)T72N<=k!"NXS&KH(5@E;o"Jk)bCLojsNYIE-Al,WFpKlkBXIfWGW2=;$!)g$9mDYS4'j%[7l`Qs/O\R7FT'n?SO3N"fc"-jB*6g3E%TOL(+u1_.Bs4duZq&j,1Q\V,<Bu7a_m'*ugMI/<\pXZX+^si&+ZV/@M&p:&^j<&@._.%UoLgb`_,WS0T<<2'UT/?gM-iGJD3$m!UJ]R']61>,fpJk%QfA1lu/k^/-q4'eI_l)a=(Jn;:+MIqJ92g\>j<]1^FgI_pG[$T6`6G%Js!f.6V0%i3"7<+R*lX\hm*))aUe4X4,&ALFqd6F%51/@P@SJDZdr"#k[!l7f8h.a4f6a$d+3d6#8;'pLkh\!.?ua.\f-2P\5'PR%)KL@^k1+fIJm/pN3<ZRl_bQk0hHH?IOVHG$Xj%NY@KcUG"t>i["O4*#_rYV2/-:F]D7`HO+f/VkV0&f<II@.jn:^oc]i7>s?&Ws'%eG)HLFqeA3/Vfl>YWYm=9I'_AdotsZ8^cs57NP"Z;+pFTXbW;Z#FY_1:!k,SQ0,2tV-&TXEgBCX"rqg59Ys=l3+8$a##0lD5\42"%ApJ#5`K-HM-Xpj0,ka,FP>C*b%/D&[/sJi!o]0kEV*UpjXC.cX0Y14J$NU`raXa+e#M?anZWA+`gNQNuYagLlgt+/*Z4tq/kqiuK%*$oBf'*]nL:Z*YVR>P?#fLUoX!bH%/ccRN7IVNZQiXMug=$d"HaUjTn29-.mgn<i7';u?8Jh%fVi^Q@s'<s:1=[jj88*FQQ.gP^[%'Tn2=.Y12(Z),F`E9;J7M87/+a@U/W&9-8JQm$_!8V7]X1+-N:/qGK^!L?W"mPPSQ*$oA+&pp+4aX;&79HmQEAm>pkG(EshTJB]s%+eGOW^.Tr.S&/=Ri&fZ8BL&i5,`c8Oi#CKIM?$B"@E/pi7e11CUm)4^YTa,Y4#VgRE=amO"E)5fL'4.+PsP+AGB+Xe@B>[<,(94h%B9`QH-=Sg)=<-VKPApFJ`=JCI4+SM6*ob.A$4OR>k9l]::_L#j`*#SZUJL)e>;ch-f^QJfo`P?4D=mU;;dCUThH*H/`+T,j(Jn2&%(b-3%?A\`;'+s;kg/bKn39Ia"6pPaVXC7,2UeEu&O4EQB%N(!*mQs45(-)X5^]Q+F/jS=t:Q.[F2n6H9,TJU40nUhJNf,$<APRoG%;3BfoC^b=3+Ct-.^>l>8-+Ihi=k[o3"lp.T$3m91[XO;'_5FLimAL+_:;i!86X)bU$]dGo'MRoDJMef0ST`G4RWG3?3MkC>fMO?)%Kqg"RYV,=A"#[!A7L"Tg4/Ds>$3l,kb1Z,V@pRec8(Htf*K\Uh%+nE2m9`J`YqGFB"#\+M3RK`r?tlgbNe2hJ[Z^jFSA`"GUQ2@B%a'k]&j8h?BFZ6.NQcq@l:@kCd22<;7_4'bA*<jnq69^BOBh'2Bfe7EKnf'I(Dq(Ff:Ld\a;+K1'kT*4IG3aZ!"k2Sca4$DN46]#T%0$67hgNhA\!BUXChkW11gi=>!dZ-@bZW6B-Bnj$V0f<C1(3^\_dZ-AgAj=ls]2:BN7LcZf1tJKDFeE?1k#u=SC51E?6"W9>F_O>d%<O6GD>&LNhJ;t'&Ho:m[VXo,^!.*6N^#[^=mpriTlWj$Q81,CrK?bc=79V%=bTfY/0IJ$7E"n?o`s)kuDIXVQOEuUR3!lR;PBbHB%<RX>sh#JH5;@;u8'%.(VnXq[th=UrsVhUcnV5^69mNeSAcD,rbdnQ)ScK.78eUo+!Ak45<`.Q@&VS%n;aq')gK".D*FM^m;l82Gr%L-4Q&5q4,>4P#D]ODGP:^[r-$V^O(C3<sqcF;!".8+CZU1lcmKcsl9J2=Npd%'&p8T%,o>0WJLgj0Zi9H1e9/=j'i\MObMHm!^V$%<?30b%.^+2&!HmM.41R:DO6roY`9U;`IZ-uB#6hU,?(h,)(1IJl^5sk*\"1#`n;TQ1t.q^.9OV!ZU]Uib]WW8Z&Vu,H]psOFj+u\%\Sa-1bWU7t=N=ZYNs*p*Qj&Ei1"J.IfhT@?Zcp?7VI1EcR6;0V1X"Qmnjp!FR:hQtl^4nI5&(n8A*2Gh_%b?;2gM4'Ng\U%KP!!:%R;d7&U>h;C4Yot4+u0>N9P<Z%bnR6h6<)CSA5"emSXG(PbW'sffKD!BR=,mQDf;i5"aj-Nk1&60"PXAr`bN]`>DZURgR:^d^^P:"%:Y<IQ9kCD=68\?`P;)8fW^kF&:<^5EIDmPTp<8869T5qlR#DJJ.%2Be@6N).8NUFQ7i5Al1&[D]RqM,Aoh:-HB$V`=@"qfG@0:S=%[1h,<jP?o.Y[/YWN0,!e[+A&g@'3_J6hKce,]$kc=Z^'*7rdR+7^H*\CA0V?_j:"`BC.Elq$o.2,Eo?_)/&>iocBrh\!a\]k$>>;%&:6Pp)`BCp>i,k"><BrNLqk'QM6MQ!k$0+shW(nMXR("d!XsNl_rhC&4e*^+gJMH7Ym(D;3*Dk4i)'9-][*hUY"2+liEoWK&-P!!%J$9>@QD7AH!1^hkehDr_,rq_jGifF)LC(4u(fS"j4EEtGBK@8"X:.TT*^Z,A$#[7hP_L0^Y72%2VH@FCA-R13S\f2+ktal+P<L5U%a=&C38^QZAq@"1AX<DaN$V%"ZehBRg>_HNUj+u0',%m%5=alOp#CVAu_T5c?A0u`aZrk;KFcnTX=1p6(C'Z/?TLTpC#T!-1<#)[B%W+\nb[]O&+1(e8kL(l.S)9c$l-B^&lWtQb7P@TV<C!G`M&sV!F)^4,qfd&+5$C\UpTA_=pLc^6Z^dAYd1tD`:@#/R'WUCC$E2@7.%1^&b]q[='IMIe/,G0kHc.BFQSW$Id&T9453'smHVC%STTD-KuidLO(+cr`@0f>CLd2t`D%AANDcNRNsk:'mZ>8[BOO.s-pk$'L=R%FtBh[A1)e+d]lfj'$Ekpj<&\bi$GaNlC_"hcrd8>&\^_cc[_di6W[fD>cC"a6bnSBjW7A5#$7MlOq\NXS\fb;GZm[ZP<LAjfICKe%8^cfEhRF#-@E)=PnYkRXNMRPi&!KFt9argI(0onR3"5oSI;)NE7C1bpaUS(V4,*KVn?e?h-[f%DYuT"O-:st^ea&Am[Zs-@8F8`R%90IgM_-2$%ZIFnTK.CIOV]c;8SB&,bbt=`V6'A$R/C\1gPU&KXo:/RW,*l>+Os^4Ulgj&e*,8ctnC@u,5m5::[[(r3WY*7'+q#2:%O@':U&'"f)6*W,dX-4f"k&c3k2LYk68J3H>oaq9%a=:W;8^cfEHCa"/*G>^4QHn)tFpVBH.9Q0Z/DCk?l9l:gE-6'Y1^'n@V+lZt%-nISSnq4Zo:1:@CP22NsK'uZbI=rS`@[41K8^cg0obt\hT[AO9pOfBeKc>c_KV`j&LoWED[mH2\fCh*t6OpV"(*Usl=E'OQ$pdGt%`(E)-i%C!8QeKcKnAFNd+!KQ"=X>W)S0^o/U"=6(Yf2djC"08h=@ULe_'^GRBY]`t+d<Cgqgp>l+^fU61;p#!fj9UX1`^`HF*5R*%`0e\Fb)E-+PF.U_8Y]qK?hgWR<&725<j,G6XDOOhLs5E:j+7NAi1f5NBh5K1O$m)2<gY.d6/Q+KYh7Z7OjoEk=8G%ghI75)`,_"t%q1i:o"iq60N@.<6bIJ/m2GTtqK09H$3\-_'Dd7XCE(P*33.B7`KeOju_B?*Y&g=@FYYuC?pD2d\OH^S[VooemV-%.;1jOj?#PdjD%<'0>=$e@4$*NW=1\:4VS54BSI8=[b>/<l0iZlbau-:r+%GM"@g_YYdiO<dDc+apq4O]@:H9ThmFWn1:;g<'siUXtI@[9FrR.;]FI%W<;=\!N4.nLs_;n6^\(Df$nJ9m,c=W,cMW5,Iu!V;T\Hm2UCX+-=Vh^,\cfY4bccN%oId089K&c+rGdD!4K`Lb,.Y[+q(QLDOcG$%E4[O[7C1oEl!BMqQI@PmU"9Uj'.aHEgq>m<5Ta,TX>icirBmdIF0.<!9>fc@ZO;cO4J@uO#Jp(PP7UDlJ-FP52bl`UHJ#)u3gQB`%q*EnHV_FJcP_k-XA1)e+d]lfr=sln:J(8?0r"/H$Nl8'5Q!eh^0%a?r&Sl,H0sY'[UN%2MX=/1LX\c)U8eNC@3l^ZZhX\r[P+VAl%:+''S9.VG^PCMdRD!9MJA'djNJot6N]3j-sjIn0m82g-U&/RqrJSW%?V]fGrWC([i=D!_,#(;8t?l&/>.BU$L.]!>PU5tDR:95(/%RO!ml<NkBQ_pGPI0m$3;KA[Ef1/iDd3JiN'"3sOm,e/B;;(?P#?#<ik'2Fq5KO38=V]^eQc/j))*&Hk8S;Q]J*&3l"N..J,VCbP/%Y^Pi<"N'3$_+Id1U;1[5'T=2-"lPmV\=n!V%c1=EM,B)h<"-Tog[JVnbH^B+Wr_-0fu"doLme1XO2P((PZfaGI.Hq5%`[F2d5+n?%`YBnHBg0@'G4;nHAMaPVG-I@aZ0WUR%_<-3L"Ul4n=d#+0pSTB)+hk,0e6%_7c3Vq"ru3c6i@SAdTSgcZhE$K0X[MX/'oZK0(#S>%cTQq=i2*,aY6EO<47"@47[hrb$=!j#Klq*"*N7X;qY3j6G(.5eJnb8?H5c+tN]O3&[Y(Y=j!N`HR]oPF5E0fS7ieNGH9/@0mDRp\%AqqB1_t^F$ZSnGq]!S4Be-r+5C6)eq9oH8blmN^"H/&8'[,8WLF_O>d<AX(FZd6.Wf3q1c[!sb^4G@LA-QSitQcK$&faZS20Vnr>%aA-/Lg//)iL>1TTT9hBB8&75<mPNLk*Hb?+NX!jbl8(%GFkBPFN;%3nQ?X=sBdXq"3@B(WD=8#O,^Sf*(rjVIdcBtF)XGh33iZd:%3C0*4*jDDISJH\nlSOY`:il2KDC77'(h#I<;`]n\Bh'2B3T`?2A!h<gL,in13K8/q7ibU9PnHl]__PUi_6fLF:1KjW;$UhGEBi!R%YYd3n7L]^JBrjrhl9NTLSX&s92en*)W'N8:h86b1UQ2@BgFI0N@H,dH8&8.D%G%&fFP9:kC3F*6Fb/#X.E@sNF4RIkYqGG!-5Ojl%gFLZfdsrGBla41N=I43\;)S6]YHhd.X/q`c-(Ntb_Rd+L%b,;M]`X9'K)&!!*<l%MiYl@PBrjrhlDU/2j93Mcj8h=LVFEa'p-4D5%['Pc29g,pd?-F/;r%<l/q1jUl;coB0DA1(CE>U9KlsYg_@132BS&KUYpaM0N*]N01'?4Z:>H'&p>kluMFO?CbLm"QRC0EV'5qpQB%DIuAIae[=]B''P<n`$]KVI1E#2cP(@=NAW*#qId;h=<_,fqY(G4Bh+<O^K1cD(sESF1&>EN:kCSHaLd%O)":D1DSIqj5dhh1_X)G%JLO^AN0?b`F\HGFpTC`\).np4l^7#)O^OXB_orgrA%$Zdp5#u6)8ba&?la=E@'3_Xk\&cVl^5l^O^OUa2rfl=1"J.Iq7R05RG#n-%$.^j&m#b\E\[\'<CpdYZU"2h]Zu!-XGJRP?m(6YRH[F9qi.K`=;`gB<6tWO/bZ&X!6ZJa8,]$kC\[<f$@*YW)eh^AhCF>'eOFD&?%A&^+flUlT6@]n5$.OL*4d_KC0?m]1p&S@4$<+/rdBkOO=.+I5,_":jbEA;$8jt5t\B*#kk4DO>P@Fe3+^g(L=K_6C34)=S69=p7k%G/=IG3c"KUQLDZ7g'J^cC"=>gekR:*NOKeM<`t</ekXl5bd7#1[sUtpet25op(V-+.;8,0;;-8aC$TWm72qE'N:*(tC##hYqJ-u!%#1)u@$?hU$g!.'lh,Z/i39O1??S'u:lo:#jCEO91e;M.)$7g#qce2GEVAVaq;J![MPE"$&3&h.\gKK2<5u^Q38J!Q>(kYV`ZTD*K%bbWR(3jFQF@?`VELF;:Ne0(9mXh>L/D(X9fRa.Nj*9FT3k@Z<2SKulShdNE:p6m:q8Y:5Z<\Z+#P",JOf5Q2$?dJMonI(>q.Q63.%kSOqt.LY[sCn-5"E,9"7S2DgWOp(<<Nj3co\<:ALI>64-<Q#Nn8^cZAH4>(BdUDb.[:!fd)3Le=ec%Pf.'MS\ZQ'YeD@l1]#pN[`%`a5ts1[,RV`@<+C4A$OjX(Oi&ou099F?\%\W/cn3?QdoQP^27l%tW&l"a>k_:.)hn:lCTJq+6_koGr)^/$;/@U69%7I9+e$<QnVo%8Y^dcCHO)NL2O.+"03.@]@_'0**sqr<e$27pR4!86Ol(KYS_=)X>EN^,Y0u9Hp,/D8[=ODbNZqp@Ys1lC%;eJN\lZKD$=-:\6ul.%R.3UXgmb,\d>BL=iWG0Y&HV2j*Qm&NQC0"d6/Q+KYY\-!<Kc.5cUg1+MHOYV2#::e2YF'U5*Ph0@h@[#KS@j=Gl1$AXX(F%[8@i?%N$t5JS0tI1@?_E0AVZhng6'l/a%sjj,\*$o-!$5&aZ&i/:2FTD1Tn7b0+\7Qj,c!s(h@D3-,B$^4pZ,CBtDR9i%iF;:(%$FP(k(r%ETD?k6Aj%$-3Ct_1.OlaO>H`dNd<Yke(;'`/c(1<?mG_8!?><Vn/ug4CDU*W<7*Z7!R'Ho9.5P3ZBHOqkWA,F[ab:J,f+mE]fnb*%*Ea\i4@pIiX'W^:?f%F*K=>XV-(&IBN[m]j+EWEN`Fct=`:;WM\5HntW_%1C'F/c9SR?R12@JM6OL;'bP&4YDgWb<sn'G\P-OnX.%5qNm?^,7jPr.3`5_H%1*&J/o8Pec[BCI\a>$#\Jaj=jt%'gqB0D%X\1+6c[?,TA#)0Zj]sXuiQk/$iT.2*t`N2M;q9"lBZiD3BjU%ZW9[c^i3Xb$H7%L+?-5\lkJSsl`;@/`.[?\P)bK1dP;+I]rO?/H7oC?HD*'L<Q%r@2oe78OD3T16PLng(kJG0l_P8PPX[rj86uT<%S#K*n>KY[2XD0X"9C*ukPBZ5sC#'Jj("_Bt$?@^J##9J5=$nL)&.JgpN(:%@L4Jg&PpjL'ZFQ1;#jXS='F'JOb8C\>o$OLJ"Oo<(%'J#2q7doi1[djO(_a(3+cB8?`%r#Dg$[6!q-Z^[]qRX5g3"7n+$GM);mhEr@P5M!AYZ$pC7]3sKP_@`;l!jkE26.F,SKs3o<NdRc%hUdk`p8/Rjl2AD!b]qRa6LW84BAkeX5a[&0MH*j/6'<?fdP9nS"Xu`T;Wjj+YYiX8K:p=JoGOMifZ"^hktNr<>IaHW?ohiP&_]*<%([?k`!ScA*'8g?J8S6=nfI8A\pVW0(bcj92ZIgX8V+K,!?hN.>1OS<h<Sh6p,utk1F&d/58o&:KOTS6ONR<gim\:ZpoM2[.+=@T/%%QfC'*G+_o1!,!nfj5U@OH+-dQ<6kE-K!21gf@/maI:tl@&^i1gt#l+LT!5%/TEQ/HYVk,_Fi!"8WY(Z)"[.^La5(HPB%sM0e83G%-NDHYe5f>k/g#Jq9l1`k#,!$7[K_?b]YO(e&>p[ZI9Y#p/3?G/K>,5u@5o>g;hFqCc:]oNMHP3=1jW5ODX/WW'qVd^TeJH2$uZYL%D$:,2G4E26\.GP]#MdS,@pEH];%b+Ln$#_mL<4IMN`]2Y-\FTL^hL*3=lKl^Rf#OV@p:mCP^%ZQKuV8W">;*YD$:-l+q&<MYFL>t%okcQV=CE3r#nf7h?ng2d;CRdaUsFl][Ye4-Ou3#j?AGt,U2./E<#7o+JW]dIBQ6u$lHiRQ'[':8r1NM_;]+%RO^ohf;QIbdB!%8m%dD,Pg,7cp!Q%5;gVb*if(rfPEN.dpA?om\N!tToe!c?P/Ql7RrGM#bH'p=;E^o+ChmAL+Ek=#HSalaWKlmS7pDm?4F0(#U4C??Xc%nN!]RFqdXIQfDdRVk%q&k+mUqalh^ilmS7p0<M.W0(#S>291u&Jrb817B[ao$H?#-,;*o+`4E=NNiLc*:9:8E%+nE/mn($c/B_m<%?.r-\C(?YP6@>Z7&8a@]MCAM!3K8/q7ibU9R;8)FW#:&Z"pKJpdqL0Mog%+O3C,iU4((Rp[!t93`k&OP%b0jp7g)f">o^)D@!GmU%o8aD/gq^M.UQ2?W[9'0W/d$829P`U+V@BWU4R,2V2G/h(pMAZ9*<jp\e1RZ(0(#S>24J_@gEt2,e"jMo>B_"OdZ-AgAiGulSCJ*\%OYQ6qM5N)qo:uHj1"W\DW`.l]c!a<ALQh%&=I42K'1&tXO6ni#MMHA@1"AbR'_`<=dnVr#o:ft`D9aeH^lF#GQ4g*`Vm%f@Vunp?%4I'cNd#;Ou1&[4H>lhWmF_O>d<V&<kihJe^Nhq"XKN#$PQqfa-5g>.$^=$g&lmS7PP4E=g90;E(c#K/pG)UM<N,^Jjae$M`[%iY]%=cHB?r+"QDr@)6f1rX\XdqL0M26^8l=01'cfMO?)KnD9BYV,=A@h'a(Rm]S,F-Jm*%&n25p^ZsB`^u5t[+\AN.^mc'#W^?Ia8^"4%KeQC!Z8Uab+tXRe+jGqL1",Y1l?I81rkKaLo9(9oR)`%DMj#4kBjN]]*t3;)3;LBea'0oU(t(OZ"JY'6eFD,3%u)nOn"]+.1">aE%aUa+_c^HO""m_T"jGI=cP>20Uc3VuWQcU8a3[T;P4YRc>REOq/@ia%1fd"L_AtD.pXCDGn'jSS$AtD.pXCF^YHc0%49X@6JFj/i9%@u<d8ouo7>`)t((G4p`sSsa2O)!dQIR6>#\B?&W"AZK[Y$g'K/6\5cLlI?eu$kj0<INGHseIN@_;>Q3/`ZqGF7;eri(Ibb$-5.9^%G`/'`'%D5_lGjO8?=`"*s0]L^dS!EW>Q(@aTUqJs]``&@2eI@^"DL*Y"*-Ko_OQ,4jA@Qt*REG200qa>H>a5b]OfMa;!3V'hA\hQ%4?D,%o?rA"[n_8*]&BibhA\gF02Ho-$>a<=_Yi8BfuUo>-G:R=kRG_22_5pI`qd<eXnNUkUc6<(Ie^EJH3rm%d8eqR1mM!oHCgPi%&OCVP+8MD]gpFVOHqA%p(P;'<bT"R.!VQMd9a`i*7U^R\&mQct=uaQH_%mJ_[PT^uduZq2n)4t\V.6?!Os!WM1$7eq_Ffu\oJoYo%<Y7tU-V9MOG[:k""9BnI_?gHYG_5,?#Zd0C/*IC\Nc2ep/Wj%>*cW)"f#&q99?/fO,W"XGlkB[$N@CDI8Uf+N,op4/X>EKerBmdQ%&.7>m+"^TpQa,;Xe8sXiI:WVXLrO."Yp.(7<(k:&P9`BV47!XcHTg&S.7n^2B-eR&`N43F2#::ep2K0`JgFf-?1jYk>Yc]$Mad1.%@OSk0Z=PZ;3"7n+<MRPeRKZDW01h6Rkno&GjA]q18T)u>31X0j/3caqr'R[HIdG_D7Y:-@$]Q`b#@VlnmsHq!4<r%8-EhD-!nOu0%'!c!"8Wk+d*HhdB/[p,)"SkW[QXjnHZgoMXoWJ%,lIif%g=/)aKu"i#R>'H,#QSg_+usW#.b2ZajFH9;NsB)#.h$I8T^/g\)"^nN%,!!X35oUu/Nbi0j=A=r*hp>jmDPW:L+U$QY>8D&23sR-H7Aq=ESO&Eu4A]ib0d<^ln2Xp2AJ?C\Q?8)%DK<"Q"m%G<,NQ(=RtMI[%3KnCF0q?VtBC:@K`qk#//7Gbb$+o(1:A_CpDp$->=Vf9cXdk,rl+W_lXB9A'j9C$fS\cLS2j[j1,sgllYE'5c7ofq3R3[dk<Nf[k%Go,gfeu`cngb>+)68&GY\;Y"R=-iM0E>il53OX^DmM.73Op!M&N\G.(,P3`BWE;CK,6YY+X-gklZ_Y]-o\)YhAU>B/6GSt(]aX=E%R>h-pT#!MJGj[dMb';;bLe[:`$">k7@o*K9QXNJ@o<CL05I+;+MNaj`5P2O#`3X[(/fL2bk1b[n<aSmTf<L;:as<a%,**Hmg3Dja%IZiasI>=B19H-j5,Tc'O4uF*bX+[lUP",JOf7%XIZ\r!B_.%21+Eki#f;UVHc4D@CgB+E]l_7N?O-0Y9P)_8$Rii;R-?[aWMG_Ug%K:p=JoGPq;[:*oBo@I.t=Di8d9NjeA\K/U!ouDC<XB`q&i-=KgAs-[/I>=B16E?"ga\Vc/'bRL6PpT(tJ(8>U--V:$bI:kp/!U<6%bCmJGCb&%'2[U_I#`L`tpEQan#mu<r_bOX>'hXe1'nu=[l9n)r8aIciPBZ4H*.81g"fu[/3.=jW:mmtAm#m(Y;`M<)0:i0,KnH@e%dX]4FK8g\d_$FTuKmt%:dL\CQ%O.lS"O+,32$AH)A;cO904o52r*5S7`%YKu\Y>\t'g@9cYOM4C`QL*"!g2-#d"#R\/8qVIi^Of'%cr8@H<$m;1j@hmJ/ZdDg5Y9Eu@EL@J)#Z`JGuY96OZpBR8?-l@^t0WH7'FMP%qc90OkT9A%V(>3`JB-P!?rgu"JXRj4qefOd,J4A%Z(iLPBG3,s!r`otGa^6iD6dc/2fUX\f'A_r'ur[e@Dra;nBi[=(b#*HG3'N+&96Js&Kk!rJRIQ/MGm4V]_bG;",@n",Fg_c)1;QV%Z&ca@>?710&d0ReibT*:n/.1$g&rtUD-Vg.BfPEb1rkYTr1L#7@VDb430F>$GFB?sM4-<==[sp9:["`mGA.q$Rhs/t_,$J"f/pN:%Rl`"/JBRFm3\C"-A)X4LM?#b[(Wb*7%nQek4&$+t8"2@EM7lX+j:aM1J^0YQV=Lf"^:FlS[+SjoB.:9I\DX.ri$;*W"r*PD4hOlV%As?a/9o#9)AJ>S>fcnCoRLCQQCP\0D.AK]&BNmQM+r<E!r[&1->*^U_>j=?^fSl=Uok]Qk*-N/+]P(%WV1_-58]21YbiU\o!bJN5%`'?oCN+#9$X[4@q^s,E.7Bk+,EC*G4VLrf.+:<EP2'Hua*WAV1*!fE.Ql$0UO?rq_JoBu^b4X19Ooi%pe&4NAZWSLm5=h2iWb2pN%2&p=O"_t.c`!G<">1B-u:`6:X/b;eD<>(<4V:\)_@4+le/P-;YVkcnl\R^\=ngJ)Al+R8&@1g"eI+"^,FkO4DNXB"?Bnbsf9W&nR%i7Wsk&6h4gR>Si_DMK5I[KOFp-(%Fhl9NU^[[L:S[t,j?*]kiFDEbKK5-]h+[%iY]R5SVVDPoU)7tmq4c2J>LV4D_$k!\/Eb3*:?%m&2W"?cn^C3pijJ29.7.d<8`%+f`SC$Bqg5@#=;.VULPdWb*<0M9iiCVX.ngq8Z->>F8#Eks3K:8ktJo_%#$o@EQ?h>_;4IUCPf?%="3YZ/<U5(W3Ct7jM755Qqfa.W1)Q?T%uHB/%<gmeAk39Q$1T,RN7*-/A1ujb6'nNe<h%g]aRhR7ibU9C9ORh_5C+>.:Go8-Kd%u%<8'nKC:8T:D7`Y$lp_Gikn6[f*He#ePGQ3]AePC8W%b?m>_;4IUQ2@"Cp.e14>o4c1:L:2>_8rfShtuS29H;?%^0c#NWP&QlZ*nA%#tONYF&C0r"kpor3XR.g+AY3\+I-m[O#g8C7<=o?J;s\fJgI"CPg3,gkfdPcFFhoNTlnJ+C7+R<)H$n)QLEF2)S9dTdYtk^8lJ6P%h.]D+S4<ZMkL`Y45Z-dD)3QVD6eF:>Q#IcLr47f3)IUN<NJA@6Q^?hH=.0A+PBbU!9b@1>nc0[6&uVHg%8"E.I/V-"b$,1Y&tO3g%a=r[\_E8[)`6X"`QIZBtW%KY9nUUp\5u:j<CA;skb9fU`O0bp6d.jDE,:Q&U$TlnXnr#*!+5h/!ol<uU]nrmOWfZ4#=:fEl:S<^Q%#<iPYJi"!ib6B"T*A<D$#c)akNd_8`n`&U76^m2_`+,b+`Q8XF1bY6<%u*,OSGZbcoAKMXJ]CU-$^2Y@FhDkfK-AKld"9(EL-"0P%fuK3:_3''HO.hTC9R\[kH#UpX+HN4V[nM6)Uj93&4m6IUj"6H:$n37!Pmi*IeF@S6:f'9+1_7<tX$#r?TT5@C;^(]KdQ@bM3B`Fs%NgGXN"-4SLK/7o\*^^r$9n"d<0>,`aO8^oa\!C*2\Nd$pC8/2(7k-g4<=Q(O61"3iqDN$F7;dOA(Kn0*9dUM&o-!aPd+b59,<qJR%oaVELjK4X&#5(*W)hYd-%D4O^D,A9jf]V4Y1oU!J(KO%4R.ChuTC'G;)g\22)WWbhi(`["TRjRGH5kB2iMQ?=:bN>gT*N%=)L1SD%[m<1':[a:9JX7at%I3lto6UjW,QAn[H-k<=J[\=!_m86>SDRQ+H>bN5H5kB2!O9V=]QNrBb3_K`asfUYcV4#16$Hr`q$XIRA(0Qu%nc`KpLO<g_]gkHM2iA0KWQeE>'XYa&^,ptu)(u-5YT5^RZ]peKBu$FLoVI=<IME?W]j?X?R8Yi)p8-Mo,"lr!o!-ZoJAY.K@?)GK%N.0`B0;UU2nleE1E3&4i@mr*n'^]=A-rn0I"kB_p)?Q5:]lQAOQC0"d6/Q+K0UUDCFJ^>Z8Y;>kC_a;),\cnSH<i#0?X)`/?L]!_%_<C3/#H(M?'dIsbj]uaD6AcL3*f!*T'e;t@_OqFf0ieJ]%[)qs%#43"&TZN\;9TZjS"RkboGK9]?.Vo*8)]]n$]W!-ZZ&)@"t@NM%AJSF_bY'F@OCElKpGmJr=;W@78J3:A3lXeXj_T3P/.'1"H[UPeG%-`@_C0-h&&!]jUuU`^AJU):+iYp!<LKOZ7#FrUlhAdd<LGR0%WYa]A?&+u&W"uZYWi3!l.PohsS7N>>N4SH8"edf(WL/?Y";_DLC^WeLkbRG-&?Ef%/Au8D!Jg+r\ZApfdTX%(7S)EFVm*g@*#(o/%PgcRl&Fc*h@[;7+Os^4UCBNPCC[A]G9PfEelIbpmLnhU@qn.0=2m?rK9+jXo:`+ORP/M.aVn?WBKG>k+UORNr2=)<dXnY2/E1nC:%ko]I//te60\ql=Mlpt2M"i0c7O#9Ic3.;M#HX2DtJkD:dn9.qEI(@YhC&k%RH^M-7@b+E.*P@<<[CS7Kmd*7O#LS5;Qb'3!Ydt/]%h"F;0qg^J7Dg^-+e4ZLm<mjqMlF:hH+sJ\R)Ysn<Ot"Uh`fcG")tX]eK=3a8Yr0Pp6=UR`Mp=To;g#*ooQm5gjFC=NRY5*qbVGA)%1T5qJN1&,k[]3[\_3Zdf5!f`@2G-MS&i=o9I>2Fn[2RbF@>2,8>\b$.<npq_:bs";;u_U0]f<+'bR0Q00^(Ub']uXk<.aJ4c:TiM%MHF>4'/Xui53IFr7Y+gOT.NY<^@+WJHLq4Eon/7tj+'d#AJDU%!Zp%)7O:Ha+R'_q`ID5OLa9$$=\^0L0HmCeg(![)_8glf;@S3R%H_E0mp/$cgE#r3d.G"&FSS4OJ*:WZ-COF1.P9`6RK63&\;fnl>q+7-DA8DsdngJ2DY5/Q0K@pUhV<*Y"'8D9j6Z\&L9l[ur$<aTP%dl7dc7c7\V^15,Z&gO1_dP4c@WW8eaQF+S-+!HE1=N)i]L*TLmU"9msSb7uMV+??VGSgcJ$uh(]kS-Q?3hj,B?@`:<;Ge,5A#hXF%N&4fdPs@t_$Ak9!%D!GX]#YrT`(<WBFko?##)CWOMd;@Q^s-!Y;TiL5'>EK"V3VLG3"5o3b5c\T*Qq6Ar1FSK0h+M;Q38;JpA,&G%FC^Z@ek+<R?hN-pqH/?]8M2i#nd01OJI@ad'WcKMaDu`poeJoFGf?t.:n!'&7S/2V8]OpNoI[3O&4pK^B/lGa74b^6,Ye93fC3WU%DXT-nfuY$KKC>+6o]JjTia[s?7@#H&e&H)-=:^>!^13R&Or<m4Fp]`'ej)/<P2)kZ8NO;;=_X$UqM/BEE/S(=KO3&YSZlKpMop`X%n^^fP$BYMD80`nP")^i`PF[Bg-V8d6GM"@G=9\jS&d/rE=2tRlCITc(3XQe=X$4FfHL6\hB-l3a\ekZZpqc>5E7u-%$dM]],K0pj%(PSG[=E(-U01h6odP7&&+%(Xqp0JaaLE.>1=FLf<H&"RfpeD@^AIs]$k6h?nD8^2Jo=jpeEI;XkV%<W]]6uSDF6k0lp::_q"f4-(%-TN#+Wc\nmfWdTVaci)SlFMW%XJJ$n6S6-?2H2I$=^RYPe1ltdLpQYC#f=>rohAP.Oq\.LOH-Tm##-;`:\q`"A#kD3QBS,d5P3[V%MNV__"f')gppP^k%5M0"m[LT7**P<'Eq,#uf4C&>&238bCQ5HZA0u`QCl;<;$A5/-5Q%Tt`AOJlGL6bmO/^ad<fj9O[ICRsj_u#Q%iJX_o4-l?]\O#+]Vm+aWMBqJ77A"\L@[40`8^ch[I>:YZqJgE1$.>tem\-D14@-3)HkPFlUNemUYk2+A)g.F:<RX<*"YG;!F;e$`%r<O./NjbT^g>B_H<t-/b"@5q%`^r]IbTd6OC"l\dZqCoM'dQPbE#OmmUNk8p98Il?l$DQl+Ai->Lo2A\0TJuW$#=d<T8"Og,Ul)Q%JXtXF6Rq'#nNID#^.Qnlg-\@6M#pdG3s@((DM3JpeSdDOS\Bl>$=X23duG*'8si)Hk_+8W2m)CL:^8!uj9]#G-'0BW8*F"hFs>Br%3<)627h'`udNsu#oHR=W_TE3';YT^#4[qe/%FGqEY-"4I,[h`;ctTAiV&L^\((%ns$&@*%KK.p=*d+>6j__;%((%ns$(J4J+\<M/%nhr*uQig.546WW9jo92bl;m8mNURUOGF4j#)mWuP[lSkIP;O0m'!f+pG@ifU*5e1aQuS;^gIEQhWhcXYa'QA2%!+U^or",*e`plU%?Xn^-B;%UF9*f>p2-,=snj*eF(sbQ#.+MCg+``3FV4*mIdg/f<L3s#2_'l!dPFakHhtf/sV\,Xu8e7Lt&.>WR!h2$a:n6CdctS.]%.%`+W/EeBZCq?Frep5e6cDu\AlNN(Jdmi(Q_p@sWBt;I7Bn3_23.DuY6)hTPZpEMLXB#!0CZS:/g#Y=Q#_n?9MTOYAHQP"_L/%ih%K@/EEcle]%oMeIkdqlAQlSFSF2IOCIBWu1s"EhLWc9jr.(#*hNdK);P6A(r"dq#F6A>iIH(T<q#6?SX`.M^O+jD7(0Gga1WB%Y8A%L+&?K1HT%8c\>IK$,dN4;Nf>P^l)OhU>Os=@Q3e^p(@^L<hYSJOge_t,fN'raBPUWPOpGE,Mm!/E@f:&*8.;NZJ10[0:K@dn5cUL%=RAQtCJo/R8]MG..%#5]2"HfgGCTm(*S`H3Tog.&*"7fhBB8_+TTL$j*"39=Dc@\bNP)38EJ$bWNuSBj'/-:D(`I\#k,fT8(f\-V%NP&91_9fuM69,V_5ne0:f9`1^[s/Vm6R+7b3#EQYfdgCcR"stC<MEj^NHs`gH)k$:1,R7A?T3'+dUlLLb$\;dR>Oh1<H1P\Q3saV%f-.s<6P3_h"Yr71P`#gl4IE1&h%&DFhk.ub\iY")kZa<X8fL8A['A!0+i-goDMKQFh5`kI&n;-X4V$,L@[0'ZgTQ&YO9BLTY\UAH%CTWWK>BSa5'"k=4g9E=Rj)F:p+Z/M+;;$)3_ld4/?+4^ild^,F8FVeJldK5Xis>Lm"gcU*+XjrGCtK2TZ5]*hGb_ujEU13TW9hO&%`s:ZXdVd8ihQNL]P3SqN$(b#S.%,#C&*$AZ:Mk!E>uFSfP.62EgIe"[9m'R`!unH!%hL:j(cZ#PL!n^VY6:@lEcm/V4931J.cr(d%P,$=%)ph;_#jJ4D'LT*qW<LhNB8OK+#EB%0LF?#6M:0o>H7rHL/a"RlSP\5>0a<n\:acBX+Slf\k("2hUt[mM3S%+@:%fgR.7I"!%"#7[NHrk!FXp:ucAn-W:&*sq8ZIC+/CCunNe;H+klcjcG141o"5nfKU`>/c!!gFP)/,b23E0ctuDW1aE#pfk!4!9/H^+lm1$\M'o%s%IV4n)Jt)5mk/`8jkdYbFA^uRC6CX6cq"85n$`(E\6ST]%;3/#P+b;kQpql=3aMk,P;m^%)`E%+Z:)cJl\8`+Tc]?-RL.98B04)%0&mgn)Q/B'6Ve@@Hsm:7PW>pG3+UZcWg0Rr.nE)p=?@Q.$p>n*'FgHL67/TiAg914k\A=Q,-KJCe<)gX?*MP?Fq$f'/lQd!@lK.U%Vcq29B>e@^d=63b7KC%BBtt54D/^:<08SS"'lt?PZq)k'i0gRqO:@R-o0Xq'j%\rQCm>YX5"HdtrjnT_gr-KrNtoZ"$o+,#QdR0_%;18A6bTR%.h'XO$8s,(771>ZFp:8W7g`e)hhjEtZFp3q?@>V,9[Be`#cHbZFE<=Eg89H^`@KiSW#^aSo@rNm0.nrC"TFcCWLWK#$%?4i)X-VZ)))KgSd7b:[N=Z9g'+0j6I>Qc_&9]9K^XfST8/93cQqg60>X'5gpcVbE$QK8D<)_A<BW84$3+`]]L=3M"LPDZP5%4,4q%F)BfpI^gK)E3hM`@bnp;S:-=Jb(>=ucKPUZ?b1B!@:VBpaU*;:7i8%k%U+cI).h-u*-juSX>J&o>1BAT@dXu:AnamYKL&+\6e6[R%52(2394PdMWL_M#ie:TSS-a@L7B)-+^iG+=nqSf6_j[[4B1\,s65Fp.RT+YlC02Hj+2C<;YS^Sj?K@ar\pcT)HT'n(E\c`=YTVK1%S3rTJV'\YUaY=Q7B#KRs1<9214%65!(!5ZSbSG@O?!GXo2)g-0']FYEVnSYsR9G(d#fiQ]8cukKkeTFl*3[lefbR*j<;Nf+m<nZ2%a%KX.UrXY=X@g_eD8!+8bi\UB=Qqasj,(;UKB;hIg551$(#%<[K!T,PV^'.c;_lu$fb^uXe3jSr4!"S7mObk@4JW8n)Op+;E]gR-%`8YH,PDZP5%GQH@:Vg)#_?bc<SN?9XfYS<!8D&O(:):hoa3g,\b+J@]04l)uaU!598(c6;*n!H?+k[g39_+'D8SO@X[A`DS5hf6W%ZV8Ad9b-+n?;j)AK#:64jOXPa!Rite;ft\1"/4!I;Ge"V5RapW=)KQg"Nu\/3CJl4Fp]tt)`?mDl??c8.-kq)bAV[g!;Vp-HDn$d%D5`$HlWun<&l;h`kM#8BF7LO*0OdV2+Oeb-ecX6BPH><[\EFHC]Mp-9WklP/]&kmNqeSE'^<Np%jD_["pO/?Yje3fsE<=F<^8>(_%*EcEWZGI[(&SC;RbDL8mB6/HA@&KC"84>;F(,K4_k*)iQ=:l0=6eBLZ2i[BFaV-WTeo2<&0';+[iq`ruF5j8)Is[LGLi&WS%Q]QQ%@n;?&5n84!>!tJ1`WasX?u1NX>n'oX(JOo,I16@[O+7@Oj>s+^i&!(+&1ak\&L3n.(pe(ci^&c*p'f\CVhc%P+rO[G3T9N6%pXj.%`$JYX_*OK.Xb@!tlK^/mECu.Y9cX`HKED_7i/f3W4D`+Yiael392i$pZ-]O=lONIZ"&oo&!1RCE>Y0Kt%j]e;Ti!jI*/M*K_k\RM%&7ATIf7$>@;!tlq"X^Fp'EZ;Wqa2WN):cg,C8d8\E>Eps*3ch6h>,^T;2T$5_7T/*5m5u_,oL;4V8rp`+@fOM%sP)]+#qpp5F.I2%9M.p>N3:,n$T[hpL7t1E_@gosghF;CXLEB\k*&!UdLL;L;A3YH+@T+&":%(rg@?LXrcAX^N+um.hd+)-$c>qRN,KZe)*3`gf'IBf%`YLso;LRB/0B;BeSEZ$4S"\::3J-f*L]sQ,MTl<3/[N\Jc-U0Xgu-1tL]pid4k80,U-'FHj[;]7!;XHjo+2;0MXb.3-%;J#qqH-U%6`1Oe"K`I_(/,>BRmsf&>Z;@k6k,R^"c*;XqJ)3qmdRpWYUYFsD$S,qZs8,`0LuImS&DTPNftq=fNj4[W+[eK/@\4VCgtKoa6E1(%SOSEe$K2%SJl7$)l(_utmo0rTj9IWh6S''5g=Bic[P"R,E`"\>D(E(!Z!cF%>N\u?g/U!B6PL6bmqb98.+MCgG*mCJpp>L):*\g*%=t`,lQm>XIRUI313),j8dg/fIem3f.E0V!eoK3HSqhd*aF;c;m:q?Y3TU4$STg$JR>)kJactS.]-t=kp/@\4VC`;!8o`8$J1?;#r%^AtN5UYE4@bg#n.q?T(<o*38JZs8,`0^/CHIBGn,H:G<\)*3`g-3a)$l7Bl*=[Gol][>#QaAYMD?2"A?K,`ts&sV[^bqtC>?71ii%%%Tl/'9k.8//T[4Cds\Ze-CYP^)A-*GY.!D"2od1\I#(do$b"FEg$OpK,`ts(>Qu*Hq6@+F3Vu5SOSDf*n;-G5qJBK<(iTc]R45V%YBRa2])$KiH!e45]Y"(.iSDPT5IFk-pNLNshVJ-:If$/^^O5nQp_eS]Gc2o0[G'Zs+^I6XIeD$:quM4Clhb:"Bh)IPNk4eA]%.mE%Pt.>bQ.\<c\NQ3po\".a(A:_9dJL-)^3KJKkq=-=T0@XM\:+9[P[(tO#&d+B6\X\GnG(u$rRJ5UY?i92s1/1,a%s00I9sjqhu6aW%I>:%6NZbss&@-YC+hQn[EdJ9?\*"lSHO_7/k9+el%O/CF/]@$:!o0@l_!O,`gn#b+ml:IISg2&>H5l[S0)Q4GCMREq>q?ua?+5f-%$S`%%*?-\6rp]I#_IkK:ZFrF/cGP?nMT4ldS.**dfGl5=PaWGo/;I>!)5Dg?\ku>,0qQT4!b[Og;oBm#;3?a=m\B=>-h<B=^=Ind%efsPp4,oURN-s<s#$GXBZK/4X-l^(_]2I]CGN.LP>51UqIX);"q:4I#jdZ&=Vh]I\hgW:dr8EFKp%@3[hr"D/Gl-HApNUr_FSjt-%X4rC783u\C?2j$PrSu^4d<^$0oWO>U"/L_qrVHAg^V2o0+/Q__])~>%AI9_PrivateDataEnd