%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: fig25.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Gary Westfall
%%CreationDate: 3/24/10
%%BoundingBox: 0 0 534 510
%%HiResBoundingBox: 0 0 533.7402 509.5752
%%CropBox: 0 0 533.7402 509.5752
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 124 8%%BeginData: 12488 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0BFFA8FFFFFFA8FD7AFF5252A8FF76527DFFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FD0CFF7DA8A87DFF5252A8FFFD0452FD697DA8FD09%FFA8527D7DFF52A87DFF52FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8%FD0AFFA87DFFA8A87DFFA87DFD6BFFA87DFD11FFA852FD6BFF7DA8FD11FF%A87DFD6BFFA87DFD11FFA852A8A8FD69FF7DA8FD11FFA87DFD6BFFA87DFD%12FF52FD1CFF7D52FD4DFF7DA8FD11FFA87DA8FD19FFA8FF5252A8FD4CFF%A87DFD11FFA852FD19FF7D2752FFA8FD4DFF7DA8FD11FFA87DA8FD18FFA8%277DFD4FFFA87DFD11FFA87DFD19FFA8A87D5252FD4DFF7DA8FD11FFA87D%A8A8A8FD19FF5252FD1CFFA9A3A9A9FD04FFA87DFD27FFA87DFD11FFA852%FFA8FD1AFFA87DFFC3C4FD19FF7F7FFFA3FD04FF7D27A8FD26FF7DA8FD11%FFA87DFD1EFFC3C3C3CBFD18FF7FA9CBCBFFFFFD047DA8FD26FFA87DFD12%FF52A8FD1EFFBCC3CAFD17FFA9A97F7FA3FFFF5227A8FD28FF7DA8FD11FF%A87DFD20FFCAFD18FF7FA3A97FFFFFFF52A8FD29FFA87DFD11FFA852FD39%FF7FFFA97FFFFFA8FD2BFF7DA8FD11FFA87DA8FD37FFA9A9FFFF7FFD2EFF%A87DFD11FFA87DFD21FFBCCAFD15FFCB7FA9A3A9A9FD2DFF7DA8FD11FFA8%52A8FD1FFFC3B6BDFD15FFA9FFFFFFA9A9FD2DFFA87DFD11FFA852FD20FF%C38CC3FD14FFA9A3A3FFFFFF7FFD2DFF7DA8FD11FFA87DFD20FFCAC3C3FD%14FFA97FFFA9FFFFCBFD2DFFA87DFD0AFFA8A8FD06FF52A8FD1FFFCAC3CA%FD14FF7FA9FFA9FFFFA9FD2DFF7DA8FD09FFA87D52A8FFFF27FFA87DFD20%FFC3FFC3FD14FFA97FA9A3FFFFA9A9FD2CFFA87DFD09FFA87DA87DFF5252%A8FF52A87DA8FD1DFFC4CAC4CAFD13FFA3A9CBFFFFFFA9FD2DFF7DA8FD09%FFA87D7DA8A8A827A8A87DFD20FFC3FFC3FD13FFA9A9A3FFFFFFA9A37FFD%2CFFA87DFD0AFF7D7DA8A8FFA8FFA852FD1FFFCAC4FFCACAFD11FFA9FFA9%A9A9FFFFA9A9A9A3FD2BFF7DA8FD11FFA852A8FD05FFC3CACAFD17FFC3FF%CACAFD11FFA9A9A97FFFFFFFA9FFA9CBFD2BFFA87DFD11FFA87DFD05FFA1%C3BDCAFD16FFCAC3FFCBC3FD11FFA9A97FA9A9FFFFA97F7FA9FD2BFF7DA8%FD11FFA87DA8FD05FFC3CAFD15FFCBC3FFC3FFCACAFD13FFCBFD06FFA9FD%2CFFA87DFD12FF52FD05FFCAFD16FFCABCC3BCCAFFFFC3FD12FFA9A9FD06%FFA9FD2CFF7DA8FD11FFA87DFD1DFFC3BCC3CBFFFFCAFD12FFA9FD07FFA9%FD2CFFA87DFD11FFA852A8FD1CFFCACA9BFFFFFFA1FD12FFA9A9FD06FFA9%A9FD2BFF7DA8FD11FFA87DFD1FFFCAFFFFFFCACAFD11FFA9FD07FF79A9A9%A9FD29FFA87DFFFFFD047D52A8FD09FFA852FD1CFFC4FFFFC3FFFFFFC3CB%FD0FFFA9A37FA9FD05FFA9A3A9FFA9FD29FF7DA8FFFFA8A8FFA8A8A8FD09%FFA87DFD07FFCBBDFD12FFC4BCCAC3CAFFFFFFCAC4FD0FFFA3CB7FA9FD06%FF7FA9A9A9FD29FFA87DFFA8527DA8FD0CFFA852FFA8FFFFCAA8FFBDC39B%FD11FFC3BD9AC3FD04FFCAC3FD0EFFA9A9A9CBA9FD06FFA97FA9A9FD29FF%7DA8FFA87DA8FD0DFFA87DA8A8A8FFC3C4CACAC3CAFD10FFC3BCBCC3FD06%FFC3FD0FFFA3A9A3CBFD07FFCBFD2BFFA87DFFFFA8A8FD0DFFA87DFFFFFF%CAC3BCCAFD0EFFAEFFFFFFC3B6B6CBFD07FFC3CAFD0CFFA9A9A379FD09FF%A9FFCBFD29FF7DA8FFFFFF7DA8A8FD0BFFA87DA8FFFFFFCACACAFFFFFFCA%FD09FFA883FFFFCABCBCC4FD08FFCAC3FD0CFFA3FFA9A9FD09FFA9A3A97F%FD28FFA87DFFFFA87D527D52FD0AFFA852FD09FFC3C3CAFD07FFA8A8A8AE%C4B6BCCAFFFF83FD04FFCAA1FFC3CAFD0BFFA9FFA97FFD09FF7FCBFFA9A9%FD27FF7DA8FFFFFF7DA8A8A8FD0AFFA87DFD08FFCAC3C3BCC4CAFFFFA8AE%AE82FFFF83A0C3A0CAFFA88383AEAE7E779C78A378A3A3A97FA9A9FD05FF%A9A979CBFD09FFA9A9FFA9FD28FFA87DFFFFFFFD047DFD0AFFA852A8FD08%FFC3C3BDBDBCC39AA7FD058375517675A8A8FD0483CF7E774D4E55A97779%A979797F7FA9A9FFFFFF7FFD0BFFA9A3A9A9FD28FF7DA8FFFFFF7D527DFD%0BFFA87DFD0AFFCAC3BCC3B6A1CAAE83FF7C579AC951FF83837DFF7EA955%7979A37E7E5AA972A3A3FFA9FFFFA9A3A9A9CBFD0CFFA9FD2AFFA87DFFFF%A87D7D7DA8FD0AFFA852FFA8FD0AFF7C76C3A1A77D83A19A939ABC7C7D7C%AEFF587E7F7F7FA9547E4D29537E717F7FA97FA9FFA97FA9A3FD0CFFA9FD%2AFF7DA8FFFFA8527D7DFD0BFFA87DA8FD0AFFAEA8AEA8FF83AEA876B5C3%767D5782FFFFA97F79A37FFFA977529B72777E554E797FFFA9FFA9FFFFA9%CBFD0BFFA9FFA9FFCBFD26FFA87DFD04FF5227A8FD0AFFA87DFD0BFF83FF%A85883CAC4C3B5BDC3CA7CA87EA9A9797FCB79797E84CA9A6F9A77A2597B%7083CFA9FFA9A9FFA9FD0CFFA97FA9A9A9FD26FF7DA8FFFFA8527DA8FD0B%FFA852A8FD09FF83A88383AECA9ABCBCBDFFFF8484A9A9FFA955FFFFA9FF%FF83CFA07C7CC39AC9834B77847FFFFFA9A9A9FD0CFFA9A9FFFFA9FD26FF%A87DFFFFFD04A8FD04FF527DA8FF7D7DA8A852FD09FF83A883A783FFA1A0%B6B5A1FF7E54A9A3A3FF53A3A9A953A8FFFF58AEAFFFBD9A9A9A519977A9%7FA3A9FD0FFF79A9A9A9FD26FF7DA8FFFFFF7D5252A8FFFFA87D7DA8FFFF%7D7DA87DFFFFA8FD06FFA8FFFFA8FF83A7CAC3C3FFA87EA3CB7F794E5478%A983FFA8AEFD05FFCABCA06F9A5153A8A97FA9A9FD0EFFA9A9CBA9FD26FF%A87DFFFFFFA852527DFFFFA87DA87DFF7DA1FFA852FFA8FD07FFA88383FF%FFFFAEFFC3FFA97EA8A9797F7E7EA3AE7E84FFAEA8FD07FF9A9AA1A85252%7FFFCBCBFD0EFFA9FD29FF7DA8FFFFFFA87D52FD04FF7D52A8A8527DFFA8%7DFD0AFFA8FD05FFC3CFA97E54A37F797FFF7E7EA7FFA88383FD06FFAE83%FFCBFFA17D4D4E9BA97DFD0EFFA9FFFFA9FD26FFA87DFFFF7D7D52527DFD%09FFA8FF52A8A8FD0DFFCAC37F7F53A97FA955A9A9A353A97FFFA7FD06FF%AE8383A8FFFFA09AC44C5277A883FD0DFFA9A97FA97FA9FD24FF7DA8FFFF%7DA8FFA87DFD0AFFA87DFD08FFAEFD07FFCBA959A3A9CBA3FD0FFFA7FFFF%AEFFFFCAA075BC6E7CCAAE83FD0DFFA3FFFFFFA9FD24FFA87DFFFFA87D7D%52A8FD0BFF52FD07FFA88383FD07FF59A87FA97FA9FD0FFFAEA8A883FFFF%FFA8A0C3C34AA07CA876FD0CFFA97FFFA3A9CBFD23FF7DA8FFFFFF7D7D7D%A8A8FD09FFA87DA8FD06FFAEFFAEA8FFFFFFA9FFA97EA9CBA9A9FD11FFA8%83FD05FFC3A183C32683C4A19AFD0BFFA9A9A3A3A9A9CBFD22FFA87DFFFF%A8A87D7D7DFD0AFFA852FD06FFA883FF83AEFFFFA3A97E547FA9A9A9FD1A%FF83FF7DC34A7C6FC3FFFFAFFD08FFCBA3FFA9FF79A9A3FD21FF7DA8FFFF%A87DA87D7DA8FD09FFA87DA8FD04FFAE83A783AEFFFFFFCBCBFFA8FFA9A9%CBFD19FFA8AEFFAECABD4AA1CBFF7CA0FD09FFA9A9FFA9A9FFA9FD21FFA8%7DFFFFFD04A87DFD0AFFA852FD05FF83FFA8FFFFA9A3A97F7F79A3A97FA9%FD1BFF8383A8FFBCB67C5F6FC39A99CAFD07FFA9A9A97F7FFFA3FD21FF7D%A8FD11FFA87DA8FD04FFA8AEA8AEFFA9FF7FA37FA3A9A3A3FD1DFFA7FFFF%FFCA9A51579393A1C3A8FD07FFA3FFCBA9A9FD22FFA87DFFFFA87D52527D%FD0AFFA852FFA8FFFFFFA883A8FFFD05A9CBFFFF7FFD23FF83BC4A58A1BC%9A8383AEFD06FF7FFFFFFD04A9FD1FFF7DA8FFFFFFA8FFA8A8FD0AFFA87D%FD08FFA9A97F7979CBA9FFA3FD24FFAE7D7583FFCBA1BDFFA8FD07FFA3A9%A9FFA9A9FD1FFFA87DFD06FF5252A8FD09FF52A87DFD06FFA9CBFF7F7FA3%A9A9FD26FFAFCABD7CCF9AA076AEFD08FF7F7FFFFF7FFD1FFF7DA8FD05FF%A85227A8FD08FFA87DFFFFA8FD05FFA3FFFFA9FD2CFFCAC37DA199A8FFFF%FFCAFD06FF7F7F79A9A3FD1EFFA87DFD05FF7D27A8A8FD08FFA852FD07FF%7FA979A9A9FD2DFFCAC37DAECAFFA8C4BCC4CAFD05FF7F7FA9A9A9FD1DFF%7DA8FD05FFA8527DFD09FFA87DA8FFFFAE83A9A3A9FFCBFD30FFCBC4A176%759A75A0A1FD07FFA37F55A9A9FD1CFFA87DFD05FFA85252A8FD08FFA852%FFFFFF83FF59A87FA9A9FD32FFBD6E6F757CC3A7FD08FF7FCB7F7F7FFFCB%FD19FF7DA8FFFFFFA87D52527DFD09FFA852A8FFFFA7FFA8CFA97FA9FD33%FFA1937558FF83AEA8AEA8FD04FFA9A3A379794F79A9CBFD17FFA87DFFFF%FF52527D52FD0AFFA852FFCACA765354A9A9A9FD34FFAFA8767C337CA083%A8A8A8FFA8FFA9A97FFFA97F79A379A9A9A9FD14FF7DA8FFFFFFA87D7DFD%0BFFA876C4FFC39C9BFF7FFD39FFC4A0767C58FF83A87DAEA8FFFFA9A9A3%79A37979797F7FA9A9FD12FFA87DFFFFA8FD047DA8FD09FFCA6FBC7C7E4D%A2FFA9FD3AFFA8997575577CC37CC3A8A8CA9BCBA3A355A3A3A95579557F%7FA3A9A9A9FD0DFF7DA8FFFFFFA87D52FD0BFFA8BD9B7EA98579A9A3FD3B%FFCAC3BCBC4A752CA17CA17CA19AFFFFCA78A9A37F7FA97F7F557F7F7FA3%FD0CFFA87DFFFFA8525252A8FD0AFFCA4C7E53A37DA3A9FD3DFFC3C3B5BC%939A4A5176516F76517676A0A1FFA2A9FD047F79A37FA97FA97FA37FA97F%FD04A9CB7DA2FFFF7D7D7DA8A8FD08FF7DFFA853787E7EA3A9FD3FFFC3CA%FFFFFFCA759951A05176517C9AA0CAC4C3CAA9A97EA37FA34E734E4F4E7F%7979557955797F7854FFFF7D5227527DFD07FF52777D7E28A354A37EFFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFAFFFA8FFAFA176A07C586F514A6F6FB6B5B5BCBC9B948D716A7170%9494957872717171724D724C77FFFFFFA8FFA8FD07FFA87DFF7D7E527E53%7EFD48A8A9A8AFA8A17CA77DBC93C3B6B69AB6B5B5B5BD70954771476B47%6B6A7146716A7071FD0EFF52767DA929A97EFD51FFCACAFFFFCAC39ACAC3%CBA8A9A2A37EA29BA19BA3787F7EA3777EFD0FFF7DFFA87DA8FD57FFCAFD%12FFA87DFD11FFA852FD6BFF7DA8FD11FFA87DFD6BFFA87DFD11FFA852FD%6BFF7DA8FD11FFA87DFD6BFFA87DFD11FFA852A8FD2AFFCAFD05FFA8FFA8%FFA8A8FFFFA8A8FD08FFA8FD07FFA8FD05FFA8FD05FFA8FFA8FFA8FD0FFF%7DA8FD11FFA87DFD2AFFCAC3CAFFFFFF7DFD04527D52FFA87D7DA87DA852%A852FFFF277DA8A8FFA8FFA827A8A8A8FF7D5252FFFFFFA827275252A8FD%0FFFA87DFD11FFA852FD28FFCAA1BCB6BCA1CAFFA87D527D277D7DA87D7D%7D2727277D277DFF7DF852527D5227527DF8527D7DA87D7D52FF7D7DA87D%527D7D527DFD0EFF7DA8FD11FFA87DA8FD29FFC4C3C4FFFFFF277D7D527D%7D52FFA852527D527DFF52A8FF7DFF7D7D52A87DA87DFF527D52FFA8527D%FFA8FFA85252FFA87D52FD0EFFA87DFD11FFA87DFD31FFA8FFA8FFA8FFFF%FFA8FFFFFFA8FD07FFA8FD07FFA8FFFFFFA8FD05FFA8FD13FF7DA8FD11FF%A87DA8A8A8FD68FFA87DFD11FFA852FFA8FD28FFA883AEFFFFFF7D52A8A8%FFA8FFA8A8A8FFFD05A8FFFFFFA8FD27FF7DA8FD11FFA87DFD28FFA8A87D%FF7DAEA8FF527D527D5252527D527DA87D527D7D7D527D7D52277DFD25FF%A87DFD11FFA852A8FD28FFA883A883A8FFFF5227525252275252527DFF52%7D277D52275227272752FD25FF7DA8FD11FFA87DFD2AFFA8AEA8FFFFFF7D%7D7DA8FD057DA8FFFD04A87D7DA8A8FF7DFD26FFA87DFD11FFA852A8A8FD%69FF7DA8FD11FFA87DFD2AFFA9CBA9FD0FFFA8FFFFFFA8FD2AFFA87DFD11%FFA852FD29FFA9A9A9A3A9FFFF7DA87D52A8A87D5252A87D7D527DFF7D52%7D7D52527DFD06A85252FD1DFF7DA8FD11FFA87DA8FD27FFA9A3A3FF7FA9%A9FF5252527DA8FFFD0452277DA87DFFA852A8527D525227527D5227277D%7DFD1DFFA87DFD11FFA852FD29FFFD04A9FFFFA87DFF7D5252527D27A8FD%045227FF7D7DA87DFD0552A8FD0552FD1DFF7DA8FD11FFA87DAFFD29FFA9%FD09FFA8FD07FFA8FD09FFA8FFFFFFA8FFA8FD1EFFA87DFD0AFF7DA8FFFF%7D7DA8A852CAC3C3CAFD67FF7DA8FD09FFA87D52A8FFA8527DFF7DC4C3C3%FD68FFA87DFD08FF7D7D7DA87DFFA87DA8FF52A89AC3FD68FF7DA8FD09FF%A87D52A8A8527DFFA87DFD6BFFA87DFD0AFFA8A8A8FFA8A8A8FF52FD6BFF%7DA8FD11FFA87DFD10FFA8FD0FFFA8FD21FFA8FD0FFFA8FD18FFA87DFD11%FFA852FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8FD0FFFA8A8FD0FFF7DFD%0FFFA8A8FD0FFFA8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7DFFFFFFA8FF%FFFF7DA8FD11FFA87DA8FD0FFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FD0CFFA8FD0CFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FD10FFA8FD07FFA87DFD12FF527D7D7D527D7D7D527D7D7D527D7D7D%527D7D7D527D7D7D527D7D7D52FD057D527D7D7D527D7D7D527D7D7D527D%7D7D527D7D7D527D7D7D527D7D7D527D7D7D52527D7D52527D7D7D52527D%7D52527D7D52527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D527D7D7D%52A8FD13FFFD0DA8FFA8A8A8FFA8FFFD09A8FFA8FFA8FFA8FFA8FFA8A8A8%FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFFD%0BA8FFA8A8A8FFFD0BA8FFA8A8A8FFFD06A8FD12FF7D52FD0DFF52A8FFFF%527DA8FD09FF7D76A8FFFFA87DFD0AFFA852FFFFA852A8FD0AFF527DFFFF%7D7DA8FD0AFF7DA8FFFF7D52FD0BFF52FFFFA8527DFD16FFA87DA87DFD0B%FF7DA852FFFFFF52A8FD09FF7DA87DFFFF527DFD0AFF77A87DFF52527DFD%09FFA8A87DA8FF7D52A8FD0AFF52A8FFA87DA8A8FD09FFA852A8FFA8A852%FD16FFFD047DFD0BFF7D7D7DA8FF52A8FD0AFF52A852FF7D5227FD09FFA8%7DA17DFF7DA87DFD09FFA87D7D7DFF52527DFD0AFF7D7DFF7DA17DA8FD0A%FF52FFFFA852FD18FF527DA8FD0BFFA8527DFF7D527DFD0AFFA852A8A8FF%A87DFD0AFF7D7DA8A87D7D7DFD09FFA87D7DCBA87D52A8FD0AFF7DA8A8A8%527DFD0BFF7DA8FF7D527DFD18FFA8FD0FFFA8FFFFFFA8FD1BFFA8FD0FFF%A8FD23FFA8FD4DFFA8A87D52A8FFFFFFA8FFA8A8A8FFFFA8FD66FF7D527D%FD07FF527D7DA87DA852A852A852A8527D527D7DFD64FFA8527D7DFD06FF%A87D7DA8A87D525227A8527DA85252A87D7DFD65FF5252277D527D7DA8A8%A852A8527D527D277DFF52A87D7D5252A852FD66FF7D7D277D7D7D52FFFF%7DFFFFA8FD0BFF7DFD68FFA852A8A87D52FDFCFFFD41FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-02-03T11:53:09-05:00</xmp:CreateDate>
         <xmp:MetadataDate>2010-02-03T11:53:09-05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2010-02-03T11:53:09-05:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>244</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWBfmFruuW2rw6d&#xA;YasdDhTSdS1VrsRwSGaWz9IRw/6QkihF9UvJxAYgbEbnFUv84+a/Osth5Xg0N00++1nT7nUr2Znh&#xA;hEZtreKT0g9xBeIPinJp6dSF+0oqwUpkPzA1ttP8qppmitrep6/pT6rIvrR2ISOBbUSMRL6gBZ71&#xA;aKGNPE4oRkHmX8wXUmXyZ6RrsP0nbNUfQuKqv+IvPf8A1KP/AHMbf/mnFXf4i89/9Sj/ANzG3/5p&#xA;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&#xA;qTho85H0T/0p8v1j5tOqwxhK4G4S3HfXdLuI/aNk5tdY0m7lMVpe29xKAWMcUqO3EMyE0Uk05Iy/&#xA;MHIz0+SAuUSB5guMi8qViPmPUNKWfVYtU1BY0hiiNvYSTRxrKWUlRwYEtykoOhzbaTFkIgYRuybl&#xA;R2/sCUf5I0vTrTyzpUttbwpNNZW7TXEUcaGVmjVmdmjVAeTEt0yjtLNOeeYkTQnKgSdt/NBT/MBU&#xA;i8zXFxb3ehm3eOKa4vjberKGdQslrM1OKywcuTxqNyflXpnaOAlHJdkCF7f1o+UuhP61Rmn3Go/p&#xA;G6sr2SGb0YYJo5IYmi/vWlUghpJa09Id8pywhwCUQRZI3N8uHyHeqY5jq7FXYq7FXYq7FXYq7FXY&#xA;qxXz/wD9M5/23LL/AI3xVT/NTUbS08nXdveNbLaaoG064a6u/qKhLmN0JSdo5oxJ/KJOKnuw7qpL&#xA;+WtjqU+tSarrT3LahBZCysv9CtrW0+qNIj/DPZy3MFwwMa8aOvEVoi1OKvSMVdirBfNn1L/lZPlv&#xA;659b9L9Da1T6l9a9Tl9a0rr9T/ecfn8PTvTFWdYq7FXnPnbyXBa6dPPpBSK6e0a3ghaOS7uLq4Ss&#xA;sSpVqowCvV133qdlGYuXFQ2eg0nbwgR4wlIcd1GhtW4qvV7jtt5lJ7HStbiPryrdR+X7S89J0ikW&#xA;dbfT2i9SeFreSOKV1+sBQ/NCwUbBlrWsRP8Am39iO0e0NPmxRkKkTvO4mJMhxRBNE8hvwg0ertW1&#xA;jStOsZ53S5j1B7o3Xl24CTqIdPDJWSFuPprEsZP7jq3Tj8QwSkAPPp7vx0dDoNDLUz4I/Ufp/R7o&#xA;9/l50GE6g97qBvdS1i5vDr0kEEodlWICxlejiOI7OrQ8JGApx+Kn2TSiVmyfq/Q7nPjho4EiY8SE&#xA;5D+kaA5VvRI5j6f4ZRluel6ZphutIu7XQHfR/KFv6c8El4GUySQuZXeB5CTDA3BGLMp3rRRvmZjx&#xA;mfphddPM+Tz+TJPMbs1tz8vfvSSHULa91V10u30ubU1mtraD9IiTVGDSXPB7h5ppbeX7IrGkYJ6E&#xA;0U7b/R9kQ4BkzwmBUvf6Rt9UDz7zQrlusMQO5H6fvYZ5j0G206OCTzBcm1h1SCW/hh0xltLaJnWS&#xA;SL/RlLh0HIheas9TxBO2bUz0+ImeH0GBjHlEyIht1HMjb00Dts5ccoEeAADz7v2bdyD0vzFJf236&#xA;PhtbixeyaG40vV44DJwhWBRcpNSaaT0lEYLhPhrVqJTYZdRiExknOJlPxK5gfVYv01yIsyro3mGX&#xA;Bccg9POQ8r2PWufP9dMw0jXvK1/d3h1lpV1KFruF7L1bpI45YPq72xVGZIwaxPIpoCetK7C8Y8/h&#xA;x4AACIE/SefFxbgWRuB7mjLACR4Tceh73o1lcNb6XNNZXNzaPY2SXE1reRtPFx9JgjKGZZOsJ+FZ&#xA;AOu1TXNLkhxTAkIy4pUDE0efurr1H6mtEJNqV1qVimtWskUBlP1WIJb+kbhBJMjyMJ53+FIxw4qK&#xA;NUkmopWYwjCRxEE1v9V1sNvTEczvz2+NrJc1qHYqlPmi1hn0sPLzH1WeG4V43eJ1CSDnxeNo2FYy&#xA;y7Hoeh6Zl6KZjOh/ECOQPTbmD1pUZZaZaWbySQ+oZJQqySSyyzMVSpUcpWcgDmdh45TkzSmADW3c&#xA;APuVFZUrsVdirsVdirsVdirsVdirFfP/AP0zn/bcsv8AjfFUf5xn1WDQpptPm0+2WMM99daqsklt&#xA;FaqjNI5jjZOZFBsXUUrvirCPyfsfJVvqGoXGjatPeanexl7q1Nm2k2gSOZo2a3sBFAgIcfGx5P8A&#xA;EKn4hVVmHmnztZeXpobd7G81K6lguLxrexWJnjtbQKZp39WSEcVMigAEsxNFBxVfrHnCCw0601C0&#xA;0691i3vIWuo2sEiKrAkYkMkklxJbxICrDiC/Jv2QaHFUiur+bV/PXlDUtGnjhivvL2rXUMlzC8lY&#xA;ZrjSXWsayQlWow7/AEYqzzFXYqxTUNQ1+Z7bVrO3gWzqI7EyMxkf6wSi+snwhUmb0+LKSyVqQRyA&#xA;olKXMNEpS5hjuo2t7C01zBLdHzZf3iQaklvFN6gtJXMSrBRlgWOOEFklk2qKlg2VEHn/ABk/Y5Wg&#xA;EBkuX12Dv9Ox/i23jXduelnZKtE0q88wau+pebIJZNP0z6zHeTyqgEs8fGKFGgUclIibnWMfb22Z&#xA;d5YMMsswCLey12qxaPDWnMROYjVWSIneVS6+oVR6d4Oy8F35e+v3eoW2lwWeiaZE8dvb3jTWpvDZ&#xA;sjmYCaBkPFuIVeQZz8T1HGm5x9jCRjud6+kRkN+V1O6+Dx+p1OXUEHIeKr7utfZtsOQS3W/OvlBd&#xA;D07QdJ1yGHUbyCKO8mF/J6MDyGNXj9Pk0ALF25grxRQajpm7waLNizGU8R8IGVVj6CyDYjsNttwZ&#xA;Hle7Ty2pkl/ZaVqdxZRwaZLNpNlKsuq3NpezSKqRQyCI1hkUyzK7KzcS0lNz1FdZLtCeDi3uddYD&#xA;ayCeY5V0HyQZ0i9b8kWzWLWOkW6fU9VW3hjvA7tNbCBC0ZWRo7n92Qg+I0oWO/xVGo1efLm+o3xG&#xA;/j8A24c5xyJoTEgRRutx1rp15jdieufl9/hWybUTJLqF0qzqlz6D3sgiRvrK84ivpIkjoFmNOnT7&#xA;RzHjPLgj6JyHuJ+773daGctTExmIynCHDAHhiOXCN9iZdY2Tv3dYJearaWetWM+gcrNbERzXtmwW&#xA;OOeQsY0e1iZozT94sgQhSKseHCoyqGsqcjPinxRAPq32MSKJB/mjZxcuihjPB4h/Lyo9/BIDfi5c&#xA;Mo16oCyR3mID1jRvN36S0QX2pJdXUXmC3Fhb3VpaRikUc8lv68kcdxcMCWulLLxFDsAemdPhwCQi&#xA;cZj+7PF6peQNfREcouuMDHY/29x+LM7FLzUZbW7lvIpYLOZ3ESWk1tJ6npvCVYTSuwoJCaccwshj&#xA;jBiIkGQ/nCQqweg8u9inWYSuxVDanafXNNu7T/lphki/4NSvcHxyzDPgmJdxBVhtkNNu9E+sNpcg&#xA;1i5nknSY2FwHrJdNIjes0KEfARuaUHhm4yccMtcY8MACuOPSNcuI9felneaNDsVdirsVdirsVdir&#xA;sVdirFfP/wD0zn/bcsv+N8VRHnW9tvqVroc1gNSPmSZtLFo8noRmN4JJbh5JQGZQkETkcRyJoB4h&#xA;VgX5RWF/Yearkazp91bXuo2lxfaXPfXz3c3oPdRi6QxfVrQRMZDCzl+TN8NGIBoqzXzf5Mv9Zvob&#xA;/S9UXS7wWd1plzJJb/WlktbvgzBV9SHjIjxBkapA3qpGKoPXPIWsX9npenW2qWiaRpR4xabd2U1z&#xA;DNFHFFHAtyI7u29VomR23+BuQqlUqVUL5htFbz95Ug1DTY9akj0PWBLDDDCsfqLc6UGlSK6l4ovU&#xA;AeozAGlTucVZxY6bp1hG0djaw2kbnkyQRrGpalKkKBviqIxVK4fLtlFdicSTGFX9WGyaQm3jlqSX&#xA;VPm1aElR1UA5AYxbAYxarq/rwW011YWqz6oyCC3YgdXai826+mhbm3tWm+GXeObk6bHCWQcZqPU+&#xA;Q3oeZ5DzebXt5qOsQQeVNJilttLktbZ9QmuRCXeS9MsoEzxSyFWuGUO/EEipqKMM3ODS48I9REzG&#xA;UhKuLoBy9IF73uQx1WY5shkev2DoB7hQ9zV3o/mbU7+1ggb+5a/S/ispbdjDDMz2YdY5oYQvqeiQ&#xA;oL70YilKZs8WbBigdtqhw8QluRUq9Mjyvu7udsExfy95htPMcs2maVMNJ1CwNlcyTSW0lxC4CAvR&#xA;rj976ip1ZieVS1RtmozSjPCYHJHilPi5SquGtvT9nJrlE711T6x0fXopJntHaxt9RuXa9hm9OSWK&#xA;MR8ElhZHYCRuKg8i60FaVrXA1Q3AibHCAf2XSJRN7Mmt4Ire3it4RxihRY4160VRQDf2GVAUzApL&#xA;dUv9V+tCy0uFJJoljnu3lJUei7OoSIj/AHa3ptxr8Ip8XUZCUjdBiZG9gxSfydoOn+Wp9X0LT1ub&#xA;144J4I7+N7qYNBX00TcyJKpagFSKilO+VeHERuId1DtGepkIz2jKz6agCTRufToLPN45Dqt35Zuo&#xA;ZtF1uOWGZ/8AclbX0DQvbOtxC63MyKjnnzgHqxqORWhAJrTNwdp4YxnYIlOtwL/hlEkjiHemPZ4J&#xA;Eog5I85RhV8rNVvGPvGxuhb2zyb5rurizfUtSjtLXTtQm9WJobn1mt/WiE0f1pmWNVEkfFl7ioBH&#xA;hDLqYzII+mgN+fx3P3uoyxlCifokLB7/AMUzjAh2KuxVjmnX13auNGsreGaaCS7qJJPQSOKOSN4l&#xA;Ajhb/dVyn7I6dT1zY5cUZDxJEgER6XZIN85d8T1+Spvpt9cXJuo7iFIZ7WYQyLHIZUNYklBDFIz0&#xA;kH7OYmbGI0QbEhfKupHee5UZlKuxV2KuxV2KuxV2KuxVivn/AP6Zz/tuWX/G+Kqf5nLYPoFvHdTW&#xA;0EzXSGwkurqSwIuEjkcehexBmt5eCsQ/EgiqkUbFWHeRtVhs9fSW4ntRd3rx2bahqGuLrN7IjN8F&#xA;taQwKqRoz7s1V33KtTZV6/irsVYL5sntofzJ8tvcar+iEOja0Bc8oE5H61pXwVuEkTfrsK7YqzrF&#xA;WKa7rWh3lzDa3bTT6TSZblYobho5ZVpxUNGlJ0ULJzVC1DTkMonOJNHk0TnEmjyTrQROLNw/qiD1&#xA;X+pi45Gb0duPqc/j6148vi40rvXLIcmyHJjvmHzj5h02ymu7LTYr8obsx2ys6uUs7gW5ZmoQoJYM&#xA;TSiip7Zt8WjxEgSlIXwDle8xfyDMmkr07yzFbafbWd6i6hqdlcR2iC5ggkknlEQnDPKekMaSFuNR&#xA;RV4r+yDkRzGJJiTGMwZEiUusqO3eSKHw6BERTOdF0e10qz+rwAVd2lmZUSMNI3U8YwqgAAAUHQZq&#xA;tRqJZZWfd+LSjsoV2KuxVLdT0ia6nSe0vJLGc8Y7mSMBjLApJMdG2VviPFxuuQlC+RphKN8jSOtb&#xA;aC1toraBeEECLHElSaKooBU1PTJAUKZAVswvV/Jzz+Yz9Su1t/rbvqE8MkEMkAdY0tmKoAkjSOrG&#xA;r+p8NT45RPHctve547RlHHwQiIzree/EQJXXOj3e4B5XJZTeSb8y3dtFeaMTdraW0MDzx2Uq3BhL&#xA;yiTgLpFCsi83LIG/ZNK4RHhmzy3+H63LGOObGMlSlghtKG2x6ygNyATZI4fTe1x4uHpP5f6vPpPl&#xA;me71xriw0uNnksba7iLT+kwM7OvpAllA5URU+BR4UzLwy4Y2dg0a/HAGIgImUjygeLr6YgC967iR&#xA;0HJnOmapp+qWMV9p86XNpOvKKVDUEfrBHQg7jMmMgRYdcQQaPMIrChjOu2ckOuLfQ3Mtm9xZzxxz&#xA;RCMj1ogJODLN6q1eNKjjH0j3b7IzZ6bIDi4SBKpDnfI7dK5HvP8AFsOaUvtZ9X0/VbGGC5utSkvj&#xA;Fc35nNpGjma1mCgenDGylfqgO1PpqcvnHHkxyJEYcNiNcR5Sj3yP85WW6dei9soroIY/UFTGxBKk&#xA;Egio26jNTlx8EjHnSETlauxV2KuxV2KuxV2KsV8//wDTOf8Abcsv+N8VTbzHNDFp3KTSpNacuBBY&#xA;RRxyFpCDQkzFIowBWruwH0mmKpBoV1cjU4o9S8j/AKH5sBb39ubO6RGNaer6BEsdf5gpXxYYqzPF&#xA;XYqw3X/0h/ys7y59R9L1f0JrfL1+XHj9b0rpx3rWmKsyxVj0dhf2Vrax38lumlaKolS5j5tNIkET&#xA;KvKPjSPiv2irNy7Ba0yGPFKRER8GqMDsOgSDWPMGjy6pLaXOq3mmXNxewxWxZ7mzpb/V0ZuKyhIt&#xA;3V9ytc6LT6XIICUYRmBAk/TLfiPdvypuQtj5atPqv1jUdX1T01023nlVZizPJqDyGeMRhCXMskag&#xA;IASzbbk5Zl1kuKoQx34khy6QrhN3tQJ36BWXeXNCltZJ9T1CRrjVL1ixeUJyhjKoohXgqL9mJOZU&#xA;DkQPAZqtXqRICEBUI917nfff3mu4HzKE8zBV2KuxV2KuxV2KoLVNItdSjRZS8UsTBormBvTmTcFl&#xA;WQbhXC8WHcZGUAWMogoDWfJPlrWba3tb+0LW1qjxwQRSywxqslOXwxMgP2R1rTIyxROxc/RdoZtL&#xA;fhERuukTy94P2PBNX07zFYeYtN0+C9aWccYoGuHVILWImtzBPbipWJKbsyEMqFhyXZdZKMhIAH9j&#xA;laTNjwx/MY6l/qmLlw3fqBr0QB5EC4kiJJBtmehJrfky7FzqTjnqdwPVv0nhFtdCvC2T0wkzW9tG&#xA;rMecaV3HQdMmNwNnr+Pk52oyQ1OOsYE8krIjUhwem5Hj/ilUYje7O9bvVtJ1J76GX1Y1int5PRmW&#xA;OT1Yy3BXBjkohZeLjqo37ZmRlbzIvkRRCpqenxahaNbyMYzVXimQKXjdDVXXmrrUHxGX4cpxysf2&#xA;/JLE0sdKtLxrz0m03XIUgtpLSxgs09QmUxLPbGeNjwdrmhbnsPhajAjNqcuSUeG+PEbNyM9trqXC&#xA;eY4e7zGyU/0W4FuINKe2uoXWJ5I5Lo27GQIyhyTA7AGso/ZGYGohxXkBid+nFt3fUPJCb5iK7FXY&#xA;q7FXYq7FXYqxXz//ANM5/wBtyy/43xVlWKvD/wA9Q135t0qxN9a6II7FrmPWT6kF76gnCiGG7hhu&#xA;ZI0oCSvFa9Q2xxV7Tp4pYWw5+rSJP3pYuW+EfFyahavicVV8VYL5sWFvzJ8tiaO7lX9Da1RbKSWO&#xA;Sv1rStyYXjbj9NOmKspDaXosIV55aTMfTSaWe6lZgKkIJGlkNAKkL88BkBzQZAc0l1fzNp+qxS6R&#xA;pF5p909/ayIkz3ioOUtYlVRGkxZqnptm002llCssxMCMgdo3y36kJCIgiv8AzAto+q6fZx2tpdTm&#xA;SETNdB3h9a1pxkghFKnlX8MjKUMFjHKXFKI6cPPhl0kfcqc22k6Vahha2cEAcqziKJEqUNVJ4gfZ&#xA;PTMOefJL6pE+8qisqV2KuxV2KuxV2KuxV2KuxVCajpOn6jay213CHjmA5MPhcFTVGVxRlZDurA1B&#xA;6ZGUQebbgzSxTE47H8bHvB6h5f5m8tXumm2gubxrS0tZCbHUbcW8BWNwwlCSOESJyrEyQkhJKc0o&#xA;QY8w8mMj8fj5f2OzwxBBlggZxPPECbhLpOH84e+6sxlY3kM0X80vy40DSUsLS6M8kUxhlEaqjSFE&#xA;HK5IdkRUIWiqDXoqr0GThqMcRQYHs/JlkZmW0v4pEn1H/JmVf3n9Hb4Mw8m+Zm1/TWmaNPVtmENx&#xA;cW7pJbSTAVb0GB58QCD8ajr3y/Fk4g4+t0+PHP0S4onodpR8pDkD8fkjPMOhRazYrAz+jcQyxz2t&#xA;0F5NFLGwYMtCp6VXY9DmbpNScMr5gggjvBcJ51q2v3WkT6jca9rhe8t1ubTTZLPhFRzEJqzQs7lP&#xA;956jbifGpAzocGljlERix+k8MpcW/WtjW/1e/wC9L0zT9UgvvVEaSRvCV5pKvE0cclI61BGc3lwm&#xA;FXW6EZlKuxV2KuxV2KuxVivn/wD6Zz/tuWX/ABviqa+a77U7Dyxq99pUXr6na2c81lD6Zl5zRxs0&#xA;a+mrIz1YD4QwJxV49oWn3/njzon1rVdL1zT4oTcaxdWFpqtoI5VMcQteRvwiSOgqvwEgIeSjuq90&#xA;jjSONY02RAFUEkmgFBud8VXYqwPzhex2f5k+WHe/XTvV0nV4UmdVcM8l5pKqgDeJNa+2AkBsxYZZ&#xA;CREXQJ+A3K/zf5uvdI8x6cLTTJL2Yc7NrYvFG8wvOLxPAxfoHtSrVG3fscYQMpHcDhG931IG1A9f&#xA;JyYaAyxjICL3232reXEa225c7QeiaTqsmm2emNa32n6nYvbfXpVawMFPrCXLcR6lwxC8TxIUFjuw&#xA;3zdmUMZlPihOMzMj673sd0e/dwYimeafYpZWot1keb45JGlk48maWRpGJ4Ki/ac9Bmpy5OOV1XL7&#xA;BSUTlauxV2KuxV2KuxV2KuxV2KuxV2KqN5Z2t7ay2t1Es1vMpSSJwGUg+INRgIsUWzFlljkJRNSD&#xA;xnWPyY1nSriW40W6a80wywzTWkv7yRxAzMqzQ8aTKvMiqsH41orHbMCWlMfp5Oxnq/zFbQx5uOU+&#xA;PcAk3sf5p32n0qO4q0RYfmW1jdahNb2NtpkElwttSO3me1MsLcHX1V+rn6wylmCSRIxCqpp1CNRV&#xA;mq/H3uBqsOeIM8pHHfIm7iP4uLlz2Auz023egf4tstNvb6z1e9jZbL0C95HFIEQ3FeMU5X1ERxxD&#xA;VJFQw27nK8UAkE8nEE9yD0Rk8i6u1u+m3aQXOnz+rLHcQSFgHhkiCtEzQSLX1Khj4Zl6fPAcQIJB&#xA;Fc66g9Qe5sEgXk9636LsDqGnebRY6pPaWtwlnbSoImmLxpIrW873ALBOWygKO6HpnYYv3suGeHjx&#xA;iUhZG9USPVER299k/wA5myLSfPuoabNBBrEl/qCLdXVlcXzDT/qrPGzMjLNGtnx4oByZ1UfTmvz9&#xA;mQyAnGIQ9MZCPr4t/I8fXuJRTJtM/Mnypemkt7Dp5aOKWMXdzaLz9UsvFfTmk+NClHU7iozW5uyM&#xA;8OUTPcj0xl0rviNjey0yK0vrK8jMtncR3MQPEvC6uoYAGlVJ33zX5McoGpAg+aFbIK7FXYqxXz//&#xA;ANM5/wBtyy/43xVb+Y09NLsLCKx+v6hqd6trpqC7l0/05xDLOZfrcKvLEVihehRSSduhOKsP/Kz1&#xA;tS1W1utaF7Ob2xTWvL4utUnvkjtnfgBNCyQxLOvNTyo/XZhTdV65iqC1bW9G0e2W61e/ttOtmYRr&#xA;PdzRwIXNSFDSFRU06Yq8r/OO9tB5q0WK3j9a9uNJ1BRKkJnotxcWUULnjHKaDlIQV3G9CCwOXYtC&#xA;cxskCNS6xB2F7WR+y3Y6PtE4ImNXZBG+23l8vLvBSO30izvoLJ7XSWivo4ri6S9js76XmsFv6UKI&#xA;y0WU+tMro6seBXf7VDvdNjhjEarh9EZAyxjrxWef834g2HXxyyJ4rNm7353zvvt7fp1jdQTXNxdT&#xA;pPPcFKmKMxIAi8QOLPKfxzR5ckZACIoDvN/oCEdlCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV51&#xA;+Yn5c6PqNwdXisZ7jULyZI782pdp2hEXpfuw0qWycUXrIh+g0zFzYAd65u97K1caOPJwcAia4wOG&#xA;7v1DhMpeVbgeTAG/K38z57CQ2Ukdra3Qku2sTS34zxMqwj0EHpLKyrXkioAPoGY35bIRts3anHoI&#xA;mUMM+CMuEfTxx75UeIHhsd5Pv24QWq+afOvl25uNO1SG5srv0IUhtVmWQzmYlpJXlCuZkkmeXkBJ&#xA;VSaKQd8hLJOGx2cbN6pSz3jJFAcGw2qv3cwCQLA9N7RO1+pHaV+bM2nx3Vhq9jZ6xEqGOHTHfgLd&#xA;EqpiVnimDoY2T7Rrsa13pfh188R2PyNUx1mMTluDEiPFKUomFyPQjeN3fDK4xPftabeT/MGhXmuL&#xA;6UmmaRDeOt9bSWyxAW7mMItpUwxf75LOeQUsdqnYbfH25LIOHJ6tq3lL3/PzaRo/EheP1EC6iRKw&#xA;KsmjcfqHp4T1N7LdO0YIJ4tG5yXr2NyCtvLFbzJEl4kkcs0XwjmVXieQr/LtvnQQ7Zw5zESI5g0Q&#xA;T/DwkeW52+bXqNBlxAykPTdX0Jq9u9TfWprG9djr5SC4utNjnE9+6TL9Yh9GR5JIZpohQpyNU2+C&#xA;tBWuUY45Row3jGfKG2x4gKMQevf/ADvhijGT0TPSfzh0rSJ47TULjUNQjDX0bkCG5UG3k9SNo5lE&#xA;Lyp9X+LlvyBUjvTBz9nQygyicUPp5kx57Gwbr1fpbPyuU8on5JpD+e+h3EcssGkXyQwwR3Usly9p&#xA;CBDOwSFh+/f7btxoaGvUZAez0uXiYyeIx9PEfUOYPp6NcsUo8xVo+1/OXy3MIke1uvrEtz9SjigE&#xA;NyHuDusaSQSOjFkIYUNKHKZ9hZYn6o1V73Hb3EAseEpT5n/MbQdVh8tzQR3McLapb3kckkagNBA7&#xA;xyuvFmPwPsdsxcnZs4S4eKBldVfVJxyAshn/AJh8seX/ADHZJY67YRahaRyCZIZhyUSKrKGHvxcj&#xA;6c1zBCeW/IHkzyzcS3Gg6Rb6dPMgilkgXiWQGvHr0qMVT/FWHeedL1eXV9E1ax0s61Dp630Vxpqv&#xA;BG5N3AEjlBuHijopUo3xV4uaV6Yq851PydqWk+YvJdld3Z+sweVZbGV4r2az/eafc2TtSSK3umoH&#xA;mTht+z2oK5mHNGMRuRIGX8Il9QA6kdx6IPN6H5R/LgaLp1utzqt/LqCJIJWW6keJTO4kkWJXGylg&#xA;O1Tg1OqOQkCuG7+mI+79agUn/wCgP+1lff8AI7/m3MRLv0B/2sr7/kd/zbirv0B/2sr7/kd/zbir&#xA;v0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/&#xA;zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7&#xA;/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbirv0B/2sr7/kd/zbiqFufJ&#xA;Wl3XqG6muJzLw9X1WV+XpEtHy5Ka8CSV8MiYg82wZpgUCa3+3Y/Pr3pRqP5Q+Ur9QkpuY4q1kigl&#xA;EKyfCyjmEVa0Dn/ayuWCB6LiyHGJCO3GKPuSa8/IXy9ICtpdywA2625cxxGRgrKQWKLGvRevHlXc&#xA;kgUys6WLuND23PBPjNzle1yNRH80Du/QB7wjq/5JWEcTiwur66inu4ZG05pxHEYwoVzI5BNVoWD0&#xA;JHTieuCWmHTvdlpvafIa4+GJjAjj4bN3YocvKuXmEDb/AJF3OogXWq6pMJZY7hZIpy00qsW424aQ&#xA;SlZFVK16Vr9zjwSB4gSJfa3Z/aaEQccIAwuPcImt5bcO1n7vmEvv+cbYi9yNO1Q20M3oFQ4LtWOP&#xA;hKHoFDBzuNts3OPUxMRHIZzHDRHF3T4r/Q6r+XpiXFGEBLikbEQPqjw18PtQL/8AOOfmdXMKeZi9&#xA;pOFtroESIz2sA5wCT4mDkSAUXooH0ZlHtTGJcUcX8cp7zPOYo8gNvL7WH8pQlGpbGMIxFQj0Pmdu&#xA;ZuXXuU2/5xv80ywgz+YbeW4f/SZZJI53b64xBerep8S9udA3tghr8XMxnE+Hweme1d4uN35/Ymfb&#xA;AEtoxMfE4hcR8iBtX9H7UNdfkLP5cudKlfVoLhbvU7azUJavGwWZW5sW9Y9CNl79/DDqe1BknxVk&#xA;oSEqOSxty24O/f3uN/KI8Ph4Yg8JF8Ivc39218wOXJ9E5p3VuxV2KuxVhuvpqD/md5cFjNFBL+hN&#xA;bLPPE0ylfrelbBVkhNa035fRirMsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirFfP/AP0zn/bcsv8AjfFWVYq7FXYq7FWC+bILab8yfLaXGlfpdBo2tEW3GB+J&#xA;+taV8dLh4026bGu+Ks6xV2KuxV2KuxV2KuxV2KuxVTuDcCB/qwQz0/diQkJX3IBOAsocN+rl5MH1&#xA;e8/MpNdiFvb27QxmMRSRLO1uBdN6TC4HJWkMfDnVAOIPxe9Ejkt6HTYtAcJ4jKzfPh4vTv6e67rf&#xA;n0THzncaxD5K1aS7ivDOEVYk8umV75uTqtIiIpJErWjMiFlSrDcZeL6uizeHfo4vjX6Hk0EPn9dT&#xA;tvqV35jumaSxk0FHj1iKzgd9UZ9Rt7575IpJo4rLgqS3Y+MV4fFsC0sh/LsfmGnlzzK8P6WfUf0L&#xA;afUk176xzPmEW05vPQ+t/wC6PV9H7H7qteG1cVSFdc/MLT4p18sab5jZZbC2a7v9Vl1K4dJo7i2W&#xA;7YWt/p9z6dxxuJOP1QzxFULCJiKBVM9Pb83b6LRbfURqEZ81IkGpXcRkjOnR6ffPL67Ujtfq0l9p&#xA;xCf3Uf7wD4Fb4cVTn8zZ/wAyJPNVre+Wbe5bSPK0EWoajBHJPD+kHmnBlt4Yo4pFvWS1gcenyWjy&#xA;KalhxxVAHzf+bsmn6vFYaddS6np+l6izNeWklpGbxLqUWzWji0mW6lW3EZSNRwkru3KuKr9bvfzc&#xA;m836Zra2ElvpPlz6rFq+mWdzdSJeG9crdPBCbWFb4QW8kb1IT03VwvI1xVF+VfMX5matpOtw3Nve&#xA;w6paeXLdbZryy+po+uk3gnaJ2jiWQfDB9klO67GpVRf5XN5rj0rW5I4tRuYK2n6Ig8yS3lvM1wLS&#xA;P65ykuo57lIjPWn7srWvAccVS385rfzpeLpA0251qxv4rWWeCy0BLiSzuNS5whLa9voDFKkFOW7x&#xA;RqVq3NSOOKtO3n7ybrHLjqfm6ym1EsVH1xBG9zE1Fr/pvOOJDT7MVt6jD+5MeKvXsVdirsVYr5//&#xA;AOmc/wC25Zf8b4qyrFXYq7FXYqwXzZPbQ/mT5be41X9EIdG1oC55QJyP1rSvgrcJIm/XYV2xVmVj&#xA;az20bLNeTXrE1Ek4hVgKdB6McQp8xiqIxV2KuxV2KuxV2KuxV2KqdzcRW0DzzEiOMVYhWY0/1VBJ&#xA;+jATSCaYzd+eEjF7cwRhrPTxzlV0nEsqAKXZCE4oV50Ct178RvlJzcz0DSc3M9yJ8z+cbXRvK2qa&#xA;9BGLkabCJmhmZ7VDyAK8pXjbgtGqTxNPDLhIFuEgWGaf+e9pKty9zpsVzFaSXMb3Wi3qajbTGBLR&#xA;1+rTPHaLIGN8Edn4KhU1NKkFKK/5Xr5fmty9jpl5PMbO6u40llsLdWezaeOSBGkuqzt6to6FrZZU&#xA;FQSaGuKpjr/5l3Ok6Tp16dEkluNW043dhYmdFke+aS3jhsCyLInOVrsUdSR8J2xVK5/z58vWunHV&#xA;bmwuW0o8Ct3A0TAKLKC9nZxO9uP3S3SpwQtI7BgqVUjFVXWPz58maSQlzDdC49R7eSB2s4PSmSe4&#xA;t/SllubiCCMsbKZ1LSAMq7GpAKrOPLuvad5g0Kw1vTXL2GowJc27MKNwkXkAw3oR0OKphirsVdir&#xA;sVdirsVdirsVYr5//wCmc/7bll/xvirKsVdirsVdirDdffUE/M7y4bGGKeX9Ca2GSeVoVC/W9K3D&#xA;LHMa1ptx+nFWZYq7FXYq7FXYq7FXYq7FXYq7FWO6jceVxcXc93HcMIjW+McN41uxhUGsqxKYZOK0&#xA;qWB2AHbL46GU65er+lEX8LYmAKYeZLLRL7Q7y01xlTSZ4+F2zzNbqEJH+7kaNk3puGByhkxG8/LX&#xA;8pZ55tM1BVudQvHSOVbvU7ua+kkdVmiX1ZbhrjlwsOcY5VARitByxVQ/wL+S2lN9WeW3tF5uslnL&#xA;qtwsbyPKVJlge54SSCa7opdSys4pQkYqnGsL+WVlYaYmt6hZW9p5YvIVsJb6/wCJtryGD90kks0v&#xA;JpBDMG4ysSQQx7HFUo1/8vvySTy9a3OtR2VpoKvcy2t5LfyWtu51UiSb98J41kSfiCFLFaAcQABi&#xA;q9dG/JbUorm7t9QsZTqNzFdy6ha6q6TNcwxG3SSO5huFkRjG7I3Bxy5NyqWaqrO9O0+y02wt9PsY&#xA;Vt7O0jWG3gQUVI0HFVHyAxVEYqpWl3a3lrFd2k0dxazoJILiJg8bowqrI6khgR0IxVVxV2KuxV2K&#xA;uxV2KsV8/wD/AEzn/bcsv+N8VZVirsVdirsVYL5s+pf8rJ8t/XPrfpfobWqfUvrXqcvrWldfqf7z&#xA;j8/h6d6YqzS0vLW7jaS2kEqJJJCzL2khcxyL/sWUjADbZkxSgakK2B+BFj7FbC1uxV2KuxV2KuxV&#xA;2KuxVZNCk0RjcsFalSjtG2xrsyFWH35KMqNqxS78p6gbTUrK2HOG9MnpzS6leqy+oFpyjCyBqFd/&#xA;i+IVB2JzaY9dDijI841t4cOnnt923wCUV5s8pvqnk7U9CsZXWW/jWNZLm4uHpTgv96zSSL8Kfs/t&#xA;fF1JOa3JkMzZr4AD7q/G3JDD738qvMFl5kOr+XLuJvRvLa+tBrF5f3zl7fTdQtCskkzTS8TLfR0A&#xA;k2XketA1aoDXPyb1/wAx38N1rK6cLa6neXVtPSeeVPSl1GyuWijlMERkrBZsORVPiIHT4sVUdL/K&#xA;P8xNF1KfVYNVtNW1D176G2lupWglFpdWdhaw3Pqva38a3iDTuMnKB0cMelaYqyiPyD5mk8meXNEm&#xA;1OGz1LSL9bmfUNPit4QsMbTcPQh+q/Vg/CRAQYAvX54qkPm/8nPMOs3d9K11aavFcGBh+lSFacwR&#xA;RL/pC29t6K8ni/YjoBvTtiqW6J+Q3mG31uS61S7s7uxe9guLi3JRheLFfG79WdY7O3YyInwKssk1&#xA;an41X4cVQWnfkB5vtLv6zd3OnazAlzHLdaVeuEtdU4C6Hr3pgso3EiNcpIgl+sEsu8lONFXsXkTQ&#xA;rvQPJehaHePHJd6ZY29pO8JZoy8MaoxQuFYrUbVFcVTzFXYq7FXYq7FXYqxXz/8A9M5/23LL/jfF&#xA;WVYq7FXk/wCYen6vqF7bzeZ/Lxv9PXT9Tt7C00v6xqix38gh+qzyUt4GikKiVUfjxjO/MV2Ur/Ok&#xA;Ud7oWg6Rq+jz6pqEUTWt9qFxp2oaha2sq20Prz/V7aJ1uJW9SkL/AGQedHBVlKqMvdHafzH5Q0uz&#xA;mEsA8sarD6mqQTPJJEs2kKpmjL20qSmgZuVGU12r0EhYpsw5TjmJA0QejJvKnlW40aaee9nt726k&#xA;iihjuobb6s4SNaFCoeQGvFTUUr36DIY8fC52u7Q8eIiAYxBJrisb/j9VWyPLHWOxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsV8/8A/TOf9tyy/wCN8VZVirsVdirs&#xA;Vee+ernRrf8AMTy0+rWkV5bHSNaVIpzahQ/1nSyGH1uSKOtAehr9FcVZNN538qRXVvbnVrNjcc6O&#xA;LmHivAV+L4u/bFXXPnfypBNaxHVrNzdSmIMtzCQhETy8m+Lp+7p8yMVdc+d/KkE1rEdWs3N1KYgy&#xA;3MJCERPLyb4un7unzIxVDax5y8vR/UvQ1qzHO7iSXjcw7xmvIH4umKom987+VLWFZTq1nIGlhi4p&#xA;cwkgzSrEG+10XnU+2KuvfO/lS1hWU6tZyBpYYuKXMJIM0qxBvtdF51Ptirr7zv5UtLV7g6tZyBKf&#xA;AlzCWNSBt8XviqG8w+cvL0OganLa61Zrcx2k7wMlzCWEixsVK/F1riqJv/O/lSzsbm7OrWcotonl&#xA;MaXMJdgiluKjl1NNsVV/8WeVf+rzY/8ASTD/AM1YqoWHnfypeWNtdjVrOIXMSSiN7mEOodQ3Fhy6&#xA;iu+KusPO/lS8sba7GrWcQuYklEb3MIdQ6huLDl1Fd8VQ2gecvL0ukwSXOtWbTtz5l7mEHZ2Ar8Xh&#xA;iqJsvO/lS6haUatZxhZZouL3MIJMMrRFvtdG4VHtirrLzv5UuoWlGrWcYWWaLi9zCCTDK0Rb7XRu&#xA;FR7Yq6087+VLn1qatZp6MrRHlcwjkVp8Q+Loa4qhtM85eXnvdWWbWrMxxXapbhrmGgjNrAxC/F05&#xA;s304qibbzv5Unmuohq1mhtZREWa5hAcmJJeS/F0/eU+YOKuTzv5Ua+mtP0tZgwxRSmQ3MPAiVpF4&#xA;g8uq+lv8xirk87+VGvprT9LWYMMUUpkNzDwIlaReIPLqvpb/ADGKoaDzl5eOv3sTa1Z/VktLV4lN&#xA;zDxEjSXAcj4utFSv0YqiX87+VFvobT9LWZM0UsokFzDwAiaNeJPLq3q7fI4q5/O/lRb6G0/S1mTN&#xA;FLKJBcw8AImjXiTy6t6u3yOKum87+VIrq3tzq1mxuOdHFzDxXgK/F8XftiqG1Pzl5eS90lYdasxH&#xA;LdslwFuYaGMWs7AN8XTmq/TiqJufO/lSCa1iOrWbm6lMQZbmEhCInl5N8XT93T5kYqkXnPX9CvZv&#xA;LcFnqNrcznXLMiKGaOR6DnU8VYnFWc4q7FXYq7FXm2reY7y+8yOt3p2m3mgWOtwaB6FzbmW89W5t&#xA;45XuElZ/TRQ8sY4emSygnkNsVZp/hPyr/wBWax/6Rof+acVd/hPyr/1ZrH/pGh/5pxVLPM+meVND&#xA;8t6rrR0KxmGmWc956Itohz9CJpONeG1eOKpJ5RtYLzUdV0jWNE0WbULC2sryKaztFggZb5JaRMHN&#xA;w1Y3gYcwdwQeI6Yqp+RrePV9QvYdR0jQ76wt4o+Op6bYNBbi75Os9tG87SfWVj4j98gVe1AdgqzL&#xA;/CflX/qzWP8A0jQ/804q7/CflX/qzWP/AEjQ/wDNOKsB8sXltqOt6at9oWijStdGpNp0UFmFuIBp&#xA;8yxr68jsyS+ohJPFE4HbfFVPTfNfknU/zPPlS00zRP0fHDdxNKyW/wBbe/s5Iw8aRDdUCu9OS1fg&#xA;xHwrUqXoX+E/Kv8A1ZrH/pGh/wCacUO/wn5V/wCrNY/9I0P/ADTirANUvrS28zXMMGg6OdE0/VtN&#xA;0W5hezU3ckupJE3rJIGVESL61H8JjblRtxtiqH83axDpfmuSw07ytpsmjaYLBtXvJbGNwv1+f0/t&#xA;rJG0QVBUFYZqn7QVRyxS9H/wn5V/6s1j/wBI0P8AzTih3+E/Kv8A1ZrH/pGh/wCacVYT55MGmX0t&#xA;pomiaKDY6Tda1ePe2YkEiWzKqwRem0PAv8VZDy47fCa4qhvPeqaVo9hos+laDpivqtvcXbepprX8&#xA;irBbrMqC2tfTloxcK01eEe3LqMVZloeh+VtS0XT9ROiacpvbaG4KxwwSIDLGHorhaMvxbMOuKo3/&#xA;AAn5V/6s1j/0jQ/804qk3nHR9M0nyxqWp6T5e0m5vLK3lnSO6iSKKkSFySY4pGalPs7cunJeuKpd&#xA;rsOlWvljSLyx0PSv0prE1jawtPaI1vFJeFeUjIvF2VF5UXmKmgriqL8l6four6ZdHUdE0sX9hfXW&#xA;n3ElvaRpDI1rKYxIiP6jIHWh4ljQ7VOKp/8A4T8q/wDVmsf+kaH/AJpxVTuPKnl1beVrbQ9OkuAj&#xA;GGOSCKNGcD4VZ1jkKqT1IU08DirHPJ1rYa35NbVbrQNGi1cS6hCIEhVbUSWd3NbxgyNGz8f3I5Px&#xA;8TxH2cVUPINra60dQbUNI0a80+H0f0fq9hp5tre4Zlb11jWdpjIkTKAJlbi9duhxVmVv5b8u20yT&#xA;2+l2cM8ZrHLHBErqfEMFBGKpjirsVdirsVSOTyV5Zk8wDzA9mTqgdZS/qzekZY4zEkrW/P0GlWNu&#xA;KyFOQHfFU8xV2KqdzbQXVvLbXEay286NHNE4qrI44spHgQcVSTTvInlnTrSS0s4J4opmUzN9bu2k&#xA;cRxmJI3laVpGjSM8VjLcB2GKq/l7ylo3l+MRaYbtYVjWGOC4vry7ijjjFFWOO5mmSMAbfABtiqcY&#xA;q7FWPW3kDyra3d3d21rLBc3izJJJFdXSGMXLiSf6txlAtjI4DMYeBJ3xVNpdI0+XVrfVpIq6hawy&#xA;20E3JhxiuGjeVeIPE8mhTciu23fFVLWfMOgaJDHNrWp2mmQzOIoZbyeO3V5CKhFaRlBb2GKoy1ur&#xA;a7torq1lS4trhFlgniYPG8bjkroy1DKwNQRiqU3Hkzy3c66muzWhbUkaOTn6swiaSFSsUjwBxC8k&#xA;asQjshZexxVgs2peRNXvLC407y9q3mO/WEXKx204POzt7qRbS5uzd3kEE8cksTvbCZnem4Ub4qzo&#xA;ec/LKDTUvtQh0u81ZQ1jp2outneSEkDgLeYpIWDGlAOuKoKx/MHRr2LSTBBcm41a/udMSzKoJoJ7&#xA;L1vrJuF50RYvq7VIJ6rSvIYqkWraz+Vvm21t7q/ZLvUhZ3FxY6Ml2sGo3VkwLsq28U8bTwXKQh1S&#xA;SqMtCRiqezeVPJ3meztNUKzXMFyhubG7hvLuEiG7hjVlieKWNkhljRKxLRD141JOKshsrO1sbOCy&#xA;tIlhtbWNIbeFNlSONQqKPYKKYqrYqo31lbX1lcWN0nqWt1E8E8dSvKORSrLVSCKg9jiqW6j5S0HU&#xA;bEWN5DJJaJFDDHCLidFQW7iSF4+Ei8JUZQRKtH/ysVRejaLpujaemn6bD6NrGXcKWeRmeRi7u8kh&#xA;d3d3YszMxJPXFUbirsVSVvJ3l86Q2kCCVNNc3bSW0dxcRq/1/wBU3PMpIpYObhyAx+E0K0KrRVW0&#xA;Ly1pmhxyR2D3bRyBF4Xd7eXoURghRGLqWb0x8W/Cldq9BiqaYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqwv8wfJGqa7PbappF9Fa6jY2WoWKw3NsLqKaHUEQSKoMsHpy1hXjJUgbhlIxV5r5Y88/&#xA;mL5ftrzy/J9S9Lyna2S3VrdRGSVY4LDS1ltYpbeWNAfUupW9VvU37FaUVejeRfN2veZdR1vTtSto&#xA;bePRCdPvpIkded8Jpg3pFncel9VEEorU/vPbFUk0L8rdft9BsrZbuztLiPSofLur2Wo2KanZXtpp&#xA;skq2lwsST2/F2SVn+NiKPRkqMVQMv/OO8LR2NvFr80NpFbQ2OoRRpcQ+tb215LdxrHHbXVvbp/fs&#xA;hEsMqDqqqa4qyef8sHPmDzBrNpqz20mr2s8OnQ+jzWwubyKKO6uo/jHNpPq0TUotCG3PI4qgU/K6&#xA;60TVLrUtGuILjS0uF1S20GSxgluWurewFlDDFf3EnGGKka0pGGG4EgUnFWW+R/LzeW/J2iaA8vrS&#xA;aXZQWkkw6O8UYVmHsWG2Kp3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:96B20EB2F7206811B4F2887E189DD78C</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:96B20EB2F7206811B4F2887E189DD78C</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:96B20EB2F7206811B4F2887E189DD78C</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:96B20EB2F7206811B4F2887E189DD78C</stEvt:instanceID>
                  <stEvt:when>2010-02-03T11:53:09-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -509.575 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 509.575 li
533.74 509.575 li
533.74 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
76.2012 320.932 mo
529.201 320.932 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
2 lw
76.2012 450.281 mo
76.2012 10.5313 li
529.701 10.5313 li
529.701 450.281 li
76.2012 450.281 li
cp
@
1 lw
512.201 443.781 mo
512.201 450.281 li
494.701 437.031 mo
494.701 450.281 li
494.701 437.031 mo
494.701 450.281 li
477.451 443.781 mo
477.451 450.281 li
459.951 443.781 mo
459.951 450.281 li
442.451 443.781 mo
442.451 450.281 li
424.951 437.031 mo
424.951 450.281 li
407.701 443.781 mo
407.701 450.281 li
390.201 443.781 mo
390.201 450.281 li
372.701 443.781 mo
372.701 450.281 li
355.201 437.031 mo
355.201 450.281 li
337.701 443.781 mo
337.701 450.281 li
320.451 443.781 mo
320.451 450.281 li
302.951 443.781 mo
302.951 450.281 li
285.451 437.031 mo
285.451 450.281 li
267.951 443.781 mo
267.951 450.281 li
250.701 443.781 mo
250.701 450.281 li
233.201 443.781 mo
233.201 450.281 li
215.701 437.031 mo
215.701 450.281 li
198.201 443.781 mo
198.201 450.281 li
180.701 443.781 mo
180.701 450.281 li
163.451 443.781 mo
163.451 450.281 li
145.951 437.031 mo
145.951 450.281 li
128.451 443.781 mo
128.451 450.281 li
110.951 443.781 mo
110.951 450.281 li
93.7012 443.781 mo
93.7012 450.281 li
76.2012 437.031 mo
76.2012 450.281 li
@
.697627 .675227 .638575 .739559 cmyk
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/QZCVWX+Helvetica /Helvetica findfont ct_VMDictPut/QZCVWX+Helvetica*1 [48{/.notdef}rp /zero 207{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf69.9512 470.273 mo(0)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 46 /period putdup 50 /two putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf131.03 470.273 mo(0.2)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 203{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf200.866 470.273 mo(0.4)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf270.702 470.273 mo(0.6)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf340.537 470.273 mo(0.8)[11.6797 5.83398 0 ]xsh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf410.373 470.273 mo(1.0)[11.6797 5.83398 0 ]xshQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf480.209 470.273 mo(1.2)[11.6797 5.83398 0 ]xsh76.2012 450.281 mo
76.2012 10.5313 li
0 0 0 1 cmyk
@
82.9512 445.031 mo
76.2012 445.031 li
82.9512 434.781 mo
76.2012 434.781 li
89.7012 424.531 mo
76.2012 424.531 li
89.7012 10.5313 mo
76.2012 10.5313 li
82.9512 20.7813 mo
76.2012 20.7813 li
82.9512 31.0313 mo
76.2012 31.0313 li
82.9512 41.5313 mo
76.2012 41.5313 li
82.9512 51.7813 mo
76.2012 51.7813 li
89.7012 62.2813 mo
76.2012 62.2813 li
82.9512 72.5313 mo
76.2012 72.5313 li
82.9512 82.7813 mo
76.2012 82.7813 li
82.9512 93.2813 mo
76.2012 93.2813 li
82.9512 103.531 mo
76.2012 103.531 li
89.7012 114.031 mo
76.2012 114.031 li
82.9512 124.281 mo
76.2012 124.281 li
82.9512 134.531 mo
76.2012 134.531 li
82.9512 145.031 mo
76.2012 145.031 li
82.9512 155.281 mo
76.2012 155.281 li
89.7012 165.781 mo
76.2012 165.781 li
82.9512 176.031 mo
76.2012 176.031 li
82.9512 186.281 mo
76.2012 186.281 li
82.9512 196.781 mo
76.2012 196.781 li
82.9512 207.031 mo
76.2012 207.031 li
89.7012 217.531 mo
76.2012 217.531 li
82.9512 227.781 mo
76.2012 227.781 li
82.9512 238.031 mo
76.2012 238.031 li
82.9512 248.531 mo
76.2012 248.531 li
82.9512 258.781 mo
76.2012 258.781 li
89.7012 269.281 mo
76.2012 269.281 li
82.9512 279.531 mo
76.2012 279.531 li
82.9512 289.781 mo
76.2012 289.781 li
82.9512 300.281 mo
76.2012 300.281 li
82.9512 310.531 mo
76.2012 310.531 li
89.7012 321.031 mo
76.2012 321.031 li
82.9512 331.281 mo
76.2012 331.281 li
82.9512 341.531 mo
76.2012 341.531 li
82.9512 352.031 mo
76.2012 352.031 li
82.9512 362.281 mo
76.2012 362.281 li
89.7012 372.781 mo
76.2012 372.781 li
82.9512 383.031 mo
76.2012 383.031 li
82.9512 393.281 mo
76.2012 393.281 li
82.9512 403.781 mo
76.2012 403.781 li
82.9512 414.031 mo
76.2012 414.031 li
89.7012 424.531 mo
76.2012 424.531 li
@
.697627 .675227 .638575 .739559 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 45 /hyphen putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf33.502 432.031 mo(-0.2)shQZCVWX+Helvetica*1 [20.6544 0 0 -20.6544 0 0 ]msf58.2012 328.697 mo(0)shQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf40.4951 225.031 mo(0.2)shQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf40.4951 121.531 mo(0.4)shQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf40.4951 18.0313 mo(0.6)sh[9.24 2.76 ] 4.62 dsh
73.7012 301.031 mo
85.7012 301.031 li
75.9932 308.085 li
79.7012 296.672 li
83.4092 308.085 li
73.7012 301.031 li
cp
80.7012 418.281 mo
92.7012 418.281 li
82.9932 425.335 li
86.7012 413.922 li
90.4092 425.335 li
80.7012 418.281 li
cp
87.7012 295.031 mo
99.7012 295.031 li
89.9932 302.085 li
93.7012 290.672 li
97.4092 302.085 li
87.7012 295.031 li
cp
94.4512 166.531 mo
106.451 166.531 li
96.7432 173.584 li
100.451 162.172 li
104.159 173.584 li
94.4512 166.531 li
cp
101.451 127.281 mo
113.451 127.281 li
103.743 134.334 li
107.451 122.922 li
111.159 134.334 li
101.451 127.281 li
cp
108.451 160.281 mo
120.451 160.281 li
110.743 167.334 li
114.451 155.922 li
118.159 167.334 li
108.451 160.281 li
cp
115.451 180.531 mo
127.451 180.531 li
117.743 187.584 li
121.451 176.172 li
125.159 187.584 li
115.451 180.531 li
cp
122.451 185.281 mo
134.451 185.281 li
124.743 192.334 li
128.451 180.922 li
132.159 192.334 li
122.451 185.281 li
cp
129.451 187.531 mo
141.451 187.531 li
131.743 194.584 li
135.451 183.172 li
139.159 194.584 li
129.451 187.531 li
cp
136.451 188.781 mo
148.451 188.781 li
138.743 195.834 li
142.451 184.422 li
146.159 195.834 li
136.451 188.781 li
cp
143.451 207.281 mo
155.451 207.281 li
145.743 214.334 li
149.451 202.922 li
153.159 214.334 li
143.451 207.281 li
cp
150.451 205.281 mo
162.451 205.281 li
152.743 212.334 li
156.451 200.922 li
160.159 212.334 li
150.451 205.281 li
cp
157.451 196.281 mo
169.451 196.281 li
159.743 203.334 li
163.451 191.922 li
167.159 203.334 li
157.451 196.281 li
cp
164.451 196.531 mo
176.451 196.531 li
166.743 203.584 li
170.451 192.172 li
174.159 203.584 li
164.451 196.531 li
cp
171.201 188.781 mo
183.201 188.781 li
173.493 195.834 li
177.201 184.422 li
180.909 195.834 li
171.201 188.781 li
cp
178.201 179.531 mo
190.201 179.531 li
180.493 186.584 li
184.201 175.172 li
187.909 186.584 li
178.201 179.531 li
cp
185.201 168.531 mo
197.201 168.531 li
187.493 175.584 li
191.201 164.172 li
194.909 175.584 li
185.201 168.531 li
cp
192.201 158.281 mo
204.201 158.281 li
194.493 165.334 li
198.201 153.922 li
201.909 165.334 li
192.201 158.281 li
cp
199.201 137.281 mo
211.201 137.281 li
201.493 144.334 li
205.201 132.922 li
208.909 144.334 li
199.201 137.281 li
cp
206.201 66.7813 mo
218.201 66.7813 li
208.493 73.8345 li
212.201 62.4219 li
215.909 73.8345 li
206.201 66.7813 li
cp
213.201 91.0313 mo
225.201 91.0313 li
215.493 98.0845 li
219.201 86.6719 li
222.909 98.0845 li
213.201 91.0313 li
cp
220.201 182.031 mo
232.201 182.031 li
222.493 189.084 li
226.201 177.672 li
229.909 189.084 li
220.201 182.031 li
cp
227.201 199.531 mo
239.201 199.531 li
229.493 206.584 li
233.201 195.172 li
236.909 206.584 li
227.201 199.531 li
cp
234.201 197.531 mo
246.201 197.531 li
236.493 204.584 li
240.201 193.172 li
243.909 204.584 li
234.201 197.531 li
cp
241.201 207.781 mo
253.201 207.781 li
243.493 214.834 li
247.201 203.422 li
250.909 214.834 li
241.201 207.781 li
cp
247.951 214.531 mo
259.951 214.531 li
250.243 221.584 li
253.951 210.172 li
257.659 221.584 li
247.951 214.531 li
cp
254.951 211.281 mo
266.951 211.281 li
257.243 218.334 li
260.951 206.922 li
264.659 218.334 li
254.951 211.281 li
cp
261.951 224.281 mo
273.951 224.281 li
264.243 231.335 li
267.951 219.922 li
271.659 231.335 li
261.951 224.281 li
cp
268.951 233.031 mo
280.951 233.031 li
271.243 240.085 li
274.951 228.672 li
278.659 240.085 li
268.951 233.031 li
cp
275.951 226.781 mo
287.951 226.781 li
278.243 233.835 li
281.951 222.422 li
285.659 233.835 li
275.951 226.781 li
cp
282.951 235.781 mo
294.951 235.781 li
285.243 242.835 li
288.951 231.422 li
292.659 242.835 li
282.951 235.781 li
cp
289.951 247.031 mo
301.951 247.031 li
292.243 254.085 li
295.951 242.672 li
299.659 254.085 li
289.951 247.031 li
cp
296.951 239.781 mo
308.951 239.781 li
299.243 246.835 li
302.951 235.422 li
306.659 246.835 li
296.951 239.781 li
cp
303.951 255.281 mo
315.951 255.281 li
306.243 262.335 li
309.951 250.922 li
313.659 262.335 li
303.951 255.281 li
cp
310.951 252.031 mo
322.951 252.031 li
313.243 259.085 li
316.951 247.672 li
320.659 259.085 li
310.951 252.031 li
cp
317.951 255.031 mo
329.951 255.031 li
320.243 262.085 li
323.951 250.672 li
327.659 262.085 li
317.951 255.031 li
cp
324.701 267.031 mo
336.701 267.031 li
326.993 274.085 li
330.701 262.672 li
334.409 274.085 li
324.701 267.031 li
cp
331.701 281.781 mo
343.701 281.781 li
333.993 288.835 li
337.701 277.422 li
341.409 288.835 li
331.701 281.781 li
cp
338.701 283.281 mo
350.701 283.281 li
340.993 290.335 li
344.701 278.922 li
348.409 290.335 li
338.701 283.281 li
cp
345.701 278.031 mo
357.701 278.031 li
347.993 285.085 li
351.701 273.672 li
355.409 285.085 li
345.701 278.031 li
cp
352.701 297.531 mo
364.701 297.531 li
354.993 304.585 li
358.701 293.172 li
362.409 304.585 li
352.701 297.531 li
cp
359.701 306.781 mo
371.701 306.781 li
361.993 313.835 li
365.701 302.422 li
369.409 313.835 li
359.701 306.781 li
cp
366.701 305.031 mo
378.701 305.031 li
368.993 312.085 li
372.701 300.672 li
376.409 312.085 li
366.701 305.031 li
cp
373.701 303.281 mo
385.701 303.281 li
375.993 310.335 li
379.701 298.922 li
383.409 310.335 li
373.701 303.281 li
cp
380.701 305.281 mo
392.701 305.281 li
382.993 312.335 li
386.701 300.922 li
390.409 312.335 li
380.701 305.281 li
cp
387.701 311.281 mo
399.701 311.281 li
389.993 318.335 li
393.701 306.922 li
397.409 318.335 li
387.701 311.281 li
cp
394.701 304.281 mo
406.701 304.281 li
396.993 311.335 li
400.701 299.922 li
404.409 311.335 li
394.701 304.281 li
cp
401.701 310.031 mo
413.701 310.031 li
403.993 317.085 li
407.701 305.672 li
411.409 317.085 li
401.701 310.031 li
cp
408.451 315.031 mo
420.451 315.031 li
410.743 322.085 li
414.451 310.672 li
418.159 322.085 li
408.451 315.031 li
cp
415.451 309.281 mo
427.451 309.281 li
417.743 316.335 li
421.451 304.922 li
425.159 316.335 li
415.451 309.281 li
cp
422.451 317.781 mo
434.451 317.781 li
424.743 324.835 li
428.451 313.422 li
432.159 324.835 li
422.451 317.781 li
cp
429.451 315.781 mo
441.451 315.781 li
431.743 322.835 li
435.451 311.422 li
439.159 322.835 li
429.451 315.781 li
cp
436.451 317.281 mo
448.451 317.281 li
438.743 324.335 li
442.451 312.922 li
446.159 324.335 li
436.451 317.281 li
cp
443.451 322.031 mo
455.451 322.031 li
445.743 329.085 li
449.451 317.672 li
453.159 329.085 li
443.451 322.031 li
cp
450.451 318.781 mo
462.451 318.781 li
452.743 325.835 li
456.451 314.422 li
460.159 325.835 li
450.451 318.781 li
cp
457.451 318.031 mo
469.451 318.031 li
459.743 325.085 li
463.451 313.672 li
467.159 325.085 li
457.451 318.031 li
cp
464.451 316.281 mo
476.451 316.281 li
466.743 323.335 li
470.451 311.922 li
474.159 323.335 li
464.451 316.281 li
cp
471.451 317.531 mo
483.451 317.531 li
473.743 324.585 li
477.451 313.172 li
481.159 324.585 li
471.451 317.531 li
cp
478.451 316.531 mo
490.451 316.531 li
480.743 323.585 li
484.451 312.172 li
488.159 323.585 li
478.451 316.531 li
cp
485.201 319.781 mo
497.201 319.781 li
487.493 326.835 li
491.201 315.422 li
494.909 326.835 li
485.201 319.781 li
cp
492.201 320.031 mo
504.201 320.031 li
494.493 327.085 li
498.201 315.672 li
501.909 327.085 li
492.201 320.031 li
cp
499.201 319.031 mo
511.201 319.031 li
501.493 326.085 li
505.201 314.672 li
508.909 326.085 li
499.201 319.031 li
cp
506.201 318.531 mo
518.201 318.531 li
508.493 325.585 li
512.201 314.172 li
515.909 325.585 li
506.201 318.531 li
cp
513.201 318.281 mo
525.201 318.281 li
515.493 325.335 li
519.201 313.922 li
522.909 325.335 li
513.201 318.281 li
cp
520.201 318.781 mo
532.201 318.781 li
522.493 325.835 li
526.201 314.422 li
529.909 325.835 li
520.201 318.781 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1.5 lw
[] 0 dsh
364.201 312.281 mo
367.201 312.281 li
365.701 312.031 mo
365.701 312.281 li
364.201 305.281 mo
367.201 305.281 li
365.701 305.281 mo
357.201 303.281 mo
360.201 303.281 li
358.701 303.031 mo
358.701 303.281 li
357.201 296.031 mo
360.201 296.031 li
358.701 296.281 mo
358.701 296.031 li
350.451 283.781 mo
353.201 283.781 li
351.701 283.281 mo
351.701 283.781 li
350.451 276.281 mo
353.201 276.281 li
351.701 276.531 mo
351.701 276.281 li
343.451 289.281 mo
346.201 289.281 li
344.701 288.781 mo
344.701 289.281 li
343.451 281.531 mo
346.201 281.531 li
344.701 282.031 mo
344.701 281.531 li
336.451 287.781 mo
339.201 287.781 li
337.701 287.281 mo
337.701 287.781 li
336.451 279.781 mo
339.201 279.781 li
337.701 280.281 mo
337.701 279.781 li
329.451 273.281 mo
332.201 273.281 li
330.701 272.531 mo
330.701 273.281 li
329.451 265.031 mo
332.201 265.031 li
330.701 265.531 mo
330.701 265.031 li
322.451 261.281 mo
325.201 261.281 li
323.951 260.531 mo
323.951 261.281 li
322.451 252.781 mo
325.201 252.781 li
323.951 253.531 mo
323.951 252.781 li
315.451 258.281 mo
318.201 258.281 li
316.951 257.281 mo
316.951 258.281 li
315.451 249.531 mo
318.201 249.531 li
316.951 250.531 mo
316.951 249.531 li
308.451 261.531 mo
311.201 261.531 li
309.951 260.531 mo
309.951 261.531 li
308.451 252.781 mo
311.201 252.781 li
309.951 253.781 mo
309.951 252.781 li
301.451 246.031 mo
304.451 246.031 li
302.951 245.031 mo
302.951 246.031 li
301.451 237.281 mo
304.451 237.281 li
302.951 238.281 mo
302.951 237.281 li
294.451 253.531 mo
297.451 253.531 li
295.951 252.281 mo
295.951 253.531 li
294.451 244.531 mo
297.451 244.531 li
295.951 245.531 mo
295.951 244.531 li
287.451 242.281 mo
290.451 242.281 li
288.951 241.281 mo
288.951 242.281 li
287.451 233.531 mo
290.451 233.531 li
288.951 234.531 mo
288.951 233.531 li
280.451 233.281 mo
283.451 233.281 li
281.951 232.281 mo
281.951 233.281 li
280.451 224.281 mo
283.451 224.281 li
281.951 225.281 mo
281.951 224.281 li
273.701 239.531 mo
276.451 239.531 li
274.951 238.531 mo
274.951 239.531 li
273.701 230.531 mo
276.451 230.531 li
274.951 231.531 mo
274.951 230.531 li
266.701 230.531 mo
269.451 230.531 li
267.951 229.531 mo
267.951 230.531 li
266.701 221.781 mo
269.451 221.781 li
267.951 222.781 mo
267.951 221.781 li
259.701 217.781 mo
262.451 217.781 li
260.951 216.781 mo
260.951 217.781 li
259.701 209.031 mo
262.451 209.031 li
260.951 210.031 mo
260.951 209.031 li
252.701 220.781 mo
255.451 220.781 li
253.951 220.031 mo
253.951 220.781 li
252.701 212.281 mo
255.451 212.281 li
253.951 213.031 mo
253.951 212.281 li
245.701 214.031 mo
248.451 214.031 li
247.201 213.281 mo
247.201 214.031 li
245.701 205.531 mo
248.451 205.531 li
247.201 206.531 mo
247.201 205.531 li
238.701 203.781 mo
241.451 203.781 li
240.201 203.031 mo
240.201 203.781 li
238.701 195.281 mo
241.451 195.281 li
240.201 196.031 mo
240.201 195.281 li
231.701 205.531 mo
234.451 205.531 li
233.201 205.031 mo
233.201 205.531 li
231.701 197.531 mo
234.451 197.531 li
233.201 198.281 mo
233.201 197.531 li
224.701 188.031 mo
227.701 188.031 li
226.201 187.531 mo
226.201 188.031 li
224.701 180.031 mo
227.701 180.031 li
226.201 180.531 mo
226.201 180.031 li
217.701 97.0313 mo
220.701 97.0313 li
219.201 96.5313 mo
219.201 97.0313 li
217.701 89.0313 mo
220.701 89.0313 li
219.201 89.5313 mo
219.201 89.0313 li
210.701 72.5313 mo
213.701 72.5313 li
212.201 72.0313 mo
212.201 72.5313 li
210.701 64.7813 mo
213.701 64.7813 li
212.201 65.2813 mo
212.201 64.7813 li
203.701 143.031 mo
206.701 143.031 li
205.201 142.781 mo
205.201 143.031 li
203.701 135.531 mo
206.701 135.531 li
205.201 135.781 mo
205.201 135.531 li
196.951 164.031 mo
199.701 164.031 li
198.201 163.781 mo
198.201 164.031 li
196.951 156.781 mo
199.701 156.781 li
198.201 157.031 mo
198.201 156.781 li
189.951 174.031 mo
192.701 174.031 li
191.201 174.031 mo
189.951 167.031 mo
192.701 167.031 li
191.201 167.031 mo
182.951 185.031 mo
185.701 185.031 li
184.201 185.031 mo
182.951 178.031 mo
185.701 178.031 li
184.201 178.031 mo
522.451 320.781 mo
529.201 320.781 li
484.701 320.781 mo
522.451 320.781 li
447.201 319.781 mo
450.201 319.781 li
450.951 320.031 li
457.951 320.031 li
458.701 320.281 li
467.951 320.281 li
468.701 320.531 li
483.951 320.531 li
484.701 320.781 li
409.451 316.531 mo
410.451 316.531 li
411.201 316.781 li
411.951 316.781 li
412.701 317.031 li
414.201 317.031 li
414.951 317.281 li
415.701 317.281 li
416.451 317.531 li
417.951 317.531 li
418.701 317.781 li
420.201 317.781 li
421.201 318.031 li
422.701 318.031 li
423.451 318.281 li
425.701 318.281 li
426.451 318.531 li
428.701 318.531 li
429.451 318.781 li
431.951 318.781 li
432.701 319.031 li
435.701 319.031 li
436.451 319.281 li
440.201 319.281 li
440.951 319.531 li
444.951 319.531 li
445.701 319.781 li
447.201 319.781 li
371.951 307.281 mo
372.701 307.531 li
373.451 307.781 li
374.201 308.281 li
374.951 308.531 li
375.701 308.781 li
376.451 309.031 li
377.451 309.281 li
378.201 309.531 li
378.951 309.781 li
379.701 310.031 li
380.451 310.281 li
381.201 310.531 li
381.951 310.531 li
382.701 310.781 li
383.451 311.031 li
384.201 311.281 li
384.951 311.531 li
385.701 311.781 li
386.451 312.031 li
387.201 312.031 li
388.201 312.281 li
388.951 312.531 li
389.701 312.781 li
390.451 313.031 li
391.201 313.031 li
391.951 313.281 li
392.701 313.531 li
393.451 313.531 li
394.201 313.781 li
394.951 314.031 li
395.701 314.031 li
396.451 314.281 li
397.201 314.531 li
397.951 314.531 li
398.701 314.781 li
399.701 314.781 li
400.451 315.031 li
401.201 315.281 li
401.951 315.281 li
402.701 315.531 li
403.451 315.531 li
404.201 315.781 li
404.951 315.781 li
405.701 316.031 li
406.451 316.031 li
407.201 316.281 li
407.951 316.281 li
408.701 316.531 li
409.451 316.531 li
334.451 286.281 mo
335.201 287.031 li
335.951 287.531 li
336.701 288.031 li
337.451 288.531 li
338.201 289.281 li
338.951 289.781 li
339.701 290.281 li
340.451 290.781 li
341.201 291.281 li
341.951 291.781 li
342.701 292.281 li
343.451 292.781 li
344.451 293.281 li
345.201 293.781 li
345.951 294.281 li
346.701 294.781 li
347.451 295.281 li
348.201 295.781 li
348.951 296.281 li
349.701 296.781 li
350.451 297.281 li
351.201 297.531 li
351.951 298.031 li
352.701 298.531 li
353.451 298.781 li
354.201 299.281 li
354.951 299.781 li
355.951 300.031 li
356.701 300.531 li
357.451 301.031 li
358.201 301.281 li
358.951 301.781 li
359.701 302.031 li
360.451 302.531 li
361.201 302.781 li
361.951 303.281 li
362.701 303.531 li
363.451 303.781 li
364.201 304.281 li
364.951 304.531 li
365.701 304.781 li
366.701 305.281 li
367.451 305.531 li
368.201 305.781 li
368.951 306.031 li
369.701 306.531 li
370.451 306.781 li
371.201 307.031 li
371.951 307.281 li
296.701 249.531 mo
297.451 250.281 li
298.201 251.281 li
298.951 252.031 li
299.701 253.031 li
300.701 253.781 li
301.451 254.781 li
302.201 255.531 li
302.951 256.531 li
303.701 257.281 li
304.451 258.281 li
305.201 259.031 li
305.951 259.781 li
306.701 260.781 li
307.451 261.531 li
308.201 262.281 li
308.951 263.281 li
309.701 264.031 li
310.451 264.781 li
311.201 265.531 li
312.201 266.281 li
312.951 267.281 li
313.701 268.031 li
314.451 268.781 li
315.201 269.531 li
315.951 270.281 li
316.701 271.031 li
317.451 271.781 li
318.201 272.531 li
318.951 273.281 li
319.701 274.031 li
320.451 274.531 li
321.201 275.281 li
321.951 276.031 li
322.951 276.781 li
323.701 277.531 li
324.451 278.031 li
325.201 278.781 li
325.951 279.531 li
326.701 280.031 li
327.451 280.781 li
328.201 281.531 li
328.951 282.031 li
329.701 282.781 li
330.451 283.281 li
331.201 284.031 li
331.951 284.531 li
332.701 285.281 li
333.701 285.781 li
334.451 286.281 li
259.201 202.531 mo
259.951 203.531 li
260.701 204.531 li
261.451 205.281 li
262.201 206.281 li
262.951 207.281 li
263.701 208.281 li
264.451 209.281 li
265.201 210.031 li
265.951 211.031 li
266.701 212.031 li
267.451 213.031 li
268.451 214.031 li
269.201 215.031 li
269.951 216.031 li
270.701 217.031 li
271.451 217.781 li
272.201 218.781 li
272.951 219.781 li
273.701 220.781 li
274.451 221.781 li
275.201 222.781 li
275.951 223.781 li
276.701 224.781 li
277.451 225.781 li
278.201 226.781 li
279.201 227.781 li
279.951 228.531 li
280.701 229.531 li
281.451 230.531 li
282.201 231.531 li
282.951 232.531 li
283.701 233.531 li
284.451 234.531 li
285.201 235.281 li
285.951 236.281 li
286.701 237.281 li
287.451 238.281 li
288.201 239.281 li
288.951 240.281 li
289.951 241.031 li
290.701 242.031 li
291.451 243.031 li
292.201 244.031 li
292.951 244.781 li
293.701 245.781 li
294.451 246.781 li
295.201 247.531 li
295.951 248.531 li
296.701 249.531 li
221.451 95.7813 mo
222.201 100.031 li
222.951 105.531 li
223.701 112.031 li
224.701 119.031 li
225.451 126.281 li
226.201 133.281 li
226.951 140.281 li
227.701 146.531 li
228.451 152.031 li
229.201 157.031 li
229.951 161.281 li
230.701 165.031 li
231.451 168.031 li
232.201 170.281 li
232.951 172.281 li
233.701 174.031 li
234.451 175.281 li
235.451 176.531 li
236.201 177.531 li
236.951 178.281 li
237.701 179.281 li
238.451 180.031 li
239.201 180.781 li
239.951 181.531 li
240.701 182.281 li
241.451 183.031 li
242.201 183.781 li
242.951 184.531 li
243.701 185.281 li
244.451 186.031 li
245.201 186.781 li
246.201 187.781 li
246.951 188.531 li
247.701 189.281 li
248.451 190.031 li
249.201 191.031 li
249.951 191.781 li
250.701 192.781 li
251.451 193.531 li
252.201 194.531 li
252.951 195.281 li
253.701 196.281 li
254.451 197.031 li
255.201 198.031 li
255.951 198.781 li
256.951 199.781 li
257.701 200.781 li
258.451 201.531 li
259.201 202.531 li
183.951 175.531 mo
184.701 174.781 li
185.451 174.031 li
186.201 173.531 li
186.951 173.031 li
187.701 172.281 li
188.451 171.781 li
189.201 171.281 li
189.951 170.781 li
190.701 170.281 li
191.701 169.781 li
192.451 169.281 li
193.201 168.781 li
193.951 168.531 li
194.701 168.031 li
195.451 167.781 li
196.201 167.281 li
196.951 167.031 li
197.701 166.781 li
198.451 166.531 li
199.201 166.281 li
199.951 166.031 li
200.701 165.781 li
201.451 165.531 li
202.451 165.281 li
203.201 165.031 li
203.951 164.531 li
204.701 164.031 li
205.451 163.531 li
206.201 162.531 li
206.951 161.531 li
207.701 159.781 li
208.451 158.031 li
209.201 155.281 li
209.951 152.281 li
210.701 148.531 li
211.451 143.781 li
212.201 138.531 li
213.201 132.781 li
213.951 126.531 li
214.701 120.031 li
215.451 113.531 li
216.201 107.281 li
216.951 101.531 li
217.701 97.0313 li
218.451 93.5313 li
219.201 91.7813 li
219.951 91.5313 li
220.701 92.7813 li
221.451 95.7813 li
146.201 230.031 mo
146.951 228.781 li
147.951 227.281 li
148.701 226.031 li
149.451 224.531 li
150.201 223.031 li
150.951 221.781 li
151.701 220.281 li
152.451 219.031 li
153.201 217.531 li
153.951 216.281 li
154.701 215.031 li
155.451 213.531 li
156.201 212.281 li
156.951 211.031 li
157.701 209.781 li
158.701 208.531 li
159.451 207.281 li
160.201 206.031 li
160.951 204.781 li
161.701 203.531 li
162.451 202.281 li
163.201 201.031 li
163.951 199.781 li
164.701 198.781 li
165.451 197.531 li
166.201 196.531 li
166.951 195.281 li
167.701 194.281 li
168.451 193.031 li
169.451 192.031 li
170.201 191.031 li
170.951 190.031 li
171.701 189.031 li
172.451 188.031 li
173.201 187.031 li
173.951 186.031 li
174.701 185.031 li
175.451 184.281 li
176.201 183.281 li
176.951 182.531 li
177.701 181.531 li
178.451 180.781 li
179.201 180.031 li
179.951 179.031 li
180.951 178.281 li
181.701 177.531 li
182.451 176.781 li
183.201 176.281 li
183.951 175.531 li
@
1 lw
331.951 271.531 mo
334.951 271.531 li
333.451 271.031 mo
333.451 271.531 li
331.951 259.281 mo
334.951 259.281 li
333.451 259.781 mo
333.451 259.281 li
314.451 260.281 mo
317.451 260.281 li
315.951 259.031 mo
315.951 260.281 li
314.451 246.531 mo
317.451 246.531 li
315.951 247.781 mo
315.951 246.531 li
305.951 267.031 mo
308.701 267.031 li
307.201 265.531 mo
307.201 267.031 li
305.951 252.531 mo
308.701 252.531 li
307.201 254.031 mo
307.201 252.531 li
297.201 247.781 mo
299.951 247.781 li
298.451 245.781 mo
298.451 247.781 li
297.201 232.281 mo
299.951 232.281 li
298.451 234.281 mo
298.451 232.281 li
288.451 240.281 mo
291.201 240.281 li
289.951 238.031 mo
289.951 240.281 li
288.451 224.281 mo
291.201 224.281 li
289.951 226.531 mo
289.951 224.281 li
279.701 255.281 mo
282.451 255.281 li
281.201 252.781 mo
281.201 255.281 li
279.701 239.031 mo
282.451 239.031 li
281.201 241.531 mo
281.201 239.031 li
270.951 235.281 mo
273.701 235.281 li
272.451 232.531 mo
272.451 235.281 li
270.951 218.281 mo
273.701 218.281 li
272.451 221.031 mo
272.451 218.281 li
262.201 219.031 mo
265.201 219.031 li
263.701 216.031 mo
263.701 219.031 li
262.201 201.531 mo
265.201 201.531 li
263.701 204.781 mo
263.701 201.531 li
253.451 218.031 mo
256.451 218.031 li
254.951 215.031 mo
254.951 218.031 li
253.451 200.281 mo
256.451 200.281 li
254.951 203.531 mo
254.951 200.281 li
244.701 241.531 mo
247.701 241.531 li
246.201 238.281 mo
246.201 241.531 li
244.701 223.531 mo
247.701 223.531 li
246.201 226.781 mo
246.201 223.531 li
236.201 209.531 mo
238.951 209.531 li
237.451 206.031 mo
237.451 209.531 li
236.201 191.281 mo
238.951 191.281 li
237.451 194.531 mo
237.451 191.281 li
227.451 213.531 mo
230.201 213.531 li
228.701 210.031 mo
228.701 213.531 li
227.451 195.031 mo
230.201 195.031 li
228.701 198.531 mo
228.701 195.031 li
209.951 227.031 mo
212.701 227.031 li
211.451 223.531 mo
211.451 227.031 li
209.951 208.531 mo
212.701 208.531 li
211.451 212.031 mo
211.451 208.531 li
201.201 196.781 mo
203.951 196.781 li
202.701 193.281 mo
202.701 196.781 li
201.201 178.281 mo
203.951 178.281 li
202.701 181.781 mo
202.701 178.281 li
192.451 228.531 mo
195.201 228.531 li
193.951 225.031 mo
193.951 228.531 li
192.451 210.281 mo
195.201 210.281 li
193.951 213.781 mo
193.951 210.281 li
183.701 201.281 mo
186.701 201.281 li
185.201 197.781 mo
185.201 201.281 li
183.701 183.031 mo
186.701 183.031 li
185.201 186.531 mo
185.201 183.031 li
174.951 202.281 mo
177.951 202.281 li
176.451 198.781 mo
176.451 202.281 li
174.951 184.031 mo
177.951 184.031 li
176.451 187.531 mo
176.451 184.031 li
166.201 191.281 mo
169.201 191.281 li
167.701 188.031 mo
167.701 191.281 li
166.201 173.281 mo
169.201 173.281 li
167.701 176.531 mo
167.701 173.281 li
157.701 200.031 mo
160.451 200.031 li
158.951 197.031 mo
158.951 200.031 li
157.701 182.531 mo
160.451 182.531 li
158.951 185.531 mo
158.951 182.531 li
148.951 199.781 mo
151.701 199.781 li
150.201 196.781 mo
150.201 199.781 li
148.951 182.531 mo
151.701 182.531 li
150.201 185.281 mo
150.201 182.531 li
140.201 217.281 mo
142.951 217.281 li
141.451 214.531 mo
141.451 217.281 li
140.201 200.531 mo
142.951 200.531 li
141.451 203.281 mo
141.451 200.531 li
131.451 210.781 mo
134.201 210.781 li
132.951 208.281 mo
132.951 210.781 li
131.451 194.531 mo
134.201 194.531 li
132.951 196.781 mo
132.951 194.531 li
122.701 222.781 mo
125.451 222.781 li
124.201 221.031 mo
124.201 222.781 li
122.701 207.531 mo
125.451 207.531 li
124.201 209.531 mo
124.201 207.531 li
113.951 248.281 mo
116.701 248.281 li
115.451 247.031 mo
115.451 248.281 li
113.951 234.531 mo
116.701 234.531 li
115.451 235.781 mo
115.451 234.531 li
105.201 259.281 mo
108.201 259.281 li
106.701 258.781 mo
106.701 259.281 li
105.201 247.281 mo
108.201 247.281 li
106.701 247.531 mo
106.701 247.281 li
.878019 .337896 1 .281529 cmyk
@
86.5313 320.361 mo
86.5313 317.049 83.8433 314.361 80.5313 314.361 cv
77.2192 314.361 74.5313 317.049 74.5313 320.361 cv
74.5313 323.673 77.2192 326.361 80.5313 326.361 cv
83.8433 326.361 86.5313 323.673 86.5313 320.361 cv
95.1714 307.401 mo
95.1714 304.089 92.4834 301.401 89.1714 301.401 cv
85.8594 301.401 83.1714 304.089 83.1714 307.401 cv
83.1714 310.713 85.8594 313.401 89.1714 313.401 cv
92.4834 313.401 95.1714 310.713 95.1714 307.401 cv
104.051 287.001 mo
104.051 283.689 101.363 281.001 98.0513 281.001 cv
94.7393 281.001 92.0513 283.689 92.0513 287.001 cv
92.0513 290.313 94.7393 293.001 98.0513 293.001 cv
101.363 293.001 104.051 290.313 104.051 287.001 cv
112.691 253.281 mo
112.691 249.969 110.003 247.281 106.691 247.281 cv
103.379 247.281 100.691 249.969 100.691 253.281 cv
100.691 256.593 103.379 259.281 106.691 259.281 cv
110.003 259.281 112.691 256.593 112.691 253.281 cv
121.451 241.642 mo
121.451 238.329 118.763 235.642 115.451 235.642 cv
112.139 235.642 109.451 238.329 109.451 241.642 cv
109.451 244.953 112.139 247.642 115.451 247.642 cv
118.763 247.642 121.451 244.953 121.451 241.642 cv
130.211 215.241 mo
130.211 211.929 127.523 209.241 124.211 209.241 cv
120.899 209.241 118.211 211.929 118.211 215.241 cv
118.211 218.553 120.899 221.241 124.211 221.241 cv
127.523 221.241 130.211 218.553 130.211 215.241 cv
138.851 202.521 mo
138.851 199.209 136.163 196.521 132.851 196.521 cv
129.539 196.521 126.851 199.209 126.851 202.521 cv
126.851 205.833 129.539 208.521 132.851 208.521 cv
136.163 208.521 138.851 205.833 138.851 202.521 cv
147.491 209.001 mo
147.491 205.689 144.803 203.001 141.491 203.001 cv
138.179 203.001 135.491 205.689 135.491 209.001 cv
135.491 212.313 138.179 215.001 141.491 215.001 cv
144.803 215.001 147.491 212.313 147.491 209.001 cv
156.131 191.001 mo
156.131 187.689 153.443 185.001 150.131 185.001 cv
146.819 185.001 144.131 187.689 144.131 191.001 cv
144.131 194.313 146.819 197.001 150.131 197.001 cv
153.443 197.001 156.131 194.313 156.131 191.001 cv
165.011 191.241 mo
165.011 187.929 162.323 185.241 159.011 185.241 cv
155.699 185.241 153.011 187.929 153.011 191.241 cv
153.011 194.553 155.699 197.241 159.011 197.241 cv
162.323 197.241 165.011 194.553 165.011 191.241 cv
173.651 182.361 mo
173.651 179.049 170.963 176.361 167.651 176.361 cv
164.339 176.361 161.651 179.049 161.651 182.361 cv
161.651 185.673 164.339 188.361 167.651 188.361 cv
170.963 188.361 173.651 185.673 173.651 182.361 cv
182.531 193.281 mo
182.531 189.969 179.843 187.281 176.531 187.281 cv
173.219 187.281 170.531 189.969 170.531 193.281 cv
170.531 196.593 173.219 199.281 176.531 199.281 cv
179.843 199.281 182.531 196.593 182.531 193.281 cv
191.171 192.201 mo
191.171 188.889 188.483 186.201 185.171 186.201 cv
181.859 186.201 179.171 188.889 179.171 192.201 cv
179.171 195.513 181.859 198.201 185.171 198.201 cv
188.483 198.201 191.171 195.513 191.171 192.201 cv
200.051 219.561 mo
200.051 216.249 197.363 213.561 194.051 213.561 cv
190.739 213.561 188.051 216.249 188.051 219.561 cv
188.051 222.873 190.739 225.562 194.051 225.562 cv
197.363 225.562 200.051 222.873 200.051 219.561 cv
208.691 187.641 mo
208.691 184.329 206.003 181.641 202.691 181.641 cv
199.379 181.641 196.691 184.329 196.691 187.641 cv
196.691 190.953 199.379 193.641 202.691 193.641 cv
206.003 193.641 208.691 190.953 208.691 187.641 cv
217.451 217.881 mo
217.451 214.569 214.763 211.881 211.451 211.881 cv
208.139 211.881 205.451 214.569 205.451 217.881 cv
205.451 221.193 208.139 223.882 211.451 223.882 cv
214.763 223.882 217.451 221.193 217.451 217.881 cv
234.611 204.201 mo
234.611 200.889 231.923 198.201 228.611 198.201 cv
225.299 198.201 222.611 200.889 222.611 204.201 cv
222.611 207.513 225.299 210.201 228.611 210.201 cv
231.923 210.201 234.611 207.513 234.611 204.201 cv
243.491 200.361 mo
243.491 197.049 240.803 194.361 237.491 194.361 cv
234.179 194.361 231.491 197.049 231.491 200.361 cv
231.491 203.673 234.179 206.361 237.491 206.361 cv
240.803 206.361 243.491 203.673 243.491 200.361 cv
252.131 232.521 mo
252.131 229.209 249.443 226.521 246.131 226.521 cv
242.819 226.521 240.131 229.209 240.131 232.521 cv
240.131 235.833 242.819 238.521 246.131 238.521 cv
249.443 238.521 252.131 235.833 252.131 232.521 cv
261.012 209.241 mo
261.012 205.929 258.323 203.241 255.011 203.241 cv
251.699 203.241 249.011 205.929 249.011 209.241 cv
249.011 212.553 251.699 215.241 255.011 215.241 cv
258.323 215.241 261.012 212.553 261.012 209.241 cv
269.651 210.201 mo
269.651 206.889 266.963 204.201 263.651 204.201 cv
260.34 204.201 257.651 206.889 257.651 210.201 cv
257.651 213.513 260.34 216.201 263.651 216.201 cv
266.963 216.201 269.651 213.513 269.651 210.201 cv
278.531 226.761 mo
278.531 223.449 275.844 220.761 272.531 220.761 cv
269.219 220.761 266.531 223.449 266.531 226.761 cv
266.531 230.073 269.219 232.762 272.531 232.762 cv
275.844 232.762 278.531 230.073 278.531 226.761 cv
287.172 246.921 mo
287.172 243.609 284.483 240.921 281.172 240.921 cv
277.859 240.921 275.172 243.609 275.172 246.921 cv
275.172 250.233 277.859 252.921 281.172 252.921 cv
284.483 252.921 287.172 250.233 287.172 246.921 cv
296.051 232.281 mo
296.051 228.97 293.363 226.281 290.051 226.281 cv
286.739 226.281 284.051 228.97 284.051 232.281 cv
284.051 235.593 286.739 238.281 290.051 238.281 cv
293.363 238.281 296.051 235.593 296.051 232.281 cv
304.451 239.961 mo
304.451 236.649 301.764 233.961 298.451 233.961 cv
295.139 233.961 292.451 236.649 292.451 239.961 cv
292.451 243.273 295.139 245.961 298.451 245.961 cv
301.764 245.961 304.451 243.273 304.451 239.961 cv
313.091 259.881 mo
313.091 256.569 310.403 253.881 307.091 253.881 cv
303.779 253.881 301.092 256.569 301.092 259.881 cv
301.092 263.193 303.779 265.881 307.091 265.881 cv
310.403 265.881 313.091 263.193 313.091 259.881 cv
321.971 253.281 mo
321.971 249.969 319.283 247.281 315.971 247.281 cv
312.659 247.281 309.971 249.969 309.971 253.281 cv
309.971 256.593 312.659 259.281 315.971 259.281 cv
319.283 259.281 321.971 256.593 321.971 253.281 cv
339.491 265.401 mo
339.491 262.089 336.803 259.401 333.491 259.401 cv
330.179 259.401 327.491 262.089 327.491 265.401 cv
327.491 268.713 330.179 271.401 333.491 271.401 cv
336.803 271.401 339.491 268.713 339.491 265.401 cv
348.131 286.762 mo
348.131 283.449 345.443 280.762 342.131 280.762 cv
338.819 280.762 336.131 283.449 336.131 286.762 cv
336.131 290.073 338.819 292.762 342.131 292.762 cv
345.443 292.762 348.131 290.073 348.131 286.762 cv
357.011 287.241 mo
357.011 283.93 354.323 281.241 351.011 281.241 cv
347.699 281.241 345.011 283.93 345.011 287.241 cv
345.011 290.553 347.699 293.241 351.011 293.241 cv
354.323 293.241 357.011 290.553 357.011 287.241 cv
365.651 296.602 mo
365.651 293.289 362.963 290.602 359.651 290.602 cv
356.339 290.602 353.651 293.289 353.651 296.602 cv
353.651 299.913 356.339 302.602 359.651 302.602 cv
362.963 302.602 365.651 299.913 365.651 296.602 cv
374.531 295.881 mo
374.531 292.569 371.843 289.881 368.531 289.881 cv
365.219 289.881 362.531 292.569 362.531 295.881 cv
362.531 299.193 365.219 301.881 368.531 301.881 cv
371.843 301.881 374.531 299.193 374.531 295.881 cv
382.932 302.361 mo
382.932 299.049 380.243 296.361 376.932 296.361 cv
373.619 296.361 370.932 299.049 370.932 302.361 cv
370.932 305.673 373.619 308.361 376.932 308.361 cv
380.243 308.361 382.932 305.673 382.932 302.361 cv
391.812 303.321 mo
391.812 300.009 389.123 297.321 385.812 297.321 cv
382.499 297.321 379.812 300.009 379.812 303.321 cv
379.812 306.633 382.499 309.321 385.812 309.321 cv
389.123 309.321 391.812 306.633 391.812 303.321 cv
400.451 310.521 mo
400.451 307.209 397.764 304.521 394.451 304.521 cv
391.139 304.521 388.451 307.209 388.451 310.521 cv
388.451 313.833 391.139 316.521 394.451 316.521 cv
397.764 316.521 400.451 313.833 400.451 310.521 cv
409.091 312.682 mo
409.091 309.369 406.403 306.682 403.091 306.682 cv
399.779 306.682 397.091 309.369 397.091 312.682 cv
397.091 315.993 399.779 318.682 403.091 318.682 cv
406.403 318.682 409.091 315.993 409.091 312.682 cv
417.971 315.081 mo
417.971 311.77 415.283 309.081 411.971 309.081 cv
408.659 309.081 405.971 311.77 405.971 315.081 cv
405.971 318.394 408.659 321.081 411.971 321.081 cv
415.283 321.081 417.971 318.394 417.971 315.081 cv
426.611 315.562 mo
426.611 312.249 423.923 309.562 420.611 309.562 cv
417.299 309.562 414.611 312.249 414.611 315.562 cv
414.611 318.873 417.299 321.562 420.611 321.562 cv
423.923 321.562 426.611 318.873 426.611 315.562 cv
@
1.5 lw
[6 2 ] 0 dsh
419.701 316.031 mo
420.201 316.031 li
420.951 316.281 li
421.951 316.281 li
422.451 316.531 li
424.201 316.531 li
424.701 316.781 li
392.451 310.281 mo
392.951 310.531 li
393.451 310.531 li
393.951 310.781 li
394.701 311.031 li
395.201 311.031 li
395.701 311.281 li
396.201 311.281 li
396.951 311.531 li
397.451 311.531 li
397.951 311.781 li
398.451 312.031 li
398.951 312.031 li
399.701 312.281 li
400.201 312.281 li
400.701 312.531 li
401.201 312.531 li
401.951 312.781 li
402.451 312.781 li
402.951 313.031 li
403.451 313.031 li
404.201 313.281 li
404.701 313.281 li
405.201 313.531 li
405.701 313.531 li
406.201 313.781 li
406.951 313.781 li
407.451 314.031 li
408.451 314.031 li
409.201 314.281 li
409.701 314.281 li
410.201 314.531 li
410.701 314.531 li
411.451 314.781 li
412.451 314.781 li
412.951 315.031 li
414.201 315.031 li
414.701 315.281 li
415.201 315.281 li
415.701 315.531 li
416.951 315.531 li
417.451 315.781 li
418.701 315.781 li
419.201 316.031 li
419.701 316.031 li
364.951 300.031 mo
365.451 300.281 li
366.201 300.531 li
366.701 300.781 li
367.201 301.031 li
367.701 301.281 li
368.451 301.531 li
368.951 301.781 li
369.451 302.031 li
369.951 302.281 li
370.701 302.531 li
371.201 302.781 li
371.701 303.031 li
372.201 303.281 li
372.951 303.531 li
373.451 303.781 li
373.951 304.031 li
374.451 304.281 li
374.951 304.531 li
375.701 304.531 li
376.201 304.781 li
376.701 305.031 li
377.201 305.281 li
377.951 305.531 li
378.451 305.781 li
378.951 306.031 li
379.451 306.031 li
380.201 306.281 li
380.701 306.531 li
381.201 306.781 li
381.701 307.031 li
382.201 307.031 li
382.951 307.281 li
383.451 307.531 li
383.951 307.781 li
384.451 308.031 li
385.201 308.031 li
385.701 308.281 li
386.201 308.531 li
386.701 308.531 li
387.451 308.781 li
387.951 309.031 li
388.451 309.281 li
388.951 309.281 li
389.701 309.531 li
390.201 309.781 li
390.701 309.781 li
391.201 310.031 li
391.701 310.031 li
392.451 310.281 li
337.701 283.281 mo
338.201 283.781 li
338.701 284.031 li
339.451 284.531 li
339.951 285.031 li
340.451 285.281 li
340.951 285.781 li
341.451 286.031 li
342.201 286.531 li
342.701 286.781 li
343.201 287.281 li
343.701 287.781 li
344.451 288.031 li
344.951 288.531 li
345.451 288.781 li
345.951 289.031 li
346.701 289.531 li
347.201 289.781 li
347.701 290.281 li
348.201 290.531 li
348.951 291.031 li
349.451 291.281 li
349.951 291.531 li
350.451 292.031 li
350.951 292.281 li
351.701 292.781 li
352.201 293.031 li
352.701 293.281 li
353.201 293.781 li
353.951 294.031 li
354.451 294.281 li
354.951 294.531 li
355.451 295.031 li
356.201 295.281 li
356.701 295.531 li
357.201 296.031 li
357.701 296.281 li
358.201 296.531 li
358.951 296.781 li
359.451 297.031 li
359.951 297.531 li
360.451 297.781 li
361.201 298.031 li
361.701 298.281 li
362.201 298.531 li
362.701 298.781 li
363.451 299.031 li
363.951 299.531 li
364.451 299.781 li
364.951 300.031 li
310.201 259.781 mo
310.951 260.531 li
311.451 261.031 li
311.951 261.531 li
312.451 262.031 li
313.201 262.531 li
313.701 263.031 li
314.201 263.531 li
314.701 264.031 li
315.451 264.531 li
315.951 265.281 li
316.451 265.781 li
316.951 266.281 li
317.451 266.781 li
318.201 267.281 li
318.701 267.781 li
319.201 268.281 li
319.701 268.781 li
320.451 269.281 li
320.951 269.781 li
321.451 270.281 li
321.951 270.781 li
322.701 271.281 li
323.201 271.781 li
323.701 272.031 li
324.201 272.531 li
324.701 273.031 li
325.451 273.531 li
325.951 274.031 li
326.451 274.531 li
326.951 275.031 li
327.701 275.531 li
328.201 276.031 li
328.701 276.281 li
329.201 276.781 li
329.951 277.281 li
330.451 277.781 li
330.951 278.281 li
331.451 278.531 li
332.201 279.031 li
332.701 279.531 li
333.201 280.031 li
333.701 280.281 li
334.201 280.781 li
334.951 281.281 li
335.451 281.531 li
335.951 282.031 li
336.451 282.531 li
337.201 283.031 li
337.701 283.281 li
282.951 231.781 mo
283.451 232.281 li
284.201 232.781 li
284.701 233.531 li
285.201 234.031 li
285.701 234.781 li
286.201 235.281 li
286.951 235.781 li
287.451 236.531 li
287.951 237.031 li
288.451 237.531 li
289.201 238.281 li
289.701 238.781 li
290.201 239.281 li
290.701 240.031 li
291.451 240.531 li
291.951 241.031 li
292.451 241.781 li
292.951 242.281 li
293.451 243.031 li
294.201 243.531 li
294.701 244.031 li
295.201 244.781 li
295.701 245.281 li
296.451 245.781 li
296.951 246.281 li
297.451 247.031 li
297.951 247.531 li
298.701 248.031 li
299.201 248.781 li
299.701 249.281 li
300.201 249.781 li
300.701 250.531 li
301.451 251.031 li
301.951 251.531 li
302.451 252.031 li
302.951 252.781 li
303.701 253.281 li
304.201 253.781 li
304.701 254.281 li
305.201 255.031 li
305.951 255.531 li
306.451 256.031 li
306.951 256.531 li
307.451 257.031 li
308.201 257.781 li
308.701 258.281 li
309.201 258.781 li
309.701 259.281 li
310.201 259.781 li
255.701 204.531 mo
256.201 205.031 li
256.701 205.531 li
257.201 206.031 li
257.951 206.531 li
258.451 207.031 li
258.951 207.531 li
259.451 208.031 li
259.951 208.531 li
260.701 209.031 li
261.201 209.531 li
261.701 210.031 li
262.201 210.531 li
262.951 211.281 li
263.451 211.781 li
263.951 212.281 li
264.451 212.781 li
265.201 213.281 li
265.701 213.781 li
266.201 214.531 li
266.701 215.031 li
267.451 215.531 li
267.951 216.031 li
268.451 216.781 li
268.951 217.281 li
269.451 217.781 li
270.201 218.281 li
270.701 219.031 li
271.201 219.531 li
271.701 220.031 li
272.451 220.531 li
272.951 221.281 li
273.451 221.781 li
273.951 222.281 li
274.701 223.031 li
275.201 223.531 li
275.701 224.031 li
276.201 224.781 li
276.701 225.281 li
277.451 225.781 li
277.951 226.531 li
278.451 227.031 li
278.951 227.531 li
279.701 228.281 li
280.201 228.781 li
280.701 229.281 li
281.201 230.031 li
281.951 230.531 li
282.451 231.031 li
282.951 231.781 li
228.201 186.781 mo
228.701 187.031 li
229.451 187.281 li
229.951 187.531 li
230.451 187.781 li
230.951 188.031 li
231.701 188.281 li
232.201 188.531 li
232.701 188.781 li
233.201 189.031 li
233.951 189.281 li
234.451 189.531 li
234.951 189.781 li
235.451 190.031 li
235.951 190.281 li
236.701 190.781 li
237.201 191.031 li
237.701 191.281 li
238.201 191.531 li
238.951 192.031 li
239.451 192.281 li
239.951 192.531 li
240.451 193.031 li
241.201 193.281 li
241.701 193.781 li
242.201 194.031 li
242.701 194.531 li
243.451 194.781 li
243.951 195.281 li
244.451 195.531 li
244.951 196.031 li
245.451 196.531 li
246.201 196.781 li
246.701 197.281 li
247.201 197.781 li
247.701 198.031 li
248.451 198.531 li
248.951 199.031 li
249.451 199.281 li
249.951 199.781 li
250.701 200.281 li
251.201 200.781 li
251.701 201.281 li
252.201 201.531 li
252.701 202.031 li
253.451 202.531 li
253.951 203.031 li
254.451 203.531 li
254.951 204.031 li
255.701 204.531 li
200.951 187.281 mo
201.451 187.031 li
201.951 186.781 li
202.701 186.531 li
203.201 186.281 li
203.701 186.031 li
204.201 186.031 li
204.701 185.781 li
205.451 185.531 li
205.951 185.531 li
206.451 185.281 li
206.951 185.281 li
207.701 185.031 li
208.201 185.031 li
208.701 184.781 li
209.951 184.781 li
210.451 184.531 li
212.701 184.531 li
213.201 184.281 li
216.451 184.281 li
217.201 184.531 li
219.201 184.531 li
219.951 184.781 li
220.951 184.781 li
221.451 185.031 li
222.201 185.031 li
222.701 185.281 li
223.201 185.281 li
223.701 185.531 li
224.451 185.531 li
224.951 185.781 li
225.451 186.031 li
225.951 186.031 li
226.701 186.281 li
227.201 186.531 li
227.701 186.531 li
228.201 186.781 li
173.451 209.031 mo
174.201 208.531 li
174.701 207.781 li
175.201 207.031 li
175.701 206.531 li
176.451 205.781 li
176.951 205.281 li
177.451 204.781 li
177.951 204.031 li
178.451 203.531 li
179.201 203.031 li
179.701 202.281 li
180.201 201.781 li
180.701 201.281 li
181.451 200.781 li
181.951 200.281 li
182.451 199.531 li
182.951 199.031 li
183.701 198.531 li
184.201 198.031 li
184.701 197.531 li
185.201 197.031 li
185.951 196.531 li
186.451 196.281 li
186.951 195.781 li
187.451 195.281 li
187.951 194.781 li
188.701 194.281 li
189.201 194.031 li
189.701 193.531 li
190.201 193.031 li
190.951 192.781 li
191.451 192.281 li
191.951 192.031 li
192.451 191.531 li
193.201 191.281 li
193.701 190.781 li
194.201 190.531 li
194.701 190.281 li
195.201 189.781 li
195.951 189.531 li
196.451 189.281 li
196.951 189.031 li
197.451 188.781 li
198.201 188.531 li
198.701 188.031 li
199.201 187.781 li
199.701 187.531 li
200.451 187.281 li
200.951 187.281 li
146.201 247.531 mo
146.701 246.531 li
147.201 245.781 li
147.951 244.781 li
148.451 244.031 li
148.951 243.031 li
149.451 242.281 li
150.201 241.531 li
150.701 240.531 li
151.201 239.781 li
151.701 238.781 li
152.451 238.031 li
152.951 237.281 li
153.451 236.281 li
153.951 235.531 li
154.451 234.531 li
155.201 233.781 li
155.701 233.031 li
156.201 232.031 li
156.701 231.281 li
157.451 230.531 li
157.951 229.781 li
158.451 228.781 li
158.951 228.031 li
159.701 227.281 li
160.201 226.531 li
160.701 225.781 li
161.201 225.031 li
161.951 224.031 li
162.451 223.281 li
162.951 222.531 li
163.451 221.781 li
163.951 221.031 li
164.701 220.281 li
165.201 219.531 li
165.701 218.781 li
166.201 218.031 li
166.951 217.281 li
167.451 216.531 li
167.951 215.781 li
168.451 215.281 li
169.201 214.531 li
169.701 213.781 li
170.201 213.031 li
170.701 212.281 li
171.201 211.781 li
171.951 211.031 li
172.451 210.281 li
172.951 209.781 li
173.451 209.031 li
@
1 lw
[] 0 dsh
79.7012 314.531 mo
73.7012 314.531 li
73.7012 326.531 li
85.7012 326.531 li
85.7012 314.531 li
79.7012 314.531 li
cp
86.7012 308.781 mo
80.7012 308.781 li
80.7012 320.781 li
92.7012 320.781 li
92.7012 308.781 li
86.7012 308.781 li
cp
93.7012 302.281 mo
87.7012 302.281 li
87.7012 314.281 li
99.7012 314.281 li
99.7012 302.281 li
93.7012 302.281 li
cp
100.451 295.031 mo
94.4512 295.031 li
94.4512 307.031 li
106.451 307.031 li
106.451 295.031 li
100.451 295.031 li
cp
107.451 282.281 mo
101.451 282.281 li
101.451 294.281 li
113.451 294.281 li
113.451 282.281 li
107.451 282.281 li
cp
114.451 276.031 mo
108.451 276.031 li
108.451 288.031 li
120.451 288.031 li
120.451 276.031 li
114.451 276.031 li
cp
121.451 263.781 mo
115.451 263.781 li
115.451 275.781 li
127.451 275.781 li
127.451 263.781 li
121.451 263.781 li
cp
128.451 253.531 mo
122.451 253.531 li
122.451 265.531 li
134.451 265.531 li
134.451 253.531 li
128.451 253.531 li
cp
135.451 255.531 mo
129.451 255.531 li
129.451 267.531 li
141.451 267.531 li
141.451 255.531 li
135.451 255.531 li
cp
142.451 241.781 mo
136.451 241.781 li
136.451 253.781 li
148.451 253.781 li
148.451 241.781 li
142.451 241.781 li
cp
149.451 244.031 mo
143.451 244.031 li
143.451 256.031 li
155.451 256.031 li
155.451 244.031 li
149.451 244.031 li
cp
156.451 227.531 mo
150.451 227.531 li
150.451 239.531 li
162.451 239.531 li
162.451 227.531 li
156.451 227.531 li
cp
163.451 223.031 mo
157.451 223.031 li
157.451 235.031 li
169.451 235.031 li
169.451 223.031 li
163.451 223.031 li
cp
170.451 214.281 mo
164.451 214.281 li
164.451 226.281 li
176.451 226.281 li
176.451 214.281 li
170.451 214.281 li
cp
177.201 210.281 mo
171.201 210.281 li
171.201 222.281 li
183.201 222.281 li
183.201 210.281 li
177.201 210.281 li
cp
184.201 216.531 mo
178.201 216.531 li
178.201 228.531 li
190.201 228.531 li
190.201 216.531 li
184.201 216.531 li
cp
191.201 203.281 mo
185.201 203.281 li
185.201 215.281 li
197.201 215.281 li
197.201 203.281 li
191.201 203.281 li
cp
198.201 216.531 mo
192.201 216.531 li
192.201 228.531 li
204.201 228.531 li
204.201 216.531 li
198.201 216.531 li
cp
205.201 198.781 mo
199.201 198.781 li
199.201 210.781 li
211.201 210.781 li
211.201 198.781 li
205.201 198.781 li
cp
212.201 191.031 mo
206.201 191.031 li
206.201 203.031 li
218.201 203.031 li
218.201 191.031 li
212.201 191.031 li
cp
219.201 190.281 mo
213.201 190.281 li
213.201 202.281 li
225.201 202.281 li
225.201 190.281 li
219.201 190.281 li
cp
226.201 181.781 mo
220.201 181.781 li
220.201 193.781 li
232.201 193.781 li
232.201 181.781 li
226.201 181.781 li
cp
233.201 186.031 mo
227.201 186.031 li
227.201 198.031 li
239.201 198.031 li
239.201 186.031 li
233.201 186.031 li
cp
240.201 183.531 mo
234.201 183.531 li
234.201 195.531 li
246.201 195.531 li
246.201 183.531 li
240.201 183.531 li
cp
247.201 189.781 mo
241.201 189.781 li
241.201 201.781 li
253.201 201.781 li
253.201 189.781 li
247.201 189.781 li
cp
253.951 185.531 mo
247.951 185.531 li
247.951 197.531 li
259.951 197.531 li
259.951 185.531 li
253.951 185.531 li
cp
260.951 187.031 mo
254.951 187.031 li
254.951 199.031 li
266.951 199.031 li
266.951 187.031 li
260.951 187.031 li
cp
267.951 195.781 mo
261.951 195.781 li
261.951 207.781 li
273.951 207.781 li
273.951 195.781 li
267.951 195.781 li
cp
274.951 211.281 mo
268.951 211.281 li
268.951 223.281 li
280.951 223.281 li
280.951 211.281 li
274.951 211.281 li
cp
281.951 214.281 mo
275.951 214.281 li
275.951 226.281 li
287.951 226.281 li
287.951 214.281 li
281.951 214.281 li
cp
288.951 195.031 mo
282.951 195.031 li
282.951 207.031 li
294.951 207.031 li
294.951 195.031 li
288.951 195.031 li
cp
295.951 171.031 mo
289.951 171.031 li
289.951 183.031 li
301.951 183.031 li
301.951 171.031 li
295.951 171.031 li
cp
302.951 155.281 mo
296.951 155.281 li
296.951 167.281 li
308.951 167.281 li
308.951 155.281 li
302.951 155.281 li
cp
309.951 116.531 mo
303.951 116.531 li
303.951 128.531 li
315.951 128.531 li
315.951 116.531 li
309.951 116.531 li
cp
316.951 97.7813 mo
310.951 97.7813 li
310.951 109.781 li
322.951 109.781 li
322.951 97.7813 li
316.951 97.7813 li
cp
323.951 76.2813 mo
317.951 76.2813 li
317.951 88.2813 li
329.951 88.2813 li
329.951 76.2813 li
323.951 76.2813 li
cp
330.701 59.2813 mo
324.701 59.2813 li
324.701 71.2813 li
336.701 71.2813 li
336.701 59.2813 li
330.701 59.2813 li
cp
337.701 117.781 mo
331.701 117.781 li
331.701 129.781 li
343.701 129.781 li
343.701 117.781 li
337.701 117.781 li
cp
344.701 148.531 mo
338.701 148.531 li
338.701 160.531 li
350.701 160.531 li
350.701 148.531 li
344.701 148.531 li
cp
351.701 174.031 mo
345.701 174.031 li
345.701 186.031 li
357.701 186.031 li
357.701 174.031 li
351.701 174.031 li
cp
358.701 201.781 mo
352.701 201.781 li
352.701 213.781 li
364.701 213.781 li
364.701 201.781 li
358.701 201.781 li
cp
365.701 226.031 mo
359.701 226.031 li
359.701 238.031 li
371.701 238.031 li
371.701 226.031 li
365.701 226.031 li
cp
372.701 238.781 mo
366.701 238.781 li
366.701 250.781 li
378.701 250.781 li
378.701 238.781 li
372.701 238.781 li
cp
379.701 244.031 mo
373.701 244.031 li
373.701 256.031 li
385.701 256.031 li
385.701 244.031 li
379.701 244.031 li
cp
386.701 261.531 mo
380.701 261.531 li
380.701 273.531 li
392.701 273.531 li
392.701 261.531 li
386.701 261.531 li
cp
393.701 271.031 mo
387.701 271.031 li
387.701 283.031 li
399.701 283.031 li
399.701 271.031 li
393.701 271.031 li
cp
400.701 279.281 mo
394.701 279.281 li
394.701 291.281 li
406.701 291.281 li
406.701 279.281 li
400.701 279.281 li
cp
407.701 287.031 mo
401.701 287.031 li
401.701 299.031 li
413.701 299.031 li
413.701 287.031 li
407.701 287.031 li
cp
414.451 288.031 mo
408.451 288.031 li
408.451 300.031 li
420.451 300.031 li
420.451 288.031 li
414.451 288.031 li
cp
421.451 289.031 mo
415.451 289.031 li
415.451 301.031 li
427.451 301.031 li
427.451 289.031 li
421.451 289.031 li
cp
428.451 294.281 mo
422.451 294.281 li
422.451 306.281 li
434.451 306.281 li
434.451 294.281 li
428.451 294.281 li
cp
435.451 294.281 mo
429.451 294.281 li
429.451 306.281 li
441.451 306.281 li
441.451 294.281 li
435.451 294.281 li
cp
442.451 298.781 mo
436.451 298.781 li
436.451 310.781 li
448.451 310.781 li
448.451 298.781 li
442.451 298.781 li
cp
449.451 299.281 mo
443.451 299.281 li
443.451 311.281 li
455.451 311.281 li
455.451 299.281 li
449.451 299.281 li
cp
456.451 303.281 mo
450.451 303.281 li
450.451 315.281 li
462.451 315.281 li
462.451 303.281 li
456.451 303.281 li
cp
463.451 303.531 mo
457.451 303.531 li
457.451 315.531 li
469.451 315.531 li
469.451 303.531 li
463.451 303.531 li
cp
470.451 305.781 mo
464.451 305.781 li
464.451 317.781 li
476.451 317.781 li
476.451 305.781 li
470.451 305.781 li
cp
477.451 313.031 mo
471.451 313.031 li
471.451 325.031 li
483.451 325.031 li
483.451 313.031 li
477.451 313.031 li
cp
484.451 311.031 mo
478.451 311.031 li
478.451 323.031 li
490.451 323.031 li
490.451 311.031 li
484.451 311.031 li
cp
491.201 312.281 mo
485.201 312.281 li
485.201 324.281 li
497.201 324.281 li
497.201 312.281 li
491.201 312.281 li
cp
498.201 310.781 mo
492.201 310.781 li
492.201 322.781 li
504.201 322.781 li
504.201 310.781 li
498.201 310.781 li
cp
505.201 311.531 mo
499.201 311.531 li
499.201 323.531 li
511.201 323.531 li
511.201 311.531 li
505.201 311.531 li
cp
512.201 313.281 mo
506.201 313.281 li
506.201 325.281 li
518.201 325.281 li
518.201 313.281 li
512.201 313.281 li
cp
519.201 312.281 mo
513.201 312.281 li
513.201 324.281 li
525.201 324.281 li
525.201 312.281 li
519.201 312.281 li
cp
526.201 312.781 mo
520.201 312.781 li
520.201 324.781 li
532.201 324.781 li
532.201 312.781 li
526.201 312.781 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
@
1.5 lw
[2 2 ] 0 dsh
522.451 318.031 mo
523.951 318.031 li
524.701 318.281 li
527.701 318.281 li
528.451 318.531 li
529.201 318.531 li
484.701 313.531 mo
485.451 313.781 li
486.201 313.781 li
487.201 314.031 li
487.951 314.031 li
488.701 314.281 li
489.451 314.281 li
490.201 314.531 li
490.951 314.531 li
491.701 314.781 li
493.201 314.781 li
493.951 315.031 li
494.701 315.031 li
495.451 315.281 li
496.201 315.281 li
496.951 315.531 li
498.701 315.531 li
499.451 315.781 li
500.951 315.781 li
501.701 316.031 li
502.451 316.031 li
503.201 316.281 li
504.701 316.281 li
505.451 316.531 li
506.951 316.531 li
507.701 316.781 li
509.451 316.781 li
510.201 317.031 li
512.451 317.031 li
513.201 317.281 li
514.701 317.281 li
515.451 317.531 li
517.701 317.531 li
518.451 317.781 li
520.951 317.781 li
521.701 318.031 li
522.451 318.031 li
447.201 304.531 mo
447.951 304.781 li
448.701 305.031 li
449.451 305.281 li
450.201 305.531 li
450.951 305.781 li
451.701 306.031 li
452.451 306.281 li
453.201 306.531 li
454.201 306.531 li
454.951 306.781 li
455.701 307.031 li
456.451 307.281 li
457.201 307.531 li
457.951 307.781 li
458.701 308.031 li
459.451 308.031 li
460.201 308.281 li
460.951 308.531 li
461.701 308.781 li
462.451 309.031 li
463.201 309.031 li
463.951 309.281 li
464.951 309.531 li
465.701 309.781 li
466.451 309.781 li
467.201 310.031 li
467.951 310.281 li
468.701 310.531 li
469.451 310.531 li
470.201 310.781 li
470.951 311.031 li
471.701 311.031 li
472.451 311.281 li
473.201 311.531 li
473.951 311.531 li
474.701 311.781 li
475.701 311.781 li
476.451 312.031 li
477.201 312.281 li
477.951 312.281 li
478.701 312.531 li
479.451 312.531 li
480.201 312.781 li
480.951 313.031 li
481.701 313.031 li
482.451 313.281 li
483.201 313.281 li
483.951 313.531 li
484.701 313.531 li
409.451 288.281 mo
410.451 288.781 li
411.201 289.031 li
411.951 289.531 li
412.701 290.031 li
413.451 290.281 li
414.201 290.781 li
414.951 291.031 li
415.701 291.531 li
416.451 292.031 li
417.201 292.281 li
417.951 292.781 li
418.701 293.031 li
419.451 293.531 li
420.201 293.781 li
421.201 294.281 li
421.951 294.531 li
422.701 294.781 li
423.451 295.281 li
424.201 295.531 li
424.951 296.031 li
425.701 296.281 li
426.451 296.531 li
427.201 297.031 li
427.951 297.281 li
428.701 297.531 li
429.451 298.031 li
430.201 298.281 li
430.951 298.531 li
431.951 298.781 li
432.701 299.281 li
433.451 299.531 li
434.201 299.781 li
434.951 300.031 li
435.701 300.531 li
436.451 300.781 li
437.201 301.031 li
437.951 301.281 li
438.701 301.531 li
439.451 301.781 li
440.201 302.031 li
440.951 302.531 li
441.701 302.781 li
442.451 303.031 li
443.451 303.281 li
444.201 303.531 li
444.951 303.781 li
445.701 304.031 li
446.451 304.281 li
447.201 304.531 li
371.951 262.781 mo
372.701 263.531 li
373.451 264.281 li
374.201 264.781 li
374.951 265.531 li
375.701 266.031 li
376.451 266.781 li
377.451 267.281 li
378.201 268.031 li
378.951 268.531 li
379.701 269.281 li
380.451 269.781 li
381.201 270.281 li
381.951 270.781 li
382.701 271.531 li
383.451 272.031 li
384.201 272.531 li
384.951 273.031 li
385.701 273.531 li
386.451 274.031 li
387.201 274.781 li
388.201 275.281 li
388.951 275.781 li
389.701 276.281 li
390.451 276.781 li
391.201 277.281 li
391.951 277.781 li
392.701 278.281 li
393.451 278.781 li
394.201 279.281 li
394.951 279.781 li
395.701 280.281 li
396.451 280.781 li
397.201 281.281 li
397.951 281.531 li
398.701 282.031 li
399.701 282.531 li
400.451 283.031 li
401.201 283.531 li
401.951 284.031 li
402.701 284.531 li
403.451 284.781 li
404.201 285.281 li
404.951 285.781 li
405.701 286.281 li
406.451 286.531 li
407.201 287.031 li
407.951 287.531 li
408.701 287.781 li
409.451 288.281 li
334.451 94.0313 mo
335.201 99.0313 li
335.951 104.531 li
336.701 110.281 li
337.451 116.031 li
338.201 122.031 li
338.951 128.031 li
339.701 134.031 li
340.451 140.281 li
341.201 146.281 li
341.951 152.281 li
342.701 158.281 li
343.451 164.281 li
344.451 170.031 li
345.201 175.531 li
345.951 181.031 li
346.701 186.281 li
347.451 191.531 li
348.201 196.281 li
348.951 201.031 li
349.701 205.531 li
350.451 209.781 li
351.201 213.781 li
351.951 217.531 li
352.701 221.031 li
353.451 224.531 li
354.201 227.531 li
354.951 230.531 li
355.951 233.281 li
356.701 235.781 li
357.451 238.281 li
358.201 240.531 li
358.951 242.531 li
359.701 244.531 li
360.451 246.281 li
361.201 248.031 li
361.951 249.531 li
362.701 251.031 li
363.451 252.281 li
364.201 253.531 li
364.951 254.781 li
365.701 255.781 li
366.701 256.781 li
367.451 257.781 li
368.201 258.781 li
368.951 259.531 li
369.701 260.531 li
370.451 261.281 li
371.201 262.031 li
371.951 262.781 li
296.701 184.031 mo
297.451 182.531 li
298.201 180.781 li
298.951 178.781 li
299.701 176.781 li
300.701 174.281 li
301.451 171.781 li
302.201 169.031 li
302.951 166.031 li
303.701 162.781 li
304.451 159.281 li
305.201 155.781 li
305.951 151.781 li
306.701 147.781 li
307.451 143.531 li
308.201 139.281 li
308.951 134.781 li
309.701 130.281 li
310.451 125.531 li
311.201 120.781 li
312.201 115.781 li
312.951 111.031 li
313.701 106.281 li
314.451 101.531 li
315.201 97.0313 li
315.951 92.5313 li
316.701 88.0313 li
317.451 84.0313 li
318.201 80.0313 li
318.951 76.5313 li
319.701 73.2813 li
320.451 70.2813 li
321.201 67.7813 li
321.951 65.5313 li
322.951 63.7813 li
323.701 62.5313 li
324.451 61.7813 li
325.201 61.5313 li
325.951 61.5313 li
326.701 62.2813 li
327.451 63.5313 li
328.201 65.0313 li
328.951 67.2813 li
329.701 69.7813 li
330.451 72.7813 li
331.201 76.2813 li
331.951 80.2813 li
332.701 84.5313 li
333.701 89.0313 li
334.451 94.0313 li
259.201 183.281 mo
259.951 183.281 li
260.701 183.531 li
261.451 183.781 li
262.201 184.031 li
262.951 184.031 li
263.701 184.281 li
264.451 184.531 li
265.201 184.781 li
265.951 185.031 li
266.701 185.281 li
267.451 185.531 li
268.451 185.781 li
269.201 186.031 li
269.951 186.281 li
270.701 186.531 li
271.451 187.031 li
272.201 187.281 li
272.951 187.531 li
273.701 187.781 li
274.451 188.031 li
275.201 188.531 li
275.951 188.781 li
276.701 189.031 li
277.451 189.281 li
278.201 189.781 li
279.201 190.031 li
279.951 190.281 li
280.701 190.531 li
281.451 190.781 li
282.201 191.031 li
282.951 191.281 li
283.701 191.531 li
284.451 191.781 li
288.201 191.781 li
288.951 191.531 li
289.951 191.281 li
290.701 191.031 li
291.451 190.531 li
292.201 190.031 li
292.951 189.531 li
293.701 188.781 li
294.451 187.781 li
295.201 186.781 li
295.951 185.531 li
296.701 184.031 li
221.451 188.531 mo
222.201 188.281 li
222.951 187.781 li
223.701 187.531 li
224.701 187.281 li
225.451 186.781 li
226.201 186.531 li
226.951 186.281 li
227.701 185.781 li
228.451 185.531 li
229.201 185.281 li
229.951 185.031 li
230.701 184.781 li
231.451 184.531 li
232.201 184.281 li
232.951 184.031 li
233.701 183.781 li
234.451 183.531 li
235.451 183.531 li
236.201 183.281 li
236.951 183.031 li
237.701 183.031 li
238.451 182.781 li
239.201 182.781 li
239.951 182.531 li
240.701 182.531 li
241.451 182.281 li
242.951 182.281 li
243.701 182.031 li
251.451 182.031 li
252.201 182.281 li
253.701 182.281 li
254.451 182.531 li
255.951 182.531 li
256.951 182.781 li
257.701 182.781 li
258.451 183.031 li
259.201 183.281 li
183.951 220.531 mo
184.701 219.531 li
185.451 218.781 li
186.201 217.781 li
186.951 217.031 li
187.701 216.281 li
188.451 215.281 li
189.201 214.531 li
189.951 213.781 li
190.701 213.031 li
191.701 212.281 li
192.451 211.281 li
193.201 210.531 li
193.951 209.781 li
194.701 209.031 li
195.451 208.281 li
196.201 207.531 li
196.951 206.781 li
197.701 206.031 li
198.451 205.281 li
199.201 204.781 li
199.951 204.031 li
200.701 203.281 li
201.451 202.531 li
202.451 202.031 li
203.201 201.281 li
203.951 200.531 li
204.701 200.031 li
205.451 199.281 li
206.201 198.781 li
206.951 198.031 li
207.701 197.531 li
208.451 197.031 li
209.201 196.281 li
209.951 195.781 li
210.701 195.281 li
211.451 194.781 li
212.201 194.281 li
213.201 193.781 li
213.951 193.031 li
214.701 192.531 li
215.451 192.281 li
216.201 191.781 li
216.951 191.281 li
217.701 190.781 li
218.451 190.281 li
219.201 189.781 li
219.951 189.531 li
220.701 189.031 li
221.451 188.531 li
146.201 267.531 mo
146.951 266.531 li
147.951 265.531 li
148.701 264.531 li
149.451 263.531 li
150.201 262.531 li
150.951 261.531 li
151.701 260.531 li
152.451 259.531 li
153.201 258.531 li
153.951 257.531 li
154.701 256.531 li
155.451 255.531 li
156.201 254.531 li
156.951 253.781 li
157.701 252.781 li
158.701 251.781 li
159.451 250.781 li
160.201 249.781 li
160.951 248.781 li
161.701 247.781 li
162.451 246.781 li
163.201 245.781 li
163.951 244.781 li
164.701 243.781 li
165.451 242.781 li
166.201 241.781 li
166.951 240.781 li
167.701 239.781 li
168.451 239.031 li
169.451 238.031 li
170.201 237.031 li
170.951 236.031 li
171.701 235.031 li
172.451 234.031 li
173.201 233.281 li
173.951 232.281 li
174.701 231.281 li
175.451 230.281 li
176.201 229.531 li
176.951 228.531 li
177.701 227.531 li
178.451 226.781 li
179.201 225.781 li
179.951 224.781 li
180.951 224.031 li
181.701 223.031 li
182.451 222.281 li
183.201 221.281 li
183.951 220.531 li
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/percent <1C60D8A8C9B59F85E959DC9E62959B5B049387399C5A88EDF2D5DFBD776DAFCB889B62AC98B872299D239B948311090C1C069798A7F20A8D7BE29B8C384DB55F663943C1B42044C054991C856F3C3AA085C2B4902C8215DC2701EFD5FA664B5C9C44640813B5AC440B37B70CE58EFC65A9AFC0BCC84F3CDC68795E4995966F74639212F5372957A607AD4B6B94BBB7C36A3A6EF325381FE12C0468B5DD1F216D01C174551A50AC78A5328CDA24DAC0484DFF3993D32A7CA064F169906996AA1E2F6A555998F55A1AFCE2776BEE589EC3162F968A180A5713C4537EF11B8529CE22F8373BC7632472323D1F8491B48E948870255C9E830736EE70F30EE309DFBBB8294CCC2BB5ECB81667BEB60155> |-/plus <1C60D8A8C9B7F374893581E76C8776BE7C21604E85D269579E2DADA7A812D7979B6797287709894A7BA08D02> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/A <1C60D8A8C9B64EDFF4A769B0E349B0B8A8759517834132408F730D5925332B160EAFC678A283B12B9F41A37E5CF702EF2D2E718583BF> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/V <1C60D8A8C9B64EDFA60949676B75C625C6948873966B83A549B84A6BD5D6EE9C83058CE085EB61> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 32 /space putdup 37 /percent putdup 43 /plus putdup 53 /five putdup 65 /A putdup 71 /G putdup 86 /V putdup 101 /e putdup 117 /u putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 5{/.notdef}rp /plus /.notdef /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A 5{/.notdef}rp /G 14{/.notdef}rp /V 14{/.notdef}rp /e 15{/.notdef}rp /u 138{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [18 0 0 -18 0 0 ]msf279.368 364.532 mo(200 GeV Au+Au 0 - 5%)sh[] 0 dsh
247.118 359.032 mo
273.868 359.032 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1 lw
[9.24 2.76 ] 4.62 dsh
254.368 357.032 mo
266.368 357.032 li
256.66 364.085 li
260.368 352.673 li
264.076 364.085 li
254.368 357.032 li
cp
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B64EDFF4E8F029E491459914546F05F980240E216037EFFB56810F73C7B1AD75758AC950CDF0AE7CA5E10B4B98E91DD14CBA33340505432C4EBD036ED5D8912D20451B0A88BD5908DF5F74741DA09743ACC2D69ECC46C5DD005482FE9F42B63F3612F31E021BB829EB7CDDF491856FAD0A1D6B2854CE32CAE2827DAD35AA4DEB8EA2DDAB1E824241122D8E6929DF014B94E2393EF8A13B> |-/W <1C60D8A8C9B5D6EF2BD09738A41AA6380C9765B88F07D3637E9EE67A95A81C558683DE1DD822B8DCC23EEF2BFD04340812EB686C4A78A7861A98B16FC19A> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/v <1C60D8A8C9B7A73DDF32B99894CC6FA66F5D07EC695DA6C164CB40F9A791729569775D3BE9C3> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 66 /B putdup 87 /W putdup 97 /a putdup 108 /l putdup 115 /s putdup 116 /t putdup 118 /v putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 5{/.notdef}rp /plus /.notdef /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A /B 4{/.notdef}rp /G 14{/.notdef}rp /V /W 9{/.notdef}rp /a 3{/.notdef}rp /e 6{/.notdef}rp /l 6{/.notdef}rp /s /t /u /v 137{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [18 0 0 -18 0 0 ]msf279.368 387.157 mo(Blast Wave)sh1.5 lw
[6 2 ] 0 dsh
247.118 381.032 mo
273.868 381.032 li
.878019 .337896 1 .281529 cmyk
@
1 lw
[] 0 dsh
266.278 380.962 mo
266.278 377.65 263.59 374.962 260.278 374.962 cv
256.966 374.962 254.278 377.65 254.278 380.962 cv
254.278 384.274 256.966 386.962 260.278 386.962 cv
263.59 386.962 266.278 384.274 266.278 380.962 cv
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7D8BE0123FD0A136BA0F480FD4287FFCF97986718886432AF2C7EB6A3F35B> |-/H <1C60D8A8C9B6079F4F4E07EFC7C894BAD912B65087B319FD4C6D4407FA6BDEE59584D043C3070AE38B> |-/I <1C60D8A8C9B854D0EE4B20327A907C36187261> |-/J <1C60D8A8C9B7A73DB6FA483A9791C1A03FDD99DE37EC702CFAA41FFB6235ABBC533B771F9FC9FF7FE3EF943DDF6A0978C6221B723344AE5D5FF65442A5B18CBDAF7665324680F19176D0D766874FD5E0E907> |-/N <1C60D8A8C9B6079F42CB3557771D803C706A630DA03929B931F488C01B37E85FE694B3E25EF7F6332F> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 70 /F putdup 72 /H putdup 73 /I putdup 74 /J putdup 78 /N putdup 100 /d putdup 105 /i putdup 114 /r putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 5{/.notdef}rp /plus /.notdef /hyphen /period /.notdef /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A /B 3{/.notdef}rp /F /G /H /I /J 3{/.notdef}rp /N 7{/.notdef}rp /V /W 9{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 5{/.notdef}rp /r /s /t /u /v 137{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [18 0 0 -18 0 0 ]msf279.368 409.782 mo(HIJING Filtered)sh1.5 lw
[2 2 ] 0 dsh
247.118 403.032 mo
273.868 403.032 li
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
@
1 lw
[] 0 dsh
260.368 397.032 mo
254.368 397.032 li
254.368 409.032 li
266.368 409.032 li
266.368 397.032 li
260.368 397.032 li
cp
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 114 /rho putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/rho <1C60D8A8C9B79676CBF8A1F54B5F0130A8EF6B33D499AA2DDA03F8431342D7F3F7EFE9BEAF4C5AC51CF5CEB82D17CFC90B6DD0AE821BF62EB019603D1DCF2E623375E89ED05CDBFD3EB3ED531F39ACD6B2CDDC92B544227F7F8F176EF6CC0A5497FE65A9F4D0CA456918A0858E35B4DE1F8A30EC470B6B74AF6DCF310C5886C3F44E2342418024D441> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/QZCVWY+Symbol /Symbol findfont ct_VMDictPut/QZCVWY+Symbol*1 [114{/.notdef}rp /rho 141{/.notdef}rp]QZCVWY+Symbol nfQZCVWY+Symbol*1 [18 0 0 -18 0 0 ]msf346.411 75.5747 mo(r)sh%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginQZCVWX+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/slash <1C60D8A8C9B854D08FD42DCC2A61292225078A8A43> |-/K <1C60D8A8C9B64EDFDBBA3672BA9F92710F094994A8A12A9F4DF39299BC3FAD32D853DD36FBDA8E3717CD2AE8C1575639957965FDD3> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/bracketleft <1C60D8A8C9B854D0C97CA7C2B861B9C1CD90AFF85F3BEFAF029B3E54E0FAF2> |-/bracketright <1C60D8A8C9B854D0A1BD118E81B093B97270F6CD267A737E85B9D694D4125D54> |-/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/q <1C60D8A8C9B7EF322B184929E0B5A459DE86988030EB871CF3F1F89AAC255B947849C923A72862C0838E4FFEC50337DF57FDE0D1CE7785FE949AC8FB2E0B82EA2B25BFCED172F24897135D17C32C6271FDB42F40BD8C6A01481DBC256FA4B3B7E705812CCA623C287DE372412A7902B7DF3795B3A648430010B3D7196447674F9A7D49829AF453196CED7F5B3C2C0A202C> |-systemdict /gcheck known {setglobal} if end {end} ifendQZCVWX+Helvetica /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 47 /slash putdup 75 /K putdup 83 /S putdup 91 /bracketleft putdup 93 /bracketright putdup 99 /c putdup 110 /n putdup 113 /q putpop%ADOEndSubsetFont
/QZCVWX+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period /slash /zero /one /two /.notdef /four /five /six /.notdef /eight 8{/.notdef}rp /A /B 3{/.notdef}rp /F /G /H /I /J /K 2{/.notdef}rp /N 4{/.notdef}rp /S 2{/.notdef}rp /V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 2{/.notdef}rp /q /r /s /t /u /v 137{/.notdef}rp]QZCVWX+Helvetica nfQZCVWX+Helvetica*1 [12 0 0 -12 0 0 ]msf356.29 69.5747 mo(0)shQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf241.494 491.475 mo(q)shQZCVWX+Helvetica*1 [18 0 0 -18 0 0 ]msf253.173 499.475 mo(inv)shQZCVWX+Helvetica*1 [21 0 0 -21 0 0 ]msf276.183 491.475 mo( \(G)sh305.345 491.475 mo(eV/c\))[11.6797 14.0068 5.83496 10.5 0 ]xshQZCVWX+Helvetica*1 [0 -21 -21 0 0 0 ]msf26.0313 320.931 mo(B\(q)[-14.0068 -6.99316 0 ]yshQZCVWX+Helvetica*1 [0 -18 -18 0 0 0 ]msf34.0313 288.251 mo(inv)[-3.99902 -10.0112 0 ]yshQZCVWX+Helvetica*1 [0 -21 -21 0 0 0 ]msf26.0313 265.242 mo(\) [\(GeV/c\))[-6.99316 -5.83398 -5.83398 -6.99316 -16.335 -11.6797 -14.0068 -5.83496 -10.5 0 ]yshQZCVWX+Helvetica*1 [0 -18 -18 0 0 0 ]msf18.0313 174.238 mo(-1)[-5.99414 0 ]yshQZCVWX+Helvetica*1 [0 -21 -21 0 0 0 ]msf26.0313 158.233 mo(])shQZCVWX+Helvetica*1 [18 0 0 -18 0 0 ]msf185.545 55.3062 mo(K)shQZCVWX+Helvetica*1 [12 0 0 -12 0 0 ]msf197.551 46.3062 mo(0)sh196.726 63.4634 mo(S)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/QZCVWX+Helvetica*1 uf/QZCVWX+Helvetica uf/Helvetica uf/QZCVWY+Symbol*1 uf/QZCVWY+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Gary Westfall) ()%%Title: (fig25.eps)%%CreationDate: 3/24/10 5:29 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&Bj9lF&h*\W!WE02-jW-P+9=kV$kX6;GnpDmAMV'XH^t]A\%br!RE<BdSpg$L4c:b[Y3P;@].4m/'aKqOZdWh/#QNk:WGIZ-%KO?j)$M&![&.2E!Q`ZCH8Nat)1>"5)Vk@HZPDjQV(2a]C*1,aFY4A5?l*^BJF*Z,GNCKa1G9Dre_:"s%5Bp(E_j,Q;U"/N?rXK^U%ou<'O(2;,;6doeNqc@RgC"2*>1jJ\kpG(kM>$XjW_euC&FDWTNVVe1E[j;LE?@<4f`u4f;jkblY::GL0l$]r">VO8-piH"cTQr<p%quBap9Rf7m2nG2blPpIQ2%P%QH%Zue2tHdE2')j6!!sEkQVJT^NJ#L[RCJ>j3#:@r+j4M]j9*;>*.5g_/>!9(T.X@8c=ec\a.5Nr%-))M,%u.d/qu[rqn;h4mTTJ:![Hgk3fWC3=A3Q.b+&$9loj)84_^8I<9JFEge(I\s&5r.h4uoa[3j$/<0I)QPIlnQr;$rh;)O,E>%4ML+Y#Dg3n;@Gp"l'9F`[jBr(4%O^M;jQ9d12+,-KG)H+;RbL`7K=ImYI),g?#I-k^gMf_"NR)AAlK$i3OS^UQ98&kbJ'MV>Q*m(%/\uZn'2Jl/A/8L^+Icu,6'_]&E]g0u'#&"B)H9acV-RS$fT"TLb^SaqB(AX`Zoe5VJt;CS+Es:Nlj?uO6XRn7iYfZ6XSSPu$A0C\%>C?Zr@(4R@h@INB:Tc*rlS%23I_C@Jj.Ka3'h"07!]Tbpol2"%:4]3@>Q4haJ&]QQ%/_E8pr`4'Ra'i-WMKN^9]CCSM-#m4]UDOB%X-/-[e%9iG>Oah)j*>I[o@Sr`,t[J[S&I;=/@N[;+5WR5@]O;\>N$rW`E&fJ[ORR3c;FtPPY0RtP45IsnN>Y[8U+O(kWKViMD)r(%6DR]Q:A&og)$o1O[_acX/%3;LW?\7kE('JYD/_o<MW7_d61;cIi@BAp&`G867-R*d`Y%/[NZ6mG<u_mjUsu40Yn`9,?a5S9iG\#Z%+Qep.P_t\tpe("N,H'0mgaR+T3b#8;OkPEd@4N<>^1'l[#3i)N2*,7BNid8Jl3pUkd!Kb[pkmsJFEINPQ"#cgi%)7Qn_l!h7EQp@%XqX&d<-\Hu=8>@W1Q!9N3jtc);s?V=:9d=5.:*]@m9,u5g-YbU2E3a_1N@M]2]XchMW;TUCdn.=a%'i1n&8@EK;/g-<6eNULJj.!%T\Q[?Yf\IG[ismu;^a;tEhUc-V)uYV;Ot\$F@4:&),\FDEQ;*0FP8giT3eFF'QYalPagp-;qfS>,k=J$=-n)V:EZH*X"IO)STN_d%go^.\c@:)Jc9nV-la*Zj=e>r;8>RTgX]%U+<Q/$n9DbQ0Z7JBBn==;_<r(c8H:<=]IqZLa:Of9lJP\C%J'm0<T-2MLqE+Z!AE`b]%7YRC1r^;lTdGO1qYt2Xqn+87E.[TBQqE+YV<9SQ)Sc1@t+4]O6GPFenQ$ufLd<?ELQR\i[;OJt+P*hrX_L#Ds,q7*83W)V0e!s7c%Y%d>a1Zi%VGm?,akFMW!fOY838goT80nZ6$7h<A4d[X;!ZZlqn&UkKO8/']PD,5NMqG1PGqu>Qb)oiHK/i+]#a760O,-PRlW.&2Y%8fdaIV&B8eYjGY(:Ini&CMVZiLueo%b:K&-r0/[8mi\7/'Ot_Rb,LO6>K;^Lco==Z25e10kQ;u'^q3O.)0>?tX&9#Xg%C!%km4OG%D1uI2ZXORHB9BsYhDi>D)p2sc?))`q=\:.<_a!oR8UJ8#?qZO30q``Sr[Qu(r)]]S&cdP^&\^i$a6>a3[rM_)9kfE-(I8q*7//;E%gp78l,hb3%.?H?/o?EsM(H%RO]T`?B^:ESek9PnCOjPV[8^!ja*$l>IYSDO:Eu""g'.d6@!lQ;mp_3l6rAi&kTiNGr,c"S*0:(j.%'SZ[Kgh"Ho,FZ*+bQ+d'pQRGV8U;JpDMgYX$K9bO5#8/QVXSQ=FBDNAL`YQ`fo_Nr7?gW]?Qf*kqop?r'P]/0:!u%^@u-sUP5f).%$cLpVk)tHh<h07k=&Rj@[3<?nGr5bMV$PV8&t+*#hkmVU3L/l:0nUHWTT4n0P%(.`'L*a@5se46$E=!&qMWE7V,E2`M@0:gPlUEW%8h6b4.:/d6B$s))6ra^h`"+g#7jUMA,EX_7S!>5'09J\@.@/*S4Inp2EACQqPqsFBJ^1?O*LUhu/?&?C>cuFJ*H@6_'64TV@\fHm%>tGPF2CS/bC*\N4SB;-H:M*;Z#qJN0\PEit60=[/aO0^?5\Y,s-6nLI2^5t=PuCd@>]n'QoRT'HoM3jt'=\+3+6@B?mqDPnRH(Bg%0o/Cn)*@3t`^?i#`d=NE[&V@cMPuh7;Iid*/V).0'VA:.W6i8C69:=@;fPS^E0=1)WAGD*/i/N<H6]F#6a0WSS!&Tr^gY?$;<8SS%\1DY=Yo>"cWM4EOWMn9KOE=$E&06tSCM!/p*@'8aUq"9k%-<!`d=`3Tnk#R%5U:N/d_HtI.`JdO<IYJTV>?Zh>#FGbZnnoY6m+93%<C[<t3h'Zo.3-7LW4nkgqs(q[;/#Pdk*o1.PGGsT;;pkP2!U?^*EIGBX7Clc&O+MX7u)I]r>2KWaeu4LSOGt2#Yi8FN&q1f<$X/m%c'ZReUFiKl#5'*+]Rj%D@R=H1dj$2L(,\;"W7D2D73PO\@O8oh\0=kgs!"9@I'8>@TcscqP)o]*B@+Z_gk,)^FfI^6T0a&g3\n^C%V37b*K&Drggk'n\s+#a-U*sEaRA>p>ZN;eUPu4>4ac_=EUroZ/3XlW$.>0;25=sIteG<'XBm)^NV@AB&5V"UY[RR>4c3$fT=eL-G%\NhR>6'[\?BbmZM=J7%ALtQkgU]_eB9n5EA&b+_WrR^C/P0007VgsK"dt@KKe9W#-6W1Z*-%Ui>?q'QT@2;u/$><?h_=(s/KJNg9%49Mf63qdYfW2+t0dteN-IhOYfTpAHm"0@&ee6>OmA!@I\;$FK4>7j'?#^e@4Jg_XOV48;L`t1m4D)6VF00<AP^ki8aUf/!oo57O-%!1t'e]W=Z)k)1G8X'VZSF,NF5#h@A=Qc.KH(=T5L8to.6<Y`c2-kh7Y.N.16XN4%;+JHlQZN=f/JO(n$9jC;i@aMNqPr;T_W3N"1%3IiH6KHM8a'Lad`R8bN0p7>$[h>uJ-?o'KhK[3<E9JTT^KM5!74e/U6O27UO2(r$n+t=*o-]4he"0)-N@O;FQ1#O2Dp->s[;3Ses%Uf9Q9SYR54mprM6S8/E_#^)-TC_l.HB8l]X<23C(C8DT/.FlmH]fXC"oWtP2'ml^_,Ie)<7kBd*,W8K?JrHU\%*CLH"lQ8(/B*dn%i2ieY`8%#D'Y?i:RY>Kek1&1@m`iV\lHrPc"BFo)H%ub"#lm_S5XU"(+J,MJ1FXe"oM-Y?coXUCA=QX4FX`\\D%a5eC.(R%@u;FU%Hb-*(Hp*&`b[2"IK=qp\FGqY[6#.('MA!o9A^m#KTEsecU<B5rjs8)8$@P`$C2pY!TlH)hX/$KtNuAiq.BQ!`6u,_i=,9i&).nEF%;lLE%/.ejSXhE`[.NWJ"Vi&mnYZ`Zr!Q9lrkZJg4LoR'j-p"c1GX@@N/sc8>8/g%='Wr3E:oHiVNR>?^gI9(G2Gt;S"3c^a21^W)%U%eso4.u6t,uY'kFV:ln(J0UCb$<@G2\`^c2&\;*:UuO$?r`7!4sW7N=K#(J_3&\naF]^LE]h"3ct[6[0InJmMo9UI9;L8cPGc9u%Se10H8JqPLTWTeJOm4eD#EE":nVRQ'8rCA\<,JA&``oNa^/\;ma/l:q_mr,tVKm_<Ma9<JX4e1401.,kg7\r)B<`2q!+Y^n1r"^o%A5(INQEd@PW"^jb4?RBC-jL:o]1@>Oicg`H4ST6rNZS742?,;0Al&d5.AJ7&ZoO^Nd8;;:ajLTTTQnh.-Uq8hT-KC1%4Ha.!-;I=%C>(10-%q6+0["4f$=R0:%7M3b1(.Sn@s=*T+S/qCAchkF(;]SB0d'MXEek>/,7Ut9-8TBr8M^19"Em8b!!;[/afHa&M6$\)Ubd*$%Cp@g'b"3nJ;m\\<BtAlI1Or/"bL.k[%H.FV9-s;0H4TBKpe`?afc[=X),3TFZdFnN@o9qpN96Io]R2"T9PU#mUhEE*/_R5Jk;4rk%'GE<+^hfL3,G9<F*J1;FL]u'2Wnf7BrE#qi:*N;nHQg'>i^VuH7Aj$7WJ*(LRA<BA'%N^E,oIn@TK`R8joeM.i.Ws(S^Wu,/!*g.%0,a;XQHt@O[@pQc<;h[J,rtTRp^/Y\C%R.9ouPL97Sm]J`o!kWbqtGHo/VW8/nt0MXsUsn?lYkcY_oR6Z?=6>.5Di1P6h#tdZ!Bh%r'hl"JPRYM+%=5%^#=A^s2cO$*ONUsX=S,A0'U*Uk!QC&lf_#^#u>SDa_WD1Ucb'`)+l'mK!(fB_HEsRH7Fi#:19OL,+;Rfnn^qM%\0^X-8Rqi6"CSBCDj"YThufh[>Qf[^+u9Ct_MerhFg1jZC/po-rg-Sk;=V`M[f-aS)gIc>Zt,T3.LX?BPnKNY!*bWK9#-##s")Dg%JMEhN(dZ9++]MIUeXVFV8t8,"+%^R@Je=a/$TJ`J2Ha'icSX$bTXR51!RIZH*`p34qW%t?9-Qm4pM-e)q(Km'!]u*@"FY@&?.YoU%ak]2bXa#m4?_Xg=.O?d[F;?&pOeGk_-.G[Hec@u^95Hht#nU7Us-*ZT&rf8D)*jX$dOC%Sl75;(";3:O/1FOXLuF1,=eSkme^O-f%?ddc1X[%r48)GbdiMAB#!knf_K\-H@W!H:_9kDHKbDQqj6<'.C_*82n+l6bO5;#rjs!9rbg)nk/U]*Gr!/FeZ<!/\`67E)OK^qe2%$n)6tOu1nr;&t?"EMgNZLb5h[#_GuA+9\#3M\Jsk@0DmBf?cIp`aY5YF![)+CS5:,OL)8=CPI9GJ]m"'L_)9CIhsiOK!>Kl$[==]%[^=6toHd<Q6J'95=5]TMl4A#$/b(kL.TS':ShWUH;pk4eNO?3LH^+!1GAg^s&_6O_eJjgq)D'8MP3NkCJ%Fp,-F/>@FN0h8[@/ob%-ED%,luN7!591-q<,%d>>__Cnd!LDTOtDNjSjHY_6:\co^Z.QT42EbKg':'hPWT;d"0k\;@:VZR;kpS][4RDPG-^*TWFM`J+DaXZ%'qVuP:&0FM1To*gm>8l[:l/(>e%uhU2=OP-2+skdeS*C,ca$sS?(#gnBcNW-h(,P?R47urHYA^Ap[Qd9=N=\*3:olR0XZ;+Oe7m3%FPNm-<2i@S!WB+FZ:\[hO/.j/oI@-Q:XrC0kfi'OopsO'Ef8'XP]$i:V/7o`X*e*08*=+LfG*YN6msP:PP]ST2(=eV^26p&#o#8S%0:Cuub=ZNMa95S`doQE6g8?tjC:6XmC,0Q=F3Qr0'qQXVW"$cTWY\-+3iI8+dSV#DSJ?S?K6"@lF%TqY5r0jhh+DNbMbd:]+R-O(%4aPHb"HkCD8:>V,cs[?G8gSoA^`Xe'':#P=kha#ss/O@'@S8LcW,m6D]?TZOC5rSZD:B?>ld7#:alo=O_0-B,6.^\_N3Qa4kN:Q`%fcI)mcpgT+mEN"%a0d$igQOX0c/735%BjJ&Z@CKp=$J,to(5r6T(G^LRbO=o8]Kk@rE]*J6u<Z6HhY&!TMou:krV0jWiL642#XT2%'"\oYA%;3)8uOf[.N/)pSiO$ik3lU1CQTn5=>k2a,4/N[5>elo7]UHEiI%1c<#/\IrQZ)33-E7RUY/b\G>=JB(^mNn5c1WFUtZ5G%Ubc_LDmRsZZ&jD^i;m9H7_8#]fJ-)qoK7o#<EJfEp+E:-J2rssl2bb`>?"+j>%ht>:%\OD^NiCX\LZt!7DhOX.F"h(LY<Eh%]kh)%2shkfGLIH!0!!ZMPu9I<<[gBnLV=O6e:W'#RMF?=[rI1ZQJp>t5VLn`&_0sVo<"$SV&PgCK/[SQTkmU+S`]W*RQVq.`)MY/[KjAc%%GI%J@1ZWeW-U`%I?"8,M1W?;.NR#dQb'2qgM!s4P]"(OL-*kKrmXS<n":`1%YK)=\t)pb=i"/3OK#]\q-;C+7B33[N'8bVj!EL*%>>DHqN_lS0`"E=OWANgI6-;_MIQ3Z!h*IN:dlrsG=0;"'(jHB5Z\dS]@,)ZCqX&/NR,nuu\c,Y<lR3BTZdY)ras\FUE&gd1[$mP'%\"9PJ)j>7lEB<N0S#sVsg+8>qdI*s^-?[a@U>G+TNCiTFg\N9pfA"[Ll_O-,g3JV3)+_-uXY%Gm/a_+!mCksBF:<"I>+7_?5*-W.%[KG6,?t_XKg(#M\'A@OpRniUQJ]'rlgT7m=/NM2]"C%ur"6c9mNE^E>7kna9Yl6!>1$Njcj2A/S,6`g/$+Qa3ml*JB5UDgt.7%ms%6t7qK,BqjKj2>'&2d9C^Pb:!Li8X^O\Cp^PLm>p3W*:?l"gjnVh8uVIktgq@lMI2S5LGs&Ih#/[;r7h#o<SU+Fo!]fgoHJSP:h;]%)q<hj"o@\`28VX;#ClI]Xa_8FHB3FVmclXo?+<24la&['adknr4b9SMo`jGolZ9.WUQfG7]:C+*Ho.o`=p^<dL8ZeqnlA<jO@T.A%5Uk+GOZ1.u5[r0@qM"W7^?ND]+.Jh93liE^d57:VBV.KM3h=[@6lln5M54g0PAd8/5iT*P"'4%V+=DmDB@'$N+`jd/fggJ?dL[[2%T]u5e0GsnL";7G[74X,=,3=c@L0TFqk)fRkBOo^^XjJ;/F@I4?)>[:PI7@Grck\R[DJn[7-I1+Se4CMFVA%@X2e:un\OE"<)akgI%85k?T,ebW(G$U^3](O/^jD`Iar?N;(\1_f,+f/`6UUTR:Ut<`m:Z3M"Xs7\]dVfPu?nrOGdn18_7>akIrTAjjJC^c,5LPQWpSlsO%YN8@AqTlD-)_*Fj<%B*m*rV="IeNm-M<.l/=ThkNR/itjIOFe@I,Pa0r[/!-pl@_*OjKm)B]<&5=U2\EfF3ZN%2rg5WHXi&cd)aP%hBSkWM4m%F:)]dD3mcn(2(*L<aX5;ZX`ciE@'f)#W#(]D+Ia)Yoc`,[O+KeYP:3oOj*Hes;i4+r.0$3qDmt='MS[;<&/&R4Dg!@$%;mO(;):)aRYs9s]3lEP:\+B"j/fi#camcP73=(;Wk2<!<jM>$AG4=kY)cUDp(fl+45@$uEj&WhL)+IjmP.GeH'r2Z)B(ArMpV+8p%qAdR>rHA$QV>jVt3uAmIeU@N"%GoXsTm,,Oh0Qgg#KcF<ca=88f(1rL8FKd_bt"])nQ2sI"hckCqP7KCrR'N8qn$TNKr#b?b*14S%n9QePC>G=3BtZ#]P@(Tnrs"F'E^Tl.:C/ie8SMRd,g,0I3@N8.)$4(@?gbU,#NJN@Skd05JB`3G'"p12@hDGb)>/*#1Al0QR^1=X%?2Xe2X68%Q;?PEf',Zi[*?Em#Dho/*_5jd9YXSC.In?HtQ.B@^e\4oRD/[&P`0kPbdOSEg55kZH+cn\OK>U-l"EQhfrh(@o\O\Do%>48kNYs@<KdfZGK2IM,L!@H*)"eHAueNAR<p`Z%s$Y_/n:M/'iXLi).!ggo6=H6,Ij;0G>ap.>#!O_3_$/Y]501YNj)h.WFQjTDf%T3dmm'7RX0,jk$9M4mOZ-P-FHnd4c.3+oSc3!\3]#5\P<egK;DM[-LX=Z&BY_!qO*7gK4D4eGHAN'[)!+P'sdKHG_qFDgSYWUi0h%+qRWqd.7e*aBB[`5`5U1rtCcGbeeWME*h&@:nc.NdP^763&sp4,Rrmu*L<CcW+Nh_r]fLWkfE=i6g"fZlI-ef[/H:e^B;g?[gi]X%lLH%f4oBC'cL7PFe=Xj5/9fS3J9qR7LAio@R7!8LCAj6U4K(C6!-HUKq!Y>)&D8lAHl@=ke*1C(QoKc-E,.?;$LVD#Q^beq4u*0d%kG(+9RPM]I&TjrQU8`b>kmn[sK?6+*VI#*Pdgk:FhC%sK,*+:KNS--F^MMH4'SDSb..GD@#.'m#&9]`9R,3tf;I%3ZBeG4%Z/;u$%7a[Mn`e;CcA3>NB\RWJoH3WO!6[1&hqMd^i6)PS?FoKk\M1n]:cP\GGcEjW237]o2KFMI2&[,F=N.V]>NU%[W0#S1PoI4'@o2;^I%DboZVa.Elsl?$5j25T(==ND9IUZ#TSIhG`722@a4Kl-*_D_43HlD#G4Sp5CHL@qE!]H'Bu-r.baD8N0\2B*Wfad$:<HBW5PT1%7m%JnB&];dVqKT0sO_?V:&!;3pO*Hnn"\*uh,#i/29)%mlR\5OtoL0g]bV^4@gc6EH,:K81Q`<5H9q20@BJ.Fn<FeON]pR)<_i%__-J%L4@-/C!uCK2r(k&&I]ba:3-XRr7'4bUY?Xf-.%tV'>tU6TWcQIb8?VbG`,8:^\ns:@).=8Fbj-<2@@BI$RcP0$O+SdN;d"4Tc!^7%7de>.<@/gceWP]dIRj+uC7%A]qGjS#XcJ$2[/n4SW$t5k$#jR)M#!FUZE^7rnoYsP*^Wjf\Nd'aK$Lf)o5NSO]l"oEDo5-,cGsIs%Nmn(,^YQjAqDYcrI!*"p\ReX,l;`3Lru%i\]?q_6rDf1S3sP[A2Z9\Zkt:ODaIumH1NEgL,La.%9;r"WDT`8n\mUb"pNoh.D7Lq3%S9J3[*T@^95/mfN!Odg\0](hG[U.DS01ZE#PnLgNha)tUL[dN?p&?@)ci)s0e?S8QbgAD_`agnIo_r,jp>=oJgo-79!Ce^b@Xd##%^Fg=QbPr,'s"?q-kk"9C@;GcoMnu@HC&HkkMq.!F.Y3lF"T+YCIp;MZ%mT_(bo]0Fq=ANc-CmiMKbVFMNTT\)F8Y-46qY@HGuRHq%SefbGU\\`a3k1ejW@e-]hG]&(VZD2S`o%HY>+]=$85h`?S%e'8_"n_PG;Yc/N>?dBn\8u@_+=OZ..g^'H5!rb7IeGOLrYsQEqR=U%L;rj%&BVpWDRQ"_fofb&F>,UYArZVor]j8f"?V$p3Z<sune]-c5(d]C?#r=%cn/O?bk7(+--T2NPRQ*=0gd8NM,Duk-3b-m1c&,g%Au86NB\N:_2`G-u'3F@2:>1m.2<Bb\9f5U>iIWH66uo?ZS%M>."tSk<IVD%d3tl&6m?s,(]/$81N3o>(HkVDrT9WUP/oPcU0V<(H%c*@nDd$8(71$EfF/ijX`acMML7cSC!8UD^Fgf!^<@JB3[2Pn)>=aocV2LBDRg\6]WYj&c@)L?.BYaTWGCcEEWnI@`34c[/#r3[LT%PdEY=\D4KgXBT4fWOHe=D&dE:fJRMRgV3ucT;0uiX4`i9fb@/q#9Q4[;5`5/X93DO%E[+K-oTAQ8()AGg$,qm[&]6O3oaOpkh_Q4%OY($Nf=K@pj,H>HeF+4j=^4eBQC=9A^dn=7[$@-NJW-=/pAb^55=#g.%HRO;m,?<K=9N,@2Nrqn!Q/f')#s0[mOr5.L@*hn*/kpA%jSn4qgcu$6T1qQE^m'g?@r;5*>hYM0YpkJc.Un#hmYL]N"JjNH*-a<(%85n+:!)\O7pR1H&=53VP-p`$9a:RSUTp[?I'baZ#p6:/%C4^YG:<mH*A*p%rL:*)N#-<6[2I^O$iltu'N*>=/UPN8_V"h8\N]4R;q/ao,'DCB5NaA*3>A[[!@MB',M5t9;BPOd);_A"e`au2;%,!LQ`bI/MC"mm#KV(Vl'O\'I](BC"QPah6b/Ffgt/<OQ0MW&70%(XcDX36?ZhB+\)WAbfU^KRoN_8/lD($!.Icpfbg$Ep^pB%3JE%KWJZ6A!@r;k6WtA1\gJf=I)$u+h"Nl%dqqS'c/*3;JAlQ\n.'%BgQ8RZDGF)p-i2"_TgZsTss,p:?8jmaal@"WOX@r<hi-tgJ[q>%D!,9ABVT"Fn]->L8Xi2!j@3$\1[]@mNAlmK@>*C14PC?`j^i"6<MS9A9GNq/8o37@-6MNOP4jd6g\Ru$FciC1\5=)0\8&d-X'O?O%FZ?C!E:E_lD7V8Jgq&BKrPYJBrMhf]T#*o\%B4O!Fd$4r<.S40mB^b0S`$'LlJTL_iSn=."s]J.P6T9gCRj]7_/R#u!)mGlkr3u=%"Oam<n#P3&oGDqTQ'W6jSZ[$Jpa1G)&)O]X+Q0D`6$YYLYO9]]T-M1e30,0r9nOTMYR<C_%>Kuc4W1#4fYWT)W&>(LHV*kS958uq%g$LP[19o((0M\aQ22ggl#]^5p\m;dZ+RQtd"a/^G@:F%2qWSD3B'Hq[?u1S*6h710kfN65Wq`PT^\lh*oaV)T:?Z'eU-<JJ:$U-a%"1O6D:FVhAbD\3:8Y(P^$[Xrg9D#HmP3t,49^;K*5^Sho^%Gp_+#L^m5n=sf^\`+qfUC6nFdLVgc:H_C5nB\Prd,df>T2B4pDH83%OY4_h:#(h!NjqH%1F.BbrD_7eQ\B_4_rk*>4HSlYS>a\PG5C'?ViE>hn4rluW#!VU?HZ0I2nL67DB9P/]RSGOoV=B0j>Gt5V/FHK%?KA2UdIk&8dJd`:Ai_#U4/t4t'3gb,r?b*b*&aM2c=b0l4/o\=JB:ZDa<F+;[LRlg/X_>uY.4XAqlkL1h.ap,j'WVhK2J4_X:DCt%n'0RmamZWQ2SejkR\!$?;,JBYqMIY2no^irC$<%OmWYWN.k;*KSZXphC'8-&(.Lt-]>1V;NrlIgDP#^bM@>Sc1HY55WXn?[p.idW%3MJ:b[9Od`IHCaaHcfHq:=I7]Y(!FDh9IVt,g-NBF^RaW!K]s$:'mLHC=j(]Q]?*_Iu;T<8Q0nqj0I4T0t8_6)_7WRPCr5NRg9d!%M=kY%BBe<GBNm$g$%V&1&h#Ag.IcCsA]CmfJ@1#3LHPQN"dL?0E24IR)Z9K5eIR]*J)OY`qa%!UTreUO8,0Dg6!BS])Ou'AAjj4`%=*&#(#*[sV9LB@JB8[*/!DU1Af/nCcd5:o]"Tb!6CEEfr*"T937P!+7bJ3^X\,HV*K<X4Ee"Bli1hh=\HADGS=b+o3U!WWi#8=mj%n>V'/N.R8m%p%N*I1'[TmL0P0m-;&d9g2C36Z@O38@iI&eXN`':(MXHcB-/R92Oi2JQ[PaZ-^Kj%T$@pbb,tEl^"S1n`cl?7buS(%BO5n(6q89baH$Zp+Z!mV:UdrL>`<W&LZ%nIC+CHFjO8]-+2UNjo<k9@bE&#h*<Kj1].m;-*AqMQo7*p_omRR+8oLI.JkW8`[3;C0%f!E2#c/HDeopL;')sQ;_FV[T<iLUBRYNgVF:-a#G5T,IA(g@QqRku6%%\=9+*<gT:8JF7$(b8pX%M(A[EXT.kMlHZ]NMgIhDKg0"%INLXDDObP[$h?UP/(a3m*(_Zcn7JXuO,qlfRqdXab8"n)p.eN_\_?Z;8O8q)"KB8/A3t)^[DjnqnoqVbA(D#LYOS_]4uOAq7`SaX%&1[%r<b/VcdC@i3?IT>X<9pR6g"gG.j71Cf'W>4,!T48q.?kJe&'!`"QX]6"4!sY*[1Ns]r"\&Jf-XBU[=23TmV^kb6KM#*kejj8%FWpW2gg3*+Mq=g#XYWd`]A-%&s!,2kEhdk4>)n:`;YZp\)$gg`8ag'QbF^G36EsbYhWI(\?fTS$nAq'>n\.k<YdN@TIXgsLp&c_(%9!@X6!IWVr/KZk]=,Pb#mre/8H`^(`\?@h=JPc&%*,SXnl&0NF/+p?7(IQ<(B^mqQ*\EU7Dkp9HZF+n'[.^oVB[hP$;^YcEXF3se%/<d"?EbG>6f6KMo(;$:=c##K;4:u@1)o%2YUp+q4Kngf>gqFK@IUf]#h*'F_#efEWNZ]T:T1Mmt*4!ta*38bb-m+FdJS`289=RVM%c!702W5JP=-bJ@)=KC'hc?jX9&%,6-FI6FIX2M=.&^8GW'>Lt'PQn>=r,)$Sa*k&&ODagh+W/QI^U8epo#0GU(O`+.?L]D[D_%o7%gT3-rbM#NJ;9s/O/($j)U%!<cQ1RD3"@C>Ql=#QtNp]Jaj\u/]E_Msh@[2/k)>Coe!pe]!dCm4cN%=A+GEmXFG4Rf?n'b>nP8_<b%hcV\95_2DD,7T2?*<A(2H\m_c.Ip\hV-&0kU^!s+TAgsgmtQ'mrf3:/'?@kQH@9kJaFDuMAC!X;2r[u>G[CB^lMMEH?ZPO!W0hn@%I\Xi/jI;3q2`>td9\kV>;Yg4XXjm1/'0Di":g5DtDQuIB]lucPC^tQ3RB,6%Z$9=(3gRpNjtW]l8ncBE0`0m=r$&_%>Q:N%g>b!^%_Tqh!<P1L6:SrnZTr`eTl9sFN.r&-e+?=)2E?J5+Ckg[!H[``R8C)u8@=e?'?7H&$CrN-f62&hi=(]Sn-WZcDauT?+UC!V,N5\>c%UY::oG/P#Ra[_+Jmo&rP3%cu^lUNS5rgKa@R*!0?0!d,Y]J5A0^A,mD9!fA#FA;u?GSm*.\Z.KK6OP#9]aYh4>,9[IWf2V%`m(>.%4E>Ys3B43cDbYY`*`TRX+'H3)ao8Z-nIVefP@bLcb[.__X?HL6@7scBg)W9]T-,s*No:IG-e"SA5*mJVh&WJbIcR5M#OgDuO?P96%<T@#XPg_s]h`eXu$7F,"Ddro`3Uo;g.XmGJ]jeI#3tSU1man.jj/CPFYS%nFEmht9n0D=hIVlr=0,m>D>5P&J1/e,,XR^o/i/;?d%b3aUW<T*r9puOOc(#$:oW8QRV+/uG*nKua&RG2S7Qe,$hb]e7m:GeMX#QTa2I;m-cMa-0/8'2pX@=rHI]\KM+B`b`]TWD;Y@o<X%%rncn*`c;eR3BS)2J6qPVl?_SU\oTk-"HD5>9,H8QpIW#D5:S*`Zf6<T?S06janmZ'J_ESUI@Rs,=-Ms7I[)_o4U+.C$?@B#6"e@h%T8A@$r`Q3R#flTqk%OZl@#i.<$G83RbV@idl)1;3h(3rbhh0hO"ljN;]1D>i.)qQqji6>"];4<Y%A+itF*`mf[gIZZ6TZ5Zcu/jr%5(/c3';b5\6IF/t7`Kl_P[<%sK`QJdNh`4Y=i#ieKZK9^!!e0DLIle[Ua!c.qO>nN)&7^SG?[Y7Tkjm9b:BrNrlA35p'l3fNR.1B%k[koCSjXeP$2F"*6)A&i_E\/pcc=:/[?jrlV^t(f:R(h-c8lQ'C!`Ml.gIQ/!)]Tge"0/Z'00_fr@?tG_DqmI)@)&&pmDaM!r>LU%;7UH<MJRk8ikQB`D"5#51QG(?Q"a]i$OF_3=ELWt&h5mMA&cNs6m]KS(pcOoNFLI9_`\>hXU?pC"sKh\IG-IX`Vq:4q`Q,VqJ;R4%Q-p.hUs4H'G+t]:,i47W?t<.:lC6',?D!M4T):oGISY`ro9_H+qE7ddgSMI5OA(Kd>XC.haTsuFT;eI(J8c?IUmo\Bf5F<p^-1mW%L!A1+Gl"&&d9pM(51n#$9mT$La@RmdENinGlQ_`nXo7rSGV8*M_VNp?]@;+S.o[EO^Dk[e);L)@ptRm"0tJCQ3tfh(/7oB*#bpGS%G%@5VIclKKBALRqU+KuZE4["5QG+]4O6,E^hkG*U`OD.Xfe8s4Y$U3#n6ik^*c$KC-*]i*Pj,pD\)4$5okIqnncV8BmBG#p>pkMW%N8$8/NGS-[?#FLZWk*,&T$l"3WtRtm_O`PrL="3/6pPFCZ#-p"%6gb<2V#Wl$?"T>,Yfta7DoQr-1KL7O,F,g5!fqTPSO[&I"Wi(%f;EWP2@b_$bbj%eogb'>1>THF<T`3doV;1OpI@[3`p.Zo]D@"-Z64_*)GaA*bK!&#'*(EaMALuEXl;e5APClfk3.=1D!5Dg70qZ:%n]11jiO;Y8aTdk2&l'UbfWPXkh:f8]G&n)Y%amq:;b+bTW1`e<j7t9$!"Oll^AUI4Is_O2lMjX)g,^`+r.J5r?5Il\C,FjICj[pA%rQ&TG4/l/"[l&p`-,3#/b^k#h/O\Rcp+P11gcsg+2_/#W;SCq%!O7)O*^N$bpp4#tH="\o_JaAXm(^JI\8dW/im111!g3*#PU7M5%$k-I#5MY[aIR.Ie-J.U,)4[QK;iJp:V0qAbY4Wu0Y:j*q;PcSYWT6D!?A<K$Cd%<Q&K8'Pil-3%S;TN%:)-/E%jCK&o]d3%D=td%%G>b.)@"T&?-6MDED&D^_N6YV4"gT>;(>-fb*!g70.2?ChlR%lY\_AJ3G*r6!GDtr^b\+A+B^#>0=KE9:P9RoaDFQ.R3I#ibZTH4^%g4ekBDnI<X=KE,caK%g2Be'fhJ\&FFpa4SYK6=biUpnFf(QL=TaFCkr$[3E7NSIV-WWU6oqb?k@TUhtn(tJ$EOhC?^H#/pZ<[rI'%V'`sScMU6ea,:nT!b*4j97E(Nda;?H%>^\L67=hg/9OE&*jZ4.:Z+H:IS5tJI73mcDD,&+Ei[WXA.M;Q?.("=Al_Ymp*1+2A+B>F%D:3.R4[*_KS%WW3A\RX``9I.m\Puk0`b9_'Z59Eq!1H'_gJ-j7mi*j4:=\r(YoCGgU!p&+EB=4F$M!a8o29j\%6Xa_m?PP,nMRCN%X=oS%5jS",+eV6s&8b1Snr\1`R!fgGZ(FSRY1W&D)a#G*mUUQR[b\<eOAAn\Q.N@'2t0Ob:uQdk.ZGkJ/>g;;$W)=s)<qSXi0.r1%r;Or1q68Ir.]..Qj5S&/H!@qoN_1EITn=/Tpqo"$UT6]jb&3r$pf-!7BB,.3!UZDlZ9pfs]s3#4]rc-6PWs_*`GT9N<^$j\_Sj"4%A=n)ZmEcC57!<_9F8bCI#&"@&kiJ`Uh;UYYjpgKgpf;bogoc^Y)WVf1EI3B]f-H1IMWsI%[cu6&$?PuaOB9$?lmp3)SpZ$:juStJ%-fEFl7&g)\h6IugWEhP'#jo85St=aVh/3OsNL_juPF^9?jG2gDEi8;q:*hfCA3i#K=n*sn]c?[a>FX:5>LbE+>dQBj>B9:'*LV?T%rh+@:]%sjbL9c+KY<7Bjr-Ja6>kg1$LItWA*6<Ic%"u\'Ls6pX5sC?TITQBJk0)Ra>'GR`8UOfJ.=Y[;%n`DCoe\@Gl:gR5*=hF\%#j2AZmVL5eAktT(XE^&3*#EdU6_ihH@$V<>jR)::F`Kb^?CIeRcg6"Qo%4k!=Ql1OQ8c"`m_:rAK<MU5TU;-M1j=e(IFaMcV"P<.%>dCi^-g_`rq]f.E73R"Lgr?hokJ[]X10#%r[ad77,egX^;PAMA?/K3(`GFO(Zu7.+I2?e)&*m--4>pRLRWr\WOLo;9$^m^d7e2_k%:b#^\Mp)oTdJ9-dO]"-age7X>Hd[i?#mXJ70>EQ0&)'Dt5uCZPR&7UumeGWegjWR*%"7U78!@ukZFO8^SUUSUS9&qck#\C.8QgAe%`:[3mC,#NJY^RqiDfue$Xk.c^e?+st*7_Ae\b\?*Q"(n6,p-8#h#K)lr"aWlHg,6n\QB%,p%+!2dLI3#4dQM,X*1$^IpU;0lnP+q%K*36U?JZ2Zd`QPq?@*]Z56l5aL1.Dr2;8^JgUWYCTDM2cI$FC0SHAm+Z.-aUf'g@8%%$th.Ne#2>2Wk#H('A&gcgb*DKhoG@Ijt]%b@f<:pZ5HT'gm[H<"AuZ<M&8P30HkV4*TTt*INcXCbZ6)pARi2^GfCRb+e/*_5Cn^5Xf9!HfXp=;ACq"I=-U'Jt7W_)A,AE-19L<%-ETnJI\i1p"6Aio`.hB`U2Y6!_&PS-MZ`K*C_$[tJ"1ND+q3<Ae'=LPP@-tc2cb;tWep--]JqX[Q@*>b+N2l[Ol?#1$XfuYVUB^N%e)`o=po?<5%FCg/.3fiq'Y7i6;"604]17oP#3p`hGq!oj_E%uLP_DdP(Dhb,$0mGlh"GAeejaCJ6(Cn!9X3=m^0:Y`S];.NqkN_u%j>W&>][A$#08SG1$WeY*E3Y-00*en)3Hk,N<'@(MM2&Fc^(;\3Q,Y<R!g1]a/6+Hl<NEIr>J7,#5^DP!\$5sBq_t_U68fn#$#&Zt%S4kh+EUbK$mOHVjbpX.mFka%Sh?f"snN&q$ic^Cc+V"-N+lAP/7N^F>fp/o!Ta:[a:+P"A@SieGUW9I=*'mfgOESMXOU$hA:(s2+%>[DD`eOItk2o1-,jLYTS^0M=,#GX"+I;_d;U[?eKHd`r$ZuR*K)"V=W#^PmJ8%_CBanq'`=^+Y>bf?r)0F:/+5$la>i9Li>S^0l#%[]83#<]OTu6X(BS9G7^%^MNTNr9Z"+.^XcKY9qjqDuSiicqESQEPMmbcQ*8i8H)#iMA9N*g08tM'Z-B*`ana:b\Y=$d37R&lilOM%h^YLPRSEeTk2eKGm$F`KYG^M47Tc^Fr'g1aI!hGkeJ=(F[t-ajeMet3SX1:74,&S@_o7'DT]I8F^ug(U`QN/qcD6-ZpOuK*I^OQN%PQ\F%.h:q\Wk)qpr[;$d:&9DPZn1U1gM)*o+.GB:pq>Re$:I0a^J\BQ.,:cc-VZIt3_@_/,:09Jhh^\9K[hj23rk)LP_?+"+:m?(%E;ao`:N#<`c,OmdX)FOF]A)]F_>WDB+6I->e?aG-am&-37!a?NI,St$9bJC^pLDf(1(hOJB(-DlF>c;rgNP@A2drukd2m#5c.(c(%f-<3#YfFW1m4C<$Y7i&:6O;2q`C.I5H0e;=^(IMjg1>a@h_c6rn'70'6n5t/JVb:#,E^*?%LkEq6EK0Yrjobm8Mp"CLZ>+rM&g&T%)]]b'O]BXLEh^3-3JrSn!GAFb&C6B;\6Ra:5WWj2PV-"Q34,9#l?@l!LgCa[muUMj%Q]m,ql^r8384s%c/8>dZ_q_1_pkJpa1eCk%G\9ien<%h_,SK>IrPOOA7cN!8oEEnG'58-4H2Y"RrK(_0;g6?#_sDSR@r:bI4PJeEO6c\T&0$BJ\B;-iGZlb)]-&aK\Y%^K9BTa.%^h?n9,ch6?drXduGu=Df1q1Y`h9qk5j>5T1o9p@W0&gkmkDum!@Jlub33R%N%`Y.*b/\WNX_UB>j@=;3W_JY\<\l"^=cu_"(cf\p%brM+qV>gH7'DqYWkL+_PKgT9n/g%3C1-0_rhf#\[LM,.15'MMJ!Foh8MMhbAVJ(l4V@BjBDI*GG4<&A7HuA>jf@H[<p+9H.M.T'=%U+qb'lVXL`=,!ep2MUPNS''3+[XAB8114/%]R9WW]`)Z)&]apXV\OfOpUuj6j.j]84FQrVh.2::QPe(]eu'i4HSFm7Rk"?a%sp"&%4b,U/l'VZV6`+/tO<';"?YjrF7JG7!6?N8$,JbY"-dh/Wf/SVZ\5`GOQddWmBV3A"S`KeC\-P:;_,#4@Ejq(F^n,_7MsapB?Rq76%\$Qd[I?al-Q.X^_ANX,=Y!i!o<]3jNjSB#\Q.eHLhd`\T8,J*5L,t&@\N$QV:MP+8j27-4okO:MSf"<)RI-:#HKjPTp-GeNTBF2f%PIj^9Q-Z'-6L:#*)l-P-OUD?.lmO6^].;WmbtGkD-bg9SIEVcX*OtV<)./4qE`Y5dPPapn2KQ_iM;<q@)283W)k@O.af(BA9JQ^U%epA[a4!GC8<MoWD.`q8<mY;VuSfSW,Z_P3-21HF/#*5`fYgW+6,?'&U*j2>FEOPs9'DdHWQ+".S!FCb0RNX^7,l.:YPM/QnG=L28%&-.P-15XL\fJjh#fdJ))Dn4K9cN_kR?jYmM]j(;d)<IR\bX@joFl4r@R=eK$GNTpZ*d$AtLGJ@d$1,"rEq4Td&+i,3:$3!nj0h3[%f2$1B5f'aKNXnH;=<l2j8m!.>+k[q#3W#=Mj`4RK5Y%<KPAM=R+CkPCrX.79+"HtL;\/V]`,)!s!aV([r&Q7V;`gXs'_D!'fjUu[%>3PlV'V0cg1C%]V2tfKI[L8R[+7X[Z1_?r*q"_PI.mVE>2_>/-mYnbP!YfnLULKhD#Pj'83^o\R$d_-EmYsH-G#(_-!1Om#Z-mDo%EWhj!Sun$DJC`i6NR06XMEGK^-)n`T2u07$d#n*dF95W?%A"UFG!J?"jSWb;Zmfh4G%6dbmqaBbhLBjV"3O0fb+8]3IVo&K<o+ub%M&nI62>-IU82&Ld4.sA]URfb-iqCM1kWs$*C'QR,,%*?6mD>8SJb(AuGr.Wj8"a'bjLpY`p4^B+#lk]p<hM=DpcsA(I<jHT>K4fm%eUDBbd)ts@A/a]BJZ1e4d^DDBX1on<BC1;[!6#oXJj%eM43C['JJN^k8tlF7V[.@/CQ7\3*cF7b2d<OA8>Y-EYMSts*.a\F=-&56%5YK>gk'b5N'VJ:,[C++VqkKRa"aXB_#ED&f%MB"P-_SN(m4_ZC.(3Wfm72&$n(pK;TQg8T>E1u+hSerT"Xl^2@%UBAbLq$V*pDik%qtn*thm*F^16,^$!puOK2spbkLTs$9bhL*ThB(l`+X0.-UQR4Ub4df4!D9"5$=`,bPc7NQp!rS`=_RNjak]l&JOZPjk%nl^niH$K%!RP-*$M8c4EZLs=K)Nf/=Y.f%F)m]r5e5.QE7G@R/s"^VCC#$/>!:Bp/'i"D"@*>>!Yh`'5nuQoZ4uMO\.Z+ZGX[kB2C[">EULn9%hT/E5Vn.5.5SMV(n:hC*[Y<GT2h7/?<rFOmp*0pkgdU!\dcsO][#l_$PP[;HRVAR5:S[R&dl@J@#Z+DhU(R/W]<QZH^,Q7ggluuJ%`K1!m1mH5=?S,kJ+)Yi>7s7s"o2"X%H04TV3ju_K;W$8>l_F&/];mUj;J[XY>VG,;)n#Cek65Rj,oVN-@[kp5f2+>9G$"RHE;!1(%4'Wee1[NtnTO0QRD"VaWV/UTZ\ZijGE4g7>GdKB7^O",:e=t@_`9o,-rRGEWmBj)VflXb$q"$TqghtkQc($u'W[6b9ds?mS-Sn=C%2U1hNIcI=)<7u?&RLe;Anok7mX2V3QFh(H#YF6n@X2a!gr:RDph'\rh]c0O4m'!!eIXR:6.T*gY8?pY@mp:%!i#M1Qr=68c=rI4<%%km,DAUW=lhNt>l_VIs$Hi(KVoqBX\qE;=")A=CnX0)7tBtScCEh_26oCB<bICO$=GNeIhGoL'Mh7(!GbI_[/ahgJ+N*#&g;CV'T%`P]$?@LoY<W?GDll]"qO2TrO1-h"V8<[b`RmVm;-Z;nEhW`+f&l[-N?I],\_6_^CMZISVdU:h[I4YLNCRG]-TX_]$HYUd!LjW2@^%,d)N1?E]$S+qslrNY,r=Ac)63I%gEZJ_moG488hmXpP<'%QSNll#/mJH9WRh%]It)]EWI0dFnJSJ:G%36#ZZ`_3i4lYB$,EkM&V=%ZT^'H_nEH'WrJh8%<aqd07S(TD$6;b4R57hh)Boh"o,[r#aCI/r0[X`E/a\9SMrX'3;]\1=3%R4\?h?A#'t525A3<G-D6dlg+P[9%f'WH&f1b*=,LFrj\cHL,U2XfHg>(=_dt'u4\i6O15`%Fkr^)&QWadmg9g(Tu"'q2GN$D.33>h+3dR%?#*Bp!Dem3eI0KD4fMDn9m%&dJJj@f[XmNBPYd9$D.JLDq!<,HnDX)g7\n5X$V1EB7f;B&C>YfilS(*Q2E5bLNrT'd#T]PII0G6!N979kc5Ti53140\Ia,3i1UB%T1\>I*>65f[+-H$i9V)THkK@ap)-6o7`c1;@[BPu3o9r!\G9+P-s")6P"aQc0\j=LW[7^Q9RO7j+adGA!,U>b\H&+s1:pQaQEWqY%NQ$"I\$oEF).#QalMe4<7sBN?ri/\WiT^\)8*Nj+]HB#cR=0MfZSQG$jlkPkZ>(MTJas%)kO<Tr_lUtG4%]e?Ht25t'WsF8a:"iB%D17\3]Jd#>3LtShkiCjR(mE^5DkB1qH&[lteF1RkrfdhJh$bY)Dm)t/)76$NfSRHu1a94Gh[W!C3J1Z0GAu)VjNg*4Q<5c1h9Nk'%1d>Ru(A#*4HbV7I+^Y]2qYFfh7cFeS52f92^at`M(sT#t0KX#H4qFn^;*G2#/'k&c&V)ccT;kD<`.?dK't3Zg3mbH/g(Wu6GXHJn%ChQmq4r`6b@us<WgLL$LA5'R0dB8'5oWa&&[[#!kUK"s.P3Y3M[0;?Z]LIXQl"#-=Dbq<l6A0('hekPH("il>ES7\q6YpEo'_;d4%*4KSu9aj`7L2!4!2pB"IELQS2Sq#QV0]7jCT=OHdPEil/Qq"R5;&;u>5"kFD\N@,gh$5mcV2ib-:p7T:o,+l"P@'Z`-AIqa5/0.F%YtBth.!*B$mFgJD\a!fgnO;PMR`;epNr&#Ile#A"CCo<m`[gfLAG8<u?`s0k4gJ_Q=>=XPKt0q":M+9;KRj]iI3ZAh>/.*#!6HG<%RAE0iQd9?4hr]JmX%o.\l.OU'V.G+*16^gE:Or;^8g*1i/0&$6MrfDnX,\S?6is\;osNq8;F-XP]D47b^6'<*E9Z4+RssNrGNdOM%YP/Gdc(D'T.q`H"KRA!pgoORhi[hbnF(><B=X&nq#,u\A&h$6I\n+a_XD8WJQs$3/3(P@!V(`fh]RSQ\@B3!Tpfp6bW@YkI*q*8)%L,""^L(a3#d&q[hK^N0ISq9rlX4BghDQ.GR\X,nXfTjLYJTAnN1CI)nhbTUSn=YgAYg;0e_T>"1H0Adk:Z4.Z,;5kn0*,ujr.fNW%L]g%NQHp(9beE0q+osp,G_s*[1Aj[4/-\`:qERa3;R=@'F@fD(E>s+9jiA)1V9)Zi&!t>C!H:SE*+FGFi98)2W=K47JM>=$`]Ko*%LrE%Y/P,tj*teb8*Ue>*!#XV5XRX"LdJ%\u-SoFP,>'<[JpcM<.p0=4_3=%g7UH?q?AXj-Au^K=Tb#CuhRG=n&]Yc"52"JA3Jh=)%P)rd%MRX&!dPKOuBk!K!I!9B=EUZV^-?aBoU1%ZUlQ'+sgaSS_B+cnrADr"2GhkMro]s7>f5m<+nBR-j8BDoUrHFa)"g!?_)-V:4%oYqKc$Q*LE:u=.Dd5tf@URsWg!<kf5ZSan=UWF]?3ebV;le11F_M#a\3QN8P5"cC(R^"SDa!G)&V[@IZVAS"Q9]O]7`k2LtCiuSf%!%>"WNP+=)eeY+<Z,I-72/tE9^('&j=SIJS3.cI)*el@mZ*:k\U[4IeTXRt-6"IrNr2cY#prRJ%pMWC?70Z.?q0:'Gc(P,la&Ztg%YV.dE`\(Q\_j<7LkuFZ,pn3X3?T&OWdbVA.@P!K'rb>3=Rr[LS"^A;?F6'tgq7c7Jg8V?EPJ+lZ&q8J+bI?39*NIqNcBq%SY6=JK%9`4*b='d2Z2NPs9mcR[K0aEk_8.On'."<S9J&ZrM<\!`J*7p?E5PCC]<kER*7D'$"$K4[L=jl:7=+.-aM8'q@E<i?!2]i9q3LZF&%BZ@su@dC>`A%T_sFe4q8T;4<TT2$;aqNb>_o8YY\EjIT^Fuup?8ES?6UE:!mj?Ea-SN/A"\8/H#qgtAY$YqR)&?]%MQi3DA1n$4]%h(2!ih%5QXcLoH:cP"f88O%-R94nF*282X14CmmgS/JW`3+Y11@m\/AFD.:d;j]j:A.ui;]e+#;]X71J#As+BQ8%%4)u''ME'e28%Z36&[RYB%7HM-\uQIqOZiPN2KE1`/3a;>3Y(?`h]3BF'9YfqRL_iaPI:#+0TIC@2.+((V4er+BgPk<ue3SlC!V(6`?rF9aEIE]\H%h@WtjllKEY)F"24gHo6Z+3%D(#0bm=RV!X&o+aI#qY+/p#4XEFCaMWPYI<!u[pjR)8842md"ban5@3lf+"MLnPCIN&$]2en5DrZ3%dtF92(*PO*f^.0#2hf:')k<gL^)0m>B=3KgDFnF"eg[m66esch1k*7,eM\P@,,HoRNiR(8/9lE(^-,ccb%f6B1qt-sc@s_r1FYL9%f(U=c*l0/ajEmM>m^@EKU>VEMVRrQ"m*.>lQ]$sZ$5Z*%DMBTXA!e<L&(7!A>X:pF@[MQ0>VhE>JaA(HmA5"A0+V)4hZ'\2O`HK<%[b09:&(=tnT!c^egWmfs1U0P,5P\j=g483W3c;[>>n_F$0hUthbN<"R7jKW69s5lTUmr(8Zg:]Bh1[%b'd,E?+bHt*/pt2^i,`G3%YVNAiZCTZtZdd@4=4!r?A^MDWpBnJsBK7qlmM0j).03)?Tl[E1_hurTeBgWi/*LZ$AFUR!pBirb/\$$7h)%r<"eAAqi*8-]mM0id%ZTAr*U!r2SY)Ws,7@-k=k?^HP<7id-6g%cAB??7Z>si6S\s]RkZ[/k<%EZn\5XQVZYB^YkF!XZ!IJ9.:P[psg*;M&MUHHnOQV1_@%9`FjBa'NfdR9lQ8q8tJV[(0q.OlrU*e^.+\1YX)SQaXos;@F>3O\XA2WAPpI=_p*G?ro:bf=r.mkWQZT9IRGN5$AbDS;?Tm'!m,$%bYU(X]MHWk_`l"L+(8NlZ[g3/4PBa8&E:O?<gJq-`lYJ;-(<PajtX7=[Xsljg-<N1m[HLi(;!`@`H,R9/$j-tZ)`5jqD;iWhrfRn%O@?V_2EN,<!YO24]^)mpNKlkDjt0[HZQ;NZ:5%[CPP`qQp!nE0S<E?6Qc@+plp[c]lE;hnX_$fZH+)@3Ea?ks-I+H*\KhZ[dqP!-%_+Y##Xt*O;)<\kc*DmoH3Po9%@s<.6IiY0!K+#&2Itg!<ce>(VJY'5Xe7WpX+Z8+@E\N\5Q57("J_)6p=)Co[h;.)9<6*Vb-nUs_%NmF01>_F!EV]ZiCb6"5[PfP7K47V!la0,9l.-=A_1Wpo+KokCmbi;P+?5,1CIKb"3X4)=>oB@IW2B$a+3B>aZWb9_^.dTnN@+O&,%E7(]o:PEl7#3_PCFH?/ZUt^<s_rrODV06-r4^2!H.mC%PGW`OUZ]"]>hbf;c,$JQkO&A!a)7$E(f\%&uk&E"no9+Ml@Ml,nXG`$d%al0!a:0W!&))s"iV<UFnh/_PA]%E@s8)3H$*dUi*>/EsG:4=)RB1Z>&09;T[/Bm(QF%+SPjiME>(a.pQmtZtC:!f1Zj05Z$c:k-1%8!FDsG(/Z92ne7:\['`)H"S&NMV6L<N&LPhn>.#!jD7l@%B5aN16/uqmE4Gde&e,Bfk6@8;pXl&Y%NM20qFqqbW^C?qud_k]@;iV%aiITX_"WkTP`^Nj)8p1E*CNCRARle3`3B_fiJ\0\TlIXb>GM\P=%4MJnu0l=3$X&dn_S!K=_b*:L\Jd0rjM81-<#&c\Vh3kIH,d^%dDP!Ue0OJ>YjORWr!"([Ft"GQDVTG6B6ZPfc<5"4h`R8&2nP3kbJuH'VqRL5lK\:22iMA,*UDu+XrfeREU(EQ#I1GWZ\0U^CP)mA%Y&d?iH:fiN`O&VU@'=EN<`7ncYksG3%n!860;aW:H+.oXe\`9rr;N`eB!$i0H2cG/lerW:U$ANscHd!N`TuLH^-6=$gp68)B!2u?%V]O-$AV>06e9X*C*OSqd/\<(LOFs*Rc-<R9:4GldYp.J-?KSAF1M!U>>:o$<LN?Sj[B16L6:o4`-lL$@>;,,c:ZU"mL)gO:0Tsds%:ZU"XM>:]^B(>G<<'icm6MfodmBIEj=*UtlbD(a37qHl'kH*a]I[oH\W@aO&`uN(f`\eq%URXStQC9.T2G8<t`&<r!:1\ck,-3Y!%F,6O=K7F97/'mSQ/V]PR>9B#<'gfqZWs@BRe$GFS>?qNtpVtU80BHo`Un>39d*`;mrC+[:Y]5Z!rB9J$p>_o/gqg8)BGg*[r.l5o%VbO_gDSYd2VbR9.?TfJ`i?t;<$D_64Ud"f2Yp'oD>@'b`oC!;A;V>(5U73#M;X:A2YrVKJW?N)R=b>L`?E>m2>SX6bcYVR(K=:FP%(hg+;((lTmaQ9+phE.%)@[IPD/?*1Xc1@ps5/kmD'[EpdmAjE'^/?rfSC4]9iVYhDIaM%Q5C(Gk9As^Ib,(HAg"H>cQbmIKDLBuJ%cW(;W-8,r$i>SHh>j.%6(5r)F12i7VW3/m&Z#T?THuJY/cFilS#(.bZYqs]2)>a#75"=[i%*uPq5YB]$"WZ-lBt8%c^a_R8*1b&.%f^D\E+Q\e3S;i0[b`iK]C7Hk;RuT`M5+b#mntU;R<Ci(,[>OmnqmLiWraAI=`6hk9X`\_chN(uKmge3L4FB0i%i/>dQDFCjWQB#F%Xd5qH,3`E$5$@\l.X!o02qDG@Nf.,RI5j1Q:c4SimH$r9%o1)]pPsB/GVUB,#S^(TB!tHn=Yk-(RrB6jE@Q-QXfr`kc)Wsm@^ibc%)b6QGXEN?t(+\BHMabqO965imRS1H;;:?F[CU"g"OP+b9\LlfE@CI`:j,QABkr=1\!0gguV,#5&c4tM@DT-MZ]JIoeMmZ%[TUBQY%XE.9`Y->N[3KNY$psp<rV/dfKkB*7WY(1Q`\tKmXZF-1+CH9ot=^lccA)=\8U1l!N;p/il0WsW:'?9s3Z9"`6!fi7#/\/%RH>g@%%Cm3`hdh20Y;0i#+.Wa4hm!:do3A?^WEB_FciF1_0:pQUU=7S>G`Fhc5Ff2.^SuW#jP-`=aWD@H"pEVc6=ZFT7cPE2&J8omm\AQ%p%q$rOnc,*mj[W/.)6f`WUO">mo4pTs=pq6;p>O#R#OIE.L^k.^mX5N%938\g5Vf1osQF,E7]&3U2g?B#=X/>L0_^qdUcE<JYa'"og%<n#_2:"r)j`M)m(e!Xo4<-EF:]:.#_5i.ceM_AST<\S=&ghJm^i.K2O199[;mt+lARa0A+0;Y,_Y*R?fCHZl!SR%h@B&T%Y:$6/-%cf3JsG.Dd5DpQk3l0N0LVOjimE&F2WC8Dh\RFQD&.%q0XghJkt:MIAiFE[7gTBTXWRVlm>]MFo`URKK2X4^NurD_8!FlcS03I`pB%FB@$VMT_rq>7SWb*((6o/ZG2al/^jc<n#aPdTOjd>s^E>>qMVl1V4F(VDH<%<_MUR?TDaVSQuI1)J4P83kJQVa"nh#Y,8P+V6cHc%KrXD(C?`C&6K:UsREV/n$&=F?e(LFJQ!=e'c?B8u+"ka&!0DOF[1+_mQ-))p`)cfA+n[IX$_MguhR[9>%WV3/HX<7Y*bK-Le_/J^%fr^-\+*sJ]l&SU9g8Z5XjuTm?f^g(d>YA8C;0<p.),HT'%R8Wl!:EWCF.nf\l*D-7j+:7Rj)H#].ao@J`>'euLo>N.NehNF+8O%&%=c^+_CH'bea4uf*8mVbYc*SS?DJ1FO51YK*4Q\9SZ]K(0B7c><_d3T(/UYd5=^-2P(sZ?_A<9FHKC4+e,e+k9kJYLAFs6]Fk&-dR%_BnqpU2)P>K:RE.*\XM<@R#(Al*".;gZaHdjh_DWndLS-mDX&)cThaDl$T&2j&JY5;H.1/j7=gtRt'n1Ah1.'d!6:[:Vd4?fG;65%SWW3q5Te<Y:LnpkTs^WY]Jj+lFP`MCd+Rls"9QW1EF@MkG!fOeF#VV!,1b%Aq7*ZuiPtbN>nO\/X5L0'^GWEF0/h?VfZu><3?u-5%/Ta`s`,?s6kKY^.f`Hl8>.h',b@#--;%15,\m&nK:Be\^9$ZNKZZp`I($G1I+bT0&,is5cb82U%kInIoTa#Ee@bjB\^NggIA<"MJ%pJBbkIR^_N6.QZE0YADWnH?ba_<cja[Zum]SPuT?([c,(^!(uGd*u!Ok?=u7r@Fe:F2r>d^X%AQKb[OAdcmepSf;??5isV.Y[??X%heR#-P[X18@j:h_i2=l1S$T?B,(t,d8Gn@=rtFf_c`LNr$$WcMD;iN=Gar_3gIZ\^MN@G+]VX,!:7Z>_mn%f2ST*b^)lI?(c.&0%%H*>M+gs*CW_Hd&(=G@mghQGi7\YIg1Ru^`T>;sV!gemG)A%%VQNOs.Bg#Fo5jeL_M>/oYa=1"U=$YuFP%'@4h8bCDkk=2A"^OBdn%DmrARkrC%6+A8YOf8>s(FWiS,\R1X>k/,]4(!#q@m)tbiUjSC)(,6[h=LX0l"ZJ*'.(63IRq#NsY^P*8V3teAMjV.-L2u7_>mNYn%&JNjLGO,1^U)@`O!@9gfd'="bf=7.+gJa,@.;k'Jq5I*&C0Vim3ptD=,'1a#0?5Ftpce+Co>aICO0H]TNGBt\>F%<uSqWdTf2CE"%fmGUP0N7j-k$;5bB+$=uj,/WQ3L`-Pe[)HrbZU!R[!r:B0#((HHJ>l\VcL:79!Z+U.OBDmqnb_r;0o`)5??is=QQ`I9#Z%M<%95T%UI8<m%9:jjlC-+!Z:gL)fPZH"-i85"r5t4/4WIUO-0MMocAeo9WeZN#1sVVKnBtZJU&<'KW<ePcrY]0"EuA:?i<Y[1Y)=)+5l!:N%8k]JIH;"A:mS`q+YamWO[@Y:%MiKWef$^qTrE!i+O'XEGJ#d"udPQ7?c8ld#7IrT(l\T[np6DnoS?A3)G]GnDXlir,a@LsLCP/6q%Xo7"Q[D&))5[/+pGSg)iTYu_%AU(+K#EApF*F<C_H8.:T+IWX^EmBK\krJL(>.Ye^m8D7fF+'m+bK)\\WL1dGDrYr>Jh'R,<n"$Z%M/CRf.bNE9`oRb`BRabSk^6muJ,bn*D13s]D2"D'O>tklr6Dj>e$?[u8BnLV`jsgG@:RjS-aPq#^%Sj.VfSCQ^@P(V>L;0'N]=Sm%WClbCs29CeRTG&lPto?%bdfp=]CXmWj_oOd?!9F8&%\#-qIE=.MUM_XQ^uiZ;'Jdph&+AC:Wj1nqd!BI`Mu2nR>uC5l7+ub;HFC6%ToU2"O#'^@.gn";P*:f0Sf9W3%f(ulphP/lToT3K[BbHc*Z3W&UA;(GMC#G`?[`FGI&83*qgIKtaXgNc!5\If7ULi=>qb=X[:!Y0%B>r-hOIoM=dekYJ%rPdWR]WdE*5eM=1s?1`=\aqBQjgDe%G8_$\)b,5c8H8"`aYPI^k\"35O?Ngb"g-Z./k'315'?D_1D?c1;6PA%_hcXd36kPqQ5Md\,MJP7^.SK6h4JaB;iR'o^3ER7eet=8Wq3rE+5XL>-&]LH.0S.8GWf]dXRBdPjYV<V5?Z=-CjjXemC%4LiP.1p%RNE14q<Z=ND;>G'VGinU1QN9f=U)u#P@C,=Cs>:$cU3.nTifIBZ`.tRBCBf>#*;g9c<UV;[g$gJ3@'Vj/9%=)nbVCN!q]\!3);_`%p(R+rc`rq8$IE]#TZ\cr%Q'U:7(oR'd@%!7D%(u4%A7d-NLq[cGID_Dr3KE)qQ0ej&L4ne!P7>a'Pu9II?&)@90AHbmR4MF+3Nao%$b,o)I!QRr^Nh6"Fs>[joh[j8Q,I5Tb3)T^]];HUApK]rr.jiG:WrV'*6MnS^N+lmq(*rE;U=K*;5<l5j/Y"]qHQ8Z;uL<Q2O*O<%I^<!o/a:qb;lBK:s(j+T\UNs6F5CaqgUVbCLa]1t/bX!/rEMS]!I6dHb4iGqDHW[id5%:&KnOI'I;\[bh01`dTBk[SAW^0W`R"3u%GM)R/7#RW%VcIikTB^&OlZnV6rMF5UR*IQjEm9*:T>T$?;uIKR>8ki\F6??.'0p.if?^kicKB9,^!H@U6@Ir>LOY]b>V19)TDPU:%C;nPokPFGND0Af97oc#@;'^U_5W/GLIdX-1/R]GPd<l>nR'1T0r1(m:ppkig0D6`2p@J'l,g`\1CX'r5kP@33UkGrng=#`+Ia_<,%``)i+.N`:df?[`6"FPK>hWOaGTB^'[Q[-pMF4tS-:\D%V]4:8MrMCjsFK44B<G@WnQjnLt!l__<_<8@XmL*<Xk$Rmg^HL1IrFS6S%Dhbh.Vp*]hkPA>.0gAQDJb/YKE8hn=3G(D*cW-arOPR@gXF%07eW2nJAf5_%DQ!?U<0]B9rf$*!U&!",F27*MF^]4DGcos%hY8Yb%qRQ?P1%I*FolGVga"6EDbo]UE:N)Uaf5IO]poGlHT;])\F8_&\1OZ9qbK>WVZ%_jU^U^DnQ<"ET:H)S)\UIE-;uQVY[E8AP^DZ<C%(HC$mgl'LV2p?ZPT6i6:kOC-Q/@p;1T@"iECoQrIY+L%q]]ZWMX^^L5Y+PU,XVpnZch2?DeSiTfc$?Ia;u%8CR?n(lSoS8#Eq[9W%2,A,QqYA6;/q0sqrCfsLH#eq6-f_ad$h#//Ffq@K@q]0`Sc;qZGK3Ncj'2.\58,KD:A$D5(A"0akItD8R$WNPolK"$CoFLBkZg=[%`@M1t:2<G-T'PR2l#_2kb=q*qq5N@Yr*2I]EN#_n(?9pAC+0s`WEo">M!8Ml4o:GI4BG-^_mHTaEo2+[/mG][[*1P3%J'qqHam]^%GnJ#s*=,!S"On'_N,^;^*/S,ffLkof10N:*CnAS/[HtKmNRpY*b`0Q+XgWV>fFI"$P'89f1!N3Y?\aKSUqTuKA[5P;:[=(B.u30+%MC;aW<ZbZDh"oRW=ul6(^T).Z^4tD?<UKNTphA=5KqJ+gYN+262LG:*rIsJ.MB*af?@?+$\i0kNPKE4H5pZC%<f0A\+4B%Z^%:I5%k:la7(sAVRn>7`af2kuXX[+/LXFKV**c$biBJt/LhYUUIeX0sI?^BgPh"f+DbJD:-=$5e<G8dF^3PfZaO--U6,j&KOE69/jSUS\$%B7F-WI-kd22IiX,3:mr^dW4fc'&Cg&52ha-OKpgBE\"fEU\<(RP;m@2WZu@e8:BaZBO$"N`1"%`mPa\^+R(n<S&O8XHX_-NeCE0q%qQF/fo;=*_VoMZX83n`uYtj09lWY=%qt'L)::D'$^H+@.I(q_t9k?7Ypo%45$IeWPfbS<AhnU")Bs]?1DQh-PQNS(C?@llOPKhND%]F/"qhEtRIDACt6-/VnULSe8t,9?K3c.p<h93(D;^UJp8GcMh/VEPX3$<Mq,JR;35$D09/Vdbp@5E0:(]DGKLrN]RP3EiJHO`JEr%BSH"63=Bcoi%Bs=/E(8&(7IeQlJWmjH-PGDSU,n,alukF5JL>JEW<Ai]iCPt-F*Q^NAc5+G=69-h-_p\#=$?/S(0K$Y#0?=g*R,\%Qp`tM+^]e0K`QSG7EJUBk0%-,>1f]Z?Uh.7q%O)\fCSf^kq2IJb^@,?g4c*OM@=_O)\J&arHIYGQLR9joV#QH))'dL:$i!GkK7bC%^&+d7@LO']f+5XG$`=Rl;YHcl>1\4])B'^1`Z*WcD/pd2;D&E"%/u\lN'dB*_1JL)>NKW?IcY8#+0Qiimu&T2nhF\F3?8pjR_i24%<XIgN0Ge`W,S4E(HjT\\@)uj<fgbXnHr[ap4?g"q9OSPE;D`B6ook'0f.h<2Msr`d0\::OKo)mD(p83#Wl23*f>8#=]5HKY"Y,_9%<"`V78$@g4LE7+h4kfQF#^Q0c(j]^+CSQ:LAk2"XDGmC,nBq_DBo5#ZXXO,EnAL0s6#@kghqbsZk(7kEp>R9[k)VRq3s2g.jm"IE%Jp3Hk\anc(9A.&73(kco\i6/MC%CmgKUo/3l>OfmY+6mR]1^U*hB!'Wj("V/W,QZ\#i<\ZDj*hjn+Xo:`bgd,!LrhSk-oLW's69J%=)fc5L9WiZ/M4O?L>(G=@E>*R1bIWmc(n9`EXm$eW/qi*pPH%%:[7+U[VEg&9!?,%7m.d%J0B`1iI\L#,+9[T2S&c4YuiQ;/.dOX%Sk"#gTagd"ff>U8_aK3@F#W'YYXLECIJ#'YqSjB;=.+K`0Vk?\rK]tC*c>P#57G11H0WIuhW18E;_XkoSe["0?LS"8g\a[:[YPdN%89Tr[jl7aT3"SE@?N@&m^i?PGoNW4lFT)udX*oha]a??Df%C^SX/5P4YmEVZYc&u/K3SO,kCahZ%(+,Q<acMV_AS`sp)2hoe!Qku%g*u*fe$q0rr\u+4T%cE4k6TkDYd)1!BY;Zre^1n+GlPopXsrA@R1mXen[loV*Gun(Z!*AfL)QgBF'RSEf_WG(bgeln9-qQZHnDlP%bD##sb'#Yi3Bo(l"<)hOc/kARP)ok)RE]f8mVCWBZ7q:m=Zlp:pFO*i%b4DGW(3;\>K(3Bnr#NiP;l:'EpQ<.\W9PUk1Kk1%(\KJ%flb@b)&u.!QK?!N[KN3\=SAM5+3,81;4?i8>YXHJnoa=6in/?j(WVjF(:XM9!j#/cfKR2c8C$q#!OM\If\E)5F7^ScIF<2%HYX$Y%o_HB^4IGgUU?TAF!U@o?43u0UA+KTdnH?I[-&W`5WLD[`+fZ`O@.0]\\ai\u/@rU&&a(@_MYHn[5Ca7<4%N.uNW)I'7sYA5'`I5`%fg]D^`k@>+C%e3!59P<"Cr/\j\`kdshGqbS486>(I,8b,Ppk!I9#Hk.c-0>EA#hp[$S9"<Eprf2mk,4"rQ%_TW07l$e%fhu&_0*M%ij5RG<<Hal$Y)_%ZJ+d&2DRoS.A"3?,W]]`$t.%\4D4'L%&S8N9Q!8D12OA6Qh=;W]HdQ3iMOPY0DY2WVQT[1<Kd0Q5R<fGPeYOa%4:3fV=LOXi,o.Sd"T._sEf(+t1<e.UH0@5E`Z;'5h//973fkW6Ws:*ClY=%'nMFV%$1(,fkcb`Dm3R[ID)(SR)&KjS7HrKeKsN'Z%kSh0)1/c5R9'$%bkd$.:k1'uf)uCkBMd5[KaWM;h6f9>0CF*2UPHlIjDdoYpP]3P&:0H_(B2_-&POV;qJBkPRP'&u<at*?)ZFUTi%Ab/_qi,1q_mCj$4fu=[Yc(o<g82#6r7oV'aYmc@E&G;7c`qm"`!TY(TbVVa[Q;6!G%f*I=6,h:_WIeV!U$W3]p;G=u#IqYR@BSe8%C;NaRaN@/i`8XMJ8;8Id$BD+j(98@)H$Ll;%H94$8p1oNmr>(CE-"9pZJ^Y*\]W(6NB`!L!Sd89<(/`!`jC28!ao:sSZ:a+VMV2$%:mCKScX%rYnS[?UjLR#W:h<h2l%D5/nlmMb>/!64Q6]7Ljf";c8/M+#.mk,.c`t!jMm'g`[k4]G\f>4kkf36[+.>N"KASEq=423>%`Zo\<YT*4s7/8XPMi6gP-F=/WKBbp+:SAq#kjs_Z=,i<>1nSe"\F2]d)QQ?t;dB2OU&>2@C[;C[q/KN6:,`iH58o]%lBo]2[GKGH%8F9lBHI<=WaJJCHqW0LmbGbU0j/&!m&-nGW]GRqIpn0&nYnVK!$YrAgWI&]$9'B]BXNX<lEieADW\<nmmi.G4_$gm0g#iI+=:4L]%F\PHC]e)j]Ui?%&4<TKMYR#>NJ#X>t8BtD>.R&Tb0l7ean0BAG<$LC*63IY&o[nOk8J(q%X8DJU/92fh:[iaeUmm&(WNp:K&-ueM%R^MBlBbHR?eqBUkcMPq8p1r?IIWAF7,_8/RgmKr]7#rnP.PJ*/ANg\lnQA8am3JQ^?s__,+[":Ak[Z^N[f#qk,1sSV#9k!ZfOotb%du?dp9OjBek8b]c-\;NGrQ!q?(Y?;*7MDph:S'iX-d;b^K't)\pMl!s]_M>>;FL#!BHHZR+)?`:3W=*T<#R$E\3g`>(epN\`*XU9%V@VNMo&S9GXU%NmHX\)\]DQ%R4(!G7P^?bcr6*Cpj5AZ@q@M6$E?sD2G>^/H_f8J&,^)oqp\r%*g-0e!a.9uS]'hfXGZka#&GYG;%cgEL]G!6H2iKtMA`mU'hhNo=JG^>N$&&*3N-_H\#CWp$[,d-#!r%TAbjtr:%dt]afc+Wl/Ir9,Yq`$bb#<.st+*q:C@hMRt5U+t\%j2o$THh*6AS1">MM.Q#!2\T9^-TdrL4NC28eWW/(l_JUg["<RDE6JGFAs1R^lV,bTDn8m.N6Cn9qsFUG<I+FLI/&0ajdOK"-XXlC%EZ!\`4)U(LG/Z]ErV%E,_0l1d"NE+op#]\/,4Foi@T&cHLV8>da7_eojC<MP,i5&.;K_ioo-qBQqK"09n&)Vu7HmV/'0!)-cfa)+%4ur:OF,D_ibk_U$gSHY@-eFE+itEO"\aeQpXSbQVK!jAM;e5hRNgF^7^$t`2T;T0gnQjU[rP/(]4qKi*59#U;f0<?naA"R0Va*I,%S9L=QGFPCfchZbBpnI<R)*b`2f7S^/A-P-[`Ii+$Uj7E\V$+ceV)c%7"IGgmr'o`(-\D<4h/4"G1W.&@"+Ns9hp(4VC?bDHMiZFB%Y8&/>]_h>7Ed[<"]0F=hX>[hQ:G..Sd'lcqTc2.uDa#e,XA%<`\#jH,48O)4h>n71YN).nkE3g<mrH=[/rgs"Yq$VCnsK#EA=GRN%2`2ni,`XO<IpS]W*m$pd7)^kK<qd+W/;KRolVHoFVerUr[]/`^?G5@./:B\4Ce?T32OqdbmjjI6dbF?MqQ98+a,LSr9@k9`onU<-%Fae!_T6r"fbEZd'Z%$jIH^,\<1m[]iPMTVCB/_c,WVBfaBA;mAk83$gRVM)$e3=h5<G8DTDVk?TOoNil<F30G?Ti*dWDnCHI_Laf%imT*.^Xo][5E9Gh=(X($k&[/3K-$2K*sYl7X,eSGYLRns%?9K(e.XSB0BF/KUXe%uB"IOd/9^U'o1S5bhtqU6hsTm7g<#nhbLrqe%q)(Zckt:Gh$J4h.gV.]FkAF*kaLU]Lm^B"U[e2NL#;(MOl#[cn=&'C]?)2\LBk:o`1Gum'I>ZV'JY.tE/Uh9oro3p`Q^Ke7SDYO;%?cT+b\2Y@r*9&mJa+q1Lgc_#2c`S(f4S8)tdt(7r0,mu)nr6Eu=0c'+d0;h?II`lf&mj0L];bNRA07MAj*cU1?<XGEoimuZ2!H7[%FF:-%?OL5SPhdir:+eN%-[-@\ql<4gQ>WcdR_89DT@G$4o%37!E:;na:WYfT(70KnB<NkI6Wb4mp:CoXgLdXdG#uf-C=_csO4T$%%f_!bV<nkii4O1iTd+1=ml\>B$@!AO,A'',BB5ThYlCY%9mPXYUK9_(M,;SkiKlld?g7=FuLj&L:Mj1sE;^\oV4:4ei>'?t6igP7g%G%_D[c/h\mqn?]8:X':3%qIoXoJu;#Mh0#]aC5FE\bFYQj3Q^_G&qU#.Y#S).C[,h<&'5.BBOX=I?R40cn7kB/+j.91!r94I#YLA%ra>`r0heJt3I]R\BR?\AXmY-qZD[]^XU5<jkeIKGWqO<+[@?FrDro07CMm>BdNdb@b@^GHOV@#Nqu2H;._TJs1W>o'WUR+$l!1TE%YApJ-gMQ@0^>2o+7XIj@Y@kW-FURTm[IE&@%b)_P[kFWO#laafq0HCFCm/qhi_K0GZf-ii3a7X$E!FPB_%JeUI9Wa%5?tms$.4:i%)4V]79RAgLQ&mZHJsgqu]kh"[hQ5P9F+\k5mbJ/k#5p&UXl1HC`hG@#[=%!#`t%rgr;"=^k\7I%\^>`CA3&[6_h1s0*HL=,3MOe&%Di<7F;@'s_d+)ouAE$rL^YQM@YjqYUhRi*/c0l*ui-/'-GK8li?N03gZi>,pEqa]B2Weou4Xrj=h^;deaaA0gihkUAge9p^]Vd9^%+hZAV(EW6IJ^?5[bU!J]UqK()Ti-Rmocds928;!j*CK(^7P2?$^HKEQS8:N(cKe?g]"3uJ%Nk:7qt#.DmJOWOcsAN;q"EQs)f?+E%=0t7mm`=9lQ/^l]"ol'uea;bSI,iJ*45ih=]eimT)`nicdOq,e9I\J0F&%^+9!&'^CjR-3[A;dXCiGU$2^bLu>Zf>H\(31Ze&s&H%f^EXPS0,cg?7C*t/8BlWDr'nd@6XG^la?*A]lbEu\3rF&eU2GThB\dI3MG0]q8VU!Tsjt@gXbPqG-,t[^0A]cD1>_.B`2T;EpCK)%i*^g!p&.<2Z#XmirQZ1FMlEp';ai$Y9,c/sqJZ2gqQr1FoD7L\[EBBd\\EH5p<Br*8'`9,-6Lurq7$75QW?#f?'EP2IWO9BnAO-6%`[?\HVrtd2/ROn\^UNT?mn5igqHk?:AO3b^;m6U1!5;kFSRVEOdjR+WbhfZVAE(+G*f:nT(ZOlTqu)omD,=iF_U%r,rEuLXSpoe7%nctYb$%?&qZ7f4+g;V*2aFV(KWI#R4T'`g25$,BgS*/[pfY-ABb>i@[9.uoDI3Kn11le\rQU9*ak?muGop09g$TmnLU9ToK2fF[&%OO;;L'DFH;^RDtHi8Dk!k10ln_G**,@eYaA6m#e!IE^$$>H@@>7ChMSn^5NkLUk+?&+TBAl&*poDp?Sqr;:6k->jcEVjW/524?Lk%!]F8oj7`!p?TM;iIZNCd'l8.jouU_5L:c_r?T<l2qQ7`Gjjlon3dPmi21,#:%.0"3Xh3%F=O(f5HWU'WbqW>5Lg+ifN`:41g!Sf-%+8sdi%GQARDso:;St6@-[`S:0q4$fi^UHtXhjb1_qX+^T'H?+drIf=:G<:7);r@!'Q^IsEe`jbFm,ZBEX5n6\<5Zmp2_i$oDX&jb%<b6c*G6buhFe-:U(0*c5=X]'F-Z^AWjfc:']QGRX$/!KW?G\-(0eSPdl]uaY,;7<kC8N)3YM%%,+90bab0bOdRs.pe/M=VC/1hB.%JW7G"<WA\HiJGsAAa`Q(36[B15>dR?n7'U'jUD6&NZ8:B?al57IpVD6OF2MoY.7d7pq"/CPV8F@itp=%";jmE(?)aacT`&8%fd%'%kNNEV;.@@$o^:`$Pp@X@\T'E;H^u/8(MVIG1P8*-E%:Df-gf)Op?KY-VeWp&^#_)\n((1ICc>joKt2GNAqNFCZKRDejg=)P5?`2.%nu-MJ\p@T&C#eo^,q#VW-DgKRc0>mH@SWA*0bX^.&*EdaLI3-X+qjeOD"[.8Js8_<I6$\-,c=i\WfSC-_K"/'G4Fs`a/]mY@/H;(%fDkWBi,'9=/NtPYXg-J*TAQCqV':2gq?rdV=F2icFZ74\C$d_.c0Ej2f<o&//6[8:bHI>)UW[dm/s;"TUXrT'<cR(fn6S.n2X7j:%+(\5$j!iCOs8Mnf;f@0gHJ?OK>t;Nr.c%SWj)\i2cM7=Tje1DZYFa#:IeiI*rVP2QrOKO]G3)FnjO:)HhAP8<b$0+=4,ZE>&f[?8%GmjWLVcM^#WP!NF_%+GRj6'Bt3\c5jI>>"U9'\Fd2a#31n(?s"]CDH<(c>i]U/eEmQCGIl;36:uH*,sfHd8VYLs\8@I9`mH\)CT^%L];ntq^0gc'9o./gR#SdjL'o<;hL*-Jfapu,tMU@3Nj>XU]e6AFS@PT+OZI=ReP@3\UVl]Vl]R9WRN&7q)F'@,W;LjX$KR6nr;8U%f8#S5Pt<W+K;P-T?+@Z+UAV)q?PB%.j>^LME-N&Rc1M"q_W``^<Rd(W[`19Y)Y_3hXLRpYq;lS+Wr^I^^K\uB-g!A0\(c)O*-ZS^%\`Mo:>.jZUKbhb>leH:H!krjR*\Gg_X>tTMo']deIWEgbQ:rqp:\ZMnXA9u^c`-g%hu0]&-d<)bC&FqJ%HMq1-fp.DX0)![Q;4_8%SCQ29G"_#^*4F/!><6o&n;4U!n=k;*,A47QT%_D6:*XD7KBU?fcI3Uj8QY:AW;,h%asRq-l#tp&hsTA?nEfTbAQn9s2+Q?HX30Y(%hGlmam>kUSgt+dL>!HFj\CPR<NpAiDqU4JMPc\5f.#"e(G%Kjm-)Yte]gf2DiC7a#VbCH;(R@#OF^jZqP0[H/X^<f`fB."+Q`Z+2%DKDM2M>Z0g(Z-i0?DA`Y0?ii`/KRXa.uJ=Zb90Rq42(8"gIumE]'H]'r"AIYi0`rYVVZ*c&'aQ3$_GXN,WkdEXmoI/ZTA,&p(Y\2%E]M%SNgU!poQoIZ+r9AKH1#,[Nd,rqjk9Sg67pJm4Z(rY]=37F/YCeh?EL"gaA(*CMc<3;TkKH$$?c"8?2*NqD0Mbgs6.F<L_N$E%8#>47m%JD7rsUTX)t_>.DS<-Q5->[YcE2$3^UE7?oO5tY(6&a%!8UP"qdfGeY?mjIrA!a.d[+n.-Y%*/_Ack[IJ>e%EF7U%V=.JY%%rUHTgQ,CQ$cMW5rS6bPS>Z=I,,'YPJTm3;Id<!hQL?EuE5>>\+X;lj5detK1[0L284T/[4,$=`5B/ka:Gb!l,B1`5YF@D]7_sCl%Pp8^N/[sX!Icbkap@]8U`?"GPnBjJrrj1sgj4lhk&Buc`]=ki8'X5cGS[@#)Cn%K/:o&'pVT#<AH:I`eMAI'fFne`QKfFuhRg2!d%TH!Ja1A'AIr#VeL@'U$/pl9a%pRX>(;_Jr2kWet);\+>dj&;FS-cbELGl7=2m/FjBqTh$sO8Z.Ah'nlY8;$<@e%MSZrMOkq=1s$/%5RX'%>ALrq-FXcZUNjF]bETL*_6N*lDCobhf8_G`'DC/YW@?r]_J/$BdemKDj6CI)Zs59%KnZ6)O)\Vhab=="_jOb3_@&#4>]/F]%2K##D'N`WVXR,m;O&rdF[TBWhT\Ge&g#qGi3d](Nf;E@dSi<]?CL"Ee*=cnr)H=/X13q/.3HhQEHc./7.*aD->O0pk^%F>A^JGkn%aS]%_Ip18A)`R8%TC]bJZdrh'T<Gd'kL(Vehe:)lV0"3:Dr6_)AIQiX<eX+4SleY]rk^WDD3o1i+ggAq`)c1\Y3i9ceZXbZd1WG\%qpVuTD_Ac[qm8q?CCJqFCUN?]F0SA%ai2RATB$\=G+B_8Man9AQ*0N3GeS=1](T]^Bm[9?[r,GTr3gl`A^`9Gp>>/BDC/nF%o6eT%.>?$eII==(Xo5Tc;[q"@roDWr5j9T)=EJS0]j]JE*NaLTm@k*th43e0jYJon[c[7te@RZXmg&mLflMH5:5iPM^3N4qpUY,e]R/];%j]%7_)\512N%Hj\oM0V3R:ia8Otr;W#1%^hNsQA852!NCC=rJW:L<_X6`M0_F55&ZG)e>)g]g%K\CLDnp@\Smk4F`eF#7kTNu.&P%?!3Z3l==pTI;i!9S6p3i6!(QXL1r!U!RL/hLNDlOVBeH/geW(9=]0lP:abS=F^s#P6jjg^]cG6E>G&?o.X&?FAS]Or3/d)bd\po'%g/;gefUBI&TA?=<n$:hs84eF.lPVAT./a'5;:eH%Z]asr>nh5$dA!nA&/k>rr:p37k)bnY]_f&79`OqH1aVnFq"TQhNun:Ijt"Ob%dPkMn^%J4#RjY4ZphG-D8`GJEdRt"`-(W?KAM.R)+E]X8gDq-F[r,tE\B_F-qIXf`D)TsHmb`8tH>@<oTo\*GZKZQ..sn<uB-7,`%H?JN7;g[1k^.pRYHEKf&H(?G'TU\_=]"JTK".jEPV*!CRS[qaf9nW'0&%kXMm=P:3juV)W,aZi2'ig%`(lQlAc5o8Yhts,V3iT2!%T>3),L%Z9q[@*s$;4P-OHS7OllIJf)7s)`1m3-([plXH*p0mf&DSNGt5%`kMD0EA-=0nCjY,Fc?Qb?C><\i'%p!4_Jf\J&"Uh2"3%?>+^m/[p?`;\$Rm_Ahaqgjf.Uhq:P0K=fa)bBEIFlSn4RMu1!)Y!r66f(ICPamk;@gd1sRm?l_1gXb-!bCUcRhCeP,s4m&8K@kj@%GHX5EpR2tl]Q32SC%ilq9DTI\L\7\rXmW`,lorYfb5\(rLI:(>TCa+0]"`2jcXA2V`NJAX*U<*rR2:)8ORL-d4(mHWL3>-#q6=Ss%LH]))?J_$olR=c]kj2H4m(N5aoe0Xb^$N)X`Nq>M/`0jh>TRMRjPp;qLTUHR!ksFRLFS8JmNVIAqjO2pf0%`4hX-Fmi:ZG;rcKHa%92i#9?dSmP)qu<TnrMCho=aPYb7o-($9o=&0&<^NMn[3J2:?W6m.JJule0,O]@Wt_9'&HdjcZ%GE-1\FOUJuMi`EkW`Vnufe%JN%%iEuV`f@bYpVKDZ)^"IJp5@0-@ooFEirQ"/gs2Lg?BE.KcMCMTl>`X3gY0NWOs,8:bh1;*#T$4&.%irjFVVIScH0\.!]'MNT@lI],%]$&>Y[A=l/*YPc"m1hLLqp@?50Qs.bDk9+4_)(blCQHVcrkd9P&Co:`p4@3kgi[FWfAYM;V7Rj4\tM#%%_5bdG;8)DY&heU6'1T9%q<Z\^mT"EpG]T:i(T?'.@g^eWD"?9R>?BH=Vl/j&T(GJcs2q+.7"6k7F1$mSqKEA!hH]Gd8`u-65-95]A=tu%r:apm6Z.\TM>6Pg%7XmoibW4^udo5;dYue9Z`$n"SBLeO`hAI\V]/#T'DO/#s2B98cSM`%X9H-`3qq,rgPmp5u$RYc+\MftQVfqXSTDi"n\@qdJ;g<2-%/aVQBr"cu[D/?EQ/LTGJs0QTS`n0X3W`.;3NGkJ;&2(RTp?\eXDJif-B=!mZH+G*cgpoA>gn]B8s-C!SjLFgHc0hX!s,+q=hic8*%SU"E#7b:90pH4a2'Bd#7SOpAc]VELNB)]G`_p6Jhg\+<,i'&eta7"39lft_r9>eIN^Y30Heq!P[8FVi'^f1-_q'3_2ikXC4dbaLC%^aV&#oh.4kY$JR%^?V<EGM_2e'dLPMI@&GBd(W.b\huR=YF"jo:L@tZGA/mR$:X-UeXRnW;I@g+^ZJfclnJHKRN#Rus)+8EYNDX%%lsE;)j4,-AEVeQdF46%p'VDIJ6pB%r0U94JfoU*'OotTO_ic)9-]L1-RWO,t_(RS/FNr0]n"qn]a&nnYW,qE#7KI54a<8/Uj<mN5%HZSrIL[icFG!0#TG<J>8-+coDfpC=^r<o5UNnni<Dn@o&n!.MXA[XJC\fVrqQ-#F^R2"P[@lBie4GX1CMaL+p(Os2kc.4N'1UI)l%?J[K9%bB5[9Dg!aZC.&SAa[L+`@hQ6O)J9Pk<IuWf?bJ'\Q[j9T'V$>@#`KKI!s`8**"<L3%_ggjA[`C0)C%3B[-3_1Y\H%.t*+i%pt\TnJ/E\0Jg\Ih:!(n.9)FX'3'MZZAc$,/RJd(\HSRLO?b#d)p1-e08gWl9?B8fGJ4+H]/?,EOh3T0oIBVu+PkEgO8\RZ7=1`kY%[_&MU?$3p-<o'8!=V>W"=a=%tTG+thY3\;Rgjf$BY*3f4hR4fq'L/.-MsSPM9Y!$"d5Y@IX_8_<3T\gf-er`II[kHEV\<sIoB#b3%>:4\H:/@Ft08O_n6-l4gWS-_2qrQ(Lo_cE@lA+_5GioRnB9tOgpiNTm:liefZMg=Pf3e%63cDIAe+tY>1P;6gm;J7X\VP'Om#&=*%fSPsd>OaEtZ.J'+f<0%TGP^&U)\fs!e?RZE&@_:I,\g/Hh3tpelqY?S6Rn<uJk1Om8N#]G8l.XhJf;">H$^m1r4H+$8I[_7&d7*`%F/qU):kF-C$dIpAI7=l7XTk=_#n"Cc5G\S_5RDbE1j*LhEF(NDf.Tp)VOqJ([bhOZT6V!gnh6J[kf)hR-3$'Xj:c9JrhAJ'dH$L>%R+E[WnVc7q*6ROl`o<KVG?=.RMd(C#fQpLgT![moQRhmo`5Qj9RV<j*`mjno%F(Z)@nk4aCbbn^rS.p"bcHkiYt/j6Om,i6;V1cn%4kUM&6g&bnoC8334ZgF!mrUJBc#lCGESXh!ZWg'm/*Dj#)d7Q_$(U17:c^<hbg";@r0#ad?XFe1%3%@Q;<rN$_ti:'^pKsus!C3i%.F&W?iRX4)5U=Z5gCt/hJHqARV<jl_Bl2nkH$tZ%X^*)2Xh,@]?I%_?Ip*52:[t^0>oKZ1SQegQL#q@&26'3ZjKer:]&n1Fh,X#7%0m;[L`G6W'CiBhHr+t23k0^1nBj?RCoB+$Gk"SHYQlWencBUh>HMl42REVOuLEue>_@+Q2ca^04h/Xo4Rn_58WFM.+rA`onClB9O%)t'!&T983i.GD"'pdd!9r,l%-V>!/Hhd\5u7W)'PgEdqfB@b']+8EbRQi$C#ODi)1J(^HD3::k/+6K@IUY5BaD5NA3/IhKu\mt&?%H]p=//O2AkT3Q0e:%%^T^FC\Aa*"lD03n7=DDQW_eLfS.Mb$Zb)E64=K\%l6FETmC]kGM_rcR:FJXQ%^TubQda*i]t*B2dhiR&sX%2KO;)%dT;OYpF]A^?1tlbg,@5gW[*B*Fjiel=HuHqcIYW:It[>1n^r^pGr-Mb*$92ClrltMA:R2Z(T6WpN!;-[Z\tmhHfrfoHs;\%$6uXVBLE/F8\[Bd.^%:"[2)ZdJjT6G1PcQ,2tBVHPjeIo%TiP@pQ<]^:;NHIrE=su/\_7%+`&A>g7rT_&S?6"9#W+$`)0B6OW2J[%<(d+]92fB3gRO=ShC^"/=-&Z]n[Ylh8TLfnDB&Q*`bmE\dur1Oaqq)jk_)p]oA'd5Y4)r\k4+(.+HN\r%pOte_4>DG=87Q_\`0n8%6P)/Ybc$J%MR,A\e.7H.`mt23C,9aVro<=e;^0A.hq\eRngr:pMof)h>m'I7^E#Dg\pmqViLAB_HdZl3jOroI9XMccG8KKN0Lrs3%(YkXD4P?.lE>J"+ZbDlSVublG"MaiG)I&2=6SL0VqqKTqe]$@fPO`hhDYQe0'fc\&11Lfg@%;Cgr,C\/.!FhM)`0+ZChUS,n_haD%Xd<,/]+uhSAmM9]qJbVA0"J]#aM<#mo\-qClX8'7LfCt9loeO2'7]I*"bpqi]72uej5"otgFTg<`dOo$?-E7o=a1SL_nLWY.F.fP%\bl!g@Vkr@=Z2`,IrFMuT08R)h%)0@qI+a+mY&aP0E1`/+Xci'9TX(`VYTE\<R$"f9llpQi.S,m^S[m=s8"*B2?,Nkc%@p'Hr]dk%'5O':n+*DpRW>)ACW`Mts)7GDpVVV:GJCe=rV".]h!!1"EFgZH++8D0EW+(s_4Lu4o540\rqE1?&)YBm`YMVshUpOsb12.CO"V$`%k/)MLA[Tb%=WZ*mHe`Hl38UaNC,b!frr1iumcpk>a`:0![[U@<k8,d4D0gSQq>KFFkrV\qn[USsh+o\1/WA#)?[>9=!*7/'ZTh,[%?M&)2S*5Lhq.Y!Do^_p<ooJe'2LF-):FWS[q9%R:go!4mYMEs./iT8ds'Ah-ppBg3mE7^i1N/^g^Tqlkhlf6*^4Wrd@kYTG5Vpa<%^QYknRs0q6kPj1AF.N@.nbCW3mVaqrS+N=Gj7=epSf@@`[_#H[/s">.\Gm(.p9g^]j4-;i?\um&DB<5ApTr3%EW,gi]l<U>=HaQ)%4=O44W-L:enZ$%GWJfJ9MY-LmYO?+uiR4?Tq/6s.(30V+^l8MdAt'1V:b>O-H_"K?%aLD>;bR&+dYp4-f=%"uo+0I8oSKSlTB5_L%ou$CigXl4UgZj%O/=u?QU,['r$g4hU&lM/MpVo6(TPZ'l7rG6X\BR+r`ncUISCr.UD*0TQE7=]l;aC<W(O,1l>P#qHomJ/>Q$]tV%_BBe7$hk]QZmF(?r_*+ZE?OSubD2bER-=tdr8R9XCG&^JeT(WMmR!(&l<nu8eVuN<qVCAhG)S)2.dTk/8KL_M/.U&H9q7j8UMSjS%kf&N?orV"?J$+1o)g9\<XgplHk?Hd_s0OPp?KgjiGC*(*S3`(cHOtcoandk8rjDXX?f;uia0`DPIc;ALh,Ltujo6&[mG@.a*0NV8%HN.Z0?<2.;_k%Y`q7Kb3hX;A*3g*r2Rc'fE(T[a%/I-ZEp_"co?KIc$ifd[?Q)9P<]?Rk1F,G.iS$[+jUV18\HuAfGT**ilL$giT%n0AQ-Zhg7*]:VZCIR5D3]d/#q>4=HhH'5iXMWm/JHo<J5V"?/`S3iV,n2;)dNB`J2T6;(J>5.1Wa'!feptJ-6eGXQ.C"?Vt^"p(T%jlcq)WUfj+s5OQ8;0V6gm!c&tFe--l.itR/O)c/^X[Sc(M7S-tbK@M&FM#2N.ht<3e3[3N)&_CTW6-,fE4tf(pZ\UsOD:@(5u*j\%M&gZQ>?7=I&i[L>\rq43EF$-HGuuag`DY?<F\6*>HECPP22SlQCE4%o2_J?@S!CS(Au^8g4(Z0Vqec/o"rI7;326pRr^?b^g\UaL%8.8K.J,K)uMNE'EPutWQe.&VGo_mA?\MS4P00RLLN*#3+H&AKK+,c?edm;g#pt%i_56&3(rOL!JJ8XF?nkP$)F!YJd0dd'L1NVsP%RGCV4DlKH/r0U+%ZX!"nKURlbW*W%Ag<X-RgIG^ibXNbWIXNV2pdY_Nqm3mYKZ@delWGNcj!oA9-;LT*?%4k8#cB+NHZa)rM\gr6%acUEO6Mr)n('5A((JdoZgl!:SK^R@^?GscO:%'l;o_'=/\i@@;(\X`SM'Sr[,YgWJH=dJ?RBr)J$-Wm]#QJ()]-=-8cIiH8CeW1T%lnB38?.Pd-;\!=-BDUP1IfK9:;j/[qR6ZT&3g%A9oI3i88S`ZjAi0%a,^t2tR@?9m`+`l&>aSDd@`OX&qTpOnE/N!+1V!6DR7Q[N%]pk2[WC]M]0Vt;Xc:9'CKda2]r7^V&0MJ5;*R!d7D]?0',^>5'^q9*P?FgsCerNL^2g_PbG1*<):UBAG-;Gg@s-*&%EC%jSo<%f,%;bmsm@m(IXcON>03hqQ'%E"^8%t9O]HXVE:g,=j>J%0:-n&(LRdO#)jGLsZfHs0+/\[2%(F!@*GSQ'30BL_VhjHI<43K8(>2m1H7%KbN-MVk'0F5"$L*a_P79rRkPaPl5mfms'2M;V*a:pUPY?+W?4[^RmGHRkNs_gIdLQhKZ9_0,;X[280HCVq:i6N:dTkBF7,tIc'[)%lQ;S=C\-N2QkAo`MtY$Lb:hk'GPg*00a6l\c=J)(a:C(`X`*XI`1Hl`VqX>V?cileqM3[(?7CL_I[ImSonIt+1EHEr.AV#dTX4KP%]=kF%5KrF84tY/P]Hal(4'BWE^009hO*E%Jp<33=-N[ko-f:O*8:-tLR`Y;$)XTl46/u@H<WL\-,WbZUYL$4m*rfju]DqM+cBbd/%=o[,Beg%V-Rd"QY"I"M4S&:!pCNJn82S1@Zk5s:_+[F9%@M8/&.k#!snRJ>NCAC_HB;L(VEiP<f_i=L19MdAr^!--CQg]4XJ#fPX%<]@5/gAa7YDXui33E+>jrnV6Q?9N[HikN2lgCBn_CX]mWnR(F$8L2GD@cuu5UA/iH4((qVcn)Q[q>MM`2D:pL^VSNOWaE_O>^H4+%48Q;qX5BM-jf*_63JG-ReuI-4BWm#qb%G&VQg@_V<ln"m^L476'l-g._E=C&lKeI&O"QD=kRhNAmDDTqJ2E^^E0,h[hnE%RpT8K!%qSDL,+)^QHpYa4C*t/+<\c8N+f'QRWRP@a,mZ3O(\+`?j*d90-*kUel,!1]5?bWYVh>d3Bj+lGDruG;fd,R?.5MB9]>8dmZ3tD#5%fTb\r[c=UJ:XerN[GuSC1Wm^<h#BP:O8I6*pO=-W/9\f0s6KZol2L4uJc7HkB4HFM4aWc[]qbiC7_'raWiBpV9Ns*9er1W/b.:/1%[mps!B'_atc)YTQ/PP,b"]f3b6Ie-LTd.o:jN#*4mGS&Y_pR)`b]bF$c)f#&nht'V)E]#$KoMmD]26F`#qWooZ@sLk?j\I$XQtSK%M^bk5ZRo[6ePCa19Ttqe9u%B8S+T5R=Fs]*;'H?G?jUFF`qJUD?jUFTqD8AQ0l>M1-X[6m?M>]U=Ft7F-kZ(bYQV9hI@:410WVW0%H,(':VXBL9?lHAmMVe76/AX0?7h`*0e$_E]".!>\rI+g6@+IbbIKGgC[WtY@J8*4_CO;3L/AX/CO!\6@Al83_-Xc,UXR_rF!RmDl%O+Oh@D=VTAc,LO@B7P@7ga;@eg-%LLqXF(6J)&rCf]'ee+2@`?s1U<.'k;`Pr,2CP</jUHO$3L>%.s,%:[n;#bc`:(IjMAZ<tZJI%#j3R9rK%j<XE8o_qB11L%l;BV?YdLhqB0:85>#bI]M)pa8"RLobT+Ze?ns:P1q)"9JYe`O\*\0J=MTk?12bY8\2,\4=VcGR$qi>>%9^6Y2=Gg7J4a@Ac`GE[\GD;q=E[jkG42V]"Q9V^m[//5R1[e*PJYea2m`AC8.Aj6Eg_lE:a?"12a.6Wfc*HSTB3:$o21=m$9/0$*%lXDV#`GF6lGD;q=C>1prL*\[7]WX@'/B'GKO1W2*9W*YgjXIDJZcN%!)4$5[..]WHL8?`_l.+h>YS=E%II7M:0q80V,d8!3m8cC<%$qj&h%d[Tbi!rf!h5\Y(?n(6R%TX)-@&<8Z9*.a@h/:d'cEMCY"$9UF\:^&a\*@sG=Gf,CK9_'N=P<?@-%Vn[DR\nNB36p`C1%:I%dN.\u-Wf`u9p`K-;Ts^fRHsZo-C)dqbJ.(*qit@75i9kjWoUpXfFM[VrP`P9$^pl6Rub+.Y-i,qOElCc_:%gtAJAqgm=P4cAtcBI%T"B,U`a1]k]B,5U:7/?/4#!rP\;dT4$'m6sVPu^Pc;q9uA9ei*$+@!8]H.Th-'XYq1p5]@/ik\$?%@"6'H?1N(G'Vci%0+Y*hIFU%!ZKZc=k+O[C[E`k_RZt7@Lg[d)*#5;6oZu/O,)n'1k>/iW6..TC7Tosc4gXW]8W8N$6YiVYK%l,Q>]q7kL+N]eCl\@$l!L>S:bn.%S/#@sLZ`I]5^A)!<<qYigBsHrjqJ[mo*f\1J8f,5*Y6TM7&(=H4nq+n[KE;Ufn.=/B.Mlc>/i)S4-L:il4gGB,B1p0e3G**Xm*X"%[:RVf'J$%_J9/`#'jd5^kF>cKLKBbq_c)q<m?Cin1U!+W`L(pN\K8n\"g?+eF3Z9-LM'`GFC9m\(a3DORDYm[>#d]&>RtDiN7[)U%S;Xge./'l-n%bm0@F!Mp16E%>0\=4`=n)8M!b_>+E\f2OU'%1AA`VW'4I2^AZJdOM:'Ai\YKOh)DG%9RfcX7<@'6m^,gpRT/3.<E%r6EeZOZ)7mG^.MV_lZ?`0&!B/UXhGH/jtRkJJf6"9g+H*J_/oo39TK9F)Ge!G3DY611m4^@tk<Q*+Kbs/e?:=P((T6Xf/91bdDVl%M!%G^K;D\VCtp:KC"#(4S2FW6LZ_pnR%J1=XP+/C>0@sfb06hqSQ7kjW/#B:_!CLrSF_!'bA)")*>l2m$UkfNX=+:c49oLXe@P)+%Fa85WCbR,kZ*_]S"*:U#.2"Y-,/l<I]NV,uH5JXEYK+P%[bU=FX:dtLG$p*^n6:RPWW>PSNP!.bB@k$JS5mAjnHbX@85)"4%ZFR1%*ch@>,+D1a],nsH/%dJFce1k(jUPAEZ3,0Mh'iss=$k<=CtqK5S.0O?G[2A^F0<5+cS3gi@'6m^0&N(0N\MA,cS3s<q9FrNj5E"2%/\[L;rUUMX>3F,_apsPlC^Sie>Rr&li:V<tcI-XY%#V^]^^g<a7Gs]ZM-jdE)^CdPoe:@9G[2B/fs][S/*Cu9eK*;9_lG"p/*Cf4%Z"sb-T;dTs1[t6'4QhIrD)&s'.8"!t3fBMfbT,BCCoki7l=&VPn9R1uBC<6oHbXE7#=bh@%s-4G1.<LYL,niHVX_5[4Qi11?/hib%WB)`b]&l/7[Z;iUL1TCEr[;XK@Gn6VH9==QWb+nsX=?!kV6E>eaB&2EW[pH`17kQsVe[sHriB"B4W]/q`m>?g9a=.i%<HDPZ!t?]%S29</n@C_Ek>M..]-ebt0\>"f+``lSd?ZB(bVP4'\\MA,Fa85W"o#WpgPn/9-8='*h9#f^>&Gq_+A,RgB,I1\T!Q<"naN&#pUeER%,K"$nUXj_O>[cb//=RP6N6XH0=lK$u"O=%)4Q`C%^^g=lE#c2tG-m2QSnNY?cFGW@L"GGF3?.C1/,M5mel.rOm;?KdF(7LuA^ef9%9hRB`<d6bKSoZO_Q5:BRZOVptB0><[UhE.SNC]Pa\M.XRolpVbdVmNfXK`c_[C/20d;n:cT=.FbgN:_p0e9mh&'m7or@X`Pd;bYm%>\eQ1#L6Z!BoT$X_9UAsl(%@8'jcq+EVA#Z!#=gsj[X-<*KEZ^O.>&!`C>`NnS166]m:PU$XTGqi#F<YFF9#$K^$:N[0bCkC2KG2%Z/Ts9\RU`,l`Cm.?C-H1gfSGGRK4l%.Eo2s>FF[@:]*J_C&)%&1]t=n#L46kbJSD(V;Lia72O;bk$$69/9&m"O_*Pe1?RrK\]>Y5%4W^1N>6_dXadhr4N*8a;UK7toU:g!:M.,'5W:>0r!b]ES'Ona7Cjd!7[>rg.16)XZL>OR<E/rMi"L$"dF"ZR.6M<+Nejk;%enfa[%P8qmg[Q]j/0[;Aiejk_Oj5E#)A[&,PAmj9f-noBVXcN*$eM+so?_>8K@+b=SnTm;!BE"d)fQn!2*sG-9U\0a%L-i0-[knK<dJB6g%Fa85WC`+c2Z1T$D4poNAB'U\T!qMjmlQ][XH#Bt];<.=oGg;'@NV?gjgCDH8G'Bn#fj_?kQ;)p1jdH=t$EqJpE9;TgZ%j343\Y<n%H^ModjqsDD'mge.\&D@Dn@C_EB=85sq^derXcEO)XkEPA4!frAXcIR`j"[n50u<2Hn=8/e85PmdCjd"bCX(F#^IQ>LYk=,<o*f-p%UW2Wi+O2uO"q05A%9jn^gp@Mp+8s08.C*c/F#Ro`<-Wg4JM[$^_g5q\UVIAQb@BUL5`oWA@m.0k0u<2Hn=1HnVXR5dl_Bm\3EmTU%bfSQ7W+K/Wejk_Oj5E#MnkJ(W^t)#,;<s`4bNYA"os(`A9'0r<e9F+tJ[=tfn,.!M'H"51QnuGu>9Csd';_8+oeF;Ko'i0M!j-al%Cjd"bCX(F#hesPDbJrpN4D)#cC:kSuc^?A;A:EPnZh71'LYbleE-@QR*Xc0oaTmF<bgo:DfAdH&F2+1[S4s5XXlBcrGsr!-Q;(S6%F*p8Fn@C_EkCWS:arZk8AI%@$(VGM<Z8^m!a@>kWl<t[=_X$d^SAd6snGY&k7jBt[S?7i1QQ*Ip<Kg-&l6JAo+#RAc8)VUO_0Cm_%g%q)rm5/JA@u`M!S?7hVDm;<,*tu:>&'l,Z6$Q8BqC$Yg%dRUT@hJ%%&Nq\#ohj[jH$E]i8)=>eTcEr*FLoe$g\.KdhHMJbh0<#]%RtF`4Y\!]1.pbWLa'/7JcqYXqU?%>I1;68e@R2bYEGI(p+T-,0QX.LQ'BNe:E!'#$?F1F^Yjnd#_P/VteQII3Ep&']ba(W-AP&L5%L-`#cRbml!:UhmGAkWa07I`pB;`*\7P\:PIZD)h/lSeOPhU+*>pC3h:1<:CDMtA.,>^;_dN?rnGiC)!p#0(=Y4?N%\TnhPqPKSpp%I5WVY;Zk#p0TCh/q'7Y[J^"1))-Fu5YRIV\0KG8@*:TT,J?]N!!UZ.`?qUrmZUAo[#+DR]jVtnPf\!&f0]m.R"r?+;Z4%)qQpetH%0^gU:JFn!SM&KS=puTS4ni?$l6C"BG=S,L=#-GU*7!eY!]\=&mHGn5\YhC[%V^R,:dO?<X,%GrO'ag7%JXKi#FDB_Ogen8NA:PD!%L^YuL$BY??+GIl:/"8,U"YA)DIuBn_pejQ:49'8@/FiB?Q9g?FbV+@d$e*0g?HQ?H4/0OOB$2qX1&KY,9/()'1+;\;99ql#DpJ+D%U;Vp;70Zj+V9#<)me6_mE\:K!Q0L0KTY_\K=9e9]-!6gAMiYF$$g9l^n5olh!BcZ6MsjNJ%,fB?=A(3qM,B*?.HUY8o?/+/W1j^A%E?ti@cngP#>?;6a8(Fo;.Ho;"e&+.IgF\EUd-X2]]L=:GZXS$apq:,PeX!m\Pr2/ZdqDk,&nEGIKrVs1>4_*ZZ%?b_*AsWG2hjrp%Q.Z0Eeh(JQdq`KJ@$W_h<j9AaG,X5m1"aGJApHn^C64o\JXJ"^Wrh<pPa,!O<I^'Jj;b-V/=n*]7Uh]`B1jK4#\HTM19_UNg_18S%iEc0PS5ZlPK$QfXa"kHTN*p[1'7'i-@A,(FKX)\X5(T!PMEV%Yi)U:)ZqXnOBNYOA2%o=Y@"iilXahcLNgsq(L+=t,ds&m=T!Mb!%?t'f.2\6J,,FqG7-0o%MqGR!.1b3l`?>3Nkd7X%,m*j*%]FWQ]#1+RYFWti\)V2=$d(;iELCr]#)=2S>p*,s/K!kLd+Y]2jr*AN,%f%$oTHS#raFaR:`^r'rOBUeMKVcT[oUZmse5ia(EPqGdn8#B_bL*8@<hM^A&"(0@ClQ#gSXk^5?d8$pSF0hRl0Y%2j9]"PU@/O3b%)@_VsnB/g1d,b.drIZ%H%XuT;AAq^ALhUT5$Tsjb0U>"W)2K*O!\fp+@l5gc_d$]00thJqgor>^#'3L$HXKPq=J/`*Y$%&VNO^Ah%XZ1%EHS4G!l]eh12(\=6>\!Xl3=,sb@YsT6`"Gr1)A_Sr)\joV8koT'91,nVfC(u.;DD.!k`LW(/dNQ,ik&IS]s;%f.%^XIZW%dH%pl\XEQ)n\_'8+)&16q&4Gh]DW^fW?<^1PKM_5i8):[bST?W])1+KbFWQ'I(mHC1ZXb5a7On51UmIoEW]T_8/a#!@j2hi'+nD(C)*%d,)HlHs>A;XEY:C&$b,lLmn^!L-VrXaqTmHkUZ;),<a97MIh;WQK8o@M[1MqA<@pD:e>IEA0Cl;"]fTe14]Aa-[ZtDinkt9^s'"$%!spcuAf3!m/:NZP9:=P?%.N9:(NU="b-*5A_q_1n#1/QI'8c@c(-!Ch79l/9J-$d&eZ]H5AC[mmTKCQ@([44dN<N"$@7;4eB!2^k%:F_J8cE;mJ"04RIY$`\%=J,oDbA[C]&,U"WP!P<[*@G<-D#oRe+DH;`Vh7^VgK64'6Yfg["tPmE>ccB-=OXWHH-<H$%!JOLA,sB+%<b-^qgklO079YfS^.9b0^oD:;e[5B.qDcCa4C]7BY==fY1dgB,fDptD!,^+&.0CXhXkA'>6A$gke$QX<H.=COXh]R#!379BAW[4F%I5@0T?@mt-G/D9a',ek$iuK8B#h(u6!=uoP\]DR\XiS;PXiLKKd(.65TWM>C%GH[Ji(]`"%!&]i)8MSG4Hj0Xou_]ubKs:#!$>Ah%16An9Q\n$=3qU;jW(P&q0]lgi=p.%hL*Zp2]F_h.fV?+dQLUcQ`.0].iIH-eBUW'5H7Trd_;Q-2]]>(Im*!]5+7cH<@s[.2VI:YN%fjP5'5`^1mOb*(&(E&I1-SiJr[NYgtBNp%Z^dJA1G_cb^o-GSC_otX;Q0;<R,.nU`A:PC=^@8?h&Zj6h0TcB:NVFj[Q:-I.Tr292%#9eI`#$>.7^].sa^].hHEJPT*@)>8T-rcEMo+b%r%20Ue[?`!="galBI*2T`"BL,GoVD[RJVadjoL3;`?m5^>#c0r[#jgLMPTi6d%Oa2XoRMkg_.L0U;)/tmt(lPg(Mc.n6;OhF"")AcMqGO)j^`'SF^.>W3MFbkij1a"ID&"Vm`@b1art:^WEF7u8GR>dB.P@dc_$o%<%?^c!H(?o7/Ch12/[2JSO:>$Bb0]@T=ZgGef4rf(oq3\fIAsk*nZ.EPf&&:S:Z6,FDi$k&1j/>\$3D*Z_n>+[hf]p7*7j4<^mpc$b%SV1pcBT%?W@Q>M+pTJ8>'WC!(^;.E+Bl=41Rt:8_ra0rjA\,S-U63HSpMKRIUtbJm.r>eFg>bBj;#:AF:'q1sabs+%DbJrR4.+g;%m&+Vtmm*=RWVS(>68U%%-LpZ"@21KLK%T!=P4/,c9Q"2RI@>;P\MMK6I+CS>_1Z/EI+SEt3?mPG8YATQodCotjRrb)HN@&G>L5dX%&("!)j_Y8eQ%1`<7.T%WOnS(Z.)D/Af`995OCgC9;e*['=Zj,,XO`d0*aaP3h1;CZiVAeT#&'I6:G]g$n*M*D\U^Zl4f/fu$uhOl%TG1>Y@i#.s+/G;8cqH.4>9X;H"d;$$iA`NB*iX@U'N;Y@MEXb*V[G>Dd0hcE9LJkg/chh>`$_/u]=dg4R,":@iM.*QpLthh%qo]O%'dJ9C((GohKl?,U4nA&'m/X$%UsqPr<hE\be)Hl2ROP+Y"X+(Q_&>H\hLDj9R-Xj8@%oenLiW%$C3;a@<\)!#+"WD.31Bu:!\6.*%]P8Q50c*'ZEen<0$TDHC(D(7<'el%fJr*#Da_mn^$)[+=P^DsT:%g<g2!]IDAmP.F-CBV>69Ln-a!a+CY<$M%4n:6^D')^12as>c%?Ka8k`qF*nR##?AS.]41O/PBl_/)3;P\,oR/&:e7_b6(0;;6YUf+Nr7PMJ^E<444J;M,S']1Rr0D`-G_QlVo(ffmX`;dN153KFkJ%fo#8/K3/o%V50LDNJ_oa^f8T<75G1GmD&d8MfJ;;##&SaZ]\Od_Tj:5g(]b*QWS6XQ!-dRZc"?5RuG?T<%VbbVH99uT2=ujnn+%o%Er-K4#HUdc(Rg0V!R1`\EQ=FiJ8$J&*D+FQhFUU=gQs9qV<4@:So'g+Jr.QbX<YO1%EV3HP7k4)OZ,%T.IEi-.[](0KP#d`8SBH<%Lg@37.55nJ[X=hdk`LAjW!4rpF1gnh2!kiKe+RK&R#(0#`41P1f#atK`LI`om1bc=,;r!,<-D"/dNVh"5Z;0mr!0H-BpbVDDh[ac%<JZ^E`^G0E'g]Zn5#!Q>%;9KMPp&J6(RWpmkk1]CTL\tbUDgq4N#W!T"_RF`R&8"O+uBs,]MHWEr_U@I+9tMFF^Sq\9]h=d'cL#P%J46*-`XMA;Pi&1VnocQgE3m;n/"]P^h,I"q;D,Y:,3I@L2#-Y@?6L(U_h<2>.URt`Md0TM;bVJc7q<?BoaoBRmaFi`AKQXA6G[cH%8G3-cqFiLplmX9j8+lu!W^_&rI2oL<68QHZfd`9/)5LY$MejuS&kH=k0N1[Er[N7K?omai/[l@'.';T3U+sVW;Iu^/9M7si/e-kj%1"[qPGa1QeJE\&I68P[X?)48Noc9<3!iE;\infS!1\$&j0VpoVo*&`14d-hAFMXJc`G\F[Z5m":ecDX(^@HWX5`ZI*e%laa!5=T2%nle\CC$'F;Ju6OER;g3;4mVei@+Ll4*VlY#Fo\kb>fsZ8F)Cr.B-]#s68QHB\.kH6$E!N*7(PXY0]G<a@Wq-/R\hNhBUZ5&1VlIi%0Pj>_ZeD_$pIToWq'_G9!)k(V&c2u=Tt)u(>YYLM9J@d,gHqK^BfdgArtWW(DV0`JK;j6/\Y"Cd.1+6=ne@N!VF5K9b(=K8LFC@d%HO/)2J%Q8gatt<NDE0"B??)Yf:dm1ZjEJfL=d]stSHssW7Kn+6i\aV-DN@K@$E!4g65)E_BI9)Z;3<:8[_S%<[Fi13L+Hu%`iN^S%[(mBC[NWiMYJnd0n!j\r/bVbT(RWV=2A.m+#ZHU'W!4q%Q;?21"fC_STUB4V68QGoWnqHg@!X.Y"+*Q`4(X#cm;lhVQ6+SFHeHk#%5Vp6@3rlPp.@;0=gagn+A2!olVI\?"9EqR<U59<>TW'Z.3sU&b'eCd<A8pgl't<PF;OYZc.59MV[f`<Q:dm1Z'^tg%hM`.BNsPaY%\E2g@#F<f^@&m_'MN:ao"fc75Qpto(U+7^\[T=<N(W3Oe'R,6[]-;.eJE9-TS%MNQ_%aX-bRaqN7`6)/)IqsOaV<3ID,Qg7Q1S!;%V%_U"eGPMZWZ=dd49qst*##<R\DeBj@YtCPAtAX1+.ub<I@:Hh7jHFk7ke_+2hf@47qG%?,d*dWU05[1$a<7X5_N_QCPgD30Z=R#%&hQYjF<!uRCpRSDj?%^GamG?^$SZ_G-kCEbDiSNYR)lpq&IGO>IR*E#Xt`;^HTT1\m[2+H,mD9+UE8;uBI9)UmpMutI4:Q#jEC[\%[HV`K".7lX^`EQEhSFkWJQ46X2.k'30Xg7f%VJM%#B-fgjC:[uk2p#V<'C<3[WrVc'FB]qO!7>Pm#MK$PIdbOQCA^38q>u9(LcA@%jM!]a77uN(e,0@.g2X;1<n4%r)rEj4E6.Xn[Unrr.niC,#0]enZ3\.I9,!gT$->8d"dB;G%k_T?nM4V%Zq^o.@aHaEHm2qL].p#?%9+WEI";6AVSPi"$QV_UBI`s+7$>_6m/]rZ[5:TLCd$-u`HeQtE9([R(8E:3s:a0<)3uj]`!D643W;oge,6?m6`^sd$a\]G[:(.C`%o">'!e"tJ5Pojb7>\!(N9^4r)&na4!7CRO\lW+/!1jc;jSs:.u+5BGo>%>Z/+I!#Gr:WVf7^J>VU/9"</jG*WO3fCb[67.<nV'h%%R5C<@L=+4I5AGaH-6FUQ]&T#lh?:lF_P0+j`/0S(mkig#[Dm6BFGCJO<n[T:-:aO_A"Z5-cRD)5m#TLD_*ZJ9;K$r3eDt))AOT.]%>_Q#Wk*Aseq\mmD3h=?%OZRa%@E?0,q9GEi_9.(gZ4=YJOb-GNEpB]%Ek=Yn+%(Xe6E^M"4_IC#nbH&2"JO%?KkY59r_I_DQ\>kd%YO]?u%h9YS+MmUjqqf*&C?br<W:p4O*8&8l5',1k$r*;X%,1X"rWp^O_%`o_me8p"h$rbtj==fY;?b9mBM/_le9jpP%jdDa/0?MW%E$AiMa([A5SRC,',sX5m@i/d%cY6Gm8i5Ch+%*\O@]oo-H7kG.j4fX`)F[@^1qe8o-G4+Jbh<6Lg2PTE>N6g#4HfFl#q-Ckmt5HI%WWC0[Q4l<00Xq"CJiQua=Z[s`85q#sL'1BL/chs:d-6U.hnM/$DACVaD.?3+,7S]nlQYu7c0>#.SA`"`)(.cErQChFB59&B'CSa!%,XXYJ;<3'qCJ$"CU<AT@5us[\^oG#2HK4UlDCE9!f7Y+'[jHZ&r[^)uRqfdhZsK9JkAe.P=5iUr+":8+[Dno`L8Mh;k@bMOL"f]#%X<%HQV["Prq!\.nq?!06V:$6B+(NPf;2$r>^t`?q(?&E9lVdX;j]1\u&g@-9]JCmnAh5]?V1\iRdLIs'A4_tf.'Y62ILOmO8Z)[t%rFSC0dJ5LuX;.!Xn%jNO>M;WI>="[O4JRQuQ\C6*Gn20M&?eh0aW5V+<bar0.;LaR=:t7-+]RT0DIni?gaBqT=I;p'FFMI'>B-:0%1A.%.ASGCflG@eO6%*H`^f'p`#h]`Ng0PKq<o0Yu&E^Gd;D?/$bfgnP\I[6La,p63H6lZ1%9)POc]?d3KefRph]tBW&a$N_P'5Kp%37Zc.ZUC0OPX3rs0P''&<uH4V.jWlG"%[uT!mBVoA3t,-"#ku$O/,F#KO-I*hUqa^ahcVHiZVZV(;;S4G+m&m8s5)u8b8m`!g^=_%"IobNpR)_sBf$T>)(?js1:1O.?*dc33^Teq])3BXA/0CoXK"pm2a0H@'0])e)1OL=5PZk(,d+[,K-tBp<>^?Qp-XE?Y8%?FBa)rA%rt/rYFqsQKQ;Ogo9cH9#Lj"Eg8!jCP;=/M@rBTqPW;'ob`\fkV0M7o(5.ckPor8B;H9IQQFU"?Ag%Xp7:"Eu/TCtC@,S9+I5>j2X%+RbS%VW9@I*I\FM+/)cOC:f^VisVW*,&"XO<jP*rR+%m+9-;%L8D8uO^%T#MfqBA_^$dc/O;9)a+4J_i#62qqp.#058-(3[KET9I%BeK=-&<Q@:TV2<YV)KS_:9n>>Ue\MS&9"uaeqEq!O6c?D9,m>]hEp4A>.J?F;PKi^#SoS-Vj%01U`Eig\;u6)gMAqK(_YmDHGqSg%o15iF^4$$3iDgV=<er[sL<pTXm5>PsSi=(Imm%r5^XuN\HTu&@04J8ELm+Z'inqslIj>T*;3MRre&\k[:G.u)l&)-Qn!Q^Z1k(*P%1kEb@44:>_X>T%WjR3t'^nM(@Lstp0TO<bjC(`)HV$)TC4,.<`=DOSJCCU3GqTpb/P+E&XhY@#I`JE6VUhKNV>KKg5$/,odLbgq"%O/<sKGt.IgI@pG_.0:D\dd%49ZKUf4+":;,e/tAP)n;aAD=YX1+o<MKQ,9Q4P^;B]U\6&&b]omNfn=8q0Zl<.dMF,)@%Gp+>iN$*%j0Qd_OF<b\YUScD$'n@sP>Dkto@k?9)!Ur9@50'P[Hm<laSlIY!`mdHe/P#%FlE<R@j*4Q2n2>5:FSr6@HnM?/0QTt+b1"-naClJ%j[YaM:i)]N#_*5KrK0@&?k?o_[Z1"=a@6(<_?nqdTX5^XD21am5V-T';mQ5/JcTZH\g+7`l&CMhK_$f7*llD`8?#.nZ3)Z#/<Wm4%Um-%Qj`0)_-.rZZT@u#q=+Z-t1Srt'r2?_hr$2-3rheg]\BjV#(I&B,mtRpo7W*Q:_/.Tah_X(L"(agE6LnASIGpK^\&2.iCEQ-m%o"4?,\(6!$K.sBa=>:sK=;+I81@eRdO6)?aB/QU&mdCOk1^R4>V$'>?FookI0d2cTe)b5\KSWq@(4+8jHK4Ulc@]/,8lh;^dRI6W%ouUtu2JO\tNNBtRq`_Qsf6)UQ;B#IWM'`gDJtaJ8ni#TmMton)+t25FVU69>+(#d`&AKq;IudG\[t<Frm/,t2'&"s$QM9Y83"4L7%3P2tVUTeQiP(HYH-ST"n&Je;c+0NMB+[JSk<t&"jO-KM$g\8F;5p()%N+6H*)3dKQMl<6^gjuEb'[giU%h!+^j3S64'8_2pS,JI7%ME"G+OdVG0VSjCb!gG/\dM\#dU!l`l\_Ho)728q@U>eeQ*\)BEne1RsjSKj7N2XO;mIn/nel[#k9dp*@TUilmiX/:\e)cpQ$B/9l%X6EOINR*ZSm!!SVj2u>:@:`PX^4o!Ja"q'@]Ou9#O_Y)"E3N>P'Ge[7Um(kA`@`k88+Gn?-rH'nb"j-G>/"&FX6idLN\?>pihsG8%is.0/-KmC+o8&j&;a^p@nP1G3FZkdH*TK])&0V-HafPOu6+6lcWpT;5!91ur@2sBWa`PSb#?sWF9,UVB/D<=0Z?;<7-8s<1bb#bi%8^3gok-[4'Q1ZP:*Idl1"cER]:gtXupq`,N?3qBncBNY8o:mpjqIMJ9YS^j0?K:nCeM/$;\\&1tS]*cs'LA]#8tOJh^G@\Q&>,5E%[MgK$MNj%8[`BI$Ph8p.d2@ia?P2r_DZU6+!.^1DKFIY*Rp`bKUZjqN%HE7qT#t.<,8dXYQ]aV$hu60_WaNmQ,q<5lnmb4P;<X9Q%@5LZW2a0H@>Bpa5W(k[35&!dZHYC*9k3JdDSoocP**7GXC)ZblHjpUg]hP@*Eo@DJqmTI@8QTl)/:Wa$!b_1QV-<1Kmu*M@AR('L%4l#L9S[ojl:.MVL_947iW-X`>'X^,diD_9IWD'6'7A)E5UAbC,E?tfTH#ah&Kj.Us(@b@PN?$f&$77L23OeBGbSp$&7!;_4'4R)2%`+8F.JDAbEG]=ruG/hp1W)Y:S6g3c0?kPVUr8a#dY>O=[dI+k=hBLHo-+[9>QTYs#2-u,';)LI<cH%&CEoglRoM?"GC7#hQQq&dV%/BIfD=o2/MQX")f&:3=rN83ag8k!k^M/#Dd-Aes'?FEb(6q,ZDA;jPEOK+X>#*L2teM^9-Unt3S=MR%\3[Vr*Arp.6\_!Za*-0=B%cM+7&b"-@_6m3BlEDW#AS-(IemEgWC]4'7[_abFU<RK9OT<YDh,$?rL5t$o%Jl3ITeU-<bK"@Zci_(u3UfrYUE[0+4E[=_O^8cQj%,bdl\&s:u3Wg8Huq@YoV55`/m<CKpdPcR]lWmW*JgT#k"W\#]F;K53,DIGQ+3Y7hY>$'La&fmdJ\Ypu?"^iq""HVZ'S>T=r73WpZ%^ab?_OhS&i<D<h"gSh.K'N2%<od:*'pVSrLCkfOtO2TqSH59DN"n<%VF(lH3/Sb]M+2mRr2-Z0/(@aN.?Y^"21VRcNE`TSW<-89,%ZcH;"O5^"=Wes(cE`VjC7*_f]9FEss.lAH5C8=9'p2C"XUoM5/)G$Ag;:f;CX:]'6</*^,@H>a4oc9iCWJ2/''-:%M8QDQpl)-5O%'>>4N"==_7WcF(us&?3,Gg[D-O-.4]L2gQG@O[!;&+3(jU9241h,%h?%)<)D;J1V9iPB$aROnii5ka!"g>EnV9RTS%$g6;??j1'o%I8Sm"po86]YR9topf<b`_P?PF^UaUj,1(X4*JL>%\ZT$`S6N'+iM+m>O02>1M<RTD/u'o'jScLC(uP]`<G>Lt=mS4:cXPcDH3Nek%?3*0^-i9:2>Z:=ib,3$^.;erZX/;l$pI\e]rk@2FrV^$%cPU>H9aa($.oj?H_jd[PaB;FAeiT(!K<qT[9VUdIXi:+g![d**Zn6fp%""*35i2K=n_P=u9h?'!4ZQ?,]2G,&VL,2j&VWmC_W(sBCiCFt*<@p[^*TU_nRo<3N-L^1eW-Y5>ar''uJ4]C;i(8&W</Zi133(8_%NmJG%d4'2rV&hH]do?g?efoOl?H>P2W&p)tVMY-_W2$,&ogf32ZKCJANIocAE'70#FJ+9@>kEEn-]gBL]'9_t+*k"hAK?.EWQgBK%K?a:]l;Y/3ABdWP*G!F@<K=]nYjPde<T$_SFQ>Uhg$AN7%[c%`KEpC=EBdBIhb^-rQ[:7JJJbr,6I(`o*Hsrq[3@3nga4b8Jg^:n%aP$4SXk(S,'ll3QDoKpj73Ba$ag7!hZo)lB9e-"\S\,+Wp*H^/PK"4>=>t-O)J(!%4L#DFRBi>k>=bap[=D6c@ii]0QW+5'Rtfim%KclZ4O5d\G^Ea]Z+Do6aN`pjsmo2l<+_@>ZmUDl@[&mGD<8A^sE!pA)>90MV`BjZ@,K:AEjuZR@T1Hqp(4_6qMt'W%#gu0o,"Pon%`9THR@L9p\7XZK%<3jO0g.!XV)DWli%U7IF@QEb#7kEgA16kQ(\crej\OJ.[ACcB,-+ggmM^5QsfTGu)jic:14c.E`11`IIWcF2#%2M+V"fa'?u/G,4--7#k13$V;f#kM#q*ECa?,r<6;W5N_Z:pU<#P-Fg-VH$W!@Q@NBI7q\#V^a>k[R%tP\WX2o,+_e7@q%HbO>A@4%6-^e"\^Xd2HI.bS:Z>EcLZ5[?W]ET^FUIA7.T`2!E@rqE+[qru'!kguihM+)jXQn6jqI=ZiB0N0/S7$#""c"-W_@rC%[9B=i]KUl%-<2"BV2m+4QLBnlh$$Sh1oYduP'7@BK^Y0AQ#Wq=jf'.rW8"+_-#odk<91H7YLI]kUm=r1mihM'<37Upa_XfpfLg<9<"VTJ-WPYR%Zi)9EVc_4J<X@S5/SZ<$k*)r>-$%!aW^Y45:)-9m>C7[FJ\jA*)l,nl(<]j\r,E;D9!1M1HWIPJTZ?O2;V/6A]dQm+M<1gR>Y,(+%`HU>]Uoo%jeY6%!/*'%8GN0X<7J7df8T?`QU<:b0't:F)EAm'WC)1T:\n[O%+(&,b9rU`gX[lgLD9@CLD-N,dp-krF"fm8/<psJ$%-!7=!Wj4R`RT)81pg0q8C[o*d_FC3`<+.,H:).Am]Z@&j>`oI`e_id].dX+4?%j;!?K?36/s\<]rlDU*]77Y^,uh!!jD0DX\DV_1%`SDUnY&O,*#"RJI$[IlPh7o$f3S:H2pBpVE68E4!O&$oPEj,eA()H6;rG7Rh(08@@Kbp_L"WIL-A&1W2A0P[9?Jui6;@cIO%HFmq%R>&4#I"Sf:lnF.SF]!;!:e(o$9i+=fF\Ljb%dtA@h]R%n1"=cPq:5>g,7f^7;;Xt%ku?1f<8g.q-fhd*/LSiGVCRf!^!ac,Tdk,W%QBU)S<HYTPUlX1ZpI\Gj%+VpCUZGegCI]OJ@9"$u\Q>d\Aob(S<QsN1$*-T?Q"!a)1W^iD.\"Pn15/^:'-7nXKL\7nBHd+B<<5h^%Q)XnSgacA.1t)G#@$9smX%)NBW`#;@.oiE&Rfe`98`a(a@l^<1R]6UIe\uZGFIb7f7LRsG+h'rN;g$NA#Kp9#;j.Qr.4k&*.[8\_%Wj.;S$`G%u>%.i9lDY(#QF!U'-F_#0-@!bDaFU6sYqIRo9HSTAX,[o'j5-FAR=\T"8T.]=<)q]6:8qYO^F`*P&Et\^COrLsS(oGM%X9P9gV$<O\D1Euf<QRu1MY$q54/JqYLWX39-M>!T_oSBH_[Q%E0;s&k@&i4UoL7i2^][I0U8l!XR,CPC7*Z+?AXN+d*e:M-XfBOc%r@s!4*quMRJ>Ze;#Bi2>'l',W%m(nKU+)JN$G3$3hpjD\/Pc-dE_0Xj_k\ppg+&KZOM8*;POk)f])'/]U!fC,+Ep"LQVQsm.BI(t%pK[-')CEm0mrHLjPV"_O]AJoafg8uPGt$D\1\X+7s24eR*g9'S4nC:?AR/bR7'f-][2mmC?j7t,P-7_M0\s1Xj)FY@;/A9dQT1Jk%EYb$.qR)KMiX`kg[Tsr*F5C&uNjE&.gmVXU-K1-4"[b!"[`?:,`mU2Q>G[_5YY>JK^lViB@>,klDVO413D90f,\o$/O?*jUJJf`%%/pUqGJgG9G49F]Is./Pm\$?+nPZ-!>_0"EQ&'l+CL87'b7A[jE-SU1NKTaNF%)I&?*Y6R779^.=c?`!8^^Qb48lhU>?qK**&'l,I%D^F4HM$o#RH3.$a+\Qu,)hKAQ]0$.-V-roM7VQAVfh?8+%$QUd&59M!naN%pfr%I:O$_2QGQii>U_J$q+W/r,GnB.*Y4;EP9Unf^%G,SeFR7b":&&EAB/s!eNqC(U)V'r4TF:(\jIr0T89XX9Xn=1G?^#q+C5nITG&=C%ZLcK,SVV:`gGg:Fp^c<LpSG0Qbnb+,nDVO7b%3(k>4*;W)/G,Sg6!aSkT^f9&0&'qfO)Rk`kEX.45@&hkhR%f@DWbmfPk?Nl^0a$UO"$9I9A_%Efrt%l5mICOQ=kU/a<H;NQ=;_0m%&Zq--'gj\*[`?:,0#WPu-\egQR(s1H%)uCS:PN8WD3'J8/D!sf;SmPscRsaa<*r0fl62O4gZ@BS,;lYMF"L32/MW4&k:nBqE]G4n%l*ak=JM[&*`Z?I=WEL1bUdtaa/(:!g;f-kD4D-X[-UhZGfV*m?Vu]Ad+dd$!j5E">_&@<X5(ZX43DTaS/pcla57#_T]0$.-G()_S%>:YCGeK^-jCu5@W#V2-r\BBLa9@4u6du'ZlP\$\_AJg0ba?glIL1""jh!`+oi[L["KbMG%:cZ,nXAS,.HNHmMmICOQV*$=Bp$rj#%<0+Eg;pTgW5WB$JD0nB-B.bc:U@=B.P2W6`BG24f/*3IA&>gQ6\i`)f^4_h$,p?(.AZhV&)4%8b:ic\3\*`bUSCt0W6lC3lV%h'G%4hn>@(<Sn`KCTR)C"q_]34#ZQ8j\P9ccQiP@Hs8kCefM[[QP\'ZaeA_"OAK$XdjmZd2<IME(1q"WO=r2T!K/e<2AZCi!_aE!2eQL%MW+c+DVO7b3(onS&u;#&"$6WZP,96L\"NhiDVO413D5JMf%,o?8sd$oML-A69l+u89XjEZn=7J&ccD*kk'72TW*h<bMrWS89XjE[%#b8jS*f8IeOVA_'E\:A[QdlBre[EN9Eu)5c<T&Z8+LREG^iJNng7A;Nb#u-qK/gc"fSH#UEgVS;\A3('>(0!_K^#pN*hK^&^9T0G%+m$)4BQeo?2sTr:Qu:[?&NHgFL%q3=\3L[-&BC[goU?M%WbmfPkDW=".)8ch*S@';.JNH]567Y8p3:i-&e\[75m8DYb*cUE.bLjU%:4VT;>onQ<%Oau^/3C('"]M+=ChXlBWO=r2SoZ@Z7S,'9Lr(/S0\?V(Q(7nRD0nB-B*lo$q.tr$"$6WZQ"cCHV]f0j[`]n7Q9M<j%6U_6'W*h+IPV%lI0\*VP_fN9B5)-@L]m_b2O3b8T_fXWS&'rp.pf9LhPBC8gJ17sB$F2c0QF-&Mn=8/eW6T#XLNir9M+&%iZ%TFn%_3264*eCZ-NMGF"=;kVc<?^6Lbdoe8VV:`gGg9b9A4Q)bi%Kd).Tig)Wq-m3B\V]9S5i\+gurd`2!U;*%)X[QLo#(sQDP>Z_ME9b%`VIS&WC^NR$3iFn,V9jbWO=r2So^\'c-dA#,91_)/(>BV:4T=P4W^29XnjW>o+(+`_+I/DScI5V]0$.-EQOJdH:T/W6AbgpO>]EV%NC,DM[`?:,(<^)/RR&Ql7Q>GN!uB"+^sWLUC>7e-3Qn2+Puj_c*5eoF9n:&d9,V6"LZu6Q*hK];ah[9j05Ll:W*m-WjPgA-"Oh5"%49B0#RUXKMBnWVi(j<^-kWe,1VV:`gGg>#gL1clU)W<e'0N)<s`g4Uf=OOY$_fI`9hn5u-dKjIfJJj-sjD8NMJgG9G4G\&39oJ86%BdqPlY2%-1n),.]>1K`7mMcV![A?WN^]Ub17N=KuT1,apfY<M_V8T>V:7NUe#'&WReO^rN%[i&opH,0IWDr^/$#!0"=*Q>Ai5/#^%m]+d@a929Kedi$@Hll>(,Y":V;1qW6S-TDF=U#.T6-9iDaroe;D)Elm_`5SO&gn7=S(&:1\4EV63T;6>ic`Zt</MY%ZU6F1d09:J%`\L@O$Hi+B,T\Lh#5Y=/3?k+h&s)6u3(=OR<E]K_oJ"lVab\MC%Eh"N/NPGCjh_<mFQsg?9(=W0gIuj.ig-Nb1'r.De6uA:&XE2>%p@$r?oE_E_FRgA$fmYY+`<d-"?_dkI<([b2&&[YPYf!0K=\&l2Q0:\RG:LuL3u@0M2sa)6'A]=gY"I`J1jQVjM2b'&kE)#7Q$,Oc%+sReo>ldsP/lHl.Tp4tWnO3L8RbdsbWZ'Y^0bXo!k?oY+l^bbD8^\&-&K>oV;dn0HYbBLnLg:i-dR^6df2EsD:uU?BVlO$@"WN]5%<FP)+@"FnA5uWZk5U?Dmd!i&7G0/2Vp6+B<L#TucTTWiAV$$=h'"agB/P%o=aHX*V6DYa%<1.!b-`L;mk=SVn-nBnj@*!A?3@P7r%<18PFA:SqT#s/^pnSeJSUsaLdj:\lQZ*C;TAVX#g;#mJ05_4\_nH/$?9!P)VT[HlSYSD\r*=J^CQ#07LW`1<SDe$nf<$iRlV:2*Q%@YWR`YRD'[A2rqTYfbZHBhO\EYo&!?9;M%g).9np93M[<),L$b$kuCKEejlU"$Hf$HJFk<TWQ"?]IEr7ZrO=MI:53dVM_Q-=PN)4%pOVbKP[).]XQ6*`D+B'3o=ZC3)!9ZOj[e.E<DnDW?^Z8*BDA4dX[20--,2Z[:`L@Z$OIGFLm]MZ^hi[`,b8(tA-a[O9TgPIgO?;+%NmR)rV/>)_<h^j":b1+c$nIh%)VI:CH=taq+`5ctU#'0\`Y3Y%FsC]Ol"(F3`W7B#c]^a#.]n[F>GDO.1MU9^[^*(\N(m3ZWA$5%%h1iVtg:j+\]`d>+9@C2Hco*C0^h\e/Hfp32#ukcr5*&&'=^DkDT=M)VSWsTjdlUbb;P'klG4jYo<a^\!=?jWfGPC@'RG_!"s5aLe%q0Hrj$b$I!jZj+oYJMtgBVn+07:RfHE'$]_Kb9Y&SH?,jhOdFUgs4=sP<f"1:C!Z$F=O@[8O$6)^+9BAnK_5N:rs7oeX/t[+E-Bl%_#t!$'Y)=g8N#)YX2l4aX;@0[VD;*/jPlf)_W%=!b$93l6lD4=R1BNWPgK!Z@0"Qpk;rrofG-B%TiAWR^\F$C/@fNROWj@#p*7B`%cPF#gLRgpQPUbIZ6PW5G2W0Vs)khqUQR_'ge!Z=#^#6.(<!iX90i)0lkXkeV"tEmYLQe($$9K%A,[o\0#0O,;A:V5FL^`c)\M/3+%6bT7+X4.0u/-E:)ZYi_\[G(R^h"rC^gCE#hCH2WSQau+od`GIL=?7r%O/*A'<D^6-'$RLJ<f,A2\E[$q1TqFV18JK2K*ksXdY"O+%'p9W>`6KU,^^A<DQ?N\$1n^+^</"*APM>og[G<X5Q*Wm;8W#/i:XYX\^@K9s!'X!;V7c7P8^OM)M:qTZ,eJaU4`48e[(L1S[N&u7%-uV'<AV!8TU!lPt;om,tdbQ$>\lSH&JnT^lT;0dfZ*5rG$&M.JQU6iL="8lkAUkII#_0jAnJTIN*^!LMW4>5#=g%Zr"X[QLR>+/R%W!_RNoIA"YP\![k5"dAj9#Di9GSA9$.2&6eS3Y`d1jh7_4];9XfZOhpN"o60Z=&1W15mN34W.\L31C;$8O])36D?oQ2\tuT>UWBK%Q:ui`>-X\EV289"o*AhI&k\+hV2uBk887&uqLGJkP?A)\?W'GC.ASWe=.h[m"HR,er1>u`Y=`.gRn0=[R9G^R!XpCI(N3mkrPeS/%83@IU/;3gC<Cn?*U6)CNO;AP*.OcWf(V3ip$)(83pIJ)6(UFNh<Y^eq$2S*Sd8NS/JtQAE,q1+eP8sqEKhdMoo#g9(Jo,Lc7'J98%R%b94@+UOV>205m=GpCU=$-!Z'0MBX^6-(BiATk)M&B+c_D8pOXcOf%d.RjHm/`^(_ZAt`&#0jV\!D8%*AbQq_;1mE"M!$]a:3FF%`#"^n>276`3%c%Dg9P7.4r0;<8Ym3%,lIr@kXm+QOD"rq<N/D:OTE2-7$=S",.5K7M:dYI0G>`%&T!j<M``[,,Zn*D&ZJ2'.Nhf'%TRq)N"tIu#A:W?196(6<C.Va-dYK%.#s2lRM&<JF,uKds)8b*>'"oT*7'QM,'ji;)=U$?eLa4*@d6EU9XhYg0W%lMiAfq[V,;R'[%+Xr(D,*58?r=F9!"3`Vo(Sm4CE#MoNoE.s(QtqM_;pg";"3`u$"/M*/Zm#V=7'4N1F&Gp8kk(g%k`Lps/%E!+&]l02]iAc-KSrA*%OcT&CXC<gD*>gFXA_)o`/*.cg.6^AO1c7rPPC\K[-3Fd8+)Jb\,&gc5PJdre*L1hVV"6"r*E^3)hHX)P.IY&Ck>BA`0K]V?r2/hZ%V7ZnGQmBMH_4q!(G_lAb%3?\q"VVd'i#skS^dDX/JVV<3_*eK`Vj;O7*NP]_Sq9CWLa870?kjP3n%]hgBa%,u/I,_$6hh-Z@S7UY%%20Tni%$QZY^sFhnd_`FTB.(QKgg<Dfp-bh%20U%W`WST!IHd+%<:^N7=*T^dnu""M=_`5'$htn8-\VO<[=GJrKJ:5+d,^,*;$`o%KgApo=g[;)+=0\_Mg[m51t',e=?laR.2l_('7/H#1.,8sj_2hc6#%/=PHeO$7*:bt(>E:'6n/oTX3juEd\*_X>4CXf+SCSC8aZrP%T)>J>Jbc_YG(c%98in`Cj1]K,OT^uF/batt&eutMTDQC5REcCN#mKQRp?B.0KLL4>]D:8\_0l*B`KdPfs7>/u^5X_Tc7H,J3B29U%iT8+b\a\5=dD=ChQO!QNrbfal++F+^jhL`fV30)6;N1PdF.#jNPK,=He_&CDf]0a&T+=C@#>3b)[V<`\3g>^;L!lZ>#I$<0qnpHd%PYK\_El;f9,)kl?]0[rKYiYgrlrgsY7Ud.uC@&Lc`f05:YBf8mI>6?=JEj9`Yjg#+Rtc_s$+?]P$XkLsY6`+d_K2,LL)moZ%ru>F%]d0)],_$rUVJ`]PFeWqYcDI_V'MXe'*LgTL:itftMOm,.hM0XE.)SHI^'tCMG*`:1];b?^$8KEO"ZJT(=5Yi(HApW_4;J5Wi%S\+%]VsO._6R?=J5g200\V:d1BpHNWA!AROSoc;-!9@k;sK@'$HJ_:"4i)Hn<d!qL9s52qjIHXoD3[oq_>2DrF@)k/-;6H7P+[rA[8VG%=GC4pD3r;r(.!'m)4mF+dAM2+>..4B@V9]BbI?$2qqp7Zr36([^Q-=PcBS38F]Q!%1c>(!p;?4$WU&/;p@l<D4o"ehQVaSco80#2%mf0lSq0n&.jTD"@\OVtslouM"O5+UprcS,7BOYPRgfaODo(ML$&&-96O!Z4AmCkdZo?6RV_h0V;f3`b%cb\9%LCZ6"K2:p%Z.E=m%^,l)q@pe,@r!u(u'1SU]=M)1/qS*gonl#~>%AI9_PrivateDataEnd