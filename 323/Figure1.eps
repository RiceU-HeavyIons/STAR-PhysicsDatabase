%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Figure1.pdf
%%Creator: (Adobe Acrobat 19.8.0)
%%For: Xiaofeng
%%CreationDate: 2020/9/21, 10:44 AM
%%BoundingBox: 0 0 567 242
%%HiResBoundingBox: 0 0 567 242
%%CropBox: 0 0 567 242
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 984 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 91.163280, 2018/06/22-11:31:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.52"
   pdf:Keywords="ROOT"
   xmp:ModifyDate="2020-09-12T07:36:36+08:00"
   xmp:CreateDate="2020-05-20T00:33:29+08:00"
   xmp:CreatorTool="ROOT Version 6.20/04"
   xmp:MetadataDate="2020-09-12T07:36:36+08:00"
   xmpMM:DocumentID="uuid:05356c34-d20b-11f5-0000-103b8706f2a3"
   xmpMM:InstanceID="uuid:06bb7792-9c20-354f-834b-a002fc10a6dc"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">pdf/EBE.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -242 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 242 li
567 242 li
567 0 li
cp
clp
gsave
9.15527e-05 242 mo
567 242 li
567 0 li
9.15527e-05 0 li
9.15527e-05 242 li
clp
9.15527e-05 242 mo
566.929 242 li
566.929 -.459964 li
9.15527e-05 -.459964 li
9.15527e-05 242 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.4 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 242 mo
566.929 242 li
566.929 -.460144 li
0 -.460144 li
cp
@
5.66898 232.302 mo
561.26 232.302 li
561.26 1.96506 li
5.66898 1.96506 li
5.66898 232.302 li
ef
5.66898 232.302 mo
561.26 232.302 li
561.26 1.96484 li
5.66898 1.96484 li
cp
@
11.2251 229.998 mo
555.704 229.998 li
555.704 4.26797 li
11.2251 4.26797 li
11.2251 229.998 li
ef
11.225 229.998 mo
555.704 229.998 li
555.704 4.26782 li
11.225 4.26782 li
cp
@
54.7841 211.94 mo
550.26 211.94 li
550.26 6.52489 li
54.7841 6.52489 li
54.7841 211.94 li
ef
54.784 211.94 mo
550.26 211.94 li
550.26 6.52484 li
54.784 6.52484 li
cp
@
.75 lw
54.784 211.94 mo
550.26 211.94 li
550.26 6.52484 li
54.784 6.52484 li
cp
@
54.784 211.94 mo
550.259 211.94 li
.75021 .679683 .670222 .90164 cmyk
@
96.073 205.777 mo
96.073 211.94 li
@
112.589 208.859 mo
112.589 211.94 li
@
129.105 208.859 mo
129.105 211.94 li
@
145.621 208.859 mo
145.621 211.94 li
@
162.137 208.859 mo
162.137 211.94 li
@
178.652 205.777 mo
178.652 211.94 li
@
195.168 208.859 mo
195.168 211.94 li
@
211.684 208.859 mo
211.684 211.94 li
@
228.2 208.859 mo
228.2 211.94 li
@
244.716 208.859 mo
244.716 211.94 li
@
261.232 205.777 mo
261.232 211.94 li
@
277.748 208.859 mo
277.748 211.94 li
@
294.263 208.859 mo
294.263 211.94 li
@
310.779 208.859 mo
310.779 211.94 li
@
327.295 208.859 mo
327.295 211.94 li
@
343.811 205.777 mo
343.811 211.94 li
@
360.327 208.859 mo
360.327 211.94 li
@
376.843 208.859 mo
376.843 211.94 li
@
393.359 208.859 mo
393.359 211.94 li
@
409.874 208.859 mo
409.874 211.94 li
@
426.39 205.777 mo
426.39 211.94 li
@
442.906 208.859 mo
442.906 211.94 li
@
459.422 208.859 mo
459.422 211.94 li
@
475.938 208.859 mo
475.938 211.94 li
@
492.454 208.859 mo
492.454 211.94 li
@
508.97 205.777 mo
508.97 211.94 li
@
96.073 205.777 mo
96.073 211.94 li
@
79.557 208.859 mo
79.557 211.94 li
@
63.041 208.859 mo
63.041 211.94 li
@
508.97 205.777 mo
508.97 211.94 li
@
525.485 208.859 mo
525.485 211.94 li
@
542.001 208.859 mo
542.001 211.94 li
@
grestore
false sop
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: LAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LAAAAA+Helvetica def/FontInfo 6 dict dup begin/Notice ((URW)++,Copyright 2014 by (URW)++ Design & Development) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdef/FontBBox {-8 -218 859 741} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-23 -0 524 539 729 741 709 723] def/StdHW [81] def/StdVW [93] def/StemSnapH [78 81] def/StemSnapV [83 93] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/zero <1C60D8A8C9B7EF32A8358722B87A801A562DAEAF310D8B2D525C776A58483558CD1C1C4B5370E4697C2C295B707E2B585735216999E4336E8EC3C2D75AB3E370F5BA61767E189AFD95C19E3EDCF64020A783308F18BC27A88D779DD0AB60AD4F1F686FDF6BF0> |-/one <1C60D8A8C9B7EF32570F06410D4703CEEE720A1EC05549B5F38939B6B45D927DD356E4137552D71D9F5A76> |-/two <1C60D8A8C9B7EF32500AC75069766F9D86E52C146766477C57F62E0701EF066D54A4A0DE6B3F111A80B6DED0D7BE403AE55C976C32DE56545F2C86916488F1EF47A33B784E2CBC1C254CB9106391983F5D06307E8C46757539D824C57DEA3EBF5AC4A0DC454707E7599777D036A3470E041A437C> |-/three <1C60D8A8C9B7EF32A838F0ACE91E110B9C641696528D764802E0DC68BF9F15900A58887D5DA0728C58A5D2630177ED2EE6B4392F98EF44C2C436690D003A9559F1D42A17C8081463A26A08773B4A30A51B7104B6D2C1AE9A21925C94DA9C54DCD8883C9C1A48013F2B307BD9787489372C300168FAE8971A051748E05E99DD5F55A29DE819E045A2FA331E1031618537B63AD346> |-/four <1C60D8A8C9B7EF32570F0641D9F8C40B3B25A973C8BB2CC236581C6175005DBD9BD1E852EF7650C6FA91486B65BC138F8CA996CAEE1B52192E6E43CDFE7ABE19B5> |-/.notdef <1C60D8A8C9B854D00D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BRDZCG+Helvetica /LAAAAA+Helvetica findfont ct_VMDictPut/BRDZCG+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [11.599 0 0 -11.599 0 0 ]msf91.814 222.389 mo(10)[6.44904 0 ]xsh%ADOBeginSubsetFont: NAAAAA+Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /NAAAAA+Symbol def/FontInfo 6 dict dup begin/Notice (URW Software, Copyright 2015 by URW) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /minus putdef/UniqueID 5021339 def/FontBBox {0 0 608 688} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-250 -250 1100 1100] def/StdHW [56] def/StdVW [53] def/StemSnapH [38 56] def/StemSnapV [53 56] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/minus <1C60D8A8C9B79676F49142DE56346D1DA3B82A9483D89BD7DD> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/BRDZCH+Symbol /NAAAAA+Symbol findfont ct_VMDictPut/BRDZCH+Symbol*1 [45{/.notdef}rp /minus 210{/.notdef}rp]BRDZCH+Symbol nfBRDZCH+Symbol*1 [11.599 0 0 -11.599 0 0 ]msf85.574 222.389 mo(-)shBRDZCG+Helvetica*1 [11.599 0 0 -11.599 0 0 ]msf174.714 222.389 mo(0)sh254.94 222.389 mo(10)[6.44904 0 ]xsh336.948 222.389 mo(20)[6.44904 0 ]xsh419.848 222.389 mo(30)[6.44904 0 ]xsh501.857 222.389 mo(40)[6.44904 0 ]xsh.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
54.784 6.52484 mo
550.259 6.52484 li
@
96.073 12.687 mo
96.073 6.5249 li
@
112.589 9.6059 mo
112.589 6.5249 li
@
129.105 9.6059 mo
129.105 6.5249 li
@
145.621 9.6059 mo
145.621 6.5249 li
@
162.137 9.6059 mo
162.137 6.5249 li
@
178.652 12.687 mo
178.652 6.5249 li
@
195.168 9.6059 mo
195.168 6.5249 li
@
211.684 9.6059 mo
211.684 6.5249 li
@
228.2 9.6059 mo
228.2 6.5249 li
@
244.716 9.6059 mo
244.716 6.5249 li
@
261.232 12.687 mo
261.232 6.5249 li
@
277.748 9.6059 mo
277.748 6.5249 li
@
294.263 9.6059 mo
294.263 6.5249 li
@
310.779 9.6059 mo
310.779 6.5249 li
@
327.295 9.6059 mo
327.295 6.5249 li
@
343.811 12.687 mo
343.811 6.5249 li
@
360.327 9.6059 mo
360.327 6.5249 li
@
376.843 9.6059 mo
376.843 6.5249 li
@
392.984 9.60583 mo
392.984 6.52489 li
393.734 6.52489 li
393.734 9.60583 li
392.984 9.60583 li
f
409.499 9.60583 mo
409.499 6.52489 li
410.249 6.52489 li
410.249 9.60583 li
409.499 9.60583 li
f
426.015 12.687 mo
426.015 6.52489 li
426.765 6.52489 li
426.765 12.687 li
426.015 12.687 li
f
442.531 9.60583 mo
442.531 6.52489 li
443.281 6.52489 li
443.281 9.60583 li
442.531 9.60583 li
f
459.047 9.60583 mo
459.047 6.52489 li
459.797 6.52489 li
459.797 9.60583 li
459.047 9.60583 li
f
475.563 9.60583 mo
475.563 6.52489 li
476.313 6.52489 li
476.313 9.60583 li
475.563 9.60583 li
f
492.079 9.60583 mo
492.079 6.52489 li
492.829 6.52489 li
492.829 9.60583 li
492.079 9.60583 li
f
508.97 12.687 mo
508.97 6.5249 li
@
96.073 12.687 mo
96.073 6.5249 li
@
79.557 9.6059 mo
79.557 6.5249 li
@
63.041 9.6059 mo
63.041 6.5249 li
@
508.97 12.687 mo
508.97 6.5249 li
@
525.485 9.6059 mo
525.485 6.5249 li
@
542.001 9.6059 mo
542.001 6.5249 li
@
54.784 211.94 mo
54.784 6.52484 li
@
69.6479 200.936 mo
54.7839 200.936 li
@
62.2159 192.319 mo
54.7839 192.319 li
@
62.2159 183.702 mo
54.7839 183.702 li
@
62.2159 175.086 mo
54.7839 175.086 li
@
69.6479 166.469 mo
54.7839 166.469 li
@
62.2159 157.852 mo
54.7839 157.852 li
@
62.2159 149.235 mo
54.7839 149.235 li
@
62.2159 140.619 mo
54.7839 140.619 li
@
69.6479 132.002 mo
54.7839 132.002 li
@
62.2159 123.385 mo
54.7839 123.385 li
@
62.2159 114.769 mo
54.7839 114.769 li
@
62.2159 106.152 mo
54.7839 106.152 li
@
69.6479 97.5349 mo
54.7839 97.5349 li
@
62.2159 88.9179 mo
54.7839 88.9179 li
@
62.2159 80.3019 mo
54.7839 80.3019 li
@
62.2159 71.6849 mo
54.7839 71.6849 li
@
69.6479 63.0679 mo
54.7839 63.0679 li
@
62.2159 54.4518 mo
54.7839 54.4518 li
@
62.2159 45.8349 mo
54.7839 45.8349 li
@
62.2159 37.218 mo
54.7839 37.218 li
@
69.6479 28.6019 mo
54.7839 28.6019 li
@
69.6479 200.936 mo
54.7839 200.936 li
@
62.2159 209.552 mo
54.7839 209.552 li
@
69.6479 28.6019 mo
54.7839 28.6019 li
@
62.2159 19.9849 mo
54.7839 19.9849 li
@
62.2159 11.3679 mo
54.7839 11.3679 li
@
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCG+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-/six <1C60D8A8C9B7EF32A838F0ADC5809D1051CBAF4235F657A8DFAD4317EA6C52EB7EB3ACF1708BE6AD44CE989348FD891BC553862F560166CA38E797A65620D289858B0DD22F79090207E768D4C70027C3229CEED99618D7117312DE7309DBB76DDF9190B7F9AA70A028A2637D407660B2EF312B777570A949F3AECA772467E2C7D01ABC39DC01> |-/eight <1C60D8A8C9B7EF32A838F0A20A38277E49EAB96CCD97B318F8850252701629D74DBF8915D878A90763D637B88614FFA6CEDBF4E3ABAFF6CCF7FE1EACFE86EC7FDEDB744582108C2EFE2FB8173593E20EB14533CF6F34030FF266F8E3707BEE11F14AF65C5AA8BC3E0150FCE1785675D2803E7FCFB499073D9A7F2FDA7A12FF9BA7E841A9AE7BF9EEFA9A69FF7592679D56D39522B7FB45CA78662CD35FFC691C277C9ABFDF1D4705BD2157CEEAB1997EBB62466364A838D87ADFCD65900F0BD58A8FF1ADBB5565> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCG+Helvetica /Encoding getdup 46 /period putdup 54 /six putdup 56 /eight putpop%ADOEndSubsetFont
/BRDZCG+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /.notdef /six /.notdef /eight 199{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [11.599 0 0 -11.599 0 0 ]msf45.461 204.561 mo(0)sh29.416 170.688 mo(0.02)sh29.416 135.923 mo(0.04)sh29.416 101.158 mo(0.06)sh29.416 67.285 mo(0.08)sh37.439 32.52 mo(0.1)shgsave
9.15527e-05 242 mo
567 242 li
567 0 li
9.15527e-05 0 li
9.15527e-05 242 li
clp
550.259 211.94 mo
550.259 6.52484 li
@
535.395 200.936 mo
550.259 200.936 li
@
542.827 192.319 mo
550.259 192.319 li
@
542.827 183.702 mo
550.259 183.702 li
@
542.827 175.086 mo
550.259 175.086 li
@
535.395 166.469 mo
550.259 166.469 li
@
542.827 157.852 mo
550.259 157.852 li
@
542.827 149.235 mo
550.259 149.235 li
@
542.827 140.619 mo
550.259 140.619 li
@
535.395 132.002 mo
550.259 132.002 li
@
542.827 123.385 mo
550.259 123.385 li
@
542.827 114.769 mo
550.259 114.769 li
@
542.827 106.152 mo
550.259 106.152 li
@
535.395 97.5349 mo
550.259 97.5349 li
@
542.827 88.9179 mo
550.259 88.9179 li
@
542.827 80.3019 mo
550.259 80.3019 li
@
542.827 71.6849 mo
550.259 71.6849 li
@
535.395 63.0679 mo
550.259 63.0679 li
@
542.827 54.4518 mo
550.259 54.4518 li
@
542.827 45.8349 mo
550.259 45.8349 li
@
542.827 37.218 mo
550.259 37.218 li
@
535.395 28.6019 mo
550.259 28.6019 li
@
535.395 200.936 mo
550.259 200.936 li
@
542.827 209.552 mo
550.259 209.552 li
@
535.395 28.6019 mo
550.259 28.6019 li
@
542.827 19.9849 mo
550.259 19.9849 li
@
542.827 11.3679 mo
550.259 11.3679 li
@
228.2 200.923 mo
244.716 200.923 li
252.974 200.802 li
261.232 200.643 li
269.49 200.266 li
277.748 199.682 li
283.663 198.792 li
286.005 198.331 li
291.939 196.946 li
294.263 196.214 li
298.736 194.359 li
302.521 192.514 li
308.78 189.226 li
310.779 187.939 li
314.698 185.022 li
317.399 182.67 li
319.037 181.05 li
322.054 177.643 li
325.365 173.392 li
327.295 170.743 li
330.265 166.346 li
335.553 157.965 li
342.485 147.161 li
343.811 144.834 li
345.585 141.422 li
350.806 130.413 li
352.069 127.846 li
357.276 117.811 li
360.327 112.111 li
365.512 102.407 li
367.739 98.5469 li
368.585 97.1909 li
370.68 94.1509 li
376.843 86.2989 li
379.527 82.4109 li
382.138 78.588 li
383.758 76.576 li
385.101 75.2859 li
386.454 74.4129 li
393.359 72.937 li
396.219 71.8689 li
399.081 70.8229 li
400.761 70.5259 li
401.616 70.5279 li
403.581 70.8849 li
405.984 71.822 li
408.683 73.3729 li
409.874 74.1789 li
412.611 76.3059 li
414.845 78.39 li
417.11 80.8649 li
418.132 82.113 li
420.109 84.8609 li
426.39 95.086 li
434.648 108.156 li
440.541 117.866 li
442.906 121.883 li
451.164 136.523 li
454.825 142.449 li
459.422 149.544 li
465.445 158.759 li
467.68 161.786 li
469.989 164.452 li
475.938 170.39 li
483.472 178.402 li
484.196 179.043 li
486.672 180.905 li
492.454 184.482 li
500.712 190.02 li
504.536 191.956 li
508.97 193.755 li
512.7 194.903 li
517.227 195.982 li
525.485 197.504 li
533.743 198.939 li
542.001 199.706 li
550.259 200.145 li
@
226.061 200.923 mo
226.061 198.071 230.339 198.071 230.339 200.923 cv
230.339 203.776 226.061 203.776 226.061 200.923 cv
f
234.319 200.923 mo
234.319 198.071 238.597 198.071 238.597 200.923 cv
238.597 203.776 234.319 203.776 234.319 200.923 cv
f
242.576 200.923 mo
242.576 198.071 246.855 198.071 246.855 200.923 cv
246.855 203.776 242.576 203.776 242.576 200.923 cv
f
250.834 200.802 mo
250.834 197.949 255.113 197.949 255.113 200.802 cv
255.113 203.654 250.834 203.654 250.834 200.802 cv
f
259.092 200.643 mo
259.092 197.791 263.371 197.791 263.371 200.643 cv
263.371 203.496 259.092 203.496 259.092 200.643 cv
f
267.35 200.266 mo
267.35 197.414 271.629 197.414 271.629 200.266 cv
271.629 203.119 267.35 203.119 267.35 200.266 cv
f
275.608 199.682 mo
275.608 196.829 279.887 196.829 279.887 199.682 cv
279.887 202.534 275.608 202.534 275.608 199.682 cv
f
283.866 198.331 mo
283.866 195.479 288.145 195.479 288.145 198.331 cv
288.145 201.184 283.866 201.184 283.866 198.331 cv
f
292.124 196.214 mo
292.124 193.361 296.403 193.361 296.403 196.214 cv
296.403 199.066 292.124 199.066 292.124 196.214 cv
f
300.382 192.514 mo
300.382 189.662 304.661 189.662 304.661 192.514 cv
304.661 195.366 300.382 195.366 300.382 192.514 cv
f
308.64 187.939 mo
308.64 185.086 312.919 185.086 312.919 187.939 cv
312.919 190.791 308.64 190.791 308.64 187.939 cv
f
316.898 181.05 mo
316.898 178.198 321.177 178.198 321.177 181.05 cv
321.177 183.903 316.898 183.903 316.898 181.05 cv
f
325.156 170.743 mo
325.156 167.891 329.434 167.891 329.434 170.743 cv
329.434 173.595 325.156 173.595 325.156 170.743 cv
f
333.414 157.965 mo
333.414 155.112 337.692 155.112 337.692 157.965 cv
337.692 160.818 333.414 160.818 333.414 157.965 cv
f
341.672 144.834 mo
341.672 141.982 345.95 141.982 345.95 144.834 cv
345.95 147.687 341.672 147.687 341.672 144.834 cv
f
349.93 127.846 mo
349.93 124.993 354.208 124.993 354.208 127.846 cv
354.208 130.698 349.93 130.698 349.93 127.846 cv
f
358.187 112.111 mo
358.187 109.258 362.466 109.258 362.466 112.111 cv
362.466 114.963 358.187 114.963 358.187 112.111 cv
f
366.445 97.191 mo
366.445 94.3391 370.724 94.3391 370.724 97.191 cv
370.724 100.043 366.445 100.043 366.445 97.191 cv
f
374.703 86.299 mo
374.703 83.4471 378.982 83.4471 378.982 86.299 cv
378.982 89.152 374.703 89.152 374.703 86.299 cv
f
382.961 75.286 mo
382.961 72.434 387.24 72.434 387.24 75.286 cv
387.24 78.139 382.961 78.139 382.961 75.286 cv
f
391.219 72.937 mo
391.219 70.0851 395.498 70.0851 395.498 72.937 cv
395.498 75.79 391.219 75.79 391.219 72.937 cv
f
399.477 70.528 mo
399.477 67.675 403.756 67.675 403.756 70.528 cv
403.756 73.38 399.477 73.38 399.477 70.528 cv
f
407.735 74.179 mo
407.735 71.326 412.014 71.326 412.014 74.179 cv
412.014 77.031 407.735 77.031 407.735 74.179 cv
f
415.993 82.113 mo
415.993 79.261 420.272 79.261 420.272 82.113 cv
420.272 84.966 415.993 84.966 415.993 82.113 cv
f
424.251 95.086 mo
424.251 92.233 428.53 92.233 428.53 95.086 cv
428.53 97.938 424.251 97.938 424.251 95.086 cv
f
432.509 108.156 mo
432.509 105.303 436.788 105.303 436.788 108.156 cv
436.788 111.008 432.509 111.008 432.509 108.156 cv
f
440.767 121.883 mo
440.767 119.03 445.045 119.03 445.045 121.883 cv
445.045 124.735 440.767 124.735 440.767 121.883 cv
f
449.025 136.523 mo
449.025 133.67 453.303 133.67 453.303 136.523 cv
453.303 139.375 449.025 139.375 449.025 136.523 cv
f
457.283 149.544 mo
457.283 146.691 461.561 146.691 461.561 149.544 cv
461.561 152.396 457.283 152.396 457.283 149.544 cv
f
465.541 161.786 mo
465.541 158.934 469.819 158.934 469.819 161.786 cv
469.819 164.639 465.541 164.639 465.541 161.786 cv
f
473.798 170.39 mo
473.798 167.537 478.077 167.537 478.077 170.39 cv
478.077 173.243 473.798 173.243 473.798 170.39 cv
f
482.056 179.043 mo
482.056 176.19 486.335 176.19 486.335 179.043 cv
486.335 181.895 482.056 181.895 482.056 179.043 cv
f
490.314 184.482 mo
490.314 181.63 494.593 181.63 494.593 184.482 cv
494.593 187.335 490.314 187.335 490.314 184.482 cv
f
498.572 190.02 mo
498.572 187.167 502.851 187.167 502.851 190.02 cv
502.851 192.872 498.572 192.872 498.572 190.02 cv
f
506.83 193.755 mo
506.83 190.903 511.109 190.903 511.109 193.755 cv
511.109 196.608 506.83 196.608 506.83 193.755 cv
f
515.088 195.982 mo
515.088 193.13 519.367 193.13 519.367 195.982 cv
519.367 198.835 515.088 198.835 515.088 195.982 cv
f
523.346 197.504 mo
523.346 194.651 527.625 194.651 527.625 197.504 cv
527.625 200.356 523.346 200.356 523.346 197.504 cv
f
531.604 198.939 mo
531.604 196.087 535.883 196.087 535.883 198.939 cv
535.883 201.792 531.604 201.792 531.604 198.939 cv
f
539.862 199.706 mo
539.862 196.854 544.141 196.854 544.141 199.706 cv
544.141 202.559 539.862 202.559 539.862 199.706 cv
f
548.12 200.145 mo
548.12 197.292 552.398 197.292 552.398 200.145 cv
552.398 202.997 548.12 202.997 548.12 200.145 cv
f
203.426 200.923 mo
211.684 200.869 li
219.942 200.786 li
228.2 200.424 li
235.353 199.745 li
236.458 199.589 li
242.05 198.598 li
244.716 197.948 li
250.289 196.277 li
252.974 195.074 li
256.194 193.101 li
259.746 190.407 li
261.232 189.15 li
265.104 185.566 li
268.023 182.46 li
269.49 180.725 li
272.425 176.928 li
275.046 173.163 li
277.748 168.844 li
280.319 164.255 li
283.356 158.306 li
286.005 152.767 li
288.869 146.383 li
294.263 133.516 li
298.803 122.379 li
302.521 112.924 li
305.503 104.85 li
309.018 95.2089 li
310.779 90.728 li
313.585 84.1039 li
315.977 78.8289 li
318.42 73.8609 li
319.037 72.6809 li
321.806 67.7289 li
324.217 63.8559 li
326.762 60.2139 li
327.295 59.5079 li
330.477 55.53 li
332.318 53.5479 li
333.974 52.103 li
335.553 51.113 li
337.319 50.4859 li
339.23 50.29 li
341.42 50.5749 li
343.811 51.3619 li
345.91 52.4639 li
348.312 54.249 li
350.956 56.7429 li
352.069 57.926 li
354.853 61.2609 li
357.306 64.6709 li
359.922 68.7669 li
360.327 69.4409 li
362.663 73.6219 li
365.253 78.7329 li
368.585 85.713 li
376.843 104.511 li
385.101 122.94 li
392.523 139.538 li
393.359 141.231 li
396 146.211 li
399.882 152.87 li
401.616 155.716 li
405.894 162.478 li
409.244 167.348 li
409.874 168.212 li
413.092 172.395 li
416.236 176.091 li
418.132 178.104 li
420.991 180.722 li
426.39 184.987 li
433.366 190.679 li
434.648 191.493 li
437.268 192.732 li
442.906 194.55 li
449.603 196.74 li
451.164 197.155 li
457.21 198.294 li
459.422 198.621 li
467.68 199.594 li
475.938 200.212 li
484.196 200.487 li
492.454 200.765 li
500.712 200.794 li
508.97 200.873 li
517.227 200.902 li
525.485 200.931 li
533.743 200.931 li
542.001 200.927 li
@
201.287 203.062 mo
205.566 203.062 li
205.566 198.784 li
201.287 198.784 li
cp
f
209.545 203.008 mo
213.824 203.008 li
213.824 198.73 li
209.545 198.73 li
cp
f
217.803 202.925 mo
222.082 202.925 li
222.082 198.647 li
217.803 198.647 li
cp
f
226.061 202.564 mo
230.34 202.564 li
230.34 198.285 li
226.061 198.285 li
cp
f
234.319 201.729 mo
238.598 201.729 li
238.598 197.45 li
234.319 197.45 li
cp
f
242.576 200.088 mo
246.854 200.088 li
246.854 195.809 li
242.576 195.809 li
cp
f
250.834 197.213 mo
255.113 197.213 li
255.113 192.934 li
250.834 192.934 li
cp
f
259.092 191.289 mo
263.371 191.289 li
263.371 187.01 li
259.092 187.01 li
cp
f
267.35 182.864 mo
271.629 182.864 li
271.629 178.585 li
267.35 178.585 li
cp
f
275.608 170.983 mo
279.887 170.983 li
279.887 166.704 li
275.608 166.704 li
cp
f
283.866 154.906 mo
288.145 154.906 li
288.145 150.627 li
283.866 150.627 li
cp
f
292.124 135.656 mo
296.403 135.656 li
296.403 131.377 li
292.124 131.377 li
cp
f
300.382 115.063 mo
304.661 115.063 li
304.661 110.784 li
300.382 110.784 li
cp
f
308.64 92.867 mo
312.919 92.867 li
312.919 88.5885 li
308.64 88.5885 li
cp
f
316.898 74.821 mo
321.177 74.821 li
321.177 70.5421 li
316.898 70.5421 li
cp
f
325.156 61.648 mo
329.435 61.648 li
329.435 57.3691 li
325.156 57.3691 li
cp
f
333.414 53.252 mo
337.693 53.252 li
337.693 48.9734 li
333.414 48.9734 li
cp
f
341.672 53.501 mo
345.951 53.501 li
345.951 49.2225 li
341.672 49.2225 li
cp
f
349.93 60.065 mo
354.208 60.065 li
354.208 55.7864 li
349.93 55.7864 li
cp
f
358.187 71.581 mo
362.466 71.581 li
362.466 67.3025 li
358.187 67.3025 li
cp
f
366.445 87.853 mo
370.724 87.853 li
370.724 83.5741 li
366.445 83.5741 li
cp
f
374.703 106.651 mo
378.982 106.651 li
378.982 102.372 li
374.703 102.372 li
cp
f
382.961 125.079 mo
387.24 125.079 li
387.24 120.8 li
382.961 120.8 li
cp
f
391.219 143.37 mo
395.497 143.37 li
395.497 139.091 li
391.219 139.091 li
cp
f
399.477 157.856 mo
403.756 157.856 li
403.756 153.577 li
399.477 153.577 li
cp
f
407.735 170.352 mo
412.014 170.352 li
412.014 166.073 li
407.735 166.073 li
cp
f
415.993 180.243 mo
420.272 180.243 li
420.272 175.965 li
415.993 175.965 li
cp
f
424.251 187.127 mo
428.529 187.127 li
428.529 182.849 li
424.251 182.849 li
cp
f
432.509 193.632 mo
436.788 193.632 li
436.788 189.354 li
432.509 189.354 li
cp
f
440.767 196.69 mo
445.046 196.69 li
445.046 192.411 li
440.767 192.411 li
cp
f
449.025 199.295 mo
453.304 199.295 li
453.304 195.016 li
449.025 195.016 li
cp
f
457.283 200.761 mo
461.562 200.761 li
461.562 196.482 li
457.283 196.482 li
cp
f
465.541 201.733 mo
469.82 201.733 li
469.82 197.454 li
465.541 197.454 li
cp
f
473.798 202.352 mo
478.077 202.352 li
478.077 198.073 li
473.798 198.073 li
cp
f
482.056 202.626 mo
486.335 202.626 li
486.335 198.347 li
482.056 198.347 li
cp
f
490.314 202.904 mo
494.593 202.904 li
494.593 198.626 li
490.314 198.626 li
cp
f
498.572 202.934 mo
502.851 202.934 li
502.851 198.655 li
498.572 198.655 li
cp
f
506.83 203.012 mo
511.109 203.012 li
511.109 198.734 li
506.83 198.734 li
cp
f
515.088 203.041 mo
519.367 203.041 li
519.367 198.762 li
515.088 198.762 li
cp
f
523.346 203.071 mo
527.625 203.071 li
527.625 198.792 li
523.346 198.792 li
cp
f
531.604 203.071 mo
535.883 203.071 li
535.883 198.792 li
531.604 198.792 li
cp
f
539.862 203.066 mo
544.141 203.066 li
544.141 198.788 li
539.862 198.788 li
cp
f
178.652 200.927 mo
186.91 200.915 li
195.168 200.851 li
203.426 200.702 li
211.684 200.304 li
218.357 199.552 li
219.942 199.248 li
224.295 198.127 li
228.2 196.732 li
232.98 194.558 li
235.902 192.803 li
236.458 192.41 li
239.475 190.019 li
242.278 187.392 li
244.716 184.737 li
247.634 181.101 li
250.298 177.348 li
252.974 173.129 li
255.822 168.148 li
258.302 163.386 li
260.84 158.054 li
261.232 157.186 li
263.543 151.752 li
266.204 144.966 li
269.49 136.216 li
273.262 125.883 li
277.748 113.001 li
280.654 104.085 li
284.418 92.3249 li
286.005 87.6729 li
289.681 77.5259 li
291.845 71.94 li
294.263 66.2259 li
296.596 61.2839 li
298.967 56.7509 li
301.494 52.4219 li
302.521 50.801 li
305.746 46.0009 li
307.523 43.6999 li
309.074 42.0449 li
310.779 40.7299 li
312.729 39.8969 li
314.545 39.6609 li
316.477 39.9119 li
318.597 40.7029 li
319.037 40.926 li
320.889 42.1629 li
322.892 44.019 li
325.24 46.7529 li
327.295 49.52 li
329.498 52.8899 li
331.964 57.2099 li
334.703 62.5699 li
335.553 64.3299 li
337.407 68.4229 li
343.811 84.192 li
352.069 104.968 li
360.327 125.679 li
365.285 137.406 li
368.585 144.68 li
371.732 151.056 li
374.961 157.11 li
376.843 160.419 li
379.974 165.58 li
383.062 170.229 li
385.101 173.039 li
388.252 176.961 li
391.568 180.576 li
393.359 182.332 li
396.45 184.984 li
401.616 188.655 li
405.96 191.372 li
409.874 193.434 li
414.403 195.303 li
418.132 196.508 li
423.914 197.839 li
426.39 198.286 li
434.648 199.449 li
442.906 200.174 li
451.164 200.526 li
459.422 200.704 li
467.68 200.84 li
475.938 200.879 li
484.196 200.9 li
492.454 200.925 li
500.712 200.929 li
508.97 200.931 li
@
178.652 204.35 mo
177.884 201.985 li
175.397 201.985 li
177.409 200.523 li
176.64 198.158 li
178.652 199.62 li
180.664 198.158 li
179.896 200.523 li
181.908 201.985 li
179.421 201.985 li
f
186.91 204.337 mo
186.142 201.973 li
183.655 201.973 li
185.667 200.511 li
184.898 198.145 li
186.91 199.607 li
188.922 198.145 li
188.154 200.511 li
190.166 201.973 li
187.679 201.973 li
f
195.168 204.273 mo
194.4 201.908 li
191.913 201.908 li
193.925 200.446 li
193.156 198.081 li
195.168 199.543 li
197.18 198.081 li
196.412 200.446 li
198.424 201.908 li
195.937 201.908 li
f
203.426 204.125 mo
202.658 201.759 li
200.171 201.759 li
202.183 200.298 li
201.414 197.932 li
203.426 199.394 li
205.438 197.932 li
204.67 200.298 li
206.682 201.759 li
204.195 201.759 li
f
211.684 203.727 mo
210.916 201.362 li
208.429 201.362 li
210.441 199.9 li
209.672 197.535 li
211.684 198.997 li
213.696 197.535 li
212.928 199.9 li
214.939 201.362 li
212.453 201.362 li
f
219.942 202.671 mo
219.174 200.306 li
216.687 200.306 li
218.699 198.845 li
217.93 196.479 li
219.942 197.941 li
221.954 196.479 li
221.186 198.845 li
223.197 200.306 li
220.711 200.306 li
f
228.2 200.155 mo
227.431 197.789 li
224.945 197.789 li
226.957 196.328 li
226.188 193.962 li
228.2 195.424 li
230.212 193.962 li
229.443 196.328 li
231.455 197.789 li
228.968 197.789 li
f
236.458 195.833 mo
235.689 193.468 li
233.203 193.468 li
235.214 192.006 li
234.446 189.641 li
236.458 191.102 li
238.47 189.641 li
237.701 192.006 li
239.713 193.468 li
237.226 193.468 li
f
244.716 188.16 mo
243.947 185.795 li
241.46 185.795 li
243.472 184.333 li
242.704 181.968 li
244.716 183.43 li
246.728 181.968 li
245.959 184.333 li
247.971 185.795 li
245.484 185.795 li
f
252.974 176.552 mo
252.205 174.187 li
249.718 174.187 li
251.73 172.725 li
250.962 170.36 li
252.974 171.822 li
254.986 170.36 li
254.217 172.725 li
256.229 174.187 li
253.742 174.187 li
f
261.232 160.609 mo
260.463 158.243 li
257.976 158.243 li
259.988 156.782 li
259.22 154.416 li
261.232 155.878 li
263.244 154.416 li
262.475 156.782 li
264.487 158.243 li
262 158.243 li
f
269.49 139.639 mo
268.721 137.274 li
266.234 137.274 li
268.246 135.812 li
267.478 133.447 li
269.49 134.909 li
271.502 133.447 li
270.733 135.812 li
272.745 137.274 li
270.258 137.274 li
f
277.748 116.424 mo
276.979 114.059 li
274.492 114.059 li
276.504 112.597 li
275.736 110.232 li
277.748 111.694 li
279.759 110.232 li
278.991 112.597 li
281.003 114.059 li
278.516 114.059 li
f
286.005 91.096 mo
285.237 88.731 li
282.75 88.731 li
284.762 87.269 li
283.993 84.904 li
286.005 86.366 li
288.017 84.904 li
287.249 87.269 li
289.261 88.731 li
286.774 88.731 li
f
294.263 69.649 mo
293.495 67.2831 li
291.008 67.2831 li
293.02 65.8221 li
292.251 63.4561 li
294.263 64.9181 li
296.275 63.4561 li
295.507 65.8221 li
297.519 67.2831 li
295.032 67.2831 li
f
302.521 54.224 mo
301.753 51.859 li
299.266 51.859 li
301.278 50.397 li
300.509 48.032 li
302.521 49.494 li
304.533 48.032 li
303.765 50.397 li
305.777 51.859 li
303.29 51.859 li
f
310.779 44.153 mo
310.011 41.787 li
307.524 41.787 li
309.536 40.326 li
308.767 37.96 li
310.779 39.422 li
312.791 37.96 li
312.023 40.326 li
314.035 41.787 li
311.548 41.787 li
f
319.037 44.349 mo
318.269 41.984 li
315.782 41.984 li
317.794 40.522 li
317.025 38.157 li
319.037 39.619 li
321.049 38.157 li
320.281 40.522 li
322.293 41.984 li
319.806 41.984 li
f
327.295 52.943 mo
326.527 50.578 li
324.04 50.578 li
326.052 49.116 li
325.283 46.751 li
327.295 48.213 li
329.307 46.751 li
328.539 49.116 li
330.55 50.578 li
328.064 50.578 li
f
335.553 67.753 mo
334.785 65.388 li
332.298 65.388 li
334.31 63.926 li
333.541 61.561 li
335.553 63.022 li
337.565 61.561 li
336.797 63.926 li
338.808 65.388 li
336.322 65.388 li
f
343.811 87.615 mo
343.042 85.249 li
340.556 85.249 li
342.568 83.788 li
341.799 81.422 li
343.811 82.884 li
345.823 81.422 li
345.054 83.788 li
347.066 85.249 li
344.579 85.249 li
f
352.069 108.391 mo
351.3 106.026 li
348.814 106.026 li
350.825 104.564 li
350.057 102.199 li
352.069 103.661 li
354.081 102.199 li
353.312 104.564 li
355.324 106.026 li
352.837 106.026 li
f
360.327 129.102 mo
359.558 126.737 li
357.071 126.737 li
359.083 125.275 li
358.315 122.91 li
360.327 124.372 li
362.339 122.91 li
361.57 125.275 li
363.582 126.737 li
361.095 126.737 li
f
368.585 148.103 mo
367.816 145.737 li
365.329 145.737 li
367.341 144.276 li
366.573 141.911 li
368.585 143.373 li
370.597 141.911 li
369.828 144.276 li
371.84 145.737 li
369.353 145.737 li
f
376.843 163.842 mo
376.074 161.477 li
373.587 161.477 li
375.599 160.015 li
374.831 157.65 li
376.843 159.111 li
378.855 157.65 li
378.086 160.015 li
380.098 161.477 li
377.611 161.477 li
f
385.101 176.461 mo
384.332 174.096 li
381.845 174.096 li
383.857 172.634 li
383.089 170.269 li
385.101 171.731 li
387.113 170.269 li
386.344 172.634 li
388.356 174.096 li
385.869 174.096 li
f
393.359 185.755 mo
392.59 183.39 li
390.103 183.39 li
392.115 181.928 li
391.347 179.562 li
393.359 181.025 li
395.37 179.562 li
394.602 181.928 li
396.614 183.39 li
394.127 183.39 li
f
401.616 192.078 mo
400.848 189.713 li
398.361 189.713 li
400.373 188.251 li
399.604 185.886 li
401.616 187.348 li
403.628 185.886 li
402.86 188.251 li
404.872 189.713 li
402.385 189.713 li
f
409.874 196.857 mo
409.106 194.492 li
406.619 194.492 li
408.631 193.03 li
407.862 190.665 li
409.874 192.127 li
411.886 190.665 li
411.118 193.03 li
413.13 194.492 li
410.643 194.492 li
f
418.132 199.931 mo
417.364 197.566 li
414.877 197.566 li
416.889 196.104 li
416.12 193.739 li
418.132 195.2 li
420.144 193.739 li
419.376 196.104 li
421.388 197.566 li
418.901 197.566 li
f
426.39 201.709 mo
425.622 199.344 li
423.135 199.344 li
425.147 197.882 li
424.378 195.517 li
426.39 196.979 li
428.402 195.517 li
427.634 197.882 li
429.646 199.344 li
427.159 199.344 li
f
434.648 202.872 mo
433.88 200.507 li
431.393 200.507 li
433.405 199.045 li
432.636 196.68 li
434.648 198.142 li
436.66 196.68 li
435.892 199.045 li
437.904 200.507 li
435.417 200.507 li
f
442.906 203.597 mo
442.138 201.232 li
439.651 201.232 li
441.663 199.77 li
440.894 197.404 li
442.906 198.866 li
444.918 197.404 li
444.15 199.77 li
446.161 201.232 li
443.675 201.232 li
f
451.164 203.948 mo
450.396 201.583 li
447.909 201.583 li
449.921 200.121 li
449.152 197.756 li
451.164 199.218 li
453.176 197.756 li
452.407 200.121 li
454.419 201.583 li
451.932 201.583 li
f
459.422 204.127 mo
458.653 201.761 li
456.167 201.761 li
458.178 200.3 li
457.41 197.934 li
459.422 199.396 li
461.434 197.934 li
460.665 200.3 li
462.677 201.761 li
460.19 201.761 li
f
467.68 204.263 mo
466.911 201.898 li
464.424 201.898 li
466.436 200.436 li
465.668 198.071 li
467.68 199.533 li
469.692 198.071 li
468.923 200.436 li
470.935 201.898 li
468.448 201.898 li
f
475.938 204.302 mo
475.169 201.937 li
472.682 201.937 li
474.694 200.475 li
473.926 198.11 li
475.938 199.572 li
477.95 198.11 li
477.181 200.475 li
479.193 201.937 li
476.706 201.937 li
f
484.196 204.323 mo
483.427 201.958 li
480.94 201.958 li
482.952 200.496 li
482.184 198.131 li
484.196 199.593 li
486.208 198.131 li
485.439 200.496 li
487.451 201.958 li
484.964 201.958 li
f
492.454 204.348 mo
491.685 201.983 li
489.198 201.983 li
491.21 200.521 li
490.442 198.156 li
492.454 199.618 li
494.466 198.156 li
493.697 200.521 li
495.709 201.983 li
493.222 201.983 li
f
500.712 204.352 mo
499.943 201.987 li
497.456 201.987 li
499.468 200.525 li
498.7 198.16 li
500.712 199.622 li
502.724 198.16 li
501.955 200.525 li
503.967 201.987 li
501.48 201.987 li
f
508.97 204.354 mo
508.201 201.989 li
505.714 201.989 li
507.726 200.527 li
506.958 198.162 li
508.97 199.624 li
510.981 198.162 li
510.213 200.527 li
512.225 201.989 li
509.738 201.989 li
f
153.879 200.933 mo
162.137 200.927 li
170.394 200.913 li
178.652 200.854 li
186.91 200.673 li
195.168 200.341 li
201.288 199.659 li
203.426 199.283 li
208.784 198.007 li
211.684 197.037 li
216.809 194.817 li
219.942 192.99 li
223.864 190.171 li
226.354 187.986 li
228.2 186.052 li
231.042 182.522 li
233.655 178.764 li
236.458 174.223 li
239.321 169.048 li
241.92 163.864 li
244.716 157.773 li
247.205 151.836 li
250.514 143.265 li
252.974 136.593 li
256.539 126.492 li
261.232 112.471 li
264.004 103.653 li
267.627 91.9119 li
269.49 86.3139 li
271.974 79.4849 li
275.397 70.7889 li
277.748 65.103 li
282.088 54.748 li
284.202 50.165 li
286.005 46.7729 li
288.246 43.1619 li
290.256 40.3929 li
291.933 38.499 li
293.647 37.0159 li
294.263 36.6059 li
296.064 35.7599 li
297.896 35.3989 li
299.714 35.5239 li
301.607 36.1479 li
302.521 36.6249 li
304.229 37.8799 li
306.112 39.8039 li
308.391 42.7339 li
310.779 46.3079 li
312.862 49.8569 li
315.508 55.0289 li
319.037 62.6979 li
321.402 68.2969 li
327.295 83.503 li
333.982 101.172 li
335.553 105.389 li
343.811 127.885 li
347 135.582 li
350.531 143.515 li
352.069 146.818 li
356.001 154.909 li
358.893 160.41 li
360.327 162.948 li
363.34 167.87 li
366.331 172.259 li
368.585 175.254 li
371.854 179.063 li
375.888 183.075 li
376.843 183.96 li
380.551 187.155 li
384.435 190.022 li
385.101 190.464 li
389.037 192.745 li
393.359 194.732 li
398.308 196.411 li
401.616 197.29 li
408.073 198.664 li
409.874 198.963 li
418.132 199.894 li
426.39 200.385 li
434.648 200.66 li
442.906 200.806 li
451.164 200.883 li
459.422 200.911 li
467.68 200.915 li
475.938 200.931 li
484.196 200.936 li
492.454 200.936 li
500.712 200.933 li
.883909 .76556 0 0 cmyk
@
151.739 200.933 mo
151.739 198.081 156.018 198.081 156.018 200.933 cv
156.018 203.786 151.739 203.786 151.739 200.933 cv
cp
@
159.997 200.927 mo
159.997 198.075 164.276 198.075 164.276 200.927 cv
164.276 203.78 159.997 203.78 159.997 200.927 cv
cp
@
168.255 200.913 mo
168.255 198.061 172.534 198.061 172.534 200.913 cv
172.534 203.766 168.255 203.766 168.255 200.913 cv
cp
@
176.513 200.854 mo
176.513 198.002 180.792 198.002 180.792 200.854 cv
180.792 203.707 176.513 203.707 176.513 200.854 cv
cp
@
184.771 200.673 mo
184.771 197.82 189.05 197.82 189.05 200.673 cv
189.05 203.525 184.771 203.525 184.771 200.673 cv
cp
@
193.029 200.341 mo
193.029 197.488 197.308 197.488 197.308 200.341 cv
197.308 203.193 193.029 203.193 193.029 200.341 cv
cp
@
201.287 199.283 mo
201.287 196.43 205.566 196.43 205.566 199.283 cv
205.566 202.135 201.287 202.135 201.287 199.283 cv
cp
@
209.545 197.037 mo
209.545 194.185 213.823 194.185 213.823 197.037 cv
213.823 199.89 209.545 199.89 209.545 197.037 cv
cp
@
217.803 192.99 mo
217.803 190.137 222.081 190.137 222.081 192.99 cv
222.081 195.843 217.803 195.843 217.803 192.99 cv
cp
@
226.061 186.052 mo
226.061 183.199 230.339 183.199 230.339 186.052 cv
230.339 188.904 226.061 188.904 226.061 186.052 cv
cp
@
234.319 174.223 mo
234.319 171.37 238.597 171.37 238.597 174.223 cv
238.597 177.075 234.319 177.075 234.319 174.223 cv
cp
@
242.576 157.773 mo
242.576 154.921 246.855 154.921 246.855 157.773 cv
246.855 160.626 242.576 160.626 242.576 157.773 cv
cp
@
250.834 136.593 mo
250.834 133.74 255.113 133.74 255.113 136.593 cv
255.113 139.445 250.834 139.445 250.834 136.593 cv
cp
@
259.092 112.471 mo
259.092 109.618 263.371 109.618 263.371 112.471 cv
263.371 115.323 259.092 115.323 259.092 112.471 cv
cp
@
267.35 86.3139 mo
267.35 83.462 271.629 83.462 271.629 86.3139 cv
271.629 89.1669 267.35 89.1669 267.35 86.3139 cv
cp
@
275.608 65.1028 mo
275.608 62.2509 279.887 62.2509 279.887 65.1028 cv
279.887 67.9559 275.608 67.9559 275.608 65.1028 cv
cp
@
283.866 46.7729 mo
283.866 43.9199 288.145 43.9199 288.145 46.7729 cv
288.145 49.6249 283.866 49.6249 283.866 46.7729 cv
cp
@
292.124 36.6059 mo
292.124 33.7539 296.403 33.7539 296.403 36.6059 cv
296.403 39.4589 292.124 39.4589 292.124 36.6059 cv
cp
@
300.382 36.6249 mo
300.382 33.7719 304.661 33.7719 304.661 36.6249 cv
304.661 39.4769 300.382 39.4769 300.382 36.6249 cv
cp
@
308.64 46.3079 mo
308.64 43.4549 312.919 43.4549 312.919 46.3079 cv
312.919 49.1599 308.64 49.1599 308.64 46.3079 cv
cp
@
316.898 62.6979 mo
316.898 59.8459 321.177 59.8459 321.177 62.6979 cv
321.177 65.551 316.898 65.551 316.898 62.6979 cv
cp
@
325.156 83.5029 mo
325.156 80.6499 329.434 80.6499 329.434 83.5029 cv
329.434 86.3549 325.156 86.3549 325.156 83.5029 cv
cp
@
333.414 105.389 mo
333.414 102.537 337.692 102.537 337.692 105.389 cv
337.692 108.242 333.414 108.242 333.414 105.389 cv
cp
@
341.672 127.885 mo
341.672 125.032 345.95 125.032 345.95 127.885 cv
345.95 130.737 341.672 130.737 341.672 127.885 cv
cp
@
349.93 146.818 mo
349.93 143.965 354.208 143.965 354.208 146.818 cv
354.208 149.67 349.93 149.67 349.93 146.818 cv
cp
@
358.187 162.948 mo
358.187 160.095 362.466 160.095 362.466 162.948 cv
362.466 165.8 358.187 165.8 358.187 162.948 cv
cp
@
366.445 175.254 mo
366.445 172.402 370.724 172.402 370.724 175.254 cv
370.724 178.107 366.445 178.107 366.445 175.254 cv
cp
@
374.703 183.96 mo
374.703 181.108 378.982 181.108 378.982 183.96 cv
378.982 186.812 374.703 186.812 374.703 183.96 cv
cp
@
382.961 190.464 mo
382.961 187.611 387.24 187.611 387.24 190.464 cv
387.24 193.316 382.961 193.316 382.961 190.464 cv
cp
@
391.219 194.732 mo
391.219 191.879 395.498 191.879 395.498 194.732 cv
395.498 197.584 391.219 197.584 391.219 194.732 cv
cp
@
399.477 197.29 mo
399.477 194.438 403.756 194.438 403.756 197.29 cv
403.756 200.143 399.477 200.143 399.477 197.29 cv
cp
@
407.735 198.963 mo
407.735 196.111 412.014 196.111 412.014 198.963 cv
412.014 201.816 407.735 201.816 407.735 198.963 cv
cp
@
415.993 199.894 mo
415.993 197.041 420.272 197.041 420.272 199.894 cv
420.272 202.746 415.993 202.746 415.993 199.894 cv
cp
@
424.251 200.385 mo
424.251 197.533 428.53 197.533 428.53 200.385 cv
428.53 203.237 424.251 203.237 424.251 200.385 cv
cp
@
432.509 200.66 mo
432.509 197.808 436.788 197.808 436.788 200.66 cv
436.788 203.513 432.509 203.513 432.509 200.66 cv
cp
@
440.767 200.806 mo
440.767 197.954 445.045 197.954 445.045 200.806 cv
445.045 203.658 440.767 203.658 440.767 200.806 cv
cp
@
449.025 200.883 mo
449.025 198.03 453.303 198.03 453.303 200.883 cv
453.303 203.735 449.025 203.735 449.025 200.883 cv
cp
@
457.283 200.911 mo
457.283 198.059 461.561 198.059 461.561 200.911 cv
461.561 203.764 457.283 203.764 457.283 200.911 cv
cp
@
465.541 200.915 mo
465.541 198.062 469.819 198.062 469.819 200.915 cv
469.819 203.768 465.541 203.768 465.541 200.915 cv
cp
@
473.798 200.931 mo
473.798 198.079 478.077 198.079 478.077 200.931 cv
478.077 203.784 473.798 203.784 473.798 200.931 cv
cp
@
482.056 200.936 mo
482.056 198.083 486.335 198.083 486.335 200.936 cv
486.335 203.788 482.056 203.788 482.056 200.936 cv
cp
@
490.314 200.936 mo
490.314 198.083 494.593 198.083 494.593 200.936 cv
494.593 203.788 490.314 203.788 490.314 200.936 cv
cp
@
498.572 200.933 mo
498.572 198.081 502.851 198.081 502.851 200.933 cv
502.851 203.786 498.572 203.786 498.572 200.933 cv
cp
@
137.363 200.929 mo
145.621 200.913 li
153.879 200.859 li
162.137 200.755 li
170.394 200.413 li
177.373 199.793 li
178.652 199.594 li
184.081 198.442 li
186.91 197.555 li
191.575 195.645 li
195.168 193.614 li
199.113 190.729 li
201.775 188.329 li
203.426 186.577 li
206.265 183.119 li
208.712 179.698 li
211.209 175.721 li
211.684 174.904 li
214.479 169.714 li
216.921 164.66 li
219.495 158.81 li
219.942 157.74 li
222.341 151.668 li
225.139 143.97 li
228.2 134.985 li
230.785 126.885 li
236.458 108.018 li
244.013 82.6409 li
244.716 80.3409 li
249.767 63.7709 li
251.61 58.1359 li
252.974 54.2999 li
255.579 47.5639 li
257.523 42.9939 li
259.204 39.4599 li
260.913 36.3469 li
261.232 35.8268 li
263.15 33.0119 li
265.233 30.5639 li
266.959 29.0359 li
268.747 27.9509 li
269.49 27.655 li
271.27 27.3199 li
273.1 27.5079 li
274.946 28.2159 li
276.893 29.4939 li
277.748 30.2189 li
279.734 32.3679 li
281.664 35.0539 li
283.934 38.8229 li
286.005 42.6949 li
288.083 47.0229 li
290.594 52.915 li
293.495 60.394 li
294.263 62.4619 li
296.429 68.6609 li
302.521 87.4949 li
309.114 106.982 li
310.779 111.759 li
315.934 126.187 li
319.037 134.426 li
323.098 144.643 li
325.784 150.954 li
327.295 154.267 li
330.226 160.205 li
333.067 165.426 li
335.553 169.593 li
338.608 174.179 li
341.859 178.457 li
343.811 180.785 li
347.109 184.295 li
350.787 187.613 li
352.069 188.65 li
355.729 191.237 li
360.327 193.812 li
364.796 195.681 li
368.585 196.897 li
374.432 198.33 li
376.843 198.779 li
385.101 199.794 li
393.359 200.422 li
401.616 200.688 li
409.874 200.836 li
418.132 200.889 li
426.39 200.909 li
434.648 200.926 li
442.906 200.931 li
451.164 200.933 li
459.422 200.934 li
@
135.223 203.069 mo
139.501 203.069 li
139.501 198.79 li
135.223 198.79 li
cp
@
143.481 203.052 mo
147.76 203.052 li
147.76 198.773 li
143.481 198.773 li
cp
@
151.739 202.998 mo
156.017 202.998 li
156.017 198.719 li
151.739 198.719 li
cp
@
159.997 202.895 mo
164.276 202.895 li
164.276 198.616 li
159.997 198.616 li
cp
@
168.255 202.552 mo
172.533 202.552 li
172.533 198.273 li
168.255 198.273 li
cp
@
176.513 201.733 mo
180.792 201.733 li
180.792 197.454 li
176.513 197.454 li
cp
@
184.771 199.695 mo
189.049 199.695 li
189.049 195.416 li
184.771 195.416 li
cp
@
193.029 195.753 mo
197.308 195.753 li
197.308 191.474 li
193.029 191.474 li
cp
@
201.287 188.716 mo
205.565 188.716 li
205.565 184.437 li
201.287 184.437 li
cp
@
209.545 177.043 mo
213.824 177.043 li
213.824 172.764 li
209.545 172.764 li
cp
@
217.803 159.879 mo
222.081 159.879 li
222.081 155.6 li
217.803 155.6 li
cp
@
226.061 137.125 mo
230.34 137.125 li
230.34 132.846 li
226.061 132.846 li
cp
@
234.319 110.157 mo
238.597 110.157 li
238.597 105.878 li
234.319 105.878 li
cp
@
242.576 82.4809 mo
246.854 82.4809 li
246.854 78.2024 li
242.576 78.2024 li
cp
@
250.834 56.4389 mo
255.112 56.4389 li
255.112 52.16 li
250.834 52.16 li
cp
@
259.092 37.9659 mo
263.37 37.9659 li
263.37 33.6874 li
259.092 33.6874 li
cp
@
267.35 29.7939 mo
271.628 29.7939 li
271.628 25.515 li
267.35 25.515 li
cp
@
275.608 32.3588 mo
279.886 32.3588 li
279.886 28.0803 li
275.608 28.0803 li
cp
@
283.866 44.8339 mo
288.145 44.8339 li
288.145 40.5554 li
283.866 40.5554 li
cp
@
292.124 64.6019 mo
296.402 64.6019 li
296.402 60.3234 li
292.124 60.3234 li
cp
@
300.382 89.6349 mo
304.66 89.6349 li
304.66 85.356 li
300.382 85.356 li
cp
@
308.64 113.899 mo
312.918 113.899 li
312.918 109.62 li
308.64 109.62 li
cp
@
316.898 136.565 mo
321.177 136.565 li
321.177 132.286 li
316.898 132.286 li
cp
@
325.156 156.406 mo
329.435 156.406 li
329.435 152.127 li
325.156 152.127 li
cp
@
333.414 171.732 mo
337.693 171.732 li
337.693 167.453 li
333.414 167.453 li
cp
@
341.672 182.924 mo
345.951 182.924 li
345.951 178.645 li
341.672 178.645 li
cp
@
349.93 190.79 mo
354.208 190.79 li
354.208 186.511 li
349.93 186.511 li
cp
@
358.187 195.952 mo
362.465 195.952 li
362.465 191.673 li
358.187 191.673 li
cp
@
366.445 199.036 mo
370.724 199.036 li
370.724 194.757 li
366.445 194.757 li
cp
@
374.703 200.919 mo
378.981 200.919 li
378.981 196.64 li
374.703 196.64 li
cp
@
382.961 201.933 mo
387.24 201.933 li
387.24 197.654 li
382.961 197.654 li
cp
@
391.219 202.562 mo
395.497 202.562 li
395.497 198.283 li
391.219 198.283 li
cp
@
399.477 202.827 mo
403.756 202.827 li
403.756 198.548 li
399.477 198.548 li
cp
@
407.735 202.975 mo
412.013 202.975 li
412.013 198.696 li
407.735 198.696 li
cp
@
415.993 203.028 mo
420.272 203.028 li
420.272 198.749 li
415.993 198.749 li
cp
@
424.251 203.048 mo
428.529 203.048 li
428.529 198.769 li
424.251 198.769 li
cp
@
432.509 203.065 mo
436.787 203.065 li
436.787 198.786 li
432.509 198.786 li
cp
@
440.767 203.07 mo
445.045 203.07 li
445.045 198.791 li
440.767 198.791 li
cp
@
449.025 203.072 mo
453.303 203.072 li
453.303 198.793 li
449.025 198.793 li
cp
@
457.283 203.073 mo
461.562 203.073 li
461.562 198.794 li
457.283 198.794 li
cp
@
96.073 200.935 mo
104.331 200.935 li
112.589 200.932 li
120.847 200.918 li
129.105 200.88 li
137.363 200.757 li
145.621 200.435 li
153.879 199.581 li
159.816 198.381 li
162.137 197.673 li
166.948 195.764 li
170.394 193.813 li
174.17 190.995 li
176.819 188.546 li
178.652 186.534 li
181.472 182.961 li
183.843 179.509 li
186.245 175.508 li
186.91 174.298 li
189.675 168.82 li
192.046 163.563 li
194.551 157.45 li
195.168 155.857 li
197.5 149.473 li
200.176 141.5 li
203.426 131.11 li
205.911 122.606 li
210.832 104.632 li
211.684 101.505 li
216.389 83.775 li
219.194 73.3599 li
219.942 70.692 li
224.213 55.7328 li
226.435 48.4709 li
228.2 43.2209 li
230.784 36.1739 li
232.673 31.4809 li
234.219 28.0699 li
235.771 25.1369 li
236.458 24.0179 li
238.202 21.6039 li
239.947 19.7419 li
241.668 18.4529 li
243.322 17.7339 li
244.716 17.5289 li
246.364 17.7919 li
248.09 18.645 li
249.945 20.1579 li
251.887 22.3329 li
252.974 23.7869 li
254.666 26.4649 li
256.539 30.0339 li
258.828 35.0879 li
261.232 40.967 li
263.253 46.3959 li
265.714 53.697 li
269.49 65.69 li
277.748 94.134 li
283.516 113.333 li
286.005 121.181 li
289.727 132.286 li
292.447 139.916 li
294.263 144.698 li
297.153 151.804 li
299.798 157.804 li
302.521 163.444 li
305.444 168.868 li
308.32 173.608 li
310.779 177.253 li
313.864 181.271 li
317.206 184.975 li
319.037 186.78 li
322.445 189.687 li
326.394 192.396 li
327.295 192.941 li
331.385 194.998 li
335.553 196.579 li
340.951 198.082 li
343.811 198.675 li
350.854 199.666 li
352.069 199.795 li
360.327 200.404 li
368.585 200.695 li
376.843 200.837 li
385.101 200.888 li
393.359 200.916 li
401.616 200.925 li
409.874 200.932 li
418.132 200.934 li
@
93.934 203.075 mo
98.213 203.075 li
96.073 198.796 li
cp
@
102.192 203.074 mo
106.47 203.074 li
104.331 198.795 li
cp
@
110.45 203.071 mo
114.728 203.071 li
112.589 198.793 li
cp
@
118.708 203.057 mo
122.986 203.057 li
120.847 198.779 li
cp
@
126.965 203.02 mo
131.244 203.02 li
129.105 198.741 li
cp
@
135.223 202.896 mo
139.502 202.896 li
137.363 198.617 li
cp
@
143.481 202.574 mo
147.76 202.574 li
145.621 198.296 li
cp
@
151.739 201.72 mo
156.018 201.72 li
153.879 197.441 li
cp
@
159.997 199.812 mo
164.276 199.812 li
162.137 195.534 li
cp
@
168.255 195.952 mo
172.534 195.952 li
170.394 191.673 li
cp
@
176.513 188.673 mo
180.792 188.673 li
178.652 184.394 li
cp
@
184.771 176.438 mo
189.05 176.438 li
186.91 172.159 li
cp
@
193.029 157.996 mo
197.308 157.996 li
195.168 153.717 li
cp
@
201.287 133.25 mo
205.566 133.25 li
203.426 128.971 li
cp
@
209.545 103.645 mo
213.823 103.645 li
211.684 99.366 li
cp
@
217.803 72.8309 mo
222.081 72.8309 li
219.942 68.5519 li
cp
@
226.061 45.3599 mo
230.339 45.3599 li
228.2 41.081 li
cp
@
234.319 26.1579 mo
238.597 26.1579 li
236.458 21.8789 li
cp
@
242.576 19.6689 mo
246.855 19.6689 li
244.716 15.3899 li
cp
@
250.834 25.9269 mo
255.113 25.9269 li
252.974 21.6479 li
cp
@
259.092 43.1059 mo
263.371 43.1059 li
261.232 38.8269 li
cp
@
267.35 67.8289 mo
271.629 67.8289 li
269.49 63.55 li
cp
@
275.608 96.2729 mo
279.887 96.2729 li
277.748 91.9949 li
cp
@
283.866 123.32 mo
288.145 123.32 li
286.005 119.041 li
cp
@
292.124 146.837 mo
296.403 146.837 li
294.263 142.559 li
cp
@
300.382 165.584 mo
304.661 165.584 li
302.521 161.305 li
cp
@
308.64 179.393 mo
312.919 179.393 li
310.779 175.114 li
cp
@
316.898 188.919 mo
321.177 188.919 li
319.037 184.64 li
cp
@
325.156 195.08 mo
329.434 195.08 li
327.295 190.802 li
cp
@
333.414 198.718 mo
337.692 198.718 li
335.553 194.44 li
cp
@
341.672 200.814 mo
345.95 200.814 li
343.811 196.536 li
cp
@
349.93 201.934 mo
354.208 201.934 li
352.069 197.655 li
cp
@
358.187 202.543 mo
362.466 202.543 li
360.327 198.264 li
cp
@
366.445 202.834 mo
370.724 202.834 li
368.585 198.555 li
cp
@
374.703 202.976 mo
378.982 202.976 li
376.843 198.698 li
cp
@
382.961 203.027 mo
387.24 203.027 li
385.101 198.748 li
cp
@
391.219 203.056 mo
395.498 203.056 li
393.359 198.777 li
cp
@
399.477 203.065 mo
403.756 203.065 li
401.616 198.786 li
cp
@
407.735 203.071 mo
412.014 203.071 li
409.874 198.793 li
cp
@
415.993 203.074 mo
420.272 203.074 li
418.132 198.795 li
cp
@
71.299 200.935 mo
79.5569 200.935 li
87.815 200.934 li
96.073 200.93 li
104.331 200.917 li
112.589 200.881 li
120.847 200.789 li
129.105 200.548 li
137.363 199.998 li
143.904 199.158 li
145.621 198.829 li
151.166 197.458 li
153.879 196.5 li
158.504 194.367 li
162.137 192.13 li
165.932 189.189 li
168.76 186.55 li
170.394 184.79 li
173.293 181.267 li
175.852 177.731 li
178.652 173.322 li
181.498 168.225 li
184.067 163.109 li
186.91 156.894 li
189.423 150.868 li
192.404 143.101 li
195.168 135.463 li
197.957 127.288 li
203.426 110.284 li
210.016 89.1099 li
211.684 83.8809 li
216.516 69.0009 li
218.623 62.9209 li
219.942 59.3829 li
222.589 52.7439 li
224.607 48.0739 li
226.443 44.2369 li
228.2 41.0119 li
230.441 37.4509 li
232.44 34.7609 li
234.09 32.9699 li
235.768 31.6119 li
236.458 31.2039 li
238.405 30.5149 li
240.216 30.4339 li
242.086 30.8659 li
244.104 31.8669 li
244.716 32.2709 li
246.55 33.8149 li
248.479 35.9759 li
250.541 38.8229 li
252.974 42.7929 li
254.874 46.405 li
257.044 51.124 li
260.194 58.727 li
261.232 61.3409 li
263.699 67.9099 li
269.49 84.6579 li
277.748 109.264 li
283.489 125.744 li
286.005 132.537 li
289.067 140.323 li
291.925 147.163 li
294.263 152.39 li
297.23 158.534 li
300.056 163.907 li
302.521 168.199 li
305.528 172.918 li
308.567 177.147 li
310.779 179.919 li
313.985 183.448 li
317.615 186.825 li
319.037 188.013 li
322.666 190.672 li
327.295 193.386 li
331.629 195.343 li
335.553 196.712 li
341.092 198.14 li
343.811 198.671 li
350.882 199.649 li
352.069 199.773 li
360.327 200.355 li
368.585 200.657 li
376.843 200.808 li
385.101 200.879 li
393.359 200.912 li
401.616 200.926 li
409.874 200.93 li
418.132 200.934 li
426.39 200.935 li
434.648 200.935 li
0 1 1 0 cmyk
@
70.444 201.791 mo
70.444 203.502 li
72.155 203.502 li
72.155 201.791 li
73.867 201.791 li
73.867 200.079 li
72.155 200.079 li
72.155 198.368 li
70.444 198.368 li
70.444 200.079 li
68.732 200.079 li
68.732 201.791 li
f
78.702 201.791 mo
78.702 203.502 li
80.413 203.502 li
80.413 201.791 li
82.125 201.791 li
82.125 200.079 li
80.413 200.079 li
80.413 198.368 li
78.702 198.368 li
78.702 200.079 li
76.99 200.079 li
76.99 201.791 li
f
86.959 201.789 mo
86.959 203.501 li
88.671 203.501 li
88.671 201.789 li
90.382 201.789 li
90.382 200.078 li
88.671 200.078 li
88.671 198.366 li
86.959 198.366 li
86.959 200.078 li
85.248 200.078 li
85.248 201.789 li
f
95.218 201.786 mo
95.218 203.497 li
96.929 203.497 li
96.929 201.786 li
98.64 201.786 li
98.64 200.074 li
96.929 200.074 li
96.929 198.362 li
95.218 198.362 li
95.218 200.074 li
93.506 200.074 li
93.506 201.786 li
f
103.475 201.773 mo
103.475 203.484 li
105.187 203.484 li
105.187 201.773 li
106.898 201.773 li
106.898 200.061 li
105.187 200.061 li
105.187 198.35 li
103.475 198.35 li
103.475 200.061 li
101.764 200.061 li
101.764 201.773 li
f
111.733 201.736 mo
111.733 203.448 li
113.445 203.448 li
113.445 201.736 li
115.156 201.736 li
115.156 200.025 li
113.445 200.025 li
113.445 198.314 li
111.733 198.314 li
111.733 200.025 li
110.022 200.025 li
110.022 201.736 li
f
119.991 201.645 mo
119.991 203.356 li
121.703 203.356 li
121.703 201.645 li
123.414 201.645 li
123.414 199.933 li
121.703 199.933 li
121.703 198.221 li
119.991 198.221 li
119.991 199.933 li
118.28 199.933 li
118.28 201.645 li
f
128.249 201.404 mo
128.249 203.115 li
129.961 203.115 li
129.961 201.404 li
131.672 201.404 li
131.672 199.692 li
129.961 199.692 li
129.961 197.981 li
128.249 197.981 li
128.249 199.692 li
126.538 199.692 li
126.538 201.404 li
f
136.507 200.854 mo
136.507 202.565 li
138.219 202.565 li
138.219 200.854 li
139.93 200.854 li
139.93 199.142 li
138.219 199.142 li
138.219 197.431 li
136.507 197.431 li
136.507 199.142 li
134.796 199.142 li
134.796 200.854 li
f
144.765 199.684 mo
144.765 201.396 li
146.476 201.396 li
146.476 199.684 li
148.188 199.684 li
148.188 197.973 li
146.476 197.973 li
146.476 196.261 li
144.765 196.261 li
144.765 197.973 li
143.053 197.973 li
143.053 199.684 li
f
153.023 197.356 mo
153.023 199.067 li
154.734 199.067 li
154.734 197.356 li
156.446 197.356 li
156.446 195.644 li
154.734 195.644 li
154.734 193.933 li
153.023 193.933 li
153.023 195.644 li
151.311 195.644 li
151.311 197.356 li
f
161.281 192.985 mo
161.281 194.697 li
162.992 194.697 li
162.992 192.985 li
164.704 192.985 li
164.704 191.274 li
162.992 191.274 li
162.992 189.562 li
161.281 189.562 li
161.281 191.274 li
159.569 191.274 li
159.569 192.985 li
f
169.539 185.645 mo
169.539 187.357 li
171.25 187.357 li
171.25 185.645 li
172.962 185.645 li
172.962 183.934 li
171.25 183.934 li
171.25 182.223 li
169.539 182.223 li
169.539 183.934 li
167.827 183.934 li
167.827 185.645 li
f
177.797 174.177 mo
177.797 175.889 li
179.508 175.889 li
179.508 174.177 li
181.22 174.177 li
181.22 172.466 li
179.508 172.466 li
179.508 170.754 li
177.797 170.754 li
177.797 172.466 li
176.085 172.466 li
176.085 174.177 li
f
186.055 157.75 mo
186.055 159.461 li
187.766 159.461 li
187.766 157.75 li
189.478 157.75 li
189.478 156.038 li
187.766 156.038 li
187.766 154.327 li
186.055 154.327 li
186.055 156.038 li
184.343 156.038 li
184.343 157.75 li
f
194.313 136.319 mo
194.313 138.03 li
196.024 138.03 li
196.024 136.319 li
197.735 136.319 li
197.735 134.607 li
196.024 134.607 li
196.024 132.896 li
194.313 132.896 li
194.313 134.607 li
192.601 134.607 li
192.601 136.319 li
f
202.57 111.139 mo
202.57 112.851 li
204.282 112.851 li
204.282 111.139 li
205.993 111.139 li
205.993 109.428 li
204.282 109.428 li
204.282 107.716 li
202.57 107.716 li
202.57 109.428 li
200.859 109.428 li
200.859 111.139 li
f
210.828 84.736 mo
210.828 86.448 li
212.54 86.448 li
212.54 84.736 li
214.251 84.736 li
214.251 83.025 li
212.54 83.025 li
212.54 81.313 li
210.828 81.313 li
210.828 83.025 li
209.117 83.025 li
209.117 84.736 li
f
219.086 60.239 mo
219.086 61.951 li
220.798 61.951 li
220.798 60.239 li
222.509 60.239 li
222.509 58.528 li
220.798 58.528 li
220.798 56.816 li
219.086 56.816 li
219.086 58.528 li
217.375 58.528 li
217.375 60.239 li
f
227.344 41.868 mo
227.344 43.58 li
229.056 43.58 li
229.056 41.868 li
230.767 41.868 li
230.767 40.157 li
229.056 40.157 li
229.056 38.445 li
227.344 38.445 li
227.344 40.157 li
225.633 40.157 li
225.633 41.868 li
f
235.602 32.06 mo
235.602 33.7711 li
237.314 33.7711 li
237.314 32.06 li
239.025 32.06 li
239.025 30.348 li
237.314 30.348 li
237.314 28.637 li
235.602 28.637 li
235.602 30.348 li
233.891 30.348 li
233.891 32.06 li
f
243.86 33.126 mo
243.86 34.838 li
245.572 34.838 li
245.572 33.126 li
247.283 33.126 li
247.283 31.415 li
245.572 31.415 li
245.572 29.7029 li
243.86 29.7029 li
243.86 31.415 li
242.149 31.415 li
242.149 33.126 li
f
252.118 43.648 mo
252.118 45.36 li
253.829 45.36 li
253.829 43.648 li
255.541 43.648 li
255.541 41.937 li
253.829 41.937 li
253.829 40.226 li
252.118 40.226 li
252.118 41.937 li
250.407 41.937 li
250.407 43.648 li
f
260.376 62.197 mo
260.376 63.9081 li
262.087 63.9081 li
262.087 62.197 li
263.799 62.197 li
263.799 60.485 li
262.087 60.485 li
262.087 58.774 li
260.376 58.774 li
260.376 60.485 li
258.664 60.485 li
258.664 62.197 li
f
268.634 85.514 mo
268.634 87.225 li
270.345 87.225 li
270.345 85.514 li
272.057 85.514 li
272.057 83.802 li
270.345 83.802 li
270.345 82.091 li
268.634 82.091 li
268.634 83.802 li
266.922 83.802 li
266.922 85.514 li
f
276.892 110.12 mo
276.892 111.832 li
278.603 111.832 li
278.603 110.12 li
280.315 110.12 li
280.315 108.409 li
278.603 108.409 li
278.603 106.697 li
276.892 106.697 li
276.892 108.409 li
275.18 108.409 li
275.18 110.12 li
f
285.15 133.393 mo
285.15 135.104 li
286.861 135.104 li
286.861 133.393 li
288.573 133.393 li
288.573 131.681 li
286.861 131.681 li
286.861 129.97 li
285.15 129.97 li
285.15 131.681 li
283.438 131.681 li
283.438 133.393 li
f
293.408 153.245 mo
293.408 154.957 li
295.119 154.957 li
295.119 153.245 li
296.831 153.245 li
296.831 151.534 li
295.119 151.534 li
295.119 149.823 li
293.408 149.823 li
293.408 151.534 li
291.696 151.534 li
291.696 153.245 li
f
301.666 169.054 mo
301.666 170.766 li
303.377 170.766 li
303.377 169.054 li
305.089 169.054 li
305.089 167.343 li
303.377 167.343 li
303.377 165.632 li
301.666 165.632 li
301.666 167.343 li
299.954 167.343 li
299.954 169.054 li
f
309.923 180.775 mo
309.923 182.487 li
311.635 182.487 li
311.635 180.775 li
313.346 180.775 li
313.346 179.064 li
311.635 179.064 li
311.635 177.352 li
309.923 177.352 li
309.923 179.064 li
308.212 179.064 li
308.212 180.775 li
f
318.181 188.869 mo
318.181 190.58 li
319.893 190.58 li
319.893 188.869 li
321.604 188.869 li
321.604 187.157 li
319.893 187.157 li
319.893 185.446 li
318.181 185.446 li
318.181 187.157 li
316.47 187.157 li
316.47 188.869 li
f
326.439 194.242 mo
326.439 195.954 li
328.151 195.954 li
328.151 194.242 li
329.862 194.242 li
329.862 192.53 li
328.151 192.53 li
328.151 190.819 li
326.439 190.819 li
326.439 192.53 li
324.728 192.53 li
324.728 194.242 li
f
334.697 197.568 mo
334.697 199.28 li
336.409 199.28 li
336.409 197.568 li
338.12 197.568 li
338.12 195.857 li
336.409 195.857 li
336.409 194.145 li
334.697 194.145 li
334.697 195.857 li
332.986 195.857 li
332.986 197.568 li
f
342.955 199.527 mo
342.955 201.239 li
344.667 201.239 li
344.667 199.527 li
346.378 199.527 li
346.378 197.816 li
344.667 197.816 li
344.667 196.104 li
342.955 196.104 li
342.955 197.816 li
341.244 197.816 li
341.244 199.527 li
f
351.213 200.629 mo
351.213 202.34 li
352.925 202.34 li
352.925 200.629 li
354.636 200.629 li
354.636 198.917 li
352.925 198.917 li
352.925 197.205 li
351.213 197.205 li
351.213 198.917 li
349.502 198.917 li
349.502 200.629 li
f
359.471 201.211 mo
359.471 202.922 li
361.183 202.922 li
361.183 201.211 li
362.894 201.211 li
362.894 199.499 li
361.183 199.499 li
361.183 197.787 li
359.471 197.787 li
359.471 199.499 li
357.76 199.499 li
357.76 201.211 li
f
367.729 201.513 mo
367.729 203.225 li
369.44 203.225 li
369.44 201.513 li
371.152 201.513 li
371.152 199.802 li
369.44 199.802 li
369.44 198.09 li
367.729 198.09 li
367.729 199.802 li
366.018 199.802 li
366.018 201.513 li
f
375.987 201.663 mo
375.987 203.375 li
377.698 203.375 li
377.698 201.663 li
379.41 201.663 li
379.41 199.952 li
377.698 199.952 li
377.698 198.24 li
375.987 198.24 li
375.987 199.952 li
374.275 199.952 li
374.275 201.663 li
f
384.245 201.734 mo
384.245 203.446 li
385.956 203.446 li
385.956 201.734 li
387.668 201.734 li
387.668 200.023 li
385.956 200.023 li
385.956 198.311 li
384.245 198.311 li
384.245 200.023 li
382.533 200.023 li
382.533 201.734 li
f
392.503 201.768 mo
392.503 203.479 li
394.214 203.479 li
394.214 201.768 li
395.926 201.768 li
395.926 200.056 li
394.214 200.056 li
394.214 198.345 li
392.503 198.345 li
392.503 200.056 li
390.791 200.056 li
390.791 201.768 li
f
400.761 201.782 mo
400.761 203.493 li
402.472 203.493 li
402.472 201.782 li
404.184 201.782 li
404.184 200.07 li
402.472 200.07 li
402.472 198.359 li
400.761 198.359 li
400.761 200.07 li
399.049 200.07 li
399.049 201.782 li
f
409.019 201.786 mo
409.019 203.498 li
410.73 203.498 li
410.73 201.786 li
412.442 201.786 li
412.442 200.075 li
410.73 200.075 li
410.73 198.363 li
409.019 198.363 li
409.019 200.075 li
407.307 200.075 li
407.307 201.786 li
f
417.277 201.789 mo
417.277 203.501 li
418.988 203.501 li
418.988 201.789 li
420.7 201.789 li
420.7 200.078 li
418.988 200.078 li
418.988 198.367 li
417.277 198.367 li
417.277 200.078 li
415.565 200.078 li
415.565 201.789 li
f
425.534 201.791 mo
425.534 203.502 li
427.246 203.502 li
427.246 201.791 li
428.957 201.791 li
428.957 200.079 li
427.246 200.079 li
427.246 198.368 li
425.534 198.368 li
425.534 200.079 li
423.823 200.079 li
423.823 201.791 li
f
433.792 201.791 mo
433.792 203.502 li
435.504 203.502 li
435.504 201.791 li
437.215 201.791 li
437.215 200.079 li
435.504 200.079 li
435.504 198.368 li
433.792 198.368 li
433.792 200.079 li
432.081 200.079 li
432.081 201.791 li
f
54.784 200.935 mo
63.041 200.935 li
71.299 200.936 li
79.557 200.932 li
87.815 200.931 li
96.073 200.922 li
104.331 200.883 li
112.589 200.794 li
120.847 200.574 li
129.105 200.024 li
135.575 199.172 li
137.363 198.81 li
142.892 197.362 li
145.621 196.283 li
149.059 194.479 li
152.464 192.217 li
153.879 191.112 li
157.88 187.603 li
160.31 185.034 li
162.137 182.747 li
164.929 178.655 li
167.337 174.602 li
169.854 169.83 li
170.394 168.731 li
173.188 162.621 li
175.656 156.64 li
178.652 148.689 li
181.019 141.813 li
184.077 132.186 li
186.91 122.796 li
189.799 112.735 li
195.168 93.1779 li
198.702 80.062 li
201.717 68.9799 li
203.426 63.0679 li
206.816 51.9629 li
209.175 44.7599 li
211.106 39.394 li
211.684 37.9009 li
214.253 31.5679 li
216.11 27.4239 li
217.577 24.5749 li
218.995 22.2819 li
219.942 21.051 li
221.511 19.5119 li
223.153 18.4749 li
224.962 17.9509 li
226.75 18.0099 li
228.2 18.437 li
229.881 19.3999 li
231.658 20.9969 li
233.583 23.3249 li
235.677 26.4629 li
236.458 27.7739 li
238.256 31.1689 li
240.222 35.489 li
242.615 41.4279 li
244.716 47.0839 li
246.361 51.864 li
248.691 59.2529 li
252.974 73.555 li
261.232 101.583 li
267.338 121.711 li
269.49 128.345 li
272.44 136.908 li
275.122 144.228 li
277.748 150.889 li
280.605 157.578 li
283.14 163.034 li
286.005 168.591 li
288.906 173.501 li
291.828 177.802 li
294.263 180.993 li
297.414 184.579 li
300.995 187.966 li
302.521 189.25 li
306.1 191.86 li
310.779 194.513 li
315.187 196.321 li
319.037 197.498 li
324.982 198.844 li
327.295 199.232 li
335.553 200.107 li
343.811 200.536 li
352.069 200.773 li
360.327 200.862 li
368.585 200.909 li
376.843 200.923 li
385.101 200.931 li
393.359 200.934 li
401.616 200.935 li
409.874 200.935 li
@
54.784 203.716 mo
54.159 201.794 li
52.139 201.794 li
53.773 200.607 li
53.149 198.685 li
54.784 199.873 li
56.418 198.685 li
55.794 200.607 li
57.429 201.794 li
55.408 201.794 li
cp
@
63.041 203.716 mo
62.4169 201.794 li
60.3959 201.794 li
62.0309 200.607 li
61.407 198.685 li
63.041 199.873 li
64.676 198.685 li
64.0519 200.607 li
65.686 201.794 li
63.666 201.794 li
cp
@
71.299 203.716 mo
70.675 201.795 li
68.654 201.795 li
70.289 200.607 li
69.664 198.686 li
71.299 199.873 li
72.934 198.686 li
72.31 200.607 li
73.944 201.795 li
71.924 201.795 li
cp
@
79.557 203.713 mo
78.933 201.791 li
76.913 201.791 li
78.547 200.604 li
77.923 198.682 li
79.557 199.87 li
81.192 198.682 li
80.568 200.604 li
82.202 201.791 li
80.182 201.791 li
cp
@
87.815 203.712 mo
87.1909 201.79 li
85.17 201.79 li
86.805 200.602 li
86.18 198.681 li
87.815 199.868 li
89.45 198.681 li
88.825 200.602 li
90.46 201.79 li
88.439 201.79 li
cp
@
96.073 203.703 mo
95.449 201.781 li
93.428 201.781 li
95.063 200.593 li
94.438 198.671 li
96.073 199.859 li
97.7079 198.671 li
97.084 200.593 li
98.718 201.781 li
96.698 201.781 li
cp
@
104.331 203.664 mo
103.707 201.742 li
101.686 201.742 li
103.321 200.554 li
102.696 198.633 li
104.331 199.82 li
105.966 198.633 li
105.341 200.554 li
106.976 201.742 li
104.955 201.742 li
cp
@
112.589 203.575 mo
111.965 201.653 li
109.944 201.653 li
111.579 200.466 li
110.954 198.544 li
112.589 199.732 li
114.224 198.544 li
113.599 200.466 li
115.234 201.653 li
113.213 201.653 li
cp
@
120.847 203.355 mo
120.223 201.433 li
118.202 201.433 li
119.837 200.246 li
119.212 198.324 li
120.847 199.512 li
122.482 198.324 li
121.857 200.246 li
123.492 201.433 li
121.471 201.433 li
cp
@
129.105 202.805 mo
128.48 200.883 li
126.46 200.883 li
128.095 199.695 li
127.47 197.774 li
129.105 198.961 li
130.74 197.774 li
130.115 199.695 li
131.75 200.883 li
129.729 200.883 li
cp
@
137.363 201.591 mo
136.738 199.67 li
134.718 199.67 li
136.352 198.482 li
135.728 196.56 li
137.363 197.748 li
138.997 196.56 li
138.373 198.482 li
140.008 199.67 li
137.987 199.67 li
cp
@
145.621 199.064 mo
144.996 197.143 li
142.976 197.143 li
144.61 195.955 li
143.986 194.033 li
145.621 195.221 li
147.255 194.033 li
146.631 195.955 li
148.266 197.143 li
146.245 197.143 li
cp
@
153.879 193.893 mo
153.254 191.971 li
151.234 191.971 li
152.868 190.783 li
152.244 188.862 li
153.879 190.049 li
155.513 188.862 li
154.889 190.783 li
156.524 191.971 li
154.503 191.971 li
cp
@
162.137 185.529 mo
161.512 183.607 li
159.492 183.607 li
161.126 182.419 li
160.502 180.497 li
162.137 181.685 li
163.771 180.497 li
163.147 182.419 li
164.782 183.607 li
162.761 183.607 li
cp
@
170.394 171.512 mo
169.77 169.591 li
167.749 169.591 li
169.384 168.403 li
168.76 166.481 li
170.394 167.669 li
172.029 166.481 li
171.405 168.403 li
173.039 169.591 li
171.019 169.591 li
cp
@
178.652 151.47 mo
178.028 149.548 li
176.007 149.548 li
177.642 148.361 li
177.018 146.439 li
178.652 147.627 li
180.287 146.439 li
179.663 148.361 li
181.297 149.548 li
179.277 149.548 li
cp
@
186.91 125.577 mo
186.286 123.655 li
184.265 123.655 li
185.9 122.468 li
185.276 120.546 li
186.91 121.734 li
188.545 120.546 li
187.921 122.468 li
189.555 123.655 li
187.535 123.655 li
cp
@
195.168 95.9589 mo
194.544 94.0379 li
192.523 94.0379 li
194.158 92.8499 li
193.534 90.9279 li
195.168 92.1159 li
196.803 90.9279 li
196.179 92.8499 li
197.813 94.0379 li
195.793 94.0379 li
cp
@
203.426 65.8489 mo
202.802 63.9269 li
200.781 63.9269 li
202.416 62.7399 li
201.791 60.8179 li
203.426 62.0059 li
205.061 60.8179 li
204.437 62.7399 li
206.071 63.9269 li
204.051 63.9269 li
cp
@
211.684 40.6818 mo
211.06 38.7599 li
209.039 38.7599 li
210.674 37.5729 li
210.049 35.6509 li
211.684 36.8389 li
213.319 35.6509 li
212.694 37.5729 li
214.329 38.7599 li
212.309 38.7599 li
cp
@
219.942 23.8318 mo
219.318 21.9099 li
217.297 21.9099 li
218.932 20.7228 li
218.307 18.801 li
219.942 19.989 li
221.577 18.801 li
220.952 20.7228 li
222.587 21.9099 li
220.566 21.9099 li
cp
@
228.2 21.218 mo
227.576 19.2959 li
225.555 19.2959 li
227.19 18.1079 li
226.565 16.187 li
228.2 17.374 li
229.835 16.187 li
229.21 18.1079 li
230.845 19.2959 li
228.824 19.2959 li
cp
@
236.458 30.5549 mo
235.833 28.6339 li
233.813 28.6339 li
235.448 27.4459 li
234.823 25.5239 li
236.458 26.7119 li
238.093 25.5239 li
237.468 27.4459 li
239.103 28.6339 li
237.082 28.6339 li
cp
@
244.716 49.8649 mo
244.091 47.9429 li
242.071 47.9429 li
243.706 46.7549 li
243.081 44.8339 li
244.716 46.0209 li
246.351 44.8339 li
245.726 46.7549 li
247.361 47.9429 li
245.34 47.9429 li
cp
@
252.974 76.3369 mo
252.349 74.415 li
250.329 74.415 li
251.963 73.227 li
251.339 71.305 li
252.974 72.493 li
254.608 71.305 li
253.984 73.227 li
255.619 74.415 li
253.598 74.415 li
cp
@
261.232 104.364 mo
260.607 102.442 li
258.587 102.442 li
260.221 101.254 li
259.597 99.3329 li
261.232 100.52 li
262.866 99.3329 li
262.242 101.254 li
263.877 102.442 li
261.856 102.442 li
cp
@
269.49 131.126 mo
268.865 129.204 li
266.845 129.204 li
268.479 128.017 li
267.855 126.095 li
269.49 127.283 li
271.124 126.095 li
270.5 128.017 li
272.135 129.204 li
270.114 129.204 li
cp
@
277.748 153.67 mo
277.123 151.748 li
275.103 151.748 li
276.737 150.561 li
276.113 148.639 li
277.748 149.827 li
279.382 148.639 li
278.758 150.561 li
280.393 151.748 li
278.372 151.748 li
cp
@
286.005 171.373 mo
285.381 169.451 li
283.36 169.451 li
284.995 168.263 li
284.371 166.341 li
286.005 167.529 li
287.64 166.341 li
287.016 168.263 li
288.65 169.451 li
286.63 169.451 li
cp
@
294.263 183.774 mo
293.639 181.853 li
291.618 181.853 li
293.253 180.665 li
292.629 178.743 li
294.263 179.931 li
295.898 178.743 li
295.274 180.665 li
296.908 181.853 li
294.888 181.853 li
cp
@
302.521 192.032 mo
301.897 190.11 li
299.876 190.11 li
301.511 188.922 li
300.887 187 li
302.521 188.188 li
304.156 187 li
303.532 188.922 li
305.166 190.11 li
303.146 190.11 li
cp
@
310.779 197.294 mo
310.155 195.373 li
308.134 195.373 li
309.769 194.185 li
309.145 192.263 li
310.779 193.451 li
312.414 192.263 li
311.79 194.185 li
313.424 195.373 li
311.404 195.373 li
cp
@
319.037 200.279 mo
318.413 198.357 li
316.392 198.357 li
318.027 197.17 li
317.402 195.248 li
319.037 196.436 li
320.672 195.248 li
320.047 197.17 li
321.682 198.357 li
319.662 198.357 li
cp
@
327.295 202.014 mo
326.671 200.092 li
324.65 200.092 li
326.285 198.904 li
325.66 196.982 li
327.295 198.17 li
328.93 196.982 li
328.305 198.904 li
329.94 200.092 li
327.919 200.092 li
cp
@
335.553 202.889 mo
334.929 200.967 li
332.908 200.967 li
334.543 199.779 li
333.918 197.857 li
335.553 199.045 li
337.188 197.857 li
336.563 199.779 li
338.198 200.967 li
336.177 200.967 li
cp
@
343.811 203.316 mo
343.187 201.395 li
341.166 201.395 li
342.801 200.207 li
342.176 198.286 li
343.811 199.473 li
345.446 198.286 li
344.821 200.207 li
346.456 201.395 li
344.435 201.395 li
cp
@
352.069 203.554 mo
351.444 201.632 li
349.424 201.632 li
351.059 200.445 li
350.434 198.523 li
352.069 199.711 li
353.704 198.523 li
353.079 200.445 li
354.714 201.632 li
352.693 201.632 li
cp
@
360.327 203.644 mo
359.702 201.722 li
357.682 201.722 li
359.316 200.534 li
358.692 198.612 li
360.327 199.8 li
361.962 198.612 li
361.337 200.534 li
362.972 201.722 li
360.951 201.722 li
cp
@
368.585 203.69 mo
367.96 201.768 li
365.94 201.768 li
367.574 200.581 li
366.95 198.659 li
368.585 199.847 li
370.219 198.659 li
369.595 200.581 li
371.23 201.768 li
369.209 201.768 li
cp
@
376.843 203.704 mo
376.218 201.783 li
374.198 201.783 li
375.832 200.595 li
375.208 198.673 li
376.843 199.861 li
378.477 198.673 li
377.853 200.595 li
379.488 201.783 li
377.467 201.783 li
cp
@
385.101 203.712 mo
384.476 201.791 li
382.456 201.791 li
384.09 200.603 li
383.466 198.681 li
385.101 199.869 li
386.735 198.681 li
386.111 200.603 li
387.746 201.791 li
385.725 201.791 li
cp
@
393.359 203.715 mo
392.734 201.793 li
390.714 201.793 li
392.348 200.605 li
391.724 198.684 li
393.359 199.871 li
394.993 198.684 li
394.369 200.605 li
396.004 201.793 li
393.983 201.793 li
cp
@
401.616 203.716 mo
400.992 201.794 li
398.971 201.794 li
400.606 200.607 li
399.982 198.685 li
401.616 199.873 li
403.251 198.685 li
402.627 200.607 li
404.261 201.794 li
402.241 201.794 li
cp
@
409.874 203.716 mo
409.25 201.794 li
407.229 201.794 li
408.864 200.607 li
408.24 198.685 li
409.874 199.873 li
411.509 198.685 li
410.885 200.607 li
412.519 201.794 li
410.499 201.794 li
cp
@
54.784 200.928 mo
63.041 200.913 li
71.299 200.87 li
79.557 200.767 li
87.815 200.528 li
96.073 199.972 li
102.983 199.134 li
104.331 198.883 li
109.878 197.537 li
112.589 196.61 li
117.556 194.413 li
120.847 192.476 li
125.085 189.359 li
127.904 186.801 li
129.105 185.542 li
132.017 182.111 li
134.62 178.59 li
137.363 174.35 li
140.211 169.346 li
142.752 164.377 li
145.621 158.172 li
148.487 151.307 li
151.184 144.256 li
153.879 136.709 li
156.377 129.183 li
159.318 119.733 li
162.137 110.422 li
165.562 98.7349 li
169.565 84.8959 li
170.394 82.1149 li
175.399 65.5499 li
177.693 58.4109 li
178.652 55.5949 li
181.977 46.2369 li
184.121 40.6999 li
185.787 36.8719 li
186.91 34.5879 li
188.906 31.0339 li
190.965 27.9559 li
192.664 25.9089 li
194.41 24.3069 li
195.168 23.7789 li
197.036 22.8669 li
199.11 22.4969 li
200.769 22.7219 li
202.43 23.4439 li
203.426 24.1279 li
204.738 25.3559 li
206.425 27.4719 li
208.5 30.7609 li
210.888 35.2419 li
211.684 36.8539 li
213.564 41.0038 li
215.708 46.3549 li
218.804 54.8759 li
219.942 58.1379 li
221.839 63.8189 li
228.2 84.515 li
236.458 111.999 li
241.009 126.254 li
243.746 134.345 li
244.716 137.07 li
247.609 144.843 li
250.176 151.295 li
252.974 157.761 li
255.837 163.734 li
258.515 168.781 li
261.232 173.395 li
264.186 177.822 li
267.174 181.705 li
269.49 184.369 li
272.695 187.527 li
276.42 190.516 li
277.748 191.46 li
281.507 193.741 li
286.005 195.832 li
290.767 197.43 li
294.263 198.299 li
300.62 199.418 li
302.521 199.662 li
310.779 200.337 li
319.037 200.673 li
327.295 200.829 li
335.553 200.893 li
343.811 200.92 li
352.069 200.929 li
360.327 200.933 li
368.585 200.935 li
376.843 200.935 li
385.101 200.935 li
393.359 200.935 li
@
54.07 201.641 mo
54.07 203.067 li
55.496 203.067 li
55.496 201.641 li
56.923 201.641 li
56.923 200.215 li
55.496 200.215 li
55.496 198.789 li
54.07 198.789 li
54.07 200.215 li
52.644 200.215 li
52.644 201.641 li
cp
@
62.328 201.627 mo
62.328 203.053 li
63.7549 203.053 li
63.7549 201.627 li
65.181 201.627 li
65.181 200.2 li
63.7549 200.2 li
63.7549 198.774 li
62.328 198.774 li
62.328 200.2 li
60.902 200.2 li
60.902 201.627 li
cp
@
70.586 201.583 mo
70.586 203.009 li
72.013 203.009 li
72.013 201.583 li
73.439 201.583 li
73.439 200.157 li
72.013 200.157 li
72.013 198.731 li
70.586 198.731 li
70.586 200.157 li
69.16 200.157 li
69.16 201.583 li
cp
@
78.844 201.48 mo
78.844 202.906 li
80.27 202.906 li
80.27 201.48 li
81.696 201.48 li
81.696 200.054 li
80.27 200.054 li
80.27 198.627 li
78.844 198.627 li
78.844 200.054 li
77.418 200.054 li
77.418 201.48 li
cp
@
87.102 201.241 mo
87.102 202.667 li
88.528 202.667 li
88.528 201.241 li
89.955 201.241 li
89.955 199.814 li
88.528 199.814 li
88.528 198.388 li
87.102 198.388 li
87.102 199.814 li
85.676 199.814 li
85.676 201.241 li
cp
@
95.36 200.685 mo
95.36 202.111 li
96.7859 202.111 li
96.7859 200.685 li
98.213 200.685 li
98.213 199.259 li
96.7859 199.259 li
96.7859 197.832 li
95.36 197.832 li
95.36 199.259 li
93.934 199.259 li
93.934 200.685 li
cp
@
103.618 199.596 mo
103.618 201.023 li
105.044 201.023 li
105.044 199.596 li
106.47 199.596 li
106.47 198.17 li
105.044 198.17 li
105.044 196.744 li
103.618 196.744 li
103.618 198.17 li
102.192 198.17 li
102.192 199.596 li
cp
@
111.876 197.323 mo
111.876 198.75 li
113.302 198.75 li
113.302 197.323 li
114.728 197.323 li
114.728 195.897 li
113.302 195.897 li
113.302 194.471 li
111.876 194.471 li
111.876 195.897 li
110.45 195.897 li
110.45 197.323 li
cp
@
120.134 193.189 mo
120.134 194.615 li
121.56 194.615 li
121.56 193.189 li
122.986 193.189 li
122.986 191.762 li
121.56 191.762 li
121.56 190.336 li
120.134 190.336 li
120.134 191.762 li
118.708 191.762 li
118.708 193.189 li
cp
@
128.392 186.255 mo
128.392 187.682 li
129.818 187.682 li
129.818 186.255 li
131.244 186.255 li
131.244 184.829 li
129.818 184.829 li
129.818 183.403 li
128.392 183.403 li
128.392 184.829 li
126.965 184.829 li
126.965 186.255 li
cp
@
136.65 175.062 mo
136.65 176.489 li
138.076 176.489 li
138.076 175.062 li
139.502 175.062 li
139.502 173.636 li
138.076 173.636 li
138.076 172.21 li
136.65 172.21 li
136.65 173.636 li
135.223 173.636 li
135.223 175.062 li
cp
@
144.908 158.885 mo
144.908 160.311 li
146.334 160.311 li
146.334 158.885 li
147.76 158.885 li
147.76 157.459 li
146.334 157.459 li
146.334 156.032 li
144.908 156.032 li
144.908 157.459 li
143.481 157.459 li
143.481 158.885 li
cp
@
153.166 137.422 mo
153.166 138.848 li
154.592 138.848 li
154.592 137.422 li
156.018 137.422 li
156.018 135.996 li
154.592 135.996 li
154.592 134.569 li
153.166 134.569 li
153.166 135.996 li
151.739 135.996 li
151.739 137.422 li
cp
@
161.423 111.135 mo
161.423 112.561 li
162.85 112.561 li
162.85 111.135 li
164.276 111.135 li
164.276 109.709 li
162.85 109.709 li
162.85 108.282 li
161.423 108.282 li
161.423 109.709 li
159.997 109.709 li
159.997 111.135 li
cp
@
169.681 82.8279 mo
169.681 84.2539 li
171.108 84.2539 li
171.108 82.8279 li
172.534 82.8279 li
172.534 81.4019 li
171.108 81.4019 li
171.108 79.9759 li
169.681 79.9759 li
169.681 81.4019 li
168.255 81.4019 li
168.255 82.8279 li
cp
@
177.939 56.3079 mo
177.939 57.7339 li
179.366 57.7339 li
179.366 56.3079 li
180.792 56.3079 li
180.792 54.8819 li
179.366 54.8819 li
179.366 53.456 li
177.939 53.456 li
177.939 54.8819 li
176.513 54.8819 li
176.513 56.3079 li
cp
@
186.197 35.3008 mo
186.197 36.7269 li
187.623 36.7269 li
187.623 35.3008 li
189.05 35.3008 li
189.05 33.8749 li
187.623 33.8749 li
187.623 32.4479 li
186.197 32.4479 li
186.197 33.8749 li
184.771 33.8749 li
184.771 35.3008 li
cp
@
194.455 24.4919 mo
194.455 25.9179 li
195.881 25.9179 li
195.881 24.4919 li
197.308 24.4919 li
197.308 23.0659 li
195.881 23.0659 li
195.881 21.6399 li
194.455 21.6399 li
194.455 23.0659 li
193.029 23.0659 li
193.029 24.4919 li
cp
@
202.713 24.8409 mo
202.713 26.2669 li
204.139 26.2669 li
204.139 24.8409 li
205.566 24.8409 li
205.566 23.415 li
204.139 23.415 li
204.139 21.989 li
202.713 21.989 li
202.713 23.415 li
201.287 23.415 li
201.287 24.8409 li
cp
@
210.971 37.5668 mo
210.971 38.9929 li
212.397 38.9929 li
212.397 37.5668 li
213.823 37.5668 li
213.823 36.1399 li
212.397 36.1399 li
212.397 34.7139 li
210.971 34.7139 li
210.971 36.1399 li
209.545 36.1399 li
209.545 37.5668 li
cp
@
219.229 58.8508 mo
219.229 60.2769 li
220.655 60.2769 li
220.655 58.8508 li
222.081 58.8508 li
222.081 57.4239 li
220.655 57.4239 li
220.655 55.9979 li
219.229 55.9979 li
219.229 57.4239 li
217.803 57.4239 li
217.803 58.8508 li
cp
@
227.487 85.2278 mo
227.487 86.6539 li
228.913 86.6539 li
228.913 85.2278 li
230.339 85.2278 li
230.339 83.801 li
228.913 83.801 li
228.913 82.3749 li
227.487 82.3749 li
227.487 83.801 li
226.061 83.801 li
226.061 85.2278 li
cp
@
235.745 112.713 mo
235.745 114.139 li
237.171 114.139 li
237.171 112.713 li
238.597 112.713 li
238.597 111.286 li
237.171 111.286 li
237.171 109.86 li
235.745 109.86 li
235.745 111.286 li
234.319 111.286 li
234.319 112.713 li
cp
@
244.003 137.784 mo
244.003 139.21 li
245.429 139.21 li
245.429 137.784 li
246.855 137.784 li
246.855 136.357 li
245.429 136.357 li
245.429 134.931 li
244.003 134.931 li
244.003 136.357 li
242.576 136.357 li
242.576 137.784 li
cp
@
252.261 158.473 mo
252.261 159.9 li
253.687 159.9 li
253.687 158.473 li
255.113 158.473 li
255.113 157.047 li
253.687 157.047 li
253.687 155.621 li
252.261 155.621 li
252.261 157.047 li
250.834 157.047 li
250.834 158.473 li
cp
@
260.519 174.109 mo
260.519 175.535 li
261.945 175.535 li
261.945 174.109 li
263.371 174.109 li
263.371 172.682 li
261.945 172.682 li
261.945 171.256 li
260.519 171.256 li
260.519 172.682 li
259.092 172.682 li
259.092 174.109 li
cp
@
268.776 185.082 mo
268.776 186.508 li
270.203 186.508 li
270.203 185.082 li
271.629 185.082 li
271.629 183.656 li
270.203 183.656 li
270.203 182.23 li
268.776 182.23 li
268.776 183.656 li
267.35 183.656 li
267.35 185.082 li
cp
@
277.034 192.173 mo
277.034 193.599 li
278.461 193.599 li
278.461 192.173 li
279.887 192.173 li
279.887 190.746 li
278.461 190.746 li
278.461 189.32 li
277.034 189.32 li
277.034 190.746 li
275.608 190.746 li
275.608 192.173 li
cp
@
285.292 196.545 mo
285.292 197.971 li
286.719 197.971 li
286.719 196.545 li
288.145 196.545 li
288.145 195.118 li
286.719 195.118 li
286.719 193.692 li
285.292 193.692 li
285.292 195.118 li
283.866 195.118 li
283.866 196.545 li
cp
@
293.55 199.012 mo
293.55 200.438 li
294.977 200.438 li
294.977 199.012 li
296.403 199.012 li
296.403 197.586 li
294.977 197.586 li
294.977 196.159 li
293.55 196.159 li
293.55 197.586 li
292.124 197.586 li
292.124 199.012 li
cp
@
301.808 200.375 mo
301.808 201.801 li
303.234 201.801 li
303.234 200.375 li
304.661 200.375 li
304.661 198.949 li
303.234 198.949 li
303.234 197.523 li
301.808 197.523 li
301.808 198.949 li
300.382 198.949 li
300.382 200.375 li
cp
@
310.066 201.05 mo
310.066 202.477 li
311.492 202.477 li
311.492 201.05 li
312.919 201.05 li
312.919 199.624 li
311.492 199.624 li
311.492 198.198 li
310.066 198.198 li
310.066 199.624 li
308.64 199.624 li
308.64 201.05 li
cp
@
318.324 201.386 mo
318.324 202.812 li
319.75 202.812 li
319.75 201.386 li
321.177 201.386 li
321.177 199.959 li
319.75 199.959 li
319.75 198.533 li
318.324 198.533 li
318.324 199.959 li
316.898 199.959 li
316.898 201.386 li
cp
@
326.582 201.542 mo
326.582 202.968 li
328.008 202.968 li
328.008 201.542 li
329.434 201.542 li
329.434 200.116 li
328.008 200.116 li
328.008 198.689 li
326.582 198.689 li
326.582 200.116 li
325.156 200.116 li
325.156 201.542 li
cp
@
334.84 201.606 mo
334.84 203.032 li
336.266 203.032 li
336.266 201.606 li
337.692 201.606 li
337.692 200.18 li
336.266 200.18 li
336.266 198.754 li
334.84 198.754 li
334.84 200.18 li
333.414 200.18 li
333.414 201.606 li
cp
@
343.098 201.633 mo
343.098 203.059 li
344.524 203.059 li
344.524 201.633 li
345.95 201.633 li
345.95 200.207 li
344.524 200.207 li
344.524 198.78 li
343.098 198.78 li
343.098 200.207 li
341.672 200.207 li
341.672 201.633 li
cp
@
351.356 201.643 mo
351.356 203.069 li
352.782 203.069 li
352.782 201.643 li
354.208 201.643 li
354.208 200.216 li
352.782 200.216 li
352.782 198.79 li
351.356 198.79 li
351.356 200.216 li
349.93 200.216 li
349.93 201.643 li
cp
@
359.614 201.646 mo
359.614 203.073 li
361.04 203.073 li
361.04 201.646 li
362.466 201.646 li
362.466 200.22 li
361.04 200.22 li
361.04 198.794 li
359.614 198.794 li
359.614 200.22 li
358.187 200.22 li
358.187 201.646 li
cp
@
367.872 201.648 mo
367.872 203.075 li
369.298 203.075 li
369.298 201.648 li
370.724 201.648 li
370.724 200.222 li
369.298 200.222 li
369.298 198.796 li
367.872 198.796 li
367.872 200.222 li
366.445 200.222 li
366.445 201.648 li
cp
@
376.13 201.648 mo
376.13 203.074 li
377.556 203.074 li
377.556 201.648 li
378.982 201.648 li
378.982 200.222 li
377.556 200.222 li
377.556 198.796 li
376.13 198.796 li
376.13 200.222 li
374.703 200.222 li
374.703 201.648 li
cp
@
384.387 201.648 mo
384.387 203.075 li
385.814 203.075 li
385.814 201.648 li
387.24 201.648 li
387.24 200.222 li
385.814 200.222 li
385.814 198.796 li
384.387 198.796 li
384.387 200.222 li
382.961 200.222 li
382.961 201.648 li
cp
@
392.645 201.648 mo
392.645 203.075 li
394.072 203.075 li
394.072 201.648 li
395.498 201.648 li
395.498 200.222 li
394.072 200.222 li
394.072 198.796 li
392.645 198.796 li
392.645 200.222 li
391.219 200.222 li
391.219 201.648 li
cp
@
grestore
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCG+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCG+Helvetica /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/BRDZCG+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /.notdef /six /seven /eight 199{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 44.11 mo(7.7)sh78.507 40.51 mo
78.507 37.658 82.786 37.658 82.786 40.51 cv
82.786 43.362 78.507 43.362 78.507 40.51 cv
f
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCG+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B35143997141C18CFB9408A8718EED7EBBE8F221FE8B4B4093F76F8EAFAB6691BB9DD73FDFA50AA1325852CCF216CCF3A9F7D8A160F5B580DB952C84976D8C86428AAC8A0FBD65F16934B2A77657116707C31969> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCG+Helvetica /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/BRDZCG+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight 199{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 62.829 mo(11.5)sh78.507 60.959 mo
82.7855 60.959 li
82.7855 56.6805 li
78.507 56.6805 li
cp
f
BRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 80.657 mo(14.5)sh80.646 80.551 mo
79.878 78.186 li
77.391 78.186 li
79.403 76.724 li
78.634 74.359 li
80.646 75.821 li
82.658 74.359 li
81.89 76.724 li
83.902 78.186 li
81.415 78.186 li
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCG+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7EF32A838F0A270F512311B9FB28DC8886832100A66915214AC8BB35CDF6055D2E5FACA7DABB0797E87C7CC6E6D427273D3D65BCD216F2CB73FDD910A3A74D6DD84CFEEFD805DC73ECD97DD7A732BF2F0E864AB5F7AF5DCB559CF6276825D1E7D49DFFC43F9E12A37BDEEAED8EEF79487C180BCF3EA19EC5DBCB72E278F8698> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCG+Helvetica /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/BRDZCG+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 99.376 mo(19.6)sh78.507 95.4379 mo
78.507 92.5849 82.7859 92.5849 82.7859 95.4379 cv
82.7859 98.2899 78.507 98.2899 78.507 95.4379 cv
cp
.883909 .76556 0 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
BRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 117.204 mo(27)[6.94501 0 ]xsh78.507 115.886 mo
82.7855 115.886 li
82.7855 111.607 li
78.507 111.607 li
cp
.883909 .76556 0 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
BRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 135.924 mo(39)[6.94501 0 ]xsh78.507 134.196 mo
82.7859 134.196 li
80.646 129.917 li
cp
.883909 .76556 0 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
BRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 153.752 mo(54.4)sh79.791 151.221 mo
79.791 152.933 li
81.502 152.933 li
81.502 151.221 li
83.214 151.221 li
83.214 149.51 li
81.502 149.51 li
81.502 147.798 li
79.791 147.798 li
79.791 149.51 li
78.079 149.51 li
78.079 151.221 li
0 1 1 0 cmyk
f
.75021 .679683 .670222 .90164 cmyk
BRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 172.471 mo(62.4)sh80.646 171.456 mo
80.022 169.534 li
78.001 169.534 li
79.636 168.346 li
79.011 166.425 li
80.646 167.612 li
82.2809 166.425 li
81.657 168.346 li
83.291 169.534 li
81.271 169.534 li
cp
0 1 1 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
BRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf95.38 190.299 mo(200)sh79.933 187.697 mo
79.933 189.123 li
81.3589 189.123 li
81.3589 187.697 li
82.7859 187.697 li
82.7859 186.271 li
81.3589 186.271 li
81.3589 184.845 li
79.933 184.845 li
79.933 186.271 li
78.507 186.271 li
78.507 187.697 li
cp
0 1 1 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCG+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C34BC1722FEFB37BB58C35B527AE6A09491FA40D7E8E5CDDF40B1FA04CF4C0C7382C2F861C47E3D9F31951A352479B61220DAE3010153555D> |-/parenright <1C60D8A8C9B81F2C34BC1722DDC8F1B2A5255D3125BF196E18CC504ED91C8305BA71730C40B22B521DE97A022B4A559586A56D21ED89F0FFA70036F1C6B28C3F> |-/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9957E54B02A1B917BC7F58F0AFBE439533E1ED46D143AB7B6719EE7E0A26AAD917CFE50F9D8691660D06C3609FC503F9ECA5CDB98AFE470AC59DBE98B6FDB230F8752671ED6E8FF1CA85C9DF60AA97812A58FCE5F562EE9FCD8C494B7D75B4D71BD5A39C61E27> |-/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCAE69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252B18875F38C0C76ED1A659C37AD61> |-/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E00493971DEE8E5EAE9387F2DAF20B78B29FDD6FEE0B6539DE8A33498C1030568392E61F4D3AC749A9AF964BAC7AE995A2B5418E7F9778BBEB9A720A5B1929175BE14597229641042269FF> |-/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F935483A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF7911330405AF7E6F01E787476F0618434BE96954E00B578FFB147A39DAD333F304533F66B3B7418B04EE5BF9C8839EFB740337F67A7CADF9BAF26C32B55149B7D6557640A956083A5> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCG+Helvetica /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 71 /G putdup 78 /N putdup 86 /V putdup 101 /e putdup 115 /s putpop%ADOEndSubsetFont
/BRDZCG+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 13{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf99.837 25.39 mo( \(GeV)sh132.464 25.39 mo(\))shBRDZCG+Helvetica*1 [8.03 0 0 -8.03 0 0 ]msf88.249 29.847 mo(NN)[5.79767 0 ]xshBRDZCG+Helvetica*1 [12.491 0 0 -12.491 0 0 ]msf82.009 25.39 mo(s)sh1.5 lw
76.66 18.2589 mo
78.443 29.8469 li
@
.75 lw
78.443 29.8469 mo
81.117 14.6939 li
99.837 14.6939 li
@
501.256 65.2149 mo
392.36 65.2149 li
392.36 8.78264 li
392.984 8.78264 li
392.984 9.60583 li
393.734 9.60583 li
393.734 8.78264 li
409.499 8.78264 li
409.499 9.60583 li
410.249 9.60583 li
410.249 8.78264 li
426.015 8.78264 li
426.015 12.687 li
426.765 12.687 li
426.765 8.78264 li
442.531 8.78264 li
442.531 9.60583 li
443.281 9.60583 li
443.281 8.78264 li
459.047 8.78264 li
459.047 9.60583 li
459.797 9.60583 li
459.797 8.78264 li
475.563 8.78264 li
475.563 9.60583 li
476.313 9.60583 li
476.313 8.78264 li
492.079 8.78264 li
492.079 9.60583 li
492.829 9.60583 li
492.829 8.78264 li
501.256 8.78264 li
501.256 65.2149 li
0 0 0 0 cmyk
f
393.734 9.60583 mo
392.984 9.60583 li
392.984 8.78264 li
393.734 8.78264 li
393.734 9.60583 li
.74902 .678431 .670588 .901961 cmyk
f
410.249 9.60583 mo
409.499 9.60583 li
409.499 8.78264 li
410.249 8.78264 li
410.249 9.60583 li
f
426.765 12.687 mo
426.015 12.687 li
426.015 8.78264 li
426.765 8.78264 li
426.765 12.687 li
f
443.281 9.60583 mo
442.531 9.60583 li
442.531 8.78264 li
443.281 8.78264 li
443.281 9.60583 li
f
459.797 9.60583 mo
459.047 9.60583 li
459.047 8.78264 li
459.797 8.78264 li
459.797 9.60583 li
f
476.313 9.60583 mo
475.563 9.60583 li
475.563 8.78264 li
476.313 8.78264 li
476.313 9.60583 li
f
492.829 9.60583 mo
492.079 9.60583 li
492.079 8.78264 li
492.829 8.78264 li
492.829 9.60583 li
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCG+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B59F85670F17D121D03048ABEC998C210E7ADE0B6E5C845F08DA89C0242937A192D0FC5201C590C84392A971DA3D5FD3A4A3DDC6B6CA7F9023872600ACB8B9C851B63AA419AC1770B5648B3307111F5DE0DE1B54DDF8439F99FC466C2DED57058CB42965CF3A4B5066B78E8601B25F3F833D84310D974A59E53E2E72E23B947F13E02BEAAEAE36A207E483D03E218D54DCC0877E8125AEC2308582B3DFA0610A1DAEF79102F1B9C5FD48BC4D> |-/plus <1C60D8A8C9B7F374FF55710705644BE33420E0A427A4E7B532FC8288ADE03315B755CDE2AA8B86E23A9DE4093EF04A8AB08E98B02527D626> |-/comma <1C60D8A8C9B854D088EEB7F529386F280D9C87121678FF369865635B5BE904BC8BF5B2113F4BECD898> |-/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59DFAA60C2> |-/slash <1C60D8A8C9B854D07462C36D147388CBB0E1C3D6E589D5A8349FEF5C3A67E6906968> |-/less <1C60D8A8C9B7F374FCC1B6BA988EE2858AE9A9A9C108D448A994A99C0F75D21073C5E2976D28773081> |-/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8319F> |-/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E84761CC128BB54A99A2A93B5D172E1531D29A45A5EC5319CF1E95B80E971062C72FAD3638221F1DE8CAF0944510BAC08A4CEF565B8A02A0844021B6B090D7A375D228250481F641784B4F44BF6AAAF80BC7474E4FD1F885439> |-/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10CB8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-/T <1C60D8A8C9B7D8BE6A40C97BBF661CB0B8222F950E511FEAA4C1C13E5F9478F30E1367384EBB0E379956ACFD> |-/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F0077774DC7F3451D7D63DB42834E8CA98DCE698D771C88C86C56509FCA9984ADDEEE62525BCFA73F6F6096DC6AB209FB8ADE6BBD4C7CF55B8C6C5F841A7EC72D3B518EFB8CEC1C99E2B8BF674BC65088F62BA187A00F898BE8D4165CD761A12BB344D72D328F97537AD63F39573A6B34A862751483BBAF63C5AF3337E133F5270C22D63D051516B4F0B> |-/b <1C60D8A8C9B7EF32570F064FBD9F7171DC2FD9E56F2BF916779703F17874AE45B4CBE83CFEA4E3AAAD84AC7C0B682B92B32B09A01CDB64D5800BE3EB43F69FAAE43EFA5FB16806AD494E2709ED705919A189F3E88D5E2FAE72FE86E00E8C5D4F306C8A1320EA6084484B20ED9C63DFEF4D0E541EF2> |-/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7AE1C7D1CCEAF2E1097DCFFBFA904FBC8BD2781B69097605934011255CC1E77D974D42A5734080EC34301EC4BC5AA107FFDCEDB9EBE2B62B885971DC22E> |-/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F882286BFB8558FFDC99835F6318B6ABFB469C2D564BB0F5EAEF926B8044CD56E4E3AD78BD0C6E1DDDC794C81B0BFA328D16D8794BDD116779E1AB84C1373C8ED71030E0D172D0AC86C729163A4DA6830737683F05490FA341BA778F34D42B50DEA30638EA8F372A68EA0F05D2> |-/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B73057EF743A445B1F98A31FC055952928AC3289081739116519593380902589B67B3A0CC9127E4D1F87B8EC522A5AA4> |-/i <1C60D8A8C9B88C080EFCC82F89BA7CEC445252AFD9C466095706C3632A72A909DDBFB135AC84356031E8C02E54FBB26A6808DC1FFB183B155F5ECA24B946> |-/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5AE45> |-/m <1C60D8A8C9B6B41CC78139463B68644DCDC079B77E252B1BDBC174BFADBB0D9A7BDB307A532BE37687E1CA9BCA32275A14FC349F464A0A7087C4729843CFAE7A4B06C7BF18B20329649F3842C3E6CF34DF4774446F4782D13BE644BAD557DE15CAD7FA0F4FDD151916036D12981FA872142804DF17E14F13A898AF40B6BE598F5B7C7686EE> |-/n <1C60D8A8C9B7EF32570F064E9AB268C93CCC5A502AC76AA3605F6F842E0C6884B1AC78E4F6F7E0C35601D9142672E63805C6C437F58826490DDF1942A9DD9E1CCD138DDFD598A3C09163CA0FC236518D17D98D39776EB3E76C4DB2FFD5> |-/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A53F97896760D132F78F6B167CFAFA8CFB5D9561B5531C39C66F4BF3CE151A4BF4C30B42EB3D2B9A0463149463A6874D98E475CE2B3B76FD4C2B> |-/p <1C60D8A8C9B7EF32A838F0ADA05AA786C990062AB3976FCA46285A6C95C355A5E35AB5B99635A333B5C9B73AA4202FC4778B9B3023A398D35F71F7099602245497CD086B5AA920333D35D8117EF7085A3F10C35999099EC7686C760A6D191595EFE1C8ADFE2F37731C06DBD8A82DDA0B026C1289EA5DFBC3181AFE49C7625CE13EA0C427315C> |-/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC6A30439F08E2AF0F477AD569AEEAADCA862259957FD70803EF119CB651375205A6F149A33021106CE7C1F5B9BA801BEFCEB8F6C5F05C13FC2CB931C9F> |-/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F7493B73F86D2D59BD8ED1F2C3BD662709034A2A779D529AF125A278342C76D9DA0E4C390660AA8DCC02CC67E9DE7> |-/u <1C60D8A8C9B7EF32570F064E9AB268D41CA7E35CE8166E0A4F0529FA110A16D18CB853B9369274502A5E3D04A65A40EB79F08AEA22A5FC9FC51D714B9410F476552C7DCDCEA86A146F547E59A30F62A7EC6D35968DB8E64625E74E51> |-/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D24470C9B580A1092E3692A4C20563FB5> |-/y <1C60D8A8C9B7A73DB5828E2DB40A4006345BB6B47E4ECD963FC869C2369986F6D079AC4A862814B9396EC62742BEBE68094D631537FF4FEFEC3D4D521B318ECD9F5E6713E4DF8BA5BA1BB20AECA9928D44BC7FC6A0> |-/z <1C60D8A8C9B7A73DC507CAD0E5DFE643D31A4E6B11FABD4208D5037743204B31FEF10DBD97DC6225A0AD01031FB41D73CCE7> |-/bar <1C60D8A8C9B8666CC518B481EE97931D4E353CD202ABF6F65C0CD46E9C> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCG+Helvetica /Encoding getdup 37 /percent putdup 43 /plus putdup 44 /comma putdup 45 /hyphen putdup 47 /slash putdup 60 /less putdup 65 /A putdup 67 /C putdup 69 /E putdup 84 /T putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 102 /f putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 116 /t putdup 117 /u putdup 118 /v putdup 121 /y putdup 122 /z putdup 124 /bar putpop%ADOEndSubsetFont
/BRDZCG+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine 2{/.notdef}rp /less 4{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G 6{/.notdef}rp /N 5{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y /z /.notdef /bar 131{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [15.168 0 0 -15.168 0 0 ]msf388.65 23.607 mo(Au+Au Collisions)[10.1172 8.43341 8.85809 10.1172 8.43335 4.21674 10.9513 8.43341 3.36731 3.36731 3.36725 7.58405 3.36725 8.43341 8.43341 0 ]xshBRDZCG+Helvetica*1 [13.383 0 0 -13.383 0 0 ]msf407.369 42.327 mo(0-5%)sh438.605 42.327 mo( Central)shBRDZCG+Helvetica*1 [11.599 0 0 -11.599 0 0 ]msf409.152 58.514 mo(< 2.0 \(GeV/c\), |y|)[6.7738 3.58124 6.44904 3.22455 6.44904 3.22449 3.86237 9.02405 6.44904 7.73663 3.22449 5.7995 3.86243 3.22449 3.22455 3.01569 5.7995 0 ]xsh%ADOBeginSubsetFont: IBAAAA+Helvetica-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (IBAAAA+Helvetica)%%Title: (IBAAAA+Helvetica Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /IBAAAA+Helvetica def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-951 -481 1446 1122} def/FontInfo 4 dict dup begin/FSType 0 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 2252 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 2 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |3 <001C60D8A8C9B854D00D> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /IBAAAA+Helvetica-Identity-H /Identity-H 0 [/IBAAAA+Helvetica] ct_ComposeFont pop end end
%ADOEndSubsetFont
/BRDZCI+Helvetica /IBAAAA+Helvetica-Identity-H findfont ct_VMDictPutBRDZCI+Helvetica [11.599 0 0 -11.599 0 0 ]msf498.291 58.514 mo(\000\003)shBRDZCG+Helvetica*1 [11.599 0 0 -11.599 0 0 ]msf502.714 58.514 mo(<)shBRDZCI+Helvetica [11.599 0 0 -11.599 0 0 ]msf509.487 58.514 mo(\000\003)shBRDZCG+Helvetica*1 [11.599 0 0 -11.599 0 0 ]msf515.192 58.514 mo(0.5)shBRDZCG+Helvetica*1 [8.03 0 0 -8.03 0 0 ]msf401.129 63.72 mo(T)shBRDZCG+Helvetica*1 [11.599 0 0 -11.599 0 0 ]msf365.473 57.481 mo(0.4 < p)shBRDZCG+Helvetica*1 [0 -15.154 -15.154 0 0 0 ]msf16.045 211.693 mo(Normalized Number of Events)[-10.9412 -8.42563 -5.04614 -12.6232 -8.42563 -3.3642 -3.3642 -7.577 -8.42563 -8.42563 -4.2128 -10.9412 -8.4256 -12.6232 -8.42563 -8.42563 -5.04617 -4.2128 -8.42563 -4.2128 -4.21283 -10.1078 -7.57697 -8.4256 -8.42566 -4.21277 0 ]ysh1.5 lw
377.953 233.086 mo
383.301 233.086 li
@
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCG+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F37489A06F9529783C031558988C863E410A0DF584A69C5F43BA5C59A31785C289BA346D> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCG+Helvetica /Encoding getdup 61 /equal putpop%ADOEndSubsetFont
/BRDZCG+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A /.notdef /C /.notdef /E /.notdef /G 6{/.notdef}rp /N 5{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y /z /.notdef /bar 131{/.notdef}rp]BRDZCG+Helvetica nfBRDZCG+Helvetica*1 [14.262 0 0 -14.262 0 0 ]msf224.85 237.237 mo(Net-)[10.2972 7.92966 3.96484 0 ]xsh%ADOBeginSubsetFont: YAAAAA+Helvetica-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (YAAAAA+Helvetica)%%Title: (YAAAAA+Helvetica Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /YAAAAA+Helvetica def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-951 -481 1446 1122} def/FontInfo 4 dict dup begin/FSType 0 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 2252 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 2 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |83 <001C60D8A8C9B7EF322BA467487181334E9558775D6428189D55E9D34C4F145EB7B0AFDE71BD943EAD2625291FA9A16193769A731C98F5678015E874FB97759063C2E6FC5A7CDFAA71DB7328BC797CE21D59A3CB8441CB31A814ABACBB8500376D14C70270B6706855E5D1726D8DF0D05D1B659072720D1DAB10CD0971AD41775A305BD4376E572145CD3895F62CFC> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /YAAAAA+Helvetica-Identity-H /Identity-H 0 [/YAAAAA+Helvetica] ct_ComposeFont pop end end
%ADOEndSubsetFont
/BRDZCJ+Helvetica /YAAAAA+Helvetica-Identity-H findfont ct_VMDictPutBRDZCJ+Helvetica [14.262 0 0 -14.262 0 0 ]msf251.791 237.237 mo(\000S)shBRDZCG+Helvetica*1 [14.262 0 0 -14.262 0 0 ]msf259.72 237.237 mo(roton \()sh%ADOBeginSubsetFont: NAAAAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginBRDZCH+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Delta <1C60D8A8C9B7D7E8AF047AF249F32C42BF67B476D7CB41E1856C6ECAA15553CCFBA747B417F7C0FCE2BBCF> |-systemdict /gcheck known {setglobal} if end {end} ifendBRDZCH+Symbol /Encoding getdup 68 /Delta putpop%ADOEndSubsetFont
/BRDZCH+Symbol*1 [45{/.notdef}rp /minus 22{/.notdef}rp /Delta 187{/.notdef}rp]BRDZCH+Symbol nfBRDZCH+Symbol*1 [14.262 0 0 -14.262 0 0 ]msf300.937 237.237 mo(D)shBRDZCG+Helvetica*1 [14.262 0 0 -14.262 0 0 ]msf309.666 237.237 mo(N)shBRDZCG+Helvetica*1 [8.914 0 0 -8.914 0 0 ]msf319.965 239.02 mo(p)shBRDZCG+Helvetica*1 [14.262 0 0 -14.262 0 0 ]msf324.921 237.237 mo( = N)[4.35785 8.32898 4.35785 0 ]xshBRDZCG+Helvetica*1 [8.914 0 0 -8.914 0 0 ]msf350.77 239.02 mo(p)shBRDZCG+Helvetica*1 [14.262 0 0 -14.262 0 0 ]msf355.727 237.237 mo( - N)[4.35785 4.74915 4.35779 0 ]xshBRDZCG+Helvetica*1 [8.914 0 0 -8.914 0 0 ]msf378.011 239.02 mo(p)shBRDZCG+Helvetica*1 [14.262 0 0 -14.262 0 0 ]msf382.968 237.237 mo(\))shgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/BRDZCI+Helvetica-Identity-H uf/BRDZCI+Helvetica /CIDFont ur/BRDZCG+Helvetica*1 uf/BRDZCG+Helvetica uf/LAAAAA+Helvetica uf/BRDZCH+Symbol*1 uf/BRDZCH+Symbol uf/NAAAAA+Symbol uf/BRDZCJ+Helvetica-Identity-H uf/BRDZCJ+Helvetica /CIDFont urAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
