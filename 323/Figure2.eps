%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Figure2.pdf
%%Creator: (Adobe Acrobat 19.8.0)
%%For: Xiaofeng
%%CreationDate: 2020/9/21, 10:44 AM
%%BoundingBox: -157 157 410 567
%%HiResBoundingBox: -157 157 410 567
%%CropBox: -157 157 410 567
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 673 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 91.163280, 2018/06/22-11:31:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-09-10T10:37:42"
   xmp:CreatorTool="ROOT Version 6.20/04"
   pdf:Keywords="ROOT"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">plot1_tt_10Sept2020.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -567 translate
pgsv
[0 1 -1 0 410 0 ]ct
gsave
np
gsave
0 0 mo
0 567 li
410 567 li
410 0 li
cp
clp
410 567 mo
410 .0709839 li
-.480988 .0709839 li
-.480988 567 li
cp
false sop
0 0 0 0 cmyk
ef
.4 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
410 567 mo
410 .0709839 li
-.480988 .0709839 li
-.480988 567 li
cp
@
180.13 567 mo
180.13 255.189 li
20.042 255.189 li
20.042 567 li
cp
ef
180.13 567 mo
180.13 255.189 li
20.042 255.189 li
20.042 567 li
cp
@
180.114 490.606 mo
180.114 270.779 li
30.448 270.779 li
30.448 490.606 li
cp
ef
180.114 490.606 mo
180.114 270.779 li
30.448 270.779 li
30.448 490.606 li
cp
@
.75 lw
180.114 490.606 mo
180.114 270.779 li
30.448 270.779 li
30.448 490.606 li
cp
.75021 .679683 .670222 .90164 cmyk
@
180.114 490.606 mo
180.114 270.779 li
30.448 270.779 li
30.448 490.606 li
cp
0 0 0 0 cmyk
ef
.4 lw
180.114 490.606 mo
180.114 270.779 li
30.448 270.779 li
30.448 490.606 li
cp
@
.75 lw
180.114 490.606 mo
180.114 270.779 li
30.448 270.779 li
30.448 490.606 li
cp
.75021 .679683 .670222 .90164 cmyk
@
180.114 490.606 mo
180.114 270.78 li
@
178.139 482.507 mo
180.114 482.507 li
@
178.139 473.421 mo
180.114 473.421 li
@
178.139 465.739 mo
180.114 465.739 li
@
178.139 459.084 mo
180.114 459.084 li
@
178.139 453.214 mo
180.114 453.214 li
@
176.164 447.964 mo
180.114 447.964 li
@
178.139 413.42 mo
180.114 413.42 li
@
178.139 393.213 mo
180.114 393.213 li
@
178.139 378.876 mo
180.114 378.876 li
@
178.139 367.756 mo
180.114 367.756 li
@
178.139 358.67 mo
180.114 358.67 li
@
178.139 350.987 mo
180.114 350.987 li
@
178.139 344.333 mo
180.114 344.333 li
@
178.139 338.463 mo
180.114 338.463 li
@
176.164 333.212 mo
180.114 333.212 li
@
178.139 298.668 mo
180.114 298.668 li
@
178.139 278.462 mo
180.114 278.462 li
@
30.448 490.606 mo
30.448 270.78 li
@
32.423 482.507 mo
30.448 482.507 li
@
32.423 473.421 mo
30.448 473.421 li
@
32.423 465.739 mo
30.448 465.739 li
@
32.423 459.084 mo
30.448 459.084 li
@
32.423 453.214 mo
30.448 453.214 li
@
34.398 447.964 mo
30.448 447.964 li
@
32.423 413.42 mo
30.448 413.42 li
@
32.423 393.213 mo
30.448 393.213 li
@
32.423 378.876 mo
30.448 378.876 li
@
32.423 367.756 mo
30.448 367.756 li
@
32.423 358.67 mo
30.448 358.67 li
@
32.423 350.987 mo
30.448 350.987 li
@
32.423 344.333 mo
30.448 344.333 li
@
32.423 338.463 mo
30.448 338.463 li
@
34.398 333.212 mo
30.448 333.212 li
@
32.423 298.668 mo
30.448 298.668 li
@
32.423 278.462 mo
30.448 278.462 li
@
180.114 490.606 mo
30.448 490.606 li
@
165.148 480.403 mo
165.148 490.606 li
@
150.181 485.505 mo
150.181 490.606 li
@
135.215 480.403 mo
135.215 490.606 li
@
120.248 485.505 mo
120.248 490.606 li
@
105.281 480.403 mo
105.281 490.606 li
@
90.315 485.505 mo
90.315 490.606 li
@
75.348 480.403 mo
75.348 490.606 li
@
60.382 485.505 mo
60.382 490.606 li
@
45.415 480.403 mo
45.415 490.606 li
@
165.148 480.403 mo
165.148 490.606 li
@
180.114 485.505 mo
180.114 490.606 li
@
45.415 480.403 mo
45.415 490.606 li
@
30.448 485.505 mo
30.448 490.606 li
@
180.114 270.78 mo
30.448 270.78 li
@
165.148 280.982 mo
165.148 270.78 li
@
150.181 275.881 mo
150.181 270.78 li
@
135.215 280.982 mo
135.215 270.78 li
@
120.248 275.881 mo
120.248 270.78 li
@
105.281 280.982 mo
105.281 270.78 li
@
90.315 275.881 mo
90.315 270.78 li
@
75.348 280.982 mo
75.348 270.78 li
@
60.382 275.881 mo
60.382 270.78 li
@
45.415 280.982 mo
45.415 270.78 li
@
165.148 280.982 mo
165.148 270.78 li
@
180.114 275.881 mo
180.114 270.78 li
@
45.415 280.982 mo
45.415 270.78 li
@
30.448 275.881 mo
30.448 270.78 li
@
1.5 lw
180.13 490.606 mo
180.13 270.78 li
@
30.448 490.606 mo
30.448 270.78 li
@
180.13 490.606 mo
30.448 490.606 li
@
180.13 270.78 mo
30.448 270.78 li
@
.75 lw
[3 3 ] 0 dsh
165.148 490.606 mo
165.148 270.78 li
.883909 .76556 0 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c0000036c6670676d000000000000049800000a1d
676c79660000000000005ebc0003f580686561640000000000000eb80000
0036686865610000000000000ef000000024686d74780000000000000f14
000022546c6f63610000000000003168000022586d617870000000000000
53c0000000206e616d6500000000000053e00000070c7072657000000000
00005aec000003cf67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d00000000010000000000004e8abc9e
5f0f3cf500110800000000005f4d8f0000000000d7c5a882f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000089505120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c021a004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d0024054c00980556009804270098059c002505560098
07f0000a0554004505c7009805c7009805560098057e002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06d80041
0556002505db009805360060078d009807a1009806aa001d070900980536
009805c700640800009805b7006a04730056047300480462008703390087
04d9001c04730050063d00170400003304ab008704ab0087046200870498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404910087044e005c063900870657008704e3
001b05c7008703ff00870414002f06390087047700500556009804730050
0427009803390087023900ba01c700870400002305c70050040000480239
001d020300290800002506c3001b07e10098067c008701c7ffdd05560062
0639004e0473001b0556009804620087040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000000000000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df009604860052048600870723000a0589
0017056d002404860043056d002404860043056d00750486005208d90010
06dd0012054f0043040a003005df00960486008705df0096048600870655
00500486005205df006004120037056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800980600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc730000fc730000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090428005803b7006b
0497007104b0004f0797004a0418006a045a005505d5004c07a9004404bf
004b03e0003b0965004a03f900560419004e06ed004a0420003f04500050
06a3004a03f3004d0633006006b90047064000440419004b0667004503be
003e043d003d03d60052048400440412004a041600460497003903fa0058
0650002d03cd005e0560005604950032045e005503e9003e0462005406c2
0049044500f604d500b10473005e0473002f000000000000006c0000006c
0000006c0000006c000000cc0000011c0000028000000430000005c00000
07500000079400000824000008a80000099800000a0000000a6400000aa0
00000ae000000b2800000c0400000c5000000d6800000ec000000f5c0000
1084000011b000001244000013a8000014d40000152c000015a80000163c
0000168c0000172400001828000019d800001af000001bf800001d180000
1ddc00001e6400001ec80000201800002088000020b80000213c00002230
00002280000023980000244400002540000025ec00002760000028740000
2a0c00002a6800002af800002bb400002d4c00002e4400002f0800002fa0
00002ff800003058000030bc000031540000317c000031a80000333c0000
341000003514000035ec00003780000038180000396800003a0800003a64
00003ad800003bb800003bfc00003cf400003dac00003e9c00003f800000
4068000040f4000042b400004354000044080000453400004690000046f0
0000481c000048bc0000499c000049e000004adc00004b9800004bb00000
4bc800004d9000004da800004dc000004dd800004df000004e0800004e20
00004e3800004e5000004e6800004e800000502c000050440000505c0000
50740000508c000050a4000050bc000050d4000050ec000051040000511c
000051340000514c000051640000517c00005194000051ac000051c40000
51dc00005238000052b00000547400005600000057cc00005858000058cc
000059e400005b8400005ce800005dcc00005dfc00005e6400005f440000
60280000620400006358000063e000006480000065300000665000006750
0000688800006954000069b400006a6400006aec00006c4800006d1c0000
6e3c000070640000720c0000730400007368000073ac0000745c00007598
000076900000771c000077cc00007880000078ec000078ec000079040000
791c0000793400007a6000007c4000007c7800007cb400007d5400007de4
00007e4400007ea400007f1400007ffc000080140000802c0000808c0000
81f800008268000082d80000839c0000844c000084d0000085280000858c
0000862000008848000088600000887800008890000088a8000088c00000
890c0000897c000089fc00008a4800008a6000008a7800008b2000008b38
00008b5000008b6800008b8000008bd000008c1400008c9800008cc40000
8d2000008d5000008e6400008f4800008f900000905c0000909c0000916c
000091fc000092140000922c000092440000925c000092b8000093a80000
95100000952800009540000095f8000096c4000096ec000097a4000097f0
000098a80000999c00009a9400009ba400009d7000009e2800009f9c0000
a1140000a16c0000a39c0000a5d80000a5f00000a6080000a6200000a638
0000a7000000a7180000a7300000a7c80000a98c0000a9a40000a9bc0000
a9d40000a9ec0000aa040000aa1c0000aa340000ab6c0000ab840000ab9c
0000ac480000ad500000ad680000ad800000ad980000adb00000adc80000
ade00000adf80000ae100000ae280000ae400000ae580000ae700000ae88
0000aea00000aeb80000afa00000afb80000b0580000b0700000b0b40000
b0cc0000b1c40000b1dc0000b2640000b27c0000b2940000b2ac0000b2c4
0000b2dc0000b2f40000b30c0000b3240000b33c0000b3cc0000b42c0000
b4440000b45c0000b4740000b48c0000b4a40000b4bc0000b4d40000b4ec
0000b5040000b51c0000b5340000b6b00000b8180000b8300000b8480000
b8600000b8780000b8900000b8a80000b8c00000b8d80000b8f00000b908
0000b9200000b9380000b9500000b9680000b9800000ba980000bab00000
bac80000bae00000baf80000bb100000bb280000bbf40000bcdc0000bcf4
0000bd0c0000bd240000bd3c0000bd540000bd6c0000bd840000bd9c0000
bdb40000bdcc0000bde40000bdfc0000be140000be2c0000bfc00000c154
0000c1e80000c2e40000c44c0000c4780000c4a80000c4ec0000c5700000
c59c0000c5fc0000c62c0000c68c0000c79c0000c7e40000c8240000c878
0000c9540000ca200000ca4c0000cb380000cb500000cb6c0000cb840000
cb9c0000cbb40000cbcc0000cbe40000cbfc0000cc140000cc2c0000cca8
0000cd200000cd4c0000cd9c0000ce040000ce7c0000cf340000cfec0000
d0b00000d2340000d2f40000d3200000d3800000d3980000d3b00000d450
0000d5140000d55c0000d5b40000d6a80000d8380000d8740000d9440000
d9a40000da500000dbc40000dc5c0000dd240000dd900000de200000dedc
0000df640000e0b00000e1180000e1fc0000e2f00000e3380000e3a80000
e5500000e5bc0000e6400000e6e80000e75c0000e8080000e8fc0000e9f8
0000eae40000ebcc0000ecf40000ee6c0000eff80000f1c80000f3340000
f3700000f4340000f5200000f5c80000f7040000f79c0000f8640000f8cc
0000f9580000fa140000fa9c0000fbd80000fc3c0000fd880000fe7c0000
fec40000ff3000010178000101e000010264000103040001037800010424
0001051800010614000106fc000107c0000108dc00010a1c00010abc0001
0bc800010c2000010c7c00010cac00010cfc00010d8c00010e5c00010f18
00010f9800011018000111640001129c000113c0000114e4000115680001
16b8000117700001185c000118e80001197000011a5800011b9c00011c98
00011d4800011df400011e6800011edc00011f4800011fb4000120080001
205c000120b0000121040001215000012184000121ec000122600001228c
000122b8000122e4000123140001237400012484000124b4000124f40001
253800012594000125f400012678000126a4000126d00001275400012780
000127ac000127ec00012908000129480001299c000129fc00012a8c0001
2af400012af400012b9400012c2c00012cfc00012d6c00012e6800012ed8
00012f480001304400013190000131e40001326c0001330c000133b00001
33f800013470000134f4000135d8000136bc0001379c0001380c00013918
00013a2000013af800013c1800013d7c00013ddc00013f48000140440001
409c00014154000142240001438c000143bc000144200001447c0001452c
000145e80001463c0001466c0001469c00014a7c00014ae000014b100001
4bb800014c1400014c4000014cc400014d0c00014d5000014db000014e0c
00014e3800014e6800014e9400014ec000014ef400014ef400014ef40001
4ef400014ef400014ef400014ef400014ef400014ef400014ef400014ef4
00014ef400014ef400014ef400014ef400014ef400014ef400014ef40001
4ef400014ef400014ef400014ef400014ef400014ef400014ef400014f30
00014f94000150bc000150e8000150fc00015154000151b4000151cc0001
5224000152dc0001545c000155c800015620000156bc00015758000157b0
0001592c000159d400015a2000015b3400015bd800015c9000015d8c0001
5e2400015f0000015f740001601c00016060000160c0000161000001612c
00016194000161dc0001622400016270000162bc000163300001635c0001
63a0000163cc000163f80001641000016420000164380001644800016460
00016470000164880001649c000164b4000164c4000164dc000164ec0001
65040001651c0001652c0001653c00016554000165740001658c0001659c
000165b4000165d4000165fc00016614000166240001663c0001665c0001
666c0001667c0001668c0001669c000166ac000166c4000166e4000166fc
0001670c00016724000167440001676c0001678400016794000167ac0001
67cc000167dc000167ec000167fc0001680c0001682c0001684c0001686c
000168840001689c000168b4000168cc000168e4000168fc000169140001
692c000169440001695c000169740001698c000169a4000169bc000169dc
000169fc00016a1c00016a3c00016a5c00016a7c00016a9c00016abc0001
6adc00016afc00016b1c00016b3c00016b5400016b6c00016b8400016b9c
00016bb400016bcc00016be400016bfc00016c1c00016c3c00016c540001
6c6c00016c8400016c9c00016cb400016ccc00016ce400016d0400016d24
00016d3c00016d5400016d6c00016d8400016d9c00016db400016dcc0001
6de400016dfc00016e1400016e2c00016e4400016e5c00016e7400016e8c
00016ea400016ebc00016ed400016eec00016f0400016f1c00016f340001
6f4c00016f6400016f7c00016f9400016fac00016fc400016fdc00016ff4
0001700c000170240001703c000170540001707400017094000170b40001
70d4000170ec0001710400017124000171440001715c0001717400017184
00017194000171ac000171c4000171dc000171f40001720c000172240001
723c000172540001726c000172840001729c000172b4000172cc000172e4
000172fc000173140001732c000173440001735c00017374000173940001
73b4000173d4000173f40001740c000174240001743c0001745400017474
00017494000174ac000174c4000174dc000174f40001750c000175240001
753c000175540001756c000175840001759c000175b4000175cc000175e4
000175fc0001761400017634000176540001766c000176840001769c0001
76b4000176cc000176e4000176fc0001771400017734000177540001776c
000177840001779c000177b4000177cc000177e4000177fc000178140001
782c000178440001785c000178740001788c000178a4000178bc000178d4
000178ec0001790400017924000179440001796400017984000179a40001
79c4000179e400017a0400017a1c00017a3400017a4c00017a6400017a7c
00017a9400017aac00017ac400017ae400017b0400017b1c00017b340001
7b4c00017b6400017b7c00017b9400017bb400017bd400017bf400017c14
00017c3400017c5400017c6c00017c8400017c9c00017cb400017ccc0001
7ce400017cfc00017d1400017d2c00017d4400017d5c00017d7400017d8c
00017da400017dc400017de400017e0400017e2400017e3c00017e540001
7e6c00017e8400017e9c00017eb400017ecc00017ee400017efc00017f14
00017f2c00017f4400017f5c00017f7400017f8c00017fa400017fbc0001
7fd400017fec000180040001801c000180340001804c000180640001807c
00018094000180ac000180c4000180dc000180f40001810c000181240001
813c000181540001816c0001818c000181ac000181cc000181ec0001820c
0001822c0001824c0001826c0001828c000182ac000182cc000182ec0001
830c0001832c0001834c0001836c0001838c000183ac000183cc000183ec
000184040001841c000184340001844c000184640001847c0001849c0001
84bc000184dc000184fc0001851c0001853c0001855c0001857c0001859c
000185bc000185d4000185ec000186040001861c000186340001864c0001
86640001867c0001869c000186bc000186dc000186fc0001871c0001873c
0001875c0001877c0001879c000187bc000187d4000187ec000188040001
881c000188340001884c000188640001887c00018894000188ac000188c4
000188dc000188f40001890c000189240001893c000189540001896c0001
89840001899c000189b4000189cc000189e4000189fc00018a1400018a2c
00018a4400018a5c00018a7400018a8c00018aa400018abc00018adc0001
8afc00018b1c00018b3c00018b5400018b6c00018b8400018b9c00018bb4
00018bcc00018be400018bfc00018c1400018c2c00018c4400018c5c0001
8c7400018c8c00018ca400018cbc00018cd400018cec00018d0400018d1c
00018d3400018d4c00018d6400018d7c00018d9400018dac00018dc40001
8ddc00018df400018e0c00018e2400018e3c00018e5400018e6c00018e7c
00018e8c00018ea400018ebc00018ed400018eec00018fa4000190040001
9184000191c0000191fc0001925c000192a400019324000194a4000194d4
0001953c0001958400019638000196bc0001971000019878000198dc0001
99b000019a0800019a5000019ab000019c4000019cac00019dec00019f54
00019fdc0001a0740001a1bc0001a3840001a41c0001a5940001a6e80001
a8000001a8a00001a99c0001aa0c0001aa780001aaf40001abf40001ac38
0001adb00001aef00001b0140001b12c0001b27c0001b2fc0001b37c0001
b5080001b5d40001b6880001b8200001b8d00001b9880001b9d40001ba34
0001ba980001baf40001bb500001bbac0001bbd80001bc080001bc640001
bcfc0001bda00001be100001be800001beac0001bed80001bf480001bfd4
0001c0440001c0d80001c2680001c3d40001c5340001c5900001c5ec0001
c6040001c61c0001c6340001c6540001c6740001c6940001c6b40001c6d4
0001c6ec0001c7040001c7240001c7440001c7640001c7840001c7a40001
c7c40001c7dc0001c7f40001c80c0001c82c0001c84c0001c86c0001c88c
0001c8a40001c8bc0001c8dc0001c8fc0001c9140001c92c0001c9440001
ca000001caf00001cb980001cc2c0001cd380001cd740001ce500001cf4c
0001cfc00001d0380001d1740001d2300001d3200001d3d00001d4640001
d53c0001d5800001d5e40001d6480001d8900001d9380001d99c0001da00
0001da2c0001da580001da700001da880001daa00001dab80001dae40001
db7c0001dc0c0001dc800001dcf40001dd840001de4c0001df940001e0d0
0001e1f40001e3540001e4380001e5500001e5c40001e7200001e7dc0001
e8980001e9d80001eab00001eb680001eca80001ee940001ef940001f104
0001f2500001f2b40001f3140001f3b00001f40c0001f43c0001f4680001
f4980001f4c40001f4f40001f51c0001f5480001f5740001f5d40001f670
0001f6b00001f6f00001f78c0001f8700001f8dc0001f9500001f9cc0001
fa600001fad40001fb4c0001fc300001fd140001fd540001fd940001fdd8
0001fe1c0001fe480001feb00001ff180001ff84000200e8000201500002
0180000201cc00020268000202ac000202f0000203300002037000020480
00020564000205b0000205f00002063000020680000206d0000207300002
07900002080c0002084c000208b0000208fc000209d000020a0c00020a0c
00020a0c00020a0c00020a0c00020a0c00020aa000020bac00020c240002
0c8800020d1000020d2800020dd000020f0c00020fb0000210240002109c
0002109c0002109c0002109c0002109c0002109c0002109c0002124c0002
1374000213f8000214e0000216340002168400021868000219cc00021a34
00021a5c00021a9c00021b5000021bfc00021ca800021dd000021e100002
1ebc00021ff40002207800022160000222b400022304000224e400022648
000226b0000226d800022718000227cc00022878000228dc000229f80002
2a3400022a7000022acc00022b4c00022d4000022e2000022e9800022f70
00022fc8000230a80002324000023280000232f800023310000233200002
34000002352c0002360c0002372c000237b4000238f80002397800023a20
00023ab000023c2c00023cb800023d6800023ec000024014000240680002
40c0000241ec000242040002421c000242340002424c000242640002427c
00024294000242ac000242c4000242dc000242f40002430c000243240002
433c000243540002436c000243840002439c000243b4000243cc000243e4
000243fc000244140002442c000244440002445c000244740002448c0002
44a4000244bc000244d4000244ec000245040002451c000245340002454c
000245640002457c00024594000245ac000245c4000245dc000245f40002
460c000246240002463c000246540002466c000246840002469c000246b4
000246cc000246e4000246fc000247140002472c000247440002475c0002
47740002478c000247a4000247bc000247d4000247ec000248040002481c
000248340002484c000248640002487c00024894000248ac000248c40002
48dc000248f40002490c000249240002493c000249540002496c00024984
0002499c000249b4000249cc000249e4000249fc00024a1400024a2c0002
4a4400024a5c00024a7400024a8c00024aa400024abc00024ad400024aec
00024b0400024b1c00024b3400024b4c00024b6400024b7c00024b940002
4bac00024bc400024bdc00024bf400024c0c00024c2400024c3c00024c54
00024c6c00024c8400024c9c00024cbc00024cdc00024cfc00024d1c0002
4d3c00024d5c00024d7c00024d9c00024dbc00024ddc00024dfc00024e1c
00024e3c00024e5c00024e7c00024e9c00024ebc00024edc00024efc0002
4f1c00024f3c00024f5c00024f7c00024f9c00024fbc00024fdc00024ffc
0002501c0002503c0002505c0002507c0002509c000250bc000250dc0002
50fc0002511c0002513c0002515c0002517c0002519c000251bc000251dc
000251fc0002521c0002523c0002525c0002527c0002529c000252b40002
52cc000252ec00025304000253240002533c0002535c000253740002538c
000253a4000253bc000253d4000253f40002540c0002542c000254440002
54640002547c00025494000254ac000254c4000254dc000254f40002550c
000255240002553c000255540002556c000255840002559c000255b40002
55cc000255e4000255fc000256140002562c000256440002565c00025674
0002568c000256a4000256bc000256d4000256ec00025704000257240002
573c0002575c0002577400025794000257ac000257c4000257dc000257f4
0002580c000258240002583c000258540002586c000258840002589c0002
58b4000258cc000258e4000258fc000259140002592c000259440002595c
000259740002598c00025a5c00025aa800025afc00025bb400025c200002
5c3800025c5800025c7800025c9800025cb800025cd800025cf800025d18
00025d3800025d5800025d7800025d9800025db800025dd800025df80002
5e1800025e3800025e5800025e7800025e9800025eb800025ed800025ef8
00025f1800025f3800025f5800025f7800025f9800025fb800025fd80002
5ff80002601800026038000260580002607800026098000260b8000260d8
000260f80002611800026138000261580002617800026198000261b80002
61d8000261f80002621800026238000262580002627800026298000262b8
000262d0000262e800026300000263180002633000026348000263600002
637800026390000263a8000263c0000263d8000263f00002640800026420
00026438000264500002646800026488000264a0000264b8000264d00002
64e800026500000265180002653000026548000265680002658000026598
000265b0000265c8000265e0000265f80002661000026628000266480002
66600002667800026690000266a8000266c0000266d8000266f000026708
0002672800026740000267580002677000026788000267a0000267b80002
68e000026a0c00026b8c00026be400026c9800026dac00026e6800026ea0
00026f4000026f5800027040000270dc000272d800027508000276e00002
78fc00027bb800027da000027f04000280280002814c0002824800028310
000284500002850400028580000285fc000286d8000287c4000288740002
891800028a0000028b1800028c1400028e7000028f5800028fa400028ff0
000290840002912c000291c400029260000292c80002932c000294000002
94d4000296c400029924000299b400029a3800029ac800029b5800029c88
00029dac00029e1000029e7800029f0800029f9c0002a0300002a0dc0002
a1600002a1f40002a2500002a2ac0002a3040002a35c0002a41c0002a4d4
0002a5800002a61c0002a6e00002a7680002a80c0002a8900002a9280002
a9a80002aaa00002ab900002ad200002aeac0002af400002aff80002b098
0002b1440002b31c0002b4380002b5540002b6dc0002b8100002b95c0002
baac0002bb1c0002bb840002bc280002bcdc0002bdac0002bee00002c02c
0002c0d00002c1780002c1a80002c2480002c2e00002c3280002c39c0002
c4c00002c6000002c67c0002c7240002c7740002c7e00002c8480002c920
0002ca040002cacc0002cba80002ccfc0002cdb00002ce580002ceec0002
cf2c0002cf8c0002cfd40002d0200002d04c0002d0d00002d12c0002d194
0002d1d80002d2940002d3300002d3b00002d40c0002d4a80002d5800002
d6000002d6800002d7200002d7f80002d88c0002d9240002da140002db40
0002dc180002dce80002ddb00002df180002dff80002e0fc0002e2080002
e2d80002e3cc0002e4c40002e5fc0002e7ac0002e89c0002e9a00002ea54
0002eafc0002ebc00002ecc00002ecfc0002ed380002ed740002edac0002
edf80002ee340002ee780002eebc0002ef100002ef640002efbc0002eff8
0002f0540002f0d80002f1900002f2480002f3980002f40c0002f4ec0002
f6480002f7500002f7900002f8c80002fa040002fa400002fafc0002fb34
0002fb6c0002fc240002fce00002fd280002fdf00002ff0c0002ffa40003
003c000300ac000300d800030104000301ac000301d4000302180003025c
000302bc000303040003038400030404000304fc0003054c000305780003
05a400030754000308c40003099400030a6800030b7c00030c2800030c90
00030d0c00030d7c00030e1000030e6c00030ebc00030eec00030f800003
111000031174000311c000031290000313640003143800031514000316fc
000317f0000318f4000319e000031af400031c6c00031c8400031c9c0003
1cb400031d1c00031db800031dfc00031e7400031ed800031f7000032058
0003227000032488000326300003265c00032688000326bc000326f00003
272c00032768000327a4000327e00003281c0003285800032894000328d0
000328fc000329e400032a3000032bb000032c5800032d7000032dd80003
2e8800032fac00033104000332400003338c000334c40003356000033664
0003382c00033ab800033ccc00033e3000033fa4000340580003422c0003
43d8000344300003448c00034530000345ec000346900003474c000347f8
000348b80003496400034a2400034ae400034ba000034c5c00034d180003
4dd400034e9400034f500003500c000350c800035188000351c400035210
0003525c000352a8000352e4000353a4000353f40003549c000354e00003
5608000357dc000358340003597800035ac000035afc00035b3800035b74
00035bb000035c0400035c5400035cc800035d9c00035e7800035e900003
5ea800035f84000360440003610400036288000364000003651c00036724
0003682c00036930000369dc00036a8c00036b8400036c8400036db00003
6e0000036e7000036f480003701000037128000371f80003727800037348
0003747000037518000375bc0003769000037760000377a4000379640003
7a0000037b8800037c5c00037dac00037ec000037f94000380a8000381cc
000382a80003845c000385c000038690000386e000038754000387f80003
883c000389fc00038a9800038bbc00038c8c00038de400038e8400038ed4
00038f500003910000039258000393ec00039580000396d8000398880003
998800039a6000039bc400039c2000039cd000039d2c00039dd400039e34
00039ee000039f3c00039fe80003a1580003a1c00003a2e40003a4f80003
a5680003a6980003a6e00003a7cc0003a9640003a9ec0003aad80003ac30
0003ac840003ae700003afdc0003b0200003b05c0003b0a00003b1740003
b2f00003b4c40003b6140003b8640003b9300003bab80003bd240003bee0
0003bfe80003c1640003c3a80003c4fc0003c6a00003c8480003c9d00003
cb400003ccc00003cda00003d0b40003d2ac0003d52c0003d6080003d7c0
0003d8b00003da780003dbe40003ddb80003ded00003e08c0003e2640003
e3d00003e6b00003e8ec0003eb3c0003ecd00003ee100003efdc0003f178
0003f3880003f40c0003f45c0003f54c0003f58000010000089500920009
006b0007000200100010005d000007e80a1d000400010000003902b20001
000000000000005000000001000000000001000900500001000000000002
000700590001000000000003001f02160001000000000004000902350001
0000000000050008023e0001000000000006000902460001000000000007
0032024f0001000000000012000903f80001000000000100000904010001
0000000001010010040a0001000000000102000e041a0001000000000103
0014042800010000000001040012043c00010000000001050009044e0001
000000010007002f02810001000000020007003c02b00001000000030007
003002ec0001000000040007003a031c0001000000050007003603560001
0000000600070030038c0001000000070007003c03bc0003000104030002
000c01580003000104040002000600cc0003000104050002000e01760003
000104060002000c00e60003000104070002000c007c0003000104080002
000801920003000104090002000e006000030001040b0002001000f20003
0001040c0002000e006e00030001040d00020008019a00030001040e0002
000c01a20003000104100002001000a80003000104110002000a00880003
000104120002000600b80003000104130002001000980003000104140002
000c01020003000104150002000e010e0003000104160002000c00da0003
000104180002000c01c60003000104190002000e012a00030001041a0002
0012016400030001041b0002000e01d200030001041d0002000c01380003
0001041e00020008014400030001041f0002000c014c0003000104210002
000e01ae0003000104220002001201e000030001042a0002001801fe0003
000104390002000c01f200030001043e0002000a01bc0003000108040002
000600920003000108090002000e01840003000108160002000e011c0003
00010c010002000800d2000300010c0a0002000e00bea920313939302d32
303036204170706c6520436f6d707574657220496e632e20a92031393831
204c696e6f7479706520414720a920313939302d3931205479706520536f
6c7574696f6e7320496e632e48656c766574696361526567756c61720052
006500670075006c006100720043006f007500720061006e0074004e006f
0072006d0061006c30ec30ae30e530e930fc5e3889c44f53005200650067
0075006c006900650072005200650067006f006c006100720065c77cbc18
ccb40052006500670075006c006100726a196e969ad406390627062f064a
004e006f0072006d0061006c004e006f0072006d0061006c004e006f0072
006d00610061006c0069004e006f0072006d0061006c0052006500670075
006c006100720052006500670075006c00610072041e0431044b0447043d
044b0439004e006f0072006d0061006c0e1b0e010e150e34004e006f0072
006d0061006c004e006f0072006d0061006c0052006500670075006c0061
0072006e00690052006500670075006c006100720052006500670075006c
00610072039103c003bb03ac05e805d205d905dc004e006f0072006d00e1
006c0052006500670075006c0065007200420069006100730061004e006f
0072006d0061006c0052006500670075006c006100720417043204380447
04300439043d043804390928093f092f092e093f09240054006800f4006e
006700200074006801b01edd006e006748656c7665746963613b2031332e
30643265323b20323031382d30392d313748656c76657469636131332e30
6432653248656c76657469636148656c7665746963612069732061207265
67697374657265642074726164656d61726b206f66204c696e6f74797065
20414748656c7665746963612065737420756e65206d617271756520648e
706f738e65206465204c696e6f7479706520414748656c76657469636120
6973742065696e2065696e676574726167656e657320576172656e7a6569
6368656e20646572204c696e6f7479706520414748656c76657469636120
8f20756e206d61726368696f207265676973747261746f206469204c696e
6f7479706520414748656c7665746963612069732065656e206765726567
69737472656572642068616e64656c736d65726b2076616e204c696e6f74
79706520414748656c766574696361208a72206574742072656769737472
6572617420766172756d8a726b6520669a72204c696e6f74797065204147
48656c76657469636120657320756e61206d617263612072656769737472
616461206465204c696e6f7479706520414748656c766574696361206572
20657420726567697374726572657420766172656dbe726b652074696c68
bf72656e6465204c696e6f7479706520414748656c7665746963614c6967
617475726573436f6d6d6f6e204c69676174757265734e756d6265722053
706163696e6750726f706f7274696f6e616c204e756d626572734d6f6e6f
737061636564204e756d626572734e6f204368616e6765000000b800532b
b800492bb8003f2bb800352bb8002b2b4118008001a6009001a600a001a6
00030069018b0079018b0089018b0099018b00040089018b0099018b00a9
018b00b9018bb2040840ba0179001a014a400b041f5414191f180a0b1fd2
b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a0019f0064
001f01a50025017a00480028019ab3296c1f60410a01a9007001a9008001
a90003008001a9000101a9b21e321fbe012c00250401001f0126001e0401
b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f1fc01d
9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c1f931e
b8019ab21f921db80101b21f911db80101b21f751db80201b61f6d29961f
6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f351de41f
2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801254011
1f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1f
ba019b0025017ab349293896b8017bb348283125b8017a40364828962948
2725294c1f252946272729482756c80784075b07410732072b0728072607
21071b071408120810080e080c080a08080807b801acb23f1f06bb01ab00
3f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7080408
0208000814b8ffe0b40000010014b801abb41000000100b801abb6061000
00010006b801adb300000100b801ad401f04000001000410000001001002
000001000200000001000002010802004a00b0018db806008516763f183f
123e113946443e113946443e113946443e113946443e113946443e113946
60443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff
1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a
66456523456023456560234560b08b766818b080622020b16a7045652345
20b003266062636820b003266165b070236544b06a234420b17666456523
4520b003266062636820b003266165b066236544b0762344b10066455458
b166406544b27640764523614459b36242725d4565234560234565602345
60b089766818b080622020b172424565234520b003266062636820b00326
6165b042236544b072234420b1625d4565234520b003266062636820b003
266165b05d236544b0622344b1005d455458b15d406544b2624062452361
44592b2b2b2b456953427374b8019a2045694b20b02853b049515a58b020
615944b801a620456944750000>
[16257 16277 16153 16221 16373 16377 16265 16181 16381 16269 16333 16361 16205
16201 16177 15441 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Helvetica AddT42Char 
1 1940 11 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>Helvetica AddT42Char 
1 2084 12 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>Helvetica AddT42Char 
1 2856 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>Helvetica AddT42Char 
1 3076 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>Helvetica AddT42Char 
1 3152 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>Helvetica AddT42Char 
1 3432 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>Helvetica AddT42Char 
1 3776 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>Helvetica AddT42Char 
1 7160 38 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/C 38 def
end
Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 67 /C put
pop
end
%ADOEndSubsetFont
/BRDZCK+Helvetica /Helvetica findfont ct_VMDictPut/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four 14{/.notdef}rp /C 188{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -11.8775 -11.8775 0 0 0 ]msf169.391 499.361 mo(0)sh139.444 506.073 mo(10)[-6.60391 0 ]ysh109.497 506.073 mo(20)[-6.60391 0 ]ysh79.549 506.073 mo(30)[-6.60391 0 ]ysh49.602 506.073 mo(40)[-6.60391 0 ]yshBRDZCK+Helvetica*1 [0 -15.4924 -15.4924 0 0 0 ]msf52.7 351.175 mo(\(1\) C)[-5.15887 -8.61377 -5.15884 -4.30688 0 ]yshBRDZCK+Helvetica*1 [0 -11.3611 -11.3611 0 0 0 ]msf55.798 317.613 mo(1)sh127.731 470.695 mo
121.122 470.695 121.122 460.782 127.731 460.782 cv
134.34 460.782 134.34 470.695 127.731 470.695 cv
cp
f
127.731 468.837 mo
123.601 468.837 123.601 462.641 127.731 462.641 cv
131.862 462.641 131.862 468.837 127.731 468.837 cv
cp
0 0 0 0 cmyk
f
127.731 468.837 mo
123.601 468.837 123.601 462.641 127.731 462.641 cv
131.862 462.641 131.862 468.837 127.731 468.837 cv
cp
0 1 1 0 cmyk
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
1 1072 8 <00050042ffda06d00592000b000f001b0027003300f04052060c250c0237
0e580c670c960ca70cc60cd70cf60c0868080d0e0e46120f0f0c0e0f1218
0c0d2a301b2421f215240d272d240bf23324050a0f0e3517171a2a2402f2
302408ea12241ef218242419343f52182b4e10f44dedfcedf6edfced4e45
6544e6002f3c4d3fedfcfd2fc4edf4ed011112393911123939872e2b7d10
c43130184379405200322e0a301b002c002a1b011a22181b001020121b01
1626181b00141c121b013206301b0028042a1b012f092d1b012b012d1b01
19231b1b00111f1b1b001725151b01131d151b013107331b002903331b00
002b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b81015d710016151406232226
353436330333012312363534262322061514163312161514062322263534
36330036353426232206151416330604cccc9091cccc91916ffcdf6f3279
79565579795591cccc9190cccc90042b7979555679795602b8cc9090cccc
9090cc02dafa4803687955557978565579022bcd9090cccc9090cdfb2179
55557979555579000000>BRDZCK+Helvetica AddT42Char 
1 2660 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>BRDZCK+Helvetica AddT42Char 
1 3932 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/percent 8 def
/hyphen 16 def
/five 24 def
end
BRDZCK+Helvetica /Encoding get
dup 37 /percent put
dup 45 /hyphen put
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five 13{/.notdef}rp /C 188{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -10.3282 -10.3282 0 0 0 ]msf132.215 456.506 mo(0 - 5%)[-5.74249 -2.87125 -3.43921 -2.87125 -5.74246 0 ]ysh146.88 469.921 mo
146.88 461.556 li
138.515 461.556 li
138.515 469.921 li
cp
f
145.796 468.837 mo
145.796 462.641 li
139.6 462.641 li
139.6 468.837 li
cp
0 0 0 0 cmyk
f
[] 0 dsh
145.796 468.837 mo
145.796 462.641 li
139.6 462.641 li
139.6 468.837 li
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
1 4528 26 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d5502
56046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d080000
6f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c39
1239015d31305d01150602070607060723121336372135042f45e558572d
1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>BRDZCK+Helvetica AddT42Char 
1 4676 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/seven 26 def
/eight 27 def
end
BRDZCK+Helvetica /Encoding get
dup 55 /seven put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /.notdef /seven /eight 10{/.notdef}rp /C 188{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -10.3282 -10.3282 0 0 0 ]msf145.64 456.506 mo(70 - 80%)[-5.74249 -5.74246 -2.87125 -3.43921 -2.87125 -5.74249 -5.74246 0 ]ysh165.317 463.57 mo
165.317 458.407 li
160.154 458.407 li
160.154 463.57 li
cp
.308873 .24448 .24976 0 cmyk
@
165.927 443.58 mo
165.927 438.417 li
160.764 438.417 li
160.764 443.58 li
cp
@
166.092 432.028 mo
166.092 426.865 li
160.929 426.865 li
160.929 432.028 li
cp
@
166.457 417.008 mo
166.457 411.845 li
161.294 411.845 li
161.294 417.008 li
cp
@
166.73 401.045 mo
166.73 395.882 li
161.567 395.882 li
161.567 401.045 li
cp
@
166.891 382.72 mo
166.891 377.557 li
161.728 377.557 li
161.728 382.72 li
cp
@
167.292 366.134 mo
167.292 360.971 li
162.129 360.971 li
162.129 366.134 li
cp
@
167.104 359.297 mo
167.104 354.134 li
161.941 354.134 li
161.941 359.297 li
cp
@
167.4 301.25 mo
167.4 296.087 li
162.237 296.087 li
162.237 301.25 li
cp
@
165.833 464.087 mo
165.833 457.891 li
159.637 457.891 li
159.637 464.087 li
cp
.654627 .581201 .569665 .370184 cmyk
@
166.444 444.096 mo
166.444 437.9 li
160.248 437.9 li
160.248 444.096 li
cp
@
166.608 432.544 mo
166.608 426.348 li
160.412 426.348 li
160.412 432.544 li
cp
@
166.974 417.525 mo
166.974 411.329 li
160.778 411.329 li
160.778 417.525 li
cp
@
167.246 401.562 mo
167.246 395.366 li
161.05 395.366 li
161.05 401.562 li
cp
@
167.408 383.236 mo
167.408 377.04 li
161.212 377.04 li
161.212 383.236 li
cp
@
167.809 366.65 mo
167.809 360.454 li
161.613 360.454 li
161.613 366.65 li
cp
@
167.62 359.813 mo
167.62 353.617 li
161.424 353.617 li
161.424 359.813 li
cp
@
167.916 301.766 mo
167.916 295.57 li
161.72 295.57 li
161.72 301.766 li
cp
@
7.5 lw
43.014 460.989 mo
39.915 460.989 li
.426368 .347875 .353155 .00985733 cmyk
@
39.915 460.989 mo
39.915 460.989 li
cp
@
51.276 460.989 mo
54.375 460.989 li
@
54.375 460.989 mo
54.375 460.989 li
cp
@
70.457 440.998 mo
66.142 440.998 li
@
66.142 440.998 mo
66.142 440.998 li
cp
@
78.718 440.998 mo
83.034 440.998 li
@
83.034 440.998 mo
83.034 440.998 li
cp
@
84.217 429.446 mo
83.204 429.446 li
@
83.204 429.446 mo
83.204 429.446 li
cp
@
92.479 429.446 mo
93.492 429.446 li
@
93.492 429.446 mo
93.492 429.446 li
cp
@
95.856 414.427 mo
95.611 414.427 li
@
95.611 414.427 mo
95.611 414.427 li
cp
@
104.117 414.427 mo
104.361 414.427 li
@
104.361 414.427 mo
104.361 414.427 li
cp
@
.75 lw
47.145 465.119 mo
41.638 465.119 41.638 456.858 47.145 456.858 cv
52.653 456.858 52.653 465.119 47.145 465.119 cv
cp
.654627 .581201 .569665 .370184 cmyk
@
74.588 445.129 mo
69.08 445.129 69.08 436.868 74.588 436.868 cv
80.095 436.868 80.095 445.129 74.588 445.129 cv
cp
@
88.348 433.577 mo
82.841 433.577 82.841 425.316 88.348 425.316 cv
93.856 425.316 93.856 433.577 88.348 433.577 cv
cp
@
99.986 418.557 mo
94.479 418.557 94.479 410.296 99.986 410.296 cv
105.494 410.296 105.494 418.557 99.986 418.557 cv
cp
@
112.854 402.594 mo
107.347 402.594 107.347 394.333 112.854 394.333 cv
118.362 394.333 118.362 402.594 112.854 402.594 cv
cp
@
124.837 384.269 mo
119.329 384.269 119.329 376.007 124.837 376.007 cv
130.344 376.007 130.344 384.269 124.837 384.269 cv
cp
@
131.901 367.683 mo
126.393 367.683 126.393 359.422 131.901 359.422 cv
137.408 359.422 137.408 367.683 131.901 367.683 cv
cp
@
134.906 360.846 mo
129.399 360.846 129.399 352.584 134.906 352.584 cv
140.414 352.584 140.414 360.846 134.906 360.846 cv
cp
@
151.48 302.799 mo
145.973 302.799 145.973 294.538 151.48 294.538 cv
156.988 294.538 156.988 302.799 151.48 302.799 cv
cp
@
47.145 465.429 mo
41.224 465.429 41.224 456.548 47.145 456.548 cv
53.066 456.548 53.066 465.429 47.145 465.429 cv
cp
@
74.588 445.439 mo
68.667 445.439 68.667 436.558 74.588 436.558 cv
80.508 436.558 80.508 445.439 74.588 445.439 cv
cp
@
88.348 433.887 mo
82.428 433.887 82.428 425.006 88.348 425.006 cv
94.269 425.006 94.269 433.887 88.348 433.887 cv
cp
@
99.986 418.867 mo
94.066 418.867 94.066 409.986 99.986 409.986 cv
105.907 409.986 105.907 418.867 99.986 418.867 cv
cp
@
112.854 402.904 mo
106.934 402.904 106.934 394.023 112.854 394.023 cv
118.775 394.023 118.775 402.904 112.854 402.904 cv
cp
@
124.837 384.578 mo
118.916 384.578 118.916 375.698 124.837 375.698 cv
130.757 375.698 130.757 384.578 124.837 384.578 cv
cp
@
131.901 367.993 mo
125.98 367.993 125.98 359.112 131.901 359.112 cv
137.822 359.112 137.822 367.993 131.901 367.993 cv
cp
@
134.906 361.155 mo
128.986 361.155 128.986 352.274 134.906 352.274 cv
140.827 352.274 140.827 361.155 134.906 361.155 cv
cp
@
151.48 303.109 mo
145.56 303.109 145.56 294.228 151.48 294.228 cv
157.401 294.228 157.401 303.109 151.48 303.109 cv
cp
@
47.145 464.603 mo
42.326 464.603 42.326 457.374 47.145 457.374 cv
51.964 457.374 51.964 464.603 47.145 464.603 cv
cp
0 1 1 0 cmyk
f
74.588 444.613 mo
69.769 444.613 69.769 437.384 74.588 437.384 cv
79.407 437.384 79.407 444.613 74.588 444.613 cv
cp
f
88.348 433.061 mo
83.529 433.061 83.529 425.832 88.348 425.832 cv
93.167 425.832 93.167 433.061 88.348 433.061 cv
cp
f
99.986 418.041 mo
95.167 418.041 95.167 410.812 99.986 410.812 cv
104.805 410.812 104.805 418.041 99.986 418.041 cv
cp
f
112.854 402.078 mo
108.035 402.078 108.035 394.85 112.854 394.85 cv
117.674 394.85 117.674 402.078 112.854 402.078 cv
cp
f
124.837 383.752 mo
120.018 383.752 120.018 376.524 124.837 376.524 cv
129.656 376.524 129.656 383.752 124.837 383.752 cv
cp
f
131.901 367.167 mo
127.082 367.167 127.082 359.938 131.901 359.938 cv
136.72 359.938 136.72 367.167 131.901 367.167 cv
cp
f
134.906 360.329 mo
130.087 360.329 130.087 353.101 134.906 353.101 cv
139.725 353.101 139.725 360.329 134.906 360.329 cv
cp
f
151.48 302.283 mo
146.661 302.283 146.661 295.054 151.48 295.054 cv
156.299 295.054 156.299 302.283 151.48 302.283 cv
cp
f
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
0 0 0 0 cmyk
ef
.4 lw
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
@
331.598 490.606 mo
331.598 270.779 li
180.132 270.779 li
180.132 490.606 li
cp
ef
331.598 490.606 mo
331.598 270.779 li
180.132 270.779 li
180.132 490.606 li
cp
@
.75 lw
331.598 490.606 mo
331.598 270.779 li
180.132 270.779 li
180.132 490.606 li
cp
.75021 .679683 .670222 .90164 cmyk
@
331.598 490.606 mo
331.598 270.779 li
180.132 270.779 li
180.132 490.606 li
cp
0 0 0 0 cmyk
ef
.4 lw
331.598 490.606 mo
331.598 270.779 li
180.132 270.779 li
180.132 490.606 li
cp
@
.75 lw
331.598 490.606 mo
331.598 270.779 li
180.132 270.779 li
180.132 490.606 li
cp
.75021 .679683 .670222 .90164 cmyk
@
331.598 490.606 mo
331.598 270.78 li
@
329.522 482.507 mo
331.598 482.507 li
@
329.522 473.421 mo
331.598 473.421 li
@
329.522 465.739 mo
331.598 465.739 li
@
329.522 459.084 mo
331.598 459.084 li
@
329.522 453.214 mo
331.598 453.214 li
@
327.445 447.964 mo
331.598 447.964 li
@
329.522 413.42 mo
331.598 413.42 li
@
329.522 393.213 mo
331.598 393.213 li
@
329.522 378.876 mo
331.598 378.876 li
@
329.522 367.756 mo
331.598 367.756 li
@
329.522 358.67 mo
331.598 358.67 li
@
329.522 350.987 mo
331.598 350.987 li
@
329.522 344.333 mo
331.598 344.333 li
@
329.522 338.463 mo
331.598 338.463 li
@
327.445 333.212 mo
331.598 333.212 li
@
329.522 298.668 mo
331.598 298.668 li
@
329.522 278.462 mo
331.598 278.462 li
@
180.132 490.606 mo
180.132 270.78 li
@
182.208 482.507 mo
180.132 482.507 li
@
182.208 473.421 mo
180.132 473.421 li
@
182.208 465.739 mo
180.132 465.739 li
@
182.208 459.084 mo
180.132 459.084 li
@
182.208 453.214 mo
180.132 453.214 li
@
184.285 447.964 mo
180.132 447.964 li
@
182.208 413.42 mo
180.132 413.42 li
@
182.208 393.213 mo
180.132 393.213 li
@
182.208 378.876 mo
180.132 378.876 li
@
182.208 367.756 mo
180.132 367.756 li
@
182.208 358.67 mo
180.132 358.67 li
@
182.208 350.987 mo
180.132 350.987 li
@
182.208 344.333 mo
180.132 344.333 li
@
182.208 338.463 mo
180.132 338.463 li
@
184.285 333.212 mo
180.132 333.212 li
@
182.208 298.668 mo
180.132 298.668 li
@
182.208 278.462 mo
180.132 278.462 li
@
331.598 490.606 mo
180.132 490.606 li
@
316.451 480.784 mo
316.451 490.606 li
@
301.305 485.695 mo
301.305 490.606 li
@
286.158 480.784 mo
286.158 490.606 li
@
271.012 485.695 mo
271.012 490.606 li
@
255.865 480.784 mo
255.865 490.606 li
@
240.718 485.695 mo
240.718 490.606 li
@
225.572 480.784 mo
225.572 490.606 li
@
210.425 485.695 mo
210.425 490.606 li
@
195.279 480.784 mo
195.279 490.606 li
@
316.451 480.784 mo
316.451 490.606 li
@
331.598 485.695 mo
331.598 490.606 li
@
195.279 480.784 mo
195.279 490.606 li
@
180.132 485.695 mo
180.132 490.606 li
@
331.598 270.78 mo
180.132 270.78 li
@
316.451 280.601 mo
316.451 270.78 li
@
301.305 275.69 mo
301.305 270.78 li
@
286.158 280.601 mo
286.158 270.78 li
@
271.012 275.69 mo
271.012 270.78 li
@
255.865 280.601 mo
255.865 270.78 li
@
240.718 275.69 mo
240.718 270.78 li
@
225.572 280.601 mo
225.572 270.78 li
@
210.425 275.69 mo
210.425 270.78 li
@
195.279 280.601 mo
195.279 270.78 li
@
316.451 280.601 mo
316.451 270.78 li
@
331.598 275.69 mo
331.598 270.78 li
@
195.279 280.601 mo
195.279 270.78 li
@
180.132 275.69 mo
180.132 270.78 li
@
1.5 lw
331.598 490.606 mo
331.598 270.78 li
@
180.13 490.606 mo
180.13 270.78 li
@
331.598 490.606 mo
180.13 490.606 li
@
331.598 270.78 mo
180.13 270.78 li
@
.75 lw
[3 3 ] 0 dsh
316.451 490.606 mo
316.451 270.78 li
.883909 .76556 0 0 cmyk
@
[] 0 dsh
316.794 463.57 mo
316.794 458.407 li
311.631 458.407 li
311.631 463.57 li
cp
.308873 .24448 .24976 0 cmyk
@
317.424 443.58 mo
317.424 438.417 li
312.261 438.417 li
312.261 443.58 li
cp
@
317.558 432.028 mo
317.558 426.865 li
312.395 426.865 li
312.395 432.028 li
cp
@
317.939 417.008 mo
317.939 411.845 li
312.776 411.845 li
312.776 417.008 li
cp
@
318.173 401.045 mo
318.173 395.882 li
313.009 395.882 li
313.009 401.045 li
cp
@
318.312 382.72 mo
318.312 377.557 li
313.149 377.557 li
313.149 382.72 li
cp
@
318.642 366.134 mo
318.642 360.971 li
313.479 360.971 li
313.479 366.134 li
cp
@
318.494 359.297 mo
318.494 354.134 li
313.331 354.134 li
313.331 359.297 li
cp
@
318.76 301.25 mo
318.76 296.087 li
313.597 296.087 li
313.597 301.25 li
cp
@
317.311 464.087 mo
317.311 457.891 li
311.115 457.891 li
311.115 464.087 li
cp
.654627 .581201 .569665 .370184 cmyk
@
317.941 444.096 mo
317.941 437.9 li
311.745 437.9 li
311.745 444.096 li
cp
@
318.074 432.544 mo
318.074 426.348 li
311.878 426.348 li
311.878 432.544 li
cp
@
318.456 417.525 mo
318.456 411.329 li
312.26 411.329 li
312.26 417.525 li
cp
@
318.689 401.562 mo
318.689 395.366 li
312.493 395.366 li
312.493 401.562 li
cp
@
318.828 383.236 mo
318.828 377.04 li
312.632 377.04 li
312.632 383.236 li
cp
@
319.159 366.65 mo
319.159 360.454 li
312.963 360.454 li
312.963 366.65 li
cp
@
319.01 359.813 mo
319.01 353.617 li
312.814 353.617 li
312.814 359.813 li
cp
@
319.277 301.766 mo
319.277 295.57 li
313.081 295.57 li
313.081 301.766 li
cp
@
7.5 lw
222.901 460.989 mo
222.019 460.989 li
.426368 .347875 .353155 .00985733 cmyk
@
222.019 460.989 mo
222.019 460.989 li
cp
@
231.163 460.989 mo
232.045 460.989 li
@
232.045 460.989 mo
232.045 460.989 li
cp
@
.75 lw
227.032 465.119 mo
221.524 465.119 221.524 456.858 227.032 456.858 cv
232.539 456.858 232.539 465.119 227.032 465.119 cv
cp
.654627 .581201 .569665 .370184 cmyk
@
247.08 445.129 mo
241.573 445.129 241.573 436.868 247.08 436.868 cv
252.588 436.868 252.588 445.129 247.08 445.129 cv
cp
@
254.356 433.577 mo
248.849 433.577 248.849 425.316 254.356 425.316 cv
259.864 425.316 259.864 433.577 254.356 433.577 cv
cp
@
269.464 418.557 mo
263.956 418.557 263.956 410.296 269.464 410.296 cv
274.971 410.296 274.971 418.557 269.464 418.557 cv
cp
@
278.443 402.594 mo
272.935 402.594 272.935 394.333 278.443 394.333 cv
283.95 394.333 283.95 402.594 278.443 402.594 cv
cp
@
286.273 384.269 mo
280.766 384.269 280.766 376.007 286.273 376.007 cv
291.781 376.007 291.781 384.269 286.273 384.269 cv
cp
@
291.511 367.683 mo
286.004 367.683 286.004 359.422 291.511 359.422 cv
297.019 359.422 297.019 367.683 291.511 367.683 cv
cp
@
293.029 360.846 mo
287.521 360.846 287.521 352.584 293.029 352.584 cv
298.536 352.584 298.536 360.846 293.029 360.846 cv
cp
@
305.264 302.799 mo
299.757 302.799 299.757 294.538 305.264 294.538 cv
310.772 294.538 310.772 302.799 305.264 302.799 cv
cp
@
3 lw
222.901 460.989 mo
218.431 460.989 li
@
218.431 460.989 mo
218.431 460.989 li
cp
@
231.163 460.989 mo
235.633 460.989 li
@
235.633 460.989 mo
235.633 460.989 li
cp
@
.75 lw
227.032 465.429 mo
221.111 465.429 221.111 456.548 227.032 456.548 cv
232.953 456.548 232.953 465.429 227.032 465.429 cv
cp
@
247.08 445.439 mo
241.159 445.439 241.159 436.558 247.08 436.558 cv
253.001 436.558 253.001 445.439 247.08 445.439 cv
cp
@
254.356 433.887 mo
248.436 433.887 248.436 425.006 254.356 425.006 cv
260.277 425.006 260.277 433.887 254.356 433.887 cv
cp
@
269.464 418.867 mo
263.543 418.867 263.543 409.986 269.464 409.986 cv
275.384 409.986 275.384 418.867 269.464 418.867 cv
cp
@
278.443 402.904 mo
272.522 402.904 272.522 394.023 278.443 394.023 cv
284.363 394.023 284.363 402.904 278.443 402.904 cv
cp
@
286.273 384.578 mo
280.353 384.578 280.353 375.698 286.273 375.698 cv
292.194 375.698 292.194 384.578 286.273 384.578 cv
cp
@
291.511 367.993 mo
285.59 367.993 285.59 359.112 291.511 359.112 cv
297.432 359.112 297.432 367.993 291.511 367.993 cv
cp
@
293.029 361.155 mo
287.108 361.155 287.108 352.274 293.029 352.274 cv
298.949 352.274 298.949 361.155 293.029 361.155 cv
cp
@
305.264 303.109 mo
299.344 303.109 299.344 294.228 305.264 294.228 cv
311.185 294.228 311.185 303.109 305.264 303.109 cv
cp
@
227.032 464.603 mo
222.213 464.603 222.213 457.374 227.032 457.374 cv
231.851 457.374 231.851 464.603 227.032 464.603 cv
cp
0 1 1 0 cmyk
f
247.08 444.613 mo
242.261 444.613 242.261 437.384 247.08 437.384 cv
251.899 437.384 251.899 444.613 247.08 444.613 cv
cp
f
254.356 433.061 mo
249.537 433.061 249.537 425.832 254.356 425.832 cv
259.176 425.832 259.176 433.061 254.356 433.061 cv
cp
f
269.464 418.041 mo
264.645 418.041 264.645 410.812 269.464 410.812 cv
274.283 410.812 274.283 418.041 269.464 418.041 cv
cp
f
278.443 402.078 mo
273.624 402.078 273.624 394.85 278.443 394.85 cv
283.262 394.85 283.262 402.078 278.443 402.078 cv
cp
f
286.273 383.752 mo
281.454 383.752 281.454 376.524 286.273 376.524 cv
291.092 376.524 291.092 383.752 286.273 383.752 cv
cp
f
291.511 367.167 mo
286.692 367.167 286.692 359.938 291.511 359.938 cv
296.33 359.938 296.33 367.167 291.511 367.167 cv
cp
f
293.029 360.329 mo
288.21 360.329 288.21 353.101 293.029 353.101 cv
297.848 353.101 297.848 360.329 293.029 360.329 cv
cp
f
305.264 302.283 mo
300.445 302.283 300.445 295.054 305.264 295.054 cv
310.083 295.054 310.083 302.283 305.264 302.283 cv
cp
f
gsave
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 486.453 mo(5)shgrestore
gsave
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 454.957 mo(10)[-6.91003 0 ]yshgrestore
gsave
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 420.363 mo(20)[-6.91003 0 ]yshgrestore
gsave
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 374.926 mo(50)[-6.91003 0 ]yshgrestore
gsave
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 343.946 mo(100)[-6.91003 -6.91003 0 ]yshgrestore
gsave
348.428 567 mo
348.428 255.189 li
180.131 255.189 li
180.131 567 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 309.352 mo(200)[-6.91003 -6.91003 0 ]yshgrestore
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf320.675 499.877 mo(0)sh290.728 506.589 mo(10)[-6.91003 0 ]ysh260.265 506.589 mo(20)[-6.91003 0 ]ysh229.801 506.589 mo(30)[-6.91003 0 ]ysh199.854 506.589 mo(40)[-6.91003 0 ]yshBRDZCK+Helvetica*1 [0 -15.0173 -15.0173 0 0 0 ]msf202.436 351.175 mo(\(3\) C)[-5.00067 -8.34961 -5.00064 -4.1748 0 ]yshBRDZCK+Helvetica*1 [0 -10.8746 -10.8746 0 0 0 ]msf205.534 318.129 mo(3)sh180.13 266.528 mo
180.13 5.74103 li
20.042 5.74103 li
20.042 266.528 li
cp
0 0 0 0 cmyk
ef
.4 lw
180.13 266.528 mo
180.13 5.74103 li
20.042 5.74103 li
20.042 266.528 li
cp
@
180.114 240.449 mo
180.114 20.084 li
30.448 20.084 li
30.448 240.449 li
cp
ef
180.114 240.449 mo
180.114 20.084 li
30.448 20.084 li
30.448 240.449 li
cp
@
.75 lw
180.114 240.449 mo
180.114 20.084 li
30.448 20.084 li
30.448 240.449 li
cp
.75021 .679683 .670222 .90164 cmyk
@
180.114 240.449 mo
180.114 20.084 li
30.448 20.084 li
30.448 240.449 li
cp
0 0 0 0 cmyk
ef
.4 lw
180.114 240.449 mo
180.114 20.084 li
30.448 20.084 li
30.448 240.449 li
cp
@
.75 lw
180.114 240.449 mo
180.114 20.084 li
30.448 20.084 li
30.448 240.449 li
cp
.75021 .679683 .670222 .90164 cmyk
@
180.114 240.449 mo
180.114 20.083 li
@
177.747 232.33 mo
180.114 232.33 li
@
177.747 223.221 mo
180.114 223.221 li
@
177.747 215.52 mo
180.114 215.52 li
@
177.747 208.849 mo
180.114 208.849 li
@
177.747 202.965 mo
180.114 202.965 li
@
175.38 197.702 mo
180.114 197.702 li
@
177.747 163.073 mo
180.114 163.073 li
@
177.747 142.817 mo
180.114 142.817 li
@
177.747 128.445 mo
180.114 128.445 li
@
177.747 117.297 mo
180.114 117.297 li
@
177.747 108.189 mo
180.114 108.189 li
@
177.747 100.488 mo
180.114 100.488 li
@
177.747 93.817 mo
180.114 93.817 li
@
177.747 87.933 mo
180.114 87.933 li
@
175.38 82.669 mo
180.114 82.669 li
@
177.747 48.041 mo
180.114 48.041 li
@
177.747 27.785 mo
180.114 27.785 li
@
30.448 240.449 mo
30.448 20.083 li
@
32.816 232.33 mo
30.448 232.33 li
@
32.816 223.221 mo
30.448 223.221 li
@
32.816 215.52 mo
30.448 215.52 li
@
32.816 208.849 mo
30.448 208.849 li
@
32.816 202.965 mo
30.448 202.965 li
@
35.183 197.702 mo
30.448 197.702 li
@
32.816 163.073 mo
30.448 163.073 li
@
32.816 142.817 mo
30.448 142.817 li
@
32.816 128.445 mo
30.448 128.445 li
@
32.816 117.297 mo
30.448 117.297 li
@
32.816 108.189 mo
30.448 108.189 li
@
32.816 100.488 mo
30.448 100.488 li
@
32.816 93.817 mo
30.448 93.817 li
@
32.816 87.933 mo
30.448 87.933 li
@
35.183 82.669 mo
30.448 82.669 li
@
32.816 48.041 mo
30.448 48.041 li
@
32.816 27.785 mo
30.448 27.785 li
@
180.114 240.449 mo
30.448 240.449 li
@
165.148 231.915 mo
165.148 240.449 li
@
150.181 236.182 mo
150.181 240.449 li
@
135.215 231.915 mo
135.215 240.449 li
@
120.248 236.182 mo
120.248 240.449 li
@
105.281 231.915 mo
105.281 240.449 li
@
90.315 236.182 mo
90.315 240.449 li
@
75.348 231.915 mo
75.348 240.449 li
@
60.382 236.182 mo
60.382 240.449 li
@
45.415 231.915 mo
45.415 240.449 li
@
165.148 231.915 mo
165.148 240.449 li
@
180.114 236.182 mo
180.114 240.449 li
@
45.415 231.915 mo
45.415 240.449 li
@
30.448 236.182 mo
30.448 240.449 li
@
180.114 20.083 mo
30.448 20.083 li
@
165.148 28.617 mo
165.148 20.083 li
@
150.181 24.35 mo
150.181 20.083 li
@
135.215 28.617 mo
135.215 20.083 li
@
120.248 24.35 mo
120.248 20.083 li
@
105.281 28.617 mo
105.281 20.083 li
@
90.315 24.35 mo
90.315 20.083 li
@
75.348 28.617 mo
75.348 20.083 li
@
60.382 24.35 mo
60.382 20.083 li
@
45.415 28.617 mo
45.415 20.083 li
@
165.148 28.617 mo
165.148 20.083 li
@
180.114 24.35 mo
180.114 20.083 li
@
45.415 28.617 mo
45.415 20.083 li
@
30.448 24.35 mo
30.448 20.083 li
@
1.5 lw
180.13 240.449 mo
180.13 20.083 li
@
30.448 240.449 mo
30.448 20.083 li
@
180.13 240.449 mo
30.448 240.449 li
@
180.13 20.083 mo
30.448 20.083 li
@
.75 lw
[3 3 ] 0 dsh
165.148 240.449 mo
165.148 20.083 li
.883909 .76556 0 0 cmyk
@
[] 0 dsh
165.341 213.34 mo
165.341 208.177 li
160.178 208.177 li
160.178 213.34 li
cp
.308873 .24448 .24976 0 cmyk
@
165.781 193.301 mo
165.781 188.138 li
160.618 188.138 li
160.618 193.301 li
cp
@
165.778 181.721 mo
165.778 176.558 li
160.615 176.558 li
160.615 181.721 li
cp
@
165.957 166.664 mo
165.957 161.501 li
160.794 161.501 li
160.794 166.664 li
cp
@
165.996 150.662 mo
165.996 145.499 li
160.833 145.499 li
160.833 150.662 li
cp
@
165.802 132.291 mo
165.802 127.128 li
160.639 127.128 li
160.639 132.291 li
cp
@
166.361 115.665 mo
166.361 110.502 li
161.198 110.502 li
161.198 115.665 li
cp
@
165.673 108.811 mo
165.673 103.648 li
160.51 103.648 li
160.51 108.811 li
cp
@
165.116 50.622 mo
165.116 45.4587 li
159.953 45.4587 li
159.953 50.622 li
cp
@
165.857 213.857 mo
165.857 207.661 li
159.661 207.661 li
159.661 213.857 li
cp
.654627 .581201 .569665 .370184 cmyk
@
166.297 193.817 mo
166.297 187.621 li
160.101 187.621 li
160.101 193.817 li
cp
@
166.294 182.237 mo
166.294 176.041 li
160.098 176.041 li
160.098 182.237 li
cp
@
166.474 167.18 mo
166.474 160.984 li
160.278 160.984 li
160.278 167.18 li
cp
@
166.513 151.179 mo
166.513 144.983 li
160.317 144.983 li
160.317 151.179 li
cp
@
166.318 132.808 mo
166.318 126.612 li
160.122 126.612 li
160.122 132.808 li
cp
@
166.878 116.182 mo
166.878 109.986 li
160.682 109.986 li
160.682 116.182 li
cp
@
166.189 109.327 mo
166.189 103.131 li
159.993 103.131 li
159.993 109.327 li
cp
@
165.633 51.139 mo
165.633 44.9431 li
159.437 44.9431 li
159.437 51.139 li
cp
@
7.5 lw
50.375 210.759 mo
48.417 210.759 li
.426368 .347875 .353155 .00985733 cmyk
@
48.417 210.759 mo
48.417 210.759 li
cp
@
58.636 210.759 mo
60.595 210.759 li
@
60.595 210.759 mo
60.595 210.759 li
cp
@
73.537 190.719 mo
70.668 190.719 li
@
70.668 190.719 mo
70.668 190.719 li
cp
@
81.799 190.719 mo
84.668 190.719 li
@
84.668 190.719 mo
84.668 190.719 li
cp
@
82.577 179.139 mo
81.92 179.139 li
@
81.92 179.139 mo
81.92 179.139 li
cp
@
90.838 179.139 mo
91.496 179.139 li
@
91.496 179.139 mo
91.496 179.139 li
cp
@
88.704 164.083 mo
88.444 164.083 li
@
88.444 164.083 mo
88.444 164.083 li
cp
@
96.966 164.083 mo
97.226 164.083 li
@
97.226 164.083 mo
97.226 164.083 li
cp
@
93.108 148.081 mo
92.916 148.081 li
@
92.916 148.081 mo
92.916 148.081 li
cp
@
101.369 148.081 mo
101.561 148.081 li
@
101.561 148.081 mo
101.561 148.081 li
cp
@
93.539 129.71 mo
93.237 129.71 li
@
93.237 129.71 mo
93.237 129.71 li
cp
@
101.8 129.71 mo
102.102 129.71 li
@
102.102 129.71 mo
102.102 129.71 li
cp
@
89.962 113.084 mo
89.383 113.084 li
@
89.383 113.084 mo
89.383 113.084 li
cp
@
98.223 113.084 mo
98.802 113.084 li
@
98.802 113.084 mo
98.802 113.084 li
cp
@
89.896 106.229 mo
87.599 106.229 li
@
87.599 106.229 mo
87.599 106.229 li
cp
@
98.157 106.229 mo
100.454 106.229 li
@
100.454 106.229 mo
100.454 106.229 li
cp
@
70.643 48.041 mo
67.52 48.041 li
@
67.52 48.041 mo
67.52 48.041 li
cp
@
78.904 48.041 mo
82.027 48.041 li
@
82.027 48.041 mo
82.027 48.041 li
cp
@
.75 lw
54.506 214.889 mo
48.998 214.889 48.998 206.628 54.506 206.628 cv
60.013 206.628 60.013 214.889 54.506 214.889 cv
cp
.654627 .581201 .569665 .370184 cmyk
@
77.668 194.85 mo
72.16 194.85 72.16 186.589 77.668 186.589 cv
83.175 186.589 83.175 194.85 77.668 194.85 cv
cp
@
86.708 183.27 mo
81.2 183.27 81.2 175.008 86.708 175.008 cv
92.215 175.008 92.215 183.27 86.708 183.27 cv
cp
@
92.835 168.213 mo
87.328 168.213 87.328 159.952 92.835 159.952 cv
98.343 159.952 98.343 168.213 92.835 168.213 cv
cp
@
97.238 152.211 mo
91.731 152.211 91.731 143.95 97.238 143.95 cv
102.746 143.95 102.746 152.211 97.238 152.211 cv
cp
@
97.669 133.84 mo
92.162 133.84 92.162 125.579 97.669 125.579 cv
103.177 125.579 103.177 133.84 97.669 133.84 cv
cp
@
94.092 117.214 mo
88.585 117.214 88.585 108.953 94.092 108.953 cv
99.6 108.953 99.6 117.214 94.092 117.214 cv
cp
@
94.026 110.36 mo
88.519 110.36 88.519 102.099 94.026 102.099 cv
99.534 102.099 99.534 110.36 94.026 110.36 cv
cp
@
74.773 52.171 mo
69.266 52.171 69.266 43.91 74.773 43.91 cv
80.281 43.91 80.281 52.171 74.773 52.171 cv
cp
@
54.506 215.199 mo
48.585 215.199 48.585 206.318 54.506 206.318 cv
60.426 206.318 60.426 215.199 54.506 215.199 cv
cp
@
77.668 195.16 mo
71.747 195.16 71.747 186.279 77.668 186.279 cv
83.589 186.279 83.589 195.16 77.668 195.16 cv
cp
@
86.708 183.579 mo
80.787 183.579 80.787 174.698 86.708 174.698 cv
92.628 174.698 92.628 183.579 86.708 183.579 cv
cp
@
92.835 168.523 mo
86.915 168.523 86.915 159.642 92.835 159.642 cv
98.756 159.642 98.756 168.523 92.835 168.523 cv
cp
@
97.238 152.521 mo
91.318 152.521 91.318 143.64 97.238 143.64 cv
103.159 143.64 103.159 152.521 97.238 152.521 cv
cp
@
97.669 134.15 mo
91.749 134.15 91.749 125.269 97.669 125.269 cv
103.59 125.269 103.59 134.15 97.669 134.15 cv
cp
@
94.092 117.524 mo
88.172 117.524 88.172 108.643 94.092 108.643 cv
100.013 108.643 100.013 117.524 94.092 117.524 cv
cp
@
94.026 110.67 mo
88.106 110.67 88.106 101.789 94.026 101.789 cv
99.947 101.789 99.947 110.67 94.026 110.67 cv
cp
@
74.773 52.481 mo
68.853 52.481 68.853 43.6 74.773 43.6 cv
80.694 43.6 80.694 52.481 74.773 52.481 cv
cp
@
54.506 214.373 mo
49.687 214.373 49.687 207.144 54.506 207.144 cv
59.325 207.144 59.325 214.373 54.506 214.373 cv
cp
0 1 1 0 cmyk
f
77.668 194.334 mo
72.849 194.334 72.849 187.105 77.668 187.105 cv
82.487 187.105 82.487 194.334 77.668 194.334 cv
cp
f
86.708 182.753 mo
81.889 182.753 81.889 175.525 86.708 175.525 cv
91.527 175.525 91.527 182.753 86.708 182.753 cv
cp
f
92.835 167.697 mo
88.016 167.697 88.016 160.468 92.835 160.468 cv
97.654 160.468 97.654 167.697 92.835 167.697 cv
cp
f
97.238 151.695 mo
92.419 151.695 92.419 144.466 97.238 144.466 cv
102.057 144.466 102.057 151.695 97.238 151.695 cv
cp
f
97.669 133.324 mo
92.85 133.324 92.85 126.096 97.669 126.096 cv
102.488 126.096 102.488 133.324 97.669 133.324 cv
cp
f
94.092 116.698 mo
89.273 116.698 89.273 109.469 94.092 109.469 cv
98.911 109.469 98.911 116.698 94.092 116.698 cv
cp
f
94.026 109.844 mo
89.207 109.844 89.207 102.615 94.026 102.615 cv
98.846 102.615 98.846 109.844 94.026 109.844 cv
cp
f
74.773 51.655 mo
69.954 51.655 69.954 44.426 74.773 44.426 cv
79.592 44.426 79.592 51.655 74.773 51.655 cv
cp
f
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.3939 -12.3939 0 0 0 ]msf169.391 249.974 mo(0)shgsave
180.13 266.528 mo
180.13 5.74103 li
20.042 5.74103 li
20.042 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.3939 -12.3939 0 0 0 ]msf139.444 256.686 mo(10)[-6.89101 0 ]yshgrestore
gsave
180.13 266.528 mo
180.13 5.74103 li
20.042 5.74103 li
20.042 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.3939 -12.3939 0 0 0 ]msf109.497 256.686 mo(20)[-6.89101 0 ]yshgrestore
gsave
180.13 266.528 mo
180.13 5.74103 li
20.042 5.74103 li
20.042 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.3939 -12.3939 0 0 0 ]msf79.549 256.686 mo(30)[-6.89101 0 ]yshgrestore
gsave
180.13 266.528 mo
180.13 5.74103 li
20.042 5.74103 li
20.042 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.3939 -12.3939 0 0 0 ]msf49.602 256.686 mo(40)[-6.89101 0 ]yshgrestore
BRDZCK+Helvetica*1 [0 -15.4924 -15.4924 0 0 0 ]msf52.7 100.755 mo(\(2\) C)[-5.15886 -8.61377 -5.15885 -4.30688 0 ]yshBRDZCK+Helvetica*1 [0 -11.3611 -11.3611 0 0 0 ]msf55.798 66.677 mo(2)sh348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
0 0 0 0 cmyk
ef
.4 lw
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
@
331.598 240.449 mo
331.598 20.084 li
180.132 20.084 li
180.132 240.449 li
cp
ef
331.598 240.449 mo
331.598 20.084 li
180.132 20.084 li
180.132 240.449 li
cp
@
.75 lw
331.598 240.449 mo
331.598 20.084 li
180.132 20.084 li
180.132 240.449 li
cp
.75021 .679683 .670222 .90164 cmyk
@
331.598 240.449 mo
331.598 20.084 li
180.132 20.084 li
180.132 240.449 li
cp
0 0 0 0 cmyk
ef
.4 lw
331.598 240.449 mo
331.598 20.084 li
180.132 20.084 li
180.132 240.449 li
cp
@
.75 lw
331.598 240.449 mo
331.598 20.084 li
180.132 20.084 li
180.132 240.449 li
cp
.75021 .679683 .670222 .90164 cmyk
@
331.598 240.449 mo
331.598 20.083 li
@
329.109 232.33 mo
331.598 232.33 li
@
329.109 223.221 mo
331.598 223.221 li
@
329.109 215.52 mo
331.598 215.52 li
@
329.109 208.849 mo
331.598 208.849 li
@
329.109 202.965 mo
331.598 202.965 li
@
326.621 197.702 mo
331.598 197.702 li
@
329.109 163.073 mo
331.598 163.073 li
@
329.109 142.817 mo
331.598 142.817 li
@
329.109 128.445 mo
331.598 128.445 li
@
329.109 117.297 mo
331.598 117.297 li
@
329.109 108.189 mo
331.598 108.189 li
@
329.109 100.488 mo
331.598 100.488 li
@
329.109 93.817 mo
331.598 93.817 li
@
329.109 87.933 mo
331.598 87.933 li
@
326.621 82.669 mo
331.598 82.669 li
@
329.109 48.041 mo
331.598 48.041 li
@
329.109 27.785 mo
331.598 27.785 li
@
180.132 240.449 mo
180.132 20.083 li
@
182.621 232.33 mo
180.132 232.33 li
@
182.621 223.221 mo
180.132 223.221 li
@
182.621 215.52 mo
180.132 215.52 li
@
182.621 208.849 mo
180.132 208.849 li
@
182.621 202.965 mo
180.132 202.965 li
@
185.109 197.702 mo
180.132 197.702 li
@
182.621 163.073 mo
180.132 163.073 li
@
182.621 142.817 mo
180.132 142.817 li
@
182.621 128.445 mo
180.132 128.445 li
@
182.621 117.297 mo
180.132 117.297 li
@
182.621 108.189 mo
180.132 108.189 li
@
182.621 100.488 mo
180.132 100.488 li
@
182.621 93.817 mo
180.132 93.817 li
@
182.621 87.933 mo
180.132 87.933 li
@
185.109 82.669 mo
180.132 82.669 li
@
182.621 48.041 mo
180.132 48.041 li
@
182.621 27.785 mo
180.132 27.785 li
@
331.598 240.449 mo
180.132 240.449 li
@
316.281 232.234 mo
316.281 240.449 li
@
304.935 236.341 mo
304.935 240.449 li
@
293.59 232.234 mo
293.59 240.449 li
@
282.244 236.341 mo
282.244 240.449 li
@
270.898 232.234 mo
270.898 240.449 li
@
259.552 236.341 mo
259.552 240.449 li
@
248.207 232.234 mo
248.207 240.449 li
@
236.861 236.341 mo
236.861 240.449 li
@
225.515 232.234 mo
225.515 240.449 li
@
214.169 236.341 mo
214.169 240.449 li
@
202.824 232.234 mo
202.824 240.449 li
@
191.478 236.341 mo
191.478 240.449 li
@
180.132 232.234 mo
180.132 240.449 li
@
316.281 232.234 mo
316.281 240.449 li
@
327.627 236.341 mo
327.627 240.449 li
@
331.598 20.083 mo
180.132 20.083 li
@
316.281 28.298 mo
316.281 20.083 li
@
304.935 24.191 mo
304.935 20.083 li
@
293.59 28.298 mo
293.59 20.083 li
@
282.244 24.191 mo
282.244 20.083 li
@
270.898 28.298 mo
270.898 20.083 li
@
259.552 24.191 mo
259.552 20.083 li
@
248.207 28.298 mo
248.207 20.083 li
@
236.861 24.191 mo
236.861 20.083 li
@
225.515 28.298 mo
225.515 20.083 li
@
214.169 24.191 mo
214.169 20.083 li
@
202.824 28.298 mo
202.824 20.083 li
@
191.478 24.191 mo
191.478 20.083 li
@
180.132 28.298 mo
180.132 20.083 li
@
316.281 28.298 mo
316.281 20.083 li
@
327.627 24.191 mo
327.627 20.083 li
@
1.5 lw
331.598 240.449 mo
331.598 20.083 li
@
180.13 240.449 mo
180.13 20.083 li
@
331.598 240.449 mo
180.13 240.449 li
@
331.598 20.083 mo
180.13 20.083 li
@
.75 lw
[3 3 ] 0 dsh
316.281 240.449 mo
316.281 20.083 li
.883909 .76556 0 0 cmyk
@
[] 0 dsh
318.035 213.34 mo
318.035 208.177 li
312.871 208.177 li
312.871 213.34 li
cp
.308873 .24448 .24976 0 cmyk
@
318.246 193.301 mo
318.246 188.138 li
313.082 188.138 li
313.082 193.301 li
cp
@
318.178 181.721 mo
318.178 176.558 li
313.014 176.558 li
313.014 181.721 li
cp
@
318.339 166.664 mo
318.339 161.501 li
313.175 161.501 li
313.175 166.664 li
cp
@
318.333 150.662 mo
318.333 145.499 li
313.17 145.499 li
313.17 150.662 li
cp
@
318.283 132.291 mo
318.283 127.128 li
313.12 127.128 li
313.12 132.291 li
cp
@
318.427 115.665 mo
318.427 110.502 li
313.264 110.502 li
313.264 115.665 li
cp
@
318.247 108.811 mo
318.247 103.648 li
313.083 103.648 li
313.083 108.811 li
cp
@
318.086 50.622 mo
318.086 45.4587 li
312.922 45.4587 li
312.922 50.622 li
cp
@
318.551 213.857 mo
318.551 207.661 li
312.355 207.661 li
312.355 213.857 li
cp
.654627 .581201 .569665 .370184 cmyk
@
318.762 193.817 mo
318.762 187.621 li
312.566 187.621 li
312.566 193.817 li
cp
@
318.694 182.237 mo
318.694 176.041 li
312.498 176.041 li
312.498 182.237 li
cp
@
318.855 167.18 mo
318.855 160.984 li
312.659 160.984 li
312.659 167.18 li
cp
@
318.849 151.179 mo
318.849 144.983 li
312.653 144.983 li
312.653 151.179 li
cp
@
318.799 132.808 mo
318.799 126.612 li
312.604 126.612 li
312.604 132.808 li
cp
@
318.944 116.182 mo
318.944 109.986 li
312.748 109.986 li
312.748 116.182 li
cp
@
318.763 109.327 mo
318.763 103.131 li
312.567 103.131 li
312.567 109.327 li
cp
@
318.602 51.139 mo
318.602 44.9431 li
312.406 44.9431 li
312.406 51.139 li
cp
@
7.5 lw
238.048 210.759 mo
223.796 210.759 li
.426368 .347875 .353155 .00985733 cmyk
@
223.796 210.759 mo
223.796 210.759 li
cp
@
246.309 210.759 mo
260.561 210.759 li
@
260.561 210.759 mo
260.561 210.759 li
cp
@
289.079 190.719 mo
284.846 190.719 li
@
284.846 190.719 mo
284.846 190.719 li
cp
@
297.34 190.719 mo
301.573 190.719 li
@
301.573 190.719 mo
301.573 190.719 li
cp
@
268.482 179.139 mo
263.465 179.139 li
@
263.465 179.139 mo
263.465 179.139 li
cp
@
276.743 179.139 mo
281.76 179.139 li
@
281.76 179.139 mo
281.76 179.139 li
cp
@
308.299 164.083 mo
308.274 164.083 li
@
308.274 164.083 mo
308.274 164.083 li
cp
@
316.56 164.083 mo
316.585 164.083 li
@
316.585 164.083 mo
316.585 164.083 li
cp
@
290.774 106.229 mo
290.375 106.229 li
@
290.375 106.229 mo
290.375 106.229 li
cp
@
299.035 106.229 mo
299.434 106.229 li
@
299.434 106.229 mo
299.434 106.229 li
cp
@
281.298 48.041 mo
279.879 48.041 li
@
279.879 48.041 mo
279.879 48.041 li
cp
@
289.559 48.041 mo
290.979 48.041 li
@
290.979 48.041 mo
290.979 48.041 li
cp
@
.75 lw
242.179 214.889 mo
236.671 214.889 236.671 206.628 242.179 206.628 cv
247.686 206.628 247.686 214.889 242.179 214.889 cv
cp
.654627 .581201 .569665 .370184 cmyk
@
293.21 194.85 mo
287.702 194.85 287.702 186.589 293.21 186.589 cv
298.717 186.589 298.717 194.85 293.21 194.85 cv
cp
@
272.613 183.27 mo
267.105 183.27 267.105 175.008 272.613 175.008 cv
278.12 175.008 278.12 183.27 272.613 183.27 cv
cp
@
312.429 168.213 mo
306.922 168.213 306.922 159.952 312.429 159.952 cv
317.937 159.952 317.937 168.213 312.429 168.213 cv
cp
@
311.23 152.211 mo
305.723 152.211 305.723 143.95 311.23 143.95 cv
316.738 143.95 316.738 152.211 311.23 152.211 cv
cp
@
297.362 133.84 mo
291.855 133.84 291.855 125.579 297.362 125.579 cv
302.87 125.579 302.87 133.84 297.362 133.84 cv
cp
@
299.238 117.214 mo
293.73 117.214 293.73 108.953 299.238 108.953 cv
304.745 108.953 304.745 117.214 299.238 117.214 cv
cp
@
294.905 110.36 mo
289.397 110.36 289.397 102.099 294.905 102.099 cv
300.412 102.099 300.412 110.36 294.905 110.36 cv
cp
@
285.429 52.171 mo
279.921 52.171 279.921 43.91 285.429 43.91 cv
290.936 43.91 290.936 52.171 285.429 52.171 cv
cp
@
3 lw
238.048 210.759 mo
192.864 210.759 li
@
192.864 210.759 mo
192.864 210.759 li
cp
@
246.309 210.759 mo
291.493 210.759 li
@
291.493 210.759 mo
291.493 210.759 li
cp
@
289.079 190.719 mo
273.218 190.719 li
@
273.218 190.719 mo
273.218 190.719 li
cp
@
297.34 190.719 mo
313.201 190.719 li
@
313.201 190.719 mo
313.201 190.719 li
cp
@
268.482 179.139 mo
260.745 179.139 li
@
260.745 179.139 mo
260.745 179.139 li
cp
@
276.743 179.139 mo
284.48 179.139 li
@
284.48 179.139 mo
284.48 179.139 li
cp
@
308.299 164.083 mo
303.294 164.083 li
@
303.294 164.083 mo
303.294 164.083 li
cp
@
316.56 164.083 mo
321.565 164.083 li
@
321.565 164.083 mo
321.565 164.083 li
cp
@
307.099 148.081 mo
305.521 148.081 li
@
305.521 148.081 mo
305.521 148.081 li
cp
@
315.361 148.081 mo
316.939 148.081 li
@
316.939 148.081 mo
316.939 148.081 li
cp
@
290.774 106.229 mo
288.064 106.229 li
@
288.064 106.229 mo
288.064 106.229 li
cp
@
299.035 106.229 mo
301.746 106.229 li
@
301.746 106.229 mo
301.746 106.229 li
cp
@
281.298 48.041 mo
278.228 48.041 li
@
278.228 48.041 mo
278.228 48.041 li
cp
@
289.559 48.041 mo
292.63 48.041 li
@
292.63 48.041 mo
292.63 48.041 li
cp
@
.75 lw
242.179 215.199 mo
236.258 215.199 236.258 206.318 242.179 206.318 cv
248.099 206.318 248.099 215.199 242.179 215.199 cv
cp
@
293.21 195.16 mo
287.289 195.16 287.289 186.279 293.21 186.279 cv
299.13 186.279 299.13 195.16 293.21 195.16 cv
cp
@
272.613 183.579 mo
266.692 183.579 266.692 174.698 272.613 174.698 cv
278.533 174.698 278.533 183.579 272.613 183.579 cv
cp
@
312.429 168.523 mo
306.509 168.523 306.509 159.642 312.429 159.642 cv
318.35 159.642 318.35 168.523 312.429 168.523 cv
cp
@
311.23 152.521 mo
305.31 152.521 305.31 143.64 311.23 143.64 cv
317.151 143.64 317.151 152.521 311.23 152.521 cv
cp
@
297.362 134.15 mo
291.442 134.15 291.442 125.269 297.362 125.269 cv
303.283 125.269 303.283 134.15 297.362 134.15 cv
cp
@
299.238 117.524 mo
293.317 117.524 293.317 108.643 299.238 108.643 cv
305.158 108.643 305.158 117.524 299.238 117.524 cv
cp
@
294.905 110.67 mo
288.984 110.67 288.984 101.789 294.905 101.789 cv
300.825 101.789 300.825 110.67 294.905 110.67 cv
cp
@
285.429 52.481 mo
279.508 52.481 279.508 43.6 285.429 43.6 cv
291.349 43.6 291.349 52.481 285.429 52.481 cv
cp
@
242.179 214.373 mo
237.36 214.373 237.36 207.144 242.179 207.144 cv
246.998 207.144 246.998 214.373 242.179 214.373 cv
cp
0 1 1 0 cmyk
f
293.21 194.334 mo
288.391 194.334 288.391 187.105 293.21 187.105 cv
298.029 187.105 298.029 194.334 293.21 194.334 cv
cp
f
272.613 182.753 mo
267.793 182.753 267.793 175.525 272.613 175.525 cv
277.432 175.525 277.432 182.753 272.613 182.753 cv
cp
f
312.429 167.697 mo
307.61 167.697 307.61 160.468 312.429 160.468 cv
317.248 160.468 317.248 167.697 312.429 167.697 cv
cp
f
311.23 151.695 mo
306.411 151.695 306.411 144.466 311.23 144.466 cv
316.049 144.466 316.049 151.695 311.23 151.695 cv
cp
f
297.362 133.324 mo
292.543 133.324 292.543 126.096 297.362 126.096 cv
302.181 126.096 302.181 133.324 297.362 133.324 cv
cp
f
299.238 116.698 mo
294.419 116.698 294.419 109.469 299.238 109.469 cv
304.057 109.469 304.057 116.698 299.238 116.698 cv
cp
f
294.905 109.844 mo
290.086 109.844 290.086 102.615 294.905 102.615 cv
299.724 102.615 299.724 109.844 294.905 109.844 cv
cp
f
285.429 51.655 mo
280.61 51.655 280.61 44.426 285.429 44.426 cv
290.248 44.426 290.248 51.655 285.429 51.655 cv
cp
f
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf320.675 249.974 mo(0)shgsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf297.957 256.686 mo(20)[-6.91003 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf275.238 256.686 mo(40)[-6.91003 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
1 4228 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/six 25 def
end
BRDZCK+Helvetica /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight 10{/.notdef}rp /C 188{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf252.52 256.686 mo(60)[-6.91003 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf229.801 256.686 mo(80)[-6.91003 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf207.083 263.399 mo(100)[-6.91003 -6.91002 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 236.033 mo(5)shgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 204.537 mo(10)[-6.91003 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 169.943 mo(20)[-6.91003 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 124.506 mo(50)[-6.91003 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 93.01 mo(100)[-6.91003 -6.91002 0 ]yshgrestore
gsave
348.428 266.528 mo
348.428 5.74103 li
180.131 5.74103 li
180.131 266.528 li
cp
clp
BRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf342.877 58.416 mo(200)[-6.91002 -6.91002 0 ]yshgrestore
BRDZCK+Helvetica*1 [0 -15.5351 -15.5351 0 0 0 ]msf202.436 100.755 mo(\(4\) C)[-5.17307 -8.63751 -5.17307 -4.31876 0 ]yshBRDZCK+Helvetica*1 [0 -11.9103 -11.9103 0 0 0 ]msf206.05 67.194 mo(4)sh7.5 lw
225.515 147.164 mo
225.515 135.116 li
.654627 .581201 .569665 .370184 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
1 2720 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>BRDZCK+Helvetica AddT42Char 
1 10356 54 <00020060ffd504f605e5002f003000fe405e290f27232626360e35214726
62267a0e7724096b08180e172502590e680eaa22030a0e3a2224220a0304
1c1886142f2f2b1c3a1403043a2b0930020a0e081124221f283030111825
17490825281a321f25114900252f193132a0216a89182b2b4ef44dedf4ed
4e10f64dedf4ed12392f1211393912113939003f3fed3fed12392f10ed11
1217392efd335d7131304379404d282e111f0008022602262d2506251a26
032c002b002d2e032c002b00052a082b011d131f2b001b15182b01191801
2d042b0009270b2b01250b012e042b000729042b001e121c2b0119161c2b
01002b2b2b2b10102b2b01103c2b2b2b2b103c2b2b2b2b2b2b818181005d
0116171633323736353427262f0126272635342433320415232627262322
06151417161f01161716151404232027263701011e073463fa705cb24b4c
a2c7c3518c0112fbe70143bb0f315bdab09a5a3bd0ce95518cfe9debfeee
9b9b03024d01da7d4e92203ea0783332252d2c355cb7c6fedff5763f7394
626c3220302f223b67c4f4d28c8bee040b00>BRDZCK+Helvetica AddT42Char 
1 12712 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>BRDZCK+Helvetica AddT42Char 
1 13328 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>BRDZCK+Helvetica AddT42Char 
1 13804 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>BRDZCK+Helvetica AddT42Char 
1 14856 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>BRDZCK+Helvetica AddT42Char 
1 15604 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>BRDZCK+Helvetica AddT42Char 
2 232 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>BRDZCK+Helvetica AddT42Char 
2 820 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>BRDZCK+Helvetica AddT42Char 
2 980 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>BRDZCK+Helvetica AddT42Char 
2 1904 92 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/period 17 def
/S 54 def
/a 68 def
/c 70 def
/e 72 def
/i 76 def
/n 81 def
/r 85 def
/t 87 def
/u 88 def
/y 92 def
end
BRDZCK+Helvetica /Encoding get
dup 46 /period put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 10{/.notdef}rp /C 15{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t /u 3{/.notdef}rp /y 134{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf228.252 131.218 mo(Stat. uncertainty)[-8.28945 -3.45501 -6.91002 -3.45501 -3.45501 -3.45501 -6.91002 -6.91002 -6.21405 -6.91003 -4.13846 -3.45501 -6.91002 -2.75885 -6.91003 -3.45501 0 ]ysh242.534 147.164 mo
242.534 135.116 li
.426368 .347875 .353155 .00985733 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
2 372 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/s 86 def
end
BRDZCK+Helvetica /Encoding get
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 10{/.notdef}rp /C 15{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -12.4281 -12.4281 0 0 0 ]msf246.324 131.218 mo(Syst. uncertainty)[-8.28945 -6.21405 -6.21404 -3.45502 -3.45501 -3.45501 -6.91002 -6.91002 -6.21405 -6.91002 -4.13847 -3.45501 -6.91002 -2.75885 -6.91002 -3.45501 0 ]ysh379.214 544.323 mo
379.214 513.142 li
20.0429 513.142 li
20.0429 544.323 li
cp
0 0 0 0 cmyk
ef
.4 lw
379.214 544.323 mo
379.214 513.142 li
20.0429 513.142 li
20.0429 544.323 li
cp
@
gsave
379.214 544.323 mo
379.214 513.142 li
20.0429 513.142 li
20.0429 544.323 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
1 9112 49 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>BRDZCK+Helvetica AddT42Char 
1 15288 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>BRDZCK+Helvetica AddT42Char 
1 15356 80 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>BRDZCK+Helvetica AddT42Char 
1 15788 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>BRDZCK+Helvetica AddT42Char 
1 16028 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/N 49 def
/l 79 def
/m 80 def
/o 82 def
/p 83 def
end
BRDZCK+Helvetica /Encoding get
dup 78 /N put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 10{/.notdef}rp /C 10{/.notdef}rp /N 4{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [-24.9449 0 0 24.9449 0 0 ]msf289.179 519.498 mo(Net-proton Cumulants)[-18.0099 -13.8694 -6.93468 -8.30646 -13.8694 -8.30646 -13.8694 -6.93468 -13.8694 -13.8694 -6.93468 -18.0098 -13.8694 -20.7789 -13.8694 -5.5374 -13.8694 -13.8694 -6.93469 0 ]xshgrestore
389.476 481.961 mo
389.476 28.4176 li
344.323 28.4176 li
344.323 481.961 li
cp
ef
389.476 481.961 mo
389.476 28.4176 li
344.323 28.4176 li
344.323 481.961 li
cp
@
gsave
389.476 481.961 mo
389.476 28.4176 li
344.323 28.4176 li
344.323 481.961 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
1 7880 42 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>BRDZCK+Helvetica AddT42Char 
1 11000 57 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/G 42 def
/V 57 def
end
BRDZCK+Helvetica /Encoding get
dup 71 /G put
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 10{/.notdef}rp /C 3{/.notdef}rp /G 6{/.notdef}rp /N 4{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -21.798 -21.798 0 0 0 ]msf371.275 185.949 mo( \(GeV\))[-6.05984 -7.25858 -16.9588 -12.1197 -14.5391 0 ]yshgrestore
.75021 .679683 .670222 .90164 cmyk
BRDZCK+Helvetica*1 [0 -14.532 -14.532 0 0 0 ]msf377.988 206.086 mo(NN)[-10.4919 0 ]yshgsave
389.476 481.961 mo
389.476 28.4176 li
344.323 28.4176 li
344.323 481.961 li
cp
clp
BRDZCK+Helvetica*1 [0 -21.798 -21.798 0 0 0 ]msf371.275 216.413 mo(s)shgrestore
1.5 lw
359.4 224.674 mo
377.988 221.576 li
@
.75 lw
377.988 221.576 mo
353.204 218.478 li
@
353.204 218.478 mo
353.204 185.949 li
@
gsave
389.476 481.961 mo
389.476 28.4176 li
344.323 28.4176 li
344.323 481.961 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCK+Helvetica gcheck setglobal} if
1 7644 40 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>BRDZCK+Helvetica AddT42Char 
1 14360 74 <0003003dfe3b03e80449001f002d002e00b7404d36144908490958085909
880ca91ba81da927a62bb91b0b4008031622290ec40a221d1f070406291d
190a121d0a0f2e072e2e051c032e162e2d29051a300c0e270d3e26271c19
2f3087217242182b2b4ef44dedf4ed394e10f64dfde4f51112392f003f3f
ed3fed3f3fed10ed1112393931304379402c23281a1e0b1124251026231e
262600281a262600110b0e21000f0e0c0d251d222601271b2926000f0c12
2100002b2b2b01103c103c2b2b2b2b2b818181005d001716173533111407
06212226273316171633323736270e012322241110003300262322070615
1416333237363501027c5e3335a63c70fec9adec0eb70d273d83cf402603
36987daefefb0107ba0144a47fbe4625937cc24f2cfed104423e234387fc
32cc76da9ba548273c9256dd5250f7011d010d012efea1c0b25f9ab5bdaf
6384022d0000>BRDZCK+Helvetica AddT42Char 
BRDZCK+Helvetica /CharStrings get begin
/E 40 def
/g 74 def
end
BRDZCK+Helvetica /Encoding get
dup 69 /E put
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCK+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight 10{/.notdef}rp /C /.notdef /E /.notdef /G 6{/.notdef}rp /N 4{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]BRDZCK+Helvetica nfBRDZCK+Helvetica*1 [0 -21.798 -21.798 0 0 0 ]msf371.275 391.448 mo(Collision Energy )[-15.7379 -12.1197 -4.83884 -4.83884 -4.83881 -10.899 -4.83881 -12.1197 -12.1197 -6.05984 -14.5391 -12.1197 -12.1197 -7.25858 -12.1197 -10.899 0 ]yshgrestore
153.449 207 mo
153.449 28.417 li
110.348 28.417 li
110.348 207 li
cp
0 0 0 0 cmyk
ef
.4 lw
153.449 207 mo
153.449 28.417 li
110.348 28.417 li
110.348 207 li
cp
@
gsave
153.449 207 mo
153.449 28.417 li
110.348 28.417 li
110.348 207 li
cp
clp
.183749 .113191 .628534 0 cmyk
%ADOBeginSubsetFont: Times-Bold Initial
ct_T42Dict begin
-0.227 -0.406 1.777 1.293
 256 array 0 1 255 {1 index exch /.notdef put} for  /Times-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c000005226670676d0000000000000650000006ea
676c79660000000000003f080001b6c4686561640000000000000d3c0000
0036686865610000000000000d7400000024686d74780000000000000d98
0000168c6c6f6361000000000000242400000b486d617870000000000000
2f6c000000206e616d650000000000002f8c000005a47072657000000000
00003530000009d567646972000000000000000000000000000304e702bc
0005000002bc028a0000008c02bc028a000001dd00500212000000000800
000000020000e00002ff5000205a00000000000000007079727300400000
fb020600fe0000000a5c03422000019f4f01000003af0568000000200000
0568001c0568001f0568001803af001a0000ffd70000ffe30000ffe3fe5a
fffd056d0021fecbffda03310000012d0000012d000000000034006a0084
003100d0000300cc000500a500b200420145003400c4001301210031005e
005f013c00450158000d001a006300f00157006600ad00ef008b020a006d
00400145002d0033012d001c005500c700210069fffe00490076008a008e
00a8002d0051008effd0ffe000000031006a006f0086008f011e003100ad
00b900dd016cffc7001f0042006e00ab00d7013effa800000018001a0043
042b0034003b0044004a004d0055005a005f0064008e00a200a300d10179
ff86ffc7ffd70007002100300035006300a600b600cc00fb013301790342
039a00070042004200d200d5010e0142ff53ffb3ffc9001f002800390055
0059008c008c0090009800a400b700ed00fe012f015101adff6bff72ffb7
0025005a0068008100880097009d00c300f9012b012d0232026f02af0000
001c002f002f004200420056008e009c00a200c400da010a010c0156016e
017901b401f7025903b6ff70ff9e000200250032003900ab00bd00c200c9
00d100e9010a010a011c0142016d01c702ad03130393039e057605aeff23
ffe8001f0043005200730086008900af00c900d800dd00e300f700f8010e
0118011a011f013001340135014b015a015a01a601af0203028502a602ad
02ed0308039d03c5040cfee3ffdefff600210026002b0031003500430044
0045004c0059005a005f00720072009700a600bd00c100c700c900cc00d5
00dc00dc00e500ee010401130116010e011b011f01210124012901470147
014b01560158017201a201a201df01e902000200020202b4034903910400
048505340579ff22ff34ff37ff37ffceffe8000300070017001c0035003d
003e004d0055005c00680068006b00720083008500870088008e009f00a3
00b400c500c900ef00f100f200f400fb00fc010301050107010e0110011c
01230128012f013001360136013701400149014b014b014c015101550157
0158015a015f016401800191019201b701b701be01c201c701e201e901f2
01fb020002000205020b0232024902510253027d0297029702b202d30327
03f2041e042b044004da04e4051a0537055a059505ab060907b5fdecfead
feb4ff04ff4cff8eff9effd3ffea000a00120033004e005e00620068006f
007200740080008f0093009300970097009f00a600a700ad00b600b700c0
00c200c700c700cb00cb00cc00db00dc00df00e300e400e400eb00ed00ed
00f400f80105010a01160116011601160118011a011a013001340139013e
0144014b0153015301580166016d01700177017d017d018e019a019f01a2
01a401a801b401b401c201c201c201c201c201c201c201cf01e001e001e6
01e801e901f401fb01fb0214022f022f024c02510253025b027f02800280
0285029602ad02ad02c502c502f7031503320355035b0379039803a803a9
03cb03ea04000466048a049e04be04d10500051f0548056305790587059b
05af05cc05d305e9062406ad078f079307e9012801560123013900000000
000000000000000000000013004c00a000bc0068027602b40145001e0004
006a00af017400fa020801530177011300c900790074002f00b9005d017e
001002300294012c020b02a3054b0397008e0095002d003700d200dd0042
00490091003200d7004601c4025600e8001dffe30013ffed0018ffea0574
05740002054b001d054b0018039700130000ffe30000ffed0000ffeafe42
0000054b001dfebdffd6031e000000820030002a002a002a000040272625
24232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807
060504030201002c4523466020b02660b004262348482d2c452346236120
b02661b004262348482d2c45234660b0206120b04660b004262348482d2c
4523462361b0206020b02661b02061b004262348482d2c45234660b04061
20b06660b004262348482d2c4523462361b0406020b02661b04061b00426
2348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b0
8d44235920b0ed51582320b04d44235920b09051582320b00d4423592121
2d2c20204518684420b001602045b04676688a4560442d2c01b940000000
0a2d2c00b9000040000b2d2c2045b00043617d6818b0004360442d2c45b0
1a234445b01923442d2c2045b00325456164b050515845441b2121592d2c
b00143632362b0002342b00f2b2d2c2045b0004360442d2c20b003255258
2359212d2c69b04061b0008b0c6423648bb8400062600c642364615c58b0
036159b002602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723
442d2c45b0112bb017458cb0172344b0177ae5182d2cb002254661658a46
b040608b482d2cb0022546608a46b040618c482d2c4b53205c58b0028559
58b00185592d2c20b0032545b019234445b01a23444565234520b0032560
6a20b009234223688a6a606120b0005258b21a401a4523614459b0005058
b219401945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21
187e0b2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b
525845441b2121592d2c0120b003252349b04060b0206320b000525823b0
02253823b002256538008a63381b212121212159012d2c4569b00943608a
103a2d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2db800272c4bb800095058b101018e59b8
01ff85b800441db9000900035f5e2db800282c2020456944b001602db800
292cb800282a212db8002a2c2046b003254652582359208a208a49648a20
4620686164b004254620686164525823658a592f20b00053586920b00054
5821b040591b6920b000545821b0406559593a2db8002b2c2046b0042546
5258238a592046206a6164b0042546206a61645258238a592ffd2db8002c
2c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c044
1b2159592db8002d2c2020456944b001602020457d691844b001602db800
2e2cb8002d2a2db8002f2c4b20b003265358b0801bb040598a8a20b00326
53582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b0032653582321b801408a8a1b8a235920b80003265358b0032545b80180
50582321b8018023211bb003254523212321591b2159442db800302c4b53
5845441b2121592db800312c4bb800095058b101018e59b801ff85b80044
1db9000900035f5e2db800322c2020456944b001602db800332cb800322a
212db800342c2046b003254652582359208a208a49648a204620686164b0
04254620686164525823658a592f20b00053586920b000545821b040591b
6920b000545821b0406559593a2db800352c2046b00425465258238a5920
46206a6164b0042546206a61645258238a592ffd2db800362c4b20b00326
50585158b080441bb04044591b21212045b0c05058b0c0441b2159592db8
00372c2020456944b001602020457d691844b001602db800382cb800372a
2db800392c4b20b003265358b0801bb040598a8a20b0032653582321b0c0
8a8a1b8a235920b0032653582321b801008a8a1b8a235920b00326535823
21b801408a8a1b8a235920b80003265358b0032545b8018050582321b801
8023211bb003254523212321591b2159442db8003a2c4b535845441b2121
592db8003b2c4bb800095058b101018e59b801ff85b800441db900090003
5f5e2db8003c2c2020456944b001602db8003d2cb8003c2a212db8003e2c
2046b003254652582359208a208a49648a204620686164b0042546206861
64525823658a592f20b00053586920b000545821b040591b6920b0005458
21b0406559593a2db8003f2c2046b00425465258238a592046206a6164b0
042546206a61645258238a592ffd2db800402c4b20b0032650585158b080
441bb04044591b21212045b0c05058b0c0441b2159592db800412c202045
6944b001602020457d691844b001602db800422cb800412a2db800432c4b
20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a2359
20b0032653582321b801008a8a1b8a235920b0032653582321b801408a8a
1b8a235920b80003265358b0032545b8018050582321b8018023211bb003
254523212321591b2159442db800442c4b535845441b2121592d00000001
0000000000003f7bd6275f0f3cf50111080000000000a284c90000000000
d6d223c5fe2efcbe0e3b0a5c000100090001000000000000000100000600
fe0000000e6cfe2efe2e0e3b0001000000000000000000000000000005a3
0639002500000000020000000200000002aa00a3047101100400fff80400
003b080000fb06aa006a023900b302aa005e02aa002f0400006f048f0031
020000a302aa005a020000a30239ffe30400002f04000084040000230400
001f040000250400002d0400003804000023040000340400003102aa00a3
02aa00a3048f0004048f0031048f00040400006d077100ad05c700250556
002105c7004b05c7001c0556002104e300210639004b06390025031d0021
040000070639003405560025078d001c05c700210639004204e300210639
004205c70021047300470556003405c7002105c700210800002505c70021
05c7001e0556003802aa00890239ff9e02aa004204a600840400000002aa
ffd70400003404730023038d002a04730034038d002e02aa001c0400002f
047300210239002102aaff89047300210239002106aa0021047300210400
002d0473002504730044038d0025031d003402aa00210473002104000021
05c700210400001704000021038d002a0327000901c300780327002f0429
000005c7002505c7002505c7004b0556002105c700210639004205c70021
040000340400003404000034040000340400003404000034038d002a038d
002e038d002e038d002e038d002e023900210239ffd70239ffc20239ffc2
047300210400002d0400002d0400002d0400002d0400002d047300210473
002104730021047300210400005c03330065040000680400002504000078
02cd003d0452005a0473002505fa002305fa00230800009e02aa007802aa
ffc20464001e0800001c0639004205b40017046400310464001e0464001a
04000057049cff7b03f4001005b4001e06960065046400350231ffea0266
000002a400280625007b05c700430400002d0400006d02aa00aa048f0031
0464ffea0400fffb0464001e04e500a00400003404000030080000a80200
000005c7002505c70025063900420800002e05c7002d0400ffed080000f1
040000420400003d02aa009202aa00a30464003103f400760400002105c7
001e0156fea505f4000f02aa006d02aa00300473001c0473001c04000061
0200006302aa00a30400003d0800000d05c700250556002105c700250556
002105560021031d0021031d0021031d0021031d00210639004206390042
065200690639004205c7002105c7002105c700210239002102aaffc202aa
ffa502aaffc902aaffe502aa009202aa003102aa005202aaffc902aa000e
02aaffc20556ffea0239ffd304730047031d003305560038038d002a01c3
007805c700000400004605c7001e0400002104e3002104730025048f0031
048f0042026600840266003b026600410600005506000055060000140400
00000639004b0400002f031d002104730047031d003405c7004b038d002a
05c7004b038d002a0473003405c700250400003405c700250400003405c7
00250400003405c7004b038d002a05c7004b038d002a05c7001c05b80034
05560021038d002e05560021038d002e05560021038d002e05560021038d
002e05560021038d002e0639004b0400002f0639004b0400002f0639004b
0400002f0400002f0639002504730021063900250473ffd6031d000c0239
ffa5031d00210239ffbf031d00210239000b071d002104e3002104000007
02aaff890639003404730021055600250239002105560025023900210556
0025038f002105560025033d002105c700210473002105c7002104730021
05c700210473002104730021063900420400002d063900420400002d0639
00420400002d05c70021038d002505c70021038d002505c70021038dffc3
04730047031d003404730047031d00340556003402aa0021055600340485
00210556003402aa000c05c700210473002105c700210473002105c70021
0473002105c700210473002105c700210473002105c70021047300210800
002505c7002105c7001e0400002105560038038d002a05560038038d002a
04730047031d00340556003402aa00210400001a02aaffd702aa007802aa
ffc202aaffa502aaffc902aaffe502aa009202aaffc202aa003102aaffc9
02aaffc20200008a02aa005202aa000e0200ffe30200000005c700000639
004b0400002f0556002502390021063900340473002105c7002105c70021
038d00250473002106aa002f05c7004204e300420639001b05c7004205c7
004a06ac002306a8006f031f00230639004206390019078d002906390023
0556007906a8006f06aa003305560042055600190558001d0639001f071f
006d063b0019071f001b0625007504e3004c047300730473003904730052
038d004a0400006004e300120473006402aa00870473003d0400001904e3
0064040000120400004a0473004c04730056038d005204730046038d0010
0473000e0556005a0400001205c7001205c700460200004202aa00a3038d
002a02aaff8901cf006701b5003f01e4003905c7002502aa00100243008a
0243008b02aaffd702aa007802aa009202aaffc202aa003102aaffc202aa
ffc202aaffe502aaffa502aaffc902aaffd702aa007802aaffa50243008a
02aaffc201e4006002aaff8907d7001705c7002d0556002f0556003104be
00230591001f0556002b07d10023050a004c065e0039065e00390639003b
05850021078d002b06390035063900580639003904e3003105c700560556
003d0608001706d7005205c7002f0639003905fe002b07be003907be0039
0639003d07be0039050a003905ba006a07dd003905c7003104be0021031d
002306aa0023044c002f04be0023037b002f02390037037b003904000012
05ba005603a2002b031d0023022dffc30764002105df000a0764002f05df
003902aaff8b0473005806d10023044c002f0639003b04730039031d003b
060800170400002506390039047300390556002b038d0033044c00100400
00310400003b03ec0039037b003904000017038d00330612001003540021
0498003b0498003b047300390452000a053b002304730039040000330473
00390473003d038d003103ec002f0400002505ee004404000017045c0039
044c0029067300390673003904ae001b060c003903e3003903a20021060e
00390464001d0464001e03f4ffb903f4001005b400b905b4001e0231fe2e
0231ffea0464ff430464ffea0464001b0464001e01c30078038600780000
00000000000000000000000000000885006507d4006506390034031d0021
063a00210957002108e4002105c7002108e400210c0100210e6c002108e4
002105c7002108e400210bdc00210556002505c7004b05c7001c078d001c
023900210472002106ab0021063900210400002106390021087200210aab
00210639002104000017063900170872001702390021038d002a04730034
06aa0021031d00210239ffbb02aa00a30a76001c0954001c080000340924
0025076f002504860021092400210792002106b2002105c7002504000034
031d00210239ffbf063900420400002d05c700210473002105c700210473
002105c700210473002105c700210473002105c700210473002105c70025
0400003405c70025040000340800001c05c700430639004b0400002f0639
003404730021063900420400002d063900420400002d0a80001c08f8001c
080000340639004b05c700210473002105c70025040000340800001c05c7
0043063900420400002d063900250473002105c700250400003405560021
038d002e063900420400002d063900420400002d063900420400002d0639
00420400002d05c7001e040000210400003d031d002105c7002504000034
05560021047300230556002104730023055600210473002305c7004b038d
002a05c7001c0473003405c7001c0473003405c7001c0473003405c7001c
0473003405c7001c0473003405560021038d002e05560021038d002e0556
0021038d002e05560021038d002e05560021038d002e04e3002102aa001c
0639004b0400002f06390025047300210639002504730021063900250473
002106390025047300210639002504730021031d00110239ffa3031d0021
0239ffc50639003404730021063900340473002106390034047300210556
002502390021055600250239ffc6055600250239ffc6055600250239ffbf
078d001c06aa0021078d001c06aa0021078d001c06aa002105c700210473
002105c700210473002105c700210473002105c700210473002106390042
0400002d063900420400002d063900420400002d063900420400002d04e3
00210473002504e300210473002505c70021038d002505c70021038d0025
05c70021038d002205c70021038d002104730047031d003404730047031d
003404730047031d003404730047031d002504730047031d003405560034
02aa00210556003402aa00210556003402aa000c0556003402aa000505c7
00210473002105c700210473002105c700210473002105c7002104730021
05c700210473002105c700210400002105c70021040000210800002505c7
00210800002505c700210800002505c700210800002505c7002108000025
05c7002105c700210400001705c700210400001705c7001e040000210556
0038038d002a05560038038d002a05560038038d002a0473002102aaffe8
05c700210400002105c7002504000034061000250464003405e4004204b4
00e305c700250400003405c700250400003405c700250400003405c70025
0400003405c700250400003405c700250400003405560021038d002e0556
0021038d002e05a200210458002e0584004f04ba012d05560021038d002e
05560021038d002e031d002102390021063900420400002d0639004204f4
002d0639004204ed011a063900420400002d063900420400002d05c70021
0473002105c7001e0400002105c7001e0400002105c7001e040000210556
0021038d002e05560021038d002e0556002b038d00330498003b07d10023
0612001005c7002d0400003105c7002d040000310800001c05c700430556
002b038d003307d1002306120010050a004c03540021065e00390498003b
065e00390498003b063900580400003305ba006a03a20021060800170400
00250608001704000025060800170400002505fe002b044c002907be0056
060c0039078d001c06aa002105c70021038d001b02aa001101e4003902aa
001102aaffa102aa009202aa00a302aa005a0473002102aa001c04730021
05c700210556002102aa009802aaffc902aaffc90243006b0639004204d2
002d05270021038d002e038d002e04be0023037b003207d1002306120010
0639003b04730039050a004c03540021063900350473003905c7001e05c7
001e05c7002f0400001705fe002b044c0029063900580400003305fe002b
044c002906530021038d002e0350ffd702aaffe50541004405410044038d
002e05e3005705e300570639003b04c4003905fe002b0487002901cf0067
01cf00670222001801b5ffc601b5ff6201b5003f01cfffa401cfffa401cf
ffef01cfffa401cfffa401cfffef01b5ff6202aaff8905c7002504000034
05c700250400003405560021038d000c05560021038d002e031dffcd0239
ff5b031d00210239ffe1063900420400002d063900420400002d05c70021
038d000805c70021038d002505c700210473002105c700210473002102aa
001c05c700250400003405c700250400003405c700250400003405560021
038d002e05560021038d002e031d002102390021063900420400002d0639
00420400002d0639004204d2002d0639004204d2002d0639004204d2002d
0639004204d2002d0639004204d2002d05c7002104730021065300210527
002106530021052700210653002105270021065300210527002106530021
0527002105c7001e04000021038d002e038d002e065e003905410044038d
002e063900580400003306aa002f05c7004206ac0023031f002306a8006f
0639001f06a8007502aa0005031f00230639001f04e3004c038d004a04e3
001202aa00870473000e02aaffa20473000e0473004c0473000e05c70046
04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3
004c0666000c0673000c06caffa406ceffa40673ffa4066affa40666ffef
066effef038d004a038d004a038d004a038d004a038d004a038d004a0796
0067079600670796ffa40796ffa40796ffa40796ffa404e3001204e30012
04e3001204e3001204e3001204e3001204e3001204e30012087b0067087b
006708cfffa408e4ffa4087bffa4087bffa4087bffef087bffef02aa0087
02aa008702aa004802aa004802aa004802aa004802aa008702aa008704ee
006704ee0067053affa40543ffa404eeffa404eeffa404eeffef04eeffef
0473004c0473004c0473004c0473004c0473004c0473004c06f500670762
00670877ffa40877ffa40877ffa40877ffa40473000e0473000e0473000e
0473000e0473000e0473000e0473000e0473000e080800670859ffa40808
ffa40808ffef05c7004605c7004605c7004605c7004605c7004605c70046
05c7004605c7004606d700670736006707f4ffa407f4ffa4078dffa4079e
ffa4073bffef0732ffef04e3004c04e3004c038d004a038d004a04e30012
04e3001202aa008702aa00870473004c0473004c0473000e0473000e05c7
004605c7004604e3004c04e3004c04e3004c04e3004c04e3004c04e3004c
04e3004c04e3004c08d3000c093b000c099fffa4099bffa4093fffa4093f
ffa40951ffef0944ffef04e3001204e3001204e3001204e3001204e30012
04e3001204e3001204e300120b2500670b2500670b93ffa40b86ffa40b25
ffa40b25ffa40b25ffef0b25ffef05c7004605c7004605c7004605c70046
05c7004605c7004605c7004605c70046097c006709e000670a9effa40a9e
ffa409caffa409c6ffa409d3ffef09d7ffef04e3004c04e3004c04e3004c
04e3004c04e3004c04e3004c04e3004c06aa002f06aa002f0659fff20661
fff20954002f04e3001204e3001204e3001204e3001204e30012077c003f
077c003f0861003f0861003f0956002302aafff202aaffd502aaffaf02aa
ffaf02aa003002aa0013031f0023031f002304d4003f04d4003f0473000e
0473000e0473000e0473000e04730056047300560473000e0473000e0639
001f0639001f07ee003f07ee003f0725006705c7004605c7004605c70046
05c7004605c7004607a3003f06d2003f072d003f06ca003f08cf007b05c7
00250400003404000034031d00210239ffc40239002105c7002104730021
04000017065300210527002104e3004c04e3004c04e3004c04e3004c04e3
004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c
04e3004c04e3004c04e3004c04e3004c02aaffd502aaffd502aaffaf02aa
ffd502aaffd502aaffd502aaffd502aaffd502aaffd502aafff202aafff2
02aaffaf02aafff202aaffe402aaffe402aafff202aaffe402aaffe40473
000e0473000e0473000e0473000e0473000e0473000e0473000e0473000e
0473000e0473000e0473000e0473000e0473000e0473000e0473000e0473
000e0473000e0473000e06aa002f06aa002f06aa002f06aa002f06aa002f
06aa002f06aa002f06aa002f06aa002f06aa002f06aa002f06aa002f06aa
002f06aa002f06aa002f06aa002f031f0023031f0023031f0016031f0023
031f0023031f0023031f0023031f0023031f0023031f0023031f0023031f
0016031f0023031f0023031f0023031f0023031f0023031f00230639001f
0639001f0639001f0639001f0639001f0639001f0639001f0639001f0639
001f0639001f0639001f0639001f0639001f0639001f0639001f0639001f
0639001f0639001f06caffef0879ffef04eeffef04eeffef0808ffef0808
ffef04e3004c04e3004c04e3004c02aaff9c02aaff9c02aaff970473000e
0473000e0473000e0473003400000034003400340034009000f2019c0256
032003ee0426046804b00564059805e60604062e064e06a20700076a0806
086e08e8095a09a00a3a0ab60af60b580b940bb80bf40c700d400dfa0e96
0f3c0fbc105e10e01184121a126c12c413ae141014d0156e15f4167c173a
17d618a6192019a01a181ad21b981c3e1cae1cea1d081d421d741d8e1dc8
1e8e1f081f90202e20a6211a221222b0231223882426246e257e261c2688
273027bc283428fc296029fa2a702b502c3a2cea2d5c2dca2dec2e582ea2
2eae2eba2f7e2f8a2f962fa22fae2fba2fc62fd22fde2fea2ff630aa30b6
30c230ce30da30e630f230fe310a31163122312e313a31463152315e316a
3176318232183268330833e634c634ea357035f436e437a6386c38a238e6
39463a263afa3b8e3bd63c1e3c663d003d803e043e903f043fc2401640ac
40ea417642424318439643e8440a445244ca455245ae462c46ac47024702
470e471a472647cc487a489048b04926499a49da4a1a4a644ab24abe4aca
4aee4b624ba84bee4c924d2a4e044e264e644ed64fc24fce4fda4fe64ff2
4ffe500a50165022502e503a504650c250ce50da50e650f25138516051b8
51d452125248528c52f0533a538a53b0547854f054fc5508551455205558
55f256a256ae56ba575a57ea5806589058e8594259be5a825b445c305cc0
5ccc5cd85ce45df65f025f0e5f1a5f265f325fc65fd25fde5fea5ff66002
600e601a60266032603e604a60566062606e607a60866092609e60aa60b6
60c260ce60da60e660f260fe610a61166122612e613a619861a461b061bc
61c861d461e061ec61f862046210621c622862346240624c625862646270
627c6288629462a062ac62b862c462d062dc62e862f46300630c63186324
6330633c634863546360636c637863846390639c63a863b463c063cc63d8
63e463f063fc640864146420642c643864446450645c646864746480648c
649864a464b064bc64c864d464e064ec64f865046510659c65a465ac65b4
65bc65c465cc65d465dc65e465ec65f4664e6656665e667e667e66866692
66a066ac66b866c466d066dc66e866f4670067686830687468946904693c
69d06a506a906b286b846c106c746cd46d326db06e566e9e6eea6f667074
711471e672bc7380743c74de75e4769a777277ee7864789e796a79bc7a50
7aa27b947c1c7cea7d727e427ea27f467ffa806e80ee81c68218828682f0
83488370838683b083bc83de84388492849c84a684b084ba84c484ce84d8
84e284ec84f684fe8506850e8568857485a885d886b686ea872c878287ac
87fe884888b68904893c89a689ee8a388a6e8aa68ade8b0c8b408b828bb2
8bfe8c5c8caa8ce68d1e8d748dd48e108e5c8e928ed88f2e8f6e8f9a8fb8
900e9054908a90c290ec9118914c919291cc920a924492ac9314937693ce
940a946694b494f4954895a095ee966c96dc9710975297ba9812985298a4
98f49934996099ae99e69a589a9e9ae29b549b9e9bea9c2e9c729ca69ce0
9d1e9d589d829dc49e2a9e6e9eb09ef49f4a9fa69feaa03ea07ca0b8a10e
a11aa122a12ea136a142a14aa156a15ea16aa172a17ea186a18ea19aa19a
a19aa19aa19aa1a6a1b2a1baa1c2a1cea1dea1eaa1f2a1fea20ea222a22e
a236a242a252a25aa262a26aa272a27aa286a296a2a2a2aaa2b6a2c6a2da
a2e6a2eea2faa30aa312a31aa322a32aa336a342a34aa35aa36aa37aa386
a392a39ea3aaa3b6a3c2a3cea3daa3e6a3f2a3fea40aa416a422a432a442
a452a462a472a482a492a4a2a4b2a4c2a4d2a4e2a4eea4faa506a512a51e
a52aa536a542a552a562a56ea57aa586a592a59ea5aaa5baa5caa5d6a5e2
a5eea5faa606a612a61ea62aa636a642a652a662a672a682a68ea69aa6aa
a6baa6c6a6d2a6daa6e2a6eea6faa706a712a71ea72aa736a742a74ea75a
a766a772a77ea78aa796a7a2a7aea7baa7c6a7d2a7e2a7f2a802a812a81e
a82aa836a842a852a862a86ea87aa886a892a89ea8aaa8b6a8c2a8cea8da
a8e6a8f2a8fea90aa916a922a932a942a94ea95aa966a972a97ea98aa996
a9a2a9b2a9c2a9cea9daa9e6a9f2a9feaa0aaa16aa22aa2eaa3aaa46aa52
aa5eaa6aaa76aa82aa8eaa9aaaaaaabaaacaaadaaaeaaafaab0aab1aab26
ab32ab3eab4aab56ab62ab6eab7aab8aab9aaba6abb2abbeabcaabd6abe2
abf2ac02ac12ac22ac32ac42ac4eac5aac66ac72ac7eac8aac96aca2acae
acbaacc6acd2acdeaceaacfaad0aad1aad2aad36ad42ad4ead5aad66ad72
ad7ead8aad96ada2adaeadbaadc6add2addeadeaadf6ae02ae0eae1aae26
ae32ae3eae4aae56ae62ae6eae7aae86ae92ae9eaeaaaebaaecaaedaaeea
aefaaf0aaf1aaf2aaf3aaf4aaf5aaf6aaf7aaf8aaf9aafaaafb6afc2afce
afdaafeaaffab00ab01ab02ab03ab04ab05ab066b072b07eb08ab09ab0aa
b0bab0cab0dab0eab0fab10ab116b122b12eb13ab146b152b15eb16ab17a
b18ab19ab1aab1b6b1c2b1ceb1dab1e6b1f2b1feb20ab216b21eb226b232
b23eb24ab256b262b26eb27ab286b292b29eb2aab2b6b2c2b2ceb2dab2e6
b2f2b2feb30ab316b322b32eb33ab346b352b35eb36ab376b390b398b3b2
b3eeb414b43ab448b492b4c2b516b56eb5aab5e0b5eeb5fcb624b67ab6c8
b722b75cb796b7c8b7fcb87eb8feb956b9aaba14ba76babcbb0ebb56bb9e
bc00bc52bca2bcf6bd32bd6abda2bde4be3cbe76bea2bec2befebf3abf74
bfc2c010c05ec0b0c0f4c140c166c18cc1acc1ecc222c238c26ec2a4c2e4
c31ac350c390c3c6c3d2c3dec3eac3f6c402c40ec41ac426c432c43ec44a
c456c462c46ec47ac486c492c49ec4aac4b6c4c2c4cec4dac4e6c4f2c4fe
c50ac516c526c536c546c556c562c56ec57ec58ec59ac5a6c5b2c5bec5ce
c5dec5eac5f6c602c60ec61ac626c632c63ec64ac656c662c66ec67ac686
c692c69ec6aac6b6c6c2c6cec6dac6e6c6f2c6fec70ec71ec72ac736c742
c74ec75ac766c772c77ec78ac796c7a2c7aec7bac7c6c7d2c7dec7eac7f6
c802c80ec81ac826c832c83ec84ac856c862c86ec87ac886c892c89ec8aa
c8b6c8c2c8cec8dac8e6c8f2c8fec90ac916c922c92ec93ac946c952c95e
c96ac976c982c98ec99ac9a6c9b2c9bec9cac9d6c9e2c9eec9faca06ca12
ca1eca2aca36ca42ca4eca5aca66ca72ca7eca8aca96caa2caaecabacac6
cad2cadecaeacaf6cb02cb0ecb1acb26cb32cb3ecb4acb56cb62cb6ecb7a
cb86cb92cb9ecbaacbb6cbc2cbcecbdacbe6cbf2cbfecc0acc16cc22cc2e
cc3acc46cc52cc5ecc6acc76cc82cc8ecc9acca6ccb2ccbecccaccd6cce2
cceeccfacd06cd12cd1ecd2acd36cd42cd4ecd5acd66cd72cd7ecd8acd96
cda2cdb2cdc2cdd2cde2cdf2ce02ce12ce22ce32ce42ce52ce62ce72ce82
ce92cea2ceb2cec2ced2cee2cef2cf02cf12cf22cf32cf42cf52cf62cf72
cf82cf92cfa2cfb2cfc2cfd2cfe2cff2d002d012d022d032d042d052d062
d072d082d092d0a2d0aed0bad0cad0d6d0e6d0f2d102d10ed11ad126d132
d13ed14ed15ad16ad176d186d192d19ed1aad1b6d1c2d1ced1dad1e6d1f2
d1fed20ad216d222d22ed23ad246d252d25ed26ad276d282d28ed29ad2a6
d2b2d2bed2cad2d6d2e6d2f2d302d30ed31ed32ad336d342d34ed35ad36a
d37ad38ad39ad3aad3b6d3c6d3d6d3e2d3eed3fad40ad41ad42ad43ad44a
d45ad46ad47ad48ad49ad4aad4bad4cad4dad4ead4fad508d518d526d534
d542d550d55ed56cd57ad58ad59ad5aad5bad5cad5dad5ead5fad60ad61a
d62ad63ad64ad65ad66ad67ad68ad69ad6aad6bad6cad6dad6ead6fad70a
d71ad72ad73ad74ad75ad76ad77ad78ad79ad7aad7bad7cad7dad7ead7fa
d80ad81ad82ad83ad84ad85ad86ad87ad88ad89ad8aad8bad8cad8dad8ea
d8fad90ad91ad92ad93ad94ad95ad96ad97ad98ad99ad9aad9bad9cad9da
d9ead9fada0ada1ada2ada3ada4ada5ada6ada7ada8ada9adaaadabadaca
dadadaeadafadb08db16db24db34db44db54db620001000005a3005f0006
008500080002001000100045000007e809d5000400010000002d02220001
000000000000006d000000010000000000010005006d0001000000000002
000400720001000000000003002000760001000000000004000a00960001
000000000005000800a00001000000000006000a00a80001000000000007
002e00b20001000000000100001800e00001000000000101000c00f80001
0000000001020009010400010000000001030010010d0001000000010004
000a011d0001000000010007002b01270001000000020004000a01520001
0000000200070038015c0001000000030004000f01940001000000030007
002c01a30001000000040004000901cf0001000000040007003601d80001
0000000500040009020e0001000000050007003202170001000000060004
000d02490001000000060007002c02560001000000070004000902820001
0000000700070038028b0001000000080004000f02c30001000000090004
000d02d200010000000d0004000c02df0003000104040002000402eb0003
000104060002000602ef0003000104070002000802f50003000104090002
000802fd00030001040b00020016030500030001040c00020008031b0003
000104100002001203230003000104110002000803350003000104120002
0006033d0003000104130002000603430003000104140002000603490003
000104160002000e034f0003000104190002000c035d00030001041d0002
0006036900030001080400020004036f000300010c0a0002000e0373a920
313939302d3939204170706c6520436f6d707574657220496e632e20a920
31393831204c696e6f7479706520414720a920313939302d393120547970
6520536f6c7574696f6e7320496e632e20a920313939302d393120546865
20466f6e742042757265617520496e632e54696d6573426f6c6454696d65
7320426f6c643b2031342e30643165343b20323031382d30332d31365469
6d657320426f6c6431342e306431653454696d65732d426f6c6454696d65
73206973206120726567697374657265642074726164656d61726b206f66
204c696e6f74797065204147416c6c205479706f67726170686963204665
617475726573416c6c2046656174757265734c6967617475726573436f6d
6d6f6e204c696761747572657354696d6573204772617354696d65732065
737420756e65206d617271756520648e706f738e65206465204c696e6f74
79706520414754696d6573204665747454696d6573206973742065696e20
65696e676574726167656e657320576172656e7a65696368656e20646572
204c696e6f7479706520414754696d65732067726173736574746f54696d
6573208f20756e206d61726368696f207265676973747261746f20646920
4c696e6f7479706520414754696d65732076657454696d65732069732065
656e20676572656769737472656572642068616e64656c736d65726b2076
616e204c696e6f7479706520414754696d65732046657454696d6573208a
722065747420726567697374726572617420766172756d8a726b6520669a
72204c696e6f7479706520414754696d6573204e65677269746154696d65
7320657320756e61206d617263612072656769737472616461206465204c
696e6f7479706520414754696d65732046656454696d6573206572206574
20726567697374726572657420766172656dbe726b652074696c68bf7265
6e6465204c696e6f7479706520414754696d65732043617272656761646f
54696d65732048616c7666657454696d6573206c69686176617c979ad400
460065006400460065007400740042006f006c006400500075006f006c00
69006c006900680061007600610047007200610073004700720061007300
73006500740074006f30dc30fc30eb30c9bcfcb4dcccb400560065007400
4600650074004e00650067007200690074006f041604380440043d044b04
390046006500747c974f53004e00650067007200690074006100b8003b2b
b800312bb800272bb5900690070215b8028bb2471f14b8028ab2471f13b8
0289b2471f12b80288b2471f11b80287b2471f10b80286b2471f0fb80285
b2471f0eb80284b2471f0db80283b2471f0cb80282b2471f0bb80281b247
1f0ab80280b2471f09b8027fb2471f08b8027eb2471f07b8027db2471f06
b8027cb2471f05b8027bb2471f04b8027ab2471f03b80279b2471f02b802
78b2471f01b80279b2471f00b802784015471fdf4901cf4901202a012037
019059019024018f412f0260000100100260001002620002009f02630001
00ff0264000100ef0264000100d00260000100cf0265000100bf02610001
00af02610001009f02630001008f02630001006f02660001004f0263004f
02670002001f02650001001f0267b2010840410b023401cc0071000d01c4
0071000d01ab0071000d01074014710dcc710dba710da6710d80710d3b71
0d36710d410a01d10037000d01b10037000d01650037000d0126400b370d
a8370d76370d23370d410a01e70059000d014a0059000d011c0059000d01
174014590de4590dc1590d9f590d60590d56590d24590d4116018a002800
0d01830028000d01820028000d017a0028000d01680028000d0152002800
0d012a0028000d01114011280dd8280d9e280d9b280d62280d38280dbb01
0f00b4000d010a400eb40de3b40d27b40d1eb40db41b0dba01ca000f010e
b20f0009b901ca010eb40d1e1b6e1fb801f9b25c181fb801f4b25c181fb8
01f2b25c1d1fb801efb25c251fb801eeb25c261f411901e6005c0801001f
01e5005c0156001f01e200a00401001f01dd016b0201001f01dc016b0401
001f01da002a0125001f01d8b22abb1fb801d7b22abb1fb801d6b22abb1f
b801d4b22a5a1fb801d0b22a281fb801cdb22a221fb801cbb22a221fb801
c8b22a1e1fb801c5b249201fb801c1b249261fb801c0b2492e1fb801bfb2
492f1fb801bbb249621fb801b8b249e41fb801b7b249e41fb801b3b22d6c
1fb801b2b22d811fbc01b0002d02ab001f0180b25c191fb8017fb25c1c1f
b8017db25c361fb8017cb25c381f412d017700a00125001f017400a00401
001f017300a0019a001f017100a00156001f0170008e0125001f016f008e
0401001f016e016b0125001f016d016b0156001f016a016b0801001f0169
0040019a001f0167002a019a001f0163b22a4a1fb8015eb22a2c1fb80159
b249311fb80158b249521f410d015500490401001f0154004902ab001f01
530049019a001f0150b22dab1fb8014fb22de41fbc014d002d02ab001f01
4cb22dcd1f4109014b002f0101001f01490025019a001f0148b2259e1fb8
0131b25c261f4119012f005c0156001f012d00a0019a001f012b008e019a
001f012900400201001f0127002a0401001f0125002a0156001f0123b22a
bb1fb80122b22a931fb80121b22a471fb80120b22a291fb8011db22a1e1f
b80118b249261fb80116b2494a1fb80113b22d6c1fbc0110002d0156001f
010b4014259e1ffa5c1f1ff95c241ff8a0e41ff7a0e41ff4b9016b0201b2
1ff12ab8012540171ff02ae41fee2a321fed2a311fec2a0a1fe52d231fd7
8ebb0401001f00d301254020151fd32a111fd249121fcd25e41fc45c1d1f
c35c9e1fc02a621fbf2a5a1faf40b80401400f1fad2a341fac490c1fab49
6c1fa949b8040140131f9c49121f9a49931f9425e41f8d2a6c1f8a25b804
0140131f82401a1f81492f1f775c9e1f722d1c1f702db8019ab61f6f2d35
1f6d2fb8019ab21f6b25b80125b61f6a25931f6825b80801b21f638eb802
01400b1f5b2a111f5a492c1f5549b80201400a1f07062a1f03022a1f05b8
0273b2471f0bb80272b2471f07b80271b2471f09b80270b2471f03b8026f
b2471f04b8025eb2471f00b8025eb2471f06b8025fb2471f02b8025eb347
1f472fb80201b61f4349221f3d8eb802abb21f3c25b80401b21f3949b808
01b21f332db80201b21f30a0b8012540351f2c2d281f1f490a1f55b10757
073a07350734072e07260721071d071c071408120810080e080c080a0808
08060804080208000814b8ffe04024000001001406100000010006040000
01000402000001000200000001000002010802004a4118028a0008028800
0802860008028400080282000802800008027e0008027c0008027a000802
78000802760008028affe0b300000100b9028a027cb41000000100b9027c
027ab300000100b9027a0286b300000100b902860278b300000100b90278
0276b300000100b80276b302010802b80276b14a00b801ff85b0018d1816
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b18763f183f123e113946443e
113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b
2b2b182b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358
b0ff1d594bb02953205c58b9023602344544b90235023445445958b90172
0236455258b9023601724459594bb04c53205c58b900a002354544b9005c
023545445958b9032200a0455258b900a003224459594bb08953205c58b1
8ea04544b1a0a045445958b90598008e455258b9008e05984459594bb0ab
53205c58b9002a02364544b90040023645445958b9060a002a455258b900
2a060a4459594bb802ab53205c58b9016b00404544b1404045445958b919
0f016b455258b9016b190f4459594bb01653205c58b125254544b1492545
445958b12b25455258b1252b4459594bb02753205c58b125254544b12d21
45445958b16b25455258b1256b4459594bb8020153205c58b125254544b1
2f2545445958b12125455258b125214459592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb3
8be089a4456523456023456560234560b08b766818b080622020b189e045
65234520b003266062636820b003266165b0e0236544b089234420b18ba4
4565234520b003266062636820b003266165b0a4236544b08b2344b100a4
455458b1a4406544b28b408b4523614459b34ea24c914565234560234565
60234560b089766818b080622020b14ca24565234520b003266062636820
b003266165b0a2236544b04c234420b14e914565234520b0032660626368
20b003266165b091236544b04e2344b10091455458b191406544b24e404e
452361445945695342737373737373737373737373757474737373737373
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7300000000>
[16161 16105 16381 16193 16281 16285 14925 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Times-Bold AddT42Char 
1 2760 14 <000100310000045c042a000b0037401c04a106011f0700a10a0a0d17171a
06a104091f030aa100190c585d182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3ce431301335211133112115211123113101add101adfe53d1
01add301aafe56d3fe5301ad0000>Times-Bold AddT42Char 
1 6784 36 <0003002500000597058700030024002500eb4067851401060a060b290939
09370a4a014909490a690a6714751489018b098a0a890c8a148a15c80012
02031a1c0809190001160a0b163d120b0b0a8f10ff10021c2d1208080909
08081c240a09010204230b160f10160b081c041a040102d90a00032d19ff
1a011ab8019540150a0903042211030e1b2423100f08250325250f2427b8
0263b7400f7f10df100210b801deb223c024b9026200262ff41adcf65ddc
1ae61112392f003f003f3c3c3cfd173c3f3cfd5d3cfd3c10fd3c11121739
01111239391217391139397d10c418070e2e2b055d870e2e182b071005c4
c4c40710c4c4c43130015d005d0103230301363736370133011e01371521
353e01353427262f012106070615141716171521010325c411b9fe8e4a2d
1d3601c73901c94d4c46fd69643f100a1134fe342d0d1b3b2346fe5e02ca
01e301dafe26fe51053e27850461fbccb569023434041a3518311d297c7a
254f242c140b013405870000>Times-Bold AddT42Char 
1 7468 38 <0002004bffd7056505870024002500cb405e6d127b0d7b12841d9b0d971d
981f98219a23b80ab41eb522c915cf16ca17db17ea17fc17121616162117
2346154116461a54175618671876157917860d871587168717a615a616a6
17c90ec511c51ec922ed12171718051b0665081b0707b80132b2066502b8
0112401e2417070f181718130c2f240313721c0925032525072007440018
30180218b80267400927580f680f020f5c20b80266b127262fccf4ed5d10
f65de41112392f003f3fed3fed1139392f011112390010ecf4ed0110edf4
ed10c93130005d015d000433323637331123262726232202111417122132
3736371706070623202726111037362127039801060f272f0639344a4d90
b6cead335f01029e884e6a3d785ba2c6fed1cde3d9cc01280505825f3c21
fe219c5aa6fe9dfed5dc8efef658337032863c6bb4c70151014ecfc20500
0000>Times-Bold AddT42Char 
2 1600 76 <00020021000002090587000b001c0067403810151f1b020d0c10370c1e1c
362411231e15362317231e1b712317111003151c3f08012f080108400201
15061c1b0a0540200b010b22101eb80261b416172a1110b90260001d2ff4
3cfd3ce410f45ded003f3c3f3fed5d5d111217392b2b2b10d4015d313012
363332161514062322263503363736351134262735211114161715217b5d
42415d5d41425d5a36141e2a3e01892837fe18052a5d5d42425d5d42fb49
09121b46025a3e2d0b32fcf643260b31>Times-Bold AddT42Char 
2 2348 79 <00010021000002090568000f0054402806070c010010081f0e020337001e
0f362404231e0836230a371e0e36230a0403030f08000f0e0a11b80261b4
090a2a0403b9026000102ff43cfd3ce6003f3c3f1217394d2b2b2b055d00
3d10d4c410d43130373e013511342627352111141617152121362d2a3901
842c38fe18310d2b44041341280d32fb45442a0e31000000>Times-Bold AddT42Char 
2 3036 81 <000200210000044403c90028002900bc407a1320010d160d170326032719
0b1c161c1729162917570e59165917660e6c166c17960e99169917ac16ac
17bc16bc17c916c917180c160c170210081f15022716231a172600033700
1e283b2404231e083b2311231e15362323221a110a04030728201f011f49
0d070806282716150a2907292911031b1a2a1011b80261b62b0922232a04
03b80260b12b2a2fccfc3cfde410fe3cfd3c1112392f003f3f3c3c3c3f3f
ed5d1117392b2b2b10c4c401111239395d313001715d005d373e01351134
26273521153e0133321615111416171521353e0135113427262322060711
1416171521012138352b42018431975c84912f37fe1f37280e1847355918
2837fe13021731072f46025a3e300832934a6188abfe1145280731310b26
4301f046233f4d27fddc43260b3103c9>Times-Bold AddT42Char 
2 3352 82 <0003002dffe103c903c9000b0019001a00764047290125032507290904aa
17ea04e506e50af904f606f60a0766146616790e79107614761606570a6a
0e69100358005804570603152502070f25080b1a071a1a050b5612011240
05b80263b61c59190119400bb80262b11c1b2fccf4ed5d10f6ed5d111239
2f003f3fed3fed3130005d5d5d5d015d1200333200151400232200350417
163332363534262322070615132d0107c7cb0103ff00cec8fefa012d1623
68633e415f682317a102ab011efedcd0cdfed9011fd5d75685cce6e5cd85
59d401f40000>Times-Bold AddT42Char 
2 4424 86 <00020034ffe302e803c90039003a00e3402a15121a2d560b960cb42cc62c
e62cf52c080d11022c2912252d660bc80ec627c628c629d6290a90000100
b801e2b339b34035b80109b5212e9f1b011bb80169b31ab34016b8010940
532113250a02041f25130704252e0b3a073a3a1a100c070322020a252207
40191e1ab31c1e21481b3e47ec07010782002b802b902b032b3c40381e39
011e2139220022e322012282a010b010c010d01004103c3b2fccd65ded5d
f4e41a3ded10ed1a1810d65ded5d76f4761a3dedf4ed181a111239397111
12392f003f3fed3fed111739101aec1af4ed5d00101aec1af4ed5d313001
5d005d13331e01333236353427262f012627263534363332163332363733
11232e01232206151417161f011617161514062322262f012e0123220607
230134391ea4564f4a28163198783435a6954192121915072d341d845844
431e1d5170683050a5a529533d2313090711191031015901369379473a37
2715184a3b45455e77ad2b1513fed8687e4c2c2424252736322f507572c5
11150c07021b2003e600>Times-Bold AddT42Char 
2 5024 88 <00020021ffe3044b03c90024002500b940462219014c0d4c0e023c0d3c0e
0209070819190719193b1d4a1d590769079a07a907ba07b616c616d616e6
160f100e10240222230a231e0eba2320231e243623143b1023131e14b801
0e40261740091842172018100a0905240e00062f050105491c1c170b2507
2525101f18220a092a0f10b80261b427012a201fb80260b127262fccf43c
fd10f63cfd3ce41112392f003f3f3c4d10ed5d3f3c3c1739101adcca1a10
f5edfc01f52b2b103dd418015d3130005d015d5d5d011114171633323736
3711342627352111141617150e0107350607062322263511342627352501
a30f1a4d312f1b29334d01983046be636d4930545b63ab2a3c020503affd
493e1d331f1128024540330332fd1f4031062f121122873f1a2e7ea10205
41280d321a000000>Times-Bold AddT42Char 
1 0 0 <000200250000060e0568000300070041401c05061f02010004071f03000a
05041f0303021a0906071f0100190809b8022eb3216750182b2b4ef43c4d
fd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c3130331121112711211125
05e9c7fba50568fa98c703dafc26>Times-Bold AddT42Char 
Times-Bold /CharStrings get begin
/space 3 def
/plus 14 def
/A 36 def
/C 38 def
/i 76 def
/l 79 def
/n 81 def
/o 82 def
/s 86 def
/u 88 def
end
Times-Bold /Encoding get
dup 32 /space put
dup 43 /plus put
dup 65 /A put
dup 67 /C put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 115 /s put
dup 117 /u put
pop
end
%ADOEndSubsetFont
/BRDZCL+Times-Bold /Times-Bold findfont ct_VMDictPut/BRDZCL+Times-Bold*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 21{/.notdef}rp /A /.notdef /C 37{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 3{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]BRDZCL+Times-Bold nfBRDZCL+Times-Bold*1 [0 -14.0207 -14.0207 0 0 0 ]msf124.986 197.309 mo(Au+Au Collisions)[-10.1227 -7.7955 -7.99168 -10.1227 -7.7955 -3.50517 -10.1227 -7.01035 -3.89775 -3.89775 -3.89775 -5.45395 -3.89775 -7.01035 -7.7955 0 ]ysh/BRDZCL+Times-Bold*1 uf/BRDZCL+Times-Bold uf/Times-Bold uf/BRDZCK+Helvetica*1 uf/BRDZCK+Helvetica uf/Helvetica ufgrestore
gsave
153.449 207 mo
153.449 28.417 li
110.348 28.417 li
110.348 207 li
cp
clp
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Bold Initial
ct_T42Dict begin
-0.227 -0.406 1.777 1.293
 256 array 0 1 255 {1 index exch /.notdef put} for  /Times-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c000005226670676d0000000000000650000006ea
676c79660000000000003f080001b6c4686561640000000000000d3c0000
0036686865610000000000000d7400000024686d74780000000000000d98
0000168c6c6f6361000000000000242400000b486d617870000000000000
2f6c000000206e616d650000000000002f8c000005a47072657000000000
00003530000009d567646972000000000000000000000000000304e702bc
0005000002bc028a0000008c02bc028a000001dd00500212000000000800
000000020000e00002ff5000205a00000000000000007079727300400000
fb020600fe0000000a5c03422000019f4f01000003af0568000000200000
0568001c0568001f0568001803af001a0000ffd70000ffe30000ffe3fe5a
fffd056d0021fecbffda03310000012d0000012d000000000034006a0084
003100d0000300cc000500a500b200420145003400c4001301210031005e
005f013c00450158000d001a006300f00157006600ad00ef008b020a006d
00400145002d0033012d001c005500c700210069fffe00490076008a008e
00a8002d0051008effd0ffe000000031006a006f0086008f011e003100ad
00b900dd016cffc7001f0042006e00ab00d7013effa800000018001a0043
042b0034003b0044004a004d0055005a005f0064008e00a200a300d10179
ff86ffc7ffd70007002100300035006300a600b600cc00fb013301790342
039a00070042004200d200d5010e0142ff53ffb3ffc9001f002800390055
0059008c008c0090009800a400b700ed00fe012f015101adff6bff72ffb7
0025005a0068008100880097009d00c300f9012b012d0232026f02af0000
001c002f002f004200420056008e009c00a200c400da010a010c0156016e
017901b401f7025903b6ff70ff9e000200250032003900ab00bd00c200c9
00d100e9010a010a011c0142016d01c702ad03130393039e057605aeff23
ffe8001f0043005200730086008900af00c900d800dd00e300f700f8010e
0118011a011f013001340135014b015a015a01a601af0203028502a602ad
02ed0308039d03c5040cfee3ffdefff600210026002b0031003500430044
0045004c0059005a005f00720072009700a600bd00c100c700c900cc00d5
00dc00dc00e500ee010401130116010e011b011f01210124012901470147
014b01560158017201a201a201df01e902000200020202b4034903910400
048505340579ff22ff34ff37ff37ffceffe8000300070017001c0035003d
003e004d0055005c00680068006b00720083008500870088008e009f00a3
00b400c500c900ef00f100f200f400fb00fc010301050107010e0110011c
01230128012f013001360136013701400149014b014b014c015101550157
0158015a015f016401800191019201b701b701be01c201c701e201e901f2
01fb020002000205020b0232024902510253027d0297029702b202d30327
03f2041e042b044004da04e4051a0537055a059505ab060907b5fdecfead
feb4ff04ff4cff8eff9effd3ffea000a00120033004e005e00620068006f
007200740080008f0093009300970097009f00a600a700ad00b600b700c0
00c200c700c700cb00cb00cc00db00dc00df00e300e400e400eb00ed00ed
00f400f80105010a01160116011601160118011a011a013001340139013e
0144014b0153015301580166016d01700177017d017d018e019a019f01a2
01a401a801b401b401c201c201c201c201c201c201c201cf01e001e001e6
01e801e901f401fb01fb0214022f022f024c02510253025b027f02800280
0285029602ad02ad02c502c502f7031503320355035b0379039803a803a9
03cb03ea04000466048a049e04be04d10500051f0548056305790587059b
05af05cc05d305e9062406ad078f079307e9012801560123013900000000
000000000000000000000013004c00a000bc0068027602b40145001e0004
006a00af017400fa020801530177011300c900790074002f00b9005d017e
001002300294012c020b02a3054b0397008e0095002d003700d200dd0042
00490091003200d7004601c4025600e8001dffe30013ffed0018ffea0574
05740002054b001d054b0018039700130000ffe30000ffed0000ffeafe42
0000054b001dfebdffd6031e000000820030002a002a002a000040272625
24232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807
060504030201002c4523466020b02660b004262348482d2c452346236120
b02661b004262348482d2c45234660b0206120b04660b004262348482d2c
4523462361b0206020b02661b02061b004262348482d2c45234660b04061
20b06660b004262348482d2c4523462361b0406020b02661b04061b00426
2348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b0
8d44235920b0ed51582320b04d44235920b09051582320b00d4423592121
2d2c20204518684420b001602045b04676688a4560442d2c01b940000000
0a2d2c00b9000040000b2d2c2045b00043617d6818b0004360442d2c45b0
1a234445b01923442d2c2045b00325456164b050515845441b2121592d2c
b00143632362b0002342b00f2b2d2c2045b0004360442d2c20b003255258
2359212d2c69b04061b0008b0c6423648bb8400062600c642364615c58b0
036159b002602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723
442d2c45b0112bb017458cb0172344b0177ae5182d2cb002254661658a46
b040608b482d2cb0022546608a46b040618c482d2c4b53205c58b0028559
58b00185592d2c20b0032545b019234445b01a23444565234520b0032560
6a20b009234223688a6a606120b0005258b21a401a4523614459b0005058
b219401945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21
187e0b2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b
525845441b2121592d2c0120b003252349b04060b0206320b000525823b0
02253823b002256538008a63381b212121212159012d2c4569b00943608a
103a2d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2db800272c4bb800095058b101018e59b8
01ff85b800441db9000900035f5e2db800282c2020456944b001602db800
292cb800282a212db8002a2c2046b003254652582359208a208a49648a20
4620686164b004254620686164525823658a592f20b00053586920b00054
5821b040591b6920b000545821b0406559593a2db8002b2c2046b0042546
5258238a592046206a6164b0042546206a61645258238a592ffd2db8002c
2c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c044
1b2159592db8002d2c2020456944b001602020457d691844b001602db800
2e2cb8002d2a2db8002f2c4b20b003265358b0801bb040598a8a20b00326
53582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b0032653582321b801408a8a1b8a235920b80003265358b0032545b80180
50582321b8018023211bb003254523212321591b2159442db800302c4b53
5845441b2121592db800312c4bb800095058b101018e59b801ff85b80044
1db9000900035f5e2db800322c2020456944b001602db800332cb800322a
212db800342c2046b003254652582359208a208a49648a204620686164b0
04254620686164525823658a592f20b00053586920b000545821b040591b
6920b000545821b0406559593a2db800352c2046b00425465258238a5920
46206a6164b0042546206a61645258238a592ffd2db800362c4b20b00326
50585158b080441bb04044591b21212045b0c05058b0c0441b2159592db8
00372c2020456944b001602020457d691844b001602db800382cb800372a
2db800392c4b20b003265358b0801bb040598a8a20b0032653582321b0c0
8a8a1b8a235920b0032653582321b801008a8a1b8a235920b00326535823
21b801408a8a1b8a235920b80003265358b0032545b8018050582321b801
8023211bb003254523212321591b2159442db8003a2c4b535845441b2121
592db8003b2c4bb800095058b101018e59b801ff85b800441db900090003
5f5e2db8003c2c2020456944b001602db8003d2cb8003c2a212db8003e2c
2046b003254652582359208a208a49648a204620686164b0042546206861
64525823658a592f20b00053586920b000545821b040591b6920b0005458
21b0406559593a2db8003f2c2046b00425465258238a592046206a6164b0
042546206a61645258238a592ffd2db800402c4b20b0032650585158b080
441bb04044591b21212045b0c05058b0c0441b2159592db800412c202045
6944b001602020457d691844b001602db800422cb800412a2db800432c4b
20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a2359
20b0032653582321b801008a8a1b8a235920b0032653582321b801408a8a
1b8a235920b80003265358b0032545b8018050582321b8018023211bb003
254523212321591b2159442db800442c4b535845441b2121592d00000001
0000000000003f7bd6275f0f3cf50111080000000000a284c90000000000
d6d223c5fe2efcbe0e3b0a5c000100090001000000000000000100000600
fe0000000e6cfe2efe2e0e3b0001000000000000000000000000000005a3
0639002500000000020000000200000002aa00a3047101100400fff80400
003b080000fb06aa006a023900b302aa005e02aa002f0400006f048f0031
020000a302aa005a020000a30239ffe30400002f04000084040000230400
001f040000250400002d0400003804000023040000340400003102aa00a3
02aa00a3048f0004048f0031048f00040400006d077100ad05c700250556
002105c7004b05c7001c0556002104e300210639004b06390025031d0021
040000070639003405560025078d001c05c700210639004204e300210639
004205c70021047300470556003405c7002105c700210800002505c70021
05c7001e0556003802aa00890239ff9e02aa004204a600840400000002aa
ffd70400003404730023038d002a04730034038d002e02aa001c0400002f
047300210239002102aaff89047300210239002106aa0021047300210400
002d0473002504730044038d0025031d003402aa00210473002104000021
05c700210400001704000021038d002a0327000901c300780327002f0429
000005c7002505c7002505c7004b0556002105c700210639004205c70021
040000340400003404000034040000340400003404000034038d002a038d
002e038d002e038d002e038d002e023900210239ffd70239ffc20239ffc2
047300210400002d0400002d0400002d0400002d0400002d047300210473
002104730021047300210400005c03330065040000680400002504000078
02cd003d0452005a0473002505fa002305fa00230800009e02aa007802aa
ffc20464001e0800001c0639004205b40017046400310464001e0464001a
04000057049cff7b03f4001005b4001e06960065046400350231ffea0266
000002a400280625007b05c700430400002d0400006d02aa00aa048f0031
0464ffea0400fffb0464001e04e500a00400003404000030080000a80200
000005c7002505c70025063900420800002e05c7002d0400ffed080000f1
040000420400003d02aa009202aa00a30464003103f400760400002105c7
001e0156fea505f4000f02aa006d02aa00300473001c0473001c04000061
0200006302aa00a30400003d0800000d05c700250556002105c700250556
002105560021031d0021031d0021031d0021031d00210639004206390042
065200690639004205c7002105c7002105c700210239002102aaffc202aa
ffa502aaffc902aaffe502aa009202aa003102aa005202aaffc902aa000e
02aaffc20556ffea0239ffd304730047031d003305560038038d002a01c3
007805c700000400004605c7001e0400002104e3002104730025048f0031
048f0042026600840266003b026600410600005506000055060000140400
00000639004b0400002f031d002104730047031d003405c7004b038d002a
05c7004b038d002a0473003405c700250400003405c700250400003405c7
00250400003405c7004b038d002a05c7004b038d002a05c7001c05b80034
05560021038d002e05560021038d002e05560021038d002e05560021038d
002e05560021038d002e0639004b0400002f0639004b0400002f0639004b
0400002f0400002f0639002504730021063900250473ffd6031d000c0239
ffa5031d00210239ffbf031d00210239000b071d002104e3002104000007
02aaff890639003404730021055600250239002105560025023900210556
0025038f002105560025033d002105c700210473002105c7002104730021
05c700210473002104730021063900420400002d063900420400002d0639
00420400002d05c70021038d002505c70021038d002505c70021038dffc3
04730047031d003404730047031d00340556003402aa0021055600340485
00210556003402aa000c05c700210473002105c700210473002105c70021
0473002105c700210473002105c700210473002105c70021047300210800
002505c7002105c7001e0400002105560038038d002a05560038038d002a
04730047031d00340556003402aa00210400001a02aaffd702aa007802aa
ffc202aaffa502aaffc902aaffe502aa009202aaffc202aa003102aaffc9
02aaffc20200008a02aa005202aa000e0200ffe30200000005c700000639
004b0400002f0556002502390021063900340473002105c7002105c70021
038d00250473002106aa002f05c7004204e300420639001b05c7004205c7
004a06ac002306a8006f031f00230639004206390019078d002906390023
0556007906a8006f06aa003305560042055600190558001d0639001f071f
006d063b0019071f001b0625007504e3004c047300730473003904730052
038d004a0400006004e300120473006402aa00870473003d0400001904e3
0064040000120400004a0473004c04730056038d005204730046038d0010
0473000e0556005a0400001205c7001205c700460200004202aa00a3038d
002a02aaff8901cf006701b5003f01e4003905c7002502aa00100243008a
0243008b02aaffd702aa007802aa009202aaffc202aa003102aaffc202aa
ffc202aaffe502aaffa502aaffc902aaffd702aa007802aaffa50243008a
02aaffc201e4006002aaff8907d7001705c7002d0556002f0556003104be
00230591001f0556002b07d10023050a004c065e0039065e00390639003b
05850021078d002b06390035063900580639003904e3003105c700560556
003d0608001706d7005205c7002f0639003905fe002b07be003907be0039
0639003d07be0039050a003905ba006a07dd003905c7003104be0021031d
002306aa0023044c002f04be0023037b002f02390037037b003904000012
05ba005603a2002b031d0023022dffc30764002105df000a0764002f05df
003902aaff8b0473005806d10023044c002f0639003b04730039031d003b
060800170400002506390039047300390556002b038d0033044c00100400
00310400003b03ec0039037b003904000017038d00330612001003540021
0498003b0498003b047300390452000a053b002304730039040000330473
00390473003d038d003103ec002f0400002505ee004404000017045c0039
044c0029067300390673003904ae001b060c003903e3003903a20021060e
00390464001d0464001e03f4ffb903f4001005b400b905b4001e0231fe2e
0231ffea0464ff430464ffea0464001b0464001e01c30078038600780000
00000000000000000000000000000885006507d4006506390034031d0021
063a00210957002108e4002105c7002108e400210c0100210e6c002108e4
002105c7002108e400210bdc00210556002505c7004b05c7001c078d001c
023900210472002106ab0021063900210400002106390021087200210aab
00210639002104000017063900170872001702390021038d002a04730034
06aa0021031d00210239ffbb02aa00a30a76001c0954001c080000340924
0025076f002504860021092400210792002106b2002105c7002504000034
031d00210239ffbf063900420400002d05c700210473002105c700210473
002105c700210473002105c700210473002105c700210473002105c70025
0400003405c70025040000340800001c05c700430639004b0400002f0639
003404730021063900420400002d063900420400002d0a80001c08f8001c
080000340639004b05c700210473002105c70025040000340800001c05c7
0043063900420400002d063900250473002105c700250400003405560021
038d002e063900420400002d063900420400002d063900420400002d0639
00420400002d05c7001e040000210400003d031d002105c7002504000034
05560021047300230556002104730023055600210473002305c7004b038d
002a05c7001c0473003405c7001c0473003405c7001c0473003405c7001c
0473003405c7001c0473003405560021038d002e05560021038d002e0556
0021038d002e05560021038d002e05560021038d002e04e3002102aa001c
0639004b0400002f06390025047300210639002504730021063900250473
002106390025047300210639002504730021031d00110239ffa3031d0021
0239ffc50639003404730021063900340473002106390034047300210556
002502390021055600250239ffc6055600250239ffc6055600250239ffbf
078d001c06aa0021078d001c06aa0021078d001c06aa002105c700210473
002105c700210473002105c700210473002105c700210473002106390042
0400002d063900420400002d063900420400002d063900420400002d04e3
00210473002504e300210473002505c70021038d002505c70021038d0025
05c70021038d002205c70021038d002104730047031d003404730047031d
003404730047031d003404730047031d002504730047031d003405560034
02aa00210556003402aa00210556003402aa000c0556003402aa000505c7
00210473002105c700210473002105c700210473002105c7002104730021
05c700210473002105c700210400002105c70021040000210800002505c7
00210800002505c700210800002505c700210800002505c7002108000025
05c7002105c700210400001705c700210400001705c7001e040000210556
0038038d002a05560038038d002a05560038038d002a0473002102aaffe8
05c700210400002105c7002504000034061000250464003405e4004204b4
00e305c700250400003405c700250400003405c700250400003405c70025
0400003405c700250400003405c700250400003405560021038d002e0556
0021038d002e05a200210458002e0584004f04ba012d05560021038d002e
05560021038d002e031d002102390021063900420400002d0639004204f4
002d0639004204ed011a063900420400002d063900420400002d05c70021
0473002105c7001e0400002105c7001e0400002105c7001e040000210556
0021038d002e05560021038d002e0556002b038d00330498003b07d10023
0612001005c7002d0400003105c7002d040000310800001c05c700430556
002b038d003307d1002306120010050a004c03540021065e00390498003b
065e00390498003b063900580400003305ba006a03a20021060800170400
00250608001704000025060800170400002505fe002b044c002907be0056
060c0039078d001c06aa002105c70021038d001b02aa001101e4003902aa
001102aaffa102aa009202aa00a302aa005a0473002102aa001c04730021
05c700210556002102aa009802aaffc902aaffc90243006b0639004204d2
002d05270021038d002e038d002e04be0023037b003207d1002306120010
0639003b04730039050a004c03540021063900350473003905c7001e05c7
001e05c7002f0400001705fe002b044c0029063900580400003305fe002b
044c002906530021038d002e0350ffd702aaffe50541004405410044038d
002e05e3005705e300570639003b04c4003905fe002b0487002901cf0067
01cf00670222001801b5ffc601b5ff6201b5003f01cfffa401cfffa401cf
ffef01cfffa401cfffa401cfffef01b5ff6202aaff8905c7002504000034
05c700250400003405560021038d000c05560021038d002e031dffcd0239
ff5b031d00210239ffe1063900420400002d063900420400002d05c70021
038d000805c70021038d002505c700210473002105c700210473002102aa
001c05c700250400003405c700250400003405c700250400003405560021
038d002e05560021038d002e031d002102390021063900420400002d0639
00420400002d0639004204d2002d0639004204d2002d0639004204d2002d
0639004204d2002d0639004204d2002d05c7002104730021065300210527
002106530021052700210653002105270021065300210527002106530021
0527002105c7001e04000021038d002e038d002e065e003905410044038d
002e063900580400003306aa002f05c7004206ac0023031f002306a8006f
0639001f06a8007502aa0005031f00230639001f04e3004c038d004a04e3
001202aa00870473000e02aaffa20473000e0473004c0473000e05c70046
04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3
004c0666000c0673000c06caffa406ceffa40673ffa4066affa40666ffef
066effef038d004a038d004a038d004a038d004a038d004a038d004a0796
0067079600670796ffa40796ffa40796ffa40796ffa404e3001204e30012
04e3001204e3001204e3001204e3001204e3001204e30012087b0067087b
006708cfffa408e4ffa4087bffa4087bffa4087bffef087bffef02aa0087
02aa008702aa004802aa004802aa004802aa004802aa008702aa008704ee
006704ee0067053affa40543ffa404eeffa404eeffa404eeffef04eeffef
0473004c0473004c0473004c0473004c0473004c0473004c06f500670762
00670877ffa40877ffa40877ffa40877ffa40473000e0473000e0473000e
0473000e0473000e0473000e0473000e0473000e080800670859ffa40808
ffa40808ffef05c7004605c7004605c7004605c7004605c7004605c70046
05c7004605c7004606d700670736006707f4ffa407f4ffa4078dffa4079e
ffa4073bffef0732ffef04e3004c04e3004c038d004a038d004a04e30012
04e3001202aa008702aa00870473004c0473004c0473000e0473000e05c7
004605c7004604e3004c04e3004c04e3004c04e3004c04e3004c04e3004c
04e3004c04e3004c08d3000c093b000c099fffa4099bffa4093fffa4093f
ffa40951ffef0944ffef04e3001204e3001204e3001204e3001204e30012
04e3001204e3001204e300120b2500670b2500670b93ffa40b86ffa40b25
ffa40b25ffa40b25ffef0b25ffef05c7004605c7004605c7004605c70046
05c7004605c7004605c7004605c70046097c006709e000670a9effa40a9e
ffa409caffa409c6ffa409d3ffef09d7ffef04e3004c04e3004c04e3004c
04e3004c04e3004c04e3004c04e3004c06aa002f06aa002f0659fff20661
fff20954002f04e3001204e3001204e3001204e3001204e30012077c003f
077c003f0861003f0861003f0956002302aafff202aaffd502aaffaf02aa
ffaf02aa003002aa0013031f0023031f002304d4003f04d4003f0473000e
0473000e0473000e0473000e04730056047300560473000e0473000e0639
001f0639001f07ee003f07ee003f0725006705c7004605c7004605c70046
05c7004605c7004607a3003f06d2003f072d003f06ca003f08cf007b05c7
00250400003404000034031d00210239ffc40239002105c7002104730021
04000017065300210527002104e3004c04e3004c04e3004c04e3004c04e3
004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c04e3004c
04e3004c04e3004c04e3004c04e3004c02aaffd502aaffd502aaffaf02aa
ffd502aaffd502aaffd502aaffd502aaffd502aaffd502aafff202aafff2
02aaffaf02aafff202aaffe402aaffe402aafff202aaffe402aaffe40473
000e0473000e0473000e0473000e0473000e0473000e0473000e0473000e
0473000e0473000e0473000e0473000e0473000e0473000e0473000e0473
000e0473000e0473000e06aa002f06aa002f06aa002f06aa002f06aa002f
06aa002f06aa002f06aa002f06aa002f06aa002f06aa002f06aa002f06aa
002f06aa002f06aa002f06aa002f031f0023031f0023031f0016031f0023
031f0023031f0023031f0023031f0023031f0023031f0023031f0023031f
0016031f0023031f0023031f0023031f0023031f0023031f00230639001f
0639001f0639001f0639001f0639001f0639001f0639001f0639001f0639
001f0639001f0639001f0639001f0639001f0639001f0639001f0639001f
0639001f0639001f06caffef0879ffef04eeffef04eeffef0808ffef0808
ffef04e3004c04e3004c04e3004c02aaff9c02aaff9c02aaff970473000e
0473000e0473000e0473003400000034003400340034009000f2019c0256
032003ee0426046804b00564059805e60604062e064e06a20700076a0806
086e08e8095a09a00a3a0ab60af60b580b940bb80bf40c700d400dfa0e96
0f3c0fbc105e10e01184121a126c12c413ae141014d0156e15f4167c173a
17d618a6192019a01a181ad21b981c3e1cae1cea1d081d421d741d8e1dc8
1e8e1f081f90202e20a6211a221222b0231223882426246e257e261c2688
273027bc283428fc296029fa2a702b502c3a2cea2d5c2dca2dec2e582ea2
2eae2eba2f7e2f8a2f962fa22fae2fba2fc62fd22fde2fea2ff630aa30b6
30c230ce30da30e630f230fe310a31163122312e313a31463152315e316a
3176318232183268330833e634c634ea357035f436e437a6386c38a238e6
39463a263afa3b8e3bd63c1e3c663d003d803e043e903f043fc2401640ac
40ea417642424318439643e8440a445244ca455245ae462c46ac47024702
470e471a472647cc487a489048b04926499a49da4a1a4a644ab24abe4aca
4aee4b624ba84bee4c924d2a4e044e264e644ed64fc24fce4fda4fe64ff2
4ffe500a50165022502e503a504650c250ce50da50e650f25138516051b8
51d452125248528c52f0533a538a53b0547854f054fc5508551455205558
55f256a256ae56ba575a57ea5806589058e8594259be5a825b445c305cc0
5ccc5cd85ce45df65f025f0e5f1a5f265f325fc65fd25fde5fea5ff66002
600e601a60266032603e604a60566062606e607a60866092609e60aa60b6
60c260ce60da60e660f260fe610a61166122612e613a619861a461b061bc
61c861d461e061ec61f862046210621c622862346240624c625862646270
627c6288629462a062ac62b862c462d062dc62e862f46300630c63186324
6330633c634863546360636c637863846390639c63a863b463c063cc63d8
63e463f063fc640864146420642c643864446450645c646864746480648c
649864a464b064bc64c864d464e064ec64f865046510659c65a465ac65b4
65bc65c465cc65d465dc65e465ec65f4664e6656665e667e667e66866692
66a066ac66b866c466d066dc66e866f4670067686830687468946904693c
69d06a506a906b286b846c106c746cd46d326db06e566e9e6eea6f667074
711471e672bc7380743c74de75e4769a777277ee7864789e796a79bc7a50
7aa27b947c1c7cea7d727e427ea27f467ffa806e80ee81c68218828682f0
83488370838683b083bc83de84388492849c84a684b084ba84c484ce84d8
84e284ec84f684fe8506850e8568857485a885d886b686ea872c878287ac
87fe884888b68904893c89a689ee8a388a6e8aa68ade8b0c8b408b828bb2
8bfe8c5c8caa8ce68d1e8d748dd48e108e5c8e928ed88f2e8f6e8f9a8fb8
900e9054908a90c290ec9118914c919291cc920a924492ac9314937693ce
940a946694b494f4954895a095ee966c96dc9710975297ba9812985298a4
98f49934996099ae99e69a589a9e9ae29b549b9e9bea9c2e9c729ca69ce0
9d1e9d589d829dc49e2a9e6e9eb09ef49f4a9fa69feaa03ea07ca0b8a10e
a11aa122a12ea136a142a14aa156a15ea16aa172a17ea186a18ea19aa19a
a19aa19aa19aa1a6a1b2a1baa1c2a1cea1dea1eaa1f2a1fea20ea222a22e
a236a242a252a25aa262a26aa272a27aa286a296a2a2a2aaa2b6a2c6a2da
a2e6a2eea2faa30aa312a31aa322a32aa336a342a34aa35aa36aa37aa386
a392a39ea3aaa3b6a3c2a3cea3daa3e6a3f2a3fea40aa416a422a432a442
a452a462a472a482a492a4a2a4b2a4c2a4d2a4e2a4eea4faa506a512a51e
a52aa536a542a552a562a56ea57aa586a592a59ea5aaa5baa5caa5d6a5e2
a5eea5faa606a612a61ea62aa636a642a652a662a672a682a68ea69aa6aa
a6baa6c6a6d2a6daa6e2a6eea6faa706a712a71ea72aa736a742a74ea75a
a766a772a77ea78aa796a7a2a7aea7baa7c6a7d2a7e2a7f2a802a812a81e
a82aa836a842a852a862a86ea87aa886a892a89ea8aaa8b6a8c2a8cea8da
a8e6a8f2a8fea90aa916a922a932a942a94ea95aa966a972a97ea98aa996
a9a2a9b2a9c2a9cea9daa9e6a9f2a9feaa0aaa16aa22aa2eaa3aaa46aa52
aa5eaa6aaa76aa82aa8eaa9aaaaaaabaaacaaadaaaeaaafaab0aab1aab26
ab32ab3eab4aab56ab62ab6eab7aab8aab9aaba6abb2abbeabcaabd6abe2
abf2ac02ac12ac22ac32ac42ac4eac5aac66ac72ac7eac8aac96aca2acae
acbaacc6acd2acdeaceaacfaad0aad1aad2aad36ad42ad4ead5aad66ad72
ad7ead8aad96ada2adaeadbaadc6add2addeadeaadf6ae02ae0eae1aae26
ae32ae3eae4aae56ae62ae6eae7aae86ae92ae9eaeaaaebaaecaaedaaeea
aefaaf0aaf1aaf2aaf3aaf4aaf5aaf6aaf7aaf8aaf9aafaaafb6afc2afce
afdaafeaaffab00ab01ab02ab03ab04ab05ab066b072b07eb08ab09ab0aa
b0bab0cab0dab0eab0fab10ab116b122b12eb13ab146b152b15eb16ab17a
b18ab19ab1aab1b6b1c2b1ceb1dab1e6b1f2b1feb20ab216b21eb226b232
b23eb24ab256b262b26eb27ab286b292b29eb2aab2b6b2c2b2ceb2dab2e6
b2f2b2feb30ab316b322b32eb33ab346b352b35eb36ab376b390b398b3b2
b3eeb414b43ab448b492b4c2b516b56eb5aab5e0b5eeb5fcb624b67ab6c8
b722b75cb796b7c8b7fcb87eb8feb956b9aaba14ba76babcbb0ebb56bb9e
bc00bc52bca2bcf6bd32bd6abda2bde4be3cbe76bea2bec2befebf3abf74
bfc2c010c05ec0b0c0f4c140c166c18cc1acc1ecc222c238c26ec2a4c2e4
c31ac350c390c3c6c3d2c3dec3eac3f6c402c40ec41ac426c432c43ec44a
c456c462c46ec47ac486c492c49ec4aac4b6c4c2c4cec4dac4e6c4f2c4fe
c50ac516c526c536c546c556c562c56ec57ec58ec59ac5a6c5b2c5bec5ce
c5dec5eac5f6c602c60ec61ac626c632c63ec64ac656c662c66ec67ac686
c692c69ec6aac6b6c6c2c6cec6dac6e6c6f2c6fec70ec71ec72ac736c742
c74ec75ac766c772c77ec78ac796c7a2c7aec7bac7c6c7d2c7dec7eac7f6
c802c80ec81ac826c832c83ec84ac856c862c86ec87ac886c892c89ec8aa
c8b6c8c2c8cec8dac8e6c8f2c8fec90ac916c922c92ec93ac946c952c95e
c96ac976c982c98ec99ac9a6c9b2c9bec9cac9d6c9e2c9eec9faca06ca12
ca1eca2aca36ca42ca4eca5aca66ca72ca7eca8aca96caa2caaecabacac6
cad2cadecaeacaf6cb02cb0ecb1acb26cb32cb3ecb4acb56cb62cb6ecb7a
cb86cb92cb9ecbaacbb6cbc2cbcecbdacbe6cbf2cbfecc0acc16cc22cc2e
cc3acc46cc52cc5ecc6acc76cc82cc8ecc9acca6ccb2ccbecccaccd6cce2
cceeccfacd06cd12cd1ecd2acd36cd42cd4ecd5acd66cd72cd7ecd8acd96
cda2cdb2cdc2cdd2cde2cdf2ce02ce12ce22ce32ce42ce52ce62ce72ce82
ce92cea2ceb2cec2ced2cee2cef2cf02cf12cf22cf32cf42cf52cf62cf72
cf82cf92cfa2cfb2cfc2cfd2cfe2cff2d002d012d022d032d042d052d062
d072d082d092d0a2d0aed0bad0cad0d6d0e6d0f2d102d10ed11ad126d132
d13ed14ed15ad16ad176d186d192d19ed1aad1b6d1c2d1ced1dad1e6d1f2
d1fed20ad216d222d22ed23ad246d252d25ed26ad276d282d28ed29ad2a6
d2b2d2bed2cad2d6d2e6d2f2d302d30ed31ed32ad336d342d34ed35ad36a
d37ad38ad39ad3aad3b6d3c6d3d6d3e2d3eed3fad40ad41ad42ad43ad44a
d45ad46ad47ad48ad49ad4aad4bad4cad4dad4ead4fad508d518d526d534
d542d550d55ed56cd57ad58ad59ad5aad5bad5cad5dad5ead5fad60ad61a
d62ad63ad64ad65ad66ad67ad68ad69ad6aad6bad6cad6dad6ead6fad70a
d71ad72ad73ad74ad75ad76ad77ad78ad79ad7aad7bad7cad7dad7ead7fa
d80ad81ad82ad83ad84ad85ad86ad87ad88ad89ad8aad8bad8cad8dad8ea
d8fad90ad91ad92ad93ad94ad95ad96ad97ad98ad99ad9aad9bad9cad9da
d9ead9fada0ada1ada2ada3ada4ada5ada6ada7ada8ada9adaaadabadaca
dadadaeadafadb08db16db24db34db44db54db620001000005a3005f0006
008500080002001000100045000007e809d5000400010000002d02220001
000000000000006d000000010000000000010005006d0001000000000002
000400720001000000000003002000760001000000000004000a00960001
000000000005000800a00001000000000006000a00a80001000000000007
002e00b20001000000000100001800e00001000000000101000c00f80001
0000000001020009010400010000000001030010010d0001000000010004
000a011d0001000000010007002b01270001000000020004000a01520001
0000000200070038015c0001000000030004000f01940001000000030007
002c01a30001000000040004000901cf0001000000040007003601d80001
0000000500040009020e0001000000050007003202170001000000060004
000d02490001000000060007002c02560001000000070004000902820001
0000000700070038028b0001000000080004000f02c30001000000090004
000d02d200010000000d0004000c02df0003000104040002000402eb0003
000104060002000602ef0003000104070002000802f50003000104090002
000802fd00030001040b00020016030500030001040c00020008031b0003
000104100002001203230003000104110002000803350003000104120002
0006033d0003000104130002000603430003000104140002000603490003
000104160002000e034f0003000104190002000c035d00030001041d0002
0006036900030001080400020004036f000300010c0a0002000e0373a920
313939302d3939204170706c6520436f6d707574657220496e632e20a920
31393831204c696e6f7479706520414720a920313939302d393120547970
6520536f6c7574696f6e7320496e632e20a920313939302d393120546865
20466f6e742042757265617520496e632e54696d6573426f6c6454696d65
7320426f6c643b2031342e30643165343b20323031382d30332d31365469
6d657320426f6c6431342e306431653454696d65732d426f6c6454696d65
73206973206120726567697374657265642074726164656d61726b206f66
204c696e6f74797065204147416c6c205479706f67726170686963204665
617475726573416c6c2046656174757265734c6967617475726573436f6d
6d6f6e204c696761747572657354696d6573204772617354696d65732065
737420756e65206d617271756520648e706f738e65206465204c696e6f74
79706520414754696d6573204665747454696d6573206973742065696e20
65696e676574726167656e657320576172656e7a65696368656e20646572
204c696e6f7479706520414754696d65732067726173736574746f54696d
6573208f20756e206d61726368696f207265676973747261746f20646920
4c696e6f7479706520414754696d65732076657454696d65732069732065
656e20676572656769737472656572642068616e64656c736d65726b2076
616e204c696e6f7479706520414754696d65732046657454696d6573208a
722065747420726567697374726572617420766172756d8a726b6520669a
72204c696e6f7479706520414754696d6573204e65677269746154696d65
7320657320756e61206d617263612072656769737472616461206465204c
696e6f7479706520414754696d65732046656454696d6573206572206574
20726567697374726572657420766172656dbe726b652074696c68bf7265
6e6465204c696e6f7479706520414754696d65732043617272656761646f
54696d65732048616c7666657454696d6573206c69686176617c979ad400
460065006400460065007400740042006f006c006400500075006f006c00
69006c006900680061007600610047007200610073004700720061007300
73006500740074006f30dc30fc30eb30c9bcfcb4dcccb400560065007400
4600650074004e00650067007200690074006f041604380440043d044b04
390046006500747c974f53004e00650067007200690074006100b8003b2b
b800312bb800272bb5900690070215b8028bb2471f14b8028ab2471f13b8
0289b2471f12b80288b2471f11b80287b2471f10b80286b2471f0fb80285
b2471f0eb80284b2471f0db80283b2471f0cb80282b2471f0bb80281b247
1f0ab80280b2471f09b8027fb2471f08b8027eb2471f07b8027db2471f06
b8027cb2471f05b8027bb2471f04b8027ab2471f03b80279b2471f02b802
78b2471f01b80279b2471f00b802784015471fdf4901cf4901202a012037
019059019024018f412f0260000100100260001002620002009f02630001
00ff0264000100ef0264000100d00260000100cf0265000100bf02610001
00af02610001009f02630001008f02630001006f02660001004f0263004f
02670002001f02650001001f0267b2010840410b023401cc0071000d01c4
0071000d01ab0071000d01074014710dcc710dba710da6710d80710d3b71
0d36710d410a01d10037000d01b10037000d01650037000d0126400b370d
a8370d76370d23370d410a01e70059000d014a0059000d011c0059000d01
174014590de4590dc1590d9f590d60590d56590d24590d4116018a002800
0d01830028000d01820028000d017a0028000d01680028000d0152002800
0d012a0028000d01114011280dd8280d9e280d9b280d62280d38280dbb01
0f00b4000d010a400eb40de3b40d27b40d1eb40db41b0dba01ca000f010e
b20f0009b901ca010eb40d1e1b6e1fb801f9b25c181fb801f4b25c181fb8
01f2b25c1d1fb801efb25c251fb801eeb25c261f411901e6005c0801001f
01e5005c0156001f01e200a00401001f01dd016b0201001f01dc016b0401
001f01da002a0125001f01d8b22abb1fb801d7b22abb1fb801d6b22abb1f
b801d4b22a5a1fb801d0b22a281fb801cdb22a221fb801cbb22a221fb801
c8b22a1e1fb801c5b249201fb801c1b249261fb801c0b2492e1fb801bfb2
492f1fb801bbb249621fb801b8b249e41fb801b7b249e41fb801b3b22d6c
1fb801b2b22d811fbc01b0002d02ab001f0180b25c191fb8017fb25c1c1f
b8017db25c361fb8017cb25c381f412d017700a00125001f017400a00401
001f017300a0019a001f017100a00156001f0170008e0125001f016f008e
0401001f016e016b0125001f016d016b0156001f016a016b0801001f0169
0040019a001f0167002a019a001f0163b22a4a1fb8015eb22a2c1fb80159
b249311fb80158b249521f410d015500490401001f0154004902ab001f01
530049019a001f0150b22dab1fb8014fb22de41fbc014d002d02ab001f01
4cb22dcd1f4109014b002f0101001f01490025019a001f0148b2259e1fb8
0131b25c261f4119012f005c0156001f012d00a0019a001f012b008e019a
001f012900400201001f0127002a0401001f0125002a0156001f0123b22a
bb1fb80122b22a931fb80121b22a471fb80120b22a291fb8011db22a1e1f
b80118b249261fb80116b2494a1fb80113b22d6c1fbc0110002d0156001f
010b4014259e1ffa5c1f1ff95c241ff8a0e41ff7a0e41ff4b9016b0201b2
1ff12ab8012540171ff02ae41fee2a321fed2a311fec2a0a1fe52d231fd7
8ebb0401001f00d301254020151fd32a111fd249121fcd25e41fc45c1d1f
c35c9e1fc02a621fbf2a5a1faf40b80401400f1fad2a341fac490c1fab49
6c1fa949b8040140131f9c49121f9a49931f9425e41f8d2a6c1f8a25b804
0140131f82401a1f81492f1f775c9e1f722d1c1f702db8019ab61f6f2d35
1f6d2fb8019ab21f6b25b80125b61f6a25931f6825b80801b21f638eb802
01400b1f5b2a111f5a492c1f5549b80201400a1f07062a1f03022a1f05b8
0273b2471f0bb80272b2471f07b80271b2471f09b80270b2471f03b8026f
b2471f04b8025eb2471f00b8025eb2471f06b8025fb2471f02b8025eb347
1f472fb80201b61f4349221f3d8eb802abb21f3c25b80401b21f3949b808
01b21f332db80201b21f30a0b8012540351f2c2d281f1f490a1f55b10757
073a07350734072e07260721071d071c071408120810080e080c080a0808
08060804080208000814b8ffe04024000001001406100000010006040000
01000402000001000200000001000002010802004a4118028a0008028800
0802860008028400080282000802800008027e0008027c0008027a000802
78000802760008028affe0b300000100b9028a027cb41000000100b9027c
027ab300000100b9027a0286b300000100b902860278b300000100b90278
0276b300000100b80276b302010802b80276b14a00b801ff85b0018d1816
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b18763f183f123e113946443e
113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b
2b2b182b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358
b0ff1d594bb02953205c58b9023602344544b90235023445445958b90172
0236455258b9023601724459594bb04c53205c58b900a002354544b9005c
023545445958b9032200a0455258b900a003224459594bb08953205c58b1
8ea04544b1a0a045445958b90598008e455258b9008e05984459594bb0ab
53205c58b9002a02364544b90040023645445958b9060a002a455258b900
2a060a4459594bb802ab53205c58b9016b00404544b1404045445958b919
0f016b455258b9016b190f4459594bb01653205c58b125254544b1492545
445958b12b25455258b1252b4459594bb02753205c58b125254544b12d21
45445958b16b25455258b1256b4459594bb8020153205c58b125254544b1
2f2545445958b12125455258b125214459592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb3
8be089a4456523456023456560234560b08b766818b080622020b189e045
65234520b003266062636820b003266165b0e0236544b089234420b18ba4
4565234520b003266062636820b003266165b0a4236544b08b2344b100a4
455458b1a4406544b28b408b4523614459b34ea24c914565234560234565
60234560b089766818b080622020b14ca24565234520b003266062636820
b003266165b0a2236544b04c234420b14e914565234520b0032660626368
20b003266165b091236544b04e2344b10091455458b191406544b24e404e
452361445945695342737373737373737373737373757474737373737373
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7300000000>
[16161 16105 16381 16193 16281 16285 14925 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Times-Bold AddT42Char 
1 2760 14 <000100310000045c042a000b0037401c04a106011f0700a10a0a0d17171a
06a104091f030aa100190c585d182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3ce431301335211133112115211123113101add101adfe53d1
01add301aafe56d3fe5301ad0000>Times-Bold AddT42Char 
1 6784 36 <0003002500000597058700030024002500eb4067851401060a060b290939
09370a4a014909490a690a6714751489018b098a0a890c8a148a15c80012
02031a1c0809190001160a0b163d120b0b0a8f10ff10021c2d1208080909
08081c240a09010204230b160f10160b081c041a040102d90a00032d19ff
1a011ab8019540150a0903042211030e1b2423100f08250325250f2427b8
0263b7400f7f10df100210b801deb223c024b9026200262ff41adcf65ddc
1ae61112392f003f003f3c3c3cfd173c3f3cfd5d3cfd3c10fd3c11121739
01111239391217391139397d10c418070e2e2b055d870e2e182b071005c4
c4c40710c4c4c43130015d005d0103230301363736370133011e01371521
353e01353427262f012106070615141716171521010325c411b9fe8e4a2d
1d3601c73901c94d4c46fd69643f100a1134fe342d0d1b3b2346fe5e02ca
01e301dafe26fe51053e27850461fbccb569023434041a3518311d297c7a
254f242c140b013405870000>Times-Bold AddT42Char 
1 7468 38 <0002004bffd7056505870024002500cb405e6d127b0d7b12841d9b0d971d
981f98219a23b80ab41eb522c915cf16ca17db17ea17fc17121616162117
2346154116461a54175618671876157917860d871587168717a615a616a6
17c90ec511c51ec922ed12171718051b0665081b0707b80132b2066502b8
0112401e2417070f181718130c2f240313721c0925032525072007440018
30180218b80267400927580f680f020f5c20b80266b127262fccf4ed5d10
f65de41112392f003f3fed3fed1139392f011112390010ecf4ed0110edf4
ed10c93130005d015d000433323637331123262726232202111417122132
3736371706070623202726111037362127039801060f272f0639344a4d90
b6cead335f01029e884e6a3d785ba2c6fed1cde3d9cc01280505825f3c21
fe219c5aa6fe9dfed5dc8efef658337032863c6bb4c70151014ecfc20500
0000>Times-Bold AddT42Char 
2 1600 76 <00020021000002090587000b001c0067403810151f1b020d0c10370c1e1c
362411231e15362317231e1b712317111003151c3f08012f080108400201
15061c1b0a0540200b010b22101eb80261b416172a1110b90260001d2ff4
3cfd3ce410f45ded003f3c3f3fed5d5d111217392b2b2b10d4015d313012
363332161514062322263503363736351134262735211114161715217b5d
42415d5d41425d5a36141e2a3e01892837fe18052a5d5d42425d5d42fb49
09121b46025a3e2d0b32fcf643260b31>Times-Bold AddT42Char 
2 2348 79 <00010021000002090568000f0054402806070c010010081f0e020337001e
0f362404231e0836230a371e0e36230a0403030f08000f0e0a11b80261b4
090a2a0403b9026000102ff43cfd3ce6003f3c3f1217394d2b2b2b055d00
3d10d4c410d43130373e013511342627352111141617152121362d2a3901
842c38fe18310d2b44041341280d32fb45442a0e31000000>Times-Bold AddT42Char 
2 3036 81 <000200210000044403c90028002900bc407a1320010d160d170326032719
0b1c161c1729162917570e59165917660e6c166c17960e99169917ac16ac
17bc16bc17c916c917180c160c170210081f15022716231a172600033700
1e283b2404231e083b2311231e15362323221a110a04030728201f011f49
0d070806282716150a2907292911031b1a2a1011b80261b62b0922232a04
03b80260b12b2a2fccfc3cfde410fe3cfd3c1112392f003f3f3c3c3c3f3f
ed5d1117392b2b2b10c4c401111239395d313001715d005d373e01351134
26273521153e0133321615111416171521353e0135113427262322060711
1416171521012138352b42018431975c84912f37fe1f37280e1847355918
2837fe13021731072f46025a3e300832934a6188abfe1145280731310b26
4301f046233f4d27fddc43260b3103c9>Times-Bold AddT42Char 
2 3352 82 <0003002dffe103c903c9000b0019001a00764047290125032507290904aa
17ea04e506e50af904f606f60a0766146616790e79107614761606570a6a
0e69100358005804570603152502070f25080b1a071a1a050b5612011240
05b80263b61c59190119400bb80262b11c1b2fccf4ed5d10f6ed5d111239
2f003f3fed3fed3130005d5d5d5d015d1200333200151400232200350417
163332363534262322070615132d0107c7cb0103ff00cec8fefa012d1623
68633e415f682317a102ab011efedcd0cdfed9011fd5d75685cce6e5cd85
59d401f40000>Times-Bold AddT42Char 
2 4424 86 <00020034ffe302e803c90039003a00e3402a15121a2d560b960cb42cc62c
e62cf52c080d11022c2912252d660bc80ec627c628c629d6290a90000100
b801e2b339b34035b80109b5212e9f1b011bb80169b31ab34016b8010940
532113250a02041f25130704252e0b3a073a3a1a100c070322020a252207
40191e1ab31c1e21481b3e47ec07010782002b802b902b032b3c40381e39
011e2139220022e322012282a010b010c010d01004103c3b2fccd65ded5d
f4e41a3ded10ed1a1810d65ded5d76f4761a3dedf4ed181a111239397111
12392f003f3fed3fed111739101aec1af4ed5d00101aec1af4ed5d313001
5d005d13331e01333236353427262f012627263534363332163332363733
11232e01232206151417161f011617161514062322262f012e0123220607
230134391ea4564f4a28163198783435a6954192121915072d341d845844
431e1d5170683050a5a529533d2313090711191031015901369379473a37
2715184a3b45455e77ad2b1513fed8687e4c2c2424252736322f507572c5
11150c07021b2003e600>Times-Bold AddT42Char 
2 5024 88 <00020021ffe3044b03c90024002500b940462219014c0d4c0e023c0d3c0e
0209070819190719193b1d4a1d590769079a07a907ba07b616c616d616e6
160f100e10240222230a231e0eba2320231e243623143b1023131e14b801
0e40261740091842172018100a0905240e00062f050105491c1c170b2507
2525101f18220a092a0f10b80261b427012a201fb80260b127262fccf43c
fd10f63cfd3ce41112392f003f3f3c4d10ed5d3f3c3c1739101adcca1a10
f5edfc01f52b2b103dd418015d3130005d015d5d5d011114171633323736
3711342627352111141617150e0107350607062322263511342627352501
a30f1a4d312f1b29334d01983046be636d4930545b63ab2a3c020503affd
493e1d331f1128024540330332fd1f4031062f121122873f1a2e7ea10205
41280d321a000000>Times-Bold AddT42Char 
1 0 0 <000200250000060e0568000300070041401c05061f02010004071f03000a
05041f0303021a0906071f0100190809b8022eb3216750182b2b4ef43c4d
fd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c3130331121112711211125
05e9c7fba50568fa98c703dafc26>Times-Bold AddT42Char 
Times-Bold /CharStrings get begin
/space 3 def
/plus 14 def
/A 36 def
/C 38 def
/i 76 def
/l 79 def
/n 81 def
/o 82 def
/s 86 def
/u 88 def
end
Times-Bold /Encoding get
dup 32 /space put
dup 43 /plus put
dup 65 /A put
dup 67 /C put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 115 /s put
dup 117 /u put
pop
end
%ADOEndSubsetFont
/BRDZCM+Times-Bold /Times-Bold findfont ct_VMDictPut/BRDZCM+Times-Bold*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 21{/.notdef}rp /A /.notdef /C 37{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 3{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]BRDZCM+Times-Bold nfBRDZCM+Times-Bold*1 [0 -14.0207 -14.0207 0 0 0 ]msf124.986 198.341 mo(Au+Au Collisions)[-10.1227 -7.7955 -7.99168 -10.1227 -7.7955 -3.50517 -10.1227 -7.01035 -3.89775 -3.89775 -3.89775 -5.45395 -3.89775 -7.01035 -7.7955 0 ]yshgrestore
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Times-Roman Initial
ct_T42Dict begin
-0.203 -0.426 1.699 1.27
 256 array 0 1 255 {1 index exch /.notdef put} for  /Times-Roman
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000606376
7420000000000000012c0000041e6670676d000000000000054c00000588
676c796600000000000038d00001c7c8686561640000000000000ad40000
0036686865610000000000000b0c00000024686d74780000000000000b30
0000168c6c6f636100000000000021bc00000b486d617870000000000000
2d04000000206e616d650000000000002d24000004e87072657000000000
0000320c000006c367646972000000000000000000000000000304ba0190
0005000002bc028a0000008c02bc028a000001dd00500212000000000500
000000020000e00002ff5000205a00000000000000007079727300400000
fb020600fe0000000a2c036d2000019f4f01000003a1054b000000200000
05740002054b001d054b0018039700130000ffe30000ffed0000ffeafe42
0000054b001dfebdffd6031e000000b4000000b402fe3f3c0026001c007d
00980003007d00de00350017002800e3013e000300b400d000df004c005a
00c4004a00ab0147008a004e0039006d013d002401d200360045009e00be
00170079006f00d000460091002100b400baffc20017003600ab00b800f6
0009001d003d0058005a008c0099ffc400a000e800f5ffa1ffea00330085
00b800d5ffe2002f0080008c0002001a00250045006a0070012d0274ff87
003e004e009800ba00de0116ff3e00150034003c004400670068006d006e
0084009800bd00d500d7011c0000002d0030003d00460057008b00930097
00b000c6011f017b019d0409ff68ff6a0056005a006a006d009200c400d0
00e700f1011101bf01c7ff1cffb4ffff0002002300380042006d0092009c
009d00a100a200b400ba00c700c700e400ed0153015703230334ff0dff32
fffbffff000f001c0040004b005c006d006d007c0085009800c500cb00cb
00df011f01280136015501700180018a01c7024203130407054eff820000
00080026003d003d004f006e0073008b00900095009e00a800ad00ad00c3
00d300e3010901230241028002f40311034004510576ff7fffafffbeffcf
00030005000e0039004b004b004c00740078008800890092009200b600c2
00d800df00f000fd010701100117011f01b401dd01eb0200021102290280
02ca036f038a03af0400049c04dd053e0587fea6fee4ff67ff95ffcbfff8
000200020007002500280037003700380039003f00510053005900640068
006b007d0098009900af00b100b900d000d500da00dd00fd00fe011e0136
01370142015a017a01a301c401cc01f702020210021f022902290287029f
029f02c002cc02d5031a031d03280331035e0396039f03a8049305640571
059405b106eb0788fe63fe64fe76fe7cfebcff4bff97ffacffc000070021
0028002d003000480049004c0051005400560066007a007c0085008a008c
009900af00b300b500b500b600b900bb00bc00cc00d000e100f400f600fc
00fd0109011001170118011f01300139013c013e0142014301440149014b
014f01540155015701580161016a017d017e0184019c019c019d01a101a3
01b401b401b901bb01cb01d001d701d701e401ec01ec01f7020502070218
022302260240024b024b025702570261026302680269026d028d028d02a6
02af02b402b80300033e03460361036103b003c003d503d703df03f9041a
0474047b04c104cc04da04e404f204f60510053005550556061806390676
06a406b3076b07ad07da00b200d500ae00bb000000000000000000000000
00630079029602fa007e0247009100c8000002ca024800da007d01b301a4
002d00a5009c0034003400dc00dc0040004000310031000a000a00820030
002a002a00004027262524232221201f1e1d1c1b1a191817161514131211
100f0e0d0c0b0a090807060504030201002c4523466020b02660b0042623
48482d2c452346236120b02661b004262348482d2c45234660b0206120b0
4660b004262348482d2c4523462361b0206020b02661b02061b004262348
482d2c45234660b0406120b06660b004262348482d2c4523462361b04060
20b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd44
2320b8015a51582320b08d44235920b0ed51582320b04d44235920b09051
582320b00d44235921212d2c20204518684420b001602045b04676688a45
60442d2c01b9400000000a2d2c00b9000040000b2d2c2045b00043617d68
18b0004360442d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c20b0032552582359212d2c69b04061b0008b0c6423648bb84000
62600c642364615c58b0036159b002602d2c45b0112bb0172344b0177ae5
182d2c45b0112bb01723442d2c45b0112bb017458cb0172344b0177ae518
2d2cb002254661658a46b040608b482d2cb0022546608a46b040618c482d
2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a23
444565234520b00325606a20b009234223688a6a606120b0005258b21a40
1a4523614459b0005058b219401945236144592d2cb9187e3b210b2d2cb9
2d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d2cb92d41d2c00b2d
2cb9187ec4e00b2d2c4b525845441b2121592d2c0120b003252349b04060
b0206320b000525823b002253823b002256538008a63381b212121212159
012d2c4569b00943608a103a2d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2db800272c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800282c20
20456944b001602db800292cb800282a212db8002a2c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b8002b2c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db8002c2c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db8002d2c2020456944b00160202045
7d691844b001602db8002e2cb8002d2a2db8002f2c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800302c4b535845441b2121592db800312c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db800322c2020456944b001
602db800332cb800322a212db800342c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db800352c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db800362c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db800372c2020456944b001602020457d691844b001
602db800382cb800372a2db800392c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
3a2c4b535845441b2121592d00010000000000008b6b53e35f0f3cf50111
080000000000a33d5b0000000000d6d223c4fe60fc930d9a0a2c00000009
0001000000000000000100000600fe0000000dc5fe60fe600d9a00010000
00000000000000000000000005a305c70021000000000200000002000000
02aa0109034400bc040000000400005a06aa007d063900520171006702aa
005e02aa0036040000870483003d020000d702aa0050020000dc02390004
04000012040000e30400003d040000590400001704000041040000460400
00280400006d0400003d023900a5023900aa0483003d0483003d04830012
038d0087075e00b805c7001e055600230556003305c7002104e300170473
001705c7003105c7002102aa0021031d001505c7002504e30017071d0017
05c7001705c7003d0473002105c7003d055600170473005504e3001c05c7
001c05c70021078d000905c7001505c7002d04e3000e02aa00b40239ffc0
02aa004403c100420400000002aaffec038d004b04000007038d002f0400
0031038d002802aa00280400003604000012023900280239ff8a04000004
02390025063900210400002104000034040000090400003102aa0009031d
006802390019040000120400002505c7002a040000230400001c038d0034
03d7007f019a008703d7007f0454001c05c7001e05c7001e0556003304e3
001705c7001705c7003d05c7001c038d004b038d004b038d004b038d004b
038d004b038d004b038d002f038d0028038d0028038d0028038d00280239
00280239fff40239ffde0239ffed04000021040000340400003404000034
0400003404000034040000120400001204000012040000120400006d0333
00570400006d040000160400009202cd003d03a0ffd50400001706140042
0614004207d7003f02aa008402aaffed0464002d071d000905c7003d05b4
00650464002f0464002f0464002a0400000e049cff6303f4006305b40017
069600570464004a0231001e02350017027b0021062500ad0556004d0400
0034038d002b02aa00bb0483003d0464ffea0400000b0464002804e500aa
040000570400005a080000e30200000005c7001e05c7001e05c7003d071d
003805c700370400fffb080000f1038d0037038d004702aa00ba02aa00bf
0464002f03f400710400001c05c7002d0156feaa05f4001a02aa007f02aa
00550473003f047300420400006d0200006a02aa00bf038d00470800000e
05c7001e04e3001705c7001e04e3001704e3001702aa002102aa001002aa
001f02aa002105c7003d05c7003d0652006905c7003d05c7001c05c7001c
05c7001c0239002802aaffde02aaffcb02aaffde02aafffd02aa00b802aa
008402aa003402aaffe502aa01d702aaffde04e300040239001e04730055
031d004f04e3000e038d0034019a008705c700210400003605c7002d0400
001c047300210400000e0483003d04830055026600870266000702660016
0600006d0600006d060000350400000005c700310400003602aa00210473
0055031d006805560033038d002f05560033038d002f0400003105c7001e
038d004b05c7001e038d004b05c7001e038d004b05560033038d002f0556
0033038d002f05c7002104d7003104e30017038d002804e30017038d0028
04e30017038d002804e30017038d002804e30017038d002805c700310400
003605c700310400003605c70031040000360400003605c7002104000012
05c700210400ffd502aa00020239ffd002aa000f0239ffde02aa00210239
002805c7002104720028031d00150239ff8a05c700250400000404e30017
0239002504e300170239002504e300170333002504e3001702d7002505c7
00170400002105c700170400002105c70017040000210400002105c7003d
0400003405c7003d0400003405c7003d040000340556001702aa00090556
001702aa00090556001702aa000904730055031d006804730055031d0058
04e3001c0239001904e3001c0385001904e3001c0239ffde05c7001c0400
001205c7001c0400001205c7001c0400001205c7001c0400001205c7001c
0400001205c7001c04000012078d000905c7002a05c7002d0400001c04e3
000e038d003404e3000e038d003404730055031d006804e3001c02390019
0400004202aaffec02aa008402aaffde02aaffcb02aaffde02aafffd02aa
00b802aaffed02aa008402aaffe502aaffde020000bf02aa003402aa01d7
020000040200000005c7002105c700310400003604e300170239002505c7
00250400000405c700170556001702aa00090400002106ac002705c7002d
04e3002d05c7003905c7002d05c7003f06aa002d06aa006a031d00440639
003b06390019078d002f0639001d0556007306aa006a06aa003d04e3002d
04e3001d0556001f0639001d06ac007506390019071f002d0625008704e3
00580473007d040000290473005e038d005804000058047300290473006a
0239007d04730046040000370473008d04000021040000350473004e0473
0058038d006004730058038d0012047300270556005c0400002905c70039
05c7005802000087023900aa038d002f0239ff8a0222009e022200680194
002e05c7001e02aa002402aa00bf02aa00bf02aaffec02aa008402aa00b8
02aaffed02aa008402aaffde02aaffde02aafffd02aaffcb02aaffde02aa
ffec02aa008402aaffcb02aa00bf02aaffed019400590239ff8a078f001b
05c7001f0556003305560029047300190571002904e3001907b2000804ec
003f05ee002905ee002905c700290564001b071d002705c7002905c70044
05c70029047300170556004404e3002505fc001905fc003b05c7001905d7
00290585001d075800290766002905ee00190762002904e300290556003d
077d0029057500190473001902aa00250639001f0400000a047300190333
00140239002d03330014031d00140556004403a4003302aa00250239fff6
0764001b05b200140758002905b200140239ff910473005606aa001f0400
000a05f0002d04000014031d006805fc00190400001f05c7002904000014
055c001f038d002d03b00008038d004c0400004803a4001403330014038d
000a038d002d05ee000203330023041d0014041d00140400001404000014
04db0014040000140400003d0400001404000004038d003303ae001b0400
001f05d1003d04000023040000140400001406080014060800140473000a
056d001403ae0023038d004205ee00140464002e0464002d03f4005d03f4
006305b4012205b400170231fe600231001e0464ff350464ffea04640029
04640028019a008703340087000000000000000000000000000000000889
005707a6005705c7002502aa00210554002107fe00210871002105c70021
087100210b1b00210dc500210871002105c70015087100150b1b001504e3
00170556003305c70021071d0017023900280472002806ab002806390028
0400002506390025087200250aab00250639002804000023063900230872
002302390025038d002f040000310639002102aa000b0239fffd02aa0109
0a35002109540021078d003108000017071c00170472002508e400170800
00170639002105c7001e038d004b02aa00100239ffda05c7003d04000034
05c7001c0400001205c7001c0400001205c7001c0400001205c7001c0400
001205c7001c0400001205c7001e038d004b05c7001e038d004b071d0009
0556004d05c700310400003605c700250400000405c7003d0400003405c7
003d040000340a35002108da0021076a003105c7003105c7001704000021
05c7001e038d004b071d00090556004d05c7003d0400003405c700210400
001205c7001e038d004b04e30017038d002805c7003d0400003405c7003d
0400003405c7003d0400003405c7003d0400003405c7002d0400001c038d
004702aa002105c7001e038d004b05560023040000070556002304000007
055600230400000705560033038d002f05c700210400003105c700210400
003105c700210400003105c700210400003105c700210400003104e30017
038d002804e30017038d002804e30017038d002804e30017038d002804e3
0017038d00280473001702aa002805c700310400003605c7002104000012
05c700210400001205c700210400001205c700210400001205c700210400
001202aafffd0239ffcb02aa001f0239fffa05c700250400000405c70025
0400000405c700250400000404e300170239002504e300170239ffdd04e3
00170239ffdd04e300170239ffdd071d001706390021071d001706390021
071d00170639002105c700170400002105c700170400002105c700170400
002105c700170400002105c7003d0400003405c7003d0400003405c7003d
0400003405c7003d04000034047300210400000904730021040000090556
001702aa00090556001702aa00090556001702aaffde0556001702aaffd3
04730055031d006804730055031d006804730055031d006804730055031d
005804730055031d006804e3001c0239001904e3001c0239001904e3001c
0239ffea04e3001c0239ffea05c7001c0400001205c7001c0400001205c7
001c0400001205c7001c0400001205c7001c0400001205c7002104000025
05c7002104000025078d000905c7002a078d000905c7002a078d000905c7
002a078d000905c7002a078d000905c7002a05c700150400002305c70015
0400002305c7002d0400001c04e3000e038d003404e3000e038d003404e3
000e038d0034040000120239ff9705c7002a0400001c05c7001e038d004b
05d5001e0484004b05dc0033040400c205c7001e038d004405c7001e038d
004b05c7001e038d004b05c7001e038d004b05c7001e038d004b05c7001e
038d004b04e30017038d002804e30017038d0028052f0017042200280555
0089042300be04e30017038d002804e30017038d002802aa002102390028
05c7003d0400003405c7003d04a3003405c7003d0503013705c7003d0400
003405c7003d0400003405c7001c0400001205c7002d0400001c05c7002d
0400001c05c7002d0400001c04e30017038d001504e30017038d002804e3
0019038d002d041d001407b2000805ee000205c7001f038d004c05c7001f
038d004c071d00090556004d04e30019038d002d07b2000805ee000204ec
003f0333002305ee0029041d001405ee0029041d001405c700440400003d
0556003d038d004005fc00190400001f05fc00190400001f05fc00190400
001f0585001d0400001407620013056d0014071d00170639002105560017
02aa000902aa001d0194002e02aa001d02bb002702aa00ba02aa00bf02aa
00500400000402aa00280400002105c7001704e3001702aa00a702aaffde
02aaffde02aa00b805c7003d04db0034047e0012038d0028038d00280473
00190333001407b2000805ee000205c700290400001404ec003f03330023
05c600290400001405c7002d05c7002d05c70019040000230585001d0400
001405c700440400003d0585001d04000014060f001c038d00280356ffec
02aafffd0541003b0541003b038d00280400000e0400000e05c700290474
00140585001d040000140222009e0222009e0222002a01b5ffe601b5ffb4
022200680222ffac0222ffde0222002a0222ffac0222ffde0222002a01b5
ffb40239ff8a05c7001e038d003c05c7001e038d004b04e30017038d0015
04e30017038d002802aaffa40239ff6f02aa00210239fffc05c7003d0400
003405c7003d040000340556001702aaffb10556001702aa000905c7001c
0400001205c7001c0400001202aa002805c7001e038d004b05c7001e038d
ffe505c7001e038d004a04e30017038d002804e30017038d002802aa0021
0239002805c7003d0400003405c7003d0400003405c7003d04db003405c7
003d04db003405c7003d04db003405c7003d04db003405c7003d04db0034
05c7001c04000012060f001c047e0012060f001c047e0012060f001c047e
0012060f001c047e0012060f001c047e001205c7002d0400001c038d0028
038d002805ee00290541003b038d002805c700440400003d06ac002705c7
002d06aa002d031d004406aa006a0639001d06aa00870239ffef031d002a
0639001d04e30058038d0058047300290239007d047300270239ff870473
00270473004e0473002705c7005804e3005804e3005804e3005804e30058
04e3005804e3005804e3005804e30058066efff3066efff30725003c0732
ffac0659ffde066affde0661fff3065dfff3038d0058038d0058038d0058
038d0058038d0058038d005807e9009e07e9009e07e9ffac07e9ffac07e9
ffde07e9ffde047300290473002904730029047300290473002904730029
047300290473002908cc009e08cc009e08ccffac08ccffac08ccffde08cc
ffde08cc002a08cc002a023900660239007d0239fff40239fff402390026
02390026023900100239001004b8009e04b8009e053fffac053fffac053f
ffde053fffde053f002a053f002a0473004e0473004e0473004e0473004e
0473004e0473004e079e009e0777009e08ccffac08ccffac07caffde07ed
ffde04730027047300270473002704730027047300270473002704730027
04730027085b009e085bffac085bffde085b002a05c7005805c7005805c7
005805c7005805c7005805c7005805c7005805c7005806ca009e0706009e
0847ffac0847ffac0720ffde0718ffde0725002a070b002a04e3005804e3
0058038d0058038d005804730029047300290239ffea0239007d0473004e
0473004e047300270473002705c7005805c7005804e3005804e3005804e3
005804e3005804e3005804e3005804e3005804e3005808b9fff308b9fff3
097cffac0985ffac08dcffde0851ffde08b4fff308b9fff3047300290473
00290473002904730029047300290473002904730029047300290b05009e
0b05009e0b05ffac0b05ffac0b05ffde0b05ffde0b05002a0b05002a05c7
005805c7005805c7005805c7005805c7005805c7005805c7005805c70058
0914009e0955009e0a80ffac0a80ffac0a80ffde0a80ffde0a80002a0a80
002a04e3005804e3005804e3005804e3005804e3005804e3005804e30058
06ac002706ac002706ce0055065dfff308e5002704730029047300290473
0029047300290473002907e9006807e9006808cc006808cc006808e3002d
0239ffd60239ffb70239ffcf0235ffcf0239001002390001031d0044031d
0044053f0068053f00680473002704730027047300270473002704730058
0473005804730027047300270639001d0639001d085b0068085b00680705
009e05c7005805c7005805c7005805c7005805c7005808cc006807550068
0755006806ab0068085e00ad05c7001e038d004b038d004b02aa00100239
ffdd0239002805c7001c0400001204000023060f001c047e001204e30058
04e3005804e3005804e3005804e3005804e3005804e3005804e3005804e3
005804e3005804e3005804e3005804e3005804e3005804e3005804e30058
0239ffb70239ffb70239ffb70239ffb70239ff920239ffb70239ffb70239
ff920239ffb70239ffd60239ffd60239ffcf0239ffd60239ff920239ffc4
0239ffd60239ff920239ffc4047300270473002704730027047300270473
002704730027047300270473002704730027047300270473002704730027
04730027047300270473002704730027047300270473002706ac002706ac
002706ac002706ac002706ac002706ac002706ac002706ac002706ac0027
06ac002706ac002706ac002706ac002706ac002706ac002706ac0027031d
0044031d0044031d0044031d0021031d002a031d0044031d0044031d002a
031d0044031d0044031d0044031d0044031d0044031d002a031d0044031d
0044031d002a031d00440639001d0639001d0639001d0639001d0639001d
0639001d0639001d0639001d0639001d0639001d0639001d0639001d0639
001d0639001d0639001d0639001d0639001d0639001d06ce002a06ce002a
053f002a053f002a085b002a085b002a04e3005804e3005804e300580239
ffb70239ffb70239ffb70473002704730027047300270400003100000036
003600360036008a00f001880240030203d2040c045404a20542057605bc
05da0604063206b0070e079c082e088e093c09c40a1a0afe0ba20be40c42
0c880cb40cfc0d8c0e5e0f3a0ff01084110e11b6124412f2138013d2143a
151215781616169c172817ca188219401a2c1a9e1b241bda1d161dfe1e9a
1f0c1f4a1f7a1fb62004201e2050213821ba2248230e23ae2422250625aa
2614269c275a27a62892293c29b42a642b182b9a2c662cc82d622df22ed6
2fba305a30d43140316431d232163222322e331a33263332333e334a3356
3362336e337a33863392346834743480348c349834a434b034bc34c834d4
34e034ec34f835043510351c35283534354035d4363436d637b838a838ca
39503a0e3b543c4c3cee3d223d663dc63eb83f7c402a407440b040ea41a8
425042ee436243da447244ea457045a8463e4768482248a649004926496c
4a504ab84af04b704be24c384c384c444c504c5c4d264dfa4e164e344e9c
4f084f464f844fd250165022502e504e50c251065142520c52d4539c53c6
5402546e55545560556c557855845590559c55a855b455c055cc55d85650
565c56685674568056d8570e578057a257fe583058885904594c59a059d6
5a645ae05aec5af85b045b105b305c025cd85ce45cf05dca5e6a5e845ee6
5f225f7e5fe4608c611461c662a462b062bc62c863ba64cc64d864e464f0
64fc65ca65d665e265ee65fa66066612661e662a66366642664e665a6666
6672667e668a669666a266ae66ba66c666d266de66ea66f66702670e671a
67266732673e6790679c67a867b467c067cc67d867e467f067fc68086814
6820682c683868446850685c686868746880688c689868a468b068bc68c8
68d468e068ec68f869046910691c692869346940694c695869646970697c
6988699469a069ac69b869c469d069dc69e869f46a006a0c6a186a246a30
6a3c6a486a546a606a6c6a786a846a906a9c6aa86ab46ac06acc6ad86ae4
6af06afc6b086bc66bce6bd66bde6be66bee6bf66bfe6c066c0e6c166c1e
6c486c506c586c866c866c8e6c9a6ca86cb46cc06ccc6cd86ce46cf06cfc
6d086d6e6e546e986eb86f2a6f686ffe70c87108719471f07292730a738c
742e74aa754a758e75e07658773877de78b8798a7a1a7aee7b927c887d2c
7dec7e767f5e7f94808080da819881e682e2838c846a854e8624869e876e
8800887289488a688a8c8af68b608be88c0c8c248c468c528c728c9c8cc6
8cd08cda8ce48cee8cf88d028d0c8d168d208d2a8d328d3a8d428d6c8d78
8da48dda8eda8f148f568f9a8fc4901a905a90cc911c915291b291fa9246
927c92b492ec931a9352938c93bc9404945a94b294ec9520956e95c89604
964e968296c2970c975e978697a497fe984e988698c698fc992c995e999e
99e09a1e9a649ac29b229b709bd49c0c9c5e9cac9cfa9d5c9dc89e129e82
9eec9f209f649fd4a028a068a0bca106a14aa17aa1c8a1faa26ca2aca2fc
a372a3cea41ca464a4b0a4e4a522a56ea5a6a5d2a618a680a6cea718a762
a7c2a828a86aa8c8a906a942a998a9a4a9aca9b8a9c0a9cca9d4a9e0a9e8
a9f4a9fcaa08aa10aa18aa24aa24aa24aa24aa24aa30aa3caa44aa4caa58
aa68aa74aa7caa88aa98aaacaab8aac0aaccaadcaae4aaecaaf4aafcab04
ab10ab20ab2cab34ab40ab50ab64ab70ab78ab84ab94ab9caba4abacabb4
abc0abccabd4abe4abf4ac04ac10ac1cac28ac34ac40ac4cac58ac64ac70
ac7cac88ac94aca0acacacbcacccacdcacecacfcad0cad1cad2cad3cad4c
ad5cad6cad78ad84ad90ad9cada8adb4adc0adccaddcadecadf8ae04ae10
ae1cae28ae34ae44ae54ae60ae6cae78ae84ae90ae9caea8aeb4aec0aecc
aedcaeecaefcaf0caf18af24af34af44af50af5caf64af6caf78af84af90
af9cafa8afb4afc0afccafd8afe4aff0affcb008b014b020b02cb038b044
b050b05cb06cb07cb08cb09cb0a8b0b4b0c0b0ccb0dcb0ecb0f8b104b110
b11cb128b134b140b14cb158b164b170b17cb188b194b1a0b1acb1bcb1cc
b1d8b1e4b1f0b1fcb208b214b220b22cb23cb24cb258b264b270b27cb288
b294b2a0b2acb2b8b2c4b2d0b2dcb2e8b2f4b300b30cb318b324b334b344
b354b364b374b384b394b3a4b3b0b3bcb3c8b3d4b3e0b3ecb3f8b404b414
b424b430b43cb448b454b460b46cb47cb48cb49cb4acb4bcb4ccb4d8b4e4
b4f0b4fcb508b514b520b52cb538b544b550b55cb568b574b584b594b5a4
b5b4b5c0b5ccb5d8b5e4b5f0b5fcb608b614b620b62cb638b644b650b65c
b668b674b680b68cb698b6a4b6b0b6bcb6c8b6d4b6e0b6ecb6f8b704b710
b71cb728b734b744b754b764b774b784b794b7a4b7b4b7c4b7d4b7e4b7f4
b804b814b824b834b840b84cb858b864b874b884b894b8a6b8b6b8c6b8d6
b8e6b8f2b8feb90ab916b926b936b946b956b966b976b986b996b9a2b9ae
b9bab9c6b9d2b9deb9eab9f6ba06ba16ba26ba36ba42ba4eba5aba66ba72
ba7eba8aba96baa2baaabab2babebacabad6bae2baeebafabb06bb12bb1e
bb2abb36bb42bb4ebb5abb66bb72bb7ebb8abb96bba2bbaebbbabbc6bbd2
bbdebbeabbf6bc02bc1abc22bc3abc74bc98bcbabcc8bd1ebd50bdaabdfa
be38be66be74be82bea6befcbf4abfacbfdec010c042c07ac0f6c176c1c6
c22cc298c2f6c33ac396c3dac41ec480c4dac51ec580c5bec5f8c62cc676
c6d0c702c72cc74cc784c7bcc7eec842c896c8e6c94ac98ac9deca00ca22
ca42ca82cabacad2cb04cb36cb70cba2cbd6cc12cc48cc54cc60cc6ccc78
cc84cc90cc9ccca8ccb4ccc0ccccccd8cce4ccf0ccfccd08cd14cd20cd2c
cd38cd44cd50cd5ccd68cd74cd80cd8ccd98cda8cdb8cdc8cdd8cde4cdf0
ce00ce10ce1cce28ce34ce40ce50ce60ce6cce78ce84ce90ce9ccea8ceb4
cec0ceccced8cee4cef0cefccf08cf14cf20cf2ccf38cf44cf50cf5ccf68
cf74cf80cf90cfa0cfaccfb8cfc4cfd0cfdccfe8cff4d000d00cd018d024
d030d03cd048d054d060d06cd078d084d090d09cd0a8d0b4d0c0d0ccd0d8
d0e4d0f0d0fcd108d114d120d12cd138d144d150d15cd168d174d180d18c
d198d1a4d1b0d1bcd1c8d1d4d1e0d1ecd1f8d204d210d21cd228d234d240
d24cd258d264d270d27cd288d294d2a0d2acd2b8d2c4d2d0d2dcd2e8d2f4
d300d30cd318d324d330d33cd348d354d360d36cd378d384d390d39cd3a8
d3b4d3c0d3ccd3d8d3e4d3f0d3fcd408d414d420d42cd438d444d450d45c
d468d474d480d48cd498d4a4d4b0d4bcd4c8d4d4d4e0d4ecd4f8d504d510
d51cd528d534d540d54cd558d564d570d57cd588d594d5a0d5acd5b8d5c4
d5d0d5dcd5e8d5f4d600d60cd618d624d634d644d654d664d674d684d694
d6a4d6b4d6c4d6d4d6e4d6f4d704d714d724d734d744d754d764d774d784
d794d7a4d7b4d7c4d7d4d7e4d7f4d804d814d824d834d844d854d864d874
d884d894d8a4d8b4d8c4d8d4d8e4d8f4d904d914d924d930d93cd94cd958
d968d974d984d990d99cd9a8d9b4d9c0d9d0d9dcd9ecd9f8da08da14da20
da2cda38da44da50da5cda68da74da80da8cda98daa4dab0dabcdac8dad4
dae0daecdaf8db04db10db1cdb28db34db40db4cdb58db68db74db84db90
dba0dbacdbb8dbc4dbd0dbdcdbecdbfcdc0cdc1cdc2cdc38dc48dc58dc64
dc70dc7cdc8cdc9cdcacdcbcdcccdcdcdcecdcfcdd0cdd1cdd2cdd3cdd4c
dd5cdd6cdd7cdd8add9adda8ddb6ddc4ddd2dde0ddeeddfcde0cde1cde2c
de3cde4cde5cde6cde7cde8cde9cdeacdebcdeccdedcdeecdefcdf0cdf1c
df2cdf3cdf4cdf5cdf6cdf7cdf8cdf9cdfacdfbcdfccdfdcdfecdffce00c
e01ce02ce03ce04ce05ce06ce07ce08ce09ce0ace0bce0cce0dce0ece0fc
e10ce11ce12ce13ce14ce15ce16ce17ce18ce19ce1ace1bce1cce1dce1ec
e1fce20ce21ce22ce23ce24ce25ce26ce27ce28ce29ce2ace2bce2cce2dc
e2ece2fce30ce31ce32ce33ce34ce35ce36ce37ce38ae398e3a6e3b6e3c6
e3d6e3e40001000005a30071000600960009000200100010003b000007e8
06c3000400010000002301aa0001000000000000006e0000000100000000
00010005006e00010000000000020007007300010000000000030021007a
0001000000000004000b009b0001000000000005000800a6000100000000
0006000b00ae0001000000000007002e00b90001000000000100001800e7
0001000000000101000c00ff00010000000001020009010b000100000000
0103001001140001000000010007002b012400010000000200070038014f
0001000000030007002c01870001000000040007003601b3000100000005
0007003201e90001000000060007002c021b000100000007000700380247
00030001040400020006027f0003000104060002000e0285000300010407
0002000c02930003000104090002000e029f00030001040b0002001002ad
00030001040c0002000c02bd0003000104100002001002c9000300010411
0002000a02d90003000104120002000602e30003000104130002001002e9
0003000104140002000c02f90003000104160002000c0305000300010419
0002000e031100030001041d0002000c031f00030001080400020006032b
000300010c0a0002000c0331a920313939302d3939204170706c6520436f
6d707574657220496e632e20a92031393831204c696e6f74797065204147
2020a920313939302d3931205479706520536f6c7574696f6e7320496e63
2e20a920313939302d39312054686520466f6e742042757265617520496e
632e54696d6573526567756c617254696d657320526f6d616e3b2031342e
30643165343b20323031382d30332d313654696d657320526f6d616e3134
2e306431653454696d65732d526f6d616e54696d65732069732061207265
67697374657265642074726164656d61726b206f66204c696e6f74797065
204147416c6c205479706f67726170686963204665617475726573416c6c
2046656174757265734c6967617475726573436f6d6d6f6e204c69676174
7572657354696d65732065737420756e65206d617271756520648e706f73
8e65206465204c696e6f7479706520414754696d6573206973742065696e
2065696e676574726167656e657320576172656e7a65696368656e206465
72204c696e6f7479706520414754696d6573208f20756e206d6172636869
6f207265676973747261746f206469204c696e6f7479706520414754696d
65732069732065656e20676572656769737472656572642068616e64656c
736d65726b2076616e204c696e6f7479706520414754696d6573208a7220
65747420726567697374726572617420766172756d8a726b6520669a7220
4c696e6f7479706520414754696d657320657320756e61206d6172636120
72656769737472616461206465204c696e6f7479706520414754696d6573
20657220657420726567697374726572657420766172656dbe726b652074
696c68bf72656e6465204c696e6f747970652041476a196e969ad4004f00
7200640069006e00e60072004e006f0072006d0061006c00520065006700
75006c00610072004e006f0072006d00610061006c0069004e006f007200
6d0061006c005200650067006f006c00610072006530ec30ae30e530e930
fcc77cbc18ccb40052006500670075006c006900650072004e006f007200
6d0061006c004e006f0072006d0061006c041e0431044b0447043d044b04
39004e006f0072006d0061006c5e3889c44f53004e006f0072006d006100
6c00b800312bb800272b400f09cf54010f54013fd029019f540140410d01
fb0001003001fb0001002001fb0001001001fb0001000001fb400b010020
01900701900601f0414f0204000100ef0203000100c00201000100b001ff
00b0020100bf0208000300af020100af02080002009f0202009f02080002
007f0200007f0202007f0208008f0200008f020200800205008f02080007
006f0200006f0202006f0205006f02080004005f020200500203005f0208
0003004f0202004f0204004f0208000300300202003f0204003002080003
002f0201002f0204002f02080003001f0208b2010840ba01e5014d0152b5
0f1fc2710e1fbc014b014d0062001f0131b2864f1fbe01a60020000d018f
0020000d0182400e200dde200dda200d8f200d7f200dbe018b0050000d01
6c0050000d0101400e500dd8500d43500d3f500d3a500dbb013b0028000d
01034014280dbd280db8280da7280d7c280d76280d2d280dbe01b1004a00
0d01a7004a000d019440204a0df74a0dc84a0d984a0d854a0d7a4a0d664a
0d214a0d621c0d241c0d1b1c0db8017eb60f920f900f0009b8017eb4900d
92900db801f5b3312f1f41b801f3b5331f2b2c361fb80189b2542c1fb801
83b254ab1f4115018100290401001f018000290201001f017c0044020100
1f017901300201001f017801300401001f0177b22f291fb80173b23e9e1f
b80171b23ee41fbc016b002e0401001f016ab233e41fb80138b2545e1f41
09013300290401001f013200440801001f012db23e931fb8012ab22ccd1f
41110127002e0125001f012400330801001f012300330401001f01220033
0401001f0106b254261fb80105b4542c1fff29b80101b21ffe88b80201b6
1ffb2f521ff62eb80401b21ff52eb80801b21fe129b802abb21fdd2fb802
ab40171fdb2f5e1fd93e4a1fc454261fc354e41fbf2f6c1fba2cb80401b2
1fa944bc0401001f00a80130019a400b1fa52f931fa42f891fa23eb80401
b21fa033b80801b21f9654b80801b21f9529b80401b61f8954261f732eb8
0156b21f7233b802ab400b1f6b2f6c1f6a2c4b1f632eb8019a400f1f2e2c
371f532fbb1f512f721f4f2cb80401b21f4944b80401b21f482fba040100
1f01f3400d411d1f412f1d1f3d3ecd1f3b44b80201b21f392eb8019ab21f
343eb80401b21f322eb80201b61f313e4c1f2b2eb80404b61f2a54311f22
33b80201402d1f5567075f075507370735073007260725071e071d071408
120810080e080c080a080808060804080208000814b8ffe0402b00000100
140610000001000604000001000410000001001002000001000200000001
000002010802004a00b801ff85b0018d16763f183f123e113946443e1139
46443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1db0964b5358b0aa1d59b0324b5358
b0ff1d594bb03553205c58b901e701e54544b901e601e545445958b90121
01e7455258b901e70121445959184bb04c5058b801e64569b801e7456961
b0405258b901e601e645b040614459594bb05653205c58b9002901e64544
b9005401e645445958b902360029455258b9002902364459594bb0895320
5c58b9002f01e74544b9004401e745445958b902e4002f455258b9002f02
e44459594bb0cd53205c58b188294544b1292945445958b9052e00884552
58b90088052e4459594bb8020153205c58b90130002f4544b12f2f454459
58b90ab00130455258b901300ab04459594bb01d53205c58b133334544b1
3e3345445958b13233455258b133324459594bb02f53205c58b133334544
b12c3345445958b15233455258b133524459594bb05b53205c58b1333345
44b12e3345445958b1a033455258b133a04459592b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb35b9b819c456523456023456560234560b0
8b766818b080622020b1819b4565234520b003266062636820b003266165
b09b236544b081234420b15b9c4565234520b003266062636820b0032661
65b09c236544b05b2344b1009c455458b19c406544b25b405b4523614459
b3868d7145456523456023456560234560b089766818b080622020b1718d
4565234520b003266062636820b003266165b08d236544b071234420b186
454565234520b003266062636820b003266165b045236544b0862344b100
45455458b145406544b286408645236144592b2b2b2b4569534273737373
737373737373737373737373737373737475755e73735e0000>
[16237 16269 16205 16041 16185 16337 16361 3053 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2936 16 <00010050018e0247020e00030020400a003d03011a0500190405b801afb3
218356182b2b4ee410e6002f4ded3130132115215001f7fe09020e800000
>Times-Roman AddT42Char 
1 11308 49 <00020017ffe805a8054b0020002100984042d9180158196819dd0bea0eea
15e51c060b0a0a2912191918190b1808190408001310081b21120a021e00
1b1f0818092121031618170a1a0b11280c0b2c1717122816b80204400c23
191f281a2c040928202803b80203b123222fccf4ecec3cfdec3c10f6ec3c
4d10fd3cec11123912391112392f003f3ffc3c3f3c3cfd3c3c1112393911
12393d2f180710052b10043c3130005d015d373e013511272e0127352101
11342726273521150e01151123011114171617152101177f481c2d3f3f01
5f031532217101e1754e23fc7631206ffe1f02ce250d59a2038721351902
26fc2602ada933210a26260c5aa1fbca0463fce2a833210c25054b00>Times-Roman AddT42Char 
2 1712 72 <00030028ffe8035e03aa0013001c001d00d9405d69086a0c6f126c157b07
79087a0c7d117f127d147d15fc0ef60f0d550866086011c404c712d404e6
09e20f083d08090a171803090a02090a03061739100301034703061c1c63
1d13079206a2060206410d0b1d18fe02421d10cf0a010ab80202b31f03db
10b80201b11f1e2fccf4ed10f65d1239f4ed2f003fed5d3f3ced11123976
2f5d18fd111239390111123911123910c931304379402a0e1b000515251a
261412171e0016171b00181e011918050e03260016111c1e0119011c1e01
040f062600002b2b2b012b103c2b103c2b2b2b8181005d015d001615211e
0133323637170e0123220235341233060706072126272623370262d4fd85
0abe8269903d2329e1a3bccdeebfac3c200e01a60b1b31732d03aac3b3e8
d46e650c7fd8011cb9c901244965365264315849>Times-Roman AddT42Char 
2 4536 81 <00020021000003e303ae0033003400b74059191a4d1a02960ea60e021a08
1f2110321f332f213f2105253f1c2120220343001c3320241c3a1c202023
2e3a1c3220230c20043a0b1c0c900f2e2d251c1304030733120f293e1727
0f07333221200a34073426252f34041b1cb80200b73612272e2f030304b8
01ffb136352fccf43c10fde410f63c1239fd3c2f003f3f3c3c3c3ff4ed11
3911173910f5edfc01f52b2b2b2b055d043130437940102728181a281826
1e01191a2719291e012b01103c2b8181005d71373e013511342726232206
0735363f0132161d013637363332171615111416171521353e0135113426
2322070607111416171521012547390c133b09130e29995e07035c344e54
44386c3a44fe55493a40563b3d22364045fe4b01dc1c09355c01fb401a26
0202230c321f0a0993562031274cc3fe2d4840011c1c0a3d6601ab567128
1735fdd04831021c03ae>Times-Roman AddT42Char 
2 4876 82 <00030034ffe103c203aa000b001800190092402cc609e5090296109916a0
10ab16f50a05160014041717550a5410053a0818331902071233080b1915
44190b05b80202b61b0f440f0b010bb80201b11b1a2fccf45ded10f61239
ed2f003fed3f3ced31304379402c00170d250c010f260017031526011109
0f260013071526010e001826011604182601100a12260014061226002b2b
2b2b012b2b2b2b2b8100715d015d1a013332001514022322003500070615
1412333236353402233734fdc7c60104fcc8c0fef601593a64a18f70799a
922502970113fefcd8c7feda011ad5019e345bdfb2fecccea7ad01323c00
>Times-Roman AddT42Char 
2 5116 83 <00020009fe4203c203b1000c003300c440593609362196199925aa25a527
e427f527080a2505274a2503a62401452401220810430d1c33da242e431c
32de2318201150171c18921b0c0b0a03052e102e29332d1f110c0a05021e
1b083e23071b070263290b33320e054426b80202400a351e272e2f11c010
0110b801ffb135342fccf45d3cfde410f6ed003f3c3fed3f3fed11391117
391112393901111217390010f5edfc01f52b2b3130437940182428030703
280526010724052601042702260006250826012b2b012b2b818101715d00
715d24163332363534262322061511013e01351134262322060735373637
32161d013637363332161514022322272627111416171521016167466c99
9f694a7afec25e3325330b13125f05c4050542325a5f8ac7efb538294036
426ffe117443d7c0b8b65b2cfe09fdab06444903c04c2b0203211f014409
0687422038ebccc8feba0e1538feb9652e0823000000>Times-Roman AddT42Char 
2 5828 85 <00010009000002b103af00290088404cc41e013722011f29010343001c29
202424431c2820230b20043f0a1c0b9210221f1e032b2424220403042914
1d1320801d01201d301d021d951d1027170729280a801a011a2b1327242f
0403b801ffb4af2b012b2a2fcc5df43cfde410c45d003f3c3f4de4cced71
5d1239113912173901111217390010f5edfc01f52b2b015d3130005d015d
373e013511342623220607353e0137363732161d013e0133321615140623
222623220615111416371521095c3c25310a211239781732350703407740
33403125264d162366505dfe132108315001c36355050421142a0913180a
10a459643d2e293846713cfe3d56430221000000>Times-Roman AddT42Char 
2 6496 87 <00010019ffed023b04a100220057402a0911011b22021402391e2206400b
210a47073e0f0b400a210b24401e210022022f141b1840112c1424232fcc
dc1ac81adc3dc41810fdc4cc1ac81a10d61ac81a003ffd76d41a18c81a3f
ccfd3c111239313001005d011523031417163332363717070e0123222726
3511232e01353436373e013732161d010209cc020d18462435221a163474
36762a176d05050918453d710d05039a48fdc04c27452225161e463a6939
65025e0306050a0b14394798040df600>Times-Roman AddT42Char 
1 0 0 <0002002100000597054b000300070043b40201490506b80156401c000407
4903000a0504490303021a090607490100190809eb214652182b2b4ef43c
4dfd3c4e10f63c4d10fd3c003f3cfd3c10f43cfd3c313033112111271121
11210576b8fbfa054bfab5b803dbfc250000>Times-Roman AddT42Char 
Times-Roman /CharStrings get begin
/hyphen 16 def
/N 49 def
/e 72 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/t 87 def
end
Times-Roman /Encoding get
dup 45 /hyphen put
dup 78 /N put
dup 101 /e put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/BRDZCN+Times-Roman /Times-Roman findfont ct_VMDictPut/BRDZCN+Times-Roman*1 [45{/.notdef}rp /hyphen 32{/.notdef}rp /N 22{/.notdef}rp /e 8{/.notdef}rp /n /o /p /.notdef /r /.notdef /t 139{/.notdef}rp]BRDZCN+Times-Roman nfBRDZCN+Times-Roman*1 [0 -9.86639 -9.86639 0 0 0 ]msf137.895 198.341 mo(Net-proton)[-7.1234 -4.38052 -2.74286 -3.28543 -4.9332 -3.28543 -4.9332 -2.74286 -4.93318 0 ]yshgsave
153.449 207 mo
153.449 28.417 li
110.348 28.417 li
110.348 207 li
cp
clp
%ADOBeginSubsetFont: Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCN+Times-Roman gcheck setglobal} if

1 0 3 <> BRDZCN+Times-Roman AddT42Char 
1 2072 11 <0001005efe93026f056800110045401c0c0d04030d080c1304040c0d0311
0d131317171a04ae084811191213b8010bb3218352182b2b4ef44dfdf44e
456544e6003f3f1239390111123912393900c910c9313012133637170607
06111017121707262702115ed080ae13a145792e51e01a7b8fed035e0107
a162218079d3fea1fefca9fed893213bac011d016b000000>BRDZCN+Times-Roman AddT42Char 
1 2216 12 <00010036fe93024705680014004a40200902010f100706100706030b0f07
0f06101106131617171a14480bae0f191516b8010bb3214d56182b2b4ef4
4df4fd4e456544e6003f3f12393901111217390010c910c93130005d0002
0706070607273637361110270227371617121102474e4b4f84573b139a47
7e3a51d41a9e88d10163fef6767e6d481d21757ad80163011fb601019321
58b2feeefeac>BRDZCN+Times-Roman AddT42Char 
1 2996 17 <000100dcffe801bf00cb000b00264013052a0b0b0d17171a082a02190c0d
c321788e182b2b4ef44dfd4e456544e6003f4ded31300426353436333216
15140623011e42432f2f42413018432f2f42422f2f430000>BRDZCN+Times-Roman AddT42Char 
1 3080 18 <00010004ffde022f05680003003e40180003034f12020201020304010000
03020b011a0500190405ba012a002101a8b19d182b2b194ee410e618003f
3c3f3c01123939874d2e2b7d10c531300133012301cb64fe3b660568fa76
0000>BRDZCN+Times-Roman AddT42Char 
1 3172 19 <00020012ffed03b10560000e001e00924022ac01eb0ce51403c500d600e5
000331003505390d034c0806a01e050ea0160d028812b80208b3200a881a
b80207b1201f2fccf4ed10f6ed003fed3fed313043794038001d0c261825
142608251c26102504260d170a35000015023501071d0a3500050f023501
0b190e350001130e3500091b06350103110635012b2b2b2b012b2b2b2b2b
2b2b2b2b2b2b8101715d005d241211342702232203061514171633121716
15140702212227261110373633027d6e213eaaaa3f212240b0e37f653e75
fee0c57f885b7bff2501420131f391010efeea94f2e388fe053bf1c3fdc7
b0feb5b3bf01480102bafd00>BRDZCN+Times-Roman AddT42Char 
1 3612 21 <0001003d000003cb0564001b00b8404c2512016c006e016913036402960f
f60ff61404050f0614150f2514042b08142100000118190a0b010b0a0303
001a0318191119180b0a01050614066b0e051514a41a4000211b0c038811
bc19bb0208001d00000207b11d1c2fcce410f6f4ed003f1a3dcc181a3cfd
3c3fed111217390111123912391112173910c910c90705101ac531304379
401c04100825070d0a3500090a0c0b050f033501090c0635010410063501
002b2b012b103c103c2b2b8101715d005d71370801353426232207060727
3e0133321615140201213236371703213d016e0106a06f89552f2b2b32ef
89a9d1e2fe8601cb604e311a6ffce117017c0164a9949b64377209e6b3d5
9aa4fed0fe7b2e590cfee9000000>BRDZCN+Times-Roman AddT42Char 
1 6276 31 <0001003dffef0447041c0006006540360506063112030304060000060631
1202020106050306020504010308020003060431058a068a0031010b001a
0802190708ea214657182b2b4ee410e619003f184dfdf4f4fd1239113901
12173912393908872e2b047d10c508872e182b047d10c531302515013501
15010447fbf6040afd02879801fb3701fb98fe83>BRDZCN+Times-Roman AddT42Char 
1 9352 42 <00020031ffe305a10563002f003000bf401be602012808237a1b1ea72219
211b1d2823051b067e40081b210707b801074031067e4002a1262f252319
03121d1e1e270c2e302f03122e27090761231918292430302b249f23cf23
022f234f23bf230323b80204b3320f542bb80205b132312fccf4ed10f65d
5d3c12392f10fd3c10e4003fed3f3ced12392f3c121739103d1aec181af4
ed01103d1aed1a18f4ed2b2b31304379401c282e0d1129252d2611280f37
000d2e0f3700102a1237000e2c0c37012b2b012b2b2b2b8181005d001633
323637331323262726232200111000333236373e01351134262735211506
07061511140423202726111037362123036de6112c250d2d102f3f4379c2
c5fed5012adb25642d49244371020a4c192afe9fa3fed4cee3b5c7014921
0563422220fe51954980fed5fea9fee5fec20e0f1823220147763a072626
05142064fe6d2478afc10145011ecce10000>BRDZCN+Times-Roman AddT42Char 
1 13896 57 <00010021ffe80592054b001f00fd40436a196a1a02171977198619c71ec7
1fd61ed61ffa13fa140909130914191319142813281406080909070a0b0b
090049000907132d18124712090b1411011e1b1f7c1b40b8ff864031091a
19201819192c1209090b1b1a1a29120909071b1a1907041f0b1813091b18
0b0907051a1f131200021a19090f210121b8020ab39b130113b801b9b39b
090109b8014e400d20501f801f02401f01001f011fb9020900202ff45d5d
5d1a19fd5dfd5d18e65d003f3c3f3c3c3c1217390111123939121739874d
2e2b0e7d10c505872e182b0e7d10c52b1a1810f500fd3c3c3c0111123976
2f180110f501111239762f1887100e3c87100e3c313001715d005d011506
07061514161709013e013534272627352115060706070123012e01273502
424d1c312330014001231314331e4501a3411f2f2efe3b1ffe07404d4a05
4b2601091031195a6afd3703043346163b150c022623091a2776fb800466
8f460523>BRDZCN+Times-Roman AddT42Char 
2 1032 70 <0002002fffed034b03af0022002300a940498b17a408c411d611d618e211
e61e07350b450b560b6a096a0a691569167a09790a7a157a160b28081718
070a10171802171813070a0d050d3323220793130113411c0b230242231f
18b80202b32510441fb80201b125242fccf4ed10f61239e42f003fed5d3f
3cfdcc1139391139390111123912393910c931304379401b1d210a120001
121d1026000e211026000a111e1326000f200d2601002b2b01102b2b8181
81015d005d00161514062322262f01262726232206151416333237363717
0607062322263534003323027ab52e3023350c0c0d202136729dad936851
2e3a1c393f799f9cf00106c82c03af814d2139302e30351615c7a597f044
275511784686f6d3cf012a000000>BRDZCN+Times-Roman AddT42Char 
BRDZCN+Times-Roman /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/period 17 def
/slash 18 def
/zero 19 def
/two 21 def
/less 31 def
/G 42 def
/V 57 def
/c 70 def
end
BRDZCN+Times-Roman /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 50 /two put
dup 60 /less put
dup 71 /G put
dup 86 /V put
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCN+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /.notdef /two 9{/.notdef}rp /less 10{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 12{/.notdef}rp /c /.notdef /e 8{/.notdef}rp /n /o /p /.notdef /r /.notdef /t 139{/.notdef}rp]BRDZCN+Times-Roman nfBRDZCN+Times-Roman*1 [0 -9.86639 -9.86639 0 0 0 ]msf148.221 125.022 mo(< 2.0 \(GeV/c\))[-5.5646 -2.4666 -4.9332 -2.4666 -4.9332 -2.4666 -3.28543 -7.12338 -4.38053 -7.12338 -2.74286 -4.38052 0 ]yshgrestore
gsave
153.449 207 mo
153.449 28.417 li
110.348 28.417 li
110.348 207 li
cp
clp
%ADOBeginSubsetFont: Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCN+Times-Roman gcheck setglobal} if
1 13400 55 <0001001c000004b8054b00170095403e06c8031b02af01af02029f019f02
025f015f02021f011f0202114a1b0d2d2208211b0c2d2313c8161b021713
110006010808110d06132e0100020d0c0819b8020ab2024b01b80108400e
070829121f115f119f11af110411b80108b2004b17b9020900182ff4f4f4
5d3cfd3cf4f4e6003f3c3f3c4dfd3c1139390111123911123900dc3c01ed
ec2b2b015d5d5d5d10edec3130132113232e012b01111416171521353e01
351123220607232804850b31246fb2724a7dfdab824072aa7b1f32054bfe
a4a463fbe877390925250a4285040062a500>BRDZCN+Times-Roman AddT42Char 
BRDZCN+Times-Roman /CharStrings get begin
/T 55 def
end
BRDZCN+Times-Roman /Encoding get
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCN+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /.notdef /two 9{/.notdef}rp /less 10{/.notdef}rp /G 6{/.notdef}rp /N 5{/.notdef}rp /T /.notdef /V 12{/.notdef}rp /c /.notdef /e 8{/.notdef}rp /n /o /p /.notdef /r /.notdef /t 139{/.notdef}rp]BRDZCN+Times-Roman nfBRDZCN+Times-Roman*1 [0 -6.75069 -6.75069 0 0 0 ]msf153.385 129.153 mo(T)shgrestore
gsave
153.449 207 mo
153.449 28.417 li
110.348 28.417 li
110.348 207 li
cp
clp
%ADOBeginSubsetFont: Times-Roman AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal BRDZCN+Times-Roman gcheck setglobal} if
1 2796 15 <000100d7fedc01f600d00013004a4026c80401030208030203060d020308
1096070b1517171a9f0601062b13c40d191415c4217856182b2b4ef44dfd
7ced72184e456544e6003f4ded39333301111217390010c93130015d0406
07273e01353426230722263534363332161501f69254136049120a432a46
3a423f6450ae2628367e2a0e08073734284c6358>BRDZCN+Times-Roman AddT42Char 
1 4188 23 <00020017000003c7055e0002000d0085401f780301050d06040902030d00
010173120d0d03010d000c03040a000103060dbb01740007000c0197b50a
03050a0c0ab8011e400900a4093004e0040204b80136b720064006a00603
06bb020a000f000c0209b10f0e2fcce410f65df45d3cfde4003f3f10f43c
f53c1139390111123911123939872e2b047d10c5001112390f3130015d09
012113331133152311231121350255fe1501eb425fd1d19ffdc00490fd4a
0384fc7c85feab0155850000>BRDZCN+Times-Roman AddT42Char 
1 4380 24 <00010041ffea037f057f002c00ce4027861b013508141501000229170514
2214150b0c090f171a100f0f73121b1b1a1b1a100f0405292cb80132401e
2509a41b1b021a191aa440152111100402f6250d056b22b6a015b0150215
bb0208002e00290207b12e2d2fcce410f65df4ed003fed3f3c1ac41afd3c
1112397d2f18ec10ed0111121739870e2e2b057d10c50011391112393911
33011239113912173910c9313018437940261c24030820211f211e211d21
04060726081c053501032405350106210935011c1b0423023500002b103c
2b012b2b2b2a8181015d361633323635102526232226273e013713213236
3717070e01232107161716171e011514002322272635343633d2b93273ac
feec9984160b08020302da01ad20231c104e042415fe7d55a44c7d54484a
fec5f1623c642b2db781cb940103723f0309080b0501de161e0eb90905af
1c192a5247b163ddfed8131f501e2d000000>BRDZCN+Times-Roman AddT42Char 
2 8200 92 <0002001cfe4003cb03aa002f003000a2406e5a1901070a1718282a292c4a
09441b4a2c561b682c880a882c982cb92cd72c0e482c01272b0a2c2b0a09
0a0b0b39121819180a090953122c2c2b2c090b1819272b0a082f25021215
032f1c1300062225441c0e3007302c090b1819272b0a3009140080140114
321f8000010032312fccd65dc410c65d111217392f003f3ffdc43f3cfd17
3c111217390705102b103c07102b10083c0810c4c4313001715d005d1321
15060706151416171b013e013534262f013521150e0107010e0123222635
343633321633321235342627012e0127251c01a632182e0a0deabc030d24
1c1f011329290ffec552967338623b2d1a6716387c0604fec022333201dc
03971f01080d260e1d1dfdf9020b08380a1a1802021f1f052e29fcbed8c2
383d28332601042c091a0a02b44a2f072f000000>BRDZCN+Times-Roman AddT42Char 
2 8980 95 <000100870000011205760003002b40160300020a0517171a0000013d0302
190405d921788e182b2b4ef43c4dfd3c4e10456544e6003f3f3130011123
1101128b0576fa8a05760000>BRDZCN+Times-Roman AddT42Char 
BRDZCN+Times-Roman /CharStrings get begin
/comma 15 def
/four 23 def
/five 24 def
/y 92 def
/bar 95 def
end
BRDZCN+Times-Roman /Encoding get
dup 44 /comma put
dup 52 /four put
dup 53 /five put
dup 121 /y put
dup 124 /bar put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BRDZCN+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash /zero /.notdef /two /.notdef /four /five 6{/.notdef}rp /less 10{/.notdef}rp /G 6{/.notdef}rp /N 5{/.notdef}rp /T /.notdef /V 12{/.notdef}rp /c /.notdef /e 8{/.notdef}rp /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]BRDZCN+Times-Roman nfBRDZCN+Times-Roman*1 [0 -9.86639 -9.86639 0 0 0 ]msf148.221 198.341 mo(|y| < 0.5,   0.4 < p)[-1.97325 -4.9332 -1.97325 -2.4666 -5.56459 -2.4666 -4.9332 -2.4666 -4.9332 -2.4666 -2.4666 -2.4666 -2.4666 -4.9332 -2.46658 -4.9332 -2.4666 -5.56461 -2.4666 0 ]yshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/BRDZCN+Times-Roman*1 uf/BRDZCN+Times-Roman uf/Times-Roman uf/BRDZCM+Times-Bold*1 uf/BRDZCM+Times-Bold uf/Times-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
