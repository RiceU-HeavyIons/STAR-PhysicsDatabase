%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: c_v2_Three_0.pdf
%%Creator: Adobe Acrobat 8.0
%%For: posk
%%CreationDate: 12/24/15, 5:18:13 PM
%%BoundingBox: 0 0 352 737
%%HiResBoundingBox: 0 0 352 737
%%CropBox: 0 0 352 737
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 2666 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xap:CreateDate="2015-11-14T15:59:50Z"
   xap:CreatorTool="ROOT Version 5.34/28"
   pdf:Keywords="ROOT"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">./c_v2_Three_0.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceRGB] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -737 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 737 li
352 737 li
352 0 li
cp
clp
[1 0 0 1 -20 0 ]ct
20 737 mo
372.31 737 li
372.31 -0.00799561 li
20 -0.00799561 li
cp
false sop
0.999 0.999 0.999 rgb
ef
0.002 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
20 737 mo
372.31 737 li
372.31 -0.00799561 li
20 -0.00799561 li
cp
@
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
ef
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
@
93.121 256.39 mo
345.721 256.39 li
345.721 43.66 li
93.121 43.66 li
cp
ef
93.121 256.39 mo
345.721 256.39 li
345.721 43.66 li
93.121 43.66 li
cp
@
0.75 lw
93.121 256.39 mo
345.721 256.39 li
345.721 43.66 li
93.121 43.66 li
cp
0 0 0 rgb
@
93.121 256.39 mo
345.721 256.39 li
345.721 43.66 li
93.121 43.66 li
cp
0.999 0.999 0.999 rgb
ef
0.002 lw
93.121 256.39 mo
345.721 256.39 li
345.721 43.66 li
93.121 43.66 li
cp
@
0.75 lw
93.121 256.39 mo
345.721 256.39 li
345.721 43.66 li
93.121 43.66 li
cp
0 0 0 rgb
@
93.121 256.39 mo
93.3736 256.39 li
93.6262 256.39 li
93.8788 256.39 li
94.1314 256.39 li
94.384 256.39 li
94.6366 256.39 li
94.8892 256.39 li
95.1418 256.39 li
95.3944 256.39 li
95.647 256.39 li
95.8996 256.39 li
96.1522 256.39 li
96.4048 256.39 li
96.6574 256.39 li
96.91 256.39 li
97.1626 256.39 li
97.4152 256.39 li
97.6678 256.39 li
97.9204 256.39 li
98.173 256.39 li
98.4256 256.39 li
98.6782 256.39 li
98.9308 256.39 li
99.1834 256.39 li
99.436 256.39 li
99.6886 256.39 li
99.9412 256.39 li
100.194 256.39 li
100.446 256.39 li
100.699 256.39 li
100.952 256.39 li
101.204 256.39 li
101.457 256.39 li
101.709 256.39 li
101.962 256.39 li
102.215 256.39 li
102.467 256.39 li
102.72 256.39 li
102.972 256.39 li
103.225 256.39 li
103.478 256.39 li
103.73 256.39 li
103.983 256.39 li
104.235 256.39 li
104.488 256.39 li
104.741 256.39 li
104.993 256.39 li
105.246 256.39 li
105.498 256.39 li
105.751 256.39 li
106.004 256.39 li
106.256 256.39 li
106.509 256.39 li
106.761 256.39 li
107.014 256.39 li
107.267 256.39 li
107.519 256.39 li
107.772 256.39 li
108.024 256.39 li
108.277 256.39 li
108.53 256.39 li
108.782 256.39 li
109.035 256.39 li
109.287 256.39 li
109.54 256.39 li
109.793 256.39 li
110.045 256.39 li
110.298 256.39 li
110.55 256.39 li
110.803 256.39 li
111.056 256.39 li
111.308 256.39 li
111.561 256.39 li
111.813 256.39 li
112.066 256.39 li
112.319 256.39 li
112.571 256.39 li
112.824 256.39 li
113.076 256.39 li
113.329 256.39 li
113.582 256.39 li
113.834 256.39 li
114.087 256.39 li
114.339 256.39 li
114.592 256.39 li
114.845 256.39 li
115.097 256.39 li
115.35 256.39 li
115.602 256.39 li
115.855 256.39 li
116.108 256.39 li
116.36 256.39 li
116.613 256.39 li
116.865 256.39 li
117.118 256.39 li
117.371 256.39 li
117.623 256.39 li
117.876 256.39 li
118.128 256.39 li
118.381 256.39 li
118.634 256.39 li
118.886 256.39 li
119.139 256.39 li
119.391 256.39 li
119.644 256.39 li
119.897 256.39 li
120.149 256.39 li
120.402 256.39 li
120.654 256.39 li
120.907 256.39 li
121.16 256.39 li
121.412 256.39 li
121.665 256.39 li
121.917 256.39 li
122.17 256.39 li
122.423 256.39 li
122.675 256.39 li
122.928 256.39 li
123.18 256.39 li
123.433 256.39 li
123.686 256.39 li
123.938 256.39 li
124.191 256.39 li
124.443 256.39 li
124.696 256.39 li
124.949 256.39 li
125.201 256.39 li
125.454 256.39 li
125.706 256.39 li
125.959 256.39 li
126.212 256.39 li
126.464 256.39 li
126.717 256.39 li
126.969 256.39 li
127.222 256.39 li
127.475 256.39 li
127.727 256.39 li
127.98 256.39 li
128.232 256.39 li
128.485 256.39 li
128.738 256.39 li
128.99 256.39 li
129.243 256.39 li
129.495 256.39 li
129.748 256.39 li
130.001 256.39 li
130.253 256.39 li
130.506 256.39 li
130.758 256.39 li
131.011 256.39 li
131.264 256.39 li
131.516 256.39 li
131.769 256.39 li
132.021 256.39 li
132.274 256.39 li
132.527 256.39 li
132.779 256.39 li
133.032 256.39 li
133.284 256.39 li
133.537 256.39 li
133.79 256.39 li
134.042 256.39 li
134.295 256.39 li
134.547 256.39 li
134.8 256.39 li
135.053 256.39 li
135.305 256.39 li
135.558 256.39 li
135.81 256.39 li
136.063 256.39 li
136.316 256.39 li
136.568 256.39 li
136.821 256.39 li
137.073 256.39 li
137.326 256.39 li
137.579 256.39 li
137.831 256.39 li
138.084 256.39 li
138.336 256.39 li
138.589 256.39 li
138.842 256.39 li
139.094 256.39 li
139.347 256.39 li
139.599 256.39 li
139.852 256.39 li
140.105 256.39 li
140.357 256.39 li
140.61 256.39 li
140.862 256.39 li
141.115 256.39 li
141.368 256.39 li
141.62 256.39 li
141.873 256.39 li
142.125 256.39 li
142.378 256.39 li
142.631 256.39 li
142.883 256.39 li
143.136 256.39 li
143.388 256.39 li
143.641 256.39 li
143.894 256.39 li
144.146 256.39 li
144.399 256.39 li
144.651 256.39 li
144.904 256.39 li
145.157 256.39 li
145.409 256.39 li
145.662 256.39 li
145.914 256.39 li
146.167 256.39 li
146.42 256.39 li
146.672 256.39 li
146.925 256.39 li
147.177 256.39 li
147.43 256.39 li
147.683 256.39 li
147.935 256.39 li
148.188 256.39 li
148.44 256.39 li
148.693 256.39 li
148.946 256.39 li
149.198 256.39 li
149.451 256.39 li
149.703 256.39 li
149.956 256.39 li
150.209 256.39 li
150.461 256.39 li
150.714 256.39 li
150.966 256.39 li
151.219 256.39 li
151.472 256.39 li
151.724 256.39 li
151.977 256.39 li
152.229 256.39 li
152.482 256.39 li
152.735 256.39 li
152.987 256.39 li
153.24 256.39 li
153.492 256.39 li
153.745 256.39 li
153.998 256.39 li
154.25 256.39 li
154.503 256.39 li
154.755 256.39 li
155.008 256.39 li
155.261 256.39 li
155.513 256.39 li
155.766 256.39 li
156.018 256.39 li
156.271 256.39 li
156.524 256.39 li
156.776 256.39 li
157.029 256.39 li
157.281 256.39 li
157.534 256.39 li
157.787 256.39 li
158.039 256.39 li
158.292 256.39 li
158.544 256.39 li
158.797 256.39 li
159.05 256.39 li
159.302 256.39 li
159.555 256.39 li
159.807 256.39 li
160.06 256.39 li
160.313 256.39 li
160.565 256.39 li
160.818 256.39 li
161.07 256.39 li
161.323 256.39 li
161.576 256.39 li
161.828 256.39 li
162.081 256.39 li
162.333 256.39 li
162.586 256.39 li
162.839 256.39 li
163.091 256.39 li
163.344 256.39 li
163.596 256.39 li
163.849 256.39 li
164.102 256.39 li
164.354 256.39 li
164.607 256.39 li
164.859 256.39 li
165.112 256.39 li
165.365 256.39 li
165.617 256.39 li
165.87 256.39 li
166.122 256.39 li
166.375 256.39 li
166.628 256.39 li
166.88 256.39 li
167.133 256.39 li
167.385 256.39 li
167.638 256.39 li
167.891 256.39 li
168.143 256.39 li
168.396 256.39 li
168.648 256.39 li
168.901 256.39 li
169.154 256.39 li
169.406 256.39 li
169.659 256.39 li
169.911 256.39 li
170.164 256.39 li
170.417 256.39 li
170.669 256.39 li
170.922 256.39 li
171.174 256.39 li
171.427 256.39 li
171.68 256.39 li
171.932 256.39 li
172.185 256.39 li
172.437 256.39 li
172.69 256.39 li
172.943 256.39 li
173.195 256.39 li
173.448 256.39 li
173.7 256.39 li
173.953 256.39 li
174.206 256.39 li
174.458 256.39 li
174.711 256.39 li
174.963 256.39 li
175.216 256.39 li
175.469 256.39 li
175.721 256.39 li
175.974 256.39 li
176.226 256.39 li
176.479 256.39 li
176.732 256.39 li
176.984 256.39 li
177.237 256.39 li
177.489 256.39 li
177.742 256.39 li
177.995 256.39 li
178.247 256.39 li
178.5 256.39 li
178.752 256.39 li
179.005 256.39 li
179.258 256.39 li
179.51 256.39 li
179.763 256.39 li
180.015 256.39 li
180.268 256.39 li
180.521 256.39 li
180.773 256.39 li
181.026 256.39 li
181.278 256.39 li
181.531 256.39 li
181.784 256.39 li
182.036 256.39 li
182.289 256.39 li
182.541 256.39 li
182.794 256.39 li
183.047 256.39 li
183.299 256.39 li
183.552 256.39 li
183.804 256.39 li
184.057 256.39 li
184.31 256.39 li
184.562 256.39 li
184.815 256.39 li
185.067 256.39 li
185.32 256.39 li
185.573 256.39 li
185.825 256.39 li
186.078 256.39 li
186.33 256.39 li
186.583 256.39 li
186.836 256.39 li
187.088 256.39 li
187.341 256.39 li
187.593 256.39 li
187.846 256.39 li
188.099 256.39 li
188.351 256.39 li
188.604 256.39 li
188.856 256.39 li
189.109 256.39 li
189.362 256.39 li
189.614 256.39 li
189.867 256.39 li
190.119 256.39 li
190.372 256.39 li
190.625 256.39 li
190.877 256.39 li
191.13 256.39 li
191.382 256.39 li
191.635 256.39 li
191.888 256.39 li
192.14 256.39 li
192.393 256.39 li
192.645 256.39 li
192.898 256.39 li
193.151 256.39 li
193.403 256.39 li
193.656 256.39 li
193.908 256.39 li
194.161 256.39 li
194.414 256.39 li
194.666 256.39 li
194.919 256.39 li
195.171 256.39 li
195.424 256.39 li
195.677 256.39 li
195.929 256.39 li
196.182 256.39 li
196.434 256.39 li
196.687 256.39 li
196.94 256.39 li
197.192 256.39 li
197.445 256.39 li
197.697 256.39 li
197.95 256.39 li
198.203 256.39 li
198.455 256.39 li
198.708 256.39 li
198.96 256.39 li
199.213 256.39 li
199.466 256.39 li
199.718 256.39 li
199.971 256.39 li
200.223 256.39 li
200.476 256.39 li
200.729 256.39 li
200.981 256.39 li
201.234 256.39 li
201.486 256.39 li
201.739 256.39 li
201.992 256.39 li
202.244 256.39 li
202.497 256.39 li
202.749 256.39 li
203.002 256.39 li
203.255 256.39 li
203.507 256.39 li
203.76 256.39 li
204.012 256.39 li
204.265 256.39 li
204.518 256.39 li
204.77 256.39 li
205.023 256.39 li
205.275 256.39 li
205.528 256.39 li
205.781 256.39 li
206.033 256.39 li
206.286 256.39 li
206.538 256.39 li
206.791 256.39 li
207.044 256.39 li
207.296 256.39 li
207.549 256.39 li
207.801 256.39 li
208.054 256.39 li
208.307 256.39 li
208.559 256.39 li
208.812 256.39 li
209.064 256.39 li
209.317 256.39 li
209.57 256.39 li
209.822 256.39 li
210.075 256.39 li
210.327 256.39 li
210.58 256.39 li
210.833 256.39 li
211.085 256.39 li
211.338 256.39 li
211.59 256.39 li
211.843 256.39 li
212.096 256.39 li
212.348 256.39 li
212.601 256.39 li
212.853 256.39 li
213.106 256.39 li
213.359 256.39 li
213.611 256.39 li
213.864 256.39 li
214.116 256.39 li
214.369 256.39 li
214.622 256.39 li
214.874 256.39 li
215.127 256.39 li
215.379 256.39 li
215.632 256.39 li
215.885 256.39 li
216.137 256.39 li
216.39 256.39 li
216.642 256.39 li
216.895 256.39 li
217.148 256.39 li
217.4 256.39 li
217.653 256.39 li
217.905 256.39 li
218.158 256.39 li
218.411 256.39 li
218.663 256.39 li
218.916 256.39 li
219.168 256.39 li
219.421 256.39 li
219.674 256.39 li
219.926 256.39 li
220.179 256.39 li
220.431 256.39 li
220.684 256.39 li
220.937 256.39 li
221.189 256.39 li
221.442 256.39 li
221.694 256.39 li
221.947 256.39 li
222.2 256.39 li
222.452 256.39 li
222.705 256.39 li
222.957 256.39 li
223.21 256.39 li
223.463 256.39 li
223.715 256.39 li
223.968 256.39 li
224.22 256.39 li
224.473 256.39 li
224.726 256.39 li
224.978 256.39 li
225.231 256.39 li
225.483 256.39 li
225.736 256.39 li
225.989 256.39 li
226.241 256.39 li
226.494 256.39 li
226.746 256.39 li
226.999 256.39 li
227.252 256.39 li
227.504 256.39 li
227.757 256.39 li
228.009 256.39 li
228.262 256.39 li
228.515 256.39 li
228.767 256.39 li
229.02 256.39 li
229.272 256.39 li
229.525 256.39 li
229.778 256.39 li
230.03 256.39 li
230.283 256.39 li
230.535 256.39 li
230.788 256.39 li
231.041 256.39 li
231.293 256.39 li
231.546 256.39 li
231.798 256.39 li
232.051 256.39 li
232.304 256.39 li
232.556 256.39 li
232.809 256.39 li
233.061 256.39 li
233.314 256.39 li
233.567 256.39 li
233.819 256.39 li
234.072 256.39 li
234.324 256.39 li
234.577 256.39 li
234.83 256.39 li
235.082 256.39 li
235.335 256.39 li
235.587 256.39 li
235.84 256.39 li
236.093 256.39 li
236.345 256.39 li
236.598 256.39 li
236.85 256.39 li
237.103 256.39 li
237.356 256.39 li
237.608 256.39 li
237.861 256.39 li
238.113 256.39 li
238.366 256.39 li
238.619 256.39 li
238.871 256.39 li
239.124 256.39 li
239.376 256.39 li
239.629 256.39 li
239.882 256.39 li
240.134 256.39 li
240.387 256.39 li
240.639 256.39 li
240.892 256.39 li
241.145 256.39 li
241.397 256.39 li
241.65 256.39 li
241.902 256.39 li
242.155 256.39 li
242.408 256.39 li
242.66 256.39 li
242.913 256.39 li
243.165 256.39 li
243.418 256.39 li
243.671 256.39 li
243.923 256.39 li
244.176 256.39 li
244.428 256.39 li
244.681 256.39 li
244.934 256.39 li
245.186 256.39 li
245.439 256.39 li
245.691 256.39 li
245.944 256.39 li
246.197 256.39 li
246.449 256.39 li
246.702 256.39 li
246.954 256.39 li
247.207 256.39 li
247.46 256.39 li
247.712 256.39 li
247.965 256.39 li
248.217 256.39 li
248.47 256.39 li
248.723 256.39 li
248.975 256.39 li
249.228 256.39 li
249.48 256.39 li
249.733 256.39 li
249.986 256.39 li
250.238 256.39 li
250.491 256.39 li
250.743 256.39 li
250.996 256.39 li
251.249 256.39 li
251.501 256.39 li
251.754 256.39 li
252.006 256.39 li
252.259 256.39 li
252.512 256.39 li
252.764 256.39 li
253.017 256.39 li
253.269 256.39 li
253.522 256.39 li
253.775 256.39 li
254.027 256.39 li
254.28 256.39 li
254.532 256.39 li
254.785 256.39 li
255.037 256.39 li
255.29 256.39 li
255.543 256.39 li
255.795 256.39 li
256.048 256.39 li
256.3 256.39 li
256.553 256.39 li
256.806 256.39 li
257.058 256.39 li
257.311 256.39 li
257.563 256.39 li
257.816 256.39 li
258.069 256.39 li
258.321 256.39 li
258.574 256.39 li
258.826 256.39 li
259.079 256.39 li
259.332 256.39 li
259.584 256.39 li
259.837 256.39 li
260.089 256.39 li
260.342 256.39 li
260.595 256.39 li
260.847 256.39 li
261.1 256.39 li
261.352 256.39 li
261.605 256.39 li
261.858 256.39 li
262.11 256.39 li
262.363 256.39 li
262.615 256.39 li
262.868 256.39 li
263.121 256.39 li
263.373 256.39 li
263.626 256.39 li
263.878 256.39 li
264.131 256.39 li
264.384 256.39 li
264.636 256.39 li
264.889 256.39 li
265.141 256.39 li
265.394 256.39 li
265.647 256.39 li
265.899 256.39 li
266.152 256.39 li
266.404 256.39 li
266.657 256.39 li
266.91 256.39 li
267.162 256.39 li
267.415 256.39 li
267.667 256.39 li
267.92 256.39 li
268.173 256.39 li
268.425 256.39 li
268.678 256.39 li
268.93 256.39 li
269.183 256.39 li
269.436 256.39 li
269.688 256.39 li
269.941 256.39 li
270.193 256.39 li
270.446 256.39 li
270.699 256.39 li
270.951 256.39 li
271.204 256.39 li
271.456 256.39 li
271.709 256.39 li
271.962 256.39 li
272.214 256.39 li
272.467 256.39 li
272.719 256.39 li
272.972 256.39 li
273.225 256.39 li
273.477 256.39 li
273.73 256.39 li
273.982 256.39 li
274.235 256.39 li
274.488 256.39 li
274.74 256.39 li
274.993 256.39 li
275.245 256.39 li
275.498 256.39 li
275.751 256.39 li
276.003 256.39 li
276.256 256.39 li
276.508 256.39 li
276.761 256.39 li
277.014 256.39 li
277.266 256.39 li
277.519 256.39 li
277.771 256.39 li
278.024 256.39 li
278.277 256.39 li
278.529 256.39 li
278.782 256.39 li
279.034 256.39 li
279.287 256.39 li
279.54 256.39 li
279.792 256.39 li
280.045 256.39 li
280.297 256.39 li
280.55 256.39 li
280.803 256.39 li
281.055 256.39 li
281.308 256.39 li
281.56 256.39 li
281.813 256.39 li
282.066 256.39 li
282.318 256.39 li
282.571 256.39 li
282.823 256.39 li
283.076 256.39 li
283.329 256.39 li
283.581 256.39 li
283.834 256.39 li
284.086 256.39 li
284.339 256.39 li
284.592 256.39 li
284.844 256.39 li
285.097 256.39 li
285.349 256.39 li
285.602 256.39 li
285.855 256.39 li
286.107 256.39 li
286.36 256.39 li
286.612 256.39 li
286.865 256.39 li
287.118 256.39 li
287.37 256.39 li
287.623 256.39 li
287.875 256.39 li
288.128 256.39 li
288.381 256.39 li
288.633 256.39 li
288.886 256.39 li
289.138 256.39 li
289.391 256.39 li
289.644 256.39 li
289.896 256.39 li
290.149 256.39 li
290.401 256.39 li
290.654 256.39 li
290.907 256.39 li
291.159 256.39 li
291.412 256.39 li
291.664 256.39 li
291.917 256.39 li
292.17 256.39 li
292.422 256.39 li
292.675 256.39 li
292.927 256.39 li
293.18 256.39 li
293.433 256.39 li
293.685 256.39 li
293.938 256.39 li
294.19 256.39 li
294.443 256.39 li
294.696 256.39 li
294.948 256.39 li
295.201 256.39 li
295.453 256.39 li
295.706 256.39 li
295.959 256.39 li
296.211 256.39 li
296.464 256.39 li
296.716 256.39 li
296.969 256.39 li
297.222 256.39 li
297.474 256.39 li
297.727 256.39 li
297.979 256.39 li
298.232 256.39 li
298.485 256.39 li
298.737 256.39 li
298.99 256.39 li
299.242 256.39 li
299.495 256.39 li
299.748 256.39 li
300 256.39 li
300.253 256.39 li
300.505 256.39 li
300.758 256.39 li
301.011 256.39 li
301.263 256.39 li
301.516 256.39 li
301.768 256.39 li
302.021 256.39 li
302.274 256.39 li
302.526 256.39 li
302.779 256.39 li
303.031 256.39 li
303.284 256.39 li
303.537 256.39 li
303.789 256.39 li
304.042 256.39 li
304.294 256.39 li
304.547 256.39 li
304.8 256.39 li
305.052 256.39 li
305.305 256.39 li
305.557 256.39 li
305.81 256.39 li
306.063 256.39 li
306.315 256.39 li
306.568 256.39 li
306.82 256.39 li
307.073 256.39 li
307.326 256.39 li
307.578 256.39 li
307.831 256.39 li
308.083 256.39 li
308.336 256.39 li
308.589 256.39 li
308.841 256.39 li
309.094 256.39 li
309.346 256.39 li
309.599 256.39 li
309.852 256.39 li
310.104 256.39 li
310.357 256.39 li
310.609 256.39 li
310.862 256.39 li
311.115 256.39 li
311.367 256.39 li
311.62 256.39 li
311.872 256.39 li
312.125 256.39 li
312.378 256.39 li
312.63 256.39 li
312.883 256.39 li
313.135 256.39 li
313.388 256.39 li
313.641 256.39 li
313.893 256.39 li
314.146 256.39 li
314.398 256.39 li
314.651 256.39 li
314.904 256.39 li
315.156 256.39 li
315.409 256.39 li
315.661 256.39 li
315.914 256.39 li
316.167 256.39 li
316.419 256.39 li
316.672 256.39 li
316.924 256.39 li
317.177 256.39 li
317.43 256.39 li
317.682 256.39 li
317.935 256.39 li
318.187 256.39 li
318.44 256.39 li
318.693 256.39 li
318.945 256.39 li
319.198 256.39 li
319.45 256.39 li
319.703 256.39 li
319.956 256.39 li
320.208 256.39 li
320.461 256.39 li
320.713 256.39 li
320.966 256.39 li
321.219 256.39 li
321.471 256.39 li
321.724 256.39 li
321.976 256.39 li
322.229 256.39 li
322.482 256.39 li
322.734 256.39 li
322.987 256.39 li
323.239 256.39 li
323.492 256.39 li
323.745 256.39 li
323.997 256.39 li
324.25 256.39 li
324.502 256.39 li
324.755 256.39 li
325.008 256.39 li
325.26 256.39 li
325.513 256.39 li
325.765 256.39 li
326.018 256.39 li
326.271 256.39 li
326.523 256.39 li
326.776 256.39 li
327.028 256.39 li
327.281 256.39 li
327.534 256.39 li
327.786 256.39 li
328.039 256.39 li
328.291 256.39 li
328.544 256.39 li
328.797 256.39 li
329.049 256.39 li
329.302 256.39 li
329.554 256.39 li
329.807 256.39 li
330.06 256.39 li
330.312 256.39 li
330.565 256.39 li
330.817 256.39 li
331.07 256.39 li
331.323 256.39 li
331.575 256.39 li
331.828 256.39 li
332.08 256.39 li
332.333 256.39 li
332.586 256.39 li
332.838 256.39 li
333.091 256.39 li
333.343 256.39 li
333.596 256.39 li
333.849 256.39 li
334.101 256.39 li
334.354 256.39 li
334.606 256.39 li
334.859 256.39 li
335.112 256.39 li
335.364 256.39 li
335.617 256.39 li
335.869 256.39 li
336.122 256.39 li
336.375 256.39 li
336.627 256.39 li
336.88 256.39 li
337.132 256.39 li
337.385 256.39 li
337.638 256.39 li
337.89 256.39 li
338.143 256.39 li
338.395 256.39 li
338.648 256.39 li
338.901 256.39 li
339.153 256.39 li
339.406 256.39 li
339.658 256.39 li
339.911 256.39 li
340.164 256.39 li
340.416 256.39 li
340.669 256.39 li
340.921 256.39 li
341.174 256.39 li
341.427 256.39 li
341.679 256.39 li
341.932 256.39 li
342.184 256.39 li
342.437 256.39 li
342.69 256.39 li
342.942 256.39 li
343.195 256.39 li
343.447 256.39 li
343.7 256.39 li
343.953 256.39 li
344.205 256.39 li
344.458 256.39 li
344.71 256.39 li
344.963 256.39 li
345.216 256.39 li
345.468 256.39 li
345.721 256.39 li
0 0 0.6 rgb
@
1.5 lw
93.121 256.39 mo
345.721 256.39 li
0 0 0 rgb
@
gsave
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f321047244e000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c7966dd2c6c9800005cf40003f58068656164d35a3c7a00000eb80000
003668686561af0f210900000ef000000024686d747839ad1f4300000f14
000022546c6f63610f66441800003168000022586d61787010ff0b2d0000
53c0000000206e616d6558b85cfc000053e00000054470726570bc836e31
00005924000003cf67646972000000000000000000000000000303880190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d000000000100000000000037422dfa
5f0f3cf500110800000000005f4d8f0000000000cff2eef7f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000089505120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c021a004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d0024054c00980556009804270098059c002505560098
07f0000a0554004505c7009805c7009805560098057e002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06d80041
0556002505db009805360060078d009807a1009806aa001d070900980536
009805c700640800009805b7006a04730056047300480462008703390087
04d9001c04730050063d00170400003304ab008704ab0087046200870498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404910087044e005c063900870657008704e3
001b05c7008703ff00870414002f06390087047700500556009804730050
0427009803390087023900ba01c700870400002305c70050040000480239
001d020300290800002506c3001b07e10098067c008701c7ffdd05560062
0639004e0473001b0556009804620087040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df009604860052048600870723000a0589
0017056d002404860043056d002404860043056d00750486005208d90010
06dd0012054f0043040a003005df00960486008705df0096048600870655
00500486005205df006004120037056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800980600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc730000fc730000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090428005803b7006b
0497007104b0004f0797004a0418006a045a005505d5004c07a9004404bf
004b03e0003b0965004a03f900560419004e06ed004a0420003f04500050
06a3004a03f3004d0633006006b90047064000440419004b0667004503be
003e043d003d03d60052048400440412004a041600460497003903fa0058
0650002d03cd005e0560005604950032045e005503e9003e0462005406c2
0049044500f604d500b10473005e0473002f000000000000006c0000006c
0000006c0000006c000000cc0000011c0000028000000430000005c00000
07500000079400000824000008a80000099800000a0000000a6400000aa0
00000ae000000b2800000c0400000c5000000d6800000ec000000f5c0000
1084000011b000001244000013a8000014d40000152c000015a80000163c
0000168c0000172400001828000019d800001af000001bf800001d180000
1ddc00001e6400001ec80000201800002088000020b80000213c00002230
00002280000023980000244400002540000025ec00002760000028740000
2a0c00002a6800002af800002bb400002d4c00002e4400002f0800002fa0
00002ff800003058000030bc000031540000317c000031a80000333c0000
341000003514000035ec00003780000038180000396800003a0800003a64
00003ad800003bb800003bfc00003cf400003dac00003e9c00003f800000
4068000040f4000042b400004354000044080000453400004690000046f0
0000481c000048bc0000499c000049e000004adc00004b9800004bb00000
4bc800004d9000004da800004dc000004dd800004df000004e0800004e20
00004e3800004e5000004e6800004e800000502c000050440000505c0000
50740000508c000050a4000050bc000050d4000050ec000051040000511c
000051340000514c000051640000517c00005194000051ac000051c40000
51dc00005238000052b00000547400005600000057cc00005858000058cc
000059e400005b8400005ce800005dcc00005dfc00005e6400005f440000
60280000620400006358000063e000006480000065300000665000006750
0000688800006954000069b400006a6400006aec00006c4800006d1c0000
6e3c000070640000720c0000730400007368000073ac0000745c00007598
000076900000771c000077cc00007880000078ec000078ec000079040000
791c0000793400007a6000007c4000007c7800007cb400007d5400007de4
00007e4400007ea400007f1400007ffc000080140000802c0000808c0000
81f800008268000082d80000839c0000844c000084d0000085280000858c
0000862000008848000088600000887800008890000088a8000088c00000
890c0000897c000089fc00008a4800008a6000008a7800008b2000008b38
00008b5000008b6800008b8000008bd000008c1400008c9800008cc40000
8d2000008d5000008e6400008f4800008f900000905c0000909c0000916c
000091fc000092140000922c000092440000925c000092b8000093a80000
95100000952800009540000095f8000096c4000096ec000097a4000097f0
000098a80000999c00009a9400009ba400009d7000009e2800009f9c0000
a1140000a16c0000a39c0000a5d80000a5f00000a6080000a6200000a638
0000a7000000a7180000a7300000a7c80000a98c0000a9a40000a9bc0000
a9d40000a9ec0000aa040000aa1c0000aa340000ab6c0000ab840000ab9c
0000ac480000ad500000ad680000ad800000ad980000adb00000adc80000
ade00000adf80000ae100000ae280000ae400000ae580000ae700000ae88
0000aea00000aeb80000afa00000afb80000b0580000b0700000b0b40000
b0cc0000b1c40000b1dc0000b2640000b27c0000b2940000b2ac0000b2c4
0000b2dc0000b2f40000b30c0000b3240000b33c0000b3cc0000b42c0000
b4440000b45c0000b4740000b48c0000b4a40000b4bc0000b4d40000b4ec
0000b5040000b51c0000b5340000b6b00000b8180000b8300000b8480000
b8600000b8780000b8900000b8a80000b8c00000b8d80000b8f00000b908
0000b9200000b9380000b9500000b9680000b9800000ba980000bab00000
bac80000bae00000baf80000bb100000bb280000bbf40000bcdc0000bcf4
0000bd0c0000bd240000bd3c0000bd540000bd6c0000bd840000bd9c0000
bdb40000bdcc0000bde40000bdfc0000be140000be2c0000bfc00000c154
0000c1e80000c2e40000c44c0000c4780000c4a80000c4ec0000c5700000
c59c0000c5fc0000c62c0000c68c0000c79c0000c7e40000c8240000c878
0000c9540000ca200000ca4c0000cb380000cb500000cb6c0000cb840000
cb9c0000cbb40000cbcc0000cbe40000cbfc0000cc140000cc2c0000cca8
0000cd200000cd4c0000cd9c0000ce040000ce7c0000cf340000cfec0000
d0b00000d2340000d2f40000d3200000d3800000d3980000d3b00000d450
0000d5140000d55c0000d5b40000d6a80000d8380000d8740000d9440000
d9a40000da500000dbc40000dc5c0000dd240000dd900000de200000dedc
0000df640000e0b00000e1180000e1fc0000e2f00000e3380000e3a80000
e5500000e5bc0000e6400000e6e80000e75c0000e8080000e8fc0000e9f8
0000eae40000ebcc0000ecf40000ee6c0000eff80000f1c80000f3340000
f3700000f4340000f5200000f5c80000f7040000f79c0000f8640000f8cc
0000f9580000fa140000fa9c0000fbd80000fc3c0000fd880000fe7c0000
fec40000ff3000010178000101e000010264000103040001037800010424
0001051800010614000106fc000107c0000108dc00010a1c00010abc0001
0bc800010c2000010c7c00010cac00010cfc00010d8c00010e5c00010f18
00010f9800011018000111640001129c000113c0000114e4000115680001
16b8000117700001185c000118e80001197000011a5800011b9c00011c98
00011d4800011df400011e6800011edc00011f4800011fb4000120080001
205c000120b0000121040001215000012184000121ec000122600001228c
000122b8000122e4000123140001237400012484000124b4000124f40001
253800012594000125f400012678000126a4000126d00001275400012780
000127ac000127ec00012908000129480001299c000129fc00012a8c0001
2af400012af400012b9400012c2c00012cfc00012d6c00012e6800012ed8
00012f480001304400013190000131e40001326c0001330c000133b00001
33f800013470000134f4000135d8000136bc0001379c0001380c00013918
00013a2000013af800013c1800013d7c00013ddc00013f48000140440001
409c00014154000142240001438c000143bc000144200001447c0001452c
000145e80001463c0001466c0001469c00014a7c00014ae000014b100001
4bb800014c1400014c4000014cc400014d0c00014d5000014db000014e0c
00014e3800014e6800014e9400014ec000014ef400014ef400014ef40001
4ef400014ef400014ef400014ef400014ef400014ef400014ef400014ef4
00014ef400014ef400014ef400014ef400014ef400014ef400014ef40001
4ef400014ef400014ef400014ef400014ef400014ef400014ef400014f30
00014f94000150bc000150e8000150fc00015154000151b4000151cc0001
5224000152dc0001545c000155c800015620000156bc00015758000157b0
0001592c000159d400015a2000015b3400015bd800015c9000015d8c0001
5e2400015f0000015f740001601c00016060000160c0000161000001612c
00016194000161dc0001622400016270000162bc000163300001635c0001
63a0000163cc000163f80001641000016420000164380001644800016460
00016470000164880001649c000164b4000164c4000164dc000164ec0001
65040001651c0001652c0001653c00016554000165740001658c0001659c
000165b4000165d4000165fc00016614000166240001663c0001665c0001
666c0001667c0001668c0001669c000166ac000166c4000166e4000166fc
0001670c00016724000167440001676c0001678400016794000167ac0001
67cc000167dc000167ec000167fc0001680c0001682c0001684c0001686c
000168840001689c000168b4000168cc000168e4000168fc000169140001
692c000169440001695c000169740001698c000169a4000169bc000169dc
000169fc00016a1c00016a3c00016a5c00016a7c00016a9c00016abc0001
6adc00016afc00016b1c00016b3c00016b5400016b6c00016b8400016b9c
00016bb400016bcc00016be400016bfc00016c1c00016c3c00016c540001
6c6c00016c8400016c9c00016cb400016ccc00016ce400016d0400016d24
00016d3c00016d5400016d6c00016d8400016d9c00016db400016dcc0001
6de400016dfc00016e1400016e2c00016e4400016e5c00016e7400016e8c
00016ea400016ebc00016ed400016eec00016f0400016f1c00016f340001
6f4c00016f6400016f7c00016f9400016fac00016fc400016fdc00016ff4
0001700c000170240001703c000170540001707400017094000170b40001
70d4000170ec0001710400017124000171440001715c0001717400017184
00017194000171ac000171c4000171dc000171f40001720c000172240001
723c000172540001726c000172840001729c000172b4000172cc000172e4
000172fc000173140001732c000173440001735c00017374000173940001
73b4000173d4000173f40001740c000174240001743c0001745400017474
00017494000174ac000174c4000174dc000174f40001750c000175240001
753c000175540001756c000175840001759c000175b4000175cc000175e4
000175fc0001761400017634000176540001766c000176840001769c0001
76b4000176cc000176e4000176fc0001771400017734000177540001776c
000177840001779c000177b4000177cc000177e4000177fc000178140001
782c000178440001785c000178740001788c000178a4000178bc000178d4
000178ec0001790400017924000179440001796400017984000179a40001
79c4000179e400017a0400017a1c00017a3400017a4c00017a6400017a7c
00017a9400017aac00017ac400017ae400017b0400017b1c00017b340001
7b4c00017b6400017b7c00017b9400017bb400017bd400017bf400017c14
00017c3400017c5400017c6c00017c8400017c9c00017cb400017ccc0001
7ce400017cfc00017d1400017d2c00017d4400017d5c00017d7400017d8c
00017da400017dc400017de400017e0400017e2400017e3c00017e540001
7e6c00017e8400017e9c00017eb400017ecc00017ee400017efc00017f14
00017f2c00017f4400017f5c00017f7400017f8c00017fa400017fbc0001
7fd400017fec000180040001801c000180340001804c000180640001807c
00018094000180ac000180c4000180dc000180f40001810c000181240001
813c000181540001816c0001818c000181ac000181cc000181ec0001820c
0001822c0001824c0001826c0001828c000182ac000182cc000182ec0001
830c0001832c0001834c0001836c0001838c000183ac000183cc000183ec
000184040001841c000184340001844c000184640001847c0001849c0001
84bc000184dc000184fc0001851c0001853c0001855c0001857c0001859c
000185bc000185d4000185ec000186040001861c000186340001864c0001
86640001867c0001869c000186bc000186dc000186fc0001871c0001873c
0001875c0001877c0001879c000187bc000187d4000187ec000188040001
881c000188340001884c000188640001887c00018894000188ac000188c4
000188dc000188f40001890c000189240001893c000189540001896c0001
89840001899c000189b4000189cc000189e4000189fc00018a1400018a2c
00018a4400018a5c00018a7400018a8c00018aa400018abc00018adc0001
8afc00018b1c00018b3c00018b5400018b6c00018b8400018b9c00018bb4
00018bcc00018be400018bfc00018c1400018c2c00018c4400018c5c0001
8c7400018c8c00018ca400018cbc00018cd400018cec00018d0400018d1c
00018d3400018d4c00018d6400018d7c00018d9400018dac00018dc40001
8ddc00018df400018e0c00018e2400018e3c00018e5400018e6c00018e7c
00018e8c00018ea400018ebc00018ed400018eec00018fa4000190040001
9184000191c0000191fc0001925c000192a400019324000194a4000194d4
0001953c0001958400019638000196bc0001971000019878000198dc0001
99b000019a0800019a5000019ab000019c4000019cac00019dec00019f54
00019fdc0001a0740001a1bc0001a3840001a41c0001a5940001a6e80001
a8000001a8a00001a99c0001aa0c0001aa780001aaf40001abf40001ac38
0001adb00001aef00001b0140001b12c0001b27c0001b2fc0001b37c0001
b5080001b5d40001b6880001b8200001b8d00001b9880001b9d40001ba34
0001ba980001baf40001bb500001bbac0001bbd80001bc080001bc640001
bcfc0001bda00001be100001be800001beac0001bed80001bf480001bfd4
0001c0440001c0d80001c2680001c3d40001c5340001c5900001c5ec0001
c6040001c61c0001c6340001c6540001c6740001c6940001c6b40001c6d4
0001c6ec0001c7040001c7240001c7440001c7640001c7840001c7a40001
c7c40001c7dc0001c7f40001c80c0001c82c0001c84c0001c86c0001c88c
0001c8a40001c8bc0001c8dc0001c8fc0001c9140001c92c0001c9440001
ca000001caf00001cb980001cc2c0001cd380001cd740001ce500001cf4c
0001cfc00001d0380001d1740001d2300001d3200001d3d00001d4640001
d53c0001d5800001d5e40001d6480001d8900001d9380001d99c0001da00
0001da2c0001da580001da700001da880001daa00001dab80001dae40001
db7c0001dc0c0001dc800001dcf40001dd840001de4c0001df940001e0d0
0001e1f40001e3540001e4380001e5500001e5c40001e7200001e7dc0001
e8980001e9d80001eab00001eb680001eca80001ee940001ef940001f104
0001f2500001f2b40001f3140001f3b00001f40c0001f43c0001f4680001
f4980001f4c40001f4f40001f51c0001f5480001f5740001f5d40001f670
0001f6b00001f6f00001f78c0001f8700001f8dc0001f9500001f9cc0001
fa600001fad40001fb4c0001fc300001fd140001fd540001fd940001fdd8
0001fe1c0001fe480001feb00001ff180001ff84000200e8000201500002
0180000201cc00020268000202ac000202f0000203300002037000020480
00020564000205b0000205f00002063000020680000206d0000207300002
07900002080c0002084c000208b0000208fc000209d000020a0c00020a0c
00020a0c00020a0c00020a0c00020a0c00020aa000020bac00020c240002
0c8800020d1000020d2800020dd000020f0c00020fb0000210240002109c
0002109c0002109c0002109c0002109c0002109c0002109c0002124c0002
1374000213f8000214e0000216340002168400021868000219cc00021a34
00021a5c00021a9c00021b5000021bfc00021ca800021dd000021e100002
1ebc00021ff40002207800022160000222b400022304000224e400022648
000226b0000226d800022718000227cc00022878000228dc000229f80002
2a3400022a7000022acc00022b4c00022d4000022e2000022e9800022f70
00022fc8000230a80002324000023280000232f800023310000233200002
34000002352c0002360c0002372c000237b4000238f80002397800023a20
00023ab000023c2c00023cb800023d6800023ec000024014000240680002
40c0000241ec000242040002421c000242340002424c000242640002427c
00024294000242ac000242c4000242dc000242f40002430c000243240002
433c000243540002436c000243840002439c000243b4000243cc000243e4
000243fc000244140002442c000244440002445c000244740002448c0002
44a4000244bc000244d4000244ec000245040002451c000245340002454c
000245640002457c00024594000245ac000245c4000245dc000245f40002
460c000246240002463c000246540002466c000246840002469c000246b4
000246cc000246e4000246fc000247140002472c000247440002475c0002
47740002478c000247a4000247bc000247d4000247ec000248040002481c
000248340002484c000248640002487c00024894000248ac000248c40002
48dc000248f40002490c000249240002493c000249540002496c00024984
0002499c000249b4000249cc000249e4000249fc00024a1400024a2c0002
4a4400024a5c00024a7400024a8c00024aa400024abc00024ad400024aec
00024b0400024b1c00024b3400024b4c00024b6400024b7c00024b940002
4bac00024bc400024bdc00024bf400024c0c00024c2400024c3c00024c54
00024c6c00024c8400024c9c00024cbc00024cdc00024cfc00024d1c0002
4d3c00024d5c00024d7c00024d9c00024dbc00024ddc00024dfc00024e1c
00024e3c00024e5c00024e7c00024e9c00024ebc00024edc00024efc0002
4f1c00024f3c00024f5c00024f7c00024f9c00024fbc00024fdc00024ffc
0002501c0002503c0002505c0002507c0002509c000250bc000250dc0002
50fc0002511c0002513c0002515c0002517c0002519c000251bc000251dc
000251fc0002521c0002523c0002525c0002527c0002529c000252b40002
52cc000252ec00025304000253240002533c0002535c000253740002538c
000253a4000253bc000253d4000253f40002540c0002542c000254440002
54640002547c00025494000254ac000254c4000254dc000254f40002550c
000255240002553c000255540002556c000255840002559c000255b40002
55cc000255e4000255fc000256140002562c000256440002565c00025674
0002568c000256a4000256bc000256d4000256ec00025704000257240002
573c0002575c0002577400025794000257ac000257c4000257dc000257f4
0002580c000258240002583c000258540002586c000258840002589c0002
58b4000258cc000258e4000258fc000259140002592c000259440002595c
000259740002598c00025a5c00025aa800025afc00025bb400025c200002
5c3800025c5800025c7800025c9800025cb800025cd800025cf800025d18
00025d3800025d5800025d7800025d9800025db800025dd800025df80002
5e1800025e3800025e5800025e7800025e9800025eb800025ed800025ef8
00025f1800025f3800025f5800025f7800025f9800025fb800025fd80002
5ff80002601800026038000260580002607800026098000260b8000260d8
000260f80002611800026138000261580002617800026198000261b80002
61d8000261f80002621800026238000262580002627800026298000262b8
000262d0000262e800026300000263180002633000026348000263600002
637800026390000263a8000263c0000263d8000263f00002640800026420
00026438000264500002646800026488000264a0000264b8000264d00002
64e800026500000265180002653000026548000265680002658000026598
000265b0000265c8000265e0000265f80002661000026628000266480002
66600002667800026690000266a8000266c0000266d8000266f000026708
0002672800026740000267580002677000026788000267a0000267b80002
68e000026a0c00026b8c00026be400026c9800026dac00026e6800026ea0
00026f4000026f5800027040000270dc000272d800027508000276e00002
78fc00027bb800027da000027f04000280280002814c0002824800028310
000284500002850400028580000285fc000286d8000287c4000288740002
891800028a0000028b1800028c1400028e7000028f5800028fa400028ff0
000290840002912c000291c400029260000292c80002932c000294000002
94d4000296c400029924000299b400029a3800029ac800029b5800029c88
00029dac00029e1000029e7800029f0800029f9c0002a0300002a0dc0002
a1600002a1f40002a2500002a2ac0002a3040002a35c0002a41c0002a4d4
0002a5800002a61c0002a6e00002a7680002a80c0002a8900002a9280002
a9a80002aaa00002ab900002ad200002aeac0002af400002aff80002b098
0002b1440002b31c0002b4380002b5540002b6dc0002b8100002b95c0002
baac0002bb1c0002bb840002bc280002bcdc0002bdac0002bee00002c02c
0002c0d00002c1780002c1a80002c2480002c2e00002c3280002c39c0002
c4c00002c6000002c67c0002c7240002c7740002c7e00002c8480002c920
0002ca040002cacc0002cba80002ccfc0002cdb00002ce580002ceec0002
cf2c0002cf8c0002cfd40002d0200002d04c0002d0d00002d12c0002d194
0002d1d80002d2940002d3300002d3b00002d40c0002d4a80002d5800002
d6000002d6800002d7200002d7f80002d88c0002d9240002da140002db40
0002dc180002dce80002ddb00002df180002dff80002e0fc0002e2080002
e2d80002e3cc0002e4c40002e5fc0002e7ac0002e89c0002e9a00002ea54
0002eafc0002ebc00002ecc00002ecfc0002ed380002ed740002edac0002
edf80002ee340002ee780002eebc0002ef100002ef640002efbc0002eff8
0002f0540002f0d80002f1900002f2480002f3980002f40c0002f4ec0002
f6480002f7500002f7900002f8c80002fa040002fa400002fafc0002fb34
0002fb6c0002fc240002fce00002fd280002fdf00002ff0c0002ffa40003
003c000300ac000300d800030104000301ac000301d4000302180003025c
000302bc000303040003038400030404000304fc0003054c000305780003
05a400030754000308c40003099400030a6800030b7c00030c2800030c90
00030d0c00030d7c00030e1000030e6c00030ebc00030eec00030f800003
111000031174000311c000031290000313640003143800031514000316fc
000317f0000318f4000319e000031af400031c6c00031c8400031c9c0003
1cb400031d1c00031db800031dfc00031e7400031ed800031f7000032058
0003227000032488000326300003265c00032688000326bc000326f00003
272c00032768000327a4000327e00003281c0003285800032894000328d0
000328fc000329e400032a3000032bb000032c5800032d7000032dd80003
2e8800032fac00033104000332400003338c000334c40003356000033664
0003382c00033ab800033ccc00033e3000033fa4000340580003422c0003
43d8000344300003448c00034530000345ec000346900003474c000347f8
000348b80003496400034a2400034ae400034ba000034c5c00034d180003
4dd400034e9400034f500003500c000350c800035188000351c400035210
0003525c000352a8000352e4000353a4000353f40003549c000354e00003
5608000357dc000358340003597800035ac000035afc00035b3800035b74
00035bb000035c0400035c5400035cc800035d9c00035e7800035e900003
5ea800035f84000360440003610400036288000364000003651c00036724
0003682c00036930000369dc00036a8c00036b8400036c8400036db00003
6e0000036e7000036f480003701000037128000371f80003727800037348
0003747000037518000375bc0003769000037760000377a4000379640003
7a0000037b8800037c5c00037dac00037ec000037f94000380a8000381cc
000382a80003845c000385c000038690000386e000038754000387f80003
883c000389fc00038a9800038bbc00038c8c00038de400038e8400038ed4
00038f500003910000039258000393ec00039580000396d8000398880003
998800039a6000039bc400039c2000039cd000039d2c00039dd400039e34
00039ee000039f3c00039fe80003a1580003a1c00003a2e40003a4f80003
a5680003a6980003a6e00003a7cc0003a9640003a9ec0003aad80003ac30
0003ac840003ae700003afdc0003b0200003b05c0003b0a00003b1740003
b2f00003b4c40003b6140003b8640003b9300003bab80003bd240003bee0
0003bfe80003c1640003c3a80003c4fc0003c6a00003c8480003c9d00003
cb400003ccc00003cda00003d0b40003d2ac0003d52c0003d6080003d7c0
0003d8b00003da780003dbe40003ddb80003ded00003e08c0003e2640003
e3d00003e6b00003e8ec0003eb3c0003ecd00003ee100003efdc0003f178
0003f3880003f40c0003f45c0003f54c0003f58000010000089500920009
006b0007000200100010005d000007e80a1d000400010000002701da0001
000000000000005000000001000000000001000900500001000000000002
000700590001000000000003001f006000010000000000040009007f0001
000000000005000800880001000000000006000900900001000000000007
003200990001000000000012000900cb0001000000000100000900d40001
000000000101001000dd0001000000000102000e00ed0001000000000103
001400fb00010000000001040012010f0001000000000105000901210001
000000010007002f012a0001000000020007003c01590001000000030007
003001950001000000040007003a01c50001000000050007003601ff0001
000000060007003002350001000000070007003c02650003000104040002
000602a10003000104060002000e02a70003000104070002000c02b50003
000104090002000e02c100030001040b0002001002cf00030001040c0002
000c02df0003000104100002001002eb0003000104110002000a02fb0003
0001041200020006030500030001041300020010030b0003000104140002
000c031b0003000104160002000c03270003000104190002000e03330003
0001041d0002000c034100030001080400020006034d000300010c010002
00080353000300010c0a0002000c035ba920313939302d32303036204170
706c6520436f6d707574657220496e632e20a92031393831204c696e6f74
79706520414720a920313939302d3931205479706520536f6c7574696f6e
7320496e632e48656c766574696361526567756c617248656c7665746963
613b2031302e30643165313b20323031342d30372d323148656c76657469
636131302e306431653148656c76657469636148656c7665746963612069
73206120726567697374657265642074726164656d61726b206f66204c69
6e6f7479706520414748656c7665746963614c6967617475726573436f6d
6d6f6e204c69676174757265734e756d6265722053706163696e6750726f
706f7274696f6e616c204e756d626572734d6f6e6f737061636564204e75
6d626572734e6f204368616e676548656c7665746963612065737420756e
65206d617271756520648e706f738e65206465204c696e6f747970652041
4748656c766574696361206973742065696e2065696e676574726167656e
657320576172656e7a65696368656e20646572204c696e6f747970652041
4748656c766574696361208f20756e206d61726368696f20726567697374
7261746f206469204c696e6f7479706520414748656c7665746963612069
732065656e20676572656769737472656572642068616e64656c736d6572
6b2076616e204c696e6f7479706520414748656c766574696361208a7220
65747420726567697374726572617420766172756d8a726b6520669a7220
4c696e6f7479706520414748656c76657469636120657320756e61206d61
7263612072656769737472616461206465204c696e6f7479706520414748
656c76657469636120657220657420726567697374726572657420766172
656dbe726b652074696c68bf72656e6465204c696e6f747970652041476a
196e969ad4004f007200640069006e00e60072004e006f0072006d006100
6c0052006500670075006c00610072004e006f0072006d00610061006c00
69004e006f0072006d0061006c005200650067006f006c00610072006530
ec30ae30e530e930fcc77cbc18ccb40052006500670075006c0069006500
72004e006f0072006d0061006c004e006f0072006d0061006c041e043104
4b0447043d044b0439004e006f0072006d0061006c5e3889c44f53063906
27062f064a004e006f0072006d0061006c000000b800532bb800492bb800
3f2bb800352bb8002b2b4118008001a6009001a600a001a600030069018b
0079018b0089018b0099018b00040089018b0099018b00a9018b00b9018b
b2040840ba0179001a014a400b041f5414191f180a0b1fd2b80106b49e1f
d918e3bb0119000d00e10119b20d0009410a01a0019f0064001f01a50025
017a00480028019ab3296c1f60410a01a9007001a9008001a90003008001
a9000101a9b21e321fbe012c00250401001f0126001e0401b61fe7312d1f
e531b80201b21fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671f
be1d671fab27b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f92
1db80101b21f911db80101b21f751db80201b61f6d29961f6431b8019ab2
1f4c96b802abb21f391db80156400b1f3638211f351de41f2f27b8080140
0b1f2d1d4c1f2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a
1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1fba019b002501
7ab349293896b8017bb348283125b8017a403648289629482725294c1f25
2946272729482756c80784075b07410732072b072807260721071b071408
120810080e080c080a08080807b801acb23f1f06bb01ab003f001f01abb3
08060805b801aeb23f1f04bb01ad003f001f01adb70804080208000814b8
ffe0b40000010014b801abb41000000100b801abb606100000010006b801
adb300000100b801ad401f04000001000410000001001002000001000200
000001000002010802004a00b0018db806008516763f183f123e11394644
3e113946443e113946443e113946443e113946443e11394660443e113946
60443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b
2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a664565234560
23456560234560b08b766818b080622020b16a704565234520b003266062
636820b003266165b070236544b06a234420b176664565234520b0032660
62636820b003266165b066236544b0762344b10066455458b166406544b2
7640764523614459b36242725d456523456023456560234560b089766818
b080622020b172424565234520b003266062636820b003266165b0422365
44b072234420b1625d4565234520b003266062636820b003266165b05d23
6544b0622344b1005d455458b15d406544b262406245236144592b2b2b2b
456953427374b8019a2045694b20b02853b049515a58b020615944b801a6
20456944750000>
[16257 16277 16153 16221 16373 16377 16265 16181 16381 16269 16333 16361 16205
16201 16177 15441 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Helvetica AddT42Char 
1 1940 11 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>Helvetica AddT42Char 
1 2084 12 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>Helvetica AddT42Char 
1 7880 42 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>Helvetica AddT42Char 
1 11000 57 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>Helvetica AddT42Char 
1 13804 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/G 42 def
/V 57 def
/e 72 def
end
Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 71 /G put
dup 86 /V put
dup 101 /e put
pop
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica /Helvetica findfont ct_VMDictPut/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 29{/.notdef}rp /G 14{/.notdef}rp /V 14{/.notdef}rp /e 154{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf207.214 297.007 mo( \(GeV\))[6.5954 7.90009 18.4577 13.1908 15.824 0 ]xshgrestore
gsave
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 9112 49 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/N 49 def
end
Helvetica /Encoding get
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 29{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 154{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [15.8163 0 0 -15.8163 0 0 ]msf185.096 304.906 mo(NN)[11.4191 0 ]xshgrestore
gsave
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
2 372 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/s 86 def
end
Helvetica /Encoding get
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 29{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf174.037 297.007 mo(s)shgrestore
93.121 251.54 mo
93.121 256.39 li
@
111.164 253.965 mo
111.164 256.39 li
@
129.207 253.965 mo
129.207 256.39 li
@
147.25 253.965 mo
147.25 256.39 li
@
165.292 251.54 mo
165.292 256.39 li
@
183.335 253.965 mo
183.335 256.39 li
@
201.378 253.965 mo
201.378 256.39 li
@
219.421 253.965 mo
219.421 256.39 li
@
237.464 251.54 mo
237.464 256.39 li
@
255.507 253.965 mo
255.507 256.39 li
@
273.549 253.965 mo
273.549 256.39 li
@
291.592 253.965 mo
291.592 256.39 li
@
309.635 251.54 mo
309.635 256.39 li
@
309.635 251.54 mo
309.635 256.39 li
@
327.678 253.965 mo
327.678 256.39 li
@
gsave
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2856 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/zero 19 def
end
Helvetica /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero 22{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf86.3544 277.259 mo(0)shgrestore
gsave
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3152 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/two 21 def
end
Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef /two 20{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf151.919 277.259 mo(20)[13.1908 0 ]xshgrestore
gsave
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3776 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/four 23 def
end
Helvetica /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef /two /.notdef /four 18{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf224.593 277.259 mo(40)[13.1908 0 ]xshgrestore
gsave
20 256.39 mo
352.368 256.39 li
352.368 43.66 li
20 43.66 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 4228 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/six 25 def
end
Helvetica /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 16{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf296.477 277.259 mo(60)[13.1908 0 ]xshgrestore
93.121 43.66 mo
345.721 43.66 li
@
93.121 48.51 mo
93.121 43.66 li
@
111.164 46.085 mo
111.164 43.66 li
@
129.207 46.085 mo
129.207 43.66 li
@
147.25 46.085 mo
147.25 43.66 li
@
165.292 48.51 mo
165.292 43.66 li
@
183.335 46.085 mo
183.335 43.66 li
@
201.378 46.085 mo
201.378 43.66 li
@
219.421 46.085 mo
219.421 43.66 li
@
237.464 48.51 mo
237.464 43.66 li
@
255.507 46.085 mo
255.507 43.66 li
@
273.549 46.085 mo
273.549 43.66 li
@
291.592 46.085 mo
291.592 43.66 li
@
309.635 48.51 mo
309.635 43.66 li
@
309.635 48.51 mo
309.635 43.66 li
@
327.678 46.085 mo
327.678 43.66 li
@
93.121 256.39 mo
93.121 43.66 li
@
103.092 201.77 mo
93.121 201.77 li
@
98.1065 187.396 mo
93.121 187.396 li
@
98.1065 173.023 mo
93.121 173.023 li
@
98.1065 158.649 mo
93.121 158.649 li
@
103.092 144.276 mo
93.121 144.276 li
@
98.1065 129.902 mo
93.121 129.902 li
@
98.1065 115.528 mo
93.121 115.528 li
@
98.1065 101.155 mo
93.121 101.155 li
@
103.092 86.781 mo
93.121 86.781 li
@
103.092 201.77 mo
93.121 201.77 li
@
98.1065 216.144 mo
93.121 216.144 li
@
98.1065 230.517 mo
93.121 230.517 li
@
98.1065 244.891 mo
93.121 244.891 li
@
103.092 86.781 mo
93.121 86.781 li
@
98.1065 72.407 mo
93.121 72.407 li
@
98.1065 58.034 mo
93.121 58.034 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2720 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>Helvetica AddT42Char 
1 4676 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/period 17 def
/eight 27 def
end
Helvetica /Encoding get
dup 46 /period put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 14{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s 140{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf57.1269 210.114 mo(0.4)[13.1908 6.59541 0 ]xsh57.1269 152.449 mo(0.6)[13.1908 6.59541 0 ]xsh57.1269 94.784 mo(0.8)[13.1908 6.59541 0 ]xsh345.721 256.39 mo
345.721 43.66 li
@
335.75 201.77 mo
345.721 201.77 li
@
340.735 187.396 mo
345.721 187.396 li
@
340.735 173.023 mo
345.721 173.023 li
@
340.735 158.649 mo
345.721 158.649 li
@
335.75 144.276 mo
345.721 144.276 li
@
340.735 129.902 mo
345.721 129.902 li
@
340.735 115.528 mo
345.721 115.528 li
@
340.735 101.155 mo
345.721 101.155 li
@
335.75 86.781 mo
345.721 86.781 li
@
335.75 201.77 mo
345.721 201.77 li
@
340.735 216.144 mo
345.721 216.144 li
@
340.735 230.517 mo
345.721 230.517 li
@
340.735 244.891 mo
345.721 244.891 li
@
335.75 86.781 mo
345.721 86.781 li
@
340.735 72.407 mo
345.721 72.407 li
@
340.735 58.034 mo
345.721 58.034 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 1072 8 <00050042ffda06d00592000b000f001b0027003300f04052060c250c0237
0e580c670c960ca70cc60cd70cf60c0868080d0e0e46120f0f0c0e0f1218
0c0d2a301b2421f215240d272d240bf23324050a0f0e3517171a2a2402f2
302408ea12241ef218242419343f52182b4e10f44dedfcedf6edfced4e45
6544e6002f3c4d3fedfcfd2fc4edf4ed011112393911123939872e2b7d10
c43130184379405200322e0a301b002c002a1b011a22181b001020121b01
1626181b00141c121b013206301b0028042a1b012f092d1b012b012d1b01
19231b1b00111f1b1b001725151b01131d151b013107331b002903331b00
002b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b81015d710016151406232226
353436330333012312363534262322061514163312161514062322263534
36330036353426232206151416330604cccc9091cccc91916ffcdf6f3279
79565579795591cccc9190cccc90042b7979555679795602b8cc9090cccc
9090cc02dafa4803687955557978565579022bcd9090cccc9090cdfb2179
55557979555579000000>Helvetica AddT42Char 
1 2456 14 <0001005c0000046f0415000b0037401c037a050220080b7a0a0a0d17171a
067a040920030a7a00190c3f52182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3cf431301335211133112115211123115c01b4ab01b4fe4cab
01b6a801b7fe49a8fe4a01b60000>Helvetica AddT42Char 
1 2560 15 <000100aafed0018000da000e002d401600230e0a64080a1017171a07340a
640008190f6365182b4e10f44d3cfded4e456544e6003f4dedd4ed313017
3637363534262723353315140607aa451c0f01026dd66076d10c552d2a07
0b07daca77b415000000>Helvetica AddT42Char 
1 2660 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>Helvetica AddT42Char 
1 3076 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>Helvetica AddT42Char 
1 6616 36 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>Helvetica AddT42Char 
2 980 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/percent 8 def
/plus 14 def
/comma 15 def
/hyphen 16 def
/one 20 def
/A 36 def
/u 88 def
end
Helvetica /Encoding get
dup 37 /percent put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 49 /one put
dup 65 /A put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V 14{/.notdef}rp /e 13{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf207.214 67.926 mo(Au+Au, 0%-10%)[11.0769 9.23361 9.69859 11.0769 9.2336 4.61679 4.61679 9.23361 14.7637 5.53009 9.23358 9.23361 0 ]xsh134.62 178.531 mo
134.62 170.238 li
0.999 0.999 0.999 rgb
@
134.62 186.43 mo
134.62 194.723 li
@
145.445 180.583 mo
145.445 179.956 li
@
145.445 188.483 mo
145.445 189.11 li
@
129.927 182.481 mo
129.927 176.224 139.312 176.224 139.312 182.481 cv
139.312 188.737 129.927 188.737 129.927 182.481 cv
cp
140.753 184.533 mo
140.753 178.277 150.137 178.277 150.137 184.533 cv
150.137 190.789 140.753 190.789 140.753 184.533 cv
cp
159.157 181.063 mo
159.157 174.807 168.541 174.807 168.541 181.063 cv
168.541 187.32 159.157 187.32 159.157 181.063 cv
cp
185.86 173.009 mo
185.86 166.753 195.245 166.753 195.245 173.009 cv
195.245 179.265 185.86 179.265 185.86 173.009 cv
cp
229.163 168.498 mo
229.163 162.241 238.547 162.241 238.547 168.498 cv
238.547 174.754 229.163 174.754 229.163 168.498 cv
cp
313.604 159.091 mo
313.604 152.834 322.988 152.834 322.988 159.091 cv
322.988 165.347 313.604 165.347 313.604 159.091 cv
cp
0 0 0 rgb
f
134.62 179.321 mo
134.62 170.238 li
0.999 0.999 0.999 rgb
@
134.62 185.64 mo
134.62 194.723 li
@
145.445 181.373 mo
145.445 179.956 li
@
145.445 187.693 mo
145.445 189.11 li
@
131.144 182.481 mo
131.144 177.846 138.095 177.846 138.095 182.481 cv
138.095 187.115 131.144 187.115 131.144 182.481 cv
cp
141.97 184.533 mo
141.97 179.899 148.921 179.899 148.921 184.533 cv
148.921 189.167 141.97 189.167 141.97 184.533 cv
cp
160.373 181.063 mo
160.373 176.429 167.325 176.429 167.325 181.063 cv
167.325 185.698 160.373 185.698 160.373 181.063 cv
cp
187.077 173.009 mo
187.077 168.375 194.028 168.375 194.028 173.009 cv
194.028 177.643 187.077 177.643 187.077 173.009 cv
cp
230.379 168.498 mo
230.379 163.863 237.331 163.863 237.331 168.498 cv
237.331 173.132 230.379 173.132 230.379 168.498 cv
cp
314.82 159.091 mo
314.82 154.456 321.771 154.456 321.771 159.091 cv
321.771 163.725 314.82 163.725 314.82 159.091 cv
cp
f
134.62 179.321 mo
134.62 170.238 li
0 0 0 rgb
@
134.62 185.64 mo
134.62 194.723 li
@
145.445 181.373 mo
145.445 179.956 li
@
145.445 187.693 mo
145.445 189.11 li
@
131.144 182.481 mo
131.144 177.846 138.095 177.846 138.095 182.481 cv
138.095 187.115 131.144 187.115 131.144 182.481 cv
cp
141.97 184.533 mo
141.97 179.899 148.921 179.899 148.921 184.533 cv
148.921 189.167 141.97 189.167 141.97 184.533 cv
cp
160.373 181.063 mo
160.373 176.429 167.325 176.429 167.325 181.063 cv
167.325 185.698 160.373 185.698 160.373 181.063 cv
cp
187.077 173.009 mo
187.077 168.375 194.028 168.375 194.028 173.009 cv
194.028 177.643 187.077 177.643 187.077 173.009 cv
cp
230.379 168.498 mo
230.379 163.863 237.331 163.863 237.331 168.498 cv
237.331 173.132 230.379 173.132 230.379 168.498 cv
cp
314.82 159.091 mo
314.82 154.456 321.771 154.456 321.771 159.091 cv
321.771 163.725 314.82 163.725 314.82 159.091 cv
cp
0.8 0.8 0.8 rgb
f
134.62 99.187 mo
134.62 87.703 li
0.999 0.999 0.999 rgb
@
134.62 107.086 mo
134.62 118.57 li
@
145.445 76.754 mo
145.445 68.182 li
@
145.445 84.653 mo
145.445 93.225 li
@
163.849 110.891 mo
163.849 108.846 li
@
163.849 118.79 mo
163.849 120.835 li
@
129.927 103.136 mo
129.927 96.88 139.312 96.88 139.312 103.136 cv
139.312 109.393 129.927 109.393 129.927 103.136 cv
cp
140.753 80.704 mo
140.753 74.447 150.137 74.447 150.137 80.704 cv
150.137 86.96 140.753 86.96 140.753 80.704 cv
cp
159.157 114.841 mo
159.157 108.585 168.541 108.585 168.541 114.841 cv
168.541 121.097 159.157 121.097 159.157 114.841 cv
cp
185.86 129.352 mo
185.86 123.096 195.245 123.096 195.245 129.352 cv
195.245 135.609 185.86 135.609 185.86 129.352 cv
cp
229.163 132.64 mo
229.163 126.384 238.547 126.384 238.547 132.64 cv
238.547 138.897 229.163 138.897 229.163 132.64 cv
cp
313.604 144.516 mo
313.604 138.26 322.988 138.26 322.988 144.516 cv
322.988 150.773 313.604 150.773 313.604 144.516 cv
cp
0 0 0 rgb
f
134.62 99.977 mo
134.62 87.703 li
0.999 0.999 0.999 rgb
@
134.62 106.296 mo
134.62 118.57 li
@
145.445 77.544 mo
145.445 68.182 li
@
145.445 83.863 mo
145.445 93.225 li
@
163.849 111.681 mo
163.849 108.846 li
@
163.849 118 mo
163.849 120.835 li
@
190.552 126.193 mo
190.552 125.772 li
@
190.552 132.512 mo
190.552 132.933 li
@
131.144 103.136 mo
131.144 98.502 138.095 98.502 138.095 103.136 cv
138.095 107.771 131.144 107.771 131.144 103.136 cv
cp
141.97 80.704 mo
141.97 76.069 148.921 76.069 148.921 80.704 cv
148.921 85.338 141.97 85.338 141.97 80.704 cv
cp
160.373 114.841 mo
160.373 110.206 167.325 110.206 167.325 114.841 cv
167.325 119.475 160.373 119.475 160.373 114.841 cv
cp
187.077 129.352 mo
187.077 124.718 194.028 124.718 194.028 129.352 cv
194.028 133.987 187.077 133.987 187.077 129.352 cv
cp
230.379 132.64 mo
230.379 128.006 237.331 128.006 237.331 132.64 cv
237.331 137.275 230.379 137.275 230.379 132.64 cv
cp
314.82 144.516 mo
314.82 139.882 321.771 139.882 321.771 144.516 cv
321.771 149.151 314.82 149.151 314.82 144.516 cv
cp
f
134.62 99.977 mo
134.62 87.703 li
0 0 0 rgb
@
134.62 106.296 mo
134.62 118.57 li
@
145.445 77.544 mo
145.445 68.182 li
@
145.445 83.863 mo
145.445 93.225 li
@
163.849 111.681 mo
163.849 108.846 li
@
163.849 118 mo
163.849 120.835 li
@
190.552 126.193 mo
190.552 125.772 li
@
190.552 132.512 mo
190.552 132.933 li
@
0.75 lw
131.144 103.136 mo
131.144 98.502 138.095 98.502 138.095 103.136 cv
138.095 107.771 131.144 107.771 131.144 103.136 cv
cp
141.97 80.704 mo
141.97 76.069 148.921 76.069 148.921 80.704 cv
148.921 85.338 141.97 85.338 141.97 80.704 cv
cp
160.373 114.841 mo
160.373 110.206 167.325 110.206 167.325 114.841 cv
167.325 119.475 160.373 119.475 160.373 114.841 cv
cp
187.077 129.352 mo
187.077 124.718 194.028 124.718 194.028 129.352 cv
194.028 133.987 187.077 133.987 187.077 129.352 cv
cp
230.379 132.64 mo
230.379 128.006 237.331 128.006 237.331 132.64 cv
237.331 137.275 230.379 137.275 230.379 132.64 cv
cp
314.82 144.516 mo
314.82 139.882 321.771 139.882 321.771 144.516 cv
321.771 149.151 314.82 149.151 314.82 144.516 cv
cp
1 0 0 rgb
@
1.5 lw
134.62 134.62 mo
135.899 135.585 li
137.335 136.594 li
138.565 137.396 li
139.877 138.189 li
141.19 138.92 li
142.619 139.646 li
143.873 140.223 li
145.2 140.774 li
145.445 140.869 li
146.455 141.223 li
147.479 141.519 li
148.539 141.764 li
149.667 141.964 li
150.902 142.121 li
152.285 142.231 li
153.872 142.289 li
155.54 142.294 li
158.823 142.224 li
161.254 142.192 li
162.837 142.219 li
163.849 142.267 li
172.057 142.851 li
176.739 143.173 li
180.121 143.354 li
183.438 143.464 li
185.93 143.49 li
188.149 143.462 li
190.552 143.37 li
192.815 143.213 li
195.059 142.987 li
197.327 142.693 li
199.674 142.326 li
202.182 141.873 li
204.968 141.305 li
208.173 140.584 li
212.145 139.617 li
218.863 137.892 li
223.57 136.696 li
226.974 135.878 li
229.692 135.269 li
232.357 134.724 li
233.855 134.443 li
240.712 133.235 li
247.669 132.066 li
254.73 130.939 li
261.859 129.861 li
268.992 128.843 li
276.546 127.83 li
282.974 127.022 li
290.169 126.175 li
297.316 125.395 li
304.664 124.656 li
311.482 124.027 li
318.296 123.453 li
0.2 0.2 0.2 rgb
@
134.62 105.394 mo
135.247 103.953 li
135.889 102.578 li
136.551 101.261 li
137.235 100.001 li
137.942 98.796 li
138.672 97.654 li
139.42 96.586 li
140.177 95.605 li
140.964 94.688 li
141.641 93.98 li
142.518 93.17 li
143.305 92.544 li
144.086 92.014 li
144.857 91.581 li
145.445 91.309 li
146 91.124 li
146.562 91.029 li
147.107 91.026 li
147.684 91.113 li
148.276 91.296 li
148.885 91.58 li
149.514 91.969 li
150.165 92.468 li
150.911 93.15 li
151.65 93.931 li
152.455 94.888 li
153.359 96.072 li
154.458 97.632 li
157.267 101.901 li
158.743 104.096 li
159.752 105.5 li
160.602 106.591 li
161.393 107.517 li
162.191 108.346 li
162.844 108.938 li
163.509 109.455 li
163.849 109.683 li
164.981 110.354 li
166.293 111.02 li
167.596 111.571 li
168.912 112.028 li
170.271 112.405 li
171.717 112.712 li
173.309 112.955 li
175.123 113.129 li
177.53 113.235 li
181.008 113.243 li
184.807 113.237 li
186.788 113.3 li
188.452 113.419 li
190.117 113.618 li
190.552 113.685 li
194.843 114.436 li
199.988 115.446 li
210.439 117.672 li
217.683 119.179 li
222.798 120.14 li
0.8 0 0 rgb
@
222.798 120.14 mo
226.583 120.765 li
229.817 121.224 li
233.112 121.608 li
233.855 121.681 li
238.559 122.086 li
243.171 122.395 li
247.714 122.614 li
252.215 122.747 li
256.704 122.798 li
261.208 122.766 li
265.755 122.649 li
270.365 122.445 li
275.043 122.148 li
279.772 121.757 li
284.513 121.273 li
289.693 120.639 li
294.097 120.014 li
298.863 119.247 li
303.598 118.393 li
308.621 117.386 li
313.103 116.399 li
318.296 115.153 li
@
134.62 178.531 mo
134.62 170.238 li
0.999 0.999 0.999 rgb
@
134.62 186.43 mo
134.62 194.723 li
@
145.445 180.583 mo
145.445 179.956 li
@
145.445 188.483 mo
145.445 189.11 li
@
129.927 182.481 mo
129.927 176.224 139.312 176.224 139.312 182.481 cv
139.312 188.737 129.927 188.737 129.927 182.481 cv
cp
140.753 184.533 mo
140.753 178.277 150.137 178.277 150.137 184.533 cv
150.137 190.789 140.753 190.789 140.753 184.533 cv
cp
159.157 181.063 mo
159.157 174.807 168.541 174.807 168.541 181.063 cv
168.541 187.32 159.157 187.32 159.157 181.063 cv
cp
185.86 173.009 mo
185.86 166.753 195.245 166.753 195.245 173.009 cv
195.245 179.265 185.86 179.265 185.86 173.009 cv
cp
229.163 168.498 mo
229.163 162.241 238.547 162.241 238.547 168.498 cv
238.547 174.754 229.163 174.754 229.163 168.498 cv
cp
313.604 159.091 mo
313.604 152.834 322.988 152.834 322.988 159.091 cv
322.988 165.347 313.604 165.347 313.604 159.091 cv
cp
0 0 0 rgb
f
134.62 179.321 mo
134.62 170.238 li
0.999 0.999 0.999 rgb
@
134.62 185.64 mo
134.62 194.723 li
@
145.445 181.373 mo
145.445 179.956 li
@
145.445 187.693 mo
145.445 189.11 li
@
131.144 182.481 mo
131.144 177.846 138.095 177.846 138.095 182.481 cv
138.095 187.115 131.144 187.115 131.144 182.481 cv
cp
141.97 184.533 mo
141.97 179.899 148.921 179.899 148.921 184.533 cv
148.921 189.167 141.97 189.167 141.97 184.533 cv
cp
160.373 181.063 mo
160.373 176.429 167.325 176.429 167.325 181.063 cv
167.325 185.698 160.373 185.698 160.373 181.063 cv
cp
187.077 173.009 mo
187.077 168.375 194.028 168.375 194.028 173.009 cv
194.028 177.643 187.077 177.643 187.077 173.009 cv
cp
230.379 168.498 mo
230.379 163.863 237.331 163.863 237.331 168.498 cv
237.331 173.132 230.379 173.132 230.379 168.498 cv
cp
314.82 159.091 mo
314.82 154.456 321.771 154.456 321.771 159.091 cv
321.771 163.725 314.82 163.725 314.82 159.091 cv
cp
f
134.62 179.321 mo
134.62 170.238 li
0 0 0 rgb
@
134.62 185.64 mo
134.62 194.723 li
@
145.445 181.373 mo
145.445 179.956 li
@
145.445 187.693 mo
145.445 189.11 li
@
131.144 182.481 mo
131.144 177.846 138.095 177.846 138.095 182.481 cv
138.095 187.115 131.144 187.115 131.144 182.481 cv
cp
141.97 184.533 mo
141.97 179.899 148.921 179.899 148.921 184.533 cv
148.921 189.167 141.97 189.167 141.97 184.533 cv
cp
160.373 181.063 mo
160.373 176.429 167.325 176.429 167.325 181.063 cv
167.325 185.698 160.373 185.698 160.373 181.063 cv
cp
187.077 173.009 mo
187.077 168.375 194.028 168.375 194.028 173.009 cv
194.028 177.643 187.077 177.643 187.077 173.009 cv
cp
230.379 168.498 mo
230.379 163.863 237.331 163.863 237.331 168.498 cv
237.331 173.132 230.379 173.132 230.379 168.498 cv
cp
314.82 159.091 mo
314.82 154.456 321.771 154.456 321.771 159.091 cv
321.771 163.725 314.82 163.725 314.82 159.091 cv
cp
0.8 0.8 0.8 rgb
f
134.62 99.187 mo
134.62 87.703 li
0.999 0.999 0.999 rgb
@
134.62 107.086 mo
134.62 118.57 li
@
145.445 76.754 mo
145.445 68.182 li
@
145.445 84.653 mo
145.445 93.225 li
@
163.849 110.891 mo
163.849 108.846 li
@
163.849 118.79 mo
163.849 120.835 li
@
129.927 103.136 mo
129.927 96.88 139.312 96.88 139.312 103.136 cv
139.312 109.393 129.927 109.393 129.927 103.136 cv
cp
140.753 80.704 mo
140.753 74.447 150.137 74.447 150.137 80.704 cv
150.137 86.96 140.753 86.96 140.753 80.704 cv
cp
159.157 114.841 mo
159.157 108.585 168.541 108.585 168.541 114.841 cv
168.541 121.097 159.157 121.097 159.157 114.841 cv
cp
185.86 129.352 mo
185.86 123.096 195.245 123.096 195.245 129.352 cv
195.245 135.609 185.86 135.609 185.86 129.352 cv
cp
229.163 132.64 mo
229.163 126.384 238.547 126.384 238.547 132.64 cv
238.547 138.897 229.163 138.897 229.163 132.64 cv
cp
313.604 144.516 mo
313.604 138.26 322.988 138.26 322.988 144.516 cv
322.988 150.773 313.604 150.773 313.604 144.516 cv
cp
0 0 0 rgb
f
134.62 99.977 mo
134.62 87.703 li
0.999 0.999 0.999 rgb
@
134.62 106.296 mo
134.62 118.57 li
@
145.445 77.544 mo
145.445 68.182 li
@
145.445 83.863 mo
145.445 93.225 li
@
163.849 111.681 mo
163.849 108.846 li
@
163.849 118 mo
163.849 120.835 li
@
190.552 126.193 mo
190.552 125.772 li
@
190.552 132.512 mo
190.552 132.933 li
@
131.144 103.136 mo
131.144 98.502 138.095 98.502 138.095 103.136 cv
138.095 107.771 131.144 107.771 131.144 103.136 cv
cp
141.97 80.704 mo
141.97 76.069 148.921 76.069 148.921 80.704 cv
148.921 85.338 141.97 85.338 141.97 80.704 cv
cp
160.373 114.841 mo
160.373 110.206 167.325 110.206 167.325 114.841 cv
167.325 119.475 160.373 119.475 160.373 114.841 cv
cp
187.077 129.352 mo
187.077 124.718 194.028 124.718 194.028 129.352 cv
194.028 133.987 187.077 133.987 187.077 129.352 cv
cp
230.379 132.64 mo
230.379 128.006 237.331 128.006 237.331 132.64 cv
237.331 137.275 230.379 137.275 230.379 132.64 cv
cp
314.82 144.516 mo
314.82 139.882 321.771 139.882 321.771 144.516 cv
321.771 149.151 314.82 149.151 314.82 144.516 cv
cp
f
134.62 99.977 mo
134.62 87.703 li
0 0 0 rgb
@
134.62 106.296 mo
134.62 118.57 li
@
145.445 77.544 mo
145.445 68.182 li
@
145.445 83.863 mo
145.445 93.225 li
@
163.849 111.681 mo
163.849 108.846 li
@
163.849 118 mo
163.849 120.835 li
@
190.552 126.193 mo
190.552 125.772 li
@
190.552 132.512 mo
190.552 132.933 li
@
0.75 lw
131.144 103.136 mo
131.144 98.502 138.095 98.502 138.095 103.136 cv
138.095 107.771 131.144 107.771 131.144 103.136 cv
cp
141.97 80.704 mo
141.97 76.069 148.921 76.069 148.921 80.704 cv
148.921 85.338 141.97 85.338 141.97 80.704 cv
cp
160.373 114.841 mo
160.373 110.206 167.325 110.206 167.325 114.841 cv
167.325 119.475 160.373 119.475 160.373 114.841 cv
cp
187.077 129.352 mo
187.077 124.718 194.028 124.718 194.028 129.352 cv
194.028 133.987 187.077 133.987 187.077 129.352 cv
cp
230.379 132.64 mo
230.379 128.006 237.331 128.006 237.331 132.64 cv
237.331 137.275 230.379 137.275 230.379 132.64 cv
cp
314.82 144.516 mo
314.82 139.882 321.771 139.882 321.771 144.516 cv
321.771 149.151 314.82 149.151 314.82 144.516 cv
cp
1 0 0 rgb
@
1.5 lw
[3 3 ] 0 dsh
134.62 184.159 mo
136.271 184.824 li
137.68 185.323 li
139.489 185.869 li
141.086 186.265 li
142.675 186.579 li
144.226 186.808 li
145.445 186.935 li
146.616 186.995 li
147.84 186.978 li
149.156 186.878 li
150.602 186.684 li
152.208 186.379 li
154.297 185.874 li
157.077 185.081 li
161.424 183.782 li
163.448 183.245 li
163.849 183.148 li
166.901 182.387 li
170.654 181.351 li
176.947 179.482 li
182.633 177.794 li
186.303 176.778 li
189.208 176.046 li
190.552 175.735 li
193.854 175.036 li
197.433 174.36 li
201.375 173.703 li
205.811 173.053 li
211.331 172.346 li
233.855 169.772 li
246.857 168.126 li
261.304 166.374 li
275.655 164.716 li
290.505 163.085 li
304.167 161.66 li
318.296 160.265 li
0.6 0.6 0.6 rgb
@
[1 2 ] 0 dsh
134.62 181.272 mo
137.15 181.534 li
139.409 181.689 li
141.639 181.767 li
143.842 181.773 li
145.445 181.733 li
147.274 181.626 li
149.244 181.431 li
151.531 181.116 li
153.57 180.769 li
156.529 180.183 li
161.276 179.127 li
163.849 178.546 li
166.062 178.016 li
168.587 177.327 li
171.54 176.435 li
176.392 174.853 li
181.487 173.181 li
184.429 172.277 li
186.705 171.636 li
188.841 171.095 li
190.552 170.713 li
193.036 170.236 li
195.607 169.822 li
198.196 169.478 li
201.099 169.169 li
204.354 168.904 li
208.189 168.68 li
213.035 168.493 li
225.85 168.107 li
229.229 167.937 li
232.544 167.707 li
233.855 167.595 li
243.181 166.711 li
252.521 165.751 li
262.605 164.629 li
271.181 163.606 li
280.583 162.411 li
289.923 161.149 li
299.707 159.745 li
308.57 158.402 li
318.296 156.85 li
@
[3 3 ] 0 dsh
134.62 104.725 mo
135.355 102.055 li
136.11 99.511 li
136.889 97.089 li
137.691 94.798 li
138.513 92.657 li
139.346 90.69 li
140.26 88.762 li
141.045 87.294 li
141.907 85.873 li
142.769 84.651 li
143.681 83.568 li
144.503 82.778 li
145.445 82.085 li
146.133 81.788 li
146.747 81.73 li
147.368 81.864 li
148.012 82.199 li
148.675 82.741 li
149.359 83.498 li
150.141 84.592 li
150.931 85.923 li
151.785 87.592 li
152.687 89.573 li
153.734 92.106 li
155.028 95.485 li
159.123 106.579 li
160.157 109.14 li
161.081 111.243 li
161.982 113.083 li
162.713 114.401 li
163.45 115.553 li
163.849 116.096 li
165.296 117.852 li
166.752 119.415 li
168.243 120.822 li
169.803 122.105 li
171.477 123.287 li
173.312 124.381 li
175.342 125.383 li
177.882 126.391 li
181.071 127.388 li
187.917 129.222 li
190.552 130.075 li
193.344 130.983 li
196.297 131.752 li
199.51 132.392 li
203.091 132.899 li
207.167 133.26 li
211.699 133.465 li
219.129 133.561 li
226.436 133.673 li
230.655 133.881 li
233.855 134.161 li
251.463 136.15 li
269.205 138.344 li
286.952 140.731 li
304.086 143.217 li
0.6 0 0 rgb
@
304.086 143.217 mo
318.296 145.415 li
@
[1 2 ] 0 dsh
134.62 102.085 mo
135.366 99.388 li
136.133 96.818 li
136.923 94.375 li
137.737 92.069 li
138.569 89.919 li
139.412 87.951 li
140.318 86.062 li
141.095 84.624 li
141.966 83.207 li
142.836 81.994 li
143.739 80.944 li
144.571 80.164 li
145.445 79.537 li
146.133 79.247 li
146.753 79.198 li
147.292 79.311 li
147.941 79.634 li
148.608 80.168 li
149.297 80.921 li
150.083 82.013 li
150.876 83.345 li
151.718 84.985 li
152.624 86.974 li
153.668 89.501 li
154.951 92.862 li
159.133 104.27 li
160.183 106.893 li
161.118 109.038 li
162.013 110.885 li
162.749 112.225 li
163.498 113.408 li
163.849 113.893 li
165.325 115.733 li
166.816 117.389 li
168.35 118.897 li
169.963 120.289 li
171.699 121.588 li
173.599 122.802 li
175.687 123.925 li
178.139 125.015 li
181.029 126.071 li
186.717 127.83 li
190.552 129.115 li
193.137 129.979 li
195.818 130.678 li
198.682 131.227 li
201.836 131.626 li
205.398 131.862 li
210.007 131.907 li
216.365 131.677 li
224.724 131.302 li
229.285 131.276 li
232.891 131.434 li
233.855 131.51 li
246.787 132.77 li
257.778 134.038 li
269.263 135.556 li
@
269.263 135.556 mo
280.693 137.264 li
293.273 139.37 li
304.105 141.373 li
315.542 143.679 li
318.296 144.264 li
@
301.334 81.032 mo
301.334 74.775 310.719 74.775 310.719 81.032 cv
310.719 87.288 301.334 87.288 301.334 81.032 cv
cp
0 0 0 rgb
f
302.551 81.032 mo
302.551 76.397 309.502 76.397 309.502 81.032 cv
309.502 85.666 302.551 85.666 302.551 81.032 cv
cp
0.999 0.999 0.999 rgb
f
0.75 lw
[] 0 dsh
302.551 81.032 mo
302.551 76.397 309.502 76.397 309.502 81.032 cv
309.502 85.666 302.551 85.666 302.551 81.032 cv
cp
1 0 0 rgb
@
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 11596 59 <0001002a0000053405bd000b00bc40702801360247025703570467036704
76027808880186040b270b37023705380868050502030201032512040405
08070809072512060506080907080925120a0b0a0201020301251200000b
0205080b040301070604030201090a0300080a0604000205080b08090107
091a0d0301190c0db8010cb3218e5e182b2b194ef44d18c4104e19f64d18
c411121739003f173c3f3c3c3c1112173901874d2e2b0810c005872e2b08
10c00587102b0810c00587102b0810c03130005d015d2123090133090133
09012301011af0020efe13f901770174edfe130205f7fe7402f102ccfdce
0232fd34fd0f025c>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/X 59 def
end
Helvetica /Encoding get
dup 88 /X put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V /.notdef /X 12{/.notdef}rp /e 13{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf314.645 87.675 mo(X)sh1.5 lw
314.645 73.456 mo
325.704 73.456 li
@
301.334 98.28 mo
301.334 92.024 310.719 92.024 310.719 98.28 cv
310.719 104.536 301.334 104.536 301.334 98.28 cv
cp
f
302.551 98.28 mo
302.551 93.646 309.502 93.646 309.502 98.28 cv
309.502 102.914 302.551 102.914 302.551 98.28 cv
cp
0.999 0.999 0.999 rgb
f
302.551 98.28 mo
302.551 93.646 309.502 93.646 309.502 98.28 cv
309.502 102.914 302.551 102.914 302.551 98.28 cv
cp
0.8 0.8 0.8 rgb
f
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 12712 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/a 68 def
end
Helvetica /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A 5{/.notdef}rp /G 6{/.notdef}rp /N 7{/.notdef}rp /V /.notdef /X 8{/.notdef}rp /a 3{/.notdef}rp /e 13{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf314.645 105.053 mo(X)shNLZQYR+Helvetica*1 [14.2347 0 0 -14.2347 0 0 ]msf309.116 201.425 mo(\(a\))[4.74002 7.91449 0 ]xsh20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
0.999 0.999 0.999 rgb
ef
0.002 lw
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
@
93.121 469.12 mo
345.721 469.12 li
345.721 256.39 li
93.121 256.39 li
cp
ef
93.121 469.12 mo
345.721 469.12 li
345.721 256.39 li
93.121 256.39 li
cp
@
0.75 lw
93.121 469.12 mo
345.721 469.12 li
345.721 256.39 li
93.121 256.39 li
cp
0 0 0 rgb
@
93.121 469.12 mo
345.721 469.12 li
345.721 256.39 li
93.121 256.39 li
cp
0.999 0.999 0.999 rgb
ef
0.002 lw
93.121 469.12 mo
345.721 469.12 li
345.721 256.39 li
93.121 256.39 li
cp
@
0.75 lw
93.121 469.12 mo
345.721 469.12 li
345.721 256.39 li
93.121 256.39 li
cp
0 0 0 rgb
@
93.121 469.12 mo
93.3736 469.12 li
93.6262 469.12 li
93.8788 469.12 li
94.1314 469.12 li
94.384 469.12 li
94.6366 469.12 li
94.8892 469.12 li
95.1418 469.12 li
95.3944 469.12 li
95.647 469.12 li
95.8996 469.12 li
96.1522 469.12 li
96.4048 469.12 li
96.6574 469.12 li
96.91 469.12 li
97.1626 469.12 li
97.4152 469.12 li
97.6678 469.12 li
97.9204 469.12 li
98.173 469.12 li
98.4256 469.12 li
98.6782 469.12 li
98.9308 469.12 li
99.1834 469.12 li
99.436 469.12 li
99.6886 469.12 li
99.9412 469.12 li
100.194 469.12 li
100.446 469.12 li
100.699 469.12 li
100.952 469.12 li
101.204 469.12 li
101.457 469.12 li
101.709 469.12 li
101.962 469.12 li
102.215 469.12 li
102.467 469.12 li
102.72 469.12 li
102.972 469.12 li
103.225 469.12 li
103.478 469.12 li
103.73 469.12 li
103.983 469.12 li
104.235 469.12 li
104.488 469.12 li
104.741 469.12 li
104.993 469.12 li
105.246 469.12 li
105.498 469.12 li
105.751 469.12 li
106.004 469.12 li
106.256 469.12 li
106.509 469.12 li
106.761 469.12 li
107.014 469.12 li
107.267 469.12 li
107.519 469.12 li
107.772 469.12 li
108.024 469.12 li
108.277 469.12 li
108.53 469.12 li
108.782 469.12 li
109.035 469.12 li
109.287 469.12 li
109.54 469.12 li
109.793 469.12 li
110.045 469.12 li
110.298 469.12 li
110.55 469.12 li
110.803 469.12 li
111.056 469.12 li
111.308 469.12 li
111.561 469.12 li
111.813 469.12 li
112.066 469.12 li
112.319 469.12 li
112.571 469.12 li
112.824 469.12 li
113.076 469.12 li
113.329 469.12 li
113.582 469.12 li
113.834 469.12 li
114.087 469.12 li
114.339 469.12 li
114.592 469.12 li
114.845 469.12 li
115.097 469.12 li
115.35 469.12 li
115.602 469.12 li
115.855 469.12 li
116.108 469.12 li
116.36 469.12 li
116.613 469.12 li
116.865 469.12 li
117.118 469.12 li
117.371 469.12 li
117.623 469.12 li
117.876 469.12 li
118.128 469.12 li
118.381 469.12 li
118.634 469.12 li
118.886 469.12 li
119.139 469.12 li
119.391 469.12 li
119.644 469.12 li
119.897 469.12 li
120.149 469.12 li
120.402 469.12 li
120.654 469.12 li
120.907 469.12 li
121.16 469.12 li
121.412 469.12 li
121.665 469.12 li
121.917 469.12 li
122.17 469.12 li
122.423 469.12 li
122.675 469.12 li
122.928 469.12 li
123.18 469.12 li
123.433 469.12 li
123.686 469.12 li
123.938 469.12 li
124.191 469.12 li
124.443 469.12 li
124.696 469.12 li
124.949 469.12 li
125.201 469.12 li
125.454 469.12 li
125.706 469.12 li
125.959 469.12 li
126.212 469.12 li
126.464 469.12 li
126.717 469.12 li
126.969 469.12 li
127.222 469.12 li
127.475 469.12 li
127.727 469.12 li
127.98 469.12 li
128.232 469.12 li
128.485 469.12 li
128.738 469.12 li
128.99 469.12 li
129.243 469.12 li
129.495 469.12 li
129.748 469.12 li
130.001 469.12 li
130.253 469.12 li
130.506 469.12 li
130.758 469.12 li
131.011 469.12 li
131.264 469.12 li
131.516 469.12 li
131.769 469.12 li
132.021 469.12 li
132.274 469.12 li
132.527 469.12 li
132.779 469.12 li
133.032 469.12 li
133.284 469.12 li
133.537 469.12 li
133.79 469.12 li
134.042 469.12 li
134.295 469.12 li
134.547 469.12 li
134.8 469.12 li
135.053 469.12 li
135.305 469.12 li
135.558 469.12 li
135.81 469.12 li
136.063 469.12 li
136.316 469.12 li
136.568 469.12 li
136.821 469.12 li
137.073 469.12 li
137.326 469.12 li
137.579 469.12 li
137.831 469.12 li
138.084 469.12 li
138.336 469.12 li
138.589 469.12 li
138.842 469.12 li
139.094 469.12 li
139.347 469.12 li
139.599 469.12 li
139.852 469.12 li
140.105 469.12 li
140.357 469.12 li
140.61 469.12 li
140.862 469.12 li
141.115 469.12 li
141.368 469.12 li
141.62 469.12 li
141.873 469.12 li
142.125 469.12 li
142.378 469.12 li
142.631 469.12 li
142.883 469.12 li
143.136 469.12 li
143.388 469.12 li
143.641 469.12 li
143.894 469.12 li
144.146 469.12 li
144.399 469.12 li
144.651 469.12 li
144.904 469.12 li
145.157 469.12 li
145.409 469.12 li
145.662 469.12 li
145.914 469.12 li
146.167 469.12 li
146.42 469.12 li
146.672 469.12 li
146.925 469.12 li
147.177 469.12 li
147.43 469.12 li
147.683 469.12 li
147.935 469.12 li
148.188 469.12 li
148.44 469.12 li
148.693 469.12 li
148.946 469.12 li
149.198 469.12 li
149.451 469.12 li
149.703 469.12 li
149.956 469.12 li
150.209 469.12 li
150.461 469.12 li
150.714 469.12 li
150.966 469.12 li
151.219 469.12 li
151.472 469.12 li
151.724 469.12 li
151.977 469.12 li
152.229 469.12 li
152.482 469.12 li
152.735 469.12 li
152.987 469.12 li
153.24 469.12 li
153.492 469.12 li
153.745 469.12 li
153.998 469.12 li
154.25 469.12 li
154.503 469.12 li
154.755 469.12 li
155.008 469.12 li
155.261 469.12 li
155.513 469.12 li
155.766 469.12 li
156.018 469.12 li
156.271 469.12 li
156.524 469.12 li
156.776 469.12 li
157.029 469.12 li
157.281 469.12 li
157.534 469.12 li
157.787 469.12 li
158.039 469.12 li
158.292 469.12 li
158.544 469.12 li
158.797 469.12 li
159.05 469.12 li
159.302 469.12 li
159.555 469.12 li
159.807 469.12 li
160.06 469.12 li
160.313 469.12 li
160.565 469.12 li
160.818 469.12 li
161.07 469.12 li
161.323 469.12 li
161.576 469.12 li
161.828 469.12 li
162.081 469.12 li
162.333 469.12 li
162.586 469.12 li
162.839 469.12 li
163.091 469.12 li
163.344 469.12 li
163.596 469.12 li
163.849 469.12 li
164.102 469.12 li
164.354 469.12 li
164.607 469.12 li
164.859 469.12 li
165.112 469.12 li
165.365 469.12 li
165.617 469.12 li
165.87 469.12 li
166.122 469.12 li
166.375 469.12 li
166.628 469.12 li
166.88 469.12 li
167.133 469.12 li
167.385 469.12 li
167.638 469.12 li
167.891 469.12 li
168.143 469.12 li
168.396 469.12 li
168.648 469.12 li
168.901 469.12 li
169.154 469.12 li
169.406 469.12 li
169.659 469.12 li
169.911 469.12 li
170.164 469.12 li
170.417 469.12 li
170.669 469.12 li
170.922 469.12 li
171.174 469.12 li
171.427 469.12 li
171.68 469.12 li
171.932 469.12 li
172.185 469.12 li
172.437 469.12 li
172.69 469.12 li
172.943 469.12 li
173.195 469.12 li
173.448 469.12 li
173.7 469.12 li
173.953 469.12 li
174.206 469.12 li
174.458 469.12 li
174.711 469.12 li
174.963 469.12 li
175.216 469.12 li
175.469 469.12 li
175.721 469.12 li
175.974 469.12 li
176.226 469.12 li
176.479 469.12 li
176.732 469.12 li
176.984 469.12 li
177.237 469.12 li
177.489 469.12 li
177.742 469.12 li
177.995 469.12 li
178.247 469.12 li
178.5 469.12 li
178.752 469.12 li
179.005 469.12 li
179.258 469.12 li
179.51 469.12 li
179.763 469.12 li
180.015 469.12 li
180.268 469.12 li
180.521 469.12 li
180.773 469.12 li
181.026 469.12 li
181.278 469.12 li
181.531 469.12 li
181.784 469.12 li
182.036 469.12 li
182.289 469.12 li
182.541 469.12 li
182.794 469.12 li
183.047 469.12 li
183.299 469.12 li
183.552 469.12 li
183.804 469.12 li
184.057 469.12 li
184.31 469.12 li
184.562 469.12 li
184.815 469.12 li
185.067 469.12 li
185.32 469.12 li
185.573 469.12 li
185.825 469.12 li
186.078 469.12 li
186.33 469.12 li
186.583 469.12 li
186.836 469.12 li
187.088 469.12 li
187.341 469.12 li
187.593 469.12 li
187.846 469.12 li
188.099 469.12 li
188.351 469.12 li
188.604 469.12 li
188.856 469.12 li
189.109 469.12 li
189.362 469.12 li
189.614 469.12 li
189.867 469.12 li
190.119 469.12 li
190.372 469.12 li
190.625 469.12 li
190.877 469.12 li
191.13 469.12 li
191.382 469.12 li
191.635 469.12 li
191.888 469.12 li
192.14 469.12 li
192.393 469.12 li
192.645 469.12 li
192.898 469.12 li
193.151 469.12 li
193.403 469.12 li
193.656 469.12 li
193.908 469.12 li
194.161 469.12 li
194.414 469.12 li
194.666 469.12 li
194.919 469.12 li
195.171 469.12 li
195.424 469.12 li
195.677 469.12 li
195.929 469.12 li
196.182 469.12 li
196.434 469.12 li
196.687 469.12 li
196.94 469.12 li
197.192 469.12 li
197.445 469.12 li
197.697 469.12 li
197.95 469.12 li
198.203 469.12 li
198.455 469.12 li
198.708 469.12 li
198.96 469.12 li
199.213 469.12 li
199.466 469.12 li
199.718 469.12 li
199.971 469.12 li
200.223 469.12 li
200.476 469.12 li
200.729 469.12 li
200.981 469.12 li
201.234 469.12 li
201.486 469.12 li
201.739 469.12 li
201.992 469.12 li
202.244 469.12 li
202.497 469.12 li
202.749 469.12 li
203.002 469.12 li
203.255 469.12 li
203.507 469.12 li
203.76 469.12 li
204.012 469.12 li
204.265 469.12 li
204.518 469.12 li
204.77 469.12 li
205.023 469.12 li
205.275 469.12 li
205.528 469.12 li
205.781 469.12 li
206.033 469.12 li
206.286 469.12 li
206.538 469.12 li
206.791 469.12 li
207.044 469.12 li
207.296 469.12 li
207.549 469.12 li
207.801 469.12 li
208.054 469.12 li
208.307 469.12 li
208.559 469.12 li
208.812 469.12 li
209.064 469.12 li
209.317 469.12 li
209.57 469.12 li
209.822 469.12 li
210.075 469.12 li
210.327 469.12 li
210.58 469.12 li
210.833 469.12 li
211.085 469.12 li
211.338 469.12 li
211.59 469.12 li
211.843 469.12 li
212.096 469.12 li
212.348 469.12 li
212.601 469.12 li
212.853 469.12 li
213.106 469.12 li
213.359 469.12 li
213.611 469.12 li
213.864 469.12 li
214.116 469.12 li
214.369 469.12 li
214.622 469.12 li
214.874 469.12 li
215.127 469.12 li
215.379 469.12 li
215.632 469.12 li
215.885 469.12 li
216.137 469.12 li
216.39 469.12 li
216.642 469.12 li
216.895 469.12 li
217.148 469.12 li
217.4 469.12 li
217.653 469.12 li
217.905 469.12 li
218.158 469.12 li
218.411 469.12 li
218.663 469.12 li
218.916 469.12 li
219.168 469.12 li
219.421 469.12 li
219.674 469.12 li
219.926 469.12 li
220.179 469.12 li
220.431 469.12 li
220.684 469.12 li
220.937 469.12 li
221.189 469.12 li
221.442 469.12 li
221.694 469.12 li
221.947 469.12 li
222.2 469.12 li
222.452 469.12 li
222.705 469.12 li
222.957 469.12 li
223.21 469.12 li
223.463 469.12 li
223.715 469.12 li
223.968 469.12 li
224.22 469.12 li
224.473 469.12 li
224.726 469.12 li
224.978 469.12 li
225.231 469.12 li
225.483 469.12 li
225.736 469.12 li
225.989 469.12 li
226.241 469.12 li
226.494 469.12 li
226.746 469.12 li
226.999 469.12 li
227.252 469.12 li
227.504 469.12 li
227.757 469.12 li
228.009 469.12 li
228.262 469.12 li
228.515 469.12 li
228.767 469.12 li
229.02 469.12 li
229.272 469.12 li
229.525 469.12 li
229.778 469.12 li
230.03 469.12 li
230.283 469.12 li
230.535 469.12 li
230.788 469.12 li
231.041 469.12 li
231.293 469.12 li
231.546 469.12 li
231.798 469.12 li
232.051 469.12 li
232.304 469.12 li
232.556 469.12 li
232.809 469.12 li
233.061 469.12 li
233.314 469.12 li
233.567 469.12 li
233.819 469.12 li
234.072 469.12 li
234.324 469.12 li
234.577 469.12 li
234.83 469.12 li
235.082 469.12 li
235.335 469.12 li
235.587 469.12 li
235.84 469.12 li
236.093 469.12 li
236.345 469.12 li
236.598 469.12 li
236.85 469.12 li
237.103 469.12 li
237.356 469.12 li
237.608 469.12 li
237.861 469.12 li
238.113 469.12 li
238.366 469.12 li
238.619 469.12 li
238.871 469.12 li
239.124 469.12 li
239.376 469.12 li
239.629 469.12 li
239.882 469.12 li
240.134 469.12 li
240.387 469.12 li
240.639 469.12 li
240.892 469.12 li
241.145 469.12 li
241.397 469.12 li
241.65 469.12 li
241.902 469.12 li
242.155 469.12 li
242.408 469.12 li
242.66 469.12 li
242.913 469.12 li
243.165 469.12 li
243.418 469.12 li
243.671 469.12 li
243.923 469.12 li
244.176 469.12 li
244.428 469.12 li
244.681 469.12 li
244.934 469.12 li
245.186 469.12 li
245.439 469.12 li
245.691 469.12 li
245.944 469.12 li
246.197 469.12 li
246.449 469.12 li
246.702 469.12 li
246.954 469.12 li
247.207 469.12 li
247.46 469.12 li
247.712 469.12 li
247.965 469.12 li
248.217 469.12 li
248.47 469.12 li
248.723 469.12 li
248.975 469.12 li
249.228 469.12 li
249.48 469.12 li
249.733 469.12 li
249.986 469.12 li
250.238 469.12 li
250.491 469.12 li
250.743 469.12 li
250.996 469.12 li
251.249 469.12 li
251.501 469.12 li
251.754 469.12 li
252.006 469.12 li
252.259 469.12 li
252.512 469.12 li
252.764 469.12 li
253.017 469.12 li
253.269 469.12 li
253.522 469.12 li
253.775 469.12 li
254.027 469.12 li
254.28 469.12 li
254.532 469.12 li
254.785 469.12 li
255.037 469.12 li
255.29 469.12 li
255.543 469.12 li
255.795 469.12 li
256.048 469.12 li
256.3 469.12 li
256.553 469.12 li
256.806 469.12 li
257.058 469.12 li
257.311 469.12 li
257.563 469.12 li
257.816 469.12 li
258.069 469.12 li
258.321 469.12 li
258.574 469.12 li
258.826 469.12 li
259.079 469.12 li
259.332 469.12 li
259.584 469.12 li
259.837 469.12 li
260.089 469.12 li
260.342 469.12 li
260.595 469.12 li
260.847 469.12 li
261.1 469.12 li
261.352 469.12 li
261.605 469.12 li
261.858 469.12 li
262.11 469.12 li
262.363 469.12 li
262.615 469.12 li
262.868 469.12 li
263.121 469.12 li
263.373 469.12 li
263.626 469.12 li
263.878 469.12 li
264.131 469.12 li
264.384 469.12 li
264.636 469.12 li
264.889 469.12 li
265.141 469.12 li
265.394 469.12 li
265.647 469.12 li
265.899 469.12 li
266.152 469.12 li
266.404 469.12 li
266.657 469.12 li
266.91 469.12 li
267.162 469.12 li
267.415 469.12 li
267.667 469.12 li
267.92 469.12 li
268.173 469.12 li
268.425 469.12 li
268.678 469.12 li
268.93 469.12 li
269.183 469.12 li
269.436 469.12 li
269.688 469.12 li
269.941 469.12 li
270.193 469.12 li
270.446 469.12 li
270.699 469.12 li
270.951 469.12 li
271.204 469.12 li
271.456 469.12 li
271.709 469.12 li
271.962 469.12 li
272.214 469.12 li
272.467 469.12 li
272.719 469.12 li
272.972 469.12 li
273.225 469.12 li
273.477 469.12 li
273.73 469.12 li
273.982 469.12 li
274.235 469.12 li
274.488 469.12 li
274.74 469.12 li
274.993 469.12 li
275.245 469.12 li
275.498 469.12 li
275.751 469.12 li
276.003 469.12 li
276.256 469.12 li
276.508 469.12 li
276.761 469.12 li
277.014 469.12 li
277.266 469.12 li
277.519 469.12 li
277.771 469.12 li
278.024 469.12 li
278.277 469.12 li
278.529 469.12 li
278.782 469.12 li
279.034 469.12 li
279.287 469.12 li
279.54 469.12 li
279.792 469.12 li
280.045 469.12 li
280.297 469.12 li
280.55 469.12 li
280.803 469.12 li
281.055 469.12 li
281.308 469.12 li
281.56 469.12 li
281.813 469.12 li
282.066 469.12 li
282.318 469.12 li
282.571 469.12 li
282.823 469.12 li
283.076 469.12 li
283.329 469.12 li
283.581 469.12 li
283.834 469.12 li
284.086 469.12 li
284.339 469.12 li
284.592 469.12 li
284.844 469.12 li
285.097 469.12 li
285.349 469.12 li
285.602 469.12 li
285.855 469.12 li
286.107 469.12 li
286.36 469.12 li
286.612 469.12 li
286.865 469.12 li
287.118 469.12 li
287.37 469.12 li
287.623 469.12 li
287.875 469.12 li
288.128 469.12 li
288.381 469.12 li
288.633 469.12 li
288.886 469.12 li
289.138 469.12 li
289.391 469.12 li
289.644 469.12 li
289.896 469.12 li
290.149 469.12 li
290.401 469.12 li
290.654 469.12 li
290.907 469.12 li
291.159 469.12 li
291.412 469.12 li
291.664 469.12 li
291.917 469.12 li
292.17 469.12 li
292.422 469.12 li
292.675 469.12 li
292.927 469.12 li
293.18 469.12 li
293.433 469.12 li
293.685 469.12 li
293.938 469.12 li
294.19 469.12 li
294.443 469.12 li
294.696 469.12 li
294.948 469.12 li
295.201 469.12 li
295.453 469.12 li
295.706 469.12 li
295.959 469.12 li
296.211 469.12 li
296.464 469.12 li
296.716 469.12 li
296.969 469.12 li
297.222 469.12 li
297.474 469.12 li
297.727 469.12 li
297.979 469.12 li
298.232 469.12 li
298.485 469.12 li
298.737 469.12 li
298.99 469.12 li
299.242 469.12 li
299.495 469.12 li
299.748 469.12 li
300 469.12 li
300.253 469.12 li
300.505 469.12 li
300.758 469.12 li
301.011 469.12 li
301.263 469.12 li
301.516 469.12 li
301.768 469.12 li
302.021 469.12 li
302.274 469.12 li
302.526 469.12 li
302.779 469.12 li
303.031 469.12 li
303.284 469.12 li
303.537 469.12 li
303.789 469.12 li
304.042 469.12 li
304.294 469.12 li
304.547 469.12 li
304.8 469.12 li
305.052 469.12 li
305.305 469.12 li
305.557 469.12 li
305.81 469.12 li
306.063 469.12 li
306.315 469.12 li
306.568 469.12 li
306.82 469.12 li
307.073 469.12 li
307.326 469.12 li
307.578 469.12 li
307.831 469.12 li
308.083 469.12 li
308.336 469.12 li
308.589 469.12 li
308.841 469.12 li
309.094 469.12 li
309.346 469.12 li
309.599 469.12 li
309.852 469.12 li
310.104 469.12 li
310.357 469.12 li
310.609 469.12 li
310.862 469.12 li
311.115 469.12 li
311.367 469.12 li
311.62 469.12 li
311.872 469.12 li
312.125 469.12 li
312.378 469.12 li
312.63 469.12 li
312.883 469.12 li
313.135 469.12 li
313.388 469.12 li
313.641 469.12 li
313.893 469.12 li
314.146 469.12 li
314.398 469.12 li
314.651 469.12 li
314.904 469.12 li
315.156 469.12 li
315.409 469.12 li
315.661 469.12 li
315.914 469.12 li
316.167 469.12 li
316.419 469.12 li
316.672 469.12 li
316.924 469.12 li
317.177 469.12 li
317.43 469.12 li
317.682 469.12 li
317.935 469.12 li
318.187 469.12 li
318.44 469.12 li
318.693 469.12 li
318.945 469.12 li
319.198 469.12 li
319.45 469.12 li
319.703 469.12 li
319.956 469.12 li
320.208 469.12 li
320.461 469.12 li
320.713 469.12 li
320.966 469.12 li
321.219 469.12 li
321.471 469.12 li
321.724 469.12 li
321.976 469.12 li
322.229 469.12 li
322.482 469.12 li
322.734 469.12 li
322.987 469.12 li
323.239 469.12 li
323.492 469.12 li
323.745 469.12 li
323.997 469.12 li
324.25 469.12 li
324.502 469.12 li
324.755 469.12 li
325.008 469.12 li
325.26 469.12 li
325.513 469.12 li
325.765 469.12 li
326.018 469.12 li
326.271 469.12 li
326.523 469.12 li
326.776 469.12 li
327.028 469.12 li
327.281 469.12 li
327.534 469.12 li
327.786 469.12 li
328.039 469.12 li
328.291 469.12 li
328.544 469.12 li
328.797 469.12 li
329.049 469.12 li
329.302 469.12 li
329.554 469.12 li
329.807 469.12 li
330.06 469.12 li
330.312 469.12 li
330.565 469.12 li
330.817 469.12 li
331.07 469.12 li
331.323 469.12 li
331.575 469.12 li
331.828 469.12 li
332.08 469.12 li
332.333 469.12 li
332.586 469.12 li
332.838 469.12 li
333.091 469.12 li
333.343 469.12 li
333.596 469.12 li
333.849 469.12 li
334.101 469.12 li
334.354 469.12 li
334.606 469.12 li
334.859 469.12 li
335.112 469.12 li
335.364 469.12 li
335.617 469.12 li
335.869 469.12 li
336.122 469.12 li
336.375 469.12 li
336.627 469.12 li
336.88 469.12 li
337.132 469.12 li
337.385 469.12 li
337.638 469.12 li
337.89 469.12 li
338.143 469.12 li
338.395 469.12 li
338.648 469.12 li
338.901 469.12 li
339.153 469.12 li
339.406 469.12 li
339.658 469.12 li
339.911 469.12 li
340.164 469.12 li
340.416 469.12 li
340.669 469.12 li
340.921 469.12 li
341.174 469.12 li
341.427 469.12 li
341.679 469.12 li
341.932 469.12 li
342.184 469.12 li
342.437 469.12 li
342.69 469.12 li
342.942 469.12 li
343.195 469.12 li
343.447 469.12 li
343.7 469.12 li
343.953 469.12 li
344.205 469.12 li
344.458 469.12 li
344.71 469.12 li
344.963 469.12 li
345.216 469.12 li
345.468 469.12 li
345.721 469.12 li
0 0 0.6 rgb
@
1.5 lw
93.121 469.12 mo
345.721 469.12 li
0 0 0 rgb
@
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
NLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf207.214 509.499 mo( \(GeV\))[6.5954 7.90009 18.4577 13.1908 15.824 0 ]xshgrestore
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
NLZQYR+Helvetica*1 [15.8163 0 0 -15.8163 0 0 ]msf185.096 517.399 mo(NN)[11.4191 0 ]xshgrestore
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
NLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf174.037 509.499 mo(s)shgrestore
93.121 464.27 mo
93.121 469.12 li
@
111.164 466.695 mo
111.164 469.12 li
@
129.207 466.695 mo
129.207 469.12 li
@
147.25 466.695 mo
147.25 469.12 li
@
165.292 464.27 mo
165.292 469.12 li
@
183.335 466.695 mo
183.335 469.12 li
@
201.378 466.695 mo
201.378 469.12 li
@
219.421 466.695 mo
219.421 469.12 li
@
237.464 464.27 mo
237.464 469.12 li
@
255.507 466.695 mo
255.507 469.12 li
@
273.549 466.695 mo
273.549 469.12 li
@
291.592 466.695 mo
291.592 469.12 li
@
309.635 464.27 mo
309.635 469.12 li
@
309.635 464.27 mo
309.635 469.12 li
@
327.678 466.695 mo
327.678 469.12 li
@
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
NLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf86.3544 490.541 mo(0)shgrestore
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
NLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf151.919 490.541 mo(20)[13.1908 0 ]xshgrestore
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
NLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf224.593 490.541 mo(40)[13.1908 0 ]xshgrestore
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
NLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf296.477 490.541 mo(60)[13.1908 0 ]xshgrestore
93.121 256.39 mo
345.721 256.39 li
@
93.121 261.24 mo
93.121 256.39 li
@
111.164 258.815 mo
111.164 256.39 li
@
129.207 258.815 mo
129.207 256.39 li
@
147.25 258.815 mo
147.25 256.39 li
@
165.292 261.24 mo
165.292 256.39 li
@
183.335 258.815 mo
183.335 256.39 li
@
201.378 258.815 mo
201.378 256.39 li
@
219.421 258.815 mo
219.421 256.39 li
@
237.464 261.24 mo
237.464 256.39 li
@
255.507 258.815 mo
255.507 256.39 li
@
273.549 258.815 mo
273.549 256.39 li
@
291.592 258.815 mo
291.592 256.39 li
@
309.635 261.24 mo
309.635 256.39 li
@
309.635 261.24 mo
309.635 256.39 li
@
327.678 258.815 mo
327.678 256.39 li
@
93.121 469.12 mo
93.121 256.39 li
@
gsave
20 469.12 mo
352.368 469.12 li
352.368 256.39 li
20 256.39 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 98 /beta putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/beta <1C60D8A8C9B79676DB3037696C6D64BC9355BA00C385FE060DECDA747D32496E5F937D1113DF1FEE5CC81BB07CC827B6F71978DBD904E9DB056B9C576179CEE8F78D387E8CE467B7DE8265BA9A7815FC9087DE03A9ACEA5CDD3EAB67BC59A8DF094AE786471D8373298C755C672ABD98E4D55D7D8C5C4766EF4A4D0041E9EF7846FAF636727F2694B90EEA19301405292FFA8F6C511B8D452CED458E3FC0D649B016523638A06F8A8D1A794946ABBE1122910B086A79DABD638EDC03EA50AAC5707F705A8A11DB583BD5B07D5EA225895B007091D1D32C6C368E3EF5F06863E27A> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/NLZQYS+Symbol /Symbol findfont ct_VMDictPut/NLZQYS+Symbol*1 [98{/.notdef}rp /beta 157{/.notdef}rp]NLZQYS+Symbol nfNLZQYS+Symbol*1 [0 -23.7245 -23.7245 0 0 0 ]msf45.2779 368.891 mo(b)shgrestore
103.092 414.5 mo
93.121 414.5 li
@
98.1065 400.126 mo
93.121 400.126 li
@
98.1065 385.753 mo
93.121 385.753 li
@
98.1065 371.379 mo
93.121 371.379 li
@
103.092 357.005 mo
93.121 357.005 li
@
98.1065 342.632 mo
93.121 342.632 li
@
98.1065 328.258 mo
93.121 328.258 li
@
98.1065 313.885 mo
93.121 313.885 li
@
103.092 299.511 mo
93.121 299.511 li
@
103.092 414.5 mo
93.121 414.5 li
@
98.1065 428.874 mo
93.121 428.874 li
@
98.1065 443.247 mo
93.121 443.247 li
@
98.1065 457.621 mo
93.121 457.621 li
@
103.092 299.511 mo
93.121 299.511 li
@
98.1065 285.137 mo
93.121 285.137 li
@
98.1065 270.764 mo
93.121 270.764 li
@
NLZQYR+Helvetica*1 [23.7245 0 0 -23.7245 0 0 ]msf57.1269 422.607 mo(0.4)[13.1908 6.59541 0 ]xsh57.1269 364.941 mo(0.6)[13.1908 6.59541 0 ]xsh57.1269 308.066 mo(0.8)[13.1908 6.59541 0 ]xsh345.721 469.12 mo
345.721 256.39 li
@
335.75 414.5 mo
345.721 414.5 li
@
340.735 400.126 mo
345.721 400.126 li
@
340.735 385.753 mo
345.721 385.753 li
@
340.735 371.379 mo
345.721 371.379 li
@
335.75 357.005 mo
345.721 357.005 li
@
340.735 342.632 mo
345.721 342.632 li
@
340.735 328.258 mo
345.721 328.258 li
@
340.735 313.885 mo
345.721 313.885 li
@
335.75 299.511 mo
345.721 299.511 li
@
335.75 414.5 mo
345.721 414.5 li
@
340.735 428.874 mo
345.721 428.874 li
@
340.735 443.247 mo
345.721 443.247 li
@
340.735 457.621 mo
345.721 457.621 li
@
335.75 299.511 mo
345.721 299.511 li
@
340.735 285.137 mo
345.721 285.137 li
@
340.735 270.764 mo
345.721 270.764 li
@
NLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf197.735 280.418 mo(Au+Au, 10%-40%)[11.0769 9.23361 9.69859 11.0769 9.2336 4.61681 4.61678 9.23361 9.23361 14.7637 5.53006 9.23361 9.23358 0 ]xsh120.907 420.338 mo
120.907 417.913 li
0.999 0.999 0.999 rgb
@
120.907 428.237 mo
120.907 430.663 li
@
116.215 424.288 mo
116.215 418.031 125.599 418.031 125.599 424.288 cv
125.599 430.544 116.215 430.544 116.215 424.288 cv
cp
129.927 414.395 mo
129.927 408.138 139.312 408.138 139.312 414.395 cv
139.312 420.651 129.927 420.651 129.927 414.395 cv
cp
140.753 410.089 mo
140.753 403.833 150.137 403.833 150.137 410.089 cv
150.137 416.345 140.753 416.345 140.753 410.089 cv
cp
159.157 406.862 mo
159.157 400.606 168.541 400.606 168.541 406.862 cv
168.541 413.118 159.157 413.118 159.157 406.862 cv
cp
185.86 401.582 mo
185.86 395.325 195.245 395.325 195.245 401.582 cv
195.245 407.838 185.86 407.838 185.86 401.582 cv
cp
229.163 396.427 mo
229.163 390.171 238.547 390.171 238.547 396.427 cv
238.547 402.683 229.163 402.683 229.163 396.427 cv
cp
313.604 390.585 mo
313.604 384.329 322.988 384.329 322.988 390.585 cv
322.988 396.841 313.604 396.841 313.604 390.585 cv
cp
0 0 0 rgb
f
120.907 421.128 mo
120.907 417.913 li
0.999 0.999 0.999 rgb
@
120.907 427.448 mo
120.907 430.663 li
@
117.431 424.288 mo
117.431 419.654 124.383 419.654 124.383 424.288 cv
124.383 428.922 117.431 428.922 117.431 424.288 cv
cp
131.144 414.395 mo
131.144 409.76 138.095 409.76 138.095 414.395 cv
138.095 419.029 131.144 419.029 131.144 414.395 cv
cp
141.97 410.089 mo
141.97 405.455 148.921 405.455 148.921 410.089 cv
148.921 414.723 141.97 414.723 141.97 410.089 cv
cp
160.373 406.862 mo
160.373 402.228 167.325 402.228 167.325 406.862 cv
167.325 411.496 160.373 411.496 160.373 406.862 cv
cp
187.077 401.582 mo
187.077 396.947 194.028 396.947 194.028 401.582 cv
194.028 406.216 187.077 406.216 187.077 401.582 cv
cp
230.379 396.427 mo
230.379 391.793 237.331 391.793 237.331 396.427 cv
237.331 401.061 230.379 401.061 230.379 396.427 cv
cp
314.82 390.585 mo
314.82 385.951 321.771 385.951 321.771 390.585 cv
321.771 395.219 314.82 395.219 314.82 390.585 cv
cp
f
120.907 421.128 mo
120.907 417.913 li
0 0 0 rgb
@
120.907 427.448 mo
120.907 430.663 li
@
117.431 424.288 mo
117.431 419.654 124.383 419.654 124.383 424.288 cv
124.383 428.922 117.431 428.922 117.431 424.288 cv
cp
131.144 414.395 mo
131.144 409.76 138.095 409.76 138.095 414.395 cv
138.095 419.029 131.144 419.029 131.144 414.395 cv
cp
141.97 410.089 mo
141.97 405.455 148.921 405.455 148.921 410.089 cv
148.921 414.723 141.97 414.723 141.97 410.089 cv
cp
160.373 406.862 mo
160.373 402.228 167.325 402.228 167.325 406.862 cv
167.325 411.496 160.373 411.496 160.373 406.862 cv
cp
187.077 401.582 mo
187.077 396.947 194.028 396.947 194.028 401.582 cv
194.028 406.216 187.077 406.216 187.077 401.582 cv
cp
230.379 396.427 mo
230.379 391.793 237.331 391.793 237.331 396.427 cv
237.331 401.061 230.379 401.061 230.379 396.427 cv
cp
314.82 390.585 mo
314.82 385.951 321.771 385.951 321.771 390.585 cv
321.771 395.219 314.82 395.219 314.82 390.585 cv
cp
0.8 0.8 0.8 rgb
f
120.907 297.248 mo
120.907 290.131 li
0.999 0.999 0.999 rgb
@
120.907 305.147 mo
120.907 312.264 li
@
134.62 336.552 mo
134.62 335.664 li
@
134.62 344.451 mo
134.62 345.339 li
@
145.445 356.794 mo
145.445 356.6 li
@
145.445 364.693 mo
145.445 364.887 li
@
116.215 301.197 mo
116.215 294.941 125.599 294.941 125.599 301.197 cv
125.599 307.454 116.215 307.454 116.215 301.197 cv
cp
129.927 340.502 mo
129.927 334.245 139.312 334.245 139.312 340.502 cv
139.312 346.758 129.927 346.758 129.927 340.502 cv
cp
140.753 360.744 mo
140.753 354.487 150.137 354.487 150.137 360.744 cv
150.137 367 140.753 367 140.753 360.744 cv
cp
159.157 366.798 mo
159.157 360.542 168.541 360.542 168.541 366.798 cv
168.541 373.055 159.157 373.055 159.157 366.798 cv
cp
185.86 372.427 mo
185.86 366.171 195.245 366.171 195.245 372.427 cv
195.245 378.684 185.86 378.684 185.86 372.427 cv
cp
229.163 377.591 mo
229.163 371.335 238.547 371.335 238.547 377.591 cv
238.547 383.848 229.163 383.848 229.163 377.591 cv
cp
313.604 377.35 mo
313.604 371.094 322.988 371.094 322.988 377.35 cv
322.988 383.606 313.604 383.606 313.604 377.35 cv
cp
0 0 0 rgb
f
120.907 298.038 mo
120.907 290.131 li
0.999 0.999 0.999 rgb
@
120.907 304.357 mo
120.907 312.264 li
@
134.62 337.342 mo
134.62 335.664 li
@
134.62 343.661 mo
134.62 345.339 li
@
145.445 357.584 mo
145.445 356.6 li
@
145.445 363.903 mo
145.445 364.887 li
@
117.431 301.197 mo
117.431 296.563 124.383 296.563 124.383 301.197 cv
124.383 305.832 117.431 305.832 117.431 301.197 cv
cp
131.144 340.502 mo
131.144 335.867 138.095 335.867 138.095 340.502 cv
138.095 345.136 131.144 345.136 131.144 340.502 cv
cp
141.97 360.744 mo
141.97 356.109 148.921 356.109 148.921 360.744 cv
148.921 365.378 141.97 365.378 141.97 360.744 cv
cp
160.373 366.798 mo
160.373 362.164 167.325 362.164 167.325 366.798 cv
167.325 371.433 160.373 371.433 160.373 366.798 cv
cp
187.077 372.427 mo
187.077 367.793 194.028 367.793 194.028 372.427 cv
194.028 377.062 187.077 377.062 187.077 372.427 cv
cp
230.379 377.591 mo
230.379 372.957 237.331 372.957 237.331 377.591 cv
237.331 382.226 230.379 382.226 230.379 377.591 cv
cp
314.82 377.35 mo
314.82 372.716 321.771 372.716 321.771 377.35 cv
321.771 381.984 314.82 381.984 314.82 377.35 cv
cp
f
120.907 298.038 mo
120.907 290.131 li
0 0 0 rgb
@
120.907 304.357 mo
120.907 312.264 li
@
134.62 337.342 mo
134.62 335.664 li
@
134.62 343.661 mo
134.62 345.339 li
@
145.445 357.584 mo
145.445 356.6 li
@
145.445 363.903 mo
145.445 364.887 li
@
0.75 lw
117.431 301.197 mo
117.431 296.563 124.383 296.563 124.383 301.197 cv
124.383 305.832 117.431 305.832 117.431 301.197 cv
cp
131.144 340.502 mo
131.144 335.867 138.095 335.867 138.095 340.502 cv
138.095 345.136 131.144 345.136 131.144 340.502 cv
cp
141.97 360.744 mo
141.97 356.109 148.921 356.109 148.921 360.744 cv
148.921 365.378 141.97 365.378 141.97 360.744 cv
cp
160.373 366.798 mo
160.373 362.164 167.325 362.164 167.325 366.798 cv
167.325 371.433 160.373 371.433 160.373 366.798 cv
cp
187.077 372.427 mo
187.077 367.793 194.028 367.793 194.028 372.427 cv
194.028 377.062 187.077 377.062 187.077 372.427 cv
cp
230.379 377.591 mo
230.379 372.957 237.331 372.957 237.331 377.591 cv
237.331 382.226 230.379 382.226 230.379 377.591 cv
cp
314.82 377.35 mo
314.82 372.716 321.771 372.716 321.771 377.35 cv
321.771 381.984 314.82 381.984 314.82 377.35 cv
cp
1 0 0 rgb
@
1.5 lw
120.907 422.395 mo
125.951 420.679 li
130.906 418.91 li
134.62 417.528 li
137.04 416.552 li
141.564 414.628 li
143.578 413.85 li
145.167 413.317 li
145.445 413.233 li
146.974 412.825 li
148.657 412.469 li
150.585 412.158 li
152.934 411.887 li
158.366 411.469 li
161.586 411.183 li
163.849 410.888 li
167.401 410.289 li
171.454 409.512 li
177.996 408.144 li
184.521 406.786 li
188.335 406.061 li
190.552 405.68 li
195.352 404.94 li
200.603 404.226 li
206.608 403.506 li
233.855 400.771 li
246.871 399.444 li
263.552 397.845 li
278.243 396.53 li
292.852 395.309 li
307.095 394.203 li
318.296 393.391 li
0.2 0.2 0.2 rgb
@
120.907 347.078 mo
123.625 350.372 li
126.336 353.54 li
129.184 356.745 li
131.774 359.55 li
134.62 362.515 li
140.505 368.553 li
142.098 370.044 li
143.336 371.109 li
144.508 372.022 li
145.445 372.678 li
146.546 373.349 li
147.689 373.935 li
148.906 374.449 li
150.235 374.897 li
151.715 375.277 li
153.383 375.583 li
155.414 375.829 li
158.52 376.063 li
161.553 376.304 li
163.441 376.547 li
163.849 376.614 li
168.055 377.28 li
171.912 377.792 li
177.901 378.458 li
190.552 379.687 li
204.204 381.04 li
214.142 381.926 li
222.26 382.564 li
230.402 383.106 li
233.855 383.303 li
242.77 383.729 li
251.733 384.048 li
261.925 384.277 li
270.587 384.36 li
279.578 384.338 li
288.529 384.206 li
298.453 383.931 li
306.943 383.59 li
315.905 383.122 li
318.296 382.979 li
0.8 0 0 rgb
@
120.907 420.338 mo
120.907 417.913 li
0.999 0.999 0.999 rgb
@
120.907 428.237 mo
120.907 430.663 li
@
116.215 424.288 mo
116.215 418.031 125.599 418.031 125.599 424.288 cv
125.599 430.544 116.215 430.544 116.215 424.288 cv
cp
129.927 414.395 mo
129.927 408.138 139.312 408.138 139.312 414.395 cv
139.312 420.651 129.927 420.651 129.927 414.395 cv
cp
140.753 410.089 mo
140.753 403.833 150.137 403.833 150.137 410.089 cv
150.137 416.345 140.753 416.345 140.753 410.089 cv
cp
159.157 406.862 mo
159.157 400.606 168.541 400.606 168.541 406.862 cv
168.541 413.118 159.157 413.118 159.157 406.862 cv
cp
185.86 401.582 mo
185.86 395.325 195.245 395.325 195.245 401.582 cv
195.245 407.838 185.86 407.838 185.86 401.582 cv
cp
229.163 396.427 mo
229.163 390.171 238.547 390.171 238.547 396.427 cv
238.547 402.683 229.163 402.683 229.163 396.427 cv
cp
313.604 390.585 mo
313.604 384.329 322.988 384.329 322.988 390.585 cv
322.988 396.841 313.604 396.841 313.604 390.585 cv
cp
0 0 0 rgb
f
120.907 421.128 mo
120.907 417.913 li
0.999 0.999 0.999 rgb
@
120.907 427.448 mo
120.907 430.663 li
@
117.431 424.288 mo
117.431 419.654 124.383 419.654 124.383 424.288 cv
124.383 428.922 117.431 428.922 117.431 424.288 cv
cp
131.144 414.395 mo
131.144 409.76 138.095 409.76 138.095 414.395 cv
138.095 419.029 131.144 419.029 131.144 414.395 cv
cp
141.97 410.089 mo
141.97 405.455 148.921 405.455 148.921 410.089 cv
148.921 414.723 141.97 414.723 141.97 410.089 cv
cp
160.373 406.862 mo
160.373 402.228 167.325 402.228 167.325 406.862 cv
167.325 411.496 160.373 411.496 160.373 406.862 cv
cp
187.077 401.582 mo
187.077 396.947 194.028 396.947 194.028 401.582 cv
194.028 406.216 187.077 406.216 187.077 401.582 cv
cp
230.379 396.427 mo
230.379 391.793 237.331 391.793 237.331 396.427 cv
237.331 401.061 230.379 401.061 230.379 396.427 cv
cp
314.82 390.585 mo
314.82 385.951 321.771 385.951 321.771 390.585 cv
321.771 395.219 314.82 395.219 314.82 390.585 cv
cp
f
120.907 421.128 mo
120.907 417.913 li
0 0 0 rgb
@
120.907 427.448 mo
120.907 430.663 li
@
117.431 424.288 mo
117.431 419.654 124.383 419.654 124.383 424.288 cv
124.383 428.922 117.431 428.922 117.431 424.288 cv
cp
131.144 414.395 mo
131.144 409.76 138.095 409.76 138.095 414.395 cv
138.095 419.029 131.144 419.029 131.144 414.395 cv
cp
141.97 410.089 mo
141.97 405.455 148.921 405.455 148.921 410.089 cv
148.921 414.723 141.97 414.723 141.97 410.089 cv
cp
160.373 406.862 mo
160.373 402.228 167.325 402.228 167.325 406.862 cv
167.325 411.496 160.373 411.496 160.373 406.862 cv
cp
187.077 401.582 mo
187.077 396.947 194.028 396.947 194.028 401.582 cv
194.028 406.216 187.077 406.216 187.077 401.582 cv
cp
230.379 396.427 mo
230.379 391.793 237.331 391.793 237.331 396.427 cv
237.331 401.061 230.379 401.061 230.379 396.427 cv
cp
314.82 390.585 mo
314.82 385.951 321.771 385.951 321.771 390.585 cv
321.771 395.219 314.82 395.219 314.82 390.585 cv
cp
0.8 0.8 0.8 rgb
f
120.907 297.248 mo
120.907 290.131 li
0.999 0.999 0.999 rgb
@
120.907 305.147 mo
120.907 312.264 li
@
134.62 336.552 mo
134.62 335.664 li
@
134.62 344.451 mo
134.62 345.339 li
@
145.445 356.794 mo
145.445 356.6 li
@
145.445 364.693 mo
145.445 364.887 li
@
116.215 301.197 mo
116.215 294.941 125.599 294.941 125.599 301.197 cv
125.599 307.454 116.215 307.454 116.215 301.197 cv
cp
129.927 340.502 mo
129.927 334.245 139.312 334.245 139.312 340.502 cv
139.312 346.758 129.927 346.758 129.927 340.502 cv
cp
140.753 360.744 mo
140.753 354.487 150.137 354.487 150.137 360.744 cv
150.137 367 140.753 367 140.753 360.744 cv
cp
159.157 366.798 mo
159.157 360.542 168.541 360.542 168.541 366.798 cv
168.541 373.055 159.157 373.055 159.157 366.798 cv
cp
185.86 372.427 mo
185.86 366.171 195.245 366.171 195.245 372.427 cv
195.245 378.684 185.86 378.684 185.86 372.427 cv
cp
229.163 377.591 mo
229.163 371.335 238.547 371.335 238.547 377.591 cv
238.547 383.848 229.163 383.848 229.163 377.591 cv
cp
313.604 377.35 mo
313.604 371.094 322.988 371.094 322.988 377.35 cv
322.988 383.606 313.604 383.606 313.604 377.35 cv
cp
0 0 0 rgb
f
120.907 298.038 mo
120.907 290.131 li
0.999 0.999 0.999 rgb
@
120.907 304.357 mo
120.907 312.264 li
@
134.62 337.342 mo
134.62 335.664 li
@
134.62 343.661 mo
134.62 345.339 li
@
145.445 357.584 mo
145.445 356.6 li
@
145.445 363.903 mo
145.445 364.887 li
@
117.431 301.197 mo
117.431 296.563 124.383 296.563 124.383 301.197 cv
124.383 305.832 117.431 305.832 117.431 301.197 cv
cp
131.144 340.502 mo
131.144 335.867 138.095 335.867 138.095 340.502 cv
138.095 345.136 131.144 345.136 131.144 340.502 cv
cp
141.97 360.744 mo
141.97 356.109 148.921 356.109 148.921 360.744 cv
148.921 365.378 141.97 365.378 141.97 360.744 cv
cp
160.373 366.798 mo
160.373 362.164 167.325 362.164 167.325 366.798 cv
167.325 371.433 160.373 371.433 160.373 366.798 cv
cp
187.077 372.427 mo
187.077 367.793 194.028 367.793 194.028 372.427 cv
194.028 377.062 187.077 377.062 187.077 372.427 cv
cp
230.379 377.591 mo
230.379 372.957 237.331 372.957 237.331 377.591 cv
237.331 382.226 230.379 382.226 230.379 377.591 cv
cp
314.82 377.35 mo
314.82 372.716 321.771 372.716 321.771 377.35 cv
321.771 381.984 314.82 381.984 314.82 377.35 cv
cp
f
120.907 298.038 mo
120.907 290.131 li
0 0 0 rgb
@
120.907 304.357 mo
120.907 312.264 li
@
134.62 337.342 mo
134.62 335.664 li
@
134.62 343.661 mo
134.62 345.339 li
@
145.445 357.584 mo
145.445 356.6 li
@
145.445 363.903 mo
145.445 364.887 li
@
0.75 lw
117.431 301.197 mo
117.431 296.563 124.383 296.563 124.383 301.197 cv
124.383 305.832 117.431 305.832 117.431 301.197 cv
cp
131.144 340.502 mo
131.144 335.867 138.095 335.867 138.095 340.502 cv
138.095 345.136 131.144 345.136 131.144 340.502 cv
cp
141.97 360.744 mo
141.97 356.109 148.921 356.109 148.921 360.744 cv
148.921 365.378 141.97 365.378 141.97 360.744 cv
cp
160.373 366.798 mo
160.373 362.164 167.325 362.164 167.325 366.798 cv
167.325 371.433 160.373 371.433 160.373 366.798 cv
cp
187.077 372.427 mo
187.077 367.793 194.028 367.793 194.028 372.427 cv
194.028 377.062 187.077 377.062 187.077 372.427 cv
cp
230.379 377.591 mo
230.379 372.957 237.331 372.957 237.331 377.591 cv
237.331 382.226 230.379 382.226 230.379 377.591 cv
cp
314.82 377.35 mo
314.82 372.716 321.771 372.716 321.771 377.35 cv
321.771 381.984 314.82 381.984 314.82 377.35 cv
cp
1 0 0 rgb
@
1.5 lw
[3 3 ] 0 dsh
120.907 428.701 mo
122.997 426.969 li
125.127 425.311 li
127.256 423.762 li
129.679 422.13 li
131.718 420.863 li
133.867 419.633 li
134.62 419.228 li
136.31 418.373 li
138.43 417.407 li
141.012 416.365 li
143.8 415.371 li
145.445 414.832 li
147.324 414.289 li
149.472 413.788 li
152.022 413.322 li
163.849 411.652 li
168.963 410.631 li
176.806 408.922 li
184.489 407.255 li
189.218 406.318 li
190.552 406.074 li
196.223 405.113 li
202.301 404.192 li
209.405 403.23 li
216.889 402.314 li
233.855 400.393 li
246.782 398.994 li
257.77 397.911 li
269.226 396.887 li
280.631 395.974 li
293.215 395.089 li
304.028 394.432 li
315.445 393.841 li
318.296 393.71 li
0.6 0.6 0.6 rgb
@
[1 2 ] 0 dsh
120.907 419.854 mo
122.983 417.971 li
124.756 416.464 li
126.638 414.962 li
128.518 413.564 li
130.567 412.155 li
132.358 411.019 li
134.253 409.914 li
134.62 409.712 li
136.298 408.847 li
138.11 408.019 li
140.186 407.181 li
143.031 406.17 li
145.445 405.386 li
147.34 404.837 li
149.455 404.332 li
163.849 402.087 li
171.403 400.639 li
182.242 398.515 li
187.258 397.606 li
190.552 397.062 li
195.887 396.274 li
201.969 395.487 li
207.738 394.83 li
214.797 394.115 li
233.855 392.393 li
245.079 391.419 li
256.318 390.542 li
267.584 389.761 li
278.811 389.08 li
290.04 388.497 li
300.928 388.025 li
312.046 387.637 li
318.296 387.461 li
@
[3 3 ] 0 dsh
120.907 302.52 mo
122.593 308.255 li
124.404 314.132 li
125.954 318.937 li
127.688 324.065 li
129.42 328.937 li
131.222 333.74 li
132.889 337.948 li
134.62 342.083 li
136.787 346.993 li
138.561 350.795 li
140.201 354.084 li
141.893 357.209 li
143.235 359.464 li
144.557 361.47 li
145.445 362.689 li
146.543 364.01 li
147.683 365.143 li
148.895 366.113 li
150.222 366.929 li
151.7 367.584 li
153.377 368.064 li
155.286 368.363 li
158.32 368.554 li
161.319 368.77 li
163.161 369.097 li
163.849 369.281 li
168.151 370.472 li
174.03 371.847 li
180.328 373.096 li
190.552 374.912 li
199.75 376.424 li
209.499 377.782 li
219.98 378.995 li
231.58 380.086 li
233.855 380.273 li
244.697 381.028 li
255.984 381.565 li
265.591 381.822 li
277.903 381.881 li
288.75 381.682 li
299.533 381.251 li
310.051 380.607 li
318.296 379.948 li
0.6 0 0 rgb
@
[1 2 ] 0 dsh
120.907 300.422 mo
122.525 305.895 li
124.341 311.743 li
125.896 316.512 li
127.559 321.372 li
129.224 325.994 li
131.035 330.75 li
132.629 334.707 li
134.318 338.668 li
134.62 339.35 li
136.634 343.771 li
138.653 347.927 li
140.248 350.974 li
141.926 353.916 li
143.262 356.041 li
144.585 357.937 li
145.445 359.052 li
146.53 360.28 li
147.653 361.321 li
148.845 362.2 li
150.145 362.925 li
151.597 363.489 li
153.246 363.877 li
155.105 364.078 li
158.112 364.121 li
161.089 364.184 li
162.861 364.4 li
163.849 364.619 li
170.695 366.308 li
179.108 368.103 li
190.552 370.212 li
198.87 371.538 li
208.023 372.755 li
218.828 373.924 li
231.429 375.017 li
233.855 375.203 li
244.95 375.93 li
256.206 376.436 li
265.79 376.684 li
276.833 376.762 li
287.948 376.615 li
299.007 376.244 li
309.777 375.667 li
318.296 375.061 li
@
219.421 337.227 mo
274.262 337.227 li
274.262 286.172 li
219.421 286.172 li
cp
1 1 1 rgb
ef
0.002 lw
[] 0 dsh
219.421 337.227 mo
274.262 337.227 li
274.262 286.172 li
219.421 286.172 li
cp
@
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 5692 32 <0002005c00de046f03360003000700274015012000cd07200604001a0907
021908095c213f52182b2b4ef43c10f63c002f4dedfdfd31300115213501
152135046ffbed0413fbed0336a8a8fe53abab00>Helvetica AddT42Char 
1 8832 48 <000100970000061705bd001300cb405944014b03020601090316011903d7
010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d450286
02045102970202290a280d380a380d4702570276020725640d0a02031203
01020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd
0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918
e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201
020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc4313000
5d727101725d71132109012111231134363501230115141615112397011d
01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb29
04d72d36dd34fc9d0000>Helvetica AddT42Char 
1 10764 55 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/equal 32 def
/M 48 def
/T 55 def
end
Helvetica /Encoding get
dup 61 /equal put
dup 77 /M put
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 4{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 5{/.notdef}rp /M /N 5{/.notdef}rp /T /.notdef /V /.notdef /X 8{/.notdef}rp /a 3{/.notdef}rp /e 13{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf232.492 297.797 mo(T = 100 MeV)[10.1469 4.61681 9.69858 4.61682 9.23358 9.23361 9.23358 4.61682 13.8337 9.23358 0 ]xsh0.75 lw
[3 3 ] 0 dsh
221.477 294.681 mo
231.075 294.681 li
@
NLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf232.492 315.176 mo(T = 120 MeV)[10.1469 4.61681 9.69858 4.61682 9.23358 9.23361 9.23358 4.61682 13.8337 9.23358 0 ]xsh222.8 311.7 mo
222.8 307.065 229.752 307.065 229.752 311.7 cv
229.752 316.334 222.8 316.334 222.8 311.7 cv
cp
f
NLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf232.492 331.764 mo(T = 140 MeV)[10.1469 4.61681 9.69858 4.61682 9.23358 9.23361 9.23358 4.61682 13.8337 9.23358 0 ]xsh[1 2 ] 0 dsh
221.477 328.718 mo
231.075 328.718 li
@
221.477 311.01 mo
221.477 304.754 230.861 304.754 230.861 311.01 cv
230.861 317.266 221.477 317.266 221.477 311.01 cv
cp
f
222.693 311.01 mo
222.693 306.376 229.645 306.376 229.645 311.01 cv
229.645 315.644 222.693 315.644 222.693 311.01 cv
cp
0.999 0.999 0.999 rgb
f
[] 0 dsh
222.693 311.01 mo
222.693 306.376 229.645 306.376 229.645 311.01 cv
229.645 315.644 222.693 315.644 222.693 311.01 cv
cp
1 1 1 rgb
@
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 13116 69 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/b 69 def
end
Helvetica /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 4{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 5{/.notdef}rp /M /N 5{/.notdef}rp /T /.notdef /V /.notdef /X 8{/.notdef}rp /a /b 2{/.notdef}rp /e 13{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf276.728 348.353 mo( = 0.02)[4.61679 9.69861 4.61679 9.23358 4.61682 9.23358 0 ]xshNLZQYR+Helvetica*1 [11.0714 0 0 -11.0714 0 0 ]msf270.409 356.252 mo(2)shNLZQYR+Helvetica*1 [16.6072 0 0 -16.6072 0 0 ]msf186.676 348.353 mo(120 MeV, s)[9.2336 9.2336 9.2336 4.61681 13.8337 9.23361 11.0769 4.61678 4.61682 0 ]xsh175.617 348.353 mo(-)shNLZQYR+Helvetica*1 [14.2347 0 0 -14.2347 0 0 ]msf309.116 428.136 mo(\(b\))[4.74002 7.91449 0 ]xsh20 737 mo
352.368 737 li
352.368 469.12 li
20 469.12 li
cp
0.999 0.999 0.999 rgb
ef
0.002 lw
20 737 mo
352.368 737 li
352.368 469.12 li
20 469.12 li
cp
@
93.121 676.864 mo
345.721 676.864 li
345.721 469.12 li
93.121 469.12 li
cp
ef
93.121 676.864 mo
345.721 676.864 li
345.721 469.12 li
93.121 469.12 li
cp
@
0.75 lw
93.121 676.864 mo
345.721 676.864 li
345.721 469.12 li
93.121 469.12 li
cp
0 0 0 rgb
@
93.121 676.864 mo
345.721 676.864 li
345.721 469.12 li
93.121 469.12 li
cp
0.999 0.999 0.999 rgb
ef
0.002 lw
93.121 676.864 mo
345.721 676.864 li
345.721 469.12 li
93.121 469.12 li
cp
@
0.75 lw
93.121 676.864 mo
345.721 676.864 li
345.721 469.12 li
93.121 469.12 li
cp
0 0 0 rgb
@
93.121 676.864 mo
93.3736 676.864 li
93.6262 676.864 li
93.8788 676.864 li
94.1314 676.864 li
94.384 676.864 li
94.6366 676.864 li
94.8892 676.864 li
95.1418 676.864 li
95.3944 676.864 li
95.647 676.864 li
95.8996 676.864 li
96.1522 676.864 li
96.4048 676.864 li
96.6574 676.864 li
96.91 676.864 li
97.1626 676.864 li
97.4152 676.864 li
97.6678 676.864 li
97.9204 676.864 li
98.173 676.864 li
98.4256 676.864 li
98.6782 676.864 li
98.9308 676.864 li
99.1834 676.864 li
99.436 676.864 li
99.6886 676.864 li
99.9412 676.864 li
100.194 676.864 li
100.446 676.864 li
100.699 676.864 li
100.952 676.864 li
101.204 676.864 li
101.457 676.864 li
101.709 676.864 li
101.962 676.864 li
102.215 676.864 li
102.467 676.864 li
102.72 676.864 li
102.972 676.864 li
103.225 676.864 li
103.478 676.864 li
103.73 676.864 li
103.983 676.864 li
104.235 676.864 li
104.488 676.864 li
104.741 676.864 li
104.993 676.864 li
105.246 676.864 li
105.498 676.864 li
105.751 676.864 li
106.004 676.864 li
106.256 676.864 li
106.509 676.864 li
106.761 676.864 li
107.014 676.864 li
107.267 676.864 li
107.519 676.864 li
107.772 676.864 li
108.024 676.864 li
108.277 676.864 li
108.53 676.864 li
108.782 676.864 li
109.035 676.864 li
109.287 676.864 li
109.54 676.864 li
109.793 676.864 li
110.045 676.864 li
110.298 676.864 li
110.55 676.864 li
110.803 676.864 li
111.056 676.864 li
111.308 676.864 li
111.561 676.864 li
111.813 676.864 li
112.066 676.864 li
112.319 676.864 li
112.571 676.864 li
112.824 676.864 li
113.076 676.864 li
113.329 676.864 li
113.582 676.864 li
113.834 676.864 li
114.087 676.864 li
114.339 676.864 li
114.592 676.864 li
114.845 676.864 li
115.097 676.864 li
115.35 676.864 li
115.602 676.864 li
115.855 676.864 li
116.108 676.864 li
116.36 676.864 li
116.613 676.864 li
116.865 676.864 li
117.118 676.864 li
117.371 676.864 li
117.623 676.864 li
117.876 676.864 li
118.128 676.864 li
118.381 676.864 li
118.634 676.864 li
118.886 676.864 li
119.139 676.864 li
119.391 676.864 li
119.644 676.864 li
119.897 676.864 li
120.149 676.864 li
120.402 676.864 li
120.654 676.864 li
120.907 676.864 li
121.16 676.864 li
121.412 676.864 li
121.665 676.864 li
121.917 676.864 li
122.17 676.864 li
122.423 676.864 li
122.675 676.864 li
122.928 676.864 li
123.18 676.864 li
123.433 676.864 li
123.686 676.864 li
123.938 676.864 li
124.191 676.864 li
124.443 676.864 li
124.696 676.864 li
124.949 676.864 li
125.201 676.864 li
125.454 676.864 li
125.706 676.864 li
125.959 676.864 li
126.212 676.864 li
126.464 676.864 li
126.717 676.864 li
126.969 676.864 li
127.222 676.864 li
127.475 676.864 li
127.727 676.864 li
127.98 676.864 li
128.232 676.864 li
128.485 676.864 li
128.738 676.864 li
128.99 676.864 li
129.243 676.864 li
129.495 676.864 li
129.748 676.864 li
130.001 676.864 li
130.253 676.864 li
130.506 676.864 li
130.758 676.864 li
131.011 676.864 li
131.264 676.864 li
131.516 676.864 li
131.769 676.864 li
132.021 676.864 li
132.274 676.864 li
132.527 676.864 li
132.779 676.864 li
133.032 676.864 li
133.284 676.864 li
133.537 676.864 li
133.79 676.864 li
134.042 676.864 li
134.295 676.864 li
134.547 676.864 li
134.8 676.864 li
135.053 676.864 li
135.305 676.864 li
135.558 676.864 li
135.81 676.864 li
136.063 676.864 li
136.316 676.864 li
136.568 676.864 li
136.821 676.864 li
137.073 676.864 li
137.326 676.864 li
137.579 676.864 li
137.831 676.864 li
138.084 676.864 li
138.336 676.864 li
138.589 676.864 li
138.842 676.864 li
139.094 676.864 li
139.347 676.864 li
139.599 676.864 li
139.852 676.864 li
140.105 676.864 li
140.357 676.864 li
140.61 676.864 li
140.862 676.864 li
141.115 676.864 li
141.368 676.864 li
141.62 676.864 li
141.873 676.864 li
142.125 676.864 li
142.378 676.864 li
142.631 676.864 li
142.883 676.864 li
143.136 676.864 li
143.388 676.864 li
143.641 676.864 li
143.894 676.864 li
144.146 676.864 li
144.399 676.864 li
144.651 676.864 li
144.904 676.864 li
145.157 676.864 li
145.409 676.864 li
145.662 676.864 li
145.914 676.864 li
146.167 676.864 li
146.42 676.864 li
146.672 676.864 li
146.925 676.864 li
147.177 676.864 li
147.43 676.864 li
147.683 676.864 li
147.935 676.864 li
148.188 676.864 li
148.44 676.864 li
148.693 676.864 li
148.946 676.864 li
149.198 676.864 li
149.451 676.864 li
149.703 676.864 li
149.956 676.864 li
150.209 676.864 li
150.461 676.864 li
150.714 676.864 li
150.966 676.864 li
151.219 676.864 li
151.472 676.864 li
151.724 676.864 li
151.977 676.864 li
152.229 676.864 li
152.482 676.864 li
152.735 676.864 li
152.987 676.864 li
153.24 676.864 li
153.492 676.864 li
153.745 676.864 li
153.998 676.864 li
154.25 676.864 li
154.503 676.864 li
154.755 676.864 li
155.008 676.864 li
155.261 676.864 li
155.513 676.864 li
155.766 676.864 li
156.018 676.864 li
156.271 676.864 li
156.524 676.864 li
156.776 676.864 li
157.029 676.864 li
157.281 676.864 li
157.534 676.864 li
157.787 676.864 li
158.039 676.864 li
158.292 676.864 li
158.544 676.864 li
158.797 676.864 li
159.05 676.864 li
159.302 676.864 li
159.555 676.864 li
159.807 676.864 li
160.06 676.864 li
160.313 676.864 li
160.565 676.864 li
160.818 676.864 li
161.07 676.864 li
161.323 676.864 li
161.576 676.864 li
161.828 676.864 li
162.081 676.864 li
162.333 676.864 li
162.586 676.864 li
162.839 676.864 li
163.091 676.864 li
163.344 676.864 li
163.596 676.864 li
163.849 676.864 li
164.102 676.864 li
164.354 676.864 li
164.607 676.864 li
164.859 676.864 li
165.112 676.864 li
165.365 676.864 li
165.617 676.864 li
165.87 676.864 li
166.122 676.864 li
166.375 676.864 li
166.628 676.864 li
166.88 676.864 li
167.133 676.864 li
167.385 676.864 li
167.638 676.864 li
167.891 676.864 li
168.143 676.864 li
168.396 676.864 li
168.648 676.864 li
168.901 676.864 li
169.154 676.864 li
169.406 676.864 li
169.659 676.864 li
169.911 676.864 li
170.164 676.864 li
170.417 676.864 li
170.669 676.864 li
170.922 676.864 li
171.174 676.864 li
171.427 676.864 li
171.68 676.864 li
171.932 676.864 li
172.185 676.864 li
172.437 676.864 li
172.69 676.864 li
172.943 676.864 li
173.195 676.864 li
173.448 676.864 li
173.7 676.864 li
173.953 676.864 li
174.206 676.864 li
174.458 676.864 li
174.711 676.864 li
174.963 676.864 li
175.216 676.864 li
175.469 676.864 li
175.721 676.864 li
175.974 676.864 li
176.226 676.864 li
176.479 676.864 li
176.732 676.864 li
176.984 676.864 li
177.237 676.864 li
177.489 676.864 li
177.742 676.864 li
177.995 676.864 li
178.247 676.864 li
178.5 676.864 li
178.752 676.864 li
179.005 676.864 li
179.258 676.864 li
179.51 676.864 li
179.763 676.864 li
180.015 676.864 li
180.268 676.864 li
180.521 676.864 li
180.773 676.864 li
181.026 676.864 li
181.278 676.864 li
181.531 676.864 li
181.784 676.864 li
182.036 676.864 li
182.289 676.864 li
182.541 676.864 li
182.794 676.864 li
183.047 676.864 li
183.299 676.864 li
183.552 676.864 li
183.804 676.864 li
184.057 676.864 li
184.31 676.864 li
184.562 676.864 li
184.815 676.864 li
185.067 676.864 li
185.32 676.864 li
185.573 676.864 li
185.825 676.864 li
186.078 676.864 li
186.33 676.864 li
186.583 676.864 li
186.836 676.864 li
187.088 676.864 li
187.341 676.864 li
187.593 676.864 li
187.846 676.864 li
188.099 676.864 li
188.351 676.864 li
188.604 676.864 li
188.856 676.864 li
189.109 676.864 li
189.362 676.864 li
189.614 676.864 li
189.867 676.864 li
190.119 676.864 li
190.372 676.864 li
190.625 676.864 li
190.877 676.864 li
191.13 676.864 li
191.382 676.864 li
191.635 676.864 li
191.888 676.864 li
192.14 676.864 li
192.393 676.864 li
192.645 676.864 li
192.898 676.864 li
193.151 676.864 li
193.403 676.864 li
193.656 676.864 li
193.908 676.864 li
194.161 676.864 li
194.414 676.864 li
194.666 676.864 li
194.919 676.864 li
195.171 676.864 li
195.424 676.864 li
195.677 676.864 li
195.929 676.864 li
196.182 676.864 li
196.434 676.864 li
196.687 676.864 li
196.94 676.864 li
197.192 676.864 li
197.445 676.864 li
197.697 676.864 li
197.95 676.864 li
198.203 676.864 li
198.455 676.864 li
198.708 676.864 li
198.96 676.864 li
199.213 676.864 li
199.466 676.864 li
199.718 676.864 li
199.971 676.864 li
200.223 676.864 li
200.476 676.864 li
200.729 676.864 li
200.981 676.864 li
201.234 676.864 li
201.486 676.864 li
201.739 676.864 li
201.992 676.864 li
202.244 676.864 li
202.497 676.864 li
202.749 676.864 li
203.002 676.864 li
203.255 676.864 li
203.507 676.864 li
203.76 676.864 li
204.012 676.864 li
204.265 676.864 li
204.518 676.864 li
204.77 676.864 li
205.023 676.864 li
205.275 676.864 li
205.528 676.864 li
205.781 676.864 li
206.033 676.864 li
206.286 676.864 li
206.538 676.864 li
206.791 676.864 li
207.044 676.864 li
207.296 676.864 li
207.549 676.864 li
207.801 676.864 li
208.054 676.864 li
208.307 676.864 li
208.559 676.864 li
208.812 676.864 li
209.064 676.864 li
209.317 676.864 li
209.57 676.864 li
209.822 676.864 li
210.075 676.864 li
210.327 676.864 li
210.58 676.864 li
210.833 676.864 li
211.085 676.864 li
211.338 676.864 li
211.59 676.864 li
211.843 676.864 li
212.096 676.864 li
212.348 676.864 li
212.601 676.864 li
212.853 676.864 li
213.106 676.864 li
213.359 676.864 li
213.611 676.864 li
213.864 676.864 li
214.116 676.864 li
214.369 676.864 li
214.622 676.864 li
214.874 676.864 li
215.127 676.864 li
215.379 676.864 li
215.632 676.864 li
215.885 676.864 li
216.137 676.864 li
216.39 676.864 li
216.642 676.864 li
216.895 676.864 li
217.148 676.864 li
217.4 676.864 li
217.653 676.864 li
217.905 676.864 li
218.158 676.864 li
218.411 676.864 li
218.663 676.864 li
218.916 676.864 li
219.168 676.864 li
219.421 676.864 li
219.674 676.864 li
219.926 676.864 li
220.179 676.864 li
220.431 676.864 li
220.684 676.864 li
220.937 676.864 li
221.189 676.864 li
221.442 676.864 li
221.694 676.864 li
221.947 676.864 li
222.2 676.864 li
222.452 676.864 li
222.705 676.864 li
222.957 676.864 li
223.21 676.864 li
223.463 676.864 li
223.715 676.864 li
223.968 676.864 li
224.22 676.864 li
224.473 676.864 li
224.726 676.864 li
224.978 676.864 li
225.231 676.864 li
225.483 676.864 li
225.736 676.864 li
225.989 676.864 li
226.241 676.864 li
226.494 676.864 li
226.746 676.864 li
226.999 676.864 li
227.252 676.864 li
227.504 676.864 li
227.757 676.864 li
228.009 676.864 li
228.262 676.864 li
228.515 676.864 li
228.767 676.864 li
229.02 676.864 li
229.272 676.864 li
229.525 676.864 li
229.778 676.864 li
230.03 676.864 li
230.283 676.864 li
230.535 676.864 li
230.788 676.864 li
231.041 676.864 li
231.293 676.864 li
231.546 676.864 li
231.798 676.864 li
232.051 676.864 li
232.304 676.864 li
232.556 676.864 li
232.809 676.864 li
233.061 676.864 li
233.314 676.864 li
233.567 676.864 li
233.819 676.864 li
234.072 676.864 li
234.324 676.864 li
234.577 676.864 li
234.83 676.864 li
235.082 676.864 li
235.335 676.864 li
235.587 676.864 li
235.84 676.864 li
236.093 676.864 li
236.345 676.864 li
236.598 676.864 li
236.85 676.864 li
237.103 676.864 li
237.356 676.864 li
237.608 676.864 li
237.861 676.864 li
238.113 676.864 li
238.366 676.864 li
238.619 676.864 li
238.871 676.864 li
239.124 676.864 li
239.376 676.864 li
239.629 676.864 li
239.882 676.864 li
240.134 676.864 li
240.387 676.864 li
240.639 676.864 li
240.892 676.864 li
241.145 676.864 li
241.397 676.864 li
241.65 676.864 li
241.902 676.864 li
242.155 676.864 li
242.408 676.864 li
242.66 676.864 li
242.913 676.864 li
243.165 676.864 li
243.418 676.864 li
243.671 676.864 li
243.923 676.864 li
244.176 676.864 li
244.428 676.864 li
244.681 676.864 li
244.934 676.864 li
245.186 676.864 li
245.439 676.864 li
245.691 676.864 li
245.944 676.864 li
246.197 676.864 li
246.449 676.864 li
246.702 676.864 li
246.954 676.864 li
247.207 676.864 li
247.46 676.864 li
247.712 676.864 li
247.965 676.864 li
248.217 676.864 li
248.47 676.864 li
248.723 676.864 li
248.975 676.864 li
249.228 676.864 li
249.48 676.864 li
249.733 676.864 li
249.986 676.864 li
250.238 676.864 li
250.491 676.864 li
250.743 676.864 li
250.996 676.864 li
251.249 676.864 li
251.501 676.864 li
251.754 676.864 li
252.006 676.864 li
252.259 676.864 li
252.512 676.864 li
252.764 676.864 li
253.017 676.864 li
253.269 676.864 li
253.522 676.864 li
253.775 676.864 li
254.027 676.864 li
254.28 676.864 li
254.532 676.864 li
254.785 676.864 li
255.037 676.864 li
255.29 676.864 li
255.543 676.864 li
255.795 676.864 li
256.048 676.864 li
256.3 676.864 li
256.553 676.864 li
256.806 676.864 li
257.058 676.864 li
257.311 676.864 li
257.563 676.864 li
257.816 676.864 li
258.069 676.864 li
258.321 676.864 li
258.574 676.864 li
258.826 676.864 li
259.079 676.864 li
259.332 676.864 li
259.584 676.864 li
259.837 676.864 li
260.089 676.864 li
260.342 676.864 li
260.595 676.864 li
260.847 676.864 li
261.1 676.864 li
261.352 676.864 li
261.605 676.864 li
261.858 676.864 li
262.11 676.864 li
262.363 676.864 li
262.615 676.864 li
262.868 676.864 li
263.121 676.864 li
263.373 676.864 li
263.626 676.864 li
263.878 676.864 li
264.131 676.864 li
264.384 676.864 li
264.636 676.864 li
264.889 676.864 li
265.141 676.864 li
265.394 676.864 li
265.647 676.864 li
265.899 676.864 li
266.152 676.864 li
266.404 676.864 li
266.657 676.864 li
266.91 676.864 li
267.162 676.864 li
267.415 676.864 li
267.667 676.864 li
267.92 676.864 li
268.173 676.864 li
268.425 676.864 li
268.678 676.864 li
268.93 676.864 li
269.183 676.864 li
269.436 676.864 li
269.688 676.864 li
269.941 676.864 li
270.193 676.864 li
270.446 676.864 li
270.699 676.864 li
270.951 676.864 li
271.204 676.864 li
271.456 676.864 li
271.709 676.864 li
271.962 676.864 li
272.214 676.864 li
272.467 676.864 li
272.719 676.864 li
272.972 676.864 li
273.225 676.864 li
273.477 676.864 li
273.73 676.864 li
273.982 676.864 li
274.235 676.864 li
274.488 676.864 li
274.74 676.864 li
274.993 676.864 li
275.245 676.864 li
275.498 676.864 li
275.751 676.864 li
276.003 676.864 li
276.256 676.864 li
276.508 676.864 li
276.761 676.864 li
277.014 676.864 li
277.266 676.864 li
277.519 676.864 li
277.771 676.864 li
278.024 676.864 li
278.277 676.864 li
278.529 676.864 li
278.782 676.864 li
279.034 676.864 li
279.287 676.864 li
279.54 676.864 li
279.792 676.864 li
280.045 676.864 li
280.297 676.864 li
280.55 676.864 li
280.803 676.864 li
281.055 676.864 li
281.308 676.864 li
281.56 676.864 li
281.813 676.864 li
282.066 676.864 li
282.318 676.864 li
282.571 676.864 li
282.823 676.864 li
283.076 676.864 li
283.329 676.864 li
283.581 676.864 li
283.834 676.864 li
284.086 676.864 li
284.339 676.864 li
284.592 676.864 li
284.844 676.864 li
285.097 676.864 li
285.349 676.864 li
285.602 676.864 li
285.855 676.864 li
286.107 676.864 li
286.36 676.864 li
286.612 676.864 li
286.865 676.864 li
287.118 676.864 li
287.37 676.864 li
287.623 676.864 li
287.875 676.864 li
288.128 676.864 li
288.381 676.864 li
288.633 676.864 li
288.886 676.864 li
289.138 676.864 li
289.391 676.864 li
289.644 676.864 li
289.896 676.864 li
290.149 676.864 li
290.401 676.864 li
290.654 676.864 li
290.907 676.864 li
291.159 676.864 li
291.412 676.864 li
291.664 676.864 li
291.917 676.864 li
292.17 676.864 li
292.422 676.864 li
292.675 676.864 li
292.927 676.864 li
293.18 676.864 li
293.433 676.864 li
293.685 676.864 li
293.938 676.864 li
294.19 676.864 li
294.443 676.864 li
294.696 676.864 li
294.948 676.864 li
295.201 676.864 li
295.453 676.864 li
295.706 676.864 li
295.959 676.864 li
296.211 676.864 li
296.464 676.864 li
296.716 676.864 li
296.969 676.864 li
297.222 676.864 li
297.474 676.864 li
297.727 676.864 li
297.979 676.864 li
298.232 676.864 li
298.485 676.864 li
298.737 676.864 li
298.99 676.864 li
299.242 676.864 li
299.495 676.864 li
299.748 676.864 li
300 676.864 li
300.253 676.864 li
300.505 676.864 li
300.758 676.864 li
301.011 676.864 li
301.263 676.864 li
301.516 676.864 li
301.768 676.864 li
302.021 676.864 li
302.274 676.864 li
302.526 676.864 li
302.779 676.864 li
303.031 676.864 li
303.284 676.864 li
303.537 676.864 li
303.789 676.864 li
304.042 676.864 li
304.294 676.864 li
304.547 676.864 li
304.8 676.864 li
305.052 676.864 li
305.305 676.864 li
305.557 676.864 li
305.81 676.864 li
306.063 676.864 li
306.315 676.864 li
306.568 676.864 li
306.82 676.864 li
307.073 676.864 li
307.326 676.864 li
307.578 676.864 li
307.831 676.864 li
308.083 676.864 li
308.336 676.864 li
308.589 676.864 li
308.841 676.864 li
309.094 676.864 li
309.346 676.864 li
309.599 676.864 li
309.852 676.864 li
310.104 676.864 li
310.357 676.864 li
310.609 676.864 li
310.862 676.864 li
311.115 676.864 li
311.367 676.864 li
311.62 676.864 li
311.872 676.864 li
312.125 676.864 li
312.378 676.864 li
312.63 676.864 li
312.883 676.864 li
313.135 676.864 li
313.388 676.864 li
313.641 676.864 li
313.893 676.864 li
314.146 676.864 li
314.398 676.864 li
314.651 676.864 li
314.904 676.864 li
315.156 676.864 li
315.409 676.864 li
315.661 676.864 li
315.914 676.864 li
316.167 676.864 li
316.419 676.864 li
316.672 676.864 li
316.924 676.864 li
317.177 676.864 li
317.43 676.864 li
317.682 676.864 li
317.935 676.864 li
318.187 676.864 li
318.44 676.864 li
318.693 676.864 li
318.945 676.864 li
319.198 676.864 li
319.45 676.864 li
319.703 676.864 li
319.956 676.864 li
320.208 676.864 li
320.461 676.864 li
320.713 676.864 li
320.966 676.864 li
321.219 676.864 li
321.471 676.864 li
321.724 676.864 li
321.976 676.864 li
322.229 676.864 li
322.482 676.864 li
322.734 676.864 li
322.987 676.864 li
323.239 676.864 li
323.492 676.864 li
323.745 676.864 li
323.997 676.864 li
324.25 676.864 li
324.502 676.864 li
324.755 676.864 li
325.008 676.864 li
325.26 676.864 li
325.513 676.864 li
325.765 676.864 li
326.018 676.864 li
326.271 676.864 li
326.523 676.864 li
326.776 676.864 li
327.028 676.864 li
327.281 676.864 li
327.534 676.864 li
327.786 676.864 li
328.039 676.864 li
328.291 676.864 li
328.544 676.864 li
328.797 676.864 li
329.049 676.864 li
329.302 676.864 li
329.554 676.864 li
329.807 676.864 li
330.06 676.864 li
330.312 676.864 li
330.565 676.864 li
330.817 676.864 li
331.07 676.864 li
331.323 676.864 li
331.575 676.864 li
331.828 676.864 li
332.08 676.864 li
332.333 676.864 li
332.586 676.864 li
332.838 676.864 li
333.091 676.864 li
333.343 676.864 li
333.596 676.864 li
333.849 676.864 li
334.101 676.864 li
334.354 676.864 li
334.606 676.864 li
334.859 676.864 li
335.112 676.864 li
335.364 676.864 li
335.617 676.864 li
335.869 676.864 li
336.122 676.864 li
336.375 676.864 li
336.627 676.864 li
336.88 676.864 li
337.132 676.864 li
337.385 676.864 li
337.638 676.864 li
337.89 676.864 li
338.143 676.864 li
338.395 676.864 li
338.648 676.864 li
338.901 676.864 li
339.153 676.864 li
339.406 676.864 li
339.658 676.864 li
339.911 676.864 li
340.164 676.864 li
340.416 676.864 li
340.669 676.864 li
340.921 676.864 li
341.174 676.864 li
341.427 676.864 li
341.679 676.864 li
341.932 676.864 li
342.184 676.864 li
342.437 676.864 li
342.69 676.864 li
342.942 676.864 li
343.195 676.864 li
343.447 676.864 li
343.7 676.864 li
343.953 676.864 li
344.205 676.864 li
344.458 676.864 li
344.71 676.864 li
344.963 676.864 li
345.216 676.864 li
345.468 676.864 li
345.721 676.864 li
0 0 0.6 rgb
@
1.5 lw
93.121 676.864 mo
345.721 676.864 li
0 0 0 rgb
@
gsave
20 737 mo
352.368 737 li
352.368 469.12 li
20 469.12 li
cp
clp
NLZQYR+Helvetica*1 [23.7062 0 0 -23.7062 0 0 ]msf207.214 726.731 mo( \(GeV\))[6.59032 7.89398 18.4434 13.1806 15.8118 0 ]xshgrestore
gsave
20 737 mo
352.368 737 li
352.368 469.12 li
20 469.12 li
cp
clp
NLZQYR+Helvetica*1 [15.8041 0 0 -15.8041 0 0 ]msf185.096 734.63 mo(NN)[11.4103 0 ]xshgrestore
gsave
20 737 mo
352.368 737 li
352.368 469.12 li
20 469.12 li
cp
clp
NLZQYR+Helvetica*1 [23.7062 0 0 -23.7062 0 0 ]msf174.037 726.731 mo(s)shgrestore
164.558 713.302 mo
167.718 734.63 li
@
0.75 lw
167.718 734.63 mo
171.667 706.982 li
@
171.667 706.982 mo
207.214 706.982 li
@
1.5 lw
93.121 670.756 mo
93.121 676.864 li
@
111.164 673.81 mo
111.164 676.864 li
@
129.207 673.81 mo
129.207 676.864 li
@
147.25 673.81 mo
147.25 676.864 li
@
165.292 670.756 mo
165.292 676.864 li
@
183.335 673.81 mo
183.335 676.864 li
@
201.378 673.81 mo
201.378 676.864 li
@
219.421 673.81 mo
219.421 676.864 li
@
237.464 670.756 mo
237.464 676.864 li
@
255.507 673.81 mo
255.507 676.864 li
@
273.549 673.81 mo
273.549 676.864 li
@
291.592 673.81 mo
291.592 676.864 li
@
309.635 670.756 mo
309.635 676.864 li
@
309.635 670.756 mo
309.635 676.864 li
@
327.678 673.81 mo
327.678 676.864 li
@
NLZQYR+Helvetica*1 [23.7062 0 0 -23.7062 0 0 ]msf86.3544 697.503 mo(0)sh151.919 697.503 mo(20)[13.1806 0 ]xsh224.593 697.503 mo(40)[13.1806 0 ]xshgsave
20 737 mo
352.368 737 li
352.368 469.12 li
20 469.12 li
cp
clp
NLZQYR+Helvetica*1 [23.7062 0 0 -23.7062 0 0 ]msf296.477 697.503 mo(60)[13.1806 0 ]xshgrestore
93.121 469.12 mo
345.721 469.12 li
@
93.121 475.228 mo
93.121 469.12 li
@
111.164 472.174 mo
111.164 469.12 li
@
129.207 472.174 mo
129.207 469.12 li
@
147.25 472.174 mo
147.25 469.12 li
@
165.292 475.228 mo
165.292 469.12 li
@
183.335 472.174 mo
183.335 469.12 li
@
201.378 472.174 mo
201.378 469.12 li
@
219.421 472.174 mo
219.421 469.12 li
@
237.464 475.228 mo
237.464 469.12 li
@
255.507 472.174 mo
255.507 469.12 li
@
273.549 472.174 mo
273.549 469.12 li
@
291.592 472.174 mo
291.592 469.12 li
@
309.635 475.228 mo
309.635 469.12 li
@
309.635 475.228 mo
309.635 469.12 li
@
327.678 472.174 mo
327.678 469.12 li
@
93.121 676.864 mo
93.121 469.12 li
@
100.854 623.524 mo
93.121 623.524 li
@
96.9873 609.487 mo
93.121 609.487 li
@
96.9873 595.451 mo
93.121 595.451 li
@
96.9873 581.414 mo
93.121 581.414 li
@
100.854 567.377 mo
93.121 567.377 li
@
96.9873 553.34 mo
93.121 553.34 li
@
96.9873 539.304 mo
93.121 539.304 li
@
96.9873 525.267 mo
93.121 525.267 li
@
100.854 511.23 mo
93.121 511.23 li
@
100.854 623.524 mo
93.121 623.524 li
@
96.9873 637.561 mo
93.121 637.561 li
@
96.9873 651.597 mo
93.121 651.597 li
@
96.9873 665.634 mo
93.121 665.634 li
@
100.854 511.23 mo
93.121 511.23 li
@
96.9873 497.193 mo
93.121 497.193 li
@
96.9873 483.157 mo
93.121 483.157 li
@
NLZQYR+Helvetica*1 [23.7062 0 0 -23.7062 0 0 ]msf56.3369 631.939 mo(0.4)[13.1806 6.59032 0 ]xsh56.3369 575.854 mo(0.6)[13.1806 6.59032 0 ]xsh56.3369 519.768 mo(0.8)[13.1806 6.59032 0 ]xsh345.721 676.864 mo
345.721 469.12 li
@
337.988 623.524 mo
345.721 623.524 li
@
341.855 609.487 mo
345.721 609.487 li
@
341.855 595.451 mo
345.721 595.451 li
@
341.855 581.414 mo
345.721 581.414 li
@
337.988 567.377 mo
345.721 567.377 li
@
341.855 553.34 mo
345.721 553.34 li
@
341.855 539.304 mo
345.721 539.304 li
@
341.855 525.267 mo
345.721 525.267 li
@
337.988 511.23 mo
345.721 511.23 li
@
337.988 623.524 mo
345.721 623.524 li
@
341.855 637.561 mo
345.721 637.561 li
@
341.855 651.597 mo
345.721 651.597 li
@
341.855 665.634 mo
345.721 665.634 li
@
337.988 511.23 mo
345.721 511.23 li
@
341.855 497.193 mo
345.721 497.193 li
@
341.855 483.157 mo
345.721 483.157 li
@
NLZQYR+Helvetica*1 [16.5943 0 0 -16.5943 0 0 ]msf197.735 492.911 mo(Au+Au, 40%-80%)[11.0683 9.22643 9.69106 11.0683 9.22643 4.61322 4.61322 9.22641 9.22644 14.7522 5.52579 9.22641 9.22644 0 ]xsh134.62 642.077 mo
134.62 636.265 li
0.999 0.999 0.999 rgb
@
134.62 649.976 mo
134.62 655.788 li
@
145.445 641.517 mo
145.445 638.189 li
@
145.445 649.417 mo
145.445 652.745 li
@
163.849 641.39 mo
163.849 640.862 li
@
163.849 649.289 mo
163.849 649.816 li
@
129.927 646.026 mo
129.927 639.77 139.312 639.77 139.312 646.026 cv
139.312 652.282 129.927 652.282 129.927 646.026 cv
cp
140.753 645.467 mo
140.753 639.211 150.137 639.211 150.137 645.467 cv
150.137 651.723 140.753 651.723 140.753 645.467 cv
cp
159.157 645.339 mo
159.157 639.083 168.541 639.083 168.541 645.339 cv
168.541 651.596 159.157 651.596 159.157 645.339 cv
cp
185.86 637.451 mo
185.86 631.195 195.245 631.195 195.245 637.451 cv
195.245 643.707 185.86 643.707 185.86 637.451 cv
cp
229.163 631.121 mo
229.163 624.864 238.547 624.864 238.547 631.121 cv
238.547 637.377 229.163 637.377 229.163 631.121 cv
cp
313.604 626.1 mo
313.604 619.843 322.988 619.843 322.988 626.1 cv
322.988 632.356 313.604 632.356 313.604 626.1 cv
cp
0 0 0 rgb
f
134.62 642.866 mo
134.62 636.265 li
0.999 0.999 0.999 rgb
@
134.62 649.186 mo
134.62 655.788 li
@
145.445 642.307 mo
145.445 638.189 li
@
145.445 648.627 mo
145.445 652.745 li
@
163.849 642.18 mo
163.849 640.862 li
@
163.849 648.499 mo
163.849 649.816 li
@
131.144 646.026 mo
131.144 641.392 138.095 641.392 138.095 646.026 cv
138.095 650.66 131.144 650.66 131.144 646.026 cv
cp
141.97 645.467 mo
141.97 640.833 148.921 640.833 148.921 645.467 cv
148.921 650.101 141.97 650.101 141.97 645.467 cv
cp
160.373 645.339 mo
160.373 640.705 167.325 640.705 167.325 645.339 cv
167.325 649.974 160.373 649.974 160.373 645.339 cv
cp
187.077 637.451 mo
187.077 632.817 194.028 632.817 194.028 637.451 cv
194.028 642.085 187.077 642.085 187.077 637.451 cv
cp
230.379 631.121 mo
230.379 626.486 237.331 626.486 237.331 631.121 cv
237.331 635.755 230.379 635.755 230.379 631.121 cv
cp
314.82 626.1 mo
314.82 621.465 321.771 621.465 321.771 626.1 cv
321.771 630.734 314.82 630.734 314.82 626.1 cv
cp
f
134.62 642.866 mo
134.62 636.265 li
0 0 0 rgb
@
134.62 649.186 mo
134.62 655.788 li
@
145.445 642.307 mo
145.445 638.189 li
@
145.445 648.627 mo
145.445 652.745 li
@
163.849 642.18 mo
163.849 640.862 li
@
163.849 648.499 mo
163.849 649.816 li
@
131.144 646.026 mo
131.144 641.392 138.095 641.392 138.095 646.026 cv
138.095 650.66 131.144 650.66 131.144 646.026 cv
cp
141.97 645.467 mo
141.97 640.833 148.921 640.833 148.921 645.467 cv
148.921 650.101 141.97 650.101 141.97 645.467 cv
cp
160.373 645.339 mo
160.373 640.705 167.325 640.705 167.325 645.339 cv
167.325 649.974 160.373 649.974 160.373 645.339 cv
cp
187.077 637.451 mo
187.077 632.817 194.028 632.817 194.028 637.451 cv
194.028 642.085 187.077 642.085 187.077 637.451 cv
cp
230.379 631.121 mo
230.379 626.486 237.331 626.486 237.331 631.121 cv
237.331 635.755 230.379 635.755 230.379 631.121 cv
cp
314.82 626.1 mo
314.82 621.465 321.771 621.465 321.771 626.1 cv
321.771 630.734 314.82 630.734 314.82 626.1 cv
cp
0.8 0.8 0.8 rgb
f
134.62 575.827 mo
134.62 562.627 li
0.999 0.999 0.999 rgb
@
134.62 583.726 mo
134.62 596.925 li
@
145.445 623.693 mo
145.445 614.301 li
@
145.445 631.592 mo
145.445 640.984 li
@
163.849 600.8 mo
163.849 598.568 li
@
163.849 608.699 mo
163.849 610.93 li
@
129.927 579.776 mo
129.927 573.52 139.312 573.52 139.312 579.776 cv
139.312 586.033 129.927 586.033 129.927 579.776 cv
cp
140.753 627.643 mo
140.753 621.386 150.137 621.386 150.137 627.643 cv
150.137 633.899 140.753 633.899 140.753 627.643 cv
cp
159.157 604.749 mo
159.157 598.493 168.541 598.493 168.541 604.749 cv
168.541 611.006 159.157 611.006 159.157 604.749 cv
cp
185.86 613.692 mo
185.86 607.436 195.245 607.436 195.245 613.692 cv
195.245 619.949 185.86 619.949 185.86 613.692 cv
cp
229.163 611.633 mo
229.163 605.377 238.547 605.377 238.547 611.633 cv
238.547 617.889 229.163 617.889 229.163 611.633 cv
cp
313.604 612.808 mo
313.604 606.552 322.988 606.552 322.988 612.808 cv
322.988 619.065 313.604 619.065 313.604 612.808 cv
cp
0 0 0 rgb
f
134.62 576.617 mo
134.62 562.627 li
0.999 0.999 0.999 rgb
@
134.62 582.936 mo
134.62 596.925 li
@
145.445 624.483 mo
145.445 614.301 li
@
145.445 630.802 mo
145.445 640.984 li
@
163.849 601.59 mo
163.849 598.568 li
@
163.849 607.909 mo
163.849 610.93 li
@
190.552 610.533 mo
190.552 610.121 li
@
190.552 616.852 mo
190.552 617.264 li
@
131.144 579.776 mo
131.144 575.142 138.095 575.142 138.095 579.776 cv
138.095 584.411 131.144 584.411 131.144 579.776 cv
cp
141.97 627.643 mo
141.97 623.008 148.921 623.008 148.921 627.643 cv
148.921 632.277 141.97 632.277 141.97 627.643 cv
cp
160.373 604.749 mo
160.373 600.115 167.325 600.115 167.325 604.749 cv
167.325 609.384 160.373 609.384 160.373 604.749 cv
cp
187.077 613.692 mo
187.077 609.058 194.028 609.058 194.028 613.692 cv
194.028 618.327 187.077 618.327 187.077 613.692 cv
cp
230.379 611.633 mo
230.379 606.999 237.331 606.999 237.331 611.633 cv
237.331 616.267 230.379 616.267 230.379 611.633 cv
cp
314.82 612.808 mo
314.82 608.174 321.771 608.174 321.771 612.808 cv
321.771 617.443 314.82 617.443 314.82 612.808 cv
cp
f
134.62 576.617 mo
134.62 562.627 li
0 0 0 rgb
@
134.62 582.936 mo
134.62 596.925 li
@
145.445 624.483 mo
145.445 614.301 li
@
145.445 630.802 mo
145.445 640.984 li
@
163.849 601.59 mo
163.849 598.568 li
@
163.849 607.909 mo
163.849 610.93 li
@
190.552 610.533 mo
190.552 610.121 li
@
190.552 616.852 mo
190.552 617.264 li
@
0.75 lw
131.144 579.776 mo
131.144 575.142 138.095 575.142 138.095 579.776 cv
138.095 584.411 131.144 584.411 131.144 579.776 cv
cp
141.97 627.643 mo
141.97 623.008 148.921 623.008 148.921 627.643 cv
148.921 632.277 141.97 632.277 141.97 627.643 cv
cp
160.373 604.749 mo
160.373 600.115 167.325 600.115 167.325 604.749 cv
167.325 609.384 160.373 609.384 160.373 604.749 cv
cp
187.077 613.692 mo
187.077 609.058 194.028 609.058 194.028 613.692 cv
194.028 618.327 187.077 618.327 187.077 613.692 cv
cp
230.379 611.633 mo
230.379 606.999 237.331 606.999 237.331 611.633 cv
237.331 616.267 230.379 616.267 230.379 611.633 cv
cp
314.82 612.808 mo
314.82 608.174 321.771 608.174 321.771 612.808 cv
321.771 617.443 314.82 617.443 314.82 612.808 cv
cp
1 0 0 rgb
@
1.5 lw
134.62 648.619 mo
136.267 648.154 li
137.673 647.797 li
139.241 647.442 li
140.803 647.134 li
142.419 646.863 li
143.911 646.654 li
145.445 646.482 li
146.496 646.404 li
147.566 646.372 li
148.703 646.384 li
149.982 646.446 li
151.455 646.569 li
153.385 646.789 li
158.879 647.497 li
160.469 647.644 li
161.673 647.717 li
162.757 647.746 li
163.849 647.734 li
165.32 647.662 li
166.806 647.543 li
168.343 647.374 li
169.984 647.147 li
171.8 646.85 li
173.879 646.46 li
176.47 645.918 li
180.845 644.932 li
184.527 644.113 li
186.62 643.681 li
188.413 643.344 li
190.214 643.046 li
190.552 642.995 li
194.095 642.491 li
197.917 641.995 li
202.06 641.504 li
207.146 640.958 li
212.097 640.475 li
219.293 639.834 li
233.855 638.612 li
241.57 637.972 li
249.395 637.367 li
257.285 636.801 li
265.163 636.28 li
273.311 635.789 li
280.246 635.407 li
289.138 634.969 li
297.025 634.627 li
304.835 634.333 li
312.503 634.086 li
318.296 633.927 li
0.2 0.2 0.2 rgb
@
134.62 601.498 mo
134.959 603.306 li
135.316 605.018 li
135.69 606.645 li
136.079 608.194 li
136.483 609.674 li
136.903 611.094 li
137.34 612.461 li
137.795 613.783 li
138.272 615.066 li
138.771 616.313 li
139.295 617.526 li
139.844 618.698 li
140.414 619.821 li
140.999 620.88 li
141.641 621.942 li
142.199 622.786 li
142.824 623.647 li
143.453 624.43 li
144.124 625.175 li
144.732 625.773 li
145.445 626.386 li
145.896 626.706 li
146.334 626.947 li
146.759 627.117 li
147.172 627.223 li
147.65 627.274 li
148.139 627.249 li
148.705 627.126 li
149.218 626.933 li
149.75 626.653 li
150.302 626.282 li
150.88 625.814 li
151.558 625.169 li
152.252 624.414 li
153.001 623.506 li
153.88 622.345 li
155.027 620.72 li
157.407 617.239 li
158.354 615.917 li
159.164 614.854 li
159.859 614.011 li
160.561 613.235 li
161.306 612.506 li
161.923 611.984 li
162.556 611.533 li
163.09 611.222 li
163.648 610.97 li
163.849 610.898 li
164.813 610.626 li
165.679 610.464 li
166.571 610.374 li
167.598 610.362 li
168.554 610.432 li
169.545 610.583 li
170.675 610.842 li
171.82 611.191 li
173.029 611.643 li
0.8 0 0 rgb
@
173.029 611.643 mo
174.368 612.227 li
175.89 612.98 li
177.754 613.995 li
184.213 617.687 li
185.714 618.448 li
187.048 619.054 li
188.253 619.53 li
189.305 619.883 li
190.383 620.174 li
190.552 620.212 li
192.814 620.671 li
195.062 621.04 li
197.332 621.333 li
199.677 621.558 li
202.167 621.722 li
204.898 621.824 li
207.978 621.856 li
211.513 621.808 li
216.64 621.634 li
225.119 621.283 li
229.185 621.181 li
232.304 621.17 li
233.855 621.192 li
267.513 621.874 li
302.501 622.511 li
318.296 622.773 li
@
134.62 642.077 mo
134.62 636.265 li
0.999 0.999 0.999 rgb
@
134.62 649.976 mo
134.62 655.788 li
@
145.445 641.517 mo
145.445 638.189 li
@
145.445 649.417 mo
145.445 652.745 li
@
163.849 641.39 mo
163.849 640.862 li
@
163.849 649.289 mo
163.849 649.816 li
@
129.927 646.026 mo
129.927 639.77 139.312 639.77 139.312 646.026 cv
139.312 652.282 129.927 652.282 129.927 646.026 cv
cp
140.753 645.467 mo
140.753 639.211 150.137 639.211 150.137 645.467 cv
150.137 651.723 140.753 651.723 140.753 645.467 cv
cp
159.157 645.339 mo
159.157 639.083 168.541 639.083 168.541 645.339 cv
168.541 651.596 159.157 651.596 159.157 645.339 cv
cp
185.86 637.451 mo
185.86 631.195 195.245 631.195 195.245 637.451 cv
195.245 643.707 185.86 643.707 185.86 637.451 cv
cp
229.163 631.121 mo
229.163 624.864 238.547 624.864 238.547 631.121 cv
238.547 637.377 229.163 637.377 229.163 631.121 cv
cp
313.604 626.1 mo
313.604 619.843 322.988 619.843 322.988 626.1 cv
322.988 632.356 313.604 632.356 313.604 626.1 cv
cp
0 0 0 rgb
f
134.62 642.866 mo
134.62 636.265 li
0.999 0.999 0.999 rgb
@
134.62 649.186 mo
134.62 655.788 li
@
145.445 642.307 mo
145.445 638.189 li
@
145.445 648.627 mo
145.445 652.745 li
@
163.849 642.18 mo
163.849 640.862 li
@
163.849 648.499 mo
163.849 649.816 li
@
131.144 646.026 mo
131.144 641.392 138.095 641.392 138.095 646.026 cv
138.095 650.66 131.144 650.66 131.144 646.026 cv
cp
141.97 645.467 mo
141.97 640.833 148.921 640.833 148.921 645.467 cv
148.921 650.101 141.97 650.101 141.97 645.467 cv
cp
160.373 645.339 mo
160.373 640.705 167.325 640.705 167.325 645.339 cv
167.325 649.974 160.373 649.974 160.373 645.339 cv
cp
187.077 637.451 mo
187.077 632.817 194.028 632.817 194.028 637.451 cv
194.028 642.085 187.077 642.085 187.077 637.451 cv
cp
230.379 631.121 mo
230.379 626.486 237.331 626.486 237.331 631.121 cv
237.331 635.755 230.379 635.755 230.379 631.121 cv
cp
314.82 626.1 mo
314.82 621.465 321.771 621.465 321.771 626.1 cv
321.771 630.734 314.82 630.734 314.82 626.1 cv
cp
f
134.62 642.866 mo
134.62 636.265 li
0 0 0 rgb
@
134.62 649.186 mo
134.62 655.788 li
@
145.445 642.307 mo
145.445 638.189 li
@
145.445 648.627 mo
145.445 652.745 li
@
163.849 642.18 mo
163.849 640.862 li
@
163.849 648.499 mo
163.849 649.816 li
@
131.144 646.026 mo
131.144 641.392 138.095 641.392 138.095 646.026 cv
138.095 650.66 131.144 650.66 131.144 646.026 cv
cp
141.97 645.467 mo
141.97 640.833 148.921 640.833 148.921 645.467 cv
148.921 650.101 141.97 650.101 141.97 645.467 cv
cp
160.373 645.339 mo
160.373 640.705 167.325 640.705 167.325 645.339 cv
167.325 649.974 160.373 649.974 160.373 645.339 cv
cp
187.077 637.451 mo
187.077 632.817 194.028 632.817 194.028 637.451 cv
194.028 642.085 187.077 642.085 187.077 637.451 cv
cp
230.379 631.121 mo
230.379 626.486 237.331 626.486 237.331 631.121 cv
237.331 635.755 230.379 635.755 230.379 631.121 cv
cp
314.82 626.1 mo
314.82 621.465 321.771 621.465 321.771 626.1 cv
321.771 630.734 314.82 630.734 314.82 626.1 cv
cp
0.8 0.8 0.8 rgb
f
134.62 575.827 mo
134.62 562.627 li
0.999 0.999 0.999 rgb
@
134.62 583.726 mo
134.62 596.925 li
@
145.445 623.693 mo
145.445 614.301 li
@
145.445 631.592 mo
145.445 640.984 li
@
163.849 600.8 mo
163.849 598.568 li
@
163.849 608.699 mo
163.849 610.93 li
@
129.927 579.776 mo
129.927 573.52 139.312 573.52 139.312 579.776 cv
139.312 586.033 129.927 586.033 129.927 579.776 cv
cp
140.753 627.643 mo
140.753 621.386 150.137 621.386 150.137 627.643 cv
150.137 633.899 140.753 633.899 140.753 627.643 cv
cp
159.157 604.749 mo
159.157 598.493 168.541 598.493 168.541 604.749 cv
168.541 611.006 159.157 611.006 159.157 604.749 cv
cp
185.86 613.692 mo
185.86 607.436 195.245 607.436 195.245 613.692 cv
195.245 619.949 185.86 619.949 185.86 613.692 cv
cp
229.163 611.633 mo
229.163 605.377 238.547 605.377 238.547 611.633 cv
238.547 617.889 229.163 617.889 229.163 611.633 cv
cp
313.604 612.808 mo
313.604 606.552 322.988 606.552 322.988 612.808 cv
322.988 619.065 313.604 619.065 313.604 612.808 cv
cp
0 0 0 rgb
f
134.62 576.617 mo
134.62 562.627 li
0.999 0.999 0.999 rgb
@
134.62 582.936 mo
134.62 596.925 li
@
145.445 624.483 mo
145.445 614.301 li
@
145.445 630.802 mo
145.445 640.984 li
@
163.849 601.59 mo
163.849 598.568 li
@
163.849 607.909 mo
163.849 610.93 li
@
190.552 610.533 mo
190.552 610.121 li
@
190.552 616.852 mo
190.552 617.264 li
@
131.144 579.776 mo
131.144 575.142 138.095 575.142 138.095 579.776 cv
138.095 584.411 131.144 584.411 131.144 579.776 cv
cp
141.97 627.643 mo
141.97 623.008 148.921 623.008 148.921 627.643 cv
148.921 632.277 141.97 632.277 141.97 627.643 cv
cp
160.373 604.749 mo
160.373 600.115 167.325 600.115 167.325 604.749 cv
167.325 609.384 160.373 609.384 160.373 604.749 cv
cp
187.077 613.692 mo
187.077 609.058 194.028 609.058 194.028 613.692 cv
194.028 618.327 187.077 618.327 187.077 613.692 cv
cp
230.379 611.633 mo
230.379 606.999 237.331 606.999 237.331 611.633 cv
237.331 616.267 230.379 616.267 230.379 611.633 cv
cp
314.82 612.808 mo
314.82 608.174 321.771 608.174 321.771 612.808 cv
321.771 617.443 314.82 617.443 314.82 612.808 cv
cp
f
134.62 576.617 mo
134.62 562.627 li
0 0 0 rgb
@
134.62 582.936 mo
134.62 596.925 li
@
145.445 624.483 mo
145.445 614.301 li
@
145.445 630.802 mo
145.445 640.984 li
@
163.849 601.59 mo
163.849 598.568 li
@
163.849 607.909 mo
163.849 610.93 li
@
190.552 610.533 mo
190.552 610.121 li
@
190.552 616.852 mo
190.552 617.264 li
@
0.75 lw
131.144 579.776 mo
131.144 575.142 138.095 575.142 138.095 579.776 cv
138.095 584.411 131.144 584.411 131.144 579.776 cv
cp
141.97 627.643 mo
141.97 623.008 148.921 623.008 148.921 627.643 cv
148.921 632.277 141.97 632.277 141.97 627.643 cv
cp
160.373 604.749 mo
160.373 600.115 167.325 600.115 167.325 604.749 cv
167.325 609.384 160.373 609.384 160.373 604.749 cv
cp
187.077 613.692 mo
187.077 609.058 194.028 609.058 194.028 613.692 cv
194.028 618.327 187.077 618.327 187.077 613.692 cv
cp
230.379 611.633 mo
230.379 606.999 237.331 606.999 237.331 611.633 cv
237.331 616.267 230.379 616.267 230.379 611.633 cv
cp
314.82 612.808 mo
314.82 608.174 321.771 608.174 321.771 612.808 cv
321.771 617.443 314.82 617.443 314.82 612.808 cv
cp
1 0 0 rgb
@
1.5 lw
[3 3 ] 0 dsh
134.62 651.254 mo
138.923 651.225 li
143.391 651.253 li
145.445 651.286 li
147.316 651.355 li
149.883 651.533 li
157.032 652.151 li
159.188 652.255 li
160.784 652.276 li
162.149 652.245 li
163.54 652.159 li
163.849 652.132 li
165.288 651.962 li
166.73 651.726 li
168.208 651.422 li
169.772 651.039 li
171.492 650.555 li
173.462 649.933 li
176.093 649.022 li
180.542 647.374 li
183.653 646.237 li
185.881 645.474 li
187.599 644.934 li
189.205 644.478 li
190.552 644.139 li
193.243 643.533 li
196.039 642.962 li
199.012 642.414 li
202.24 641.881 li
205.79 641.359 li
209.777 640.839 li
233.855 638.295 li
241.195 637.498 li
248.646 636.746 li
256.185 636.045 li
263.75 635.401 li
272.102 634.758 li
279.206 634.269 li
286.814 633.803 li
294.382 633.399 li
302.496 633.033 li
309.662 632.765 li
318.296 632.514 li
0.6 0.6 0.6 rgb
@
[1 2 ] 0 dsh
134.62 640.678 mo
142.835 639.983 li
145.445 639.775 li
148.503 639.581 li
158.065 639.124 li
160.137 638.954 li
161.983 638.754 li
163.849 638.492 li
165.542 638.193 li
167.335 637.811 li
169.301 637.327 li
171.535 636.707 li
174.498 635.797 li
178.791 634.377 li
183.376 632.852 li
185.821 632.086 li
187.851 631.495 li
189.887 630.957 li
190.552 630.796 li
193.806 630.055 li
197.267 629.33 li
200.986 628.617 li
204.976 627.918 li
209.522 627.196 li
213.612 626.6 li
219.421 625.824 li
228.246 624.741 li
233.855 624.074 li
239.737 623.398 li
245.655 622.776 li
251.642 622.205 li
257.718 621.686 li
263.88 621.221 li
270.095 620.815 li
276.302 620.473 li
282.742 620.185 li
288.223 619.992 li
295.25 619.818 li
301.461 619.731 li
307.624 619.707 li
313.654 619.744 li
318.296 619.812 li
@
[3 3 ] 0 dsh
134.62 583.162 mo
134.979 586.597 li
135.356 589.858 li
135.748 592.963 li
136.155 595.93 li
136.577 598.774 li
137.016 601.513 li
137.473 604.161 li
137.95 606.731 li
138.45 609.235 li
138.974 611.675 li
139.524 614.047 li
140.098 616.336 li
140.689 618.516 li
141.371 620.818 li
141.965 622.654 li
142.599 624.447 li
143.24 626.095 li
143.96 627.763 li
144.582 629.05 li
145.246 630.274 li
145.445 630.613 li
145.881 631.275 li
146.307 631.804 li
146.797 632.276 li
147.298 632.608 li
147.809 632.801 li
148.33 632.85 li
148.868 632.754 li
149.426 632.505 li
150.006 632.098 li
150.611 631.523 li
151.311 630.685 li
152.028 629.657 li
152.797 628.39 li
153.678 626.767 li
154.774 624.559 li
157.485 618.744 li
158.678 616.279 li
159.62 614.473 li
160.45 613.028 li
161.188 611.884 li
161.885 610.945 li
162.552 610.189 li
163.139 609.654 li
163.748 609.234 li
163.849 609.178 li
164.876 608.707 li
165.935 608.368 li
167.034 608.165 li
168.183 608.101 li
169.45 608.192 li
170.736 608.44 li
172.096 608.852 li
173.606 609.463 li
175.35 610.334 li
177.72 611.72 li
184.602 616.051 li
0.6 0 0 rgb
@
184.602 616.051 mo
186.508 617.062 li
187.955 617.703 li
189.268 618.168 li
190.552 618.494 li
193.12 618.936 li
195.776 619.248 li
198.603 619.435 li
201.704 619.491 li
205.193 619.398 li
209.191 619.13 li
214.924 618.547 li
224.576 617.435 li
229.247 617.022 li
232.883 616.832 li
233.855 616.807 li
246.816 616.617 li
257.854 616.569 li
270.67 616.646 li
283.556 616.866 li
296.316 617.226 li
308.844 617.715 li
318.296 618.175 li
@
[1 2 ] 0 dsh
134.62 576.452 mo
134.972 580.02 li
135.341 583.405 li
135.726 586.624 li
136.126 589.696 li
136.542 592.638 li
136.973 595.466 li
137.423 598.197 li
137.891 600.844 li
138.382 603.418 li
138.897 605.925 li
139.438 608.363 li
140.002 610.718 li
140.586 612.965 li
141.182 615.079 li
141.8 617.089 li
142.338 618.696 li
142.964 620.411 li
143.604 621.998 li
144.254 623.446 li
144.882 624.692 li
145.445 625.687 li
145.886 626.355 li
146.315 626.88 li
146.733 627.275 li
147.225 627.596 li
147.726 627.771 li
148.303 627.79 li
148.829 627.645 li
149.374 627.341 li
149.939 626.87 li
150.528 626.223 li
151.22 625.277 li
151.922 624.134 li
152.663 622.753 li
153.498 621.022 li
154.519 618.708 li
156.1 614.883 li
157.829 610.665 li
158.89 608.21 li
159.773 606.319 li
160.565 604.776 li
161.275 603.539 li
161.95 602.512 li
162.598 601.678 li
163.171 601.072 li
163.849 600.53 li
164.848 599.951 li
165.878 599.507 li
166.943 599.202 li
190.552 608.956 li
193.193 609.339 li
195.948 609.59 li
198.909 609.708 li
202.186 609.682 li
205.902 609.486 li
210.453 609.066 li
218.007 608.123 li
@
218.007 608.123 mo
225.223 607.212 li
229.765 606.773 li
233.855 606.541 li
246.794 606.202 li
257.798 606.052 li
269.791 606.033 li
281.711 606.164 li
294.27 606.464 li
305.573 606.876 li
318.296 607.5 li
@
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 13328 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/c 70 def
end
Helvetica /Encoding get
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/NLZQYR+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 4{/.notdef}rp /equal 3{/.notdef}rp /A 5{/.notdef}rp /G 5{/.notdef}rp /M /N 5{/.notdef}rp /T /.notdef /V /.notdef /X 8{/.notdef}rp /a /b /c /.notdef /e 13{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]NLZQYR+Helvetica nfNLZQYR+Helvetica*1 [15.0139 0 0 -15.0139 0 0 ]msf309.116 567.164 mo(\(c\))[4.99951 7.50693 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/NLZQYR+Helvetica*1 uf/NLZQYR+Helvetica uf/Helvetica uf/NLZQYS+Symbol*1 uf/NLZQYS+Symbol uf/Symbol ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
