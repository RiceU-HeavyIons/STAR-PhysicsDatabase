%!PS-Adobe-3.1 EPSF-3.0
%%Title: PaperRhoMassdAupp.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 10/4/2007
%%CropBox: 0.000000 0.000000 645.052734 434.580078
%%BoundingBox: 0 0 646 435 
%%HiResBoundingBox: 0.000000 0.000000 645.052734 434.580078
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -434.58 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 434.58 ln
645.053 434.58 ln
645.053 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
95.375 371.5 mo
95.375 11.5 ln
639.624 11.5 ln
639.624 371.5 ln
95.375 371.5 ln
cp
false op
0 0 0 1 cmyk
s
95.375 371.5 mo
95.375 11.5 ln
639.624 11.5 ln
639.624 371.5 ln
95.375 371.5 ln
cp
95.375 371.5 mo
639.624 371.5 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e3088328e93e3f86c5266dab4a
4b6a0dbbd499ac2f08f52498a1230ac74b9126578260e72bf920c6626e18
e52befca2ad4c5c494a757a5861d225d61833e7b6db104708e0fcf59a03e
ddf773c2fe0a4faea092dc7a4d01275005fb3564e1d1f76f67c0ded9002e
e506fbb65143c90d6526880b9b4967a1233028aa9e8c3e30f59ec7f29cd2
713cffb71673b8ee9c01e77581750db787f4754cdac76007b210e32a2dfc
77791af6ea67a232e72999312d> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e231374dce1d715d27566dcf
115e95280405ef7103dd8183790f381980b4f25c32c305> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 71 /G put
dup 86 /V put
dup 99 /c put
dup 101 /e put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
40{/.notdef}repeat /parenleft /parenright 5{/.notdef}repeat /slash 23{/.notdef}repeat /G 14{/.notdef}repeat 
/V 12{/.notdef}repeat /c /.notdef /e 154{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
551.374 418 mov
(\(GeV/c\)) sh
restore_ctm
95.375 360.25 mo
95.375 371.5 ln
109.125 365.75 mo
109.125 371.5 ln
122.625 365.75 mo
122.625 371.5 ln
136.125 365.75 mo
136.125 371.5 ln
149.875 365.75 mo
149.875 371.5 ln
163.375 360.25 mo
163.375 371.5 ln
177.125 365.75 mo
177.125 371.5 ln
190.625 365.75 mo
190.625 371.5 ln
204.375 365.75 mo
204.375 371.5 ln
217.875 365.75 mo
217.875 371.5 ln
231.375 360.25 mo
231.375 371.5 ln
245.125 365.75 mo
245.125 371.5 ln
258.625 365.75 mo
258.625 371.5 ln
272.375 365.75 mo
272.375 371.5 ln
285.875 365.75 mo
285.875 371.5 ln
299.625 360.25 mo
299.625 371.5 ln
313.125 365.75 mo
313.125 371.5 ln
326.625 365.75 mo
326.625 371.5 ln
340.375 365.75 mo
340.375 371.5 ln
353.875 365.75 mo
353.875 371.5 ln
367.625 360.25 mo
367.625 371.5 ln
381.124 365.75 mo
381.124 371.5 ln
394.624 365.75 mo
394.624 371.5 ln
408.374 365.75 mo
408.374 371.5 ln
421.874 365.75 mo
421.874 371.5 ln
435.624 360.25 mo
435.624 371.5 ln
449.124 365.75 mo
449.124 371.5 ln
462.874 365.75 mo
462.874 371.5 ln
476.374 365.75 mo
476.374 371.5 ln
489.874 365.75 mo
489.874 371.5 ln
503.624 360.25 mo
503.624 371.5 ln
517.124 365.75 mo
517.124 371.5 ln
530.874 365.75 mo
530.874 371.5 ln
544.374 365.75 mo
544.374 371.5 ln
558.124 365.75 mo
558.124 371.5 ln
571.624 360.25 mo
571.624 371.5 ln
585.124 365.75 mo
585.124 371.5 ln
598.874 365.75 mo
598.874 371.5 ln
612.374 365.75 mo
612.374 371.5 ln
626.124 365.75 mo
626.124 371.5 ln
639.624 360.25 mo
639.624 371.5 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79f07ea232bdef9ac901d627f1d7c
bbc695d54d248636f112e1e558138c8614732404711d922beb14f6e9da7a
f0f6424e78635561b81229fa2a64943f0a34dc93b34efd58286722f3cf61
311ea7fc7d9e5939d3363e9ede71cf70e1e3065ffc3ecb6cd91e476e222f
a9d3eab4d1de767ebebf490a414b0dffbb21fe8991e5077af9877088538e
7a8f585effec91> ND 
end end
end
/ArialMT findfont /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
112{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
525.874 418 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
48{/.notdef}repeat /zero 207{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
88.875 393.5 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
148.625 393.5 mov
(0) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f72e955f0050b5472
6b68794743aa9e2640fbbbe965e5c7462a0da2fe3396d6994552b6fd7b9f
c3a7f776be319813ddb449d1a761c2a25379bcdbddb59583b40898699b48
1611e523f8146fbaea058eb8237d1f8ef6c080ecb39f96cb6c0db3e3c586
248bc7c61f659dbd2f8aadac81a2448e7137d524> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
dup 53 /five put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
46{/.notdef}repeat /period 6{/.notdef}repeat /five 202{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
160.304 393.5 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end end
end
/ArialMT findfont /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
49{/.notdef}repeat /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
225.875 393.5 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
284.375 393.5 mov
(1) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
296.054 393.5 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
361.625 393.5 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
420.374 393.5 mov
(2) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
432.053 393.5 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d89951110b
adeffb560aa54e338c9127425b06cefdd1d949874d4622c9b30b369b86fa
41b317af240e3deeaa1e9f5a90a07b28e40380e054c3662afb1cf6f51c11
b6836151d28c225e6c4d1016d9fa730c1bf86c199f942682434f25971f32
ae953f8b74fbb716bed8520757e61bce7cf6be4a92865d3717d39c92f18c
1b406caa6c3ed07ea5ff15dde83aea7d31b62642cc5c322a42f14367085d
78b35ebe75a37abae90e77a72aa751401d5e1988c4445fb51991681b7fd3
6a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
51{/.notdef}repeat /three 204{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
497.624 393.5 mov
(3) sh
restore_ctm
save_ctm
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
556.124 393.5 mov
(3) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
567.803 393.5 mov
(.5) sh
restore_ctm
95.375 371.5 mo
95.375 11.5 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
633.374 393.5 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 48.25 mov
(\)) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 58 mov
(2) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/space 
<10bf317079c7734bf7> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638bbfe80126114fe37407e2e312c7bcbd2c
1b7b9e7fac2817224e19> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 77 /M put
dup 97 /a put
dup 115 /s put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
32{/.notdef}repeat /space 44{/.notdef}repeat /M 19{/.notdef}repeat /a 17{/.notdef}repeat /s 
140{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 187.25 mov
( Mass ) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 125.409 mov
(\(GeV/c) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
20 197 mov
(0) sh
restore_ctm
111.375 343.75 mo
95.375 343.75 ln
103.375 329.75 mo
95.375 329.75 ln
103.375 316 mo
95.375 316 ln
103.375 302.25 mo
95.375 302.25 ln
111.375 288.25 mo
95.375 288.25 ln
103.375 274.5 mo
95.375 274.5 ln
103.375 260.75 mo
95.375 260.75 ln
103.375 246.75 mo
95.375 246.75 ln
111.375 233 mo
95.375 233 ln
103.375 219.25 mo
95.375 219.25 ln
103.375 205.25 mo
95.375 205.25 ln
103.375 191.5 mo
95.375 191.5 ln
111.375 177.5 mo
95.375 177.5 ln
103.375 163.75 mo
95.375 163.75 ln
103.375 150 mo
95.375 150 ln
103.375 136 mo
95.375 136 ln
111.375 122.25 mo
95.375 122.25 ln
103.375 108.5 mo
95.375 108.5 ln
103.375 94.5 mo
95.375 94.5 ln
103.375 80.75 mo
95.375 80.75 ln
111.375 67 mo
95.375 67 ln
103.375 53 mo
95.375 53 ln
103.375 39.25 mo
95.375 39.25 ln
103.375 25.25 mo
95.375 25.25 ln
111.375 11.5 mo
95.375 11.5 ln
111.375 343.75 mo
95.375 343.75 ln
103.375 357.5 mo
95.375 357.5 ln
103.375 371.5 mo
95.375 371.5 ln
s
save_ctm
%ADOBeginSubsetFont: Symbol Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/version (001.008) def
/FullName (Symbol) def
/FamilyName (Symbol) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Symbol def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -180 -293 1090 1010 } def
/XUID [6 42996 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECAB94698AF
13A4485757691763CAA8023293C6742E3899EDC5BE94ADFC42A0C0027CA6214B
7F8D5F616C6C2330D450A707B93BDD387F8829CFEF02A72B512D93C14DC1F17C
3175B113E267D8BD6A1447D88A441810C35BAC725EC0017275261A74EB5067CD
9834D1E000DA4929128802A4406C63EAAE5098C3B673FB571CE4AA66227384BC
D1F9516217661F446651CBD433BDBB210B8CB1C0AE7FE1EE2E21077BC11F9270
69E30D1E3AF26358279873C2B62D3AA5368EC87D6A567E789674A8EEED694D74
E8AE78AD599DE625132DC2B96E4C1518B04F598401F1080D43B1530D7089A208
39AB479C8D65D6823FDE8C7085D829EBF9BFD791C95C71C65AE4EC2A01CBA5FA
992ED2E4C180E84DC6E14861844CD132B73A4AA658AD9BE20B35514AC67BF58E
E4587AAC0BA16313B83C2C222F018E737313614351D1EFBF36BD83A38ED9DB6B
D6191BB6160AAC9612D574C3028C8C52B52925658ED342DA958D4100DABE516F
4733BF895741A1EA34A4707864910DD7E8EFE407898B7BCC27AC062D1BA4F11A
73F4342E2D8EF6E101C80AABBFD820974B1F3CC33D070E3C0CF97490AE3CCF18
630A6E2BD4007310EF65E793C445E48BC171043FCE380624354787BC936241D0
3306C33061D7EDD92FAC67F671457CD23F6931B947E97BDA7754E5F56D611220
5C4E82C2815584BF47A854236D460FE90AEE8B7FC419C26F68EB007CE6ED0053
856FABF9D7B6E5E6D910A77FDC4019BC55466E90A87476719B3A8CE5B38E4592
40DEDD91E229FB5784ED9E5A05747D938589B5554723ABC8F7F565F9F7AE6BCF
106F2212EAA54EE7DDD86863B30DFFB84D259A8FD24352AD855813AA02791C07
3824963AA973AEB925BCB75D7B8B65680FFF2B750A7939CBD880C8467D1104DF
9F15B0A8B2E43C7F445BA84DDD777444FD9E2416992213E6D0A936603D381689
9E5E55FFC73083C43CA8A15EAD3BEE4D6AFAD49938AC763CA6CEFF4F499F6EB0
303C5FD86A6DA9601B64F321DE385311C18C43E18842F9D2B0445C853100194C
0EB4F0E368EF73081F98B787C0FD723F3DC0FFF2116676894617D05260524DFA
1C1424BBA73EEF75D8DBD86066850389ABCFEBF01C39C364A46182E47BEB9F55
679298A5A04190FF534218EAB65BEEFD74CF10AB8678EF1F6D0571C160A9603A
CDD271F08AD4812C1D7BD5CCE2DAE0170DD34BEB8CEFCD53644795C872A14E50
D6AAD6F1B8D7189729AE7ADFDCB5DF991B245C81CE2308BCC82D48707AFFA4C9
A4C87D5DC67236E08C7B144AA696669DC25D82589F7BBC7ECEFD474AB108069A
375F2B6B927C6D4C970478E059126CFAAFAE963C89B348FA0CEE452DBAB4A8AA
DC47F03B0A479DA258DE4F981B8B1519E8142B98A32C065A92D354FBE9ECD7A3
B1C375B7A9245CB30CCF340911CC422189F990E1E37FC8E4F07E85FF47F75382
AB7BF88E63710768251F5A117EE590F3B211ABE680E4BF08B0E4A58281C9AEC9
27E60397CF3FD7431A31A574EDC2745160E41518D380FF37874AFD84BD9DAD7D
8B718D986176DCA62C416EC283AD785D8AAD9D37A91AD61A8C1E887E391A4F89
FD85164C1206C81E3969069AD21F66D848E1A774715A43F08DF8F4283497AD60
64CA52ABAF0F4E08B22BCF418BC11A248B0E0CF7676D0AA0ACD8C4C7DFA9A9C7
D84DDE52C75191B37F13AD35EDEBAA3BC413775585635C01C6DF76B1C1EA980C
83717A9DDAA9B00C29FAC932D5D91EEC903E38469E61B3076E53A5D94076A231
63DFE4B9A34AFDD642BA67D5DE51335B16D063C6C07E93C641DB979E8C111447
88D29363B53DFD5095956CE33BD1A1B19323
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 114 /rho put
pop
%ADOEndSubsetFont
/Symbol*1 
[
114{/.notdef}repeat /rho 141{/.notdef}repeat
] /Symbol nfnt
/Symbol*1 findfont [0 -22 -22 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 210.75 mov
(r) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.75 353.5 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50.4292 353.5 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/six 
<10bf3170435d0d4425184fc061c7faa8dc6baee8c868da453cb6a6f891b2
5354e14cb1bc5e0a0fcae04743a9daec5483058e0dde89957524c8915b19
25146f588ef5a70cf81e2e4fc7890fddf0f5d4c16f77c4469f58479cdd1b
49f5c68eada3087814223d9b5aa8284ce9770f7175297744c20f41a48dc8
d286517deb8893f3230571eaf9ea1ba0abf787d646e1631373082ff4df40
4c74838bb86fd789e63cac0da4dceabebd4d0fc0472fd6a9ca90e64e3c08
8853c020aae52cb442800bb6081c0fefcb0a206f46cf4ec1e25c13c94cbb
330a8f2762> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6f92fe7d0382cbfbcdc7b1ae90f5804442d3ad6d5e65
ea646fb35cdd7e11033e2adda681e7c859039849d6dc5ed2ddeff6a08225
d8f51551f3de1fe8a008c3292192037d710bd142b0870ce031e718da3ef6
d3433e72ed0f460e2a4d68b080691bc3e7e1f307fb1e0e53bcb7db60f146
7b82fe22e2d41fbef278c3fdcb5b6d458b0439abc5768f2ce7c9570fa1d6
c4be1808a48200bf465a45f457def4538c8fb72d6cd74c82c40277b5b6e7
fea6be29486ac098b8cb486a6ef4b50bb3d786b334b9913c9609ad75ea2f
ed8e7505ac0f1bb96c923835d10b3ab9> ND 
end end
end
/ArialMT findfont /Encoding get
dup 54 /six put
dup 56 /eight put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
54{/.notdef}repeat /six /.notdef /eight 199{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.2637 353.5 mov
(68) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50.5 297.75 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.1792 297.75 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/seven 
<10bf317048559e9c292b4762aa54ba120a145df60b670d87c36c3ee92d5b
39c9648a6d5ce1131c9257911f8bc7e67b7a2848cf37308ba0025304ca48
4c163915b2d4c913b4486d09> ND 
end end
end
/ArialMT findfont /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
55{/.notdef}repeat /seven 200{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
68.0137 297.75 mov
(7) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.75 242 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50.4292 242 mov
(.) sh
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.2637 242 mov
(7) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
67.9429 242 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
37.75 187.25 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
49.4292 187.25 mov
(.) sh
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
55.2637 187.25 mov
(7) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
66.9429 187.25 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
37.75 131.5 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
49.4292 131.5 mov
(.) sh
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
55.2637 131.5 mov
(7) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
66.9429 131.5 mov
(6) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.75 75.75 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50.4292 75.75 mov
(.) sh
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.2637 75.75 mov
(7) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
67.9429 75.75 mov
(8) sh
restore_ctm
0 0 0 1 cmyk
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50.5 21 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.1792 21 mov
(.) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
68.0137 21 mov
(8) sh
95.625 122.25 mo
95.625 107.75 ln
639.624 107.75 ln
639.624 122.25 ln
95.625 122.25 ln
0.2706 0.1922 0.1608 0.0314 cmyk
ef
[3 3 ] 0 dsh
95.625 78.25 mo
639.624 78.25 ln
0 0 0 1 cmyk
s
[] 0 dsh
245.125 151.75 mo
245.125 151.5 ln
243.125 151.5 mo
247.125 151.5 ln
245.125 165.5 mo
245.125 166 ln
243.125 166 mo
247.125 166 ln
272.375 162 mo
272.375 161.75 ln
270.375 161.75 mo
274.125 161.75 ln
272.375 175.5 mo
272.375 175.75 ln
270.375 175.75 mo
274.125 175.75 ln
299.625 131.5 mo
299.625 129.75 ln
297.625 129.75 mo
301.375 129.75 ln
299.625 145 mo
299.625 146.75 ln
297.625 146.75 mo
301.375 146.75 ln
326.625 154 mo
326.625 152 ln
324.875 152 mo
328.625 152 ln
326.625 167.75 mo
326.625 169.5 ln
324.875 169.5 mo
328.625 169.5 ln
353.875 154.5 mo
353.875 151.5 ln
351.875 151.5 mo
355.875 151.5 ln
353.875 168.25 mo
353.875 171.25 ln
351.875 171.25 mo
355.875 171.25 ln
381.124 155.75 mo
381.124 152 ln
379.124 152 mo
383.124 152 ln
381.124 169.25 mo
381.124 173 ln
379.124 173 mo
383.124 173 ln
408.374 154.5 mo
408.374 149 ln
406.374 149 mo
410.374 149 ln
408.374 168.25 mo
408.374 173.75 ln
406.374 173.75 mo
410.374 173.75 ln
435.624 156.25 mo
435.624 148.5 ln
433.624 148.5 mo
437.624 148.5 ln
435.624 170 mo
435.624 178 ln
433.624 178 mo
437.624 178 ln
462.874 159.75 mo
462.874 150.5 ln
460.874 150.5 mo
464.624 150.5 ln
462.874 173.5 mo
462.874 182.5 ln
460.874 182.5 mo
464.624 182.5 ln
462.874 159.125 mo
455.499 173.875 ln
470.249 173.875 ln
462.874 159.125 ln
cp
435.624 155.875 mo
428.249 170.625 ln
442.999 170.625 ln
435.624 155.875 ln
cp
408.374 153.875 mo
400.999 168.625 ln
415.749 168.625 ln
408.374 153.875 ln
cp
381.124 155.125 mo
373.749 169.875 ln
388.499 169.875 ln
381.124 155.125 ln
cp
353.875 153.875 mo
346.5 168.625 ln
361.25 168.625 ln
353.875 153.875 ln
cp
326.625 153.375 mo
319.25 168.125 ln
334 168.125 ln
326.625 153.375 ln
cp
299.625 130.875 mo
292.25 145.625 ln
307 145.625 ln
299.625 130.875 ln
cp
272.375 161.375 mo
265 176.125 ln
279.75 176.125 ln
272.375 161.375 ln
cp
245.125 151.375 mo
237.75 166.125 ln
252.5 166.125 ln
245.125 151.375 ln
cp
217.875 151.875 mo
210.5 166.625 ln
225.25 166.625 ln
217.875 151.875 ln
cp
190.625 149.875 mo
183.25 164.625 ln
198 164.625 ln
190.625 149.875 ln
cp
163.375 166.875 mo
156 181.625 ln
170.75 181.625 ln
163.375 166.875 ln
cp
136.125 199.125 mo
128.75 213.875 ln
143.5 213.875 ln
136.125 199.125 ln
cp
136.125 244.75 mo
136.125 244.5 ln
134.375 244.5 mo
138.125 244.5 ln
136.125 258.5 mo
136.125 258.75 ln
134.375 258.75 mo
138.125 258.75 ln
163.375 209 mo
163.375 208 ln
161.375 208 mo
165.375 208 ln
163.375 222.5 mo
163.375 223.5 ln
161.375 223.5 mo
165.375 223.5 ln
190.625 191.5 mo
190.625 188.75 ln
188.625 188.75 mo
192.625 188.75 ln
190.625 205.25 mo
190.625 208 ln
188.625 208 mo
192.625 208 ln
217.875 176.75 mo
217.875 173.5 ln
215.875 173.5 mo
219.875 173.5 ln
217.875 190.5 mo
217.875 193.75 ln
215.875 193.75 mo
219.875 193.75 ln
245.125 207 mo
245.125 201.25 ln
243.125 201.25 mo
247.125 201.25 ln
245.125 220.75 mo
245.125 226.5 ln
243.125 226.5 mo
247.125 226.5 ln
272.375 208.5 mo
272.375 204.75 ln
270.375 204.75 mo
274.125 204.75 ln
272.375 222 mo
272.375 225.5 ln
270.375 225.5 mo
274.125 225.5 ln
299.625 138.25 mo
299.625 129 ln
297.625 129 mo
301.375 129 ln
299.625 152 mo
299.625 161.25 ln
297.625 161.25 mo
301.375 161.25 ln
326.625 181.25 mo
326.625 174.5 ln
324.875 174.5 mo
328.625 174.5 ln
326.625 194.75 mo
326.625 201.5 ln
324.875 201.5 mo
328.625 201.5 ln
353.875 167.5 mo
353.875 158.5 ln
351.875 158.5 mo
355.875 158.5 ln
353.875 181.25 mo
353.875 190.25 ln
351.875 190.25 mo
355.875 190.25 ln
381.124 172.75 mo
381.124 164.25 ln
379.124 164.25 mo
383.124 164.25 ln
381.124 186.5 mo
381.124 195.25 ln
379.124 195.25 mo
383.124 195.25 ln
408.374 153.5 mo
408.374 143.25 ln
406.374 143.25 mo
410.374 143.25 ln
408.374 167 mo
408.374 177 ln
406.374 177 mo
410.374 177 ln
435.624 164 mo
435.624 149.25 ln
433.624 149.25 mo
437.624 149.25 ln
435.624 177.75 mo
435.624 192.5 ln
433.624 192.5 mo
437.624 192.5 ln
462.874 167.75 mo
462.874 148.75 ln
460.874 148.75 mo
464.624 148.75 ln
462.874 181.5 mo
462.874 200.5 ln
460.874 200.5 mo
464.624 200.5 ln
s
470.31 174.71 mo
470.31 170.639 467.005 167.335 462.935 167.335 cv
458.863 167.335 455.56 170.639 455.56 174.71 cv
455.56 178.781 458.863 182.085 462.935 182.085 cv
467.005 182.085 470.31 178.781 470.31 174.71 cv
ef
442.949 170.99 mo
442.949 166.919 439.646 163.615 435.574 163.615 cv
431.503 163.615 428.199 166.919 428.199 170.99 cv
428.199 175.061 431.503 178.365 435.574 178.365 cv
439.646 178.365 442.949 175.061 442.949 170.99 cv
ef
415.709 160.19 mo
415.709 156.119 412.405 152.815 408.334 152.815 cv
404.264 152.815 400.959 156.119 400.959 160.19 cv
400.959 164.261 404.264 167.565 408.334 167.565 cv
412.405 167.565 415.709 164.261 415.709 160.19 cv
ef
388.469 179.75 mo
388.469 175.679 385.165 172.375 381.094 172.375 cv
377.023 172.375 373.719 175.679 373.719 179.75 cv
373.719 183.821 377.023 187.125 381.094 187.125 cv
385.165 187.125 388.469 183.821 388.469 179.75 cv
ef
361.23 174.47 mo
361.23 170.399 357.926 167.095 353.855 167.095 cv
349.783 167.095 346.48 170.399 346.48 174.47 cv
346.48 178.541 349.783 181.845 353.855 181.845 cv
357.926 181.845 361.23 178.541 361.23 174.47 cv
ef
333.99 188.03 mo
333.99 183.959 330.686 180.655 326.615 180.655 cv
322.543 180.655 319.24 183.959 319.24 188.03 cv
319.24 192.101 322.543 195.405 326.615 195.405 cv
330.686 195.405 333.99 192.101 333.99 188.03 cv
ef
306.99 145.31 mo
306.99 141.239 303.686 137.935 299.615 137.935 cv
295.543 137.935 292.24 141.239 292.24 145.31 cv
292.24 149.381 295.543 152.685 299.615 152.685 cv
303.686 152.685 306.99 149.381 306.99 145.31 cv
ef
279.75 215.27 mo
279.75 211.199 276.445 207.895 272.375 207.895 cv
268.303 207.895 265 211.199 265 215.27 cv
265 219.341 268.303 222.645 272.375 222.645 cv
276.445 222.645 279.75 219.341 279.75 215.27 cv
ef
252.51 213.71 mo
252.51 209.639 249.205 206.335 245.135 206.335 cv
241.064 206.335 237.76 209.639 237.76 213.71 cv
237.76 217.781 241.064 221.085 245.135 221.085 cv
249.205 221.085 252.51 217.781 252.51 213.71 cv
ef
225.27 183.71 mo
225.27 179.639 221.965 176.335 217.895 176.335 cv
213.824 176.335 210.52 179.639 210.52 183.71 cv
210.52 187.781 213.824 191.085 217.895 191.085 cv
221.965 191.085 225.27 187.781 225.27 183.71 cv
ef
198.029 198.47 mo
198.029 194.399 194.725 191.095 190.654 191.095 cv
186.584 191.095 183.279 194.399 183.279 198.47 cv
183.279 202.541 186.584 205.845 190.654 205.845 cv
194.725 205.845 198.029 202.541 198.029 198.47 cv
ef
170.789 215.75 mo
170.789 211.679 167.486 208.375 163.414 208.375 cv
159.344 208.375 156.039 211.679 156.039 215.75 cv
156.039 219.821 159.344 223.125 163.414 223.125 cv
167.486 223.125 170.789 219.821 170.789 215.75 cv
ef
143.549 251.75 mo
143.549 247.679 140.246 244.375 136.174 244.375 cv
132.104 244.375 128.799 247.679 128.799 251.75 cv
128.799 255.821 132.104 259.125 136.174 259.125 cv
140.246 259.125 143.549 255.821 143.549 251.75 cv
ef
125.375 138.5 mo
133.625 138.5 ln
s
125.375 138.5 mo
125.375 143 ln
s
133.625 138.5 mo
133.625 143 ln
s
125.375 268.25 mo
133.625 268.25 ln
s
125.375 268.25 mo
125.375 263.75 ln
s
133.625 268.25 mo
133.625 263.75 ln
s
152.625 131 mo
160.625 131 ln
s
152.625 131 mo
152.625 135.25 ln
s
160.625 131 mo
160.625 135.25 ln
s
152.625 260 mo
160.625 260 ln
s
152.625 260 mo
152.625 255.75 ln
s
160.625 260 mo
160.625 255.75 ln
s
179.875 144.5 mo
187.875 144.5 ln
s
179.875 144.5 mo
179.875 149 ln
s
187.875 144.5 mo
187.875 149 ln
s
179.875 245.25 mo
187.875 245.25 ln
s
179.875 245.25 mo
179.875 241 ln
s
187.875 245.25 mo
187.875 241 ln
s
206.875 155.25 mo
215.125 155.25 ln
s
206.875 155.25 mo
206.875 159.5 ln
s
215.125 155.25 mo
215.125 159.5 ln
s
206.875 246 mo
215.125 246 ln
s
206.875 246 mo
206.875 241.75 ln
s
215.125 246 mo
215.125 241.75 ln
s
234.125 160.75 mo
242.375 160.75 ln
s
234.125 160.75 mo
234.125 165.25 ln
s
242.375 160.75 mo
242.375 165.25 ln
s
234.125 256 mo
242.375 256 ln
s
234.125 256 mo
234.125 251.5 ln
s
242.375 256 mo
242.375 251.5 ln
s
261.375 178.5 mo
269.625 178.5 ln
s
261.375 178.5 mo
261.375 183 ln
s
269.625 178.5 mo
269.625 183 ln
s
261.375 244 mo
269.625 244 ln
s
261.375 244 mo
261.375 239.75 ln
s
269.625 244 mo
269.625 239.75 ln
s
288.625 146.75 mo
296.875 146.75 ln
s
288.625 146.75 mo
288.625 151 ln
s
296.875 146.75 mo
296.875 151 ln
s
288.625 211.5 mo
296.875 211.5 ln
s
288.625 211.5 mo
288.625 207 ln
s
296.875 211.5 mo
296.875 207 ln
s
315.875 154 mo
323.875 154 ln
s
315.875 154 mo
315.875 158.25 ln
s
323.875 154 mo
323.875 158.25 ln
s
315.875 207 mo
323.875 207 ln
s
315.875 207 mo
315.875 202.5 ln
s
323.875 207 mo
323.875 202.5 ln
s
343.125 135.75 mo
351.125 135.75 ln
s
343.125 135.75 mo
343.125 140 ln
s
351.125 135.75 mo
351.125 140 ln
s
343.125 193.5 mo
351.125 193.5 ln
s
343.125 193.5 mo
343.125 189 ln
s
351.125 193.5 mo
351.125 189 ln
s
370.374 141.75 mo
378.374 141.75 ln
s
370.374 141.75 mo
370.374 146.25 ln
s
378.374 141.75 mo
378.374 146.25 ln
s
370.374 199.5 mo
378.374 199.5 ln
s
370.374 199.5 mo
370.374 195.25 ln
s
378.374 199.5 mo
378.374 195.25 ln
s
397.374 122.5 mo
405.624 122.5 ln
s
397.374 122.5 mo
397.374 126.75 ln
s
405.624 122.5 mo
405.624 126.75 ln
s
397.374 180.25 mo
405.624 180.25 ln
s
397.374 180.25 mo
397.374 176 ln
s
405.624 180.25 mo
405.624 176 ln
s
424.624 121.75 mo
432.874 121.75 ln
s
424.624 121.75 mo
424.624 126.25 ln
s
432.874 121.75 mo
432.874 126.25 ln
s
424.624 179.75 mo
432.874 179.75 ln
s
424.624 179.75 mo
424.624 175.25 ln
s
432.874 179.75 mo
432.874 175.25 ln
s
451.874 94 mo
460.124 94 ln
s
451.874 94 mo
451.874 98.25 ln
s
460.124 94 mo
460.124 98.25 ln
s
451.874 151.75 mo
460.124 151.75 ln
s
451.874 151.75 mo
451.874 147.5 ln
s
460.124 151.75 mo
460.124 147.5 ln
s
479.124 71.5 mo
487.374 71.5 ln
s
479.124 71.5 mo
479.124 76 ln
s
487.374 71.5 mo
487.374 76 ln
s
479.124 129.25 mo
487.374 129.25 ln
s
479.124 129.25 mo
479.124 125 ln
s
487.374 129.25 mo
487.374 125 ln
s
506.374 107 mo
514.374 107 ln
s
506.374 107 mo
506.374 111.25 ln
s
514.374 107 mo
514.374 111.25 ln
s
506.374 164.75 mo
514.374 164.75 ln
s
506.374 164.75 mo
506.374 160.25 ln
s
514.374 164.75 mo
514.374 160.25 ln
s
533.624 94 mo
541.624 94 ln
s
533.624 94 mo
533.624 98.5 ln
s
541.624 94 mo
541.624 98.5 ln
s
533.624 151.75 mo
541.624 151.75 ln
s
533.624 151.75 mo
533.624 147.5 ln
s
541.624 151.75 mo
541.624 147.5 ln
s
560.624 130.25 mo
568.874 130.25 ln
s
560.624 130.25 mo
560.624 134.75 ln
s
568.874 130.25 mo
568.874 134.75 ln
s
560.624 188 mo
568.874 188 ln
s
560.624 188 mo
560.624 183.75 ln
s
568.874 188 mo
568.874 183.75 ln
s
587.874 99.75 mo
596.124 99.75 ln
s
587.874 99.75 mo
587.874 104 ln
s
596.124 99.75 mo
596.124 104 ln
s
587.874 157.5 mo
596.124 157.5 ln
s
587.874 157.5 mo
587.874 153 ln
s
596.124 157.5 mo
596.124 153 ln
s
615.124 84.25 mo
623.374 84.25 ln
s
615.124 84.25 mo
615.124 88.75 ln
s
623.374 84.25 mo
623.374 88.75 ln
s
615.124 142 mo
623.374 142 ln
s
615.124 142 mo
615.124 137.75 ln
s
623.374 142 mo
623.374 137.75 ln
s
455.874 113 mo
455.874 111 ln
s
454.124 111 mo
457.874 111 ln
s
455.874 132.75 mo
455.874 134.75 ln
s
454.124 134.75 mo
457.874 134.75 ln
s
483.124 90.75 mo
483.124 85.5 ln
s
481.124 85.5 mo
485.124 85.5 ln
s
483.124 110.25 mo
483.124 115.5 ln
s
481.124 115.5 mo
485.124 115.5 ln
s
510.374 126 mo
510.374 116.5 ln
s
508.374 116.5 mo
512.374 116.5 ln
s
510.374 145.5 mo
510.374 155 ln
s
508.374 155 mo
512.374 155 ln
s
537.624 113.25 mo
537.624 107.25 ln
s
535.624 107.25 mo
539.624 107.25 ln
s
537.624 132.75 mo
537.624 138.75 ln
s
535.624 138.75 mo
539.624 138.75 ln
s
564.874 149.5 mo
564.874 140 ln
s
562.874 140 mo
566.874 140 ln
s
564.874 169 mo
564.874 178.25 ln
s
562.874 178.25 mo
566.874 178.25 ln
s
592.124 118.75 mo
592.124 106.25 ln
s
590.124 106.25 mo
593.874 106.25 ln
s
592.124 138.25 mo
592.124 150.75 ln
s
590.124 150.75 mo
593.874 150.75 ln
s
619.124 103.5 mo
619.124 86.25 ln
s
617.374 86.25 mo
621.124 86.25 ln
s
619.124 123 mo
619.124 140 ln
s
617.374 140 mo
621.124 140 ln
s
619.124 103.5 mo
612.624 113.25 ln
619.124 123 ln
625.624 113.25 ln
619.124 103.5 ln
0.0118 0.9608 0.9137 0 cmyk
f
619.124 103.5 mo
612.624 113.25 ln
619.124 123 ln
625.624 113.25 ln
619.124 103.5 ln
cp
s
592.124 118.75 mo
585.624 128.5 ln
592.124 138.25 ln
598.624 128.5 ln
592.124 118.75 ln
f
592.124 118.75 mo
585.624 128.5 ln
592.124 138.25 ln
598.624 128.5 ln
592.124 118.75 ln
cp
s
564.874 149.5 mo
558.374 159.25 ln
564.874 169 ln
571.374 159.25 ln
564.874 149.5 ln
f
564.874 149.5 mo
558.374 159.25 ln
564.874 169 ln
571.374 159.25 ln
564.874 149.5 ln
cp
s
537.624 113.25 mo
531.124 123 ln
537.624 132.75 ln
544.124 123 ln
537.624 113.25 ln
f
537.624 113.25 mo
531.124 123 ln
537.624 132.75 ln
544.124 123 ln
537.624 113.25 ln
cp
s
510.374 126 mo
503.874 135.75 ln
510.374 145.5 ln
516.874 135.75 ln
510.374 126 ln
f
510.374 126 mo
503.874 135.75 ln
510.374 145.5 ln
516.874 135.75 ln
510.374 126 ln
cp
s
483.124 90.75 mo
476.624 100.5 ln
483.124 110.25 ln
489.624 100.5 ln
483.124 90.75 ln
f
483.124 90.75 mo
476.624 100.5 ln
483.124 110.25 ln
489.624 100.5 ln
483.124 90.75 ln
cp
s
455.874 113 mo
449.374 122.75 ln
455.874 132.5 ln
462.374 122.75 ln
455.874 113 ln
f
455.874 113 mo
449.374 122.75 ln
455.874 132.5 ln
462.374 122.75 ln
455.874 113 ln
cp
s
428.874 141 mo
422.374 150.75 ln
428.874 160.5 ln
435.374 150.75 ln
428.874 141 ln
f
428.874 141 mo
422.374 150.75 ln
428.874 160.5 ln
435.374 150.75 ln
428.874 141 ln
cp
s
401.624 141.75 mo
395.124 151.5 ln
401.624 161.25 ln
408.124 151.5 ln
401.624 141.75 ln
f
401.624 141.75 mo
395.124 151.5 ln
401.624 161.25 ln
408.124 151.5 ln
401.624 141.75 ln
cp
s
374.374 161 mo
367.875 170.75 ln
374.374 180.5 ln
380.874 170.75 ln
374.374 161 ln
f
374.374 161 mo
367.875 170.75 ln
374.374 180.5 ln
380.874 170.75 ln
374.374 161 ln
cp
s
347.125 154.75 mo
340.625 164.5 ln
347.125 174.25 ln
353.625 164.5 ln
347.125 154.75 ln
f
347.125 154.75 mo
340.625 164.5 ln
347.125 174.25 ln
353.625 164.5 ln
347.125 154.75 ln
cp
s
319.875 168.25 mo
313.375 178 ln
319.875 187.75 ln
326.375 178 ln
319.875 168.25 ln
f
319.875 168.25 mo
313.375 178 ln
319.875 187.75 ln
326.375 178 ln
319.875 168.25 ln
cp
s
292.625 172.75 mo
286.125 182.5 ln
292.625 192.25 ln
299.125 182.5 ln
292.625 172.75 ln
f
292.625 172.75 mo
286.125 182.5 ln
292.625 192.25 ln
299.125 182.5 ln
292.625 172.75 ln
cp
s
265.375 205.25 mo
258.875 215 ln
265.375 224.75 ln
271.875 215 ln
265.375 205.25 ln
f
265.375 205.25 mo
258.875 215 ln
265.375 224.75 ln
271.875 215 ln
265.375 205.25 ln
cp
s
238.375 217.25 mo
231.875 227 ln
238.375 236.75 ln
244.875 227 ln
238.375 217.25 ln
f
238.375 217.25 mo
231.875 227 ln
238.375 236.75 ln
244.875 227 ln
238.375 217.25 ln
cp
s
211.125 207.5 mo
204.625 217.25 ln
211.125 227 ln
217.625 217.25 ln
211.125 207.5 ln
f
211.125 207.5 mo
204.625 217.25 ln
211.125 227 ln
217.625 217.25 ln
211.125 207.5 ln
cp
s
183.875 206.75 mo
177.375 216.5 ln
183.875 226.25 ln
190.375 216.5 ln
183.875 206.75 ln
f
183.875 206.75 mo
177.375 216.5 ln
183.875 226.25 ln
190.375 216.5 ln
183.875 206.75 ln
cp
s
156.625 221.5 mo
150.125 231.25 ln
156.625 241 ln
163.125 231.25 ln
156.625 221.5 ln
f
156.625 221.5 mo
150.125 231.25 ln
156.625 241 ln
163.125 231.25 ln
156.625 221.5 ln
cp
s
129.375 229.5 mo
122.875 239.25 ln
129.375 249 ln
135.875 239.25 ln
129.375 229.5 ln
f
129.375 229.5 mo
122.875 239.25 ln
129.375 249 ln
135.875 239.25 ln
129.375 229.5 ln
cp
s
save_ctm
restore_ctm
0 0 0 1 cmyk
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
397.624 277.25 mov
(M) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac576702c4654165111c4e219216
925a1bbda37b8221ddb4f3d7ef9dc32fffa987a0f0ea03488171acb09982
96179b683649315a4b1534> ND 
/B 
<10bf317026ba62063ac1fc9b1b7da70a4283bca66508b7487db96d3b5e50
ebb26d781c08b71d8c60e86f5f95e258aadae78cebfccceace7d1e24a04f
7a0ebebb84d24fd6e0dcc7805db6e5cdf4eb0699290a048d32bdfc7bda09
b014801b6912f42581f07cfc0dad1f3a0fda97cccb6dc64f3c2133712b38
17f9dcf78f219a31023477457afb4124f2e67688f81d2fae0a3d889fa20e
a1e4d003c07fa3b1c5e475e398065490772a2317b8a1741177b48843cacc
98258835f7713d01ccd04d20a02276a9eaa215ecd7e642af0d478b9844bc
79867bee2d8cdbfd06> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 43 /plus put
dup 65 /A put
dup 66 /B put
dup 100 /d put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*12 
[
43{/.notdef}repeat /plus 21{/.notdef}repeat /A /B 33{/.notdef}repeat /d 4{/.notdef}repeat 
/i 3{/.notdef}repeat /m /n 6{/.notdef}repeat /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
419.282 277.25 mov
(inimum) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
503.071 277.25 mov
( ) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
510.295 277.25 mov
(Bi) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
533.413 277.25 mov
(as ) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
568.097 277.25 mov
(d+Au) sh
376.624 256.25 mo
370.124 266 ln
376.624 275.75 ln
383.124 266 ln
376.624 256.25 ln
0.0118 0.9608 0.9137 0 cmyk
f
376.624 256.25 mo
370.124 266 ln
376.624 275.75 ln
383.124 266 ln
376.624 256.25 ln
cp
s
save_ctm
restore_ctm
0 0 0 1 cmyk
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
397.624 309.5 mov
(M) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
419.282 309.5 mov
(inimum) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
503.071 309.5 mov
( ) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
510.295 309.5 mov
(Bi) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
533.413 309.5 mov
(as ) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
568.097 309.5 mov
(p) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
582.557 309.5 mov
(+) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
597.74 309.5 mov
(p) sh
376.624 294.625 mo
369.249 309.375 ln
383.999 309.375 ln
376.624 294.625 ln
cp
s
save_ctm
restore_ctm
384.029 338.27 mo
384.029 334.199 380.725 330.895 376.654 330.895 cv
372.583 330.895 369.279 334.199 369.279 338.27 cv
369.279 342.341 372.583 345.645 376.654 345.645 cv
380.725 345.645 384.029 342.341 384.029 338.27 cv
ef
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/H 
<10bf317029572e11ba08a126ba806446a0c9c3ab3c813945ebc6acc68365
3aed03753c654018a3b91d9f74de> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d72467d80a581885
24220eb6bee82e9b32f5b916df53626433a323d6d12473722cbcba013869
499dd3fb1dec583e9e14facd47321621de2b3f9ddf3cc6eb86fdec76a812
783b728a956498dd1c5c8de5262c828735f36e5b194a005655660bc84af2
55d132859316efaca31d3a694047b6098384c4c30c50971601792b4c1f0a
5b9c2fe963d7a927c7893353b47bcd78644a7e1009b67e7a9660e48eb4d1
99a373566b806d69acdcdb838640454b794e47e8e0135bdf> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd416a4f286324
3708bb18c93b6ff9009987165c661f3cf3b3d4268ae53d21376706d87451
5a09c8e0501f41699e842e2b1499d14714dfea5e38b494c7b6527dbf4887
431b1f716378> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0bc6dd6d1fb8ca
8bb9fc3e481d183ae50bbfabb21fc2a3f1f6595151c5a2f4acc8d226e0ff
0b4c85bc46ca5265bff351a7f03e78e04c2c72a9d7a9ee7a636db5f99d04
3f9d21fc223e35d9c765eb6b3d5d297173ba8b09f049b0d68aa85f244d1b
> ND 
end end
end
/ArialMT findfont /Encoding get
dup 72 /H put
dup 103 /g put
dup 104 /h put
dup 108 /l put
dup 116 /t put
dup 121 /y put
pop
%ADOEndSubsetFont
/ArialMT*13 
[
72{/.notdef}repeat /H 30{/.notdef}repeat /g /h 3{/.notdef}repeat /l 7{/.notdef}repeat 
/t 4{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*13 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
397.624 345.5 mov
(H) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
416.4 345.5 mov
(i) sh
/ArialMT*13 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
422.177 345.5 mov
(gh) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
451.097 345.5 mov
( M) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
479.979 345.5 mov
(u) sh
/ArialMT*13 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
494.438 345.5 mov
(lt) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
507.438 345.5 mov
(i) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
513.215 345.5 mov
(p) sh
/ArialMT*13 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
527.675 345.5 mov
(l) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
533.451 345.5 mov
(i) sh
/ArialMT*1 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
539.228 345.5 mov
(c) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
552.228 345.5 mov
(i) sh
/ArialMT*13 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
558.004 345.5 mov
(ty) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
578.228 345.5 mov
( ) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
585.451 345.5 mov
(p) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
599.911 345.5 mov
(+) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
615.095 345.5 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/ArialMT*14 
[
84{/.notdef}repeat /T 171{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*14 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
537.5 429.385 mov
(T) sh
restore_ctm
save_ctm
/Symbol*1 findfont [28 0 0 -28 0 0 ]mfnt sfnt
BuildWidthShowArray
223.5 328.385 mov
(r) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
238.5 318.385 mov
(0) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Myriad-Roman Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def
/version (001.000) def
/FullName (Myriad Roman) def
/FamilyName (Myriad) def
/Weight (Regular) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Myriad-Roman def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -46 -250 1126 831 } def
/XUID [6 41987 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3EC70E14AF46
F38884AB0522111E1FD6B5E52246D33165D7360B47FEE2078BDAF9F5724920E2
B8C7C8DEF08111E9655FEB2D7D43B90DD0271717BD08D48D1209FEBFE7B9C4C9
04828D33C143D5CDA944594BA8901247766DFFF8952C9A24AE1BD58BEDD61A48
002D4E12E59AAE2CE61CDCD892A0D488E46BB11D275934A058DC403F9249464C
F61C23C6C10E0372E1EA3367BABCCE0F199F5CD368065DB3CD7C625DFBE6C6E3
C4435184BFD5C9F072C0598A01539B22ECF911D024581EB39CA2BF7A0C36CF22
E37CDB5F71581808EB0E787BBD02F5FB25567EDDF1EC95FE301368B0B8102BD3
AAB4B7E8B71CBFF6972229F316D0AEFC061AD3399DDE346299ECB31A83A98418
344E2E97898D7363EAB541538373BE23D4243A803C3FF9A965B961427BC4B9DE
B5FF10F3F520F390C40973A67362490932C7A48B137883FC1B7A022BBBD0055A
B51D30EED683A9737D528CBD3B610C95F23DCFFFD16006504D2855E2CE005067
61DD87A71647C8E5E3FCF1FEA23083019EFC2AA32B13D507E4D50400AFF6CB41
F420397CEB2CA05A8FA80C99EF216F3A922F7E0E46155024179124902CB456D8
CA615F1A5AFF0C00F2CB424D626D884F2D53FF37EF9D2C97581B660FE00AB871
1FA2E8452BAB42B77D2D7AF1C6B12F4D40497B22E875153F9144B82900F724F0
58326131E2DCB863486A40403B2BBF1EED1EB39770D8B1333D97A75C62E10020
0D69311B137B34208A669ABBB364A5543CEDCA630ECDD818CB177AA04F15A8FA
949650C5212F813432F341056E9525B7D7486266027FD149288478EC53F206D4
65F9557F8FDFF7D9BFAC0770FED3C2172B763453E30342D3452C2C98AE702420
1BEF8EFF03591DC6853CF36B8794AC38585C9136E4088F3E280D7744D8E48552
989AB673D4444A4C66FDCCBE989F08FEEC718B65B1D1447A93B31217C6E0E396
F08A7155DF5BAC8A10E96753E520397C7209C7E38202870224A8C9AD1E9038CC
3DD3DF89387E0A8F269DA7CD5324E9BA4D70028F8703EF8368751BF90F2D911A
4E9D675053E6FCA2B636142CE79B0D18BC98DBB71BC335573D2E15AB28A76A60
4EB2B91F22028823A015964FBBCF87000049A87CD8B629709FCD8C842C954C20
FC27D39BD0E73E545BF0844D3FDAE10EDC8FDA4E477B22CDF62FF1E07C0AB4F4
6586311EC6DB3737CDDD605A5A1010FC0E7AF5D4FF6406B791BBA97A0162BC72
FE0057172F3C786BF7A4F0EB3894BA861C5D2C9C4C7E97C103229D9E7465C18E
ED1A6E9805E9E5D0A050DC0CB0EB1A7B18D99CDAF4960D71FB534EC9B01DEAF4
C91B2C5DAD98F330D52345DE1565C5ADA65A01AD19021A8BB6EA82FBD67A1C11
4B61F00B64416B609DE4BF81D764E6A2EA4621CF41EA7FC4C3CED615A08FC48D
023C9F98426B15478855E4D391E4C0A58E4277AE2A5BC831348D25FE0A11F9F5
F48C286E879D98E2C7F04BB111D10C2D4C38422C76A2A2DF2125B26FDF475581
35417D5D5DF6FACE66FD77587BC5F74FD037431D7A1FA6674365ABEFA88240E1
919246450AD57B40598E066A74236F4F28AF07B53437101AEB470A5DBFB39281
637939B77D59EF9750929384E33A7582FCB0F60BB4CF2AF086EA8FFAFB807E15
3192B409383CCAD497C25EF27ACEECF465922B66A65774A546CA67A5BC14461E
E558C6C829453E24CB75119E080EE5CA217F6B9735CADED51DCD33AA0C7B103A
AD076251AD99C2EACEE1D07A6C0F5A876A61913F7E6F4365A13EE67386F20FF3
232441504909CDCD8EC53E646D9AC347BB0D163EA51B5AEED4D04D57B438BFE6
94E1FE525A16B357D289A85ED1F66E68433A76E65DECFC3DD1E056DE27CB698E
25140948D7F242E77346DB08B2FEEB94CE99EC1E1C2A8B03D08C584C85ADA978
8FC8F2AB998490E4FBF0B919D076DF9116813509EFF1E267D5A06864239F2317
5D5E22B15D9495CC884E97E813BBAF141CB3E7B86E5BD7D594498A4741F3FE0E
41EB64694C1CE38347AEDBDA29BCB034CE332D18E2005BD2ED7749B33A9DB8CA
7828A933C00F01BFFE07C52107A0C300636912082545B8741B74856E53E74A2E
B303F2CB782A7925
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Myriad-Roman findfont /Encoding get
dup 32 /space put
dup 101 /e put
pop
%ADOEndSubsetFont
/Myriad-Roman*1 
[
32{/.notdef}repeat /space 68{/.notdef}repeat /e 154{/.notdef}repeat
] /Myriad-Roman nfnt
/Myriad-Roman*1 findfont [20 0 0 -20 0 0 ]mfnt sfnt
BuildWidthShowArray
125.45 74.6943 mov
(e  e) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Myriad-Roman AddGlyphs


currentfile eexec A0B00ED553D63FAFE824A74A2F0534BF603582F88D2F86
394523F376DD9F53887F5F6310538DBB296B3819C6F165EACFBAA2C996EC5A1D
C2CFB369AFB3291BB403946B397E4E01D3FD257AF38B43D80B06F0A1C9A2C6FB
3158DC87032F39817F3EE05360957178832C9177BF0799F0CD867C7EE0F4904E
C98E42B46F12DCA3517E065DD44348B345BA96A5888E5E8271DE56A4E1A8B1C0
3724868EAC2529FBC7D80C87E7E20442B6A6EEF9D461EA80EACF597438C54EE7
B27A8C3C1706F9A9A6577EB6B3847562B1DF3378C5C6AA4F0CC80C9CF26786A9
C119BE254B532519EED0B7D33A2C6664BC2BC4325EFFAD875B6689C771193ED9
3C723DD351D64CF5E3BD0B67FBBE616EDE54414EF42875AB139B4A83D1DD8C96
7E1095D9E8B2A64265C6FCB54DC0447C5F8F8D8E5C57CF47929980EFD6A3A73A
E103C07A57F791C80D6790F1CDC1619617699A66669EE36311460D3B7FFE13A5
64E32921216FB33A367AA175F3905483DC1EF9926F905583209E288A42B44838
5379A566716877CFB75BA88150E60883624D081915379D771B75
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Myriad-Roman findfont /Encoding get
dup 43 /plus put
dup 112 /p put
pop
%ADOEndSubsetFont
/Myriad-Roman*2 
[
43{/.notdef}repeat /plus 68{/.notdef}repeat /p 143{/.notdef}repeat
] /Myriad-Roman nfnt
/Myriad-Roman*2 findfont [20 0 0 -20 0 0 ]mfnt sfnt
BuildWidthShowArray
125.45 104.694 mov
(p+p) sh
restore_ctm
save_ctm
/Myriad-Roman*2 findfont [12 0 0 -12 0 0 ]mfnt sfnt
BuildWidthShowArray
136.5 66.3848 mov
(+) sh
restore_ctm
%ADOBeginSubsetFont: Myriad-Roman AddGlyphs


currentfile eexec A0B00ED553D63FAFE824A74A2F0534BF603582F88D2F86
394523F376DD9F53887F5F6310538DBB296B3819C6F165EACFBAA2C996EC5A1D
C2CFB369AFB3291BB403946B397E4E01D3FD257AF38B43D80B06F0A1C9A2C6FB
3158DC87032F39817F3EE05360957178832C9177BF0799F0CD867C7EE0F49056
6053462FC5A95E9A33A4491FA1C8E64B739590431A67BC0E63C3C97A4EF957A1
C64F6F61425EDBFEB5F13BBD8C97ADCFBE82737C42C43BB21DB6B1302968B61B
548B525E280D69678A5D6FF5205F7D6B2F4C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Myriad-Roman findfont /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/Myriad-Roman*3 
[
45{/.notdef}repeat /hyphen 210{/.notdef}repeat
] /Myriad-Roman nfnt
/Myriad-Roman*3 findfont [14 0 0 -14 0 0 ]mfnt sfnt
BuildWidthShowArray
156.5 67.3848 mov
(-) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
