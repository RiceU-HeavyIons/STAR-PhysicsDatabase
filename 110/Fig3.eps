%!PS-Adobe-3.1 EPSF-3.0
%%Title: PaperEffKStar.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 10/1/2007
%%CropBox: 0.000000 0.000000 650.025391 433.320313
%%BoundingBox: 0 0 651 434 
%%HiResBoundingBox: 0.000000 0.000000 650.025391 433.320313
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -433.32 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 433.32 ln
650.025 433.32 ln
650.025 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
91.582 380.5 mo
91.582 11.5 ln
635.832 11.5 ln
635.832 380.5 ln
91.582 380.5 ln
cp
false op
0 0 0 1 cmyk
s
91.582 380.5 mo
91.582 11.5 ln
635.832 11.5 ln
635.832 380.5 ln
91.582 380.5 ln
cp
91.582 380.5 mo
635.832 380.5 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e3088328e93e3f86c5266dab4a
4b6a0dbbd499ac2f08f52498a1230ac74b9126578260e72bf920c6626e18
e52befca2ad4c5c494a757a5861d225d61833e7b6db104708e0fcf59a03e
ddf773c2fe0a4faea092dc7a4d01275005fb3564e1d1f76f67c0ded9002e
e506fbb65143c90d6526880b9b4967a1233028aa9e8c3e30f59ec7f29cd2
713cffb71673b8ee9c01e77581750db787f4754cdac76007b210e32a2dfc
77791af6ea67a232e72999312d> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e231374dce1d715d27566dcf
115e95280405ef7103dd8183790f381980b4f25c32c305> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 71 /G put
dup 86 /V put
dup 99 /c put
dup 101 /e put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 5{/.notdef}repeat /slash 23{/.notdef}repeat 
/G 14{/.notdef}repeat /V 12{/.notdef}repeat /c /.notdef /e 154{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
540.582 418 mov
( \(GeV/c\)) sh
restore_ctm
91.582 369.5 mo
91.582 380.5 ln
103.832 375 mo
103.832 380.5 ln
115.832 375 mo
115.832 380.5 ln
127.832 375 mo
127.832 380.5 ln
140.082 375 mo
140.082 380.5 ln
152.082 369.5 mo
152.082 380.5 ln
164.082 375 mo
164.082 380.5 ln
176.332 375 mo
176.332 380.5 ln
188.332 375 mo
188.332 380.5 ln
200.582 375 mo
200.582 380.5 ln
212.582 369.5 mo
212.582 380.5 ln
224.582 375 mo
224.582 380.5 ln
236.832 375 mo
236.832 380.5 ln
248.832 375 mo
248.832 380.5 ln
260.832 375 mo
260.832 380.5 ln
273.082 369.5 mo
273.082 380.5 ln
285.082 375 mo
285.082 380.5 ln
297.332 375 mo
297.332 380.5 ln
309.332 375 mo
309.332 380.5 ln
321.332 375 mo
321.332 380.5 ln
333.582 369.5 mo
333.582 380.5 ln
345.582 375 mo
345.582 380.5 ln
357.582 375 mo
357.582 380.5 ln
369.832 375 mo
369.832 380.5 ln
381.832 375 mo
381.832 380.5 ln
394.082 369.5 mo
394.082 380.5 ln
406.082 375 mo
406.082 380.5 ln
418.082 375 mo
418.082 380.5 ln
430.332 375 mo
430.332 380.5 ln
442.332 375 mo
442.332 380.5 ln
454.332 369.5 mo
454.332 380.5 ln
466.582 375 mo
466.582 380.5 ln
478.582 375 mo
478.582 380.5 ln
490.832 375 mo
490.832 380.5 ln
502.832 375 mo
502.832 380.5 ln
514.832 369.5 mo
514.832 380.5 ln
527.082 375 mo
527.082 380.5 ln
539.082 375 mo
539.082 380.5 ln
551.082 375 mo
551.082 380.5 ln
563.332 375 mo
563.332 380.5 ln
575.332 369.5 mo
575.332 380.5 ln
587.582 375 mo
587.582 380.5 ln
599.582 375 mo
599.582 380.5 ln
611.582 375 mo
611.582 380.5 ln
623.832 375 mo
623.832 380.5 ln
635.832 369.5 mo
635.832 380.5 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79f07ea232bdef9ac901d627f1d7c
bbc695d54d248636f112e1e558138c8614732404711d922beb14f6e9da7a
f0f6424e78635561b81229fa2a64943f0a34dc93b34efd58286722f3cf61
311ea7fc7d9e5939d3363e9ede71cf70e1e3065ffc3ecb6cd91e476e222f
a9d3eab4d1de767ebebf490a414b0dffbb21fe8991e5077af9877088538e
7a8f585effec91> ND 
end end
end
/ArialMT findfont /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
112{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
515.332 418 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
48{/.notdef}repeat /zero 207{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
85.082 400.5 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
137.082 400.5 mov
(0) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f72e955f0050b5472
6b68794743aa9e2640fbbbe965e5c7462a0da2fe3396d6994552b6fd7b9f
c3a7f776be319813ddb449d1a761c2a25379bcdbddb59583b40898699b48
1611e523f8146fbaea058eb8237d1f8ef6c080ecb39f96cb6c0db3e3c586
248bc7c61f659dbd2f8aadac81a2448e7137d524> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
dup 53 /five put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
46{/.notdef}repeat /period 6{/.notdef}repeat /five 202{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
148.761 400.5 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end end
end
/ArialMT findfont /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
49{/.notdef}repeat /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
207.332 400.5 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
258.082 400.5 mov
(1) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
269.761 400.5 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
327.582 400.5 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
378.332 400.5 mov
(2) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
390.011 400.5 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d89951110b
adeffb560aa54e338c9127425b06cefdd1d949874d4622c9b30b369b86fa
41b317af240e3deeaa1e9f5a90a07b28e40380e054c3662afb1cf6f51c11
b6836151d28c225e6c4d1016d9fa730c1bf86c199f942682434f25971f32
ae953f8b74fbb716bed8520757e61bce7cf6be4a92865d3717d39c92f18c
1b406caa6c3ed07ea5ff15dde83aea7d31b62642cc5c322a42f14367085d
78b35ebe75a37abae90e77a72aa751401d5e1988c4445fb51991681b7fd3
6a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
51{/.notdef}repeat /three 204{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
447.832 400.5 mov
(3) sh
restore_ctm
save_ctm
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
499.582 400.5 mov
(3) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
511.261 400.5 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
569.082 400.5 mov
(4) sh
restore_ctm
91.582 380.5 mo
91.582 11.5 ln
s
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
620.832 400.5 mov
(4) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
632.511 400.5 mov
(.5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 162 mov
( ) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac576702c4654165111c4e219216
925a1bbda37b8221ddb4f3d7ef9dc32fffa987a0f0ea03488171acb09982
96179b683649315a4b1534> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
end end
end
/ArialMT findfont /Encoding get
dup 65 /A put
dup 97 /a put
dup 110 /n put
dup 116 /t put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
65{/.notdef}repeat /A 31{/.notdef}repeat /a 12{/.notdef}repeat /n 5{/.notdef}repeat /t 
139{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 156.166 mov
(A) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 142.159 mov
(cce) sh
/ArialMT*2 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 109.479 mov
(p) sh
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 97.8003 mov
(tan) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 68.6074 mov
(ce) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/version (001.008) def
/FullName (Symbol) def
/FamilyName (Symbol) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Symbol def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -180 -293 1090 1010 } def
/XUID [6 42996 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECAB94698AF
13A4485757691763CAA8023293C6742E3899EDC5BE94ADFC42A0C0027CA6214B
7F8D5F616C6C2330D450A707B93BDD387F8829CFEF02A72B512D93C14DC1F17C
3175B113E267D8BD6A1447D88A441810C35BAC725EC0017275261A74EB5067CD
9834D1E000DA4929128802A4406C63EAAE5098C3B673FB571CE4AA66227384BC
D1F9516217661F446651CBD433BDBB210B8CB1C0AE7FE1EE2E21077BC11F9270
69E30D1E3AF26358279873C2B62D3AA5368EC87D6A567E789674A8EEED694D74
E8AE78AD599DE625132DC2B96E4C1518B04F598401F1080D43B1530D7089A208
39AB479C8D65D6823FDE8C7085D829EBF9BFD791C95C71C65AE4EC2A01CBA5FA
992ED2E4C180E84DC6E14861844CD132B73A4AA658AD9BE20B35514AC67BF58E
E4587AAC0BA16313B83C2C222F018E737313614351D1EFBF36BD83A38ED9DB6B
D6191BB6160AAC9612D574C3028C8C52B52925658ED342DA958D4100DABE516F
4733BF895741A1EA34A4707864910DD7E8EFE407898B7BCC27AC062D1BA4F11A
73F4342E2D8EF6E101C80AABBFD820974B1F3CC33D070E3C0CF97490AE3CCF18
630A6E2BD4007310EF65E793C445E48BC171043FCE380624354787BC936241D0
3306C33061D7EDD92FAC67F671457CD23F6931B947E97BDA7754E5F56D611220
5C4E82C2815584BF47A854236D460FE90AEE8B7FC419C26F68EB007CE6ED0053
856FABF9D7B6E5E6D910A77FDC4019BC55466E90A87476719B3A8CE5B38E4592
40DEDD91E229FB5784ED9E5A05747D938589B5554723ABC8F7F565F9F7AE6BCF
106F2212EAA54EE7DDD86863B30DFFB84D259A8FD24352AD855813AA02791C07
3824963AA973AEB925BCB75D7B8B65680FFF2B750A7939CBD880C8467D1104DF
9F15B0A8B2E43C7F445BA84DDD777444FD9E2416992213E6D0A936603D381689
9E5E55FFC73083C43CA8A15EAD3BEE4D6AFAD49938AC763CA6CEFF4F499F6EB0
303C5FD86A6DA9601B64F321DE385311C18C43E18842F9D2B0445C853100194C
0EB4F0E368EF73081F98B787C0FD723F3DC0FFF2116676894617D05260524DFA
1C1424BBA73EEF75D8DBD86066850389ABCFEBF01C39C364A46182E47BEB9F55
679298A5A04190FF534218EAB65BEEFD74CF10AB8678EF1F6D0571C160A9603A
CDD271F08AD4812C1D7BD5CCE2DAE0170DD34BEB8CEFCD53644795C872A14E50
D6AAD6F1B8D7189729AE7ADFDCB5DF991B245C81CE2308BCC82D48707AFFA4C9
A4C87D5DC67236E08C7B144AA696669DC25D82589F7BBC7ECEFD474AB108069A
375F2B6B927C6D4C970478E059126CFAAFAE963C89B348FA0CEE452DBAB4A8AA
DC47F03B0A479DA258DE4F981B8B1519E8142B98A32C065A92D354FBE9ECD7A3
B1C375B7A9245CB30CCF340911CC422189F990FE9B13312930846BF5D66B1395
2D6B95B3FB682853391E9FA2B16E5C1C054B74A9D125FBE73F790EFD4A5636EC
03AF82A4FB16A3705D7415FFC8CE66BAD8DB6C0FCA20D52FC599F2A73F3011A7
CF29F32D4B0D07C8EF9F68595FCAACD88A736B36ABE003F405CD90BB4F55752C
FF7C2795C592C12499173602D1F2DAF0DBEF81E02EC753496DE8144F5BA858EB
8EBDC7CF7EAC95E9C22C587FF7AB270A8E85DDB482EFECD6859D6E0C5665
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 180 /multiply put
pop
%ADOEndSubsetFont
/Symbol*1 
[
180{/.notdef}repeat /multiply 75{/.notdef}repeat
] /Symbol nfnt
/Symbol*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 173.5 mov
(\264) sh
restore_ctm
107.832 380.5 mo
91.582 380.5 ln
99.832 370 mo
91.582 370 ln
99.832 359.5 mo
91.582 359.5 ln
99.832 349 mo
91.582 349 ln
99.832 338.5 mo
91.582 338.5 ln
107.832 328 mo
91.582 328 ln
99.832 317.25 mo
91.582 317.25 ln
99.832 306.75 mo
91.582 306.75 ln
99.832 296.25 mo
91.582 296.25 ln
99.832 285.75 mo
91.582 285.75 ln
107.832 275.25 mo
91.582 275.25 ln
99.832 264.5 mo
91.582 264.5 ln
99.832 254 mo
91.582 254 ln
99.832 243.5 mo
91.582 243.5 ln
99.832 233 mo
91.582 233 ln
107.832 222.5 mo
91.582 222.5 ln
99.832 212 mo
91.582 212 ln
99.832 201.25 mo
91.582 201.25 ln
99.832 190.75 mo
91.582 190.75 ln
99.832 180.25 mo
91.582 180.25 ln
107.832 169.75 mo
91.582 169.75 ln
99.832 159.25 mo
91.582 159.25 ln
99.832 148.5 mo
91.582 148.5 ln
99.832 138 mo
91.582 138 ln
99.832 127.5 mo
91.582 127.5 ln
107.832 117 mo
91.582 117 ln
99.832 106.5 mo
91.582 106.5 ln
99.832 96 mo
91.582 96 ln
99.832 85.25 mo
91.582 85.25 ln
99.832 74.75 mo
91.582 74.75 ln
107.832 64.25 mo
91.582 64.25 ln
99.832 53.75 mo
91.582 53.75 ln
99.832 43.25 mo
91.582 43.25 ln
99.832 32.5 mo
91.582 32.5 ln
99.832 22 mo
91.582 22 ln
107.832 11.5 mo
91.582 11.5 ln
107.832 380.5 mo
91.582 380.5 ln
107.832 11.5 mo
91.582 11.5 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/E 
<10bf317028198094ce8cd275e305c79a7a258ddd928bd9dc896c51a549b4
869242612fc9caa06c2483d03d9996ef> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e31445dccaac51f
be5d2720e030d916d3be5da2de6f181ec6d47f432789c3f20d0f29179709
0d6dda936003a76baaf59048c547fb41b8377c0142c5f3b363c49f8779> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0bc6dd6d1fb8ca
8bb9fc3e481d183ae50bbfabb21fc2a3f1f6595151c5a2f4acc8d226e0ff
0b4c85bc46ca5265bff351a7f03e78e04c2c72a9d7a9ee7a636db5f99d04
3f9d21fc223e35d9c765eb6b3d5d297173ba8b09f049b0d68aa85f244d1b
> ND 
end end
end
/ArialMT findfont /Encoding get
dup 69 /E put
dup 102 /f put
dup 105 /i put
dup 121 /y put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
69{/.notdef}repeat /E 32{/.notdef}repeat /f 2{/.notdef}repeat /i 15{/.notdef}repeat /y 
134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 267.75 mov
(Effi) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 237.409 mov
(c) sh
/ArialMT*10 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 226.909 mov
(i) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 222.243 mov
(e) sh
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 210.564 mov
(n) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 198.885 mov
(c) sh
/ArialMT*10 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 188.385 mov
(y) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 177.885 mov
( ) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
60.25 389.5 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
30 336.75 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6792 336.75 mov
(.) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.5137 336.75 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.1929 336.75 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5 284 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
57.1792 284 mov
(.) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
63.0137 284 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
30 231.25 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6792 231.25 mov
(.) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.5137 231.25 mov
(1) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.1929 231.25 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
42.5 179.5 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
54.1792 179.5 mov
(.) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
60.0137 179.5 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
30 126.75 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6792 126.75 mov
(.) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.5137 126.75 mov
(2) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.1929 126.75 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
42.5 74 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
54.1792 74 mov
(.) sh
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
60.0137 74 mov
(3) sh
restore_ctm
109.832 261.25 mo
109.832 260.75 ln
107.832 260.75 mo
111.832 260.75 ln
109.832 271 mo
109.832 271.5 ln
107.832 271.5 mo
111.832 271.5 ln
140.082 270.75 mo
140.082 269.5 ln
138.082 269.5 mo
141.832 269.5 ln
140.082 280.5 mo
140.082 281.75 ln
138.082 281.75 mo
141.832 281.75 ln
164.082 259.5 mo
164.082 257.75 ln
162.332 257.75 mo
166.082 257.75 ln
164.082 269.25 mo
164.082 271 ln
162.332 271 mo
166.082 271 ln
188.332 221.75 mo
188.332 219 ln
186.332 219 mo
190.332 219 ln
188.332 231.5 mo
188.332 234 ln
186.332 234 mo
190.332 234 ln
212.582 225.75 mo
212.582 223.25 ln
210.582 223.25 mo
214.582 223.25 ln
212.582 235.5 mo
212.582 238 ln
210.582 238 mo
214.582 238 ln
236.832 234 mo
236.832 231.75 ln
234.832 231.75 mo
238.582 231.75 ln
236.832 243.75 mo
236.832 246.25 ln
234.832 246.25 mo
238.582 246.25 ln
260.832 254 mo
260.832 252.25 ln
259.082 252.25 mo
262.832 252.25 ln
260.832 263.75 mo
260.832 265.5 ln
259.082 265.5 mo
262.832 265.5 ln
285.082 290.25 mo
285.082 289.75 ln
283.082 289.75 mo
287.082 289.75 ln
285.082 300 mo
285.082 300.5 ln
283.082 300.5 mo
287.082 300.5 ln
369.832 193.75 mo
369.832 193.5 ln
367.832 193.5 mo
371.832 193.5 ln
369.832 203.75 mo
369.832 204 ln
367.832 204 mo
371.832 204 ln
436.332 157 mo
436.332 155.25 ln
434.332 155.25 mo
438.332 155.25 ln
436.332 166.75 mo
436.332 168.25 ln
434.332 168.25 mo
438.332 168.25 ln
496.832 141 mo
496.832 139.25 ln
494.832 139.25 mo
498.832 139.25 ln
496.832 151 mo
496.832 152.75 ln
494.832 152.75 mo
498.832 152.75 ln
557.332 122 mo
557.332 120 ln
555.332 120 mo
559.082 120 ln
557.332 131.75 mo
557.332 134 ln
555.332 134 mo
559.082 134 ln
561.552 127.07 mo
561.552 124.724 559.648 122.82 557.302 122.82 cv
554.956 122.82 553.052 124.724 553.052 127.07 cv
553.052 129.416 554.956 131.32 557.302 131.32 cv
559.648 131.32 561.552 129.416 561.552 127.07 cv
501.072 146.03 mo
501.072 143.684 499.168 141.78 496.822 141.78 cv
494.477 141.78 492.572 143.684 492.572 146.03 cv
492.572 148.376 494.477 150.28 496.822 150.28 cv
499.168 150.28 501.072 148.376 501.072 146.03 cv
440.592 161.75 mo
440.592 159.404 438.688 157.5 436.342 157.5 cv
433.996 157.5 432.092 159.404 432.092 161.75 cv
432.092 164.096 433.996 166 436.342 166 cv
438.688 166 440.592 164.096 440.592 161.75 cv
374.112 198.71 mo
374.112 196.364 372.208 194.46 369.862 194.46 cv
367.516 194.46 365.612 196.364 365.612 198.71 cv
365.612 201.056 367.516 202.96 369.862 202.96 cv
372.208 202.96 374.112 201.056 374.112 198.71 cv
301.632 246.47 mo
301.632 244.124 299.728 242.22 297.382 242.22 cv
295.036 242.22 293.132 244.124 293.132 246.47 cv
293.132 248.816 295.036 250.72 297.382 250.72 cv
299.728 250.72 301.632 248.816 301.632 246.47 cv
222.792 324.23 mo
222.792 321.884 220.888 319.98 218.542 319.98 cv
216.196 319.98 214.292 321.884 214.292 324.23 cv
214.292 326.576 216.196 328.48 218.542 328.48 cv
220.888 328.48 222.792 326.576 222.792 324.23 cv
289.392 295.31 mo
289.392 292.964 287.488 291.06 285.142 291.06 cv
282.796 291.06 280.892 292.964 280.892 295.31 cv
280.892 297.656 282.796 299.56 285.142 299.56 cv
287.488 299.56 289.392 297.656 289.392 295.31 cv
265.032 258.95 mo
265.032 256.604 263.128 254.7 260.782 254.7 cv
258.436 254.7 256.532 256.604 256.532 258.95 cv
256.532 261.296 258.436 263.2 260.782 263.2 cv
263.128 263.2 265.032 261.296 265.032 258.95 cv
241.032 239.03 mo
241.032 236.684 239.128 234.78 236.782 234.78 cv
234.436 234.78 232.532 236.684 232.532 239.03 cv
232.532 241.376 234.436 243.28 236.782 243.28 cv
239.128 243.28 241.032 241.376 241.032 239.03 cv
216.792 230.75 mo
216.792 228.404 214.888 226.5 212.542 226.5 cv
210.196 226.5 208.292 228.404 208.292 230.75 cv
208.292 233.096 210.196 235 212.542 235 cv
214.888 235 216.792 233.096 216.792 230.75 cv
192.552 226.55 mo
192.552 224.204 190.648 222.3 188.302 222.3 cv
185.956 222.3 184.052 224.204 184.052 226.55 cv
184.052 228.896 185.956 230.8 188.302 230.8 cv
190.648 230.8 192.552 228.896 192.552 226.55 cv
168.312 264.23 mo
168.312 261.884 166.408 259.98 164.062 259.98 cv
161.716 259.98 159.812 261.884 159.812 264.23 cv
159.812 266.576 161.716 268.48 164.062 268.48 cv
166.408 268.48 168.312 266.576 168.312 264.23 cv
144.312 275.75 mo
144.312 273.404 142.408 271.5 140.062 271.5 cv
137.716 271.5 135.812 273.404 135.812 275.75 cv
135.812 278.096 137.716 280 140.062 280 cv
142.408 280 144.312 278.096 144.312 275.75 cv
114.072 266.27 mo
114.072 263.924 112.168 262.02 109.822 262.02 cv
107.476 262.02 105.572 263.924 105.572 266.27 cv
105.572 268.616 107.476 270.52 109.822 270.52 cv
112.168 270.52 114.072 268.616 114.072 266.27 cv
109.832 235.25 mo
109.832 224 ln
107.832 224 mo
111.832 224 ln
109.832 245 mo
109.832 256.25 ln
107.832 256.25 mo
111.832 256.25 ln
140.082 279.75 mo
140.082 269.75 ln
138.082 269.75 mo
141.832 269.75 ln
140.082 289.75 mo
140.082 299.75 ln
138.082 299.75 mo
141.832 299.75 ln
164.082 237.5 mo
164.082 223.5 ln
162.332 223.5 mo
166.082 223.5 ln
164.082 247.25 mo
164.082 261 ln
162.332 261 mo
166.082 261 ln
188.332 202.75 mo
188.332 187 ln
186.332 187 mo
190.332 187 ln
188.332 212.5 mo
188.332 228.25 ln
186.332 228.25 mo
190.332 228.25 ln
212.582 228.25 mo
212.582 214.5 ln
210.582 214.5 mo
214.582 214.5 ln
212.582 238 mo
212.582 252 ln
210.582 252 mo
214.582 252 ln
236.832 239 mo
236.832 225.75 ln
234.832 225.75 mo
238.582 225.75 ln
236.832 248.75 mo
236.832 261.75 ln
234.832 261.75 mo
238.582 261.75 ln
260.832 275.25 mo
260.832 265 ln
259.082 265 mo
262.832 265 ln
260.832 285 mo
260.832 295.25 ln
259.082 295.25 mo
262.832 295.25 ln
285.082 296.25 mo
285.082 288.25 ln
283.082 288.25 mo
287.082 288.25 ln
285.082 306 mo
285.082 314.25 ln
283.082 314.25 mo
287.082 314.25 ln
297.332 235 mo
297.332 234.75 ln
295.332 234.75 mo
299.082 234.75 ln
297.332 244.75 mo
297.332 245 ln
295.332 245 mo
299.082 245 ln
369.832 184.75 mo
369.832 183.5 ln
367.832 183.5 mo
371.832 183.5 ln
369.832 194.5 mo
369.832 195.75 ln
367.832 195.75 mo
371.832 195.75 ln
436.332 143.25 mo
436.332 140.5 ln
434.332 140.5 mo
438.332 140.5 ln
436.332 153 mo
436.332 155.75 ln
434.332 155.75 mo
438.332 155.75 ln
496.832 133.25 mo
496.832 130.5 ln
494.832 130.5 mo
498.832 130.5 ln
496.832 143 mo
496.832 145.75 ln
494.832 145.75 mo
498.832 145.75 ln
557.332 111 mo
557.332 108 ln
555.332 108 mo
559.082 108 ln
557.332 120.75 mo
557.332 124 ln
555.332 124 mo
559.082 124 ln
557.332 111.75 mo
553.082 111.75 ln
553.082 120.25 ln
561.582 120.25 ln
561.582 111.75 ln
557.332 111.75 ln
cp
496.832 133.75 mo
492.582 133.75 ln
492.582 142.25 ln
501.082 142.25 ln
501.082 133.75 ln
496.832 133.75 ln
cp
436.332 144 mo
432.082 144 ln
432.082 152.5 ln
440.582 152.5 ln
440.582 144 ln
436.332 144 ln
cp
369.832 185.5 mo
365.582 185.5 ln
365.582 194 ln
374.082 194 ln
374.082 185.5 ln
369.832 185.5 ln
cp
297.332 235.5 mo
293.082 235.5 ln
293.082 244 ln
301.582 244 ln
301.582 235.5 ln
297.332 235.5 ln
cp
218.582 317.75 mo
214.332 317.75 ln
214.332 326.25 ln
222.832 326.25 ln
222.832 317.75 ln
218.582 317.75 ln
cp
285.082 297 mo
280.832 297 ln
280.832 305.5 ln
289.332 305.5 ln
289.332 297 ln
285.082 297 ln
cp
260.832 276 mo
256.582 276 ln
256.582 284.5 ln
265.082 284.5 ln
265.082 276 ln
260.832 276 ln
cp
236.832 239.5 mo
232.582 239.5 ln
232.582 248 ln
241.082 248 ln
241.082 239.5 ln
236.832 239.5 ln
cp
212.582 229 mo
208.332 229 ln
208.332 237.5 ln
216.832 237.5 ln
216.832 229 ln
212.582 229 ln
cp
188.332 203.5 mo
184.082 203.5 ln
184.082 212 ln
192.582 212 ln
192.582 203.5 ln
188.332 203.5 ln
cp
164.082 238 mo
159.832 238 ln
159.832 246.5 ln
168.332 246.5 ln
168.332 238 ln
164.082 238 ln
cp
140.082 280.5 mo
135.832 280.5 ln
135.832 289 ln
144.332 289 ln
144.332 280.5 ln
140.082 280.5 ln
cp
109.832 236 mo
105.582 236 ln
105.582 244.5 ln
114.082 244.5 ln
114.082 236 ln
109.832 236 ln
cp
109.832 248.75 mo
109.832 241 ln
107.832 241 mo
111.832 241 ln
109.832 258.5 mo
109.832 266.5 ln
107.832 266.5 mo
111.832 266.5 ln
140.082 250 mo
140.082 239.5 ln
138.082 239.5 mo
141.832 239.5 ln
140.082 259.75 mo
140.082 270.25 ln
138.082 270.25 mo
141.832 270.25 ln
164.082 274.75 mo
164.082 266 ln
162.332 266 mo
166.082 266 ln
164.082 284.5 mo
164.082 293.25 ln
162.332 293.25 mo
166.082 293.25 ln
188.332 241.25 mo
188.332 230 ln
186.332 230 mo
190.332 230 ln
188.332 251 mo
188.332 262 ln
186.332 262 mo
190.332 262 ln
212.582 227.75 mo
212.582 216.5 ln
210.582 216.5 mo
214.582 216.5 ln
212.582 237.5 mo
212.582 248.75 ln
210.582 248.75 mo
214.582 248.75 ln
236.832 215 mo
236.832 202.25 ln
234.832 202.25 mo
238.582 202.25 ln
236.832 224.75 mo
236.832 237.5 ln
234.832 237.5 mo
238.582 237.5 ln
260.832 259 mo
260.832 249.25 ln
259.082 249.25 mo
262.832 249.25 ln
260.832 268.75 mo
260.832 278.25 ln
259.082 278.25 mo
262.832 278.25 ln
285.082 285 mo
285.082 277.25 ln
283.082 277.25 mo
287.082 277.25 ln
285.082 294.75 mo
285.082 302.25 ln
283.082 302.25 mo
287.082 302.25 ln
218.582 324.25 mo
218.582 316.75 ln
216.582 316.75 mo
220.582 316.75 ln
218.582 334 mo
218.582 341.5 ln
216.582 341.5 mo
220.582 341.5 ln
297.332 239.5 mo
297.332 220.75 ln
295.332 220.75 mo
299.082 220.75 ln
297.332 249.25 mo
297.332 267.75 ln
295.332 267.75 mo
299.082 267.75 ln
369.832 234 mo
369.832 215.25 ln
367.832 215.25 mo
371.832 215.25 ln
369.832 243.75 mo
369.832 262.5 ln
367.832 262.5 mo
371.832 262.5 ln
436.332 164 mo
436.332 137.75 ln
434.332 137.75 mo
438.332 137.75 ln
436.332 173.75 mo
436.332 200.25 ln
434.332 200.25 mo
438.332 200.25 ln
496.832 106.5 mo
496.832 75.75 ln
494.832 75.75 mo
498.832 75.75 ln
496.832 116.25 mo
496.832 147 ln
494.832 147 mo
498.832 147 ln
557.332 171.5 mo
557.332 146.25 ln
555.332 146.25 mo
559.082 146.25 ln
557.332 181.5 mo
557.332 206.75 ln
555.332 206.75 mo
559.082 206.75 ln
557.332 172.25 mo
553.082 180.75 ln
561.582 180.75 ln
557.332 172.25 ln
cp
496.832 107 mo
492.582 115.5 ln
501.082 115.5 ln
496.832 107 ln
cp
436.332 164.75 mo
432.082 173.25 ln
440.582 173.25 ln
436.332 164.75 ln
cp
369.832 234.5 mo
365.582 243 ln
374.082 243 ln
369.832 234.5 ln
cp
297.332 240 mo
293.082 248.5 ln
301.582 248.5 ln
297.332 240 ln
cp
218.582 325 mo
214.332 333.5 ln
222.832 333.5 ln
218.582 325 ln
cp
285.082 285.5 mo
280.832 294 ln
289.332 294 ln
285.082 285.5 ln
cp
260.832 259.5 mo
256.582 268 ln
265.082 268 ln
260.832 259.5 ln
cp
236.832 215.75 mo
232.582 224.25 ln
241.082 224.25 ln
236.832 215.75 ln
cp
212.582 228.25 mo
208.332 236.75 ln
216.832 236.75 ln
212.582 228.25 ln
cp
188.332 241.75 mo
184.082 250.25 ln
192.582 250.25 ln
188.332 241.75 ln
cp
164.082 275.25 mo
159.832 283.75 ln
168.332 283.75 ln
164.082 275.25 ln
cp
140.082 250.5 mo
135.832 259 ln
144.332 259 ln
140.082 250.5 ln
cp
109.832 249.5 mo
105.582 258 ln
114.082 258 ln
109.832 249.5 ln
cp
109.832 261.25 mo
109.832 260.75 ln
107.832 260.75 mo
111.832 260.75 ln
s
109.832 271 mo
109.832 271.5 ln
107.832 271.5 mo
111.832 271.5 ln
140.082 270.75 mo
140.082 269.5 ln
138.082 269.5 mo
141.832 269.5 ln
140.082 280.5 mo
140.082 281.75 ln
138.082 281.75 mo
141.832 281.75 ln
164.082 259.5 mo
164.082 257.75 ln
162.332 257.75 mo
166.082 257.75 ln
164.082 269.25 mo
164.082 271 ln
162.332 271 mo
166.082 271 ln
188.332 221.75 mo
188.332 219 ln
186.332 219 mo
190.332 219 ln
188.332 231.5 mo
188.332 234 ln
186.332 234 mo
190.332 234 ln
212.582 225.75 mo
212.582 223.25 ln
210.582 223.25 mo
214.582 223.25 ln
212.582 235.5 mo
212.582 238 ln
210.582 238 mo
214.582 238 ln
236.832 234 mo
236.832 231.75 ln
234.832 231.75 mo
238.582 231.75 ln
236.832 243.75 mo
236.832 246.25 ln
234.832 246.25 mo
238.582 246.25 ln
260.832 254 mo
260.832 252.25 ln
259.082 252.25 mo
262.832 252.25 ln
260.832 263.75 mo
260.832 265.5 ln
259.082 265.5 mo
262.832 265.5 ln
285.082 290.25 mo
285.082 289.75 ln
283.082 289.75 mo
287.082 289.75 ln
285.082 300 mo
285.082 300.5 ln
283.082 300.5 mo
287.082 300.5 ln
s
0 0 0 1 cmyk
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
30 21 mov
(0) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
41.6792 21 mov
(.) sh
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.5137 21 mov
(3) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.1929 21 mov
(5) sh
289.392 295.31 mo
289.392 292.964 287.488 291.06 285.142 291.06 cv
282.796 291.06 280.892 292.964 280.892 295.31 cv
280.892 297.656 282.796 299.56 285.142 299.56 cv
287.488 299.56 289.392 297.656 289.392 295.31 cv
0.956863 0.929412 0 0 cmyk
ef
265.032 258.95 mo
265.032 256.604 263.128 254.7 260.782 254.7 cv
258.436 254.7 256.532 256.604 256.532 258.95 cv
256.532 261.296 258.436 263.2 260.782 263.2 cv
263.128 263.2 265.032 261.296 265.032 258.95 cv
ef
241.032 239.03 mo
241.032 236.684 239.128 234.78 236.782 234.78 cv
234.436 234.78 232.532 236.684 232.532 239.03 cv
232.532 241.376 234.436 243.28 236.782 243.28 cv
239.128 243.28 241.032 241.376 241.032 239.03 cv
ef
216.792 230.75 mo
216.792 228.404 214.888 226.5 212.542 226.5 cv
210.196 226.5 208.292 228.404 208.292 230.75 cv
208.292 233.096 210.196 235 212.542 235 cv
214.888 235 216.792 233.096 216.792 230.75 cv
ef
192.552 226.55 mo
192.552 224.204 190.648 222.3 188.302 222.3 cv
185.956 222.3 184.052 224.204 184.052 226.55 cv
184.052 228.896 185.956 230.8 188.302 230.8 cv
190.648 230.8 192.552 228.896 192.552 226.55 cv
ef
168.312 264.23 mo
168.312 261.884 166.408 259.98 164.062 259.98 cv
161.716 259.98 159.812 261.884 159.812 264.23 cv
159.812 266.576 161.716 268.48 164.062 268.48 cv
166.408 268.48 168.312 266.576 168.312 264.23 cv
ef
144.312 275.75 mo
144.312 273.404 142.408 271.5 140.062 271.5 cv
137.716 271.5 135.812 273.404 135.812 275.75 cv
135.812 278.096 137.716 280 140.062 280 cv
142.408 280 144.312 278.096 144.312 275.75 cv
ef
114.072 266.27 mo
114.072 263.924 112.168 262.02 109.822 262.02 cv
107.476 262.02 105.572 263.924 105.572 266.27 cv
105.572 268.616 107.476 270.52 109.822 270.52 cv
112.168 270.52 114.072 268.616 114.072 266.27 cv
ef
109.832 235.25 mo
109.832 224 ln
107.832 224 mo
111.832 224 ln
109.832 245 mo
109.832 256.25 ln
107.832 256.25 mo
111.832 256.25 ln
140.082 279.75 mo
140.082 269.75 ln
138.082 269.75 mo
141.832 269.75 ln
140.082 289.75 mo
140.082 299.75 ln
138.082 299.75 mo
141.832 299.75 ln
164.082 237.5 mo
164.082 223.5 ln
162.332 223.5 mo
166.082 223.5 ln
164.082 247.25 mo
164.082 261 ln
162.332 261 mo
166.082 261 ln
188.332 202.75 mo
188.332 187 ln
186.332 187 mo
190.332 187 ln
188.332 212.5 mo
188.332 228.25 ln
186.332 228.25 mo
190.332 228.25 ln
212.582 228.25 mo
212.582 214.5 ln
210.582 214.5 mo
214.582 214.5 ln
212.582 238 mo
212.582 252 ln
210.582 252 mo
214.582 252 ln
236.832 239 mo
236.832 225.75 ln
234.832 225.75 mo
238.582 225.75 ln
236.832 248.75 mo
236.832 261.75 ln
234.832 261.75 mo
238.582 261.75 ln
260.832 275.25 mo
260.832 265 ln
259.082 265 mo
262.832 265 ln
260.832 285 mo
260.832 295.25 ln
259.082 295.25 mo
262.832 295.25 ln
285.082 296.25 mo
285.082 288.25 ln
283.082 288.25 mo
287.082 288.25 ln
285.082 306 mo
285.082 314.25 ln
283.082 314.25 mo
287.082 314.25 ln
0 0 0 1 cmyk
s
285.082 297 mo
280.832 297 ln
280.832 305.5 ln
289.332 305.5 ln
289.332 297 ln
285.082 297 ln
0.0117647 0.960784 0.913726 0 cmyk
ef
260.832 276 mo
256.582 276 ln
256.582 284.5 ln
265.082 284.5 ln
265.082 276 ln
260.832 276 ln
ef
236.832 239.5 mo
232.582 239.5 ln
232.582 248 ln
241.082 248 ln
241.082 239.5 ln
236.832 239.5 ln
ef
212.582 229 mo
208.332 229 ln
208.332 237.5 ln
216.832 237.5 ln
216.832 229 ln
212.582 229 ln
ef
188.332 203.5 mo
184.082 203.5 ln
184.082 212 ln
192.582 212 ln
192.582 203.5 ln
188.332 203.5 ln
ef
164.082 238 mo
159.832 238 ln
159.832 246.5 ln
168.332 246.5 ln
168.332 238 ln
164.082 238 ln
ef
140.082 280.5 mo
135.832 280.5 ln
135.832 289 ln
144.332 289 ln
144.332 280.5 ln
140.082 280.5 ln
ef
109.832 236 mo
105.582 236 ln
105.582 244.5 ln
114.082 244.5 ln
114.082 236 ln
109.832 236 ln
ef
109.832 246.75 mo
109.832 241 ln
107.832 241 mo
111.832 241 ln
109.832 260.5 mo
109.832 266.5 ln
107.832 266.5 mo
111.832 266.5 ln
140.082 248 mo
140.082 239.5 ln
138.082 239.5 mo
141.832 239.5 ln
140.082 261.75 mo
140.082 270.25 ln
138.082 270.25 mo
141.832 270.25 ln
164.082 272.75 mo
164.082 266 ln
162.332 266 mo
166.082 266 ln
164.082 286.5 mo
164.082 293.25 ln
162.332 293.25 mo
166.082 293.25 ln
188.332 239.25 mo
188.332 230 ln
186.332 230 mo
190.332 230 ln
188.332 252.75 mo
188.332 262 ln
186.332 262 mo
190.332 262 ln
212.582 225.75 mo
212.582 216.5 ln
210.582 216.5 mo
214.582 216.5 ln
212.582 239.5 mo
212.582 248.75 ln
210.582 248.75 mo
214.582 248.75 ln
236.832 213 mo
236.832 202.25 ln
234.832 202.25 mo
238.582 202.25 ln
236.832 226.75 mo
236.832 237.5 ln
234.832 237.5 mo
238.582 237.5 ln
260.832 257 mo
260.832 249.25 ln
259.082 249.25 mo
262.832 249.25 ln
260.832 270.75 mo
260.832 278.25 ln
259.082 278.25 mo
262.832 278.25 ln
285.082 283 mo
285.082 277.25 ln
283.082 277.25 mo
287.082 277.25 ln
285.082 296.75 mo
285.082 302.25 ln
283.082 302.25 mo
287.082 302.25 ln
0 0 0 1 cmyk
s
285.082 284 mo
279.332 295.5 ln
290.832 295.5 ln
285.082 284 ln
ef
260.832 258 mo
255.082 269.5 ln
266.582 269.5 ln
260.832 258 ln
ef
236.832 214.25 mo
231.082 225.75 ln
242.582 225.75 ln
236.832 214.25 ln
ef
212.582 226.75 mo
206.832 238.25 ln
218.332 238.25 ln
212.582 226.75 ln
ef
188.332 240.25 mo
182.582 251.75 ln
194.082 251.75 ln
188.332 240.25 ln
ef
164.082 273.75 mo
158.332 285.25 ln
169.832 285.25 ln
164.082 273.75 ln
ef
140.082 249 mo
134.332 260.5 ln
145.832 260.5 ln
140.082 249 ln
ef
109.832 248 mo
104.082 259.5 ln
115.582 259.5 ln
109.832 248 ln
ef
109.832 270.25 mo
109.832 269 ln
107.832 269 mo
111.832 269 ln
109.832 280 mo
109.832 281.5 ln
107.832 281.5 mo
111.832 281.5 ln
140.082 274.75 mo
140.082 272.5 ln
138.082 272.5 mo
141.832 272.5 ln
140.082 284.5 mo
140.082 287 ln
138.082 287 mo
141.832 287 ln
164.082 259.75 mo
164.082 256.5 ln
162.332 256.5 mo
166.082 256.5 ln
164.082 269.5 mo
164.082 273 ln
162.332 273 mo
166.082 273 ln
188.332 220.5 mo
188.332 216 ln
186.332 216 mo
190.332 216 ln
188.332 230.25 mo
188.332 234.5 ln
186.332 234.5 mo
190.332 234.5 ln
212.582 224.5 mo
212.582 220 ln
210.582 220 mo
214.582 220 ln
212.582 234.25 mo
212.582 238.75 ln
210.582 238.75 mo
214.582 238.75 ln
236.832 238.75 mo
236.832 234.75 ln
234.832 234.75 mo
238.582 234.75 ln
236.832 248.5 mo
236.832 252.5 ln
234.832 252.5 mo
238.582 252.5 ln
260.832 247.5 mo
260.832 243.75 ln
259.082 243.75 mo
262.832 243.75 ln
260.832 257.25 mo
260.832 260.75 ln
259.082 260.75 mo
262.832 260.75 ln
s
253.332 249.75 mo
268.332 249.75 ln
256.197 258.566 ln
260.832 244.301 ln
265.467 258.566 ln
253.332 249.75 ln
0.886275 0.0627451 0.980392 0.00784314 cmyk
f
229.332 241 mo
244.332 241 ln
232.197 249.816 ln
236.832 235.551 ln
241.467 249.816 ln
229.332 241 ln
f
205.082 227 mo
220.082 227 ln
207.947 235.816 ln
212.582 221.551 ln
217.217 235.816 ln
205.082 227 ln
f
180.832 222.75 mo
195.832 222.75 ln
183.697 231.566 ln
188.332 217.301 ln
192.967 231.566 ln
180.832 222.75 ln
f
156.582 262.25 mo
171.582 262.25 ln
159.447 271.066 ln
164.082 256.801 ln
168.717 271.066 ln
156.582 262.25 ln
f
132.582 277.25 mo
147.582 277.25 ln
135.447 286.066 ln
140.082 271.801 ln
144.717 286.066 ln
132.582 277.25 ln
f
102.332 272.75 mo
117.332 272.75 ln
105.197 281.566 ln
109.832 267.301 ln
114.467 281.566 ln
102.332 272.75 ln
f
369.832 193.75 mo
369.832 193.5 ln
367.832 193.5 mo
371.832 193.5 ln
369.832 203.75 mo
369.832 204 ln
367.832 204 mo
371.832 204 ln
436.332 157 mo
436.332 155.25 ln
434.332 155.25 mo
438.332 155.25 ln
436.332 166.75 mo
436.332 168.25 ln
434.332 168.25 mo
438.332 168.25 ln
496.832 141 mo
496.832 139.25 ln
494.832 139.25 mo
498.832 139.25 ln
496.832 151 mo
496.832 152.75 ln
494.832 152.75 mo
498.832 152.75 ln
557.332 122 mo
557.332 120 ln
555.332 120 mo
559.082 120 ln
557.332 131.75 mo
557.332 134 ln
555.332 134 mo
559.082 134 ln
0 0 0 1 cmyk
s
561.552 127.07 mo
561.552 124.724 559.648 122.82 557.302 122.82 cv
554.956 122.82 553.052 124.724 553.052 127.07 cv
553.052 129.416 554.956 131.32 557.302 131.32 cv
559.648 131.32 561.552 129.416 561.552 127.07 cv
501.072 146.03 mo
501.072 143.684 499.168 141.78 496.822 141.78 cv
494.477 141.78 492.572 143.684 492.572 146.03 cv
492.572 148.376 494.477 150.28 496.822 150.28 cv
499.168 150.28 501.072 148.376 501.072 146.03 cv
440.592 161.75 mo
440.592 159.404 438.688 157.5 436.342 157.5 cv
433.996 157.5 432.092 159.404 432.092 161.75 cv
432.092 164.096 433.996 166 436.342 166 cv
438.688 166 440.592 164.096 440.592 161.75 cv
374.112 198.71 mo
374.112 196.364 372.208 194.46 369.862 194.46 cv
367.516 194.46 365.612 196.364 365.612 198.71 cv
365.612 201.056 367.516 202.96 369.862 202.96 cv
372.208 202.96 374.112 201.056 374.112 198.71 cv
301.632 246.47 mo
301.632 244.124 299.728 242.22 297.382 242.22 cv
295.036 242.22 293.132 244.124 293.132 246.47 cv
293.132 248.816 295.036 250.72 297.382 250.72 cv
299.728 250.72 301.632 248.816 301.632 246.47 cv
222.792 324.23 mo
222.792 321.884 220.888 319.98 218.542 319.98 cv
216.196 319.98 214.292 321.884 214.292 324.23 cv
214.292 326.576 216.196 328.48 218.542 328.48 cv
220.888 328.48 222.792 326.576 222.792 324.23 cv
0.956863 0.929412 0 0 cmyk
s
297.332 235 mo
297.332 234.75 ln
295.332 234.75 mo
299.082 234.75 ln
297.332 244.75 mo
297.332 245 ln
295.332 245 mo
299.082 245 ln
369.832 184.75 mo
369.832 183.5 ln
367.832 183.5 mo
371.832 183.5 ln
369.832 194.5 mo
369.832 195.75 ln
367.832 195.75 mo
371.832 195.75 ln
436.332 143.25 mo
436.332 140.5 ln
434.332 140.5 mo
438.332 140.5 ln
436.332 153 mo
436.332 155.75 ln
434.332 155.75 mo
438.332 155.75 ln
496.832 133.25 mo
496.832 130.5 ln
494.832 130.5 mo
498.832 130.5 ln
496.832 143 mo
496.832 145.75 ln
494.832 145.75 mo
498.832 145.75 ln
557.332 111 mo
557.332 108 ln
555.332 108 mo
559.082 108 ln
557.332 120.75 mo
557.332 124 ln
555.332 124 mo
559.082 124 ln
0 0 0 1 cmyk
s
557.332 111.75 mo
553.082 111.75 ln
553.082 120.25 ln
561.582 120.25 ln
561.582 111.75 ln
557.332 111.75 ln
cp
496.832 133.75 mo
492.582 133.75 ln
492.582 142.25 ln
501.082 142.25 ln
501.082 133.75 ln
496.832 133.75 ln
cp
436.332 144 mo
432.082 144 ln
432.082 152.5 ln
440.582 152.5 ln
440.582 144 ln
436.332 144 ln
cp
369.832 185.5 mo
365.582 185.5 ln
365.582 194 ln
374.082 194 ln
374.082 185.5 ln
369.832 185.5 ln
cp
297.332 235.5 mo
293.082 235.5 ln
293.082 244 ln
301.582 244 ln
301.582 235.5 ln
297.332 235.5 ln
cp
218.582 317.75 mo
214.332 317.75 ln
214.332 326.25 ln
222.832 326.25 ln
222.832 317.75 ln
218.582 317.75 ln
cp
0.0117647 0.960784 0.913726 0 cmyk
s
218.582 324.25 mo
218.582 316.75 ln
216.582 316.75 mo
220.582 316.75 ln
218.582 334 mo
218.582 341.5 ln
216.582 341.5 mo
220.582 341.5 ln
297.332 239.5 mo
297.332 220.75 ln
295.332 220.75 mo
299.082 220.75 ln
297.332 249.25 mo
297.332 267.75 ln
295.332 267.75 mo
299.082 267.75 ln
369.832 234 mo
369.832 215.25 ln
367.832 215.25 mo
371.832 215.25 ln
369.832 243.75 mo
369.832 262.5 ln
367.832 262.5 mo
371.832 262.5 ln
436.332 164 mo
436.332 137.75 ln
434.332 137.75 mo
438.332 137.75 ln
436.332 173.75 mo
436.332 200.25 ln
434.332 200.25 mo
438.332 200.25 ln
496.832 106.5 mo
496.832 75.75 ln
494.832 75.75 mo
498.832 75.75 ln
496.832 116.25 mo
496.832 147 ln
494.832 147 mo
498.832 147 ln
557.332 171.5 mo
557.332 146.25 ln
555.332 146.25 mo
559.082 146.25 ln
557.332 181.5 mo
557.332 206.75 ln
555.332 206.75 mo
559.082 206.75 ln
557.332 172.25 mo
553.082 180.75 ln
561.582 180.75 ln
557.332 172.25 ln
cp
496.832 107 mo
492.582 115.5 ln
501.082 115.5 ln
496.832 107 ln
cp
436.332 164.75 mo
432.082 173.25 ln
440.582 173.25 ln
436.332 164.75 ln
cp
369.832 234.5 mo
365.582 243 ln
374.082 243 ln
369.832 234.5 ln
cp
297.332 240 mo
293.082 248.5 ln
301.582 248.5 ln
297.332 240 ln
cp
218.582 325 mo
214.332 333.5 ln
222.832 333.5 ln
218.582 325 ln
cp
218.582 330 mo
218.582 329 ln
216.582 329 mo
220.582 329 ln
218.582 339.5 mo
218.582 340.5 ln
216.582 340.5 mo
220.582 340.5 ln
297.332 273.25 mo
297.332 268.5 ln
295.332 268.5 mo
299.082 268.5 ln
297.332 282.75 mo
297.332 287.25 ln
295.332 287.25 mo
299.082 287.25 ln
369.832 229.5 mo
369.832 222.5 ln
367.832 222.5 mo
371.832 222.5 ln
369.832 238.75 mo
369.832 245.75 ln
367.832 245.75 mo
371.832 245.75 ln
436.332 217.25 mo
436.332 209 ln
434.332 209 mo
438.332 209 ln
436.332 226.5 mo
436.332 234.75 ln
434.332 234.75 mo
438.332 234.75 ln
496.832 188.5 mo
496.832 178.5 ln
494.832 178.5 mo
498.832 178.5 ln
496.832 198 mo
496.832 207.75 ln
494.832 207.75 mo
498.832 207.75 ln
557.332 164.75 mo
557.332 153.75 ln
555.332 153.75 mo
559.082 153.75 ln
557.332 174.25 mo
557.332 185.25 ln
555.332 185.25 mo
559.082 185.25 ln
0 0 0 1 cmyk
s
0.75 lw
[9.24 2.76 ] 4.62 dsh
551.332 167.5 mo
563.332 167.5 ln
553.624 174.554 ln
557.332 163.141 ln
561.04 174.554 ln
551.332 167.5 ln
cp
0.886275 0.0627451 0.980392 0.00784314 cmyk
s
490.832 191.25 mo
502.832 191.25 ln
493.124 198.304 ln
496.832 186.891 ln
500.54 198.304 ln
490.832 191.25 ln
cp
s
430.332 219.75 mo
442.332 219.75 ln
432.624 226.804 ln
436.332 215.391 ln
440.04 226.804 ln
430.332 219.75 ln
cp
s
363.832 232 mo
375.832 232 ln
366.124 239.054 ln
369.832 227.641 ln
373.54 239.054 ln
363.832 232 ln
cp
s
291.332 276 mo
303.332 276 ln
293.624 283.054 ln
297.332 271.641 ln
301.04 283.054 ln
291.332 276 ln
cp
s
212.582 332.75 mo
224.582 332.75 ln
214.874 339.804 ln
218.582 328.391 ln
222.29 339.804 ln
212.582 332.75 ln
cp
s
save_ctm
restore_ctm
save_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9C4BA03C438C5EC
CEE161484894451BF747A7F169155BF10907FA54F25E108538EA99ECC97B540F
5C3ED454F943A9EDFD8E09D4DBA26A15F07270F8B0088F451E0C70F15081B570
B05B9B22BF860D536AEE123DA3189231044C17ABF94ED1D5FE2C50A79D122C0E
27D89CC0CA3A5FA89D015FD8C867E13D5049CD9E6D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 177 /plusminus put
pop
%ADOEndSubsetFont
/Symbol*2 
[
177{/.notdef}repeat /plusminus 78{/.notdef}repeat
] /Symbol nfnt
/Symbol*2 findfont [17.5943 0 0 -17.5943 0 0 ]mfnt sfnt
BuildWidthShowArray
180.832 59 mov
(\261) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/asterisk 
<10bf3170586c89409dd2665c962f73917ff1d99d25547eb97d8d7a1b746b
52bd73aee63f25b04e33ffea373408cea5b18d57735103adadf0d2b607ad
784041cc4f31b413e027687ce43b3535a4680ad8bc60fcb7acaa8519fa55
5f8158dcfff6de858c7134> ND 
end end
end
/ArialMT findfont /Encoding get
dup 42 /asterisk put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
42{/.notdef}repeat /asterisk 213{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
173.832 59 mov
(*) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/K 
<10bf317026ba62062704f9ba87c1ab1fc7730cdfdacc88df1e45004269f1
b43137c9251fe2841c5423281c9858682237f26a47da9c17460f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
/ArialMT*12 
[
75{/.notdef}repeat /K 180{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*12 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
155.332 76.75 mov
(K) sh
restore_ctm
save_ctm
/ArialMT*11 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
247.332 64 mov
(*) sh
/ArialMT*3 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
254.726 64 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
228.582 76.75 mov
(K) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/B 
<10bf317026ba62063ac1fc9b1b7da70a4283bca66508b7487db96d3b5e50
ebb26d781c08b71d8c60e86f5f95e258aadae78cebfccceace7d1e24a04f
7a0ebebb84d24fd6e0dcc7805db6e5cdf4eb0699290a048d32bdfc7bda09
b014801b6912f42581f07cfc0dad1f3a0fda97cccb6dc64f3c2133712b38
17f9dcf78f219a31023477457afb4124f2e67688f81d2fae0a3d889fa20e
a1e4d003c07fa3b1c5e475e398065490772a2317b8a1741177b48843cacc
98258835f7713d01ccd04d20a02276a9eaa215ecd7e642af0d478b9844bc
79867bee2d8cdbfd06> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638bbfe80126114fe37407e2e312c7bcbd2c
1b7b9e7fac2817224e19> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 43 /plus put
dup 66 /B put
dup 77 /M put
dup 100 /d put
dup 109 /m put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*13 
[
43{/.notdef}repeat /plus 22{/.notdef}repeat /B 10{/.notdef}repeat /M 22{/.notdef}repeat /d 
8{/.notdef}repeat /m 5{/.notdef}repeat /s /.notdef /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
277.332 101.5 mov
(M) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
294.825 101.5 mov
(i) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
299.491 101.5 mov
(n) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
311.17 101.5 mov
(i) sh
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
315.835 101.5 mov
(mum) sh
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
362.501 101.5 mov
( ) sh
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
368.335 101.5 mov
(B) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
382.342 101.5 mov
(i) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
387.008 101.5 mov
(a) sh
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
398.687 101.5 mov
(s) sh
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
409.187 101.5 mov
( ) sh
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
415.021 101.5 mov
(d+) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
438.964 101.5 mov
(A) sh
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
452.971 101.5 mov
(u) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
277.332 123 mov
(0) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/percent 
<10bf317037023d4c0d7ec55f50e0d703cca3a91924009f4c54fa159cf720
05369ccdabc1406ade1a67cb8d912b310ad9f04e6f3b28d418a72a41c0d1
82546e1a7620eb97f057ef2d2818c17e8fa65f685e4d4e5e802ebc46e74f
c24c6aab9527e691343fc6ee843822158aa5860b42421d2cab508fb7a1ef
041bfd9f3df048726b67a5f3d9d2baebfd0da8f41a68b5c249e6306143da
781c59bfed50e7b6aa0d30f5637d48a589fe7132f9df130dbf99124377cd
7bec8347fb1962a828f67cbccb3ac9a2a465f606f6dca2f8b5b7ed55449e
3181f995ae07070d2e5a09dafab52c13b0e8aa5df2ffa25948b618b258ef
82606b00e5d7d3dd2d855510591e51de1d44623ab7287d84635357e7f605
27875c0c> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 37 /percent put
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/ArialMT*14 
[
37{/.notdef}repeat /percent 7{/.notdef}repeat /hyphen 210{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*14 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
289.011 123 mov
(-) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
296.004 123 mov
(2) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
307.684 123 mov
(0) sh
/ArialMT*14 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
319.363 123 mov
(%) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
277.332 143.5 mov
(2) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
289.011 143.5 mov
(0) sh
/ArialMT*14 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
300.69 143.5 mov
(-) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
307.684 143.5 mov
(4) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
319.363 143.5 mov
(0) sh
/ArialMT*14 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
331.042 143.5 mov
(%) sh
restore_ctm
0 0 0 1 cmyk
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
277.332 165 mov
(4) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
289.011 165 mov
(0) sh
/ArialMT*14 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
300.69 165 mov
(-) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
307.684 165 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
319.363 165 mov
(00) sh
/ArialMT*14 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
342.721 165 mov
(%) sh
242.532 95.9902 mo
242.532 92.8159 239.956 90.2402 236.782 90.2402 cv
233.608 90.2402 231.032 92.8159 231.032 95.9902 cv
231.032 99.1641 233.608 101.74 236.782 101.74 cv
239.956 101.74 242.532 99.1641 242.532 95.9902 cv
0.956863 0.929412 0 0 cmyk
ef
0.75 lw
[] 0 dsh
169.437 95.9902 mo
169.437 93.0229 167.029 90.6152 164.062 90.6152 cv
161.095 90.6152 158.687 93.0229 158.687 95.9902 cv
158.687 98.957 161.095 101.365 164.062 101.365 cv
167.029 101.365 169.437 98.957 169.437 95.9902 cv
s
236.832 111.875 mo
231.707 111.875 ln
231.707 122.125 ln
241.957 122.125 ln
241.957 111.875 ln
236.832 111.875 ln
0.0117647 0.960784 0.913726 0 cmyk
ef
164.082 112.75 mo
159.832 112.75 ln
159.832 121.25 ln
168.332 121.25 ln
168.332 112.75 ln
164.082 112.75 ln
cp
s
236.832 132.25 mo
231.082 143.75 ln
242.582 143.75 ln
236.832 132.25 ln
0 0 0 1 cmyk
ef
164.082 133.75 mo
159.832 142.25 ln
168.332 142.25 ln
164.082 133.75 ln
cp
s
229.332 156.75 mo
244.332 156.75 ln
232.197 165.566 ln
236.832 151.301 ln
241.467 165.566 ln
229.332 156.75 ln
0.886275 0.0627451 0.980392 0.00784314 cmyk
f
0.75 lw
[9.625 2.875 ] 4.8125 dsh
157.832 157.167 mo
170.332 157.167 ln
160.219 164.514 ln
164.082 152.626 ln
167.945 164.514 ln
157.832 157.167 ln
cp
s
save_ctm
restore_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/ArialMT*15 
[
84{/.notdef}repeat /T 171{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*15 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
527.25 428.125 mov
(T) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
