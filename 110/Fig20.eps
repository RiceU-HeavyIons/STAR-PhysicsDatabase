%!PS-Adobe-3.1 EPSF-3.0
%%Title: PaperSpectraRhoIntegraldAu.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 6/18/2008
%%CropBox: 0.000000 0.000000 642.677734 448.205078
%%BoundingBox: 0 0 643 449 
%%HiResBoundingBox: 0.000000 0.000000 642.677734 448.205078
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -448.205 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 448.205 ln
642.678 448.205 ln
642.678 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
93 382.25 mo
93 13.25 ln
637.249 13.25 ln
637.249 382.25 ln
93 382.25 ln
cp
false op
0 0 0 1 cmyk
s
93 382.25 mo
93 13.25 ln
637.249 13.25 ln
637.249 382.25 ln
93 382.25 ln
cp
93 382.25 mo
637.249 382.25 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e3088328e93e3f86c5266dab4a
4b6a0dbbd499ac2f08f52498a1230ac74b9126578260e72bf920c6626e18
e52befca2ad4c5c494a757a5861d225d61833e7b6db104708e0fcf59a03e
ddf773c2fe0a4faea092dc7a4d01275005fb3564e1d1f76f67c0ded9002e
e506fbb65143c90d6526880b9b4967a1233028aa9e8c3e30f59ec7f29cd2
713cffb71673b8ee9c01e77581750db787f4754cdac76007b210e32a2dfc
77791af6ea67a232e72999312d> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e231374dce1d715d27566dcf
115e95280405ef7103dd8183790f381980b4f25c32c305> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 71 /G put
dup 86 /V put
dup 99 /c put
dup 101 /e put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 5{/.notdef}repeat /slash 23{/.notdef}repeat 
/G 14{/.notdef}repeat /V 12{/.notdef}repeat /c /.notdef /e 154{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
531.999 430.75 mov
( \(GeV/c\)) sh
restore_ctm
93 371.25 mo
93 382.25 ln
106.75 376.75 mo
106.75 382.25 ln
120.25 376.75 mo
120.25 382.25 ln
133.75 376.75 mo
133.75 382.25 ln
147.5 376.75 mo
147.5 382.25 ln
161 371.25 mo
161 382.25 ln
174.75 376.75 mo
174.75 382.25 ln
188.25 376.75 mo
188.25 382.25 ln
202 376.75 mo
202 382.25 ln
215.5 376.75 mo
215.5 382.25 ln
229 371.25 mo
229 382.25 ln
242.75 376.75 mo
242.75 382.25 ln
256.25 376.75 mo
256.25 382.25 ln
270 376.75 mo
270 382.25 ln
283.5 376.75 mo
283.5 382.25 ln
297.25 371.25 mo
297.25 382.25 ln
310.75 376.75 mo
310.75 382.25 ln
324.25 376.75 mo
324.25 382.25 ln
338 376.75 mo
338 382.25 ln
351.5 376.75 mo
351.5 382.25 ln
365.25 371.25 mo
365.25 382.25 ln
378.749 376.75 mo
378.749 382.25 ln
392.249 376.75 mo
392.249 382.25 ln
405.999 376.75 mo
405.999 382.25 ln
419.499 376.75 mo
419.499 382.25 ln
433.249 371.25 mo
433.249 382.25 ln
446.749 376.75 mo
446.749 382.25 ln
460.499 376.75 mo
460.499 382.25 ln
473.999 376.75 mo
473.999 382.25 ln
487.499 376.75 mo
487.499 382.25 ln
501.249 371.25 mo
501.249 382.25 ln
514.749 376.75 mo
514.749 382.25 ln
528.499 376.75 mo
528.499 382.25 ln
541.999 376.75 mo
541.999 382.25 ln
555.749 376.75 mo
555.749 382.25 ln
569.249 371.25 mo
569.249 382.25 ln
582.749 376.75 mo
582.749 382.25 ln
596.499 376.75 mo
596.499 382.25 ln
609.999 376.75 mo
609.999 382.25 ln
623.749 376.75 mo
623.749 382.25 ln
637.249 371.25 mo
637.249 382.25 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79f07ea232bdef9ac901d627f1d7c
bbc695d54d248636f112e1e558138c8614732404711d922beb14f6e9da7a
f0f6424e78635561b81229fa2a64943f0a34dc93b34efd58286722f3cf61
311ea7fc7d9e5939d3363e9ede71cf70e1e3065ffc3ecb6cd91e476e222f
a9d3eab4d1de767ebebf490a414b0dffbb21fe8991e5077af9877088538e
7a8f585effec91> ND 
end end
end
/ArialMT findfont /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
112{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
516.749 430.75 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
48{/.notdef}repeat /zero 207{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
86.5 406.25 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
146.25 406.25 mov
(0) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f72e955f0050b5472
6b68794743aa9e2640fbbbe965e5c7462a0da2fe3396d6994552b6fd7b9f
c3a7f776be319813ddb449d1a761c2a25379bcdbddb59583b40898699b48
1611e523f8146fbaea058eb8237d1f8ef6c080ecb39f96cb6c0db3e3c586
248bc7c61f659dbd2f8aadac81a2448e7137d524> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
dup 53 /five put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
46{/.notdef}repeat /period 6{/.notdef}repeat /five 202{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
157.929 406.25 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end end
end
/ArialMT findfont /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
49{/.notdef}repeat /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
223.5 406.25 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
282 406.25 mov
(1) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
293.679 406.25 mov
(.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
359.25 406.25 mov
(2) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/version (001.008) def
/FullName (Symbol) def
/FamilyName (Symbol) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Symbol def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -180 -293 1090 1010 } def
/XUID [6 42996 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECAB94698AF
13A4485757691763CAA8023293C6742E3899EDC5BE94ADFC42A0C0027CA6214B
7F8D5F616C6C2330D450A707B93BDD387F8829CFEF02A72B512D93C14DC1F17C
3175B113E267D8BD6A1447D88A441810C35BAC725EC0017275261A74EB5067CD
9834D1E000DA4929128802A4406C63EAAE5098C3B673FB571CE4AA66227384BC
D1F9516217661F446651CBD433BDBB210B8CB1C0AE7FE1EE2E21077BC11F9270
69E30D1E3AF26358279873C2B62D3AA5368EC87D6A567E789674A8EEED694D74
E8AE78AD599DE625132DC2B96E4C1518B04F598401F1080D43B1530D7089A208
39AB479C8D65D6823FDE8C7085D829EBF9BFD791C95C71C65AE4EC2A01CBA5FA
992ED2E4C180E84DC6E14861844CD132B73A4AA658AD9BE20B35514AC67BF58E
E4587AAC0BA16313B83C2C222F018E737313614351D1EFBF36BD83A38ED9DB6B
D6191BB6160AAC9612D574C3028C8C52B52925658ED342DA958D4100DABE516F
4733BF895741A1EA34A4707864910DD7E8EFE407898B7BCC27AC062D1BA4F11A
73F4342E2D8EF6E101C80AABBFD820974B1F3CC33D070E3C0CF97490AE3CCF18
630A6E2BD4007310EF65E793C445E48BC171043FCE380624354787BC936241D0
3306C33061D7EDD92FAC67F671457CD23F6931B947E97BDA7754E5F56D611220
5C4E82C2815584BF47A854236D460FE90AEE8B7FC419C26F68EB007CE6ED0053
856FABF9D7B6E5E6D910A77FDC4019BC55466E90A87476719B3A8CE5B38E4592
40DEDD91E229FB5784ED9E5A05747D938589B5554723ABC8F7F565F9F7AE6BCF
106F2212EAA54EE7DDD86863B30DFFB84D259A8FD24352AD855813AA02791C07
3824963AA973AEB925BCB75D7B8B65680FFF2B750A7939CBD880C8467D1104DF
9F15B0A8B2E43C7F445BA84DDD777444FD9E2416992213E6D0A936603D381689
9E5E55FFC73083C43CA8A15EAD3BEE4D6AFAD49938AC763CA6CEFF4F499F6EB0
303C5FD86A6DA9601B64F321DE385311C18C43E18842F9D2B0445C853100194C
0EB4F0E368EF73081F98B787C0FD723F3DC0FFF2116676894617D05260524DFA
1C1424BBA73EEF75D8DBD86066850389ABCFEBF01C39C364A46182E47BEB9F55
679298A5A04190FF534218EAB65BEEFD74CF10AB8678EF1F6D0571C160A9603A
CDD271F08AD4812C1D7BD5CCE2DAE0170DD34BEB8CEFCD53644795C872A14E50
D6AAD6F1B8D7189729AE7ADFDCB5DF991B245C81CE2308BCC82D48707AFFA4C9
A4C87D5DC67236E08C7B144AA696669DC25D82589F7BBC7ECEFD474AB108069A
375F2B6B927C6D4C970478E059126CFAAFAE963C89B348FA0CEE452DBAB4A8AA
DC47F03B0A479DA258DE4F981B8B1519E8142B98A32C065A92D354FBE9ECD7A3
B1C375B7A9245CB30CCF340911CC422189F990E34D23D05867D6D1CADDBBF6E6
1EFF93B6403CD6F34053B811E4FE05C45C77F2DDC3CD6022F4F9352DBAC7C493
916B40BC0DD8A0B73D101B3B1F6CA33DC933A787D0F8FA258218C02EBE54CE6F
D690005B614C9FF1F01627AD2152CF9F64A6943593DF8984090A8BC79545B3B1
730173D1A731BFC8B958D446383B82B78AACA16B6DCF8D13DDDFC4BAAAA0A43A
36D67118162D0DC754AB98456139B8131629192292CE31343983BF94E9A4C501
30E0446C12C2618CE44D1DF18F0271C4860B7688F0A4A9C540BA959CC3AE1141
E01925CAF560FD0F1B3867033C3A0DE761ECB14D6186768C644D5E5514F0A7AB
D971CE0E3253403C1483782D0691B7C10E9B2599314BE47234E411105240B7BF
368B8B8DA5194A9CD0F2957351CE7A526B4D1A911022E12811BC25C3C32B7FB4
A277E95FAA5E27BE5F82C320203FDF82F5CBDFE8BA2F81103BC6147EA7BECA6F
C43C19219E0A069B6E90D5487C974C5E857C8CBFA3267EE068227C6A94AAE0D4
0D88F1D90B6967217842E12F7EB8077C84F243D31B7E873FE202978AAF9FA6ED
9DC5431F18F850F9C586EA6E94894301ABB9112374C7CE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 46 /period put
dup 50 /two put
dup 53 /five put
pop
%ADOEndSubsetFont
/Symbol*1 
[
46{/.notdef}repeat /period 3{/.notdef}repeat /two 2{/.notdef}repeat /five 202{/.notdef}repeat
] /Symbol nfnt
/Symbol*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
417.999 406.25 mov
(2.5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d89951110b
adeffb560aa54e338c9127425b06cefdd1d949874d4622c9b30b369b86fa
41b317af240e3deeaa1e9f5a90a07b28e40380e054c3662afb1cf6f51c11
b6836151d28c225e6c4d1016d9fa730c1bf86c199f942682434f25971f32
ae953f8b74fbb716bed8520757e61bce7cf6be4a92865d3717d39c92f18c
1b406caa6c3ed07ea5ff15dde83aea7d31b62642cc5c322a42f14367085d
78b35ebe75a37abae90e77a72aa751401d5e1988c4445fb51991681b7fd3
6a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
51{/.notdef}repeat /three 204{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
495.249 406.25 mov
(3) sh
restore_ctm
save_ctm
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
553.749 406.25 mov
(3) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
565.428 406.25 mov
(.5) sh
restore_ctm
93 382.25 mo
93 13.25 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
630.999 406.25 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 52.75 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 134.75 mov
( ) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/bracketleft 
<10bf31703d3982732597e683930f48fc431193da35737bc660df9a22df5d
4a0eb4eeb4> ND 
/bracketright 
<10bf31706c433b66c1c140e12f9205da7f946903a786b6ec7115a6be8a09
c7424a6f31> ND 
end end
end
/ArialMT findfont /Encoding get
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
91{/.notdef}repeat /bracketleft /.notdef /bracketright 162{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 128.916 mov
([) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 123.081 mov
(c/GeV) sh
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 64.7261 mov
(]) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
84{/.notdef}repeat /T 171{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
42.625 142.5 mov
(T) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/N 
<10bf3170258d0fb193698b7049546445ecd17fd85e4bf2706de899f33391
fbaa27f5dc8abddb7736c2d7> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0bc6dd6d1fb8ca
8bb9fc3e481d183ae50bbfabb21fc2a3f1f6595151c5a2f4acc8d226e0ff
0b4c85bc46ca5265bff351a7f03e78e04c2c72a9d7a9ee7a636db5f99d04
3f9d21fc223e35d9c765eb6b3d5d297173ba8b09f049b0d68aa85f244d1b
> ND 
end end
end
/ArialMT findfont /Encoding get
dup 78 /N put
dup 100 /d put
dup 121 /y put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
78{/.notdef}repeat /N 21{/.notdef}repeat /d 20{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 210.5 mov
(N) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 195.334 mov
(/) sh
/ArialMT*11 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 189.5 mov
(dyd) sh
/ArialMT*2 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 155.642 mov
(p) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 219.25 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -25.414 -25.414 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 248.5 mov
(  ) sh
restore_ctm
save_ctm
/ArialMT*11 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 234.37 mov
(d) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/ArialMT*12 
[
45{/.notdef}repeat /hyphen 210{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*12 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 248.25 mov
(-) sh
/ArialMT*5 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 242.922 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 257 mov
(\)) sh
restore_ctm
save_ctm
/ArialMT*10 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
42.625 267.75 mov
(T) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -25.414 -25.414 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 303.25 mov
( ) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 280.185 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9C4BF5E2D90ABC4
B1A7C9B4A00FE739837CAD4DD7A9EBDCA8BA1C7BFBCC5CEE89836EBF05CABE14
6EBF549019B7BE841811316EEADFEBCC6518284157D61BF186D5E5A0E2F25A97
A4C9E2CBA60E294E252D7C5D03DE3A087B45360E6143E62BDDCDBA011CCF43EA
5511F3F004D2CE8C56D44EBB1C787B58D60385CBEE6E47025D2168C84FC15CFD
00D8F44BED04723D4E35686BD29715890A355531BEF793D0851D923918CA2558
4EB8432B47E344A079B3C8721C447206DF60BD3862965876258542E7F9D5DCE0
C5929291284D6D80E2647A5744D0666997FB588C40B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 112 /pi put
pop
%ADOEndSubsetFont
/Symbol*2 
[
112{/.notdef}repeat /pi 143{/.notdef}repeat
] /Symbol nfnt
/Symbol*2 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 294 mov
(p) sh
restore_ctm
109.25 382.25 mo
93 382.25 ln
s
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 314.25 mov
(\() sh
/ArialMT*6 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 307.257 mov
(2) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 295.578 mov
( ) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
71.5 383.5 mov
(-) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/six 
<10bf3170435d0d4425184fc061c7faa8dc6baee8c868da453cb6a6f891b2
5354e14cb1bc5e0a0fcae04743a9daec5483058e0dde89957524c8915b19
25146f588ef5a70cf81e2e4fc7890fddf0f5d4c16f77c4469f58479cdd1b
49f5c68eada3087814223d9b5aa8284ce9770f7175297744c20f41a48dc8
d286517deb8893f3230571eaf9ea1ba0abf787d646e1631373082ff4df40
4c74838bb86fd789e63cac0da4dceabebd4d0fc0472fd6a9ca90e64e3c08
8853c020aae52cb442800bb6081c0fefcb0a206f46cf4ec1e25c13c94cbb
330a8f2762> ND 
end end
end
/ArialMT findfont /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ArialMT*13 
[
54{/.notdef}repeat /six 201{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*13 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
76.8281 383.5 mov
(6) sh
restore_ctm
101.25 368.5 mo
93 368.5 ln
101.25 360.25 mo
93 360.25 ln
101.25 354.5 mo
93 354.5 ln
101.25 350 mo
93 350 ln
101.25 346.5 mo
93 346.5 ln
101.25 343.25 mo
93 343.25 ln
101.25 340.75 mo
93 340.75 ln
101.25 338.25 mo
93 338.25 ln
109.25 336.25 mo
93 336.25 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
48 394.25 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.6792 394.25 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
71.5 337.5 mov
(-) sh
/ArialMT*4 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
76.8281 337.5 mov
(5) sh
restore_ctm
101.25 322.25 mo
93 322.25 ln
101.25 314.25 mo
93 314.25 ln
101.25 308.5 mo
93 308.5 ln
101.25 304 mo
93 304 ln
101.25 300.25 mo
93 300.25 ln
101.25 297.25 mo
93 297.25 ln
101.25 294.5 mo
93 294.5 ln
101.25 292.25 mo
93 292.25 ln
109.25 290 mo
93 290 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
48 348.25 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.6792 348.25 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
71.5 292.75 mov
(-) sh
/ArialMT*8 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
76.8281 292.75 mov
(4) sh
restore_ctm
101.25 276.25 mo
93 276.25 ln
101.25 268 mo
93 268 ln
101.25 262.25 mo
93 262.25 ln
101.25 257.75 mo
93 257.75 ln
101.25 254.25 mo
93 254.25 ln
101.25 251 mo
93 251 ln
101.25 248.5 mo
93 248.5 ln
101.25 246 mo
93 246 ln
109.25 244 mo
93 244 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
48 302.5 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.6792 302.5 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
71.5 245.75 mov
(-) sh
/ArialMT*7 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
76.8281 245.75 mov
(3) sh
restore_ctm
101.25 230 mo
93 230 ln
101.25 222 mo
93 222 ln
101.25 216.25 mo
93 216.25 ln
101.25 211.75 mo
93 211.75 ln
101.25 208 mo
93 208 ln
101.25 205 mo
93 205 ln
101.25 202.25 mo
93 202.25 ln
101.25 200 mo
93 200 ln
109.25 197.75 mo
93 197.75 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
48 256.5 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.6792 256.5 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
71.5 200.75 mov
(-) sh
/ArialMT*6 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
76.8281 200.75 mov
(2) sh
restore_ctm
101.25 184 mo
93 184 ln
101.25 175.75 mo
93 175.75 ln
101.25 170 mo
93 170 ln
101.25 165.5 mo
93 165.5 ln
101.25 162 mo
93 162 ln
101.25 158.75 mo
93 158.75 ln
101.25 156.25 mo
93 156.25 ln
101.25 153.75 mo
93 153.75 ln
109.25 151.75 mo
93 151.75 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
48 210.5 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
59.6792 210.5 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
73.5 153.75 mov
(-) sh
/ArialMT*5 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
78.8281 153.75 mov
(1) sh
restore_ctm
101.25 137.75 mo
93 137.75 ln
101.25 129.75 mo
93 129.75 ln
101.25 124 mo
93 124 ln
101.25 119.5 mo
93 119.5 ln
101.25 115.75 mo
93 115.75 ln
101.25 112.75 mo
93 112.75 ln
101.25 110 mo
93 110 ln
101.25 107.75 mo
93 107.75 ln
109.25 105.5 mo
93 105.5 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50 163.5 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
61.6792 163.5 mov
(0) sh
restore_ctm
101.25 91.75 mo
93 91.75 ln
101.25 83.5 mo
93 83.5 ln
101.25 77.75 mo
93 77.75 ln
101.25 73.25 mo
93 73.25 ln
101.25 69.75 mo
93 69.75 ln
101.25 66.5 mo
93 66.5 ln
101.25 64 mo
93 64 ln
101.25 61.5 mo
93 61.5 ln
109.25 59.5 mo
93 59.5 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
72.793 114.5 mov
(1) sh
restore_ctm
101.25 45.5 mo
93 45.5 ln
101.25 37.5 mo
93 37.5 ln
101.25 31.75 mo
93 31.75 ln
101.25 27.25 mo
93 27.25 ln
101.25 23.5 mo
93 23.5 ln
101.25 20.5 mo
93 20.5 ln
101.25 17.75 mo
93 17.75 ln
101.25 15.5 mo
93 15.5 ln
109.25 13.25 mo
93 13.25 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
60.8359 68.5 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
72.5151 68.5 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
79.125 16 mov
(2) sh
restore_ctm
596.499 292.625 mo
587.874 309.875 ln
605.124 309.875 ln
596.499 292.625 ln
ef
569.249 284.625 mo
560.624 301.875 ln
577.874 301.875 ln
569.249 284.625 ln
ef
541.999 273.875 mo
533.374 291.125 ln
550.624 291.125 ln
541.999 273.875 ln
ef
514.749 266.875 mo
506.124 284.125 ln
523.374 284.125 ln
514.749 266.875 ln
ef
487.499 262.375 mo
478.874 279.625 ln
496.124 279.625 ln
487.499 262.375 ln
ef
460.499 252.625 mo
451.874 269.875 ln
469.124 269.875 ln
460.499 252.625 ln
ef
433.249 239.625 mo
424.624 256.875 ln
441.874 256.875 ln
433.249 239.625 ln
ef
405.999 228.125 mo
397.374 245.375 ln
414.624 245.375 ln
405.999 228.125 ln
ef
378.749 220.625 mo
370.124 237.875 ln
387.374 237.875 ln
378.749 220.625 ln
ef
351.5 208.125 mo
342.875 225.375 ln
360.125 225.375 ln
351.5 208.125 ln
ef
324.25 201.125 mo
315.625 218.375 ln
332.875 218.375 ln
324.25 201.125 ln
ef
297.25 186.625 mo
288.625 203.875 ln
305.875 203.875 ln
297.25 186.625 ln
ef
270 175.375 mo
261.375 192.625 ln
278.625 192.625 ln
270 175.375 ln
ef
242.75 162.375 mo
234.125 179.625 ln
251.375 179.625 ln
242.75 162.375 ln
ef
215.5 147.875 mo
206.875 165.125 ln
224.125 165.125 ln
215.5 147.875 ln
ef
188.25 137.625 mo
179.625 154.875 ln
196.875 154.875 ln
188.25 137.625 ln
ef
161 127.375 mo
152.375 144.625 ln
169.625 144.625 ln
161 127.375 ln
ef
133.75 125.375 mo
125.125 142.625 ln
142.375 142.625 ln
133.75 125.375 ln
ef
2.25 lw
136.25 131 mo
140.75 132.25 ln
145.5 133.5 ln
150 134.75 ln
154.75 136 ln
159.25 137.5 ln
164 139 ln
168.5 140.75 ln
173.25 142.25 ln
177.75 144 ln
182.5 145.75 ln
187 147.5 ln
191.75 149.25 ln
196.25 151.25 ln
201 153 ln
205.5 155 ln
210.25 156.75 ln
214.75 158.75 ln
219.5 160.75 ln
224 162.75 ln
228.75 164.75 ln
233.25 166.75 ln
238 168.75 ln
242.5 170.75 ln
247.25 172.75 ln
251.75 174.75 ln
256.5 176.75 ln
261 178.75 ln
265.75 180.75 ln
270.25 182.75 ln
275 184.75 ln
279.5 186.75 ln
284.25 188.75 ln
288.75 190.75 ln
293.5 192.75 ln
298 194.75 ln
302.75 196.75 ln
307.25 198.75 ln
312 200.75 ln
316.5 202.75 ln
321.25 204.75 ln
325.75 206.75 ln
330.5 208.5 ln
335 210.5 ln
339.75 212.5 ln
344.25 214.25 ln
349 216.25 ln
353.5 218.25 ln
358.25 220 ln
362.75 222 ln
362.75 222 mo
367.499 223.75 ln
371.999 225.75 ln
376.749 227.5 ln
381.249 229.25 ln
385.999 231.25 ln
390.499 233 ln
395.249 234.75 ln
399.749 236.75 ln
404.499 238.5 ln
408.999 240.25 ln
413.749 242 ln
418.249 243.75 ln
422.999 245.5 ln
427.499 247.25 ln
432.249 249 ln
436.749 250.75 ln
441.499 252.5 ln
445.999 254 ln
450.749 255.75 ln
455.499 257.5 ln
459.999 259.25 ln
464.749 260.75 ln
469.249 262.5 ln
473.999 264.25 ln
478.499 265.75 ln
483.249 267.5 ln
487.749 269 ln
492.499 270.75 ln
496.999 272.25 ln
501.749 273.75 ln
506.249 275.5 ln
510.999 277 ln
515.499 278.5 ln
520.249 280.25 ln
524.749 281.75 ln
529.499 283.25 ln
533.999 284.75 ln
538.749 286.25 ln
543.249 287.75 ln
547.999 289.25 ln
552.499 290.75 ln
557.249 292.25 ln
561.749 293.75 ln
566.499 295.25 ln
570.999 296.75 ln
575.749 298.25 ln
580.249 299.75 ln
584.999 301 ln
589.499 302.5 ln
589.499 302.5 mo
594.249 304 ln
s
541.999 232.5 mo
534.999 232.5 ln
534.999 246.5 ln
548.999 246.5 ln
548.999 232.5 ln
541.999 232.5 ln
ef
514.749 223.75 mo
507.749 223.75 ln
507.749 237.75 ln
521.749 237.75 ln
521.749 223.75 ln
514.749 223.75 ln
ef
487.499 218.75 mo
480.499 218.75 ln
480.499 232.75 ln
494.499 232.75 ln
494.499 218.75 ln
487.499 218.75 ln
ef
460.499 205.75 mo
453.499 205.75 ln
453.499 219.75 ln
467.499 219.75 ln
467.499 205.75 ln
460.499 205.75 ln
ef
433.249 195.25 mo
426.249 195.25 ln
426.249 209.25 ln
440.249 209.25 ln
440.249 195.25 ln
433.249 195.25 ln
ef
405.999 183.75 mo
398.999 183.75 ln
398.999 197.75 ln
412.999 197.75 ln
412.999 183.75 ln
405.999 183.75 ln
ef
378.749 175.5 mo
371.749 175.5 ln
371.749 189.5 ln
385.749 189.5 ln
385.749 175.5 ln
378.749 175.5 ln
ef
351.5 165 mo
344.5 165 ln
344.5 179 ln
358.5 179 ln
358.5 165 ln
351.5 165 ln
ef
324.25 155.75 mo
317.25 155.75 ln
317.25 169.75 ln
331.25 169.75 ln
331.25 155.75 ln
324.25 155.75 ln
ef
297.25 145.25 mo
290.25 145.25 ln
290.25 159.25 ln
304.25 159.25 ln
304.25 145.25 ln
297.25 145.25 ln
ef
270 135.5 mo
263 135.5 ln
263 149.5 ln
277 149.5 ln
277 135.5 ln
270 135.5 ln
ef
242.75 120 mo
235.75 120 ln
235.75 134 ln
249.75 134 ln
249.75 120 ln
242.75 120 ln
ef
215.5 106.75 mo
208.5 106.75 ln
208.5 120.75 ln
222.5 120.75 ln
222.5 106.75 ln
215.5 106.75 ln
ef
188.25 98.25 mo
181.25 98.25 ln
181.25 112.25 ln
195.25 112.25 ln
195.25 98.25 ln
188.25 98.25 ln
ef
161 93.75 mo
154 93.75 ln
154 107.75 ln
168 107.75 ln
168 93.75 ln
161 93.75 ln
ef
133.75 83.5 mo
126.75 83.5 ln
126.75 97.5 ln
140.75 97.5 ln
140.75 83.5 ln
133.75 83.5 ln
ef
135.75 93 mo
140 93.75 ln
144 94.75 ln
148 95.75 ln
152.25 96.75 ln
156.25 97.75 ln
160.25 98.75 ln
164.5 100 ln
168.5 101 ln
172.5 102.25 ln
176.75 103.5 ln
180.75 104.75 ln
184.75 106 ln
189 107.5 ln
193 108.75 ln
197 110.25 ln
201.25 111.75 ln
205.25 113 ln
209.25 114.5 ln
213.5 116 ln
217.5 117.5 ln
221.5 119 ln
225.75 120.75 ln
229.75 122.25 ln
233.75 123.75 ln
238 125.25 ln
242 127 ln
246 128.5 ln
250.25 130.25 ln
254.25 131.75 ln
258.25 133.5 ln
262.5 135 ln
266.5 136.75 ln
270.5 138.25 ln
274.75 140 ln
278.75 141.75 ln
282.75 143.25 ln
287 145 ln
291 146.75 ln
295 148.25 ln
299.25 150 ln
303.25 151.75 ln
307.25 153.5 ln
311.5 155 ln
315.5 156.75 ln
319.5 158.5 ln
323.75 160.25 ln
327.75 161.75 ln
331.75 163.5 ln
336 165.25 ln
336 165.25 mo
340 167 ln
344 168.5 ln
348.25 170.25 ln
352.25 172 ln
356.25 173.75 ln
360.5 175.25 ln
364.5 177 ln
368.499 178.75 ln
372.749 180.5 ln
376.749 182 ln
380.749 183.75 ln
384.999 185.5 ln
388.999 187 ln
392.999 188.75 ln
397.249 190.5 ln
401.249 192.25 ln
405.249 193.75 ln
409.499 195.5 ln
413.499 197.25 ln
417.499 198.75 ln
421.749 200.5 ln
425.749 202 ln
429.749 203.75 ln
433.999 205.5 ln
437.999 207 ln
441.999 208.75 ln
446.249 210.25 ln
450.249 212 ln
454.249 213.75 ln
458.499 215.25 ln
462.499 217 ln
466.499 218.5 ln
470.499 220.25 ln
474.749 221.75 ln
478.749 223.5 ln
482.749 225 ln
486.999 226.75 ln
490.999 228.25 ln
494.999 230 ln
499.249 231.5 ln
503.249 233 ln
507.249 234.75 ln
511.499 236.25 ln
515.499 238 ln
519.499 239.5 ln
523.749 241 ln
527.749 242.75 ln
531.749 244.25 ln
535.999 245.75 ln
535.999 245.75 mo
539.999 247.5 ln
s
440.574 183.78 mo
440.574 179.709 437.271 176.405 433.199 176.405 cv
429.128 176.405 425.824 179.709 425.824 183.78 cv
425.824 187.851 429.128 191.155 433.199 191.155 cv
437.271 191.155 440.574 187.851 440.574 183.78 cv
ef
413.334 174.54 mo
413.334 170.469 410.03 167.165 405.959 167.165 cv
401.889 167.165 398.584 170.469 398.584 174.54 cv
398.584 178.611 401.889 181.915 405.959 181.915 cv
410.03 181.915 413.334 178.611 413.334 174.54 cv
ef
386.094 166.5 mo
386.094 162.429 382.79 159.125 378.719 159.125 cv
374.648 159.125 371.344 162.429 371.344 166.5 cv
371.344 170.571 374.648 173.875 378.719 173.875 cv
382.79 173.875 386.094 170.571 386.094 166.5 cv
ef
358.855 153.54 mo
358.855 149.469 355.551 146.165 351.48 146.165 cv
347.408 146.165 344.105 149.469 344.105 153.54 cv
344.105 157.611 347.408 160.915 351.48 160.915 cv
355.551 160.915 358.855 157.611 358.855 153.54 cv
ef
331.615 141.78 mo
331.615 137.709 328.311 134.405 324.24 134.405 cv
320.168 134.405 316.865 137.709 316.865 141.78 cv
316.865 145.851 320.168 149.155 324.24 149.155 cv
328.311 149.155 331.615 145.851 331.615 141.78 cv
ef
304.615 133.26 mo
304.615 129.189 301.311 125.885 297.24 125.885 cv
293.168 125.885 289.865 129.189 289.865 133.26 cv
289.865 137.331 293.168 140.635 297.24 140.635 cv
301.311 140.635 304.615 137.331 304.615 133.26 cv
ef
277.375 124.02 mo
277.375 119.949 274.07 116.645 270 116.645 cv
265.928 116.645 262.625 119.949 262.625 124.02 cv
262.625 128.091 265.928 131.395 270 131.395 cv
274.07 131.395 277.375 128.091 277.375 124.02 cv
ef
250.135 107.7 mo
250.135 103.629 246.83 100.325 242.76 100.325 cv
238.689 100.325 235.385 103.629 235.385 107.7 cv
235.385 111.771 238.689 115.075 242.76 115.075 cv
246.83 115.075 250.135 111.771 250.135 107.7 cv
ef
222.895 97.02 mo
222.895 92.9492 219.59 89.645 215.52 89.645 cv
211.449 89.645 208.145 92.9492 208.145 97.02 cv
208.145 101.091 211.449 104.395 215.52 104.395 cv
219.59 104.395 222.895 101.091 222.895 97.02 cv
ef
195.654 87.0601 mo
195.654 82.9888 192.35 79.6851 188.279 79.6851 cv
184.209 79.6851 180.904 82.9888 180.904 87.0601 cv
180.904 91.1309 184.209 94.4351 188.279 94.4351 cv
192.35 94.4351 195.654 91.1309 195.654 87.0601 cv
ef
168.414 83.2202 mo
168.414 79.1489 165.111 75.8452 161.039 75.8452 cv
156.969 75.8452 153.664 79.1489 153.664 83.2202 cv
153.664 87.291 156.969 90.5952 161.039 90.5952 cv
165.111 90.5952 168.414 87.291 168.414 83.2202 cv
ef
141.174 73.2598 mo
141.174 69.189 137.871 65.8848 133.799 65.8848 cv
129.729 65.8848 126.424 69.189 126.424 73.2598 cv
126.424 77.3311 129.729 80.6348 133.799 80.6348 cv
137.871 80.6348 141.174 77.3311 141.174 73.2598 cv
ef
135.25 74 mo
138.25 74.5 ln
141.25 75.25 ln
144.25 75.75 ln
147.25 76.5 ln
150.25 77.25 ln
153.25 78 ln
156.25 79 ln
159.25 79.75 ln
162.25 80.5 ln
165.25 81.5 ln
168.25 82.5 ln
171.25 83.25 ln
174.25 84.25 ln
177.25 85.25 ln
180.25 86.25 ln
183.25 87.25 ln
186.25 88.25 ln
189.25 89.25 ln
192.25 90.25 ln
195.25 91.5 ln
198.25 92.5 ln
201.25 93.5 ln
204.25 94.75 ln
207.25 95.75 ln
210.25 97 ln
213.25 98 ln
216.25 99.25 ln
219.25 100.25 ln
222.25 101.5 ln
225.25 102.75 ln
228.25 103.75 ln
231.25 105 ln
234 106.25 ln
237 107.5 ln
240 108.5 ln
243 109.75 ln
246 111 ln
249 112.25 ln
252 113.5 ln
255 114.5 ln
258 115.75 ln
261 117 ln
264 118.25 ln
267 119.5 ln
270 120.75 ln
273 122 ln
276 123.25 ln
279 124.25 ln
282 125.5 ln
282 125.5 mo
285 126.75 ln
288 128 ln
291 129.25 ln
294 130.5 ln
297 131.75 ln
300 133 ln
303 134.25 ln
306 135.5 ln
309 136.5 ln
312 137.75 ln
315 139 ln
318 140.25 ln
321 141.5 ln
324 142.75 ln
327 144 ln
330 145.25 ln
333 146.25 ln
336 147.5 ln
339 148.75 ln
342 150 ln
345 151.25 ln
348 152.5 ln
351 153.5 ln
354 154.75 ln
356.75 156 ln
359.75 157.25 ln
362.75 158.25 ln
365.75 159.5 ln
368.749 160.75 ln
371.749 162 ln
374.749 163 ln
377.749 164.25 ln
380.749 165.5 ln
383.749 166.75 ln
386.749 167.75 ln
389.749 169 ln
392.749 170.25 ln
395.749 171.25 ln
398.749 172.5 ln
401.749 173.75 ln
404.749 174.75 ln
407.749 176 ln
410.749 177.25 ln
413.749 178.25 ln
416.749 179.5 ln
419.749 180.5 ln
422.749 181.75 ln
425.749 183 ln
428.749 184 ln
428.749 184 mo
431.749 185.25 ln
s
623.749 214.375 mo
631.124 199.625 ln
616.374 199.625 ln
623.749 214.375 ln
ef
596.499 207.375 mo
603.874 192.625 ln
589.124 192.625 ln
596.499 207.375 ln
ef
569.249 197.875 mo
576.624 183.125 ln
561.874 183.125 ln
569.249 197.875 ln
ef
541.999 189.625 mo
549.374 174.875 ln
534.624 174.875 ln
541.999 189.625 ln
ef
514.749 182.375 mo
522.124 167.625 ln
507.374 167.625 ln
514.749 182.375 ln
ef
487.499 176.375 mo
494.874 161.625 ln
480.124 161.625 ln
487.499 176.375 ln
ef
460.499 165.125 mo
467.874 150.375 ln
453.124 150.375 ln
460.499 165.125 ln
ef
433.249 153.375 mo
440.624 138.625 ln
425.874 138.625 ln
433.249 153.375 ln
ef
405.999 142.875 mo
413.374 128.125 ln
398.624 128.125 ln
405.999 142.875 ln
ef
378.749 134.875 mo
386.124 120.125 ln
371.374 120.125 ln
378.749 134.875 ln
ef
351.5 123.125 mo
358.875 108.375 ln
344.125 108.375 ln
351.5 123.125 ln
ef
324.25 114.125 mo
331.625 99.375 ln
316.875 99.375 ln
324.25 114.125 ln
ef
297.25 102.125 mo
304.625 87.375 ln
289.875 87.375 ln
297.25 102.125 ln
ef
270 92.375 mo
277.375 77.625 ln
262.625 77.625 ln
270 92.375 ln
ef
242.75 77.625 mo
250.125 62.875 ln
235.375 62.875 ln
242.75 77.625 ln
ef
215.5 64.375 mo
222.875 49.625 ln
208.125 49.625 ln
215.5 64.375 ln
ef
188.25 56.375 mo
195.625 41.625 ln
180.875 41.625 ln
188.25 56.375 ln
ef
161 50.375 mo
168.375 35.625 ln
153.625 35.625 ln
161 50.375 ln
ef
133.75 42.125 mo
141.125 27.375 ln
126.375 27.375 ln
133.75 42.125 ln
ef
136.25 34.5 mo
141.25 35.75 ln
146 37 ln
151 38.25 ln
155.75 39.5 ln
160.75 41 ln
165.75 42.5 ln
170.5 44 ln
175.5 45.75 ln
180.25 47.5 ln
185.25 49.25 ln
190.25 51 ln
195 52.75 ln
200 54.5 ln
204.75 56.5 ln
209.75 58.25 ln
214.75 60.25 ln
219.5 62.25 ln
224.5 64.25 ln
229.25 66 ln
234.25 68 ln
239.25 70 ln
244 72 ln
249 74 ln
253.75 76 ln
258.75 78 ln
263.75 80 ln
268.5 82 ln
273.5 84 ln
278.25 86 ln
283.25 88 ln
288.25 90 ln
293 92 ln
298 94 ln
302.75 96 ln
307.75 98 ln
312.75 100 ln
317.5 102 ln
322.5 104 ln
327.25 106 ln
332.25 108 ln
337 109.75 ln
342 111.75 ln
347 113.75 ln
351.75 115.75 ln
356.75 117.5 ln
361.5 119.5 ln
366.499 121.25 ln
371.499 123.25 ln
376.249 125 ln
376.249 125 mo
381.249 127 ln
385.999 128.75 ln
390.999 130.75 ln
395.999 132.5 ln
400.749 134.25 ln
405.749 136.25 ln
410.499 138 ln
415.499 139.75 ln
420.499 141.5 ln
425.249 143.25 ln
430.249 145 ln
434.999 146.75 ln
439.999 148.5 ln
444.999 150.25 ln
449.749 152 ln
454.749 153.75 ln
459.499 155.5 ln
464.499 157.25 ln
469.499 159 ln
474.249 160.5 ln
479.249 162.25 ln
483.999 164 ln
488.999 165.5 ln
493.999 167.25 ln
498.749 169 ln
503.749 170.5 ln
508.499 172.25 ln
513.499 173.75 ln
518.499 175.5 ln
523.249 177 ln
528.249 178.5 ln
532.999 180.25 ln
537.999 181.75 ln
542.749 183.25 ln
547.749 184.75 ln
552.749 186.5 ln
557.499 188 ln
562.499 189.5 ln
567.249 191 ln
572.249 192.5 ln
577.249 194 ln
581.999 195.5 ln
586.999 197 ln
591.749 198.5 ln
596.749 200 ln
601.749 201.5 ln
606.499 203 ln
611.499 204.5 ln
616.249 205.75 ln
616.249 205.75 mo
621.249 207.25 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
53 25.75 mov
(1) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
64.6792 25.75 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
326 269.25 mov
( ) sh
/ArialMT*5 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
332.946 269.25 mov
(1) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
346.85 269.25 mov
(0) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9D9B07C4F6FECBA
143B7E5A9CA98416A36CA576AC4B9854FA0FA9122A22BD90794B50BD1E29EC55
D75D1151FDA7AD329778D08A0EC6EFC998E3C1C2D9006C9259ACFC092F69CD98
C2F2571B077D3146470E8E49DCF4E7FCA3F54E6B75C09C8E9A9793A8F6186FA2
3879F7157544BA2FEA2A31F5751BBFE23A059F8ADC764B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 180 /multiply put
pop
%ADOEndSubsetFont
/Symbol*3 
[
180{/.notdef}repeat /multiply 75{/.notdef}repeat
] /Symbol nfnt
/Symbol*3 findfont [25.414 0 0 -25.414 0 0 ]mfnt sfnt
BuildWidthShowArray
313.25 269.25 mov
(\264) sh
restore_ctm
151.135 257.94 mo
151.135 253.869 147.83 250.565 143.76 250.565 cv
139.689 250.565 136.385 253.869 136.385 257.94 cv
136.385 262.011 139.689 265.315 143.76 265.315 cv
147.83 265.315 151.135 262.011 151.135 257.94 cv
ef
save_ctm
/ArialMT*11 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
166.75 269.25 mov
(d) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/percent 
<10bf317037023d4c0d7ec55f50e0d703cca3a91924009f4c54fa159cf720
05369ccdabc1406ade1a67cb8d912b310ad9f04e6f3b28d418a72a41c0d1
82546e1a7620eb97f057ef2d2818c17e8fa65f685e4d4e5e802ebc46e74f
c24c6aab9527e691343fc6ee843822158aa5860b42421d2cab508fb7a1ef
041bfd9f3df048726b67a5f3d9d2baebfd0da8f41a68b5c249e6306143da
781c59bfed50e7b6aa0d30f5637d48a589fe7132f9df130dbf99124377cd
7bec8347fb1962a828f67cbccb3ac9a2a465f606f6dca2f8b5b7ed55449e
3181f995ae07070d2e5a09dafab52c13b0e8aa5df2ffa25948b618b258ef
82606b00e5d7d3dd2d855510591e51de1d44623ab7287d84635357e7f605
27875c0c> ND 
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac576702c4654165111c4e219216
925a1bbda37b8221ddb4f3d7ef9dc32fffa987a0f0ea03488171acb09982
96179b683649315a4b1534> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 37 /percent put
dup 43 /plus put
dup 65 /A put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*14 
[
37{/.notdef}repeat /percent 5{/.notdef}repeat /plus 21{/.notdef}repeat /A 51{/.notdef}repeat /u 
138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
180.654 269.25 mov
(+Au) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
225.832 269.25 mov
( ) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
232.778 269.25 mov
(0) sh
/ArialMT*12 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
246.682 269.25 mov
(-) sh
/ArialMT*6 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
255.007 269.25 mov
(2) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
268.911 269.25 mov
(0) sh
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
282.814 269.25 mov
(%) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
305.043 269.25 mov
( ) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
339.75 299.5 mov
( ) sh
/ArialMT*4 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
346.696 299.5 mov
(5) sh
restore_ctm
save_ctm
/Symbol*3 findfont [25.414 0 0 -25.414 0 0 ]mfnt sfnt
BuildWidthShowArray
327 299.5 mov
(\264) sh
restore_ctm
143.75 281.25 mo
136.75 281.25 ln
136.75 295.25 ln
150.75 295.25 ln
150.75 281.25 ln
143.75 281.25 ln
ef
save_ctm
/ArialMT*11 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
166.75 299.5 mov
(d) sh
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
180.654 299.5 mov
(+Au) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
225.832 299.5 mov
( ) sh
/ArialMT*6 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
232.778 299.5 mov
(2) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
246.682 299.5 mov
(0) sh
/ArialMT*12 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
260.585 299.5 mov
(-) sh
/ArialMT*8 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
268.911 299.5 mov
(4) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
282.814 299.5 mov
(0) sh
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
296.718 299.5 mov
(%) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
318.947 299.5 mov
( ) sh
restore_ctm
143.75 309.875 mo
135.125 327.125 ln
152.375 327.125 ln
143.75 309.875 ln
ef
save_ctm
/ArialMT*11 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
166.75 329.75 mov
(d) sh
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
180.654 329.75 mov
(+Au) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
225.832 329.75 mov
( ) sh
/ArialMT*8 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
232.778 329.75 mov
(4) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
246.682 329.75 mov
(0) sh
/ArialMT*12 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
260.585 329.75 mov
(-) sh
/ArialMT*5 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
268.911 329.75 mov
(1) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
282.814 329.75 mov
(00) sh
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
310.622 329.75 mov
(%) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
411.999 360 mov
( ) sh
/ArialMT*5 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
418.945 360 mov
(1) sh
/ArialMT*3 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
432.849 360 mov
(00) sh
restore_ctm
save_ctm
/Symbol*3 findfont [25.414 0 0 -25.414 0 0 ]mfnt sfnt
BuildWidthShowArray
399.249 360 mov
(\264) sh
restore_ctm
143.75 356.125 mo
151.125 341.375 ln
136.375 341.375 ln
143.75 356.125 ln
ef
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/B 
<10bf317026ba62063ac1fc9b1b7da70a4283bca66508b7487db96d3b5e50
ebb26d781c08b71d8c60e86f5f95e258aadae78cebfccceace7d1e24a04f
7a0ebebb84d24fd6e0dcc7805db6e5cdf4eb0699290a048d32bdfc7bda09
b014801b6912f42581f07cfc0dad1f3a0fda97cccb6dc64f3c2133712b38
17f9dcf78f219a31023477457afb4124f2e67688f81d2fae0a3d889fa20e
a1e4d003c07fa3b1c5e475e398065490772a2317b8a1741177b48843cacc
98258835f7713d01ccd04d20a02276a9eaa215ecd7e642af0d478b9844bc
79867bee2d8cdbfd06> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638bbfe80126114fe37407e2e312c7bcbd2c
1b7b9e7fac2817224e19> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 66 /B put
dup 77 /M put
dup 97 /a put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 115 /s put
pop
%ADOEndSubsetFont
/ArialMT*15 
[
66{/.notdef}repeat /B 10{/.notdef}repeat /M 19{/.notdef}repeat /a 7{/.notdef}repeat /i 
3{/.notdef}repeat /m /n 4{/.notdef}repeat /s 140{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*15 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
166.75 360 mov
(Minim) sh
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
233.413 360 mov
(u) sh
/ArialMT*15 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
247.316 360 mov
(m) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
268.142 360 mov
( ) sh
/ArialMT*15 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
275.087 360 mov
(Bias) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
323.72 360 mov
( ) sh
/ArialMT*11 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
330.666 360 mov
(d) sh
/ArialMT*14 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
344.57 360 mov
(+Au) sh
/ArialMT*1 findfont [25 0 0 -25 0 0 ]mfnt sfnt
BuildWidthShowArray
389.748 360 mov
( ) sh
restore_ctm
save_ctm
/ArialMT*10 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
527.125 443.01 mov
(T) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9C61B1AF530D86A
EA027C70855C41E9C9B209B65E4C9F7B8832A013F3E89248FF22CF3B4F31335D
50716B1434B372B7001778D95030E7515283DF5AD258A00E6A33C7B314F933B3
7CAF420F6B5BB57D32B8BCAF2524587ED535219031A7C10FC8F3424BEF7375A3
911F69612A72E03820D3CE8F3448707E5EA7578BB6E35A4CF693BEBA5EE4B8BA
4B8E2689391D86A44CF2218F0719B9FD478062833F9792F7EF595A50A2A71684
959E7B093CDDB9C221CE3211606804EDC36DD2B2F130DD60411EEEB53ECC4A18
185B50D6F32B2C713E0B9D886DC8CDFEBD500E186ACB5FB55F031D88FE1095BE
BBC6D9D40B6E6DD4E54DAF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 114 /rho put
pop
%ADOEndSubsetFont
/Symbol*4 
[
114{/.notdef}repeat /rho 141{/.notdef}repeat
] /Symbol nfnt
/Symbol*4 findfont [28 0 0 -28 0 0 ]mfnt sfnt
BuildWidthShowArray
499.125 79.0098 mov
(r) sh
restore_ctm
/ArialMT*3 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
514.125 67.0098 mov
(0) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
