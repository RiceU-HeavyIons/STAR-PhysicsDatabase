%!PS-Adobe-3.1 EPSF-3.0
%%Title: ChargedKStarMinbiasInvMass.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 4/11/2007
%%CropBox: 0.000000 0.000000 638.693359 466.443359
%%BoundingBox: 0 0 639 467 
%%HiResBoundingBox: 0.000000 0.000000 638.693359 466.443359
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -466.443 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 466.443 ln
638.693 466.443 ln
638.693 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
90 408.625 mo
90 0.375 ln
634.25 0.375 ln
634.25 408.625 ln
90 408.625 ln
cp
false op
0 0 0 1 cmyk
s
90 408.625 mo
90 0.375 ln
634.25 0.375 ln
634.25 408.625 ln
90 408.625 ln
cp
96.5 256.875 mo
96.5 250.375 ln
96.5 242.625 mo
96.5 235.875 ln
90 246.375 mo
92.5 246.375 ln
100.5 246.375 mo
103 246.375 ln
s
100.355 246.345 mo
100.355 244.206 98.6191 242.47 96.4805 242.47 cv
94.3408 242.47 92.6055 244.206 92.6055 246.345 cv
92.6055 248.484 94.3408 250.22 96.4805 250.22 cv
98.6191 250.22 100.355 248.484 100.355 246.345 cv
ef
109.5 248.875 mo
109.5 242.125 ln
109.5 234.125 mo
109.5 227.375 ln
103 238.125 mo
105.5 238.125 ln
113.5 238.125 mo
116 238.125 ln
s
113.315 238.065 mo
113.315 235.926 111.579 234.19 109.44 234.19 cv
107.301 234.19 105.565 235.926 105.565 238.065 cv
105.565 240.204 107.301 241.94 109.44 241.94 cv
111.579 241.94 113.315 240.204 113.315 238.065 cv
ef
122.5 257.125 mo
122.5 250.125 ln
122.5 242.375 mo
122.5 235.375 ln
116 246.375 mo
118.5 246.375 ln
126.25 246.375 mo
129 246.375 ln
s
126.395 246.345 mo
126.395 244.206 124.659 242.47 122.52 242.47 cv
120.381 242.47 118.645 244.206 118.645 246.345 cv
118.645 248.484 120.381 250.22 122.52 250.22 cv
124.659 250.22 126.395 248.484 126.395 246.345 cv
ef
135.5 228.125 mo
135.5 220.875 ln
135.5 213.125 mo
135.5 205.875 ln
129 217.125 mo
131.5 217.125 ln
139.25 217.125 mo
141.75 217.125 ln
s
139.355 217.185 mo
139.355 215.046 137.619 213.31 135.48 213.31 cv
133.341 213.31 131.605 215.046 131.605 217.185 cv
131.605 219.324 133.341 221.06 135.48 221.06 cv
137.619 221.06 139.355 219.324 139.355 217.185 cv
ef
148.25 234.625 mo
148.25 227.375 ln
148.25 219.625 mo
148.25 212.375 ln
141.75 223.625 mo
144.5 223.625 ln
152.25 223.625 mo
154.75 223.625 ln
s
152.195 223.665 mo
152.195 221.526 150.459 219.79 148.32 219.79 cv
146.181 219.79 144.445 221.526 144.445 223.665 cv
144.445 225.804 146.181 227.54 148.32 227.54 cv
150.459 227.54 152.195 225.804 152.195 223.665 cv
ef
161.25 241.625 mo
161.25 234.375 ln
161.25 226.625 mo
161.25 219.375 ln
154.75 230.625 mo
157.5 230.625 ln
165.25 230.625 mo
167.75 230.625 ln
s
165.155 230.625 mo
165.155 228.486 163.419 226.75 161.28 226.75 cv
159.141 226.75 157.405 228.486 157.405 230.625 cv
157.405 232.764 159.141 234.5 161.28 234.5 cv
163.419 234.5 165.155 232.764 165.155 230.625 cv
ef
174.25 243.625 mo
174.25 236.125 ln
174.25 228.375 mo
174.25 220.875 ln
167.75 232.375 mo
170.25 232.375 ln
178.25 232.375 mo
180.75 232.375 ln
s
178.115 232.305 mo
178.115 230.166 176.379 228.43 174.24 228.43 cv
172.101 228.43 170.365 230.166 170.365 232.305 cv
170.365 234.444 172.101 236.18 174.24 236.18 cv
176.379 236.18 178.115 234.444 178.115 232.305 cv
ef
187.25 257.375 mo
187.25 249.875 ln
187.25 242.125 mo
187.25 234.625 ln
180.75 245.875 mo
183.25 245.875 ln
191.25 245.875 mo
193.75 245.875 ln
s
191.075 245.865 mo
191.075 243.726 189.339 241.99 187.2 241.99 cv
185.061 241.99 183.325 243.726 183.325 245.865 cv
183.325 248.004 185.061 249.74 187.2 249.74 cv
189.339 249.74 191.075 248.004 191.075 245.865 cv
ef
200.25 251.375 mo
200.25 243.875 ln
200.25 235.875 mo
200.25 228.375 ln
193.75 239.875 mo
196.25 239.875 ln
204 239.875 mo
206.75 239.875 ln
s
204.155 239.865 mo
204.155 237.726 202.419 235.99 200.28 235.99 cv
198.141 235.99 196.405 237.726 196.405 239.865 cv
196.405 242.004 198.141 243.74 200.28 243.74 cv
202.419 243.74 204.155 242.004 204.155 239.865 cv
ef
213.25 252.625 mo
213.25 245.125 ln
213.25 237.375 mo
213.25 229.625 ln
206.75 241.125 mo
209.25 241.125 ln
217 241.125 mo
219.5 241.125 ln
s
217.115 241.185 mo
217.115 239.046 215.379 237.31 213.24 237.31 cv
211.101 237.31 209.365 239.046 209.365 241.185 cv
209.365 243.324 211.101 245.06 213.24 245.06 cv
215.379 245.06 217.115 243.324 217.115 241.185 cv
ef
226 262.125 mo
226 254.625 ln
226 246.625 mo
226 239.125 ln
219.5 250.625 mo
222.25 250.625 ln
230 250.625 mo
232.5 250.625 ln
s
229.955 250.545 mo
229.955 248.406 228.219 246.67 226.08 246.67 cv
223.941 246.67 222.205 248.406 222.205 250.545 cv
222.205 252.684 223.941 254.42 226.08 254.42 cv
228.219 254.42 229.955 252.684 229.955 250.545 cv
ef
239 273.125 mo
239 265.625 ln
239 257.625 mo
239 250.125 ln
232.5 261.625 mo
235.25 261.625 ln
243 261.625 mo
245.5 261.625 ln
s
242.915 261.585 mo
242.915 259.446 241.179 257.71 239.04 257.71 cv
236.901 257.71 235.165 259.446 235.165 261.585 cv
235.165 263.724 236.901 265.46 239.04 265.46 cv
241.179 265.46 242.915 263.724 242.915 261.585 cv
ef
252 241.875 mo
252 234.125 ln
252 226.375 mo
252 218.625 ln
245.5 230.375 mo
248 230.375 ln
256 230.375 mo
258.5 230.375 ln
s
255.875 230.385 mo
255.875 228.246 254.139 226.51 252 226.51 cv
249.861 226.51 248.125 228.246 248.125 230.385 cv
248.125 232.524 249.861 234.26 252 234.26 cv
254.139 234.26 255.875 232.524 255.875 230.385 cv
ef
265 246.625 mo
265 238.875 ln
265 231.125 mo
265 223.375 ln
258.5 234.875 mo
261 234.875 ln
269 234.875 mo
271.5 234.875 ln
s
268.835 234.945 mo
268.835 232.806 267.099 231.07 264.96 231.07 cv
262.821 231.07 261.085 232.806 261.085 234.945 cv
261.085 237.084 262.821 238.82 264.96 238.82 cv
267.099 238.82 268.835 237.084 268.835 234.945 cv
ef
278 236.125 mo
278 228.125 ln
278 220.375 mo
278 212.625 ln
271.5 224.375 mo
274 224.375 ln
281.75 224.375 mo
284.5 224.375 ln
s
281.795 224.385 mo
281.795 222.246 280.059 220.51 277.92 220.51 cv
275.781 220.51 274.045 222.246 274.045 224.385 cv
274.045 226.524 275.781 228.26 277.92 228.26 cv
280.059 228.26 281.795 226.524 281.795 224.385 cv
ef
291 205.125 mo
291 197.375 ln
291 189.375 mo
291 181.625 ln
284.5 193.375 mo
287 193.375 ln
294.75 193.375 mo
297.25 193.375 ln
s
294.875 193.425 mo
294.875 191.286 293.139 189.55 291 189.55 cv
288.861 189.55 287.125 191.286 287.125 193.425 cv
287.125 195.564 288.861 197.3 291 197.3 cv
293.139 197.3 294.875 195.564 294.875 193.425 cv
ef
303.75 198.875 mo
303.75 190.875 ln
303.75 183.125 mo
303.75 175.125 ln
297.25 186.875 mo
300 186.875 ln
307.75 186.875 mo
310.25 186.875 ln
s
307.595 186.945 mo
307.595 184.806 305.859 183.07 303.72 183.07 cv
301.581 183.07 299.845 184.806 299.845 186.945 cv
299.845 189.084 301.581 190.82 303.72 190.82 cv
305.859 190.82 307.595 189.084 307.595 186.945 cv
ef
316.75 132.875 mo
316.75 124.875 ln
316.75 117.125 mo
316.75 108.875 ln
310.25 120.875 mo
313 120.875 ln
320.75 120.875 mo
323.25 120.875 ln
s
320.675 120.945 mo
320.675 118.806 318.939 117.07 316.8 117.07 cv
314.661 117.07 312.925 118.806 312.925 120.945 cv
312.925 123.084 314.661 124.82 316.8 124.82 cv
318.939 124.82 320.675 123.084 320.675 120.945 cv
ef
329.75 71.625 mo
329.75 63.625 ln
329.75 55.625 mo
329.75 47.625 ln
323.25 59.625 mo
325.75 59.625 ln
333.75 59.625 mo
336.25 59.625 ln
s
333.635 59.625 mo
333.635 57.4858 331.899 55.75 329.76 55.75 cv
327.621 55.75 325.885 57.4858 325.885 59.625 cv
325.885 61.7642 327.621 63.5 329.76 63.5 cv
331.899 63.5 333.635 61.7642 333.635 59.625 cv
ef
342.75 44.125 mo
342.75 35.875 ln
342.75 28.125 mo
342.75 19.875 ln
336.25 31.875 mo
338.75 31.875 ln
346.75 31.875 mo
349.25 31.875 ln
s
346.595 31.9048 mo
346.595 29.7661 344.859 28.0298 342.72 28.0298 cv
340.581 28.0298 338.845 29.7661 338.845 31.9048 cv
338.845 34.0439 340.581 35.7798 342.72 35.7798 cv
344.859 35.7798 346.595 34.0439 346.595 31.9048 cv
ef
355.75 72.875 mo
355.75 64.625 ln
355.75 56.875 mo
355.75 48.625 ln
349.25 60.875 mo
351.75 60.875 ln
359.5 60.875 mo
362.25 60.875 ln
s
359.555 60.9448 mo
359.555 58.8062 357.819 57.0698 355.68 57.0698 cv
353.541 57.0698 351.805 58.8062 351.805 60.9448 cv
351.805 63.084 353.541 64.8198 355.68 64.8198 cv
357.819 64.8198 359.555 63.084 359.555 60.9448 cv
ef
368.75 121.875 mo
368.75 113.875 ln
368.75 105.875 mo
368.75 97.875 ln
362.25 109.875 mo
364.75 109.875 ln
372.5 109.875 mo
375 109.875 ln
s
372.635 109.905 mo
372.635 107.766 370.899 106.03 368.76 106.03 cv
366.621 106.03 364.885 107.766 364.885 109.905 cv
364.885 112.044 366.621 113.78 368.76 113.78 cv
370.899 113.78 372.635 112.044 372.635 109.905 cv
ef
381.5 194.875 mo
381.5 186.875 ln
381.5 179.125 mo
381.5 170.875 ln
375 182.875 mo
377.75 182.875 ln
385.5 182.875 mo
388 182.875 ln
s
385.355 182.865 mo
385.355 180.726 383.619 178.99 381.48 178.99 cv
379.341 178.99 377.605 180.726 377.605 182.865 cv
377.605 185.004 379.341 186.74 381.48 186.74 cv
383.619 186.74 385.355 185.004 385.355 182.865 cv
ef
394.5 263.625 mo
394.5 255.625 ln
394.5 247.625 mo
394.5 239.625 ln
388 251.625 mo
390.75 251.625 ln
398.5 251.625 mo
401 251.625 ln
s
398.435 251.625 mo
398.435 249.486 396.699 247.75 394.56 247.75 cv
392.421 247.75 390.685 249.486 390.685 251.625 cv
390.685 253.764 392.421 255.5 394.56 255.5 cv
396.699 255.5 398.435 253.764 398.435 251.625 cv
ef
407.5 275.875 mo
407.5 267.625 ln
407.5 259.875 mo
407.5 251.875 ln
401 263.875 mo
403.5 263.875 ln
411.5 263.875 mo
414 263.875 ln
s
411.395 263.865 mo
411.395 261.726 409.659 259.99 407.52 259.99 cv
405.381 259.99 403.645 261.726 403.645 263.865 cv
403.645 266.004 405.381 267.74 407.52 267.74 cv
409.659 267.74 411.395 266.004 411.395 263.865 cv
ef
420.5 299.625 mo
420.5 291.625 ln
420.5 283.625 mo
420.5 275.625 ln
414 287.625 mo
416.5 287.625 ln
424.5 287.625 mo
427 287.625 ln
s
424.354 287.625 mo
424.354 285.486 422.619 283.75 420.479 283.75 cv
418.341 283.75 416.604 285.486 416.604 287.625 cv
416.604 289.764 418.341 291.5 420.479 291.5 cv
422.619 291.5 424.354 289.764 424.354 287.625 cv
ef
433.5 323.875 mo
433.5 315.625 ln
433.5 307.875 mo
433.5 299.875 ln
427 311.875 mo
429.5 311.875 ln
437.25 311.875 mo
440 311.875 ln
s
437.314 311.865 mo
437.314 309.726 435.579 307.99 433.439 307.99 cv
431.301 307.99 429.564 309.726 429.564 311.865 cv
429.564 314.004 431.301 315.74 433.439 315.74 cv
435.579 315.74 437.314 314.004 437.314 311.865 cv
ef
446.5 318.875 mo
446.5 310.875 ln
446.5 303.125 mo
446.5 294.875 ln
440 306.875 mo
442.5 306.875 ln
450.25 306.875 mo
452.75 306.875 ln
s
450.395 306.945 mo
450.395 304.806 448.659 303.07 446.52 303.07 cv
444.381 303.07 442.645 304.806 442.645 306.945 cv
442.645 309.084 444.381 310.82 446.52 310.82 cv
448.659 310.82 450.395 309.084 450.395 306.945 cv
ef
459.25 339.125 mo
459.25 331.125 ln
459.25 323.375 mo
459.25 315.125 ln
452.75 327.125 mo
455.5 327.125 ln
463.25 327.125 mo
465.75 327.125 ln
s
463.115 327.105 mo
463.115 324.966 461.379 323.23 459.24 323.23 cv
457.101 323.23 455.365 324.966 455.365 327.105 cv
455.365 329.244 457.101 330.98 459.24 330.98 cv
461.379 330.98 463.115 329.244 463.115 327.105 cv
ef
472.25 346.875 mo
472.25 338.625 ln
472.25 330.875 mo
472.25 322.625 ln
465.75 334.625 mo
468.5 334.625 ln
476.25 334.625 mo
478.75 334.625 ln
s
476.194 334.545 mo
476.194 332.406 474.459 330.67 472.319 330.67 cv
470.181 330.67 468.444 332.406 468.444 334.545 cv
468.444 336.684 470.181 338.42 472.319 338.42 cv
474.459 338.42 476.194 336.684 476.194 334.545 cv
ef
485.25 353.125 mo
485.25 344.875 ln
485.25 337.125 mo
485.25 329.125 ln
478.75 341.125 mo
481.25 341.125 ln
489.25 341.125 mo
491.75 341.125 ln
s
489.155 341.145 mo
489.155 339.006 487.419 337.27 485.28 337.27 cv
483.141 337.27 481.405 339.006 481.405 341.145 cv
481.405 343.284 483.141 345.02 485.28 345.02 cv
487.419 345.02 489.155 343.284 489.155 341.145 cv
ef
498.25 347.875 mo
498.25 339.875 ln
498.25 332.125 mo
498.25 323.875 ln
491.75 335.875 mo
494.25 335.875 ln
502.25 335.875 mo
504.75 335.875 ln
s
502.115 335.865 mo
502.115 333.726 500.379 331.99 498.24 331.99 cv
496.101 331.99 494.365 333.726 494.365 335.865 cv
494.365 338.004 496.101 339.74 498.24 339.74 cv
500.379 339.74 502.115 338.004 502.115 335.865 cv
ef
511.25 366.625 mo
511.25 358.625 ln
511.25 350.625 mo
511.25 342.625 ln
504.75 354.625 mo
507.25 354.625 ln
515 354.625 mo
517.75 354.625 ln
s
515.075 354.705 mo
515.075 352.566 513.339 350.83 511.2 350.83 cv
509.061 350.83 507.325 352.566 507.325 354.705 cv
507.325 356.844 509.061 358.58 511.2 358.58 cv
513.339 358.58 515.075 356.844 515.075 354.705 cv
ef
524.25 348.375 mo
524.25 340.125 ln
524.25 332.375 mo
524.25 324.125 ln
517.75 336.375 mo
520.25 336.375 ln
528 336.375 mo
530.5 336.375 ln
s
528.155 336.345 mo
528.155 334.206 526.419 332.47 524.28 332.47 cv
522.141 332.47 520.405 334.206 520.405 336.345 cv
520.405 338.484 522.141 340.22 524.28 340.22 cv
526.419 340.22 528.155 338.484 528.155 336.345 cv
ef
537 388.375 mo
537 380.375 ln
537 372.625 mo
537 364.375 ln
530.5 376.375 mo
533.25 376.375 ln
541 376.375 mo
543.5 376.375 ln
s
540.875 376.305 mo
540.875 374.166 539.139 372.43 537 372.43 cv
534.86 372.43 533.125 374.166 533.125 376.305 cv
533.125 378.444 534.86 380.18 537 380.18 cv
539.139 380.18 540.875 378.444 540.875 376.305 cv
ef
550 362.125 mo
550 354.125 ln
550 346.375 mo
550 338.125 ln
543.5 350.125 mo
546.25 350.125 ln
554 350.125 mo
556.5 350.125 ln
s
553.955 350.145 mo
553.955 348.006 552.219 346.27 550.08 346.27 cv
547.94 346.27 546.205 348.006 546.205 350.145 cv
546.205 352.284 547.94 354.02 550.08 354.02 cv
552.219 354.02 553.955 352.284 553.955 350.145 cv
ef
563 390.125 mo
563 382.125 ln
563 374.125 mo
563 366.125 ln
556.5 378.125 mo
559 378.125 ln
567 378.125 mo
569.5 378.125 ln
s
566.915 378.105 mo
566.915 375.966 565.179 374.23 563.04 374.23 cv
560.9 374.23 559.165 375.966 559.165 378.105 cv
559.165 380.244 560.9 381.98 563.04 381.98 cv
565.179 381.98 566.915 380.244 566.915 378.105 cv
ef
576 379.125 mo
576 371.125 ln
576 363.375 mo
576 355.375 ln
569.5 367.125 mo
572 367.125 ln
580 367.125 mo
582.5 367.125 ln
s
579.875 367.185 mo
579.875 365.046 578.139 363.31 576 363.31 cv
573.86 363.31 572.125 365.046 572.125 367.185 cv
572.125 369.324 573.86 371.06 576 371.06 cv
578.139 371.06 579.875 369.324 579.875 367.185 cv
ef
589 364.875 mo
589 356.875 ln
589 349.125 mo
589 341.125 ln
582.5 353.125 mo
585 353.125 ln
592.75 353.125 mo
595.5 353.125 ln
s
592.835 353.145 mo
592.835 351.006 591.099 349.27 588.96 349.27 cv
586.821 349.27 585.085 351.006 585.085 353.145 cv
585.085 355.284 586.821 357.02 588.96 357.02 cv
591.099 357.02 592.835 355.284 592.835 353.145 cv
ef
602 368.875 mo
602 360.875 ln
602 353.125 mo
602 345.125 ln
595.5 357.125 mo
598 357.125 ln
605.75 357.125 mo
608.25 357.125 ln
s
605.795 357.105 mo
605.795 354.966 604.059 353.23 601.92 353.23 cv
599.781 353.23 598.045 354.966 598.045 357.105 cv
598.045 359.244 599.781 360.98 601.92 360.98 cv
604.059 360.98 605.795 359.244 605.795 357.105 cv
ef
614.75 382.875 mo
614.75 374.875 ln
614.75 367.125 mo
614.75 359.125 ln
608.25 371.125 mo
611 371.125 ln
618.75 371.125 mo
621.25 371.125 ln
s
618.635 371.145 mo
618.635 369.006 616.898 367.27 614.76 367.27 cv
612.621 367.27 610.885 369.006 610.885 371.145 cv
610.885 373.284 612.621 375.02 614.76 375.02 cv
616.898 375.02 618.635 373.284 618.635 371.145 cv
ef
627.75 381.875 mo
627.75 374.125 ln
627.75 366.125 mo
627.75 358.375 ln
621.25 370.125 mo
624 370.125 ln
631.75 370.125 mo
634.25 370.125 ln
s
631.595 370.065 mo
631.595 367.926 629.858 366.19 627.72 366.19 cv
625.581 366.19 623.845 367.926 623.845 370.065 cv
623.845 372.204 625.581 373.94 627.72 373.94 cv
629.858 373.94 631.595 372.204 631.595 370.065 cv
ef
2.25 lw
208.5 243.125 mo
212 243.625 ln
215.5 244.375 ln
219 244.875 ln
222.5 245.375 ln
226 245.625 ln
229.5 245.875 ln
233 246.125 ln
240 246.125 ln
243.5 245.875 ln
247 245.625 ln
250.5 244.875 ln
254 244.125 ln
257.5 243.125 ln
261 241.875 ln
264.5 240.375 ln
268 238.375 ln
271.5 235.875 ln
275 233.125 ln
278.5 229.875 ln
282 225.625 ln
285.5 220.875 ln
289 215.375 ln
292.5 208.875 ln
296 201.125 ln
299.25 192.125 ln
302.75 181.875 ln
306.25 169.875 ln
309.75 156.375 ln
313.25 141.375 ln
316.75 124.625 ln
320.25 106.625 ln
323.75 88.125 ln
327.25 69.625 ln
330.75 52.625 ln
334.25 38.625 ln
337.75 28.875 ln
341.25 24.625 ln
344.75 26.125 ln
348.25 33.375 ln
351.75 45.125 ln
355.25 60.625 ln
358.75 78.375 ln
362.25 97.125 ln
365.75 115.625 ln
369.25 133.875 ln
372.75 150.875 ln
376.25 166.625 ln
379.75 181.125 ln
379.75 181.125 mo
383.25 194.375 ln
386.75 206.375 ln
390.25 217.125 ln
393.75 227.125 ln
397.25 235.875 ln
400.75 244.125 ln
404.25 251.625 ln
407.75 258.375 ln
411.25 264.625 ln
414.75 270.375 ln
418.25 275.625 ln
421.75 280.625 ln
425.25 285.125 ln
428.75 289.375 ln
432.25 293.625 ln
435.75 297.375 ln
439.25 300.875 ln
442.75 304.375 ln
446.25 307.625 ln
449.75 310.625 ln
453.25 313.625 ln
456.75 316.625 ln
460.25 319.125 ln
463.75 321.875 ln
467.25 324.375 ln
470.75 326.875 ln
474.25 329.375 ln
477.75 331.625 ln
481.25 333.875 ln
484.75 336.125 ln
488.25 338.125 ln
491.75 340.375 ln
495.25 342.375 ln
498.75 344.375 ln
502.25 346.375 ln
505.75 348.375 ln
509.25 350.125 ln
512.75 352.125 ln
516.25 353.875 ln
519.75 355.875 ln
523.25 357.625 ln
526.75 359.375 ln
530.25 361.125 ln
533.75 362.875 ln
537.25 364.625 ln
540.75 366.375 ln
544.25 367.875 ln
547.75 369.625 ln
551.25 371.375 ln
551.25 371.375 mo
554.75 372.875 ln
s
0.75 lw
90 408.625 mo
634.25 408.625 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
41{/.notdef}repeat /parenright 214{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [18.5718 0 0 -18.5718 0 0 ]mfnt sfnt
BuildWidthShowArray
622 459.625 mov
(\)) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
612.25 450.875 mov
(2) sh
restore_ctm
103 396.375 mo
103 408.625 ln
116 402.375 mo
116 408.625 ln
129 402.375 mo
129 408.625 ln
141.75 402.375 mo
141.75 408.625 ln
154.75 402.375 mo
154.75 408.625 ln
167.75 396.375 mo
167.75 408.625 ln
180.75 402.375 mo
180.75 408.625 ln
193.75 402.375 mo
193.75 408.625 ln
206.75 402.375 mo
206.75 408.625 ln
219.5 402.375 mo
219.5 408.625 ln
232.5 396.375 mo
232.5 408.625 ln
245.5 402.375 mo
245.5 408.625 ln
258.5 402.375 mo
258.5 408.625 ln
271.5 402.375 mo
271.5 408.625 ln
284.5 402.375 mo
284.5 408.625 ln
297.25 396.375 mo
297.25 408.625 ln
310.25 402.375 mo
310.25 408.625 ln
323.25 402.375 mo
323.25 408.625 ln
336.25 402.375 mo
336.25 408.625 ln
349.25 402.375 mo
349.25 408.625 ln
362.25 396.375 mo
362.25 408.625 ln
375 402.375 mo
375 408.625 ln
388 402.375 mo
388 408.625 ln
401 402.375 mo
401 408.625 ln
414 402.375 mo
414 408.625 ln
427 396.375 mo
427 408.625 ln
440 402.375 mo
440 408.625 ln
452.75 402.375 mo
452.75 408.625 ln
465.75 402.375 mo
465.75 408.625 ln
478.75 402.375 mo
478.75 408.625 ln
491.75 396.375 mo
491.75 408.625 ln
504.75 402.375 mo
504.75 408.625 ln
517.75 402.375 mo
517.75 408.625 ln
530.5 402.375 mo
530.5 408.625 ln
543.5 402.375 mo
543.5 408.625 ln
556.5 396.375 mo
556.5 408.625 ln
569.5 402.375 mo
569.5 408.625 ln
582.5 402.375 mo
582.5 408.625 ln
595.5 402.375 mo
595.5 408.625 ln
608.25 402.375 mo
608.25 408.625 ln
621.25 396.375 mo
621.25 408.625 ln
103 396.375 mo
103 408.625 ln
90 402.375 mo
90 408.625 ln
621.25 396.375 mo
621.25 408.625 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e3088328e93e3f86c5266dab4a
4b6a0dbbd499ac2f08f52498a1230ac74b9126578260e72bf920c6626e18
e52befca2ad4c5c494a757a5861d225d61833e7b6db104708e0fcf59a03e
ddf773c2fe0a4faea092dc7a4d01275005fb3564e1d1f76f67c0ded9002e
e506fbb65143c90d6526880b9b4967a1233028aa9e8c3e30f59ec7f29cd2
713cffb71673b8ee9c01e77581750db787f4754cdac76007b210e32a2dfc
77791af6ea67a232e72999312d> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638bbfe80126114fe37407e2e312c7bcbd2c
1b7b9e7fac2817224e19> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e231374dce1d715d27566dcf
115e95280405ef7103dd8183790f381980b4f25c32c305> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3490b93b478f689beebddc801
f9ab05d95370b6f2d5e4eaf0e05d2c29f4d91b00084ec9f87aa58fda4ad7
8d5d66fcc7e8afb13d634e9fe58c768d42> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
/v 
<10bf31706ae07dd17dfc9e3ad4fb8a8843b0ccd3bf37159e4d997ae7db46
1605af60e723de30a8f7915cee06ac348ee0e2ad17e20e> ND 
end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 47 /slash put
dup 71 /G put
dup 73 /I put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft 6{/.notdef}repeat /slash 23{/.notdef}repeat /G 
/.notdef /I 3{/.notdef}repeat /M 8{/.notdef}repeat /V 10{/.notdef}repeat /a 
/.notdef /c /.notdef /e 3{/.notdef}repeat /i 4{/.notdef}repeat /n 
3{/.notdef}repeat /r /s /t /.notdef /v 137{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
403.75 459.625 mov
(Invariant Mass \(GeV/c) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
/seven 
<10bf317048559e9c292b4762aa54ba120a145df60b670d87c36c3ee92d5b
39c9648a6d5ce1131c9257911f8bc7e67b7a2848cf37308ba0025304ca48
4c163915b2d4c913b4486d09> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
dup 48 /zero put
dup 55 /seven put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
46{/.notdef}repeat /period /.notdef /zero 6{/.notdef}repeat /seven 200{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
92.5 429.375 mov
(0.7) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
152 429.375 mov
(0.7) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f72e955f0050b5472
6b68794743aa9e2640fbbbe965e5c7462a0da2fe3396d6994552b6fd7b9f
c3a7f776be319813ddb449d1a761c2a25379bcdbddb59583b40898699b48
1611e523f8146fbaea058eb8237d1f8ef6c080ecb39f96cb6c0db3e3c586
248bc7c61f659dbd2f8aadac81a2448e7137d524> ND 
end end
end
/ArialMT findfont /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
53{/.notdef}repeat /five 202{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
181.193 429.375 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
222.5 429.375 mov
(0.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6f92fe7d0382cbfbcdc7b1ae90f5804442d3ad6d5e65
ea646fb35cdd7e11033e2adda681e7c859039849d6dc5ed2ddeff6a08225
d8f51551f3de1fe8a008c3292192037d710bd142b0870ce031e718da3ef6
d3433e72ed0f460e2a4d68b080691bc3e7e1f307fb1e0e53bcb7db60f146
7b82fe22e2d41fbef278c3fdcb5b6d458b0439abc5768f2ce7c9570fa1d6
c4be1808a48200bf465a45f457def4538c8fb72d6cd74c82c40277b5b6e7
fea6be29486ac098b8cb486a6ef4b50bb3d786b334b9913c9609ad75ea2f
ed8e7505ac0f1bb96c923835d10b3ab9> ND 
end end
end
/ArialMT findfont /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
56{/.notdef}repeat /eight 199{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
240.014 429.375 mov
(8) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
281 429.375 mov
(0.) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
298.514 429.375 mov
(8) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
310.193 429.375 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
352.5 429.375 mov
(0.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/nine 
<10bf317047276c49b9c0f950eed45ca9abbead4f9a337d9778d52805a666
172babb1d73a09fb0432847d9265c3c057d0112d971ed0197edf6801f0cc
d27a4300d973d4627332ff0ca814c0ce250c35754139515ccbb98571061c
85e232c5d2724d28cade69abed806808a329f904488eec02d4bf36c25046
f7a1306ac101498c67190cf8a8e43a1298791a833df5d0225170130cde4e
6dbabf7a8e794c3de6dcec3e9a0c2449b47003a2eed622096fc30cf785b4
a1aacc0e4ca1048fbda9f51c6b8cea845ce656cef8e1da09ee2450f7b737
e0b1217086fc607fb5d514dedd6adb> ND 
end end
end
/ArialMT findfont /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
57{/.notdef}repeat /nine 198{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
370.014 429.375 mov
(9) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
411 429.375 mov
(0.) sh
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
428.514 429.375 mov
(9) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
440.193 429.375 mov
(5) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end end
end
/ArialMT findfont /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
49{/.notdef}repeat /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
487.25 429.375 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
537 429.375 mov
(1) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
548.679 429.375 mov
(.0) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
566.193 429.375 mov
(5) sh
restore_ctm
90 408.625 mo
90 0.375 ln
s
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
609.5 429.375 mov
(1) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
621.179 429.375 mov
(.) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
627.014 429.375 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 35.125 mov
(2) sh
restore_ctm
106.25 383.875 mo
90 383.875 ln
98.25 371.375 mo
90 371.375 ln
98.25 358.875 mo
90 358.875 ln
98.25 346.375 mo
90 346.375 ln
106.25 334.125 mo
90 334.125 ln
98.25 321.625 mo
90 321.625 ln
98.25 309.125 mo
90 309.125 ln
98.25 296.625 mo
90 296.625 ln
106.25 284.125 mo
90 284.125 ln
98.25 271.625 mo
90 271.625 ln
98.25 259.125 mo
90 259.125 ln
98.25 246.625 mo
90 246.625 ln
106.25 234.125 mo
90 234.125 ln
98.25 221.875 mo
90 221.875 ln
98.25 209.375 mo
90 209.375 ln
98.25 196.875 mo
90 196.875 ln
106.25 184.375 mo
90 184.375 ln
98.25 171.875 mo
90 171.875 ln
98.25 159.375 mo
90 159.375 ln
98.25 146.875 mo
90 146.875 ln
106.25 134.375 mo
90 134.375 ln
98.25 121.875 mo
90 121.875 ln
98.25 109.375 mo
90 109.375 ln
98.25 97.125 mo
90 97.125 ln
106.25 84.625 mo
90 84.625 ln
98.25 72.125 mo
90 72.125 ln
98.25 59.625 mo
90 59.625 ln
98.25 47.125 mo
90 47.125 ln
106.25 34.625 mo
90 34.625 ln
106.25 383.875 mo
90 383.875 ln
98.25 396.375 mo
90 396.375 ln
106.25 34.625 mo
90 34.625 ln
98.25 22.125 mo
90 22.125 ln
98.25 9.625 mo
90 9.625 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153f04f4f888
a9793af1cdd76cf42c98e3b7c6efff30aedf23874b961a5a7d8352571859
f2ee15399c0c2d0f0e789c04eb8ab69e8694b49d1cdc36041f81732689ae
c7de70103ef45c5aac1fa0ded9e2cebee882d4e31e26d9203d2435459b9d
1e92bd9bcf321ca456fc2c8b25bf9b414bd39bc63d4e221a0d6aa6fccdc3
c8a808e6ed39733b2c7e47> ND 
/o 
<10bf31705e921373942a1df751ebc6dc1f8ba1849e5d0b813201a0c14072
56efd5ac73b2cc94d73ea025d660f576b0dc46e6510eb657538743c037a9
ef3f1df5fa8600ba31cfa9fb018633830dedfb133aaa4477d4caef3c149d
68283dde65fde31ff05fe29c87c2dcf980686664a1ba1e9317bc4e3671a3
dde8af03d654a3b9278e18f5d604ca7d7f> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 67 /C put
dup 111 /o put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
67{/.notdef}repeat /C 43{/.notdef}repeat /o 5{/.notdef}repeat /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
24.75 215.375 mov
(Cou) sh
/ArialMT*3 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
24.75 176.851 mov
(nts /\( ) sh
/ArialMT*8 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
24.75 124.341 mov
(1) sh
/ArialMT*4 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
24.75 112.662 mov
(0) sh
/ArialMT*3 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
24.75 100.982 mov
( MeV/c  ) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
24.75 23.9653 mov
(\)) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
45{/.notdef}repeat /hyphen 210{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
32.0957 391.125 mov
(-) sh
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
39.0889 391.125 mov
(2) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50.7681 391.125 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [18.5718 0 0 -18.5718 0 0 ]mfnt sfnt
BuildWidthShowArray
66.3457 341.375 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.0957 291.625 mov
(2) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
49.7749 291.625 mov
(000) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.0957 241.625 mov
(4) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
49.7749 241.625 mov
(000) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/six 
<10bf3170435d0d4425184fc061c7faa8dc6baee8c868da453cb6a6f891b2
5354e14cb1bc5e0a0fcae04743a9daec5483058e0dde89957524c8915b19
25146f588ef5a70cf81e2e4fc7890fddf0f5d4c16f77c4469f58479cdd1b
49f5c68eada3087814223d9b5aa8284ce9770f7175297744c20f41a48dc8
d286517deb8893f3230571eaf9ea1ba0abf787d646e1631373082ff4df40
4c74838bb86fd789e63cac0da4dceabebd4d0fc0472fd6a9ca90e64e3c08
8853c020aae52cb442800bb6081c0fefcb0a206f46cf4ec1e25c13c94cbb
330a8f2762> ND 
end end
end
/ArialMT findfont /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ArialMT*12 
[
54{/.notdef}repeat /six 201{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*12 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.0957 191.875 mov
(6) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
49.7749 191.875 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.0957 141.875 mov
(8) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
49.7749 141.875 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
28.3457 92.125 mov
(1) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
40.0249 92.125 mov
(0000) sh
restore_ctm
2.25 lw
208.5 243.125 mo
212 243.625 ln
215.5 244.375 ln
219 244.875 ln
222.5 245.375 ln
226 245.625 ln
229.5 245.875 ln
233 246.125 ln
240 246.125 ln
243.5 245.875 ln
247 245.625 ln
250.5 244.875 ln
254 244.125 ln
257.5 243.125 ln
261 241.875 ln
264.5 240.375 ln
268 238.375 ln
271.5 235.875 ln
275 233.125 ln
278.5 229.875 ln
282 225.625 ln
285.5 220.875 ln
289 215.375 ln
292.5 208.875 ln
296 201.125 ln
299.25 192.125 ln
302.75 181.875 ln
306.25 169.875 ln
309.75 156.375 ln
313.25 141.375 ln
316.75 124.625 ln
320.25 106.625 ln
323.75 88.125 ln
327.25 69.625 ln
330.75 52.625 ln
334.25 38.625 ln
337.75 28.875 ln
341.25 24.625 ln
344.75 26.125 ln
348.25 33.375 ln
351.75 45.125 ln
355.25 60.625 ln
358.75 78.375 ln
362.25 97.125 ln
365.75 115.625 ln
369.25 133.875 ln
372.75 150.875 ln
376.25 166.625 ln
379.75 181.125 ln
379.75 181.125 mo
383.25 194.375 ln
386.75 206.375 ln
390.25 217.125 ln
393.75 227.125 ln
397.25 235.875 ln
400.75 244.125 ln
404.25 251.625 ln
407.75 258.375 ln
411.25 264.625 ln
414.75 270.375 ln
418.25 275.625 ln
421.75 280.625 ln
425.25 285.125 ln
428.75 289.375 ln
432.25 293.625 ln
435.75 297.375 ln
439.25 300.875 ln
442.75 304.375 ln
446.25 307.625 ln
449.75 310.625 ln
453.25 313.625 ln
456.75 316.625 ln
460.25 319.125 ln
463.75 321.875 ln
467.25 324.375 ln
470.75 326.875 ln
474.25 329.375 ln
477.75 331.625 ln
481.25 333.875 ln
484.75 336.125 ln
488.25 338.125 ln
491.75 340.375 ln
495.25 342.375 ln
498.75 344.375 ln
502.25 346.375 ln
505.75 348.375 ln
509.25 350.125 ln
512.75 352.125 ln
516.25 353.875 ln
519.75 355.875 ln
523.25 357.625 ln
526.75 359.375 ln
530.25 361.125 ln
533.75 362.875 ln
537.25 364.625 ln
540.75 366.375 ln
544.25 367.875 ln
547.75 369.625 ln
551.25 371.375 ln
551.25 371.375 mo
554.75 372.875 ln
s
[3 3 ] 0 dsh
208.5 251.875 mo
212 253.375 ln
215.5 254.625 ln
219 255.875 ln
222.5 257.375 ln
226 258.625 ln
229.5 259.875 ln
233 261.375 ln
236.5 262.625 ln
240 263.875 ln
243.5 265.375 ln
247 266.625 ln
250.5 267.875 ln
254 269.375 ln
257.5 270.625 ln
261 271.875 ln
264.5 273.125 ln
268 274.625 ln
271.5 275.875 ln
275 277.125 ln
278.5 278.625 ln
282 279.875 ln
285.5 281.125 ln
289 282.625 ln
292.5 283.875 ln
296 285.125 ln
299.25 286.625 ln
302.75 287.875 ln
306.25 289.125 ln
309.75 290.625 ln
313.25 291.875 ln
316.75 293.125 ln
320.25 294.625 ln
323.75 295.875 ln
327.25 297.125 ln
330.75 298.625 ln
334.25 299.875 ln
337.75 301.125 ln
341.25 302.625 ln
344.75 303.875 ln
348.25 305.125 ln
351.75 306.625 ln
355.25 307.875 ln
358.75 309.125 ln
362.25 310.625 ln
365.75 311.875 ln
369.25 313.125 ln
372.75 314.625 ln
376.25 315.875 ln
379.75 317.125 ln
379.75 317.125 mo
383.25 318.625 ln
386.75 319.875 ln
390.25 321.125 ln
393.75 322.625 ln
397.25 323.875 ln
400.75 325.125 ln
404.25 326.625 ln
407.75 327.875 ln
411.25 329.125 ln
414.75 330.625 ln
418.25 331.875 ln
421.75 333.125 ln
425.25 334.625 ln
428.75 335.875 ln
432.25 337.125 ln
435.75 338.625 ln
439.25 339.875 ln
442.75 341.125 ln
446.25 342.625 ln
449.75 343.875 ln
453.25 345.125 ln
456.75 346.625 ln
460.25 347.875 ln
463.75 349.125 ln
467.25 350.625 ln
470.75 351.875 ln
474.25 353.125 ln
477.75 354.625 ln
481.25 355.875 ln
484.75 357.125 ln
488.25 358.625 ln
491.75 359.875 ln
495.25 361.125 ln
498.75 362.625 ln
502.25 363.875 ln
505.75 365.125 ln
509.25 366.625 ln
512.75 367.875 ln
516.25 369.125 ln
519.75 370.625 ln
523.25 371.875 ln
526.75 373.125 ln
530.25 374.625 ln
533.75 375.875 ln
537.25 377.125 ln
540.75 378.625 ln
544.25 379.875 ln
547.75 381.125 ln
551.25 382.625 ln
551.25 382.625 mo
554.75 383.875 ln
s
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
28.3457 42.125 mov
(1) sh
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
40.0249 42.125 mov
(2) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
51.7041 42.125 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
380.25 87.375 mov
(Mini) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac576702c4654165111c4e219216
925a1bbda37b8221ddb4f3d7ef9dc32fffa987a0f0ea03488171acb09982
96179b683649315a4b1534> ND 
/B 
<10bf317026ba62063ac1fc9b1b7da70a4283bca66508b7487db96d3b5e50
ebb26d781c08b71d8c60e86f5f95e258aadae78cebfccceace7d1e24a04f
7a0ebebb84d24fd6e0dcc7805db6e5cdf4eb0699290a048d32bdfc7bda09
b014801b6912f42581f07cfc0dad1f3a0fda97cccb6dc64f3c2133712b38
17f9dcf78f219a31023477457afb4124f2e67688f81d2fae0a3d889fa20e
a1e4d003c07fa3b1c5e475e398065490772a2317b8a1741177b48843cacc
98258835f7713d01ccd04d20a02276a9eaa215ecd7e642af0d478b9844bc
79867bee2d8cdbfd06> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
end end
end
/ArialMT findfont /Encoding get
dup 43 /plus put
dup 65 /A put
dup 66 /B put
dup 100 /d put
dup 109 /m put
pop
%ADOEndSubsetFont
/ArialMT*13 
[
43{/.notdef}repeat /plus 21{/.notdef}repeat /A /B 33{/.notdef}repeat /d 8{/.notdef}repeat 
/m 146{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*13 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
429.754 87.375 mov
(m) sh
/ArialMT*9 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
452.246 87.375 mov
(u) sh
/ArialMT*13 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
467.262 87.375 mov
(m) sh
/ArialMT*3 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
489.753 87.375 mov
( ) sh
/ArialMT*13 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
497.254 87.375 mov
(B) sh
/ArialMT*3 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
515.263 87.375 mov
(ias ) sh
/ArialMT*13 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
557.279 87.375 mov
(d+A) sh
/ArialMT*9 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
606.072 87.375 mov
(u) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plusminus 
<10bf3170435d745a4cf40eeb1884cc18b50f50ed9a4f2d64c8b6ab374424
01035ea1b2fad3e57e4ee806d5283038b5323d1bb4210571e0590b678fdd
06dc> ND 
end end
end
/ArialMT findfont /Encoding get
dup 177 /plusminus put
pop
%ADOEndSubsetFont
/ArialMT*14 
[
177{/.notdef}repeat /plusminus 78{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*14 findfont [23 0 0 -23 0 0 ]mfnt sfnt
BuildWidthShowArray
220 38.625 mov
(\261) sh
restore_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/asterisk 
<10bf3170586c89409dd2665c962f73917ff1d99d25547eb97d8d7a1b746b
52bd73aee63f25b04e33ffea373408cea5b18d57735103adadf0d2b607ad
784041cc4f31b413e027687ce43b3535a4680ad8bc60fcb7acaa8519fa55
5f8158dcfff6de858c7134> ND 
/K 
<10bf317026ba62062704f9ba87c1ab1fc7730cdfdacc88df1e45004269f1
b43137c9251fe2841c5423281c9858682237f26a47da9c17460f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 42 /asterisk put
dup 75 /K put
pop
%ADOEndSubsetFont
/ArialMT*15 
[
42{/.notdef}repeat /asterisk 32{/.notdef}repeat /K 180{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*15 findfont [28.3465 0 0 -28.3465 0 0 ]mfnt sfnt
BuildWidthShowArray
187.75 50.625 mov
(K*) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
