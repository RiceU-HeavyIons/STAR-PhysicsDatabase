%!PS-Adobe-3.1 EPSF-3.0
%%Title: PaperDeltaInvMass.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 4/11/2007
%%CropBox: 0.000000 0.000000 639.554688 460.693359
%%BoundingBox: 0 0 640 461 
%%HiResBoundingBox: 0.000000 0.000000 639.554688 460.693359
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -460.693 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 460.693 ln
639.555 460.693 ln
639.555 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
88.875 408.625 mo
88.875 0.375 ln
633.125 0.375 ln
633.125 408.625 ln
88.875 408.625 ln
cp
false op
0 0 0 1 cmyk
s
88.875 408.625 mo
88.875 0.375 ln
633.125 0.375 ln
633.125 408.625 ln
88.875 408.625 ln
cp
s
138.47 384.105 mo
138.47 381.966 136.734 380.23 134.595 380.23 cv
132.456 380.23 130.72 381.966 130.72 384.105 cv
130.72 386.244 132.456 387.98 134.595 387.98 cv
136.734 387.98 138.47 386.244 138.47 384.105 cv
ef
140.125 388.875 mo
140.125 383.875 ln
140.125 375.875 mo
140.125 370.875 ln
s
143.99 379.905 mo
143.99 377.766 142.254 376.03 140.115 376.03 cv
137.976 376.03 136.24 377.766 136.24 379.905 cv
136.24 382.044 137.976 383.78 140.115 383.78 cv
142.254 383.78 143.99 382.044 143.99 379.905 cv
ef
145.375 355.875 mo
145.375 346.625 ln
145.375 338.625 mo
145.375 329.375 ln
s
149.27 342.705 mo
149.27 340.566 147.534 338.83 145.395 338.83 cv
143.256 338.83 141.52 340.566 141.52 342.705 cv
141.52 344.844 143.256 346.58 145.395 346.58 cv
147.534 346.58 149.27 344.844 149.27 342.705 cv
ef
150.875 301.375 mo
150.875 289.875 ln
150.875 281.875 mo
150.875 270.375 ln
s
154.67 285.825 mo
154.67 283.686 152.934 281.95 150.795 281.95 cv
148.656 281.95 146.92 283.686 146.92 285.825 cv
146.92 287.964 148.656 289.7 150.795 289.7 cv
152.934 289.7 154.67 287.964 154.67 285.825 cv
ef
156.375 264.125 mo
156.375 251.375 ln
156.375 243.375 mo
156.375 230.625 ln
s
160.19 247.425 mo
160.19 245.286 158.454 243.55 156.315 243.55 cv
154.176 243.55 152.44 245.286 152.44 247.425 cv
152.44 249.564 154.176 251.3 156.315 251.3 cv
158.454 251.3 160.19 249.564 160.19 247.425 cv
ef
161.625 186.625 mo
161.625 172.625 ln
161.625 164.875 mo
161.625 150.875 ln
s
165.47 168.945 mo
165.47 166.806 163.734 165.07 161.595 165.07 cv
159.456 165.07 157.72 166.806 157.72 168.945 cv
157.72 171.084 159.456 172.82 161.595 172.82 cv
163.734 172.82 165.47 171.084 165.47 168.945 cv
ef
167.125 133.125 mo
167.125 118.375 ln
167.125 110.625 mo
167.125 95.875 ln
s
170.99 114.345 mo
170.99 112.206 169.254 110.47 167.115 110.47 cv
164.976 110.47 163.24 112.206 163.24 114.345 cv
163.24 116.484 164.976 118.22 167.115 118.22 cv
169.254 118.22 170.99 116.484 170.99 114.345 cv
ef
172.375 145.375 mo
172.375 130.125 ln
172.375 122.375 mo
172.375 107.125 ln
s
176.27 126.105 mo
176.27 123.966 174.534 122.23 172.395 122.23 cv
170.256 122.23 168.52 123.966 168.52 126.105 cv
168.52 128.244 170.256 129.98 172.395 129.98 cv
174.534 129.98 176.27 128.244 176.27 126.105 cv
ef
177.875 133.625 mo
177.875 118.125 ln
177.875 110.375 mo
177.875 94.875 ln
s
181.79 114.345 mo
181.79 112.206 180.054 110.47 177.915 110.47 cv
175.776 110.47 174.04 112.206 174.04 114.345 cv
174.04 116.484 175.776 118.22 177.915 118.22 cv
180.054 118.22 181.79 116.484 181.79 114.345 cv
ef
183.125 59.125 mo
183.125 43.375 ln
183.125 35.625 mo
183.125 19.875 ln
s
187.07 39.3452 mo
187.07 37.2061 185.334 35.4702 183.195 35.4702 cv
181.056 35.4702 179.32 37.2061 179.32 39.3452 cv
179.32 41.4839 181.056 43.2202 183.195 43.2202 cv
185.334 43.2202 187.07 41.4839 187.07 39.3452 cv
ef
188.625 76.875 mo
188.625 61.125 ln
188.625 53.375 mo
188.625 37.625 ln
s
192.47 57.3452 mo
192.47 55.2061 190.734 53.4702 188.595 53.4702 cv
186.456 53.4702 184.72 55.2061 184.72 57.3452 cv
184.72 59.4839 186.456 61.2202 188.595 61.2202 cv
190.734 61.2202 192.47 59.4839 192.47 57.3452 cv
ef
193.875 73.875 mo
193.875 58.125 ln
193.875 50.125 mo
193.875 34.375 ln
s
197.75 54.105 mo
197.75 51.9658 196.014 50.23 193.875 50.23 cv
191.736 50.23 190 51.9658 190 54.105 cv
190 56.2441 191.736 57.98 193.875 57.98 cv
196.014 57.98 197.75 56.2441 197.75 54.105 cv
ef
199.375 100.375 mo
199.375 84.375 ln
199.375 76.625 mo
199.375 60.875 ln
s
203.27 80.625 mo
203.27 78.4858 201.534 76.75 199.395 76.75 cv
197.256 76.75 195.52 78.4858 195.52 80.625 cv
195.52 82.7642 197.256 84.5 199.395 84.5 cv
201.534 84.5 203.27 82.7642 203.27 80.625 cv
ef
204.875 141.375 mo
204.875 125.625 ln
204.875 117.875 mo
204.875 102.125 ln
s
208.67 121.665 mo
208.67 119.526 206.934 117.79 204.795 117.79 cv
202.656 117.79 200.92 119.526 200.92 121.665 cv
200.92 123.804 202.656 125.54 204.795 125.54 cv
206.934 125.54 208.67 123.804 208.67 121.665 cv
ef
210.125 171.375 mo
210.125 155.625 ln
210.125 147.875 mo
210.125 132.125 ln
s
213.95 151.905 mo
213.95 149.766 212.214 148.03 210.075 148.03 cv
207.936 148.03 206.2 149.766 206.2 151.905 cv
206.2 154.044 207.936 155.78 210.075 155.78 cv
212.214 155.78 213.95 154.044 213.95 151.905 cv
ef
215.625 203.375 mo
215.625 187.625 ln
215.625 179.875 mo
215.625 164.125 ln
s
219.47 183.825 mo
219.47 181.686 217.734 179.95 215.595 179.95 cv
213.456 179.95 211.72 181.686 211.72 183.825 cv
211.72 185.964 213.456 187.7 215.595 187.7 cv
217.734 187.7 219.47 185.964 219.47 183.825 cv
ef
220.875 307.125 mo
220.875 291.375 ln
220.875 283.625 mo
220.875 268.125 ln
s
224.75 287.625 mo
224.75 285.486 223.014 283.75 220.875 283.75 cv
218.736 283.75 217 285.486 217 287.625 cv
217 289.764 218.736 291.5 220.875 291.5 cv
223.014 291.5 224.75 289.764 224.75 287.625 cv
ef
226.375 301.375 mo
226.375 285.875 ln
226.375 278.125 mo
226.375 262.625 ln
s
230.27 281.865 mo
230.27 279.726 228.534 277.99 226.395 277.99 cv
224.256 277.99 222.52 279.726 222.52 281.865 cv
222.52 284.004 224.256 285.74 226.395 285.74 cv
228.534 285.74 230.27 284.004 230.27 281.865 cv
ef
231.625 320.875 mo
231.625 305.375 ln
231.625 297.625 mo
231.625 282.125 ln
s
235.55 301.665 mo
235.55 299.526 233.814 297.79 231.675 297.79 cv
229.536 297.79 227.8 299.526 227.8 301.665 cv
227.8 303.804 229.536 305.54 231.675 305.54 cv
233.814 305.54 235.55 303.804 235.55 301.665 cv
ef
237.125 348.375 mo
237.125 333.125 ln
237.125 325.125 mo
237.125 309.875 ln
s
241.07 329.145 mo
241.07 327.006 239.334 325.27 237.195 325.27 cv
235.056 325.27 233.32 327.006 233.32 329.145 cv
233.32 331.284 235.056 333.02 237.195 333.02 cv
239.334 333.02 241.07 331.284 241.07 329.145 cv
ef
242.375 346.625 mo
242.375 331.375 ln
242.375 323.625 mo
242.375 308.625 ln
s
246.23 327.585 mo
246.23 325.446 244.494 323.71 242.355 323.71 cv
240.216 323.71 238.48 325.446 238.48 327.585 cv
238.48 329.724 240.216 331.46 242.355 331.46 cv
244.494 331.46 246.23 329.724 246.23 327.585 cv
ef
247.875 365.375 mo
247.875 350.625 ln
247.875 342.625 mo
247.875 327.875 ln
s
251.75 346.545 mo
251.75 344.406 250.014 342.67 247.875 342.67 cv
245.736 342.67 244 344.406 244 346.545 cv
244 348.684 245.736 350.42 247.875 350.42 cv
250.014 350.42 251.75 348.684 251.75 346.545 cv
ef
253.375 388.625 mo
253.375 373.875 ln
253.375 366.125 mo
253.375 351.625 ln
s
257.27 370.065 mo
257.27 367.926 255.534 366.19 253.395 366.19 cv
251.256 366.19 249.52 367.926 249.52 370.065 cv
249.52 372.204 251.256 373.94 253.395 373.94 cv
255.534 373.94 257.27 372.204 257.27 370.065 cv
ef
258.625 375.375 mo
258.625 361.125 ln
258.625 353.375 mo
258.625 338.875 ln
s
262.43 357.105 mo
262.43 354.966 260.694 353.23 258.555 353.23 cv
256.416 353.23 254.68 354.966 254.68 357.105 cv
254.68 359.244 256.416 360.98 258.555 360.98 cv
260.694 360.98 262.43 359.244 262.43 357.105 cv
ef
264.125 344.375 mo
264.125 330.125 ln
264.125 322.375 mo
264.125 308.125 ln
s
267.95 326.145 mo
267.95 324.006 266.214 322.27 264.075 322.27 cv
261.936 322.27 260.2 324.006 260.2 326.145 cv
260.2 328.284 261.936 330.02 264.075 330.02 cv
266.214 330.02 267.95 328.284 267.95 326.145 cv
ef
269.375 381.875 mo
269.375 368.125 ln
269.375 360.375 mo
269.375 346.375 ln
s
273.23 364.065 mo
273.23 361.926 271.494 360.19 269.355 360.19 cv
267.216 360.19 265.48 361.926 265.48 364.065 cv
265.48 366.204 267.216 367.94 269.355 367.94 cv
271.494 367.94 273.23 366.204 273.23 364.065 cv
ef
274.875 374.625 mo
274.875 361.125 ln
274.875 353.375 mo
274.875 339.875 ln
s
278.75 357.345 mo
278.75 355.206 277.014 353.47 274.875 353.47 cv
272.736 353.47 271 355.206 271 357.345 cv
271 359.484 272.736 361.22 274.875 361.22 cv
277.014 361.22 278.75 359.484 278.75 357.345 cv
ef
280.125 363.875 mo
280.125 350.625 ln
280.125 342.875 mo
280.125 329.625 ln
s
284.03 346.905 mo
284.03 344.766 282.294 343.03 280.155 343.03 cv
278.016 343.03 276.28 344.766 276.28 346.905 cv
276.28 349.044 278.016 350.78 280.155 350.78 cv
282.294 350.78 284.03 349.044 284.03 346.905 cv
ef
285.625 357.375 mo
285.625 344.375 ln
285.625 336.375 mo
285.625 323.375 ln
s
289.55 340.305 mo
289.55 338.166 287.814 336.43 285.675 336.43 cv
283.536 336.43 281.8 338.166 281.8 340.305 cv
281.8 342.444 283.536 344.18 285.675 344.18 cv
287.814 344.18 289.55 342.444 289.55 340.305 cv
ef
290.875 370.125 mo
290.875 357.625 ln
290.875 349.625 mo
290.875 337.125 ln
s
294.83 353.625 mo
294.83 351.486 293.094 349.75 290.955 349.75 cv
288.816 349.75 287.08 351.486 287.08 353.625 cv
287.08 355.764 288.816 357.5 290.955 357.5 cv
293.094 357.5 294.83 355.764 294.83 353.625 cv
ef
296.375 327.875 mo
296.375 315.375 ln
296.375 307.625 mo
296.375 295.125 ln
s
300.23 311.385 mo
300.23 309.246 298.494 307.51 296.355 307.51 cv
294.216 307.51 292.48 309.246 292.48 311.385 cv
292.48 313.524 294.216 315.26 296.355 315.26 cv
298.494 315.26 300.23 313.524 300.23 311.385 cv
ef
301.875 369.875 mo
301.875 357.875 ln
301.875 350.125 mo
301.875 338.125 ln
s
305.75 354.105 mo
305.75 351.966 304.014 350.23 301.875 350.23 cv
299.736 350.23 298 351.966 298 354.105 cv
298 356.244 299.736 357.98 301.875 357.98 cv
304.014 357.98 305.75 356.244 305.75 354.105 cv
ef
307.125 375.875 mo
307.125 364.125 ln
307.125 356.375 mo
307.125 344.625 ln
s
311.03 360.105 mo
311.03 357.966 309.294 356.23 307.155 356.23 cv
305.016 356.23 303.28 357.966 303.28 360.105 cv
303.28 362.244 305.016 363.98 307.155 363.98 cv
309.294 363.98 311.03 362.244 311.03 360.105 cv
ef
312.625 379.375 mo
312.625 368.125 ln
312.625 360.125 mo
312.625 348.875 ln
s
316.43 364.065 mo
316.43 361.926 314.694 360.19 312.555 360.19 cv
310.416 360.19 308.68 361.926 308.68 364.065 cv
308.68 366.204 310.416 367.94 312.555 367.94 cv
314.694 367.94 316.43 366.204 316.43 364.065 cv
ef
317.875 380.125 mo
317.875 368.875 ln
317.875 361.125 mo
317.875 350.125 ln
s
321.71 365.145 mo
321.71 363.006 319.974 361.27 317.835 361.27 cv
315.696 361.27 313.96 363.006 313.96 365.145 cv
313.96 367.284 315.696 369.02 317.835 369.02 cv
319.974 369.02 321.71 367.284 321.71 365.145 cv
ef
323.375 373.625 mo
323.375 362.625 ln
323.375 354.875 mo
323.375 344.125 ln
s
327.23 358.905 mo
327.23 356.766 325.494 355.03 323.355 355.03 cv
321.216 355.03 319.48 356.766 319.48 358.905 cv
319.48 361.044 321.216 362.78 323.355 362.78 cv
325.494 362.78 327.23 361.044 327.23 358.905 cv
ef
328.625 370.625 mo
328.625 360.125 ln
328.625 352.375 mo
328.625 341.875 ln
s
332.51 356.385 mo
332.51 354.246 330.774 352.51 328.635 352.51 cv
326.496 352.51 324.76 354.246 324.76 356.385 cv
324.76 358.524 326.496 360.26 328.635 360.26 cv
330.774 360.26 332.51 358.524 332.51 356.385 cv
ef
334.125 390.125 mo
334.125 380.125 ln
334.125 372.125 mo
334.125 362.125 ln
s
338.03 376.065 mo
338.03 373.926 336.294 372.19 334.155 372.19 cv
332.016 372.19 330.28 373.926 330.28 376.065 cv
330.28 378.204 332.016 379.94 334.155 379.94 cv
336.294 379.94 338.03 378.204 338.03 376.065 cv
ef
339.375 365.125 mo
339.375 355.375 ln
339.375 347.375 mo
339.375 337.625 ln
s
343.31 351.345 mo
343.31 349.206 341.574 347.47 339.435 347.47 cv
337.296 347.47 335.56 349.206 335.56 351.345 cv
335.56 353.484 337.296 355.22 339.435 355.22 cv
341.574 355.22 343.31 353.484 343.31 351.345 cv
ef
344.875 353.875 mo
344.875 344.625 ln
344.875 336.625 mo
344.875 327.375 ln
s
348.83 340.545 mo
348.83 338.406 347.094 336.67 344.955 336.67 cv
342.816 336.67 341.08 338.406 341.08 340.545 cv
341.08 342.684 342.816 344.42 344.955 344.42 cv
347.094 344.42 348.83 342.684 348.83 340.545 cv
ef
350.375 349.375 mo
350.375 340.125 ln
350.375 332.375 mo
350.375 323.375 ln
s
354.23 336.345 mo
354.23 334.206 352.494 332.47 350.355 332.47 cv
348.216 332.47 346.48 334.206 346.48 336.345 cv
346.48 338.484 348.216 340.22 350.355 340.22 cv
352.494 340.22 354.23 338.484 354.23 336.345 cv
ef
355.625 383.875 mo
355.625 375.125 ln
355.625 367.375 mo
355.625 358.625 ln
s
359.51 371.145 mo
359.51 369.006 357.774 367.27 355.635 367.27 cv
353.496 367.27 351.76 369.006 351.76 371.145 cv
351.76 373.284 353.496 375.02 355.635 375.02 cv
357.774 375.02 359.51 373.284 359.51 371.145 cv
ef
361.125 377.375 mo
361.125 368.875 ln
361.125 361.125 mo
361.125 352.875 ln
s
365.03 365.145 mo
365.03 363.006 363.294 361.27 361.155 361.27 cv
359.016 361.27 357.28 363.006 357.28 365.145 cv
357.28 367.284 359.016 369.02 361.155 369.02 cv
363.294 369.02 365.03 367.284 365.03 365.145 cv
ef
366.375 379.375 mo
366.375 371.375 ln
366.375 363.625 mo
366.375 355.625 ln
s
370.19 367.425 mo
370.19 365.286 368.454 363.55 366.315 363.55 cv
364.176 363.55 362.44 365.286 362.44 367.425 cv
362.44 369.564 364.176 371.3 366.315 371.3 cv
368.454 371.3 370.19 369.564 370.19 367.425 cv
ef
371.875 362.375 mo
371.875 354.625 ln
371.875 346.875 mo
371.875 339.125 ln
s
375.71 350.625 mo
375.71 348.486 373.974 346.75 371.835 346.75 cv
369.696 346.75 367.96 348.486 367.96 350.625 cv
367.96 352.764 369.696 354.5 371.835 354.5 cv
373.974 354.5 375.71 352.764 375.71 350.625 cv
ef
377.125 355.625 mo
377.125 348.375 ln
377.125 340.625 mo
377.125 333.125 ln
s
380.99 344.385 mo
380.99 342.246 379.254 340.51 377.115 340.51 cv
374.976 340.51 373.24 342.246 373.24 344.385 cv
373.24 346.524 374.976 348.26 377.115 348.26 cv
379.254 348.26 380.99 346.524 380.99 344.385 cv
ef
382.625 358.625 mo
382.625 351.625 ln
382.625 343.875 mo
382.625 336.875 ln
s
386.51 347.625 mo
386.51 345.486 384.774 343.75 382.635 343.75 cv
380.496 343.75 378.76 345.486 378.76 347.625 cv
378.76 349.764 380.496 351.5 382.635 351.5 cv
384.774 351.5 386.51 349.764 386.51 347.625 cv
ef
387.875 368.625 mo
387.875 361.875 ln
387.875 354.125 mo
387.875 347.375 ln
s
391.79 358.065 mo
391.79 355.926 390.054 354.19 387.915 354.19 cv
385.776 354.19 384.04 355.926 384.04 358.065 cv
384.04 360.204 385.776 361.94 387.915 361.94 cv
390.054 361.94 391.79 360.204 391.79 358.065 cv
ef
393.375 388.625 mo
393.375 382.375 ln
393.375 374.625 mo
393.375 368.125 ln
s
397.31 378.345 mo
397.31 376.206 395.574 374.47 393.435 374.47 cv
391.296 374.47 389.56 376.206 389.56 378.345 cv
389.56 380.484 391.296 382.22 393.435 382.22 cv
395.574 382.22 397.31 380.484 397.31 378.345 cv
ef
398.875 385.875 mo
398.875 379.875 ln
398.875 372.125 mo
398.875 365.875 ln
s
402.83 375.825 mo
402.83 373.686 401.094 371.95 398.955 371.95 cv
396.815 371.95 395.08 373.686 395.08 375.825 cv
395.08 377.964 396.815 379.7 398.955 379.7 cv
401.094 379.7 402.83 377.964 402.83 375.825 cv
ef
404.125 370.125 mo
404.125 364.375 ln
404.125 356.375 mo
404.125 350.625 ln
s
407.99 360.345 mo
407.99 358.206 406.254 356.47 404.115 356.47 cv
401.976 356.47 400.24 358.206 400.24 360.345 cv
400.24 362.484 401.976 364.22 404.115 364.22 cv
406.254 364.22 407.99 362.484 407.99 360.345 cv
ef
409.625 357.125 mo
409.625 351.625 ln
409.625 343.875 mo
409.625 338.125 ln
s
413.51 347.625 mo
413.51 345.486 411.773 343.75 409.635 343.75 cv
407.496 343.75 405.76 345.486 405.76 347.625 cv
405.76 349.764 407.496 351.5 409.635 351.5 cv
411.773 351.5 413.51 349.764 413.51 347.625 cv
ef
414.875 379.625 mo
414.875 374.375 ln
414.875 366.625 mo
414.875 361.375 ln
s
418.67 370.305 mo
418.67 368.166 416.934 366.43 414.795 366.43 cv
412.656 366.43 410.92 368.166 410.92 370.305 cv
410.92 372.444 412.656 374.18 414.795 374.18 cv
416.934 374.18 418.67 372.444 418.67 370.305 cv
ef
420.375 362.875 mo
420.375 357.875 ln
420.375 349.875 mo
420.375 344.875 ln
s
424.189 353.865 mo
424.189 351.726 422.454 349.99 420.314 349.99 cv
418.176 349.99 416.439 351.726 416.439 353.865 cv
416.439 356.004 418.176 357.74 420.314 357.74 cv
422.454 357.74 424.189 356.004 424.189 353.865 cv
ef
425.625 370.875 mo
425.625 366.125 ln
425.625 358.375 mo
425.625 353.625 ln
s
429.47 362.145 mo
429.47 360.006 427.733 358.27 425.595 358.27 cv
423.456 358.27 421.72 360.006 421.72 362.145 cv
421.72 364.284 423.456 366.02 425.595 366.02 cv
427.733 366.02 429.47 364.284 429.47 362.145 cv
ef
431.125 380.125 mo
431.125 375.625 ln
431.125 367.625 mo
431.125 363.125 ln
s
434.99 371.625 mo
434.99 369.486 433.254 367.75 431.115 367.75 cv
428.976 367.75 427.24 369.486 427.24 371.625 cv
427.24 373.764 428.976 375.5 431.115 375.5 cv
433.254 375.5 434.99 373.764 434.99 371.625 cv
ef
436.375 371.875 mo
436.375 367.625 ln
436.375 359.875 mo
436.375 355.625 ln
s
440.27 363.585 mo
440.27 361.446 438.534 359.71 436.395 359.71 cv
434.256 359.71 432.52 361.446 432.52 363.585 cv
432.52 365.724 434.256 367.46 436.395 367.46 cv
438.534 367.46 440.27 365.724 440.27 363.585 cv
ef
441.875 375.125 mo
441.875 371.125 ln
441.875 363.375 mo
441.875 359.375 ln
s
445.79 367.425 mo
445.79 365.286 444.054 363.55 441.915 363.55 cv
439.775 363.55 438.04 365.286 438.04 367.425 cv
438.04 369.564 439.775 371.3 441.915 371.3 cv
444.054 371.3 445.79 369.564 445.79 367.425 cv
ef
447.375 369.875 mo
447.375 366.125 ln
447.375 358.375 mo
447.375 354.625 ln
s
451.31 362.145 mo
451.31 360.006 449.574 358.27 447.435 358.27 cv
445.296 358.27 443.56 360.006 443.56 362.145 cv
443.56 364.284 445.296 366.02 447.435 366.02 cv
449.574 366.02 451.31 364.284 451.31 362.145 cv
ef
452.625 370.125 mo
452.625 366.625 ln
452.625 358.875 mo
452.625 355.375 ln
s
456.47 362.625 mo
456.47 360.486 454.733 358.75 452.595 358.75 cv
450.456 358.75 448.72 360.486 448.72 362.625 cv
448.72 364.764 450.456 366.5 452.595 366.5 cv
454.733 366.5 456.47 364.764 456.47 362.625 cv
ef
458.125 361.125 mo
458.125 357.875 ln
458.125 350.125 mo
458.125 346.875 ln
s
461.99 353.865 mo
461.99 351.726 460.254 349.99 458.115 349.99 cv
455.976 349.99 454.24 351.726 454.24 353.865 cv
454.24 356.004 455.976 357.74 458.115 357.74 cv
460.254 357.74 461.99 356.004 461.99 353.865 cv
ef
463.375 363.875 mo
463.375 361.125 ln
463.375 353.125 mo
463.375 350.125 ln
s
467.27 357.105 mo
467.27 354.966 465.534 353.23 463.395 353.23 cv
461.256 353.23 459.52 354.966 459.52 357.105 cv
459.52 359.244 461.256 360.98 463.395 360.98 cv
465.534 360.98 467.27 359.244 467.27 357.105 cv
ef
468.875 368.125 mo
468.875 365.625 ln
468.875 357.625 mo
468.875 354.875 ln
s
472.67 361.665 mo
472.67 359.526 470.934 357.79 468.795 357.79 cv
466.656 357.79 464.92 359.526 464.92 361.665 cv
464.92 363.804 466.656 365.54 468.795 365.54 cv
470.934 365.54 472.67 363.804 472.67 361.665 cv
ef
474.125 365.375 mo
474.125 363.125 ln
474.125 355.125 mo
474.125 352.875 ln
s
477.95 359.145 mo
477.95 357.006 476.214 355.27 474.075 355.27 cv
471.936 355.27 470.2 357.006 470.2 359.145 cv
470.2 361.284 471.936 363.02 474.075 363.02 cv
476.214 363.02 477.95 361.284 477.95 359.145 cv
ef
479.625 379.125 mo
479.625 376.875 ln
479.625 369.125 mo
479.625 366.875 ln
s
483.47 373.185 mo
483.47 371.046 481.733 369.31 479.595 369.31 cv
477.456 369.31 475.72 371.046 475.72 373.185 cv
475.72 375.324 477.456 377.06 479.595 377.06 cv
481.733 377.06 483.47 375.324 483.47 373.185 cv
ef
484.875 379.625 mo
484.875 377.625 ln
484.875 369.875 mo
484.875 367.875 ln
s
488.75 373.905 mo
488.75 371.766 487.014 370.03 484.875 370.03 cv
482.735 370.03 481 371.766 481 373.905 cv
481 376.044 482.735 377.78 484.875 377.78 cv
487.014 377.78 488.75 376.044 488.75 373.905 cv
ef
490.375 379.375 mo
490.375 377.875 ln
490.375 370.125 mo
490.375 368.375 ln
s
494.27 373.905 mo
494.27 371.766 492.534 370.03 490.395 370.03 cv
488.256 370.03 486.52 371.766 486.52 373.905 cv
486.52 376.044 488.256 377.78 490.395 377.78 cv
492.534 377.78 494.27 376.044 494.27 373.905 cv
ef
495.625 373.625 mo
495.625 372.125 ln
495.625 364.375 mo
495.625 362.875 ln
s
499.55 368.385 mo
499.55 366.246 497.813 364.51 495.675 364.51 cv
493.536 364.51 491.8 366.246 491.8 368.385 cv
491.8 370.524 493.536 372.26 495.675 372.26 cv
497.813 372.26 499.55 370.524 499.55 368.385 cv
ef
501.125 370.125 mo
501.125 368.875 ln
501.125 360.875 mo
501.125 359.875 ln
s
505.069 364.905 mo
505.069 362.766 503.334 361.03 501.194 361.03 cv
499.056 361.03 497.319 362.766 497.319 364.905 cv
497.319 367.044 499.056 368.78 501.194 368.78 cv
503.334 368.78 505.069 367.044 505.069 364.905 cv
ef
506.625 379.625 mo
506.625 378.625 ln
506.625 370.875 mo
506.625 369.875 ln
s
510.47 374.625 mo
510.47 372.486 508.733 370.75 506.595 370.75 cv
504.456 370.75 502.72 372.486 502.72 374.625 cv
502.72 376.764 504.456 378.5 506.595 378.5 cv
508.733 378.5 510.47 376.764 510.47 374.625 cv
ef
511.875 378.125 mo
511.875 377.375 ln
511.875 369.625 mo
511.875 368.875 ln
s
515.75 373.425 mo
515.75 371.286 514.014 369.55 511.875 369.55 cv
509.735 369.55 508 371.286 508 373.425 cv
508 375.564 509.735 377.3 511.875 377.3 cv
514.014 377.3 515.75 375.564 515.75 373.425 cv
ef
517.375 382.875 mo
517.375 382.375 ln
517.375 374.375 mo
517.375 374.125 ln
s
521.27 378.345 mo
521.27 376.206 519.534 374.47 517.395 374.47 cv
515.256 374.47 513.52 376.206 513.52 378.345 cv
513.52 380.484 515.256 382.22 517.395 382.22 cv
519.534 382.22 521.27 380.484 521.27 378.345 cv
ef
522.625 374.625 mo
522.625 374.375 ln
522.625 366.625 mo
522.625 366.375 ln
s
526.43 370.305 mo
526.43 368.166 524.693 366.43 522.555 366.43 cv
520.416 366.43 518.68 368.166 518.68 370.305 cv
518.68 372.444 520.416 374.18 522.555 374.18 cv
524.693 374.18 526.43 372.444 526.43 370.305 cv
ef
531.95 374.865 mo
531.95 372.726 530.214 370.99 528.075 370.99 cv
525.936 370.99 524.2 372.726 524.2 374.865 cv
524.2 377.004 525.936 378.74 528.075 378.74 cv
530.214 378.74 531.95 377.004 531.95 374.865 cv
ef
537.229 376.065 mo
537.229 373.926 535.494 372.19 533.354 372.19 cv
531.216 372.19 529.479 373.926 529.479 376.065 cv
529.479 378.204 531.216 379.94 533.354 379.94 cv
535.494 379.94 537.229 378.204 537.229 376.065 cv
ef
542.75 368.145 mo
542.75 366.006 541.014 364.27 538.875 364.27 cv
536.735 364.27 535 366.006 535 368.145 cv
535 370.284 536.735 372.02 538.875 372.02 cv
541.014 372.02 542.75 370.284 542.75 368.145 cv
ef
548.03 377.145 mo
548.03 375.006 546.294 373.27 544.155 373.27 cv
542.016 373.27 540.28 375.006 540.28 377.145 cv
540.28 379.284 542.016 381.02 544.155 381.02 cv
546.294 381.02 548.03 379.284 548.03 377.145 cv
ef
553.55 375.105 mo
553.55 372.966 551.813 371.23 549.675 371.23 cv
547.536 371.23 545.8 372.966 545.8 375.105 cv
545.8 377.244 547.536 378.98 549.675 378.98 cv
551.813 378.98 553.55 377.244 553.55 375.105 cv
ef
559.07 375.825 mo
559.07 373.686 557.334 371.95 555.195 371.95 cv
553.056 371.95 551.32 373.686 551.32 375.825 cv
551.32 377.964 553.056 379.7 555.195 379.7 cv
557.334 379.7 559.07 377.964 559.07 375.825 cv
ef
564.229 380.145 mo
564.229 378.006 562.494 376.27 560.354 376.27 cv
558.216 376.27 556.479 378.006 556.479 380.145 cv
556.479 382.284 558.216 384.02 560.354 384.02 cv
562.494 384.02 564.229 382.284 564.229 380.145 cv
ef
569.75 378.945 mo
569.75 376.806 568.014 375.07 565.875 375.07 cv
563.735 375.07 562 376.806 562 378.945 cv
562 381.084 563.735 382.82 565.875 382.82 cv
568.014 382.82 569.75 381.084 569.75 378.945 cv
ef
575.03 379.665 mo
575.03 377.526 573.294 375.79 571.155 375.79 cv
569.016 375.79 567.28 377.526 567.28 379.665 cv
567.28 381.804 569.016 383.54 571.155 383.54 cv
573.294 383.54 575.03 381.804 575.03 379.665 cv
ef
580.43 380.625 mo
580.43 378.486 578.693 376.75 576.555 376.75 cv
574.416 376.75 572.68 378.486 572.68 380.625 cv
572.68 382.764 574.416 384.5 576.555 384.5 cv
578.693 384.5 580.43 382.764 580.43 380.625 cv
ef
585.71 381.105 mo
585.71 378.966 583.974 377.23 581.835 377.23 cv
579.696 377.23 577.96 378.966 577.96 381.105 cv
577.96 383.244 579.696 384.98 581.835 384.98 cv
583.974 384.98 585.71 383.244 585.71 381.105 cv
ef
591.229 382.305 mo
591.229 380.166 589.494 378.43 587.354 378.43 cv
585.216 378.43 583.479 380.166 583.479 382.305 cv
583.479 384.444 585.216 386.18 587.354 386.18 cv
589.494 386.18 591.229 384.444 591.229 382.305 cv
ef
596.51 382.905 mo
596.51 380.766 594.773 379.03 592.635 379.03 cv
590.496 379.03 588.76 380.766 588.76 382.905 cv
588.76 385.044 590.496 386.78 592.635 386.78 cv
594.773 386.78 596.51 385.044 596.51 382.905 cv
ef
602.03 381.585 mo
602.03 379.446 600.294 377.71 598.155 377.71 cv
596.016 377.71 594.28 379.446 594.28 381.585 cv
594.28 383.724 596.016 385.46 598.155 385.46 cv
600.294 385.46 602.03 383.724 602.03 381.585 cv
ef
607.55 382.905 mo
607.55 380.766 605.813 379.03 603.675 379.03 cv
601.536 379.03 599.8 380.766 599.8 382.905 cv
599.8 385.044 601.536 386.78 603.675 386.78 cv
605.813 386.78 607.55 385.044 607.55 382.905 cv
ef
612.83 383.145 mo
612.83 381.006 611.094 379.27 608.955 379.27 cv
606.815 379.27 605.08 381.006 605.08 383.145 cv
605.08 385.284 606.815 387.02 608.955 387.02 cv
611.094 387.02 612.83 385.284 612.83 383.145 cv
ef
618.229 383.145 mo
618.229 381.006 616.494 379.27 614.354 379.27 cv
612.216 379.27 610.479 381.006 610.479 383.145 cv
610.479 385.284 612.216 387.02 614.354 387.02 cv
616.494 387.02 618.229 385.284 618.229 383.145 cv
ef
2.25 lw
138.875 375.375 mo
143.875 345.875 ln
148.625 306.625 ln
153.625 262.875 ln
158.625 218.625 ln
163.625 175.625 ln
168.625 135.625 ln
173.625 100.125 ln
178.625 71.625 ln
183.625 53.375 ln
188.375 48.375 ln
193.375 58.375 ln
198.375 82.125 ln
203.375 115.875 ln
208.375 154.125 ln
213.375 192.375 ln
218.375 226.875 ln
223.375 256.625 ln
228.125 281.125 ln
233.125 300.625 ln
238.125 316.375 ln
243.125 328.625 ln
248.125 338.125 ln
253.125 345.625 ln
258.125 351.375 ln
263.125 355.625 ln
267.875 359.125 ln
272.875 361.625 ln
277.875 363.375 ln
282.875 364.625 ln
287.875 365.375 ln
292.875 365.875 ln
302.875 365.875 ln
307.625 365.625 ln
312.625 365.125 ln
317.625 364.375 ln
322.625 363.625 ln
327.625 362.875 ln
332.625 361.875 ln
337.625 361.125 ln
342.625 360.125 ln
347.375 359.375 ln
352.375 358.375 ln
357.375 357.625 ln
362.375 356.875 ln
367.375 356.125 ln
372.375 355.625 ln
377.375 355.125 ln
382.375 354.875 ln
382.375 354.875 mo
387.125 354.625 ln
392.125 354.375 ln
397.125 354.375 ln
402.125 354.625 ln
407.125 354.875 ln
412.125 355.375 ln
417.125 355.875 ln
422.125 356.625 ln
426.875 357.375 ln
431.875 358.125 ln
436.875 359.125 ln
441.875 360.125 ln
446.875 361.125 ln
451.875 362.375 ln
456.875 363.375 ln
461.875 364.625 ln
466.625 365.875 ln
471.625 367.125 ln
476.625 368.375 ln
481.625 369.375 ln
486.625 370.625 ln
491.625 371.625 ln
496.625 372.625 ln
501.375 373.625 ln
506.375 374.625 ln
511.375 375.625 ln
516.375 376.375 ln
521.375 377.125 ln
526.375 377.875 ln
531.375 378.375 ln
536.375 379.125 ln
541.125 379.625 ln
546.125 380.125 ln
551.125 380.375 ln
556.125 380.875 ln
561.125 381.125 ln
566.125 381.375 ln
571.125 381.625 ln
576.125 381.875 ln
580.875 382.125 ln
585.875 382.375 ln
590.875 382.375 ln
595.875 382.625 ln
605.875 382.625 ln
610.875 382.875 ln
625.625 382.875 ln
625.625 382.875 mo
630.625 382.875 ln
s
0.75 lw
88.875 408.625 mo
633.125 408.625 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
41{/.notdef}repeat /parenright 214{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
620.875 453.875 mov
(\)) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
612.125 443.125 mov
(2) sh
restore_ctm
94.375 396.375 mo
94.375 408.625 ln
121.125 402.375 mo
121.125 408.625 ln
148.125 402.375 mo
148.125 408.625 ln
175.125 402.375 mo
175.125 408.625 ln
202.125 396.375 mo
202.125 408.625 ln
229.125 402.375 mo
229.125 408.625 ln
255.875 402.375 mo
255.875 408.625 ln
282.875 402.375 mo
282.875 408.625 ln
309.875 396.375 mo
309.875 408.625 ln
336.875 402.375 mo
336.875 408.625 ln
363.625 402.375 mo
363.625 408.625 ln
390.625 402.375 mo
390.625 408.625 ln
417.625 396.375 mo
417.625 408.625 ln
444.625 402.375 mo
444.625 408.625 ln
471.375 402.375 mo
471.375 408.625 ln
498.375 402.375 mo
498.375 408.625 ln
525.375 396.375 mo
525.375 408.625 ln
552.375 402.375 mo
552.375 408.625 ln
579.375 402.375 mo
579.375 408.625 ln
606.125 402.375 mo
606.125 408.625 ln
633.125 396.375 mo
633.125 408.625 ln
94.375 396.375 mo
94.375 408.625 ln
633.125 396.375 mo
633.125 408.625 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e3088328e93e3f86c5266dab4a
4b6a0dbbd499ac2f08f52498a1230ac74b9126578260e72bf920c6626e18
e52befca2ad4c5c494a757a5861d225d61833e7b6db104708e0fcf59a03e
ddf773c2fe0a4faea092dc7a4d01275005fb3564e1d1f76f67c0ded9002e
e506fbb65143c90d6526880b9b4967a1233028aa9e8c3e30f59ec7f29cd2
713cffb71673b8ee9c01e77581750db787f4754cdac76007b210e32a2dfc
77791af6ea67a232e72999312d> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638bbfe80126114fe37407e2e312c7bcbd2c
1b7b9e7fac2817224e19> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e231374dce1d715d27566dcf
115e95280405ef7103dd8183790f381980b4f25c32c305> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3490b93b478f689beebddc801
f9ab05d95370b6f2d5e4eaf0e05d2c29f4d91b00084ec9f87aa58fda4ad7
8d5d66fcc7e8afb13d634e9fe58c768d42> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
/v 
<10bf31706ae07dd17dfc9e3ad4fb8a8843b0ccd3bf37159e4d997ae7db46
1605af60e723de30a8f7915cee06ac348ee0e2ad17e20e> ND 
end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 47 /slash put
dup 71 /G put
dup 73 /I put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft 6{/.notdef}repeat /slash 23{/.notdef}repeat /G 
/.notdef /I 3{/.notdef}repeat /M 8{/.notdef}repeat /V 10{/.notdef}repeat /a 
/.notdef /c /.notdef /e 3{/.notdef}repeat /i 4{/.notdef}repeat /n 
3{/.notdef}repeat /r /s /t /.notdef /v 137{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
403.625 453.875 mov
(Invariant Mass \(GeV/c) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end end
end
/ArialMT findfont /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
49{/.notdef}repeat /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
90.375 429.375 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
189.875 429.375 mov
(1) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
46{/.notdef}repeat /period 209{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
201.554 429.375 mov
(.) sh
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
207.389 429.375 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
297.375 429.375 mov
(1) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
309.054 429.375 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
314.889 429.375 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
405.125 429.375 mov
(1) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
416.804 429.375 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/six 
<10bf3170435d0d4425184fc061c7faa8dc6baee8c868da453cb6a6f891b2
5354e14cb1bc5e0a0fcae04743a9daec5483058e0dde89957524c8915b19
25146f588ef5a70cf81e2e4fc7890fddf0f5d4c16f77c4469f58479cdd1b
49f5c68eada3087814223d9b5aa8284ce9770f7175297744c20f41a48dc8
d286517deb8893f3230571eaf9ea1ba0abf787d646e1631373082ff4df40
4c74838bb86fd789e63cac0da4dceabebd4d0fc0472fd6a9ca90e64e3c08
8853c020aae52cb442800bb6081c0fefcb0a206f46cf4ec1e25c13c94cbb
330a8f2762> ND 
end end
end
/ArialMT findfont /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
54{/.notdef}repeat /six 201{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
422.639 429.375 mov
(6) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
513.625 429.375 mov
(1) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
525.304 429.375 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6f92fe7d0382cbfbcdc7b1ae90f5804442d3ad6d5e65
ea646fb35cdd7e11033e2adda681e7c859039849d6dc5ed2ddeff6a08225
d8f51551f3de1fe8a008c3292192037d710bd142b0870ce031e718da3ef6
d3433e72ed0f460e2a4d68b080691bc3e7e1f307fb1e0e53bcb7db60f146
7b82fe22e2d41fbef278c3fdcb5b6d458b0439abc5768f2ce7c9570fa1d6
c4be1808a48200bf465a45f457def4538c8fb72d6cd74c82c40277b5b6e7
fea6be29486ac098b8cb486a6ef4b50bb3d786b334b9913c9609ad75ea2f
ed8e7505ac0f1bb96c923835d10b3ab9> ND 
end end
end
/ArialMT findfont /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
56{/.notdef}repeat /eight 199{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
531.139 429.375 mov
(8) sh
restore_ctm
88.875 408.625 mo
88.875 0.375 ln
s
save_ctm
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
627.875 429.375 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
26.75 7.125 mov
(\)) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 17.875 mov
(2) sh
restore_ctm
105.125 383.125 mo
88.875 383.125 ln
97.125 363.125 mo
88.875 363.125 ln
97.125 343.125 mo
88.875 343.125 ln
97.125 323.125 mo
88.875 323.125 ln
105.125 303.125 mo
88.875 303.125 ln
97.125 283.375 mo
88.875 283.375 ln
97.125 263.375 mo
88.875 263.375 ln
97.125 243.375 mo
88.875 243.375 ln
105.125 223.375 mo
88.875 223.375 ln
97.125 203.375 mo
88.875 203.375 ln
97.125 183.625 mo
88.875 183.625 ln
97.125 163.625 mo
88.875 163.625 ln
105.125 143.625 mo
88.875 143.625 ln
97.125 123.625 mo
88.875 123.625 ln
97.125 103.625 mo
88.875 103.625 ln
97.125 83.875 mo
88.875 83.875 ln
105.125 63.875 mo
88.875 63.875 ln
105.125 383.125 mo
88.875 383.125 ln
97.125 402.875 mo
88.875 402.875 ln
105.125 63.875 mo
88.875 63.875 ln
97.125 43.875 mo
88.875 43.875 ln
97.125 23.875 mo
88.875 23.875 ln
97.125 4.125 mo
88.875 4.125 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153f04f4f888
a9793af1cdd76cf42c98e3b7c6efff30aedf23874b961a5a7d8352571859
f2ee15399c0c2d0f0e789c04eb8ab69e8694b49d1cdc36041f81732689ae
c7de70103ef45c5aac1fa0ded9e2cebee882d4e31e26d9203d2435459b9d
1e92bd9bcf321ca456fc2c8b25bf9b414bd39bc63d4e221a0d6aa6fccdc3
c8a808e6ed39733b2c7e47> ND 
/o 
<10bf31705e921373942a1df751ebc6dc1f8ba1849e5d0b813201a0c14072
56efd5ac73b2cc94d73ea025d660f576b0dc46e6510eb657538743c037a9
ef3f1df5fa8600ba31cfa9fb018633830dedfb133aaa4477d4caef3c149d
68283dde65fde31ff05fe29c87c2dcf980686664a1ba1e9317bc4e3671a3
dde8af03d654a3b9278e18f5d604ca7d7f> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 48 /zero put
dup 67 /C put
dup 111 /o put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
48{/.notdef}repeat /zero 18{/.notdef}repeat /C 43{/.notdef}repeat /o 5{/.notdef}repeat /u 
138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
26.75 187.375 mov
(Cou) sh
/ArialMT*3 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
26.75 148.851 mov
(nts/\() sh
/ArialMT*2 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
26.75 108.01 mov
(2) sh
/ArialMT*9 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
26.75 96.3306 mov
(0) sh
/ArialMT*3 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
26.75 84.6514 mov
( MeV/c) sh
restore_ctm
save_ctm
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62 390.125 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
34.75 311.125 mov
(2) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
46.4292 311.125 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
34.75 230.875 mov
(4) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
46.4292 230.875 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
34.75 150.625 mov
(6) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
46.4292 150.625 mov
(000) sh
restore_ctm
2.25 lw
[3 3 ] 0 dsh
138.875 383.125 mo
143.875 382.875 ln
178.625 382.875 ln
183.625 382.625 ln
193.375 382.625 ln
198.375 382.375 ln
203.375 382.375 ln
208.375 382.125 ln
213.375 381.875 ln
218.375 381.875 ln
223.375 381.625 ln
228.125 381.375 ln
233.125 380.875 ln
238.125 380.625 ln
243.125 380.125 ln
248.125 379.625 ln
253.125 379.125 ln
258.125 378.625 ln
263.125 378.125 ln
267.875 377.375 ln
272.875 376.625 ln
277.875 375.875 ln
282.875 374.875 ln
287.875 374.125 ln
292.875 373.125 ln
297.875 372.125 ln
302.875 370.875 ln
307.625 369.875 ln
312.625 368.625 ln
317.625 367.375 ln
322.625 366.375 ln
327.625 365.125 ln
332.625 363.875 ln
337.625 362.625 ln
342.625 361.625 ln
347.375 360.625 ln
352.375 359.375 ln
357.375 358.625 ln
362.375 357.625 ln
367.375 356.875 ln
372.375 356.125 ln
377.375 355.625 ln
382.375 355.125 ln
382.375 355.125 mo
387.125 354.875 ln
402.125 354.875 ln
407.125 355.125 ln
412.125 355.625 ln
417.125 356.125 ln
422.125 356.625 ln
426.875 357.375 ln
431.875 358.375 ln
436.875 359.125 ln
441.875 360.125 ln
446.875 361.375 ln
451.875 362.375 ln
456.875 363.625 ln
461.875 364.875 ln
466.625 365.875 ln
471.625 367.125 ln
476.625 368.375 ln
481.625 369.625 ln
486.625 370.625 ln
491.625 371.625 ln
496.625 372.875 ln
501.375 373.875 ln
506.375 374.625 ln
511.375 375.625 ln
516.375 376.375 ln
521.375 377.125 ln
526.375 377.875 ln
531.375 378.625 ln
536.375 379.125 ln
541.125 379.625 ln
546.125 380.125 ln
551.125 380.375 ln
556.125 380.875 ln
561.125 381.125 ln
566.125 381.375 ln
571.125 381.625 ln
576.125 381.875 ln
580.875 382.125 ln
585.875 382.375 ln
590.875 382.375 ln
595.875 382.625 ln
605.875 382.625 ln
610.875 382.875 ln
625.625 382.875 ln
625.625 382.875 mo
630.625 382.875 ln
s
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
34.75 71.625 mov
(8) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
46.4292 71.625 mov
(000) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
43{/.notdef}repeat /plus 212{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
407.875 68.625 mov
(++) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/version (001.008) def
/FullName (Symbol) def
/FamilyName (Symbol) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Symbol def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -180 -293 1090 1010 } def
/XUID [6 42996 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECAB94698AF
13A4485757691763CAA8023293C6742E3899EDC5BE94ADFC42A0C0027CA6214B
7F8D5F616C6C2330D450A707B93BDD387F8829CFEF02A72B512D93C14DC1F17C
3175B113E267D8BD6A1447D88A441810C35BAC725EC0017275261A74EB5067CD
9834D1E000DA4929128802A4406C63EAAE5098C3B673FB571CE4AA66227384BC
D1F9516217661F446651CBD433BDBB210B8CB1C0AE7FE1EE2E21077BC11F9270
69E30D1E3AF26358279873C2B62D3AA5368EC87D6A567E789674A8EEED694D74
E8AE78AD599DE625132DC2B96E4C1518B04F598401F1080D43B1530D7089A208
39AB479C8D65D6823FDE8C7085D829EBF9BFD791C95C71C65AE4EC2A01CBA5FA
992ED2E4C180E84DC6E14861844CD132B73A4AA658AD9BE20B35514AC67BF58E
E4587AAC0BA16313B83C2C222F018E737313614351D1EFBF36BD83A38ED9DB6B
D6191BB6160AAC9612D574C3028C8C52B52925658ED342DA958D4100DABE516F
4733BF895741A1EA34A4707864910DD7E8EFE407898B7BCC27AC062D1BA4F11A
73F4342E2D8EF6E101C80AABBFD820974B1F3CC33D070E3C0CF97490AE3CCF18
630A6E2BD4007310EF65E793C445E48BC171043FCE380624354787BC936241D0
3306C33061D7EDD92FAC67F671457CD23F6931B947E97BDA7754E5F56D611220
5C4E82C2815584BF47A854236D460FE90AEE8B7FC419C26F68EB007CE6ED0053
856FABF9D7B6E5E6D910A77FDC4019BC55466E90A87476719B3A8CE5B38E4592
40DEDD91E229FB5784ED9E5A05747D938589B5554723ABC8F7F565F9F7AE6BCF
106F2212EAA54EE7DDD86863B30DFFB84D259A8FD24352AD855813AA02791C07
3824963AA973AEB925BCB75D7B8B65680FFF2B750A7939CBD880C8467D1104DF
9F15B0A8B2E43C7F445BA84DDD777444FD9E2416992213E6D0A936603D381689
9E5E55FFC73083C43CA8A15EAD3BEE4D6AFAD49938AC763CA6CEFF4F499F6EB0
303C5FD86A6DA9601B64F321DE385311C18C43E18842F9D2B0445C853100194C
0EB4F0E368EF73081F98B787C0FD723F3DC0FFF2116676894617D05260524DFA
1C1424BBA73EEF75D8DBD86066850389ABCFEBF01C39C364A46182E47BEB9F55
679298A5A04190FF534218EAB65BEEFD74CF10AB8678EF1F6D0571C160A9603A
CDD271F08AD4812C1D7BD5CCE2DAE0170DD34BEB8CEFCD53644795C872A14E50
D6AAD6F1B8D7189729AE7ADFDCB5DF991B245C81CE2308BCC82D48707AFFA4C9
A4C87D5DC67236E08C7B144AA696669DC25D82589F7BBC7ECEFD474AB108069A
375F2B6B927C6D4C970478E059126CFAAFAE963C89B348FA0CEE452DBAB4A8AA
DC47F03B0A479DA258DE4F981B8B1519E8142B98A32C065A92D354FBE9ECD7A3
B1C375B7A9245CB30CCF340911CC422189F990D71E42F25BB3AA3E4EA48A0214
F2975AA8B8315924FBC2852E7FECD6E12750536616A4B4269267922E34546EAA
B81F65BB1767B4E8336F8EA2A1DEB6BFAB362A36461936E3DCBA71E23C026C16
F68A7AA01DBA71B4F4CF5FF745C676FCC198E53632C5E9031E702833453A5E34
7AC6338A3246C86A93593537C866CA38AD52032B30CEF7D833F677CEAEFFF622
D8A4AAEAF0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 68 /Delta put
pop
%ADOEndSubsetFont
/Symbol*1 
[
68{/.notdef}repeat /Delta 187{/.notdef}repeat
] /Symbol nfnt
/Symbol*1 findfont [35 0 0 -35 0 0 ]mfnt sfnt
BuildWidthShowArray
390.375 84.125 mov
(D) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
293.875 155.375 mov
(Mini) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac576702c4654165111c4e219216
925a1bbda37b8221ddb4f3d7ef9dc32fffa987a0f0ea03488171acb09982
96179b683649315a4b1534> ND 
/B 
<10bf317026ba62063ac1fc9b1b7da70a4283bca66508b7487db96d3b5e50
ebb26d781c08b71d8c60e86f5f95e258aadae78cebfccceace7d1e24a04f
7a0ebebb84d24fd6e0dcc7805db6e5cdf4eb0699290a048d32bdfc7bda09
b014801b6912f42581f07cfc0dad1f3a0fda97cccb6dc64f3c2133712b38
17f9dcf78f219a31023477457afb4124f2e67688f81d2fae0a3d889fa20e
a1e4d003c07fa3b1c5e475e398065490772a2317b8a1741177b48843cacc
98258835f7713d01ccd04d20a02276a9eaa215ecd7e642af0d478b9844bc
79867bee2d8cdbfd06> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
end end
end
/ArialMT findfont /Encoding get
dup 65 /A put
dup 66 /B put
dup 100 /d put
dup 109 /m put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
65{/.notdef}repeat /A /B 33{/.notdef}repeat /d 8{/.notdef}repeat /m 146{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
341.546 155.375 mov
(m) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
363.204 155.375 mov
(u) sh
/ArialMT*11 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
377.664 155.375 mov
(m) sh
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
399.322 155.375 mov
( ) sh
/ArialMT*11 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
406.546 155.375 mov
(B) sh
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
423.888 155.375 mov
(ias ) sh
/ArialMT*11 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
464.348 155.375 mov
(d) sh
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
478.808 155.375 mov
(+) sh
/ArialMT*11 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
493.991 155.375 mov
(A) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
511.333 155.375 mov
(u) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
389.375 218.875 mov
( ) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/less 
<10bf317030abe1cb512ceea0449cd815b1f6ae31114cd5e64ac5f3e96d86
2e69bcc80ee2b040b2534f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 60 /less put
pop
%ADOEndSubsetFont
/ArialMT*12 
[
60{/.notdef}repeat /less 195{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
396.599 218.875 mov
(<) sh
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
411.782 218.875 mov
( ) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
419.006 218.875 mov
(0) sh
/ArialMT*5 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
433.466 218.875 mov
(.) sh
/ArialMT*8 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
440.689 218.875 mov
(8) sh
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
455.149 218.875 mov
( GeV/c) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/ArialMT*13 
[
84{/.notdef}repeat /T 171{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*13 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
377.625 232.625 mov
(T) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
353.125 146.875 mov
( ) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79f07ea232bdef9ac901d627f1d7c
bbc695d54d248636f112e1e558138c8614732404711d922beb14f6e9da7a
f0f6424e78635561b81229fa2a64943f0a34dc93b34efd58286722f3cf61
311ea7fc7d9e5939d3363e9ede71cf70e1e3065ffc3ecb6cd91e476e222f
a9d3eab4d1de767ebebf490a414b0dffbb21fe8991e5077af9877088538e
7a8f585effec91> ND 
end end
end
/ArialMT findfont /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/ArialMT*14 
[
112{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*14 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
361.005 218.875 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9D892360746A8D3
58FD90836DF3EF22CCC199314033B41137183BA9FAE90C80BB0E3B733067D7A2
ECF03BFEB01E4DF679C435B8355B35730CE44C0ACDC5C4564AEAE07D94BE0886
4C9B1F843FFBD3A24ABC0F3798C3400486F049852E6A9E437585AD141B522E5B
A1BD14646414E83D86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 163 /lessequal put
pop
%ADOEndSubsetFont
/Symbol*2 
[
163{/.notdef}repeat /lessequal 92{/.notdef}repeat
] /Symbol nfnt
/Symbol*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
337.625 218.875 mov
(\243) sh
restore_ctm
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
290.625 218.875 mov
(0) sh
/ArialMT*5 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
305.085 218.875 mov
(.) sh
/ArialMT*7 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
312.309 218.875 mov
(6) sh
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
326.769 218.875 mov
( ) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
