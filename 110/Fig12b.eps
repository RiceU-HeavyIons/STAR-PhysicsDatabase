%!PS-Adobe-3.1 EPSF-3.0
%%Title: PaperppDeltaPwaveBoltFormFactor6Adobe Illustrator(R) 9.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 10/3/2007
%%CropBox: 0.000000 0.000000 638.085938 424.311523
%%BoundingBox: 0 0 639 425 
%%HiResBoundingBox: 0.000000 0.000000 638.085938 424.311523
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -424.312 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 424.312 ln
638.086 424.312 ln
638.086 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
93.0928 370.243 mo
93.0928 1.24316 ln
637.343 1.24316 ln
637.343 370.243 ln
93.0928 370.243 ln
cp
false op
0 0 0 1 cmyk
s
137.527 345.173 mo
137.527 343.034 135.792 341.298 133.652 341.298 cv
131.514 341.298 129.777 343.034 129.777 345.173 cv
129.777 347.313 131.514 349.048 133.652 349.048 cv
135.792 349.048 137.527 347.313 137.527 345.173 cv
ef
138.843 327.243 mo
138.843 322.243 ln
138.843 314.493 mo
138.843 309.493 ln
s
142.688 318.293 mo
142.688 316.154 140.952 314.418 138.813 314.418 cv
136.674 314.418 134.938 316.154 134.938 318.293 cv
134.938 320.433 136.674 322.168 138.813 322.168 cv
140.952 322.168 142.688 320.433 142.688 318.293 cv
ef
144.343 249.993 mo
144.343 240.243 ln
144.343 232.493 mo
144.343 222.743 ln
s
148.208 236.213 mo
148.208 234.074 146.472 232.338 144.333 232.338 cv
142.193 232.338 140.458 234.074 140.458 236.213 cv
140.458 238.353 142.193 240.088 144.333 240.088 cv
146.472 240.088 148.208 238.353 148.208 236.213 cv
ef
149.593 255.993 mo
149.593 244.243 ln
149.593 236.493 mo
149.593 224.743 ln
s
153.487 240.293 mo
153.487 238.154 151.752 236.418 149.612 236.418 cv
147.474 236.418 145.737 238.154 145.737 240.293 cv
145.737 242.433 147.474 244.168 149.612 244.168 cv
151.752 244.168 153.487 242.433 153.487 240.293 cv
ef
155.093 204.243 mo
155.093 190.743 ln
155.093 182.993 mo
155.093 169.493 ln
s
158.888 187.013 mo
158.888 184.874 157.151 183.138 155.013 183.138 cv
152.874 183.138 151.138 184.874 151.138 187.013 cv
151.138 189.152 152.874 190.888 155.013 190.888 cv
157.151 190.888 158.888 189.152 158.888 187.013 cv
ef
160.593 206.493 mo
160.593 192.243 ln
160.593 184.493 mo
160.593 170.243 ln
s
164.408 188.453 mo
164.408 186.314 162.672 184.578 160.533 184.578 cv
158.394 184.578 156.658 186.314 156.658 188.453 cv
156.658 190.592 158.394 192.328 160.533 192.328 cv
162.672 192.328 164.408 190.592 164.408 188.453 cv
ef
165.843 176.993 mo
165.843 161.993 ln
165.843 154.243 mo
165.843 139.243 ln
s
169.688 157.974 mo
169.688 155.834 167.952 154.099 165.813 154.099 cv
163.674 154.099 161.938 155.834 161.938 157.974 cv
161.938 160.112 163.674 161.849 165.813 161.849 cv
167.952 161.849 169.688 160.112 169.688 157.974 cv
ef
171.343 145.743 mo
171.343 129.993 ln
171.343 122.243 mo
171.343 106.493 ln
s
175.208 126.293 mo
175.208 124.154 173.472 122.418 171.333 122.418 cv
169.193 122.418 167.458 124.154 167.458 126.293 cv
167.458 128.432 169.193 130.168 171.333 130.168 cv
173.472 130.168 175.208 128.432 175.208 126.293 cv
ef
176.593 111.993 mo
176.593 95.7432 ln
176.593 87.9932 mo
176.593 71.7432 ln
s
180.487 91.9727 mo
180.487 89.834 178.752 88.0977 176.612 88.0977 cv
174.474 88.0977 172.737 89.834 172.737 91.9727 cv
172.737 94.1123 174.474 95.8477 176.612 95.8477 cv
178.752 95.8477 180.487 94.1123 180.487 91.9727 cv
ef
182.093 91.9932 mo
182.093 75.4932 ln
182.093 67.4932 mo
182.093 50.9932 ln
s
186.008 71.5732 mo
186.008 69.4336 184.271 67.6982 182.133 67.6982 cv
179.994 67.6982 178.258 69.4336 178.258 71.5732 cv
178.258 73.7119 179.994 75.4482 182.133 75.4482 cv
184.271 75.4482 186.008 73.7119 186.008 71.5732 cv
ef
187.343 70.9932 mo
187.343 53.9932 ln
187.343 46.2432 mo
187.343 29.2432 ln
s
191.288 50.2129 mo
191.288 48.0742 189.552 46.3379 187.413 46.3379 cv
185.273 46.3379 183.538 48.0742 183.538 50.2129 cv
183.538 52.3516 185.273 54.0879 187.413 54.0879 cv
189.552 54.0879 191.288 52.3516 191.288 50.2129 cv
ef
192.843 98.9932 mo
192.843 81.9932 ln
192.843 74.2432 mo
192.843 57.4932 ln
s
196.688 78.293 mo
196.688 76.1543 194.952 74.418 192.813 74.418 cv
190.674 74.418 188.938 76.1543 188.938 78.293 cv
188.938 80.4316 190.674 82.168 192.813 82.168 cv
194.952 82.168 196.688 80.4316 196.688 78.293 cv
ef
198.093 60.7432 mo
198.093 43.7432 ln
198.093 35.9932 mo
198.093 18.7432 ln
s
201.968 39.7725 mo
201.968 37.6338 200.231 35.8975 198.093 35.8975 cv
195.954 35.8975 194.218 37.6338 194.218 39.7725 cv
194.218 41.9121 195.954 43.6475 198.093 43.6475 cv
200.231 43.6475 201.968 41.9121 201.968 39.7725 cv
ef
203.593 115.743 mo
203.593 99.2432 ln
203.593 91.4932 mo
203.593 74.9932 ln
s
207.487 95.2129 mo
207.487 93.0742 205.752 91.3379 203.612 91.3379 cv
201.474 91.3379 199.737 93.0742 199.737 95.2129 cv
199.737 97.3516 201.474 99.0879 203.612 99.0879 cv
205.752 99.0879 207.487 97.3516 207.487 95.2129 cv
ef
209.093 130.493 mo
209.093 114.243 ln
209.093 106.493 mo
209.093 90.2432 ln
s
212.888 110.213 mo
212.888 108.074 211.151 106.338 209.013 106.338 cv
206.874 106.338 205.138 108.074 205.138 110.213 cv
205.138 112.352 206.874 114.088 209.013 114.088 cv
211.151 114.088 212.888 112.352 212.888 110.213 cv
ef
214.343 149.993 mo
214.343 133.993 ln
214.343 126.243 mo
214.343 110.493 ln
s
218.168 130.253 mo
218.168 128.114 216.432 126.378 214.293 126.378 cv
212.153 126.378 210.418 128.114 210.418 130.253 cv
210.418 132.392 212.153 134.128 214.293 134.128 cv
216.432 134.128 218.168 132.392 218.168 130.253 cv
ef
219.843 158.993 mo
219.843 143.493 ln
219.843 135.743 mo
219.843 120.243 ln
s
223.688 139.733 mo
223.688 137.594 221.952 135.858 219.813 135.858 cv
217.674 135.858 215.938 137.594 215.938 139.733 cv
215.938 141.872 217.674 143.608 219.813 143.608 cv
221.952 143.608 223.688 141.872 223.688 139.733 cv
ef
225.093 201.493 mo
225.093 186.493 ln
225.093 178.493 mo
225.093 163.493 ln
s
228.968 182.453 mo
228.968 180.314 227.231 178.578 225.093 178.578 cv
222.954 178.578 221.218 180.314 221.218 182.453 cv
221.218 184.592 222.954 186.328 225.093 186.328 cv
227.231 186.328 228.968 184.592 228.968 182.453 cv
ef
230.593 253.493 mo
230.593 238.993 ln
230.593 231.243 mo
230.593 216.743 ln
s
234.487 235.013 mo
234.487 232.874 232.752 231.138 230.612 231.138 cv
228.474 231.138 226.737 232.874 226.737 235.013 cv
226.737 237.152 228.474 238.888 230.612 238.888 cv
232.752 238.888 234.487 237.152 234.487 235.013 cv
ef
235.843 229.743 mo
235.843 215.243 ln
235.843 207.493 mo
235.843 192.743 ln
s
239.768 211.253 mo
239.768 209.114 238.032 207.378 235.893 207.378 cv
233.754 207.378 232.018 209.114 232.018 211.253 cv
232.018 213.393 233.754 215.128 235.893 215.128 cv
238.032 215.128 239.768 213.393 239.768 211.253 cv
ef
241.343 260.743 mo
241.343 246.743 ln
241.343 238.993 mo
241.343 224.743 ln
s
245.288 242.693 mo
245.288 240.554 243.552 238.818 241.413 238.818 cv
239.273 238.818 237.538 240.554 237.538 242.693 cv
237.538 244.832 239.273 246.568 241.413 246.568 cv
243.552 246.568 245.288 244.832 245.288 242.693 cv
ef
246.593 249.243 mo
246.593 234.993 ln
246.593 227.243 mo
246.593 213.243 ln
s
250.448 231.173 mo
250.448 229.034 248.712 227.298 246.573 227.298 cv
244.434 227.298 242.698 229.034 242.698 231.173 cv
242.698 233.313 244.434 235.048 246.573 235.048 cv
248.712 235.048 250.448 233.313 250.448 231.173 cv
ef
252.093 247.743 mo
252.093 233.993 ln
252.093 225.993 mo
252.093 212.243 ln
s
255.968 229.974 mo
255.968 227.834 254.231 226.099 252.093 226.099 cv
249.954 226.099 248.218 227.834 248.218 229.974 cv
248.218 232.112 249.954 233.849 252.093 233.849 cv
254.231 233.849 255.968 232.112 255.968 229.974 cv
ef
257.593 222.243 mo
257.593 208.243 ln
257.593 200.493 mo
257.593 186.743 ln
s
261.487 204.533 mo
261.487 202.395 259.752 200.658 257.612 200.658 cv
255.474 200.658 253.737 202.395 253.737 204.533 cv
253.737 206.672 255.474 208.408 257.612 208.408 cv
259.752 208.408 261.487 206.672 261.487 204.533 cv
ef
262.843 271.243 mo
262.843 257.993 ln
262.843 250.243 mo
262.843 237.243 ln
s
266.647 254.213 mo
266.647 252.074 264.912 250.338 262.772 250.338 cv
260.634 250.338 258.897 252.074 258.897 254.213 cv
258.897 256.353 260.634 258.088 262.772 258.088 cv
264.912 258.088 266.647 256.353 266.647 254.213 cv
ef
268.343 247.743 mo
268.343 234.493 ln
268.343 226.743 mo
268.343 213.493 ln
s
272.168 230.453 mo
272.168 228.314 270.432 226.578 268.293 226.578 cv
266.153 226.578 264.418 228.314 264.418 230.453 cv
264.418 232.592 266.153 234.328 268.293 234.328 cv
270.432 234.328 272.168 232.592 272.168 230.453 cv
ef
273.593 257.493 mo
273.593 244.493 ln
273.593 236.743 mo
273.593 223.993 ln
s
277.448 240.773 mo
277.448 238.634 275.712 236.898 273.573 236.898 cv
271.434 236.898 269.698 238.634 269.698 240.773 cv
269.698 242.912 271.434 244.648 273.573 244.648 cv
275.712 244.648 277.448 242.912 277.448 240.773 cv
ef
279.093 262.493 mo
279.093 249.993 ln
279.093 242.243 mo
279.093 229.743 ln
s
282.968 246.293 mo
282.968 244.154 281.231 242.418 279.093 242.418 cv
276.954 242.418 275.218 244.154 275.218 246.293 cv
275.218 248.433 276.954 250.168 279.093 250.168 cv
281.231 250.168 282.968 248.433 282.968 246.293 cv
ef
284.343 263.743 mo
284.343 251.743 ln
284.343 243.743 mo
284.343 231.743 ln
s
288.248 247.733 mo
288.248 245.594 286.512 243.858 284.373 243.858 cv
282.233 243.858 280.498 245.594 280.498 247.733 cv
280.498 249.872 282.233 251.608 284.373 251.608 cv
286.512 251.608 288.248 249.872 288.248 247.733 cv
ef
289.843 285.743 mo
289.843 273.993 ln
289.843 266.243 mo
289.843 254.493 ln
s
293.768 270.293 mo
293.768 268.154 292.032 266.418 289.893 266.418 cv
287.754 266.418 286.018 268.154 286.018 270.293 cv
286.018 272.433 287.754 274.168 289.893 274.168 cv
292.032 274.168 293.768 272.433 293.768 270.293 cv
ef
295.093 320.243 mo
295.093 309.243 ln
295.093 301.243 mo
295.093 290.243 ln
s
299.048 305.213 mo
299.048 303.074 297.312 301.338 295.173 301.338 cv
293.034 301.338 291.298 303.074 291.298 305.213 cv
291.298 307.353 293.034 309.088 295.173 309.088 cv
297.312 309.088 299.048 307.353 299.048 305.213 cv
ef
300.593 302.493 mo
300.593 291.493 ln
300.593 283.743 mo
300.593 272.743 ln
s
304.448 287.813 mo
304.448 285.674 302.712 283.938 300.573 283.938 cv
298.434 283.938 296.698 285.674 296.698 287.813 cv
296.698 289.952 298.434 291.688 300.573 291.688 cv
302.712 291.688 304.448 289.952 304.448 287.813 cv
ef
306.093 250.493 mo
306.093 239.243 ln
306.093 231.493 mo
306.093 220.243 ln
s
309.968 235.493 mo
309.968 233.354 308.231 231.618 306.093 231.618 cv
303.954 231.618 302.218 233.354 302.218 235.493 cv
302.218 237.632 303.954 239.368 306.093 239.368 cv
308.231 239.368 309.968 237.632 309.968 235.493 cv
ef
311.343 296.993 mo
311.343 286.493 ln
311.343 278.493 mo
311.343 267.993 ln
s
315.248 282.533 mo
315.248 280.395 313.512 278.658 311.373 278.658 cv
309.233 278.658 307.498 280.395 307.498 282.533 cv
307.498 284.672 309.233 286.408 311.373 286.408 cv
313.512 286.408 315.248 284.672 315.248 282.533 cv
ef
316.843 290.493 mo
316.843 280.243 ln
316.843 272.493 mo
316.843 261.993 ln
s
320.647 276.293 mo
320.647 274.154 318.912 272.418 316.772 272.418 cv
314.634 272.418 312.897 274.154 312.897 276.293 cv
312.897 278.433 314.634 280.168 316.772 280.168 cv
318.912 280.168 320.647 278.433 320.647 276.293 cv
ef
322.093 308.493 mo
322.093 298.493 ln
322.093 290.493 mo
322.093 280.743 ln
s
325.928 294.533 mo
325.928 292.395 324.191 290.658 322.053 290.658 cv
319.914 290.658 318.178 292.395 318.178 294.533 cv
318.178 296.672 319.914 298.408 322.053 298.408 cv
324.191 298.408 325.928 296.672 325.928 294.533 cv
ef
327.593 276.993 mo
327.593 266.993 ln
327.593 259.243 mo
327.593 249.243 ln
s
331.448 262.974 mo
331.448 260.834 329.712 259.099 327.573 259.099 cv
325.434 259.099 323.698 260.834 323.698 262.974 cv
323.698 265.112 325.434 266.849 327.573 266.849 cv
329.712 266.849 331.448 265.112 331.448 262.974 cv
ef
332.843 318.243 mo
332.843 308.993 ln
332.843 301.243 mo
332.843 291.993 ln
s
336.728 305.213 mo
336.728 303.074 334.992 301.338 332.853 301.338 cv
330.714 301.338 328.978 303.074 328.978 305.213 cv
328.978 307.353 330.714 309.088 332.853 309.088 cv
334.992 309.088 336.728 307.353 336.728 305.213 cv
ef
338.343 296.743 mo
338.343 287.493 ln
338.343 279.743 mo
338.343 270.493 ln
s
342.248 283.733 mo
342.248 281.594 340.512 279.858 338.373 279.858 cv
336.233 279.858 334.498 281.594 334.498 283.733 cv
334.498 285.872 336.233 287.608 338.373 287.608 cv
340.512 287.608 342.248 285.872 342.248 283.733 cv
ef
343.593 292.243 mo
343.593 283.243 ln
343.593 275.243 mo
343.593 266.243 ln
s
347.527 279.173 mo
347.527 277.034 345.792 275.298 343.652 275.298 cv
341.514 275.298 339.777 277.034 339.777 279.173 cv
339.777 281.313 341.514 283.048 343.652 283.048 cv
345.792 283.048 347.527 281.313 347.527 279.173 cv
ef
349.093 312.243 mo
349.093 303.743 ln
349.093 295.993 mo
349.093 287.243 ln
s
353.048 299.813 mo
353.048 297.674 351.312 295.938 349.173 295.938 cv
347.034 295.938 345.298 297.674 345.298 299.813 cv
345.298 301.952 347.034 303.688 349.173 303.688 cv
351.312 303.688 353.048 301.952 353.048 299.813 cv
ef
354.593 294.993 mo
354.593 286.243 ln
354.593 278.493 mo
354.593 269.993 ln
s
358.448 282.533 mo
358.448 280.395 356.712 278.658 354.573 278.658 cv
352.434 278.658 350.698 280.395 350.698 282.533 cv
350.698 284.672 352.434 286.408 354.573 286.408 cv
356.712 286.408 358.448 284.672 358.448 282.533 cv
ef
359.843 297.743 mo
359.843 289.493 ln
359.843 281.743 mo
359.843 273.493 ln
s
363.728 285.773 mo
363.728 283.634 361.992 281.898 359.853 281.898 cv
357.714 281.898 355.978 283.634 355.978 285.773 cv
355.978 287.912 357.714 289.648 359.853 289.648 cv
361.992 289.648 363.728 287.912 363.728 285.773 cv
ef
365.343 330.243 mo
365.343 322.493 ln
365.343 314.743 mo
365.343 306.993 ln
s
369.248 318.533 mo
369.248 316.395 367.512 314.658 365.373 314.658 cv
363.233 314.658 361.498 316.395 361.498 318.533 cv
361.498 320.672 363.233 322.408 365.373 322.408 cv
367.512 322.408 369.248 320.672 369.248 318.533 cv
ef
370.593 322.993 mo
370.593 315.493 ln
370.593 307.493 mo
370.593 299.993 ln
s
374.408 311.573 mo
374.408 309.435 372.672 307.698 370.533 307.698 cv
368.394 307.698 366.658 309.435 366.658 311.573 cv
366.658 313.712 368.394 315.448 370.533 315.448 cv
372.672 315.448 374.408 313.712 374.408 311.573 cv
ef
376.093 290.493 mo
376.093 282.743 ln
376.093 274.993 mo
376.093 267.243 ln
s
379.928 278.693 mo
379.928 276.554 378.191 274.818 376.053 274.818 cv
373.914 274.818 372.178 276.554 372.178 278.693 cv
372.178 280.832 373.914 282.568 376.053 282.568 cv
378.191 282.568 379.928 280.832 379.928 278.693 cv
ef
381.343 324.743 mo
381.343 317.493 ln
381.343 309.743 mo
381.343 302.743 ln
s
385.208 313.733 mo
385.208 311.594 383.472 309.858 381.333 309.858 cv
379.193 309.858 377.458 311.594 377.458 313.733 cv
377.458 315.872 379.193 317.608 381.333 317.608 cv
383.472 317.608 385.208 315.872 385.208 313.733 cv
ef
386.843 327.743 mo
386.843 320.993 ln
386.843 313.243 mo
386.843 306.493 ln
s
390.728 317.213 mo
390.728 315.074 388.992 313.338 386.853 313.338 cv
384.714 313.338 382.978 315.074 382.978 317.213 cv
382.978 319.353 384.714 321.088 386.853 321.088 cv
388.992 321.088 390.728 319.353 390.728 317.213 cv
ef
392.093 334.743 mo
392.093 328.243 ln
392.093 320.493 mo
392.093 313.993 ln
s
396.008 324.533 mo
396.008 322.395 394.271 320.658 392.133 320.658 cv
389.994 320.658 388.258 322.395 388.258 324.533 cv
388.258 326.672 389.994 328.408 392.133 328.408 cv
394.271 328.408 396.008 326.672 396.008 324.533 cv
ef
397.593 311.993 mo
397.593 305.493 ln
397.593 297.743 mo
397.593 291.243 ln
s
401.527 301.493 mo
401.527 299.354 399.792 297.618 397.652 297.618 cv
395.514 297.618 393.777 299.354 393.777 301.493 cv
393.777 303.632 395.514 305.368 397.652 305.368 cv
399.792 305.368 401.527 303.632 401.527 301.493 cv
ef
403.093 315.493 mo
403.093 309.243 ln
403.093 301.493 mo
403.093 295.243 ln
s
407.048 305.573 mo
407.048 303.435 405.312 301.698 403.173 301.698 cv
401.033 301.698 399.298 303.435 399.298 305.573 cv
399.298 307.712 401.033 309.448 403.173 309.448 cv
405.312 309.448 407.048 307.712 407.048 305.573 cv
ef
408.343 316.743 mo
408.343 310.993 ln
408.343 303.243 mo
408.343 297.243 ln
s
412.208 307.013 mo
412.208 304.874 410.472 303.138 408.333 303.138 cv
406.193 303.138 404.458 304.874 404.458 307.013 cv
404.458 309.152 406.193 310.888 408.333 310.888 cv
410.472 310.888 412.208 309.152 412.208 307.013 cv
ef
413.843 312.243 mo
413.843 306.493 ln
413.843 298.743 mo
413.843 292.993 ln
s
417.728 302.693 mo
417.728 300.554 415.991 298.818 413.853 298.818 cv
411.714 298.818 409.978 300.554 409.978 302.693 cv
409.978 304.832 411.714 306.568 413.853 306.568 cv
415.991 306.568 417.728 304.832 417.728 302.693 cv
ef
419.093 323.743 mo
419.093 318.493 ln
419.093 310.743 mo
419.093 305.243 ln
s
422.888 314.453 mo
422.888 312.314 421.151 310.578 419.013 310.578 cv
416.874 310.578 415.138 312.314 415.138 314.453 cv
415.138 316.592 416.874 318.328 419.013 318.328 cv
421.151 318.328 422.888 316.592 422.888 314.453 cv
ef
424.593 337.243 mo
424.593 332.243 ln
424.593 324.493 mo
424.593 319.743 ln
s
428.407 328.493 mo
428.407 326.354 426.672 324.618 424.532 324.618 cv
422.394 324.618 420.657 326.354 420.657 328.493 cv
420.657 330.632 422.394 332.368 424.532 332.368 cv
426.672 332.368 428.407 330.632 428.407 328.493 cv
ef
429.843 325.493 mo
429.843 320.743 ln
429.843 312.993 mo
429.843 308.243 ln
s
433.688 316.974 mo
433.688 314.834 431.951 313.099 429.813 313.099 cv
427.674 313.099 425.938 314.834 425.938 316.974 cv
425.938 319.112 427.674 320.849 429.813 320.849 cv
431.951 320.849 433.688 319.112 433.688 316.974 cv
ef
435.343 328.243 mo
435.343 323.993 ln
435.343 315.993 mo
435.343 311.493 ln
s
439.208 319.974 mo
439.208 317.834 437.472 316.099 435.333 316.099 cv
433.193 316.099 431.458 317.834 431.458 319.974 cv
431.458 322.112 433.193 323.849 435.333 323.849 cv
437.472 323.849 439.208 322.112 439.208 319.974 cv
ef
440.593 332.993 mo
440.593 328.993 ln
440.593 320.993 mo
440.593 316.993 ln
s
444.487 325.013 mo
444.487 322.874 442.752 321.138 440.612 321.138 cv
438.474 321.138 436.737 322.874 436.737 325.013 cv
436.737 327.152 438.474 328.888 440.612 328.888 cv
442.752 328.888 444.487 327.152 444.487 325.013 cv
ef
446.093 353.493 mo
446.093 350.243 ln
446.093 342.493 mo
446.093 338.993 ln
s
450.008 346.253 mo
450.008 344.114 448.271 342.378 446.133 342.378 cv
443.993 342.378 442.258 344.114 442.258 346.253 cv
442.258 348.393 443.993 350.128 446.133 350.128 cv
448.271 350.128 450.008 348.393 450.008 346.253 cv
ef
451.593 337.493 mo
451.593 333.993 ln
451.593 325.993 mo
451.593 322.743 ln
s
455.527 330.053 mo
455.527 327.914 453.792 326.178 451.652 326.178 cv
449.514 326.178 447.777 327.914 447.777 330.053 cv
447.777 332.192 449.514 333.928 451.652 333.928 cv
453.792 333.928 455.527 332.192 455.527 330.053 cv
ef
456.843 340.243 mo
456.843 336.993 ln
456.843 329.243 mo
456.843 325.993 ln
s
460.688 332.934 mo
460.688 330.794 458.951 329.059 456.813 329.059 cv
454.674 329.059 452.938 330.794 452.938 332.934 cv
452.938 335.072 454.674 336.809 456.813 336.809 cv
458.951 336.809 460.688 335.072 460.688 332.934 cv
ef
462.343 336.493 mo
462.343 333.493 ln
462.343 325.743 mo
462.343 322.743 ln
s
466.208 329.813 mo
466.208 327.674 464.472 325.938 462.333 325.938 cv
460.193 325.938 458.458 327.674 458.458 329.813 cv
458.458 331.952 460.193 333.688 462.333 333.688 cv
464.472 333.688 466.208 331.952 466.208 329.813 cv
ef
467.593 342.493 mo
467.593 339.993 ln
467.593 331.993 mo
467.593 329.493 ln
s
471.487 336.053 mo
471.487 333.914 469.752 332.178 467.612 332.178 cv
465.474 332.178 463.737 333.914 463.737 336.053 cv
463.737 338.192 465.474 339.928 467.612 339.928 cv
469.752 339.928 471.487 338.192 471.487 336.053 cv
ef
473.093 332.993 mo
473.093 330.493 ln
473.093 322.743 mo
473.093 319.993 ln
s
476.888 326.453 mo
476.888 324.314 475.151 322.578 473.013 322.578 cv
470.874 322.578 469.138 324.314 469.138 326.453 cv
469.138 328.592 470.874 330.328 473.013 330.328 cv
475.151 330.328 476.888 328.592 476.888 326.453 cv
ef
478.343 342.493 mo
478.343 340.243 ln
478.343 332.493 mo
478.343 330.493 ln
s
482.168 336.533 mo
482.168 334.395 480.432 332.658 478.293 332.658 cv
476.153 332.658 474.418 334.395 474.418 336.533 cv
474.418 338.672 476.153 340.408 478.293 340.408 cv
480.432 340.408 482.168 338.672 482.168 336.533 cv
ef
483.843 338.243 mo
483.843 336.243 ln
483.843 328.243 mo
483.843 326.243 ln
s
487.688 332.213 mo
487.688 330.074 485.951 328.338 483.813 328.338 cv
481.674 328.338 479.938 330.074 479.938 332.213 cv
479.938 334.353 481.674 336.088 483.813 336.088 cv
485.951 336.088 487.688 334.353 487.688 332.213 cv
ef
489.093 343.243 mo
489.093 341.493 ln
489.093 333.743 mo
489.093 331.993 ln
s
492.968 337.733 mo
492.968 335.594 491.231 333.858 489.093 333.858 cv
486.953 333.858 485.218 335.594 485.218 337.733 cv
485.218 339.872 486.953 341.608 489.093 341.608 cv
491.231 341.608 492.968 339.872 492.968 337.733 cv
ef
494.593 345.993 mo
494.593 344.493 ln
494.593 336.743 mo
494.593 335.493 ln
s
498.487 340.733 mo
498.487 338.594 496.752 336.858 494.612 336.858 cv
492.474 336.858 490.737 338.594 490.737 340.733 cv
490.737 342.872 492.474 344.608 494.612 344.608 cv
496.752 344.608 498.487 342.872 498.487 340.733 cv
ef
499.843 345.743 mo
499.843 344.743 ln
499.843 336.993 mo
499.843 335.993 ln
s
503.768 340.733 mo
503.768 338.594 502.031 336.858 499.893 336.858 cv
497.754 336.858 496.018 338.594 496.018 340.733 cv
496.018 342.872 497.754 344.608 499.893 344.608 cv
502.031 344.608 503.768 342.872 503.768 340.733 cv
ef
505.343 340.993 mo
505.343 339.993 ln
505.343 332.243 mo
505.343 331.243 ln
s
509.287 336.293 mo
509.287 334.154 507.552 332.418 505.412 332.418 cv
503.273 332.418 501.537 334.154 501.537 336.293 cv
501.537 338.433 503.273 340.168 505.412 340.168 cv
507.552 340.168 509.287 338.433 509.287 336.293 cv
ef
510.843 340.493 mo
510.843 339.743 ln
510.843 331.993 mo
510.843 331.243 ln
s
514.688 335.813 mo
514.688 333.674 512.951 331.938 510.813 331.938 cv
508.674 331.938 506.938 333.674 506.938 335.813 cv
506.938 337.952 508.674 339.688 510.813 339.688 cv
512.951 339.688 514.688 337.952 514.688 335.813 cv
ef
516.093 344.243 mo
516.093 343.743 ln
516.093 335.993 mo
516.093 335.493 ln
s
519.968 340.013 mo
519.968 337.874 518.231 336.138 516.093 336.138 cv
513.953 336.138 512.218 337.874 512.218 340.013 cv
512.218 342.152 513.953 343.888 516.093 343.888 cv
518.231 343.888 519.968 342.152 519.968 340.013 cv
ef
521.593 347.493 mo
521.593 339.743 mo
s
525.487 343.493 mo
525.487 341.354 523.752 339.618 521.612 339.618 cv
519.474 339.618 517.737 341.354 517.737 343.493 cv
517.737 345.632 519.474 347.368 521.612 347.368 cv
523.752 347.368 525.487 345.632 525.487 343.493 cv
ef
530.647 341.573 mo
530.647 339.435 528.911 337.698 526.772 337.698 cv
524.634 337.698 522.897 339.435 522.897 341.573 cv
522.897 343.712 524.634 345.448 526.772 345.448 cv
528.911 345.448 530.647 343.712 530.647 341.573 cv
ef
536.168 339.773 mo
536.168 337.634 534.432 335.898 532.293 335.898 cv
530.153 335.898 528.418 337.634 528.418 339.773 cv
528.418 341.912 530.153 343.648 532.293 343.648 cv
534.432 343.648 536.168 341.912 536.168 339.773 cv
ef
541.447 340.733 mo
541.447 338.594 539.712 336.858 537.572 336.858 cv
535.434 336.858 533.697 338.594 533.697 340.733 cv
533.697 342.872 535.434 344.608 537.572 344.608 cv
539.712 344.608 541.447 342.872 541.447 340.733 cv
ef
546.968 343.974 mo
546.968 341.834 545.231 340.099 543.093 340.099 cv
540.953 340.099 539.218 341.834 539.218 343.974 cv
539.218 346.112 540.953 347.849 543.093 347.849 cv
545.231 347.849 546.968 346.112 546.968 343.974 cv
ef
552.248 348.773 mo
552.248 346.634 550.512 344.898 548.373 344.898 cv
546.233 344.898 544.498 346.634 544.498 348.773 cv
544.498 350.912 546.233 352.648 548.373 352.648 cv
550.512 352.648 552.248 350.912 552.248 348.773 cv
ef
557.768 342.293 mo
557.768 340.154 556.031 338.418 553.893 338.418 cv
551.754 338.418 550.018 340.154 550.018 342.293 cv
550.018 344.433 551.754 346.168 553.893 346.168 cv
556.031 346.168 557.768 344.433 557.768 342.293 cv
ef
563.288 346.974 mo
563.288 344.834 561.552 343.099 559.413 343.099 cv
557.273 343.099 555.538 344.834 555.538 346.974 cv
555.538 349.112 557.273 350.849 559.413 350.849 cv
561.552 350.849 563.288 349.112 563.288 346.974 cv
ef
568.447 345.773 mo
568.447 343.634 566.712 341.898 564.572 341.898 cv
562.434 341.898 560.697 343.634 560.697 345.773 cv
560.697 347.912 562.434 349.648 564.572 349.648 cv
566.712 349.648 568.447 347.912 568.447 345.773 cv
ef
573.968 344.934 mo
573.968 342.794 572.231 341.059 570.093 341.059 cv
567.953 341.059 566.218 342.794 566.218 344.934 cv
566.218 347.072 567.953 348.809 570.093 348.809 cv
572.231 348.809 573.968 347.072 573.968 344.934 cv
ef
579.248 344.213 mo
579.248 342.074 577.512 340.338 575.373 340.338 cv
573.233 340.338 571.498 342.074 571.498 344.213 cv
571.498 346.353 573.233 348.088 575.373 348.088 cv
577.512 348.088 579.248 346.353 579.248 344.213 cv
ef
584.647 344.453 mo
584.647 342.314 582.911 340.578 580.772 340.578 cv
578.634 340.578 576.897 342.314 576.897 344.453 cv
576.897 346.592 578.634 348.328 580.772 348.328 cv
582.911 348.328 584.647 346.592 584.647 344.453 cv
ef
589.928 345.173 mo
589.928 343.034 588.191 341.298 586.053 341.298 cv
583.914 341.298 582.178 343.034 582.178 345.173 cv
582.178 347.313 583.914 349.048 586.053 349.048 cv
588.191 349.048 589.928 347.313 589.928 345.173 cv
ef
595.447 346.974 mo
595.447 344.834 593.712 343.099 591.572 343.099 cv
589.434 343.099 587.697 344.834 587.697 346.974 cv
587.697 349.112 589.434 350.849 591.572 350.849 cv
593.712 350.849 595.447 349.112 595.447 346.974 cv
ef
600.728 347.213 mo
600.728 345.074 598.991 343.338 596.853 343.338 cv
594.714 343.338 592.978 345.074 592.978 347.213 cv
592.978 349.353 594.714 351.088 596.853 351.088 cv
598.991 351.088 600.728 349.353 600.728 347.213 cv
ef
606.248 347.573 mo
606.248 345.435 604.512 343.698 602.373 343.698 cv
600.233 343.698 598.498 345.435 598.498 347.573 cv
598.498 349.712 600.233 351.448 602.373 351.448 cv
604.512 351.448 606.248 349.712 606.248 347.573 cv
ef
611.768 347.573 mo
611.768 345.435 610.031 343.698 607.893 343.698 cv
605.754 343.698 604.018 345.435 604.018 347.573 cv
604.018 349.712 605.754 351.448 607.893 351.448 cv
610.031 351.448 611.768 349.712 611.768 347.573 cv
ef
617.048 346.974 mo
617.048 344.834 615.312 343.099 613.173 343.099 cv
611.033 343.099 609.298 344.834 609.298 346.974 cv
609.298 349.112 611.033 350.849 613.173 350.849 cv
615.312 350.849 617.048 349.112 617.048 346.974 cv
ef
2.25 lw
137.593 335.493 mo
142.593 310.243 ln
147.593 268.993 ln
152.593 222.743 ln
157.593 180.243 ln
162.593 144.993 ln
167.343 117.743 ln
172.343 97.7432 ln
177.343 84.2432 ln
182.343 76.4932 ln
187.343 73.7432 ln
192.343 75.7432 ln
197.343 82.2432 ln
202.343 92.9932 ln
207.093 106.743 ln
212.093 123.243 ln
217.093 140.993 ln
222.093 158.993 ln
227.093 175.743 ln
232.093 192.493 ln
237.093 206.493 ln
242.093 218.993 ln
246.843 229.993 ln
251.843 238.993 ln
256.843 246.493 ln
261.843 252.493 ln
266.843 257.243 ln
271.843 260.743 ln
276.843 263.743 ln
281.843 265.993 ln
286.593 267.993 ln
291.593 269.493 ln
296.593 270.743 ln
301.593 271.993 ln
306.593 273.243 ln
311.593 274.243 ln
316.593 275.493 ln
321.343 276.743 ln
326.343 278.243 ln
331.343 279.743 ln
336.343 281.243 ln
341.343 282.993 ln
346.343 284.993 ln
351.343 286.993 ln
356.343 288.993 ln
361.093 291.243 ln
366.093 293.743 ln
371.093 295.993 ln
376.093 298.493 ln
381.093 300.993 ln
381.093 300.993 mo
386.093 303.493 ln
391.093 305.993 ln
396.093 308.493 ln
400.843 310.993 ln
405.843 313.493 ln
410.843 315.743 ln
415.843 318.243 ln
420.843 320.493 ln
425.843 322.493 ln
430.843 324.743 ln
435.843 326.493 ln
440.593 328.493 ln
445.593 330.243 ln
450.593 331.993 ln
455.593 333.493 ln
460.593 334.993 ln
465.593 336.243 ln
470.593 337.493 ln
475.593 338.493 ln
480.343 339.493 ln
485.343 340.493 ln
490.343 341.243 ln
495.343 341.993 ln
500.343 342.743 ln
505.343 343.493 ln
510.343 343.993 ln
515.343 344.493 ln
520.093 344.743 ln
525.093 345.243 ln
530.093 345.493 ln
535.093 345.743 ln
540.093 345.993 ln
545.093 346.243 ln
550.093 346.493 ln
555.093 346.493 ln
559.843 346.743 ln
564.843 346.743 ln
569.843 346.993 ln
579.843 346.993 ln
584.843 347.243 ln
624.593 347.243 ln
624.593 347.243 mo
629.593 347.243 ln
s
0.75 lw
93.0928 370.243 mo
637.343 370.243 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
41{/.notdef}repeat /parenright 214{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
631.093 417.493 mov
(\)) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/space 
<10bf317079c7734bf7> ND 
end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
32{/.notdef}repeat /space 223{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
621.343 409.743 mov
( ) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
620.604 409.743 mov
(2) sh
restore_ctm
93.0928 359.243 mo
93.0928 370.243 ln
120.093 364.743 mo
120.093 370.243 ln
147.093 364.743 mo
147.093 370.243 ln
173.843 364.743 mo
173.843 370.243 ln
200.843 359.243 mo
200.843 370.243 ln
227.843 364.743 mo
227.843 370.243 ln
254.843 364.743 mo
254.843 370.243 ln
281.843 364.743 mo
281.843 370.243 ln
308.593 359.243 mo
308.593 370.243 ln
335.593 364.743 mo
335.593 370.243 ln
362.593 364.743 mo
362.593 370.243 ln
389.593 364.743 mo
389.593 370.243 ln
416.343 359.243 mo
416.343 370.243 ln
443.343 364.743 mo
443.343 370.243 ln
470.343 364.743 mo
470.343 370.243 ln
497.343 364.743 mo
497.343 370.243 ln
524.093 359.243 mo
524.093 370.243 ln
551.093 364.743 mo
551.093 370.243 ln
578.093 364.743 mo
578.093 370.243 ln
605.093 364.743 mo
605.093 370.243 ln
632.093 359.243 mo
632.093 370.243 ln
632.093 359.243 mo
632.093 370.243 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e3088328e93e3f86c5266dab4a
4b6a0dbbd499ac2f08f52498a1230ac74b9126578260e72bf920c6626e18
e52befca2ad4c5c494a757a5861d225d61833e7b6db104708e0fcf59a03e
ddf773c2fe0a4faea092dc7a4d01275005fb3564e1d1f76f67c0ded9002e
e506fbb65143c90d6526880b9b4967a1233028aa9e8c3e30f59ec7f29cd2
713cffb71673b8ee9c01e77581750db787f4754cdac76007b210e32a2dfc
77791af6ea67a232e72999312d> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638bbfe80126114fe37407e2e312c7bcbd2c
1b7b9e7fac2817224e19> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e231374dce1d715d27566dcf
115e95280405ef7103dd8183790f381980b4f25c32c305> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3490b93b478f689beebddc801
f9ab05d95370b6f2d5e4eaf0e05d2c29f4d91b00084ec9f87aa58fda4ad7
8d5d66fcc7e8afb13d634e9fe58c768d42> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
/v 
<10bf31706ae07dd17dfc9e3ad4fb8a8843b0ccd3bf37159e4d997ae7db46
1605af60e723de30a8f7915cee06ac348ee0e2ad17e20e> ND 
end end
end
/ArialMT findfont /Encoding get
dup 40 /parenleft put
dup 47 /slash put
dup 71 /G put
dup 73 /I put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
40{/.notdef}repeat /parenleft 6{/.notdef}repeat /slash 23{/.notdef}repeat /G /.notdef /I 
3{/.notdef}repeat /M 8{/.notdef}repeat /V 10{/.notdef}repeat /a /.notdef /c 
/.notdef /e 3{/.notdef}repeat /i 4{/.notdef}repeat /n 3{/.notdef}repeat /r 
/s /t /.notdef /v 137{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
411.593 417.493 mov
(Invariant) sh
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
492.137 417.493 mov
( ) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
497.972 417.493 mov
(Mass) sh
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
548.144 417.493 mov
( ) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
553.979 417.493 mov
(\(GeV/c) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end end
end
/ArialMT findfont /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
49{/.notdef}repeat /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
88.5928 391.243 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
187.343 391.243 mov
(1) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
46{/.notdef}repeat /period 209{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
199.022 391.243 mov
(.) sh
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
204.856 391.243 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
295.843 391.243 mov
(1) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
307.522 391.243 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
313.356 391.243 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
403.343 391.243 mov
(1) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
415.022 391.243 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/six 
<10bf3170435d0d4425184fc061c7faa8dc6baee8c868da453cb6a6f891b2
5354e14cb1bc5e0a0fcae04743a9daec5483058e0dde89957524c8915b19
25146f588ef5a70cf81e2e4fc7890fddf0f5d4c16f77c4469f58479cdd1b
49f5c68eada3087814223d9b5aa8284ce9770f7175297744c20f41a48dc8
d286517deb8893f3230571eaf9ea1ba0abf787d646e1631373082ff4df40
4c74838bb86fd789e63cac0da4dceabebd4d0fc0472fd6a9ca90e64e3c08
8853c020aae52cb442800bb6081c0fefcb0a206f46cf4ec1e25c13c94cbb
330a8f2762> ND 
end end
end
/ArialMT findfont /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
54{/.notdef}repeat /six 201{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
420.856 391.243 mov
(6) sh
restore_ctm
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
510.843 391.243 mov
(1) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
522.522 391.243 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6f92fe7d0382cbfbcdc7b1ae90f5804442d3ad6d5e65
ea646fb35cdd7e11033e2adda681e7c859039849d6dc5ed2ddeff6a08225
d8f51551f3de1fe8a008c3292192037d710bd142b0870ce031e718da3ef6
d3433e72ed0f460e2a4d68b080691bc3e7e1f307fb1e0e53bcb7db60f146
7b82fe22e2d41fbef278c3fdcb5b6d458b0439abc5768f2ce7c9570fa1d6
c4be1808a48200bf465a45f457def4538c8fb72d6cd74c82c40277b5b6e7
fea6be29486ac098b8cb486a6ef4b50bb3d786b334b9913c9609ad75ea2f
ed8e7505ac0f1bb96c923835d10b3ab9> ND 
end end
end
/ArialMT findfont /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
56{/.notdef}repeat /eight 199{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
528.356 391.243 mov
(8) sh
restore_ctm
93.0928 370.243 mo
93.0928 1.24316 ln
s
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
626.343 391.243 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
28.75 6.99316 mov
(\)) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 16.7432 mov
( ) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 15.4824 mov
(2) sh
restore_ctm
109.343 347.493 mo
93.0928 347.493 ln
101.343 331.493 mo
93.0928 331.493 ln
101.343 315.243 mo
93.0928 315.243 ln
101.343 299.243 mo
93.0928 299.243 ln
109.343 283.243 mo
93.0928 283.243 ln
101.343 267.243 mo
93.0928 267.243 ln
101.343 251.243 mo
93.0928 251.243 ln
101.343 235.243 mo
93.0928 235.243 ln
109.343 219.243 mo
93.0928 219.243 ln
101.343 203.243 mo
93.0928 203.243 ln
101.343 187.243 mo
93.0928 187.243 ln
101.343 171.243 mo
93.0928 171.243 ln
109.343 155.243 mo
93.0928 155.243 ln
101.343 139.243 mo
93.0928 139.243 ln
101.343 123.243 mo
93.0928 123.243 ln
101.343 107.243 mo
93.0928 107.243 ln
109.343 91.2432 mo
93.0928 91.2432 ln
101.343 75.2432 mo
93.0928 75.2432 ln
101.343 59.2432 mo
93.0928 59.2432 ln
101.343 42.9932 mo
93.0928 42.9932 ln
109.343 26.9932 mo
93.0928 26.9932 ln
109.343 347.493 mo
93.0928 347.493 ln
101.343 363.493 mo
93.0928 363.493 ln
109.343 26.9932 mo
93.0928 26.9932 ln
101.343 10.9932 mo
93.0928 10.9932 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153f04f4f888
a9793af1cdd76cf42c98e3b7c6efff30aedf23874b961a5a7d8352571859
f2ee15399c0c2d0f0e789c04eb8ab69e8694b49d1cdc36041f81732689ae
c7de70103ef45c5aac1fa0ded9e2cebee882d4e31e26d9203d2435459b9d
1e92bd9bcf321ca456fc2c8b25bf9b414bd39bc63d4e221a0d6aa6fccdc3
c8a808e6ed39733b2c7e47> ND 
/o 
<10bf31705e921373942a1df751ebc6dc1f8ba1849e5d0b813201a0c14072
56efd5ac73b2cc94d73ea025d660f576b0dc46e6510eb657538743c037a9
ef3f1df5fa8600ba31cfa9fb018633830dedfb133aaa4477d4caef3c149d
68283dde65fde31ff05fe29c87c2dcf980686664a1ba1e9317bc4e3671a3
dde8af03d654a3b9278e18f5d604ca7d7f> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 48 /zero put
dup 67 /C put
dup 111 /o put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
48{/.notdef}repeat /zero 18{/.notdef}repeat /C 43{/.notdef}repeat /o 5{/.notdef}repeat /u 
138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
28.75 185.243 mov
(Cou) sh
/ArialMT*4 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
28.75 146.719 mov
(nts/\() sh
/ArialMT*3 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
28.75 105.878 mov
(2) sh
/ArialMT*10 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
28.75 94.1987 mov
(0) sh
/ArialMT*2 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
28.75 82.5195 mov
( ) sh
/ArialMT*4 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
28.75 76.6851 mov
(MeV/c) sh
restore_ctm
save_ctm
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
65 354.993 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5 290.493 mov
(2) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
57.1792 290.493 mov
(00) sh
restore_ctm
save_ctm
/ArialMT*7 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5 226.743 mov
(4) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
57.1792 226.743 mov
(00) sh
restore_ctm
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5 162.243 mov
(6) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
57.1792 162.243 mov
(00) sh
restore_ctm
save_ctm
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.5 98.7432 mov
(8) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
57.1792 98.7432 mov
(00) sh
restore_ctm
2.25 lw
[3 3 ] 0 dsh
95.8428 344.993 mo
101.343 344.493 ln
106.843 343.993 ln
112.093 343.493 ln
117.593 342.743 ln
123.093 341.993 ln
128.593 340.993 ln
133.843 340.243 ln
139.343 338.993 ln
144.843 337.993 ln
150.343 336.743 ln
155.593 335.243 ln
161.093 333.743 ln
166.593 331.993 ln
172.093 330.243 ln
177.593 328.243 ln
182.843 326.243 ln
188.343 323.993 ln
193.843 321.743 ln
199.343 319.493 ln
204.593 316.993 ln
210.093 314.243 ln
215.593 311.743 ln
221.093 308.993 ln
226.343 306.493 ln
231.843 303.743 ln
237.343 300.993 ln
242.843 298.493 ln
248.343 295.993 ln
253.593 293.493 ln
259.093 291.243 ln
264.593 289.243 ln
270.093 287.243 ln
275.343 285.493 ln
280.843 283.993 ln
286.343 282.743 ln
291.843 281.743 ln
297.343 280.993 ln
302.593 280.493 ln
308.093 280.243 ln
313.593 280.493 ln
319.093 280.743 ln
324.343 281.493 ln
329.843 282.493 ln
335.343 283.743 ln
340.843 285.243 ln
346.093 286.743 ln
351.593 288.743 ln
357.093 290.743 ln
362.593 292.993 ln
362.593 292.993 mo
368.093 295.493 ln
373.343 297.993 ln
378.843 300.493 ln
384.343 303.243 ln
389.843 305.743 ln
395.093 308.493 ln
400.593 311.243 ln
406.093 313.743 ln
411.593 316.493 ln
416.843 318.993 ln
422.343 321.243 ln
427.843 323.493 ln
433.343 325.743 ln
438.843 327.743 ln
444.093 329.743 ln
449.593 331.743 ln
455.093 333.243 ln
460.593 334.993 ln
465.843 336.243 ln
471.343 337.743 ln
476.843 338.743 ln
482.343 339.993 ln
487.593 340.993 ln
493.093 341.743 ln
498.593 342.493 ln
504.093 343.243 ln
509.593 343.743 ln
514.843 344.493 ln
520.343 344.743 ln
525.843 345.243 ln
531.343 345.493 ln
536.593 345.993 ln
542.093 346.243 ln
547.593 346.243 ln
553.093 346.493 ln
558.343 346.743 ln
563.843 346.743 ln
569.343 346.993 ln
580.343 346.993 ln
585.593 347.243 ln
629.093 347.243 ln
629.093 347.243 mo
634.593 347.243 ln
s
save_ctm
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
35.75 34.2432 mov
(1) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.4292 34.2432 mov
(000) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
43{/.notdef}repeat /plus 212{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
397.843 62.4932 mov
(++) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/version (001.008) def
/FullName (Symbol) def
/FamilyName (Symbol) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Symbol def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -180 -293 1090 1010 } def
/XUID [6 42996 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECAB94698AF
13A4485757691763CAA8023293C6742E3899EDC5BE94ADFC42A0C0027CA6214B
7F8D5F616C6C2330D450A707B93BDD387F8829CFEF02A72B512D93C14DC1F17C
3175B113E267D8BD6A1447D88A441810C35BAC725EC0017275261A74EB5067CD
9834D1E000DA4929128802A4406C63EAAE5098C3B673FB571CE4AA66227384BC
D1F9516217661F446651CBD433BDBB210B8CB1C0AE7FE1EE2E21077BC11F9270
69E30D1E3AF26358279873C2B62D3AA5368EC87D6A567E789674A8EEED694D74
E8AE78AD599DE625132DC2B96E4C1518B04F598401F1080D43B1530D7089A208
39AB479C8D65D6823FDE8C7085D829EBF9BFD791C95C71C65AE4EC2A01CBA5FA
992ED2E4C180E84DC6E14861844CD132B73A4AA658AD9BE20B35514AC67BF58E
E4587AAC0BA16313B83C2C222F018E737313614351D1EFBF36BD83A38ED9DB6B
D6191BB6160AAC9612D574C3028C8C52B52925658ED342DA958D4100DABE516F
4733BF895741A1EA34A4707864910DD7E8EFE407898B7BCC27AC062D1BA4F11A
73F4342E2D8EF6E101C80AABBFD820974B1F3CC33D070E3C0CF97490AE3CCF18
630A6E2BD4007310EF65E793C445E48BC171043FCE380624354787BC936241D0
3306C33061D7EDD92FAC67F671457CD23F6931B947E97BDA7754E5F56D611220
5C4E82C2815584BF47A854236D460FE90AEE8B7FC419C26F68EB007CE6ED0053
856FABF9D7B6E5E6D910A77FDC4019BC55466E90A87476719B3A8CE5B38E4592
40DEDD91E229FB5784ED9E5A05747D938589B5554723ABC8F7F565F9F7AE6BCF
106F2212EAA54EE7DDD86863B30DFFB84D259A8FD24352AD855813AA02791C07
3824963AA973AEB925BCB75D7B8B65680FFF2B750A7939CBD880C8467D1104DF
9F15B0A8B2E43C7F445BA84DDD777444FD9E2416992213E6D0A936603D381689
9E5E55FFC73083C43CA8A15EAD3BEE4D6AFAD49938AC763CA6CEFF4F499F6EB0
303C5FD86A6DA9601B64F321DE385311C18C43E18842F9D2B0445C853100194C
0EB4F0E368EF73081F98B787C0FD723F3DC0FFF2116676894617D05260524DFA
1C1424BBA73EEF75D8DBD86066850389ABCFEBF01C39C364A46182E47BEB9F55
679298A5A04190FF534218EAB65BEEFD74CF10AB8678EF1F6D0571C160A9603A
CDD271F08AD4812C1D7BD5CCE2DAE0170DD34BEB8CEFCD53644795C872A14E50
D6AAD6F1B8D7189729AE7ADFDCB5DF991B245C81CE2308BCC82D48707AFFA4C9
A4C87D5DC67236E08C7B144AA696669DC25D82589F7BBC7ECEFD474AB108069A
375F2B6B927C6D4C970478E059126CFAAFAE963C89B348FA0CEE452DBAB4A8AA
DC47F03B0A479DA258DE4F981B8B1519E8142B98A32C065A92D354FBE9ECD7A3
B1C375B7A9245CB30CCF340911CC422189F990D71E42F25BB3AA3E4EA48A0214
F2975AA8B8315924FBC2852E7FECD6E12750536616A4B4269267922E34546EAA
B81F65BB1767B4E8336F8EA2A1DEB6BFAB362A36461936E3DCBA71E23C026C16
F68A7AA01DBA71B4F4CF5FF745C676FCC198E53632C5E9031E702833453A5E34
7AC6338A3246C86A93593537C866CA38AD52032B30CEF7D833F677CEAEFFF622
D8A4AAEAF0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 68 /Delta put
pop
%ADOEndSubsetFont
/Symbol*1 
[
68{/.notdef}repeat /Delta 187{/.notdef}repeat
] /Symbol nfnt
/Symbol*1 findfont [35 0 0 -35 0 0 ]mfnt sfnt
BuildWidthShowArray
382.343 78.2432 mov
(D) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
302.843 133.993 mov
(Mini) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/B 
<10bf317026ba62063ac1fc9b1b7da70a4283bca66508b7487db96d3b5e50
ebb26d781c08b71d8c60e86f5f95e258aadae78cebfccceace7d1e24a04f
7a0ebebb84d24fd6e0dcc7805db6e5cdf4eb0699290a048d32bdfc7bda09
b014801b6912f42581f07cfc0dad1f3a0fda97cccb6dc64f3c2133712b38
17f9dcf78f219a31023477457afb4124f2e67688f81d2fae0a3d889fa20e
a1e4d003c07fa3b1c5e475e398065490772a2317b8a1741177b48843cacc
98258835f7713d01ccd04d20a02276a9eaa215ecd7e642af0d478b9844bc
79867bee2d8cdbfd06> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79f07ea232bdef9ac901d627f1d7c
bbc695d54d248636f112e1e558138c8614732404711d922beb14f6e9da7a
f0f6424e78635561b81229fa2a64943f0a34dc93b34efd58286722f3cf61
311ea7fc7d9e5939d3363e9ede71cf70e1e3065ffc3ecb6cd91e476e222f
a9d3eab4d1de767ebebf490a414b0dffbb21fe8991e5077af9877088538e
7a8f585effec91> ND 
end end
end
/ArialMT findfont /Encoding get
dup 66 /B put
dup 109 /m put
dup 112 /p put
pop
%ADOEndSubsetFont
/ArialMT*12 
[
66{/.notdef}repeat /B 42{/.notdef}repeat /m 2{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
350.514 133.993 mov
(m) sh
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
372.172 133.993 mov
(u) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
386.632 133.993 mov
(m) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
408.29 133.993 mov
( ) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
415.514 133.993 mov
(B) sh
/ArialMT*4 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
432.855 133.993 mov
(ias) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
466.092 133.993 mov
( ) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
473.315 133.993 mov
(p) sh
/ArialMT*11 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
487.775 133.993 mov
(+) sh
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
502.959 133.993 mov
(p) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
384.843 193.743 mov
( ) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/less 
<10bf317030abe1cb512ceea0449cd815b1f6ae31114cd5e64ac5f3e96d86
2e69bcc80ee2b040b2534f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 60 /less put
pop
%ADOEndSubsetFont
/ArialMT*13 
[
60{/.notdef}repeat /less 195{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*13 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
392.066 193.743 mov
(<) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
407.25 193.743 mov
( ) sh
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
414.474 193.743 mov
(0) sh
/ArialMT*6 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
428.934 193.743 mov
(.) sh
/ArialMT*9 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
436.157 193.743 mov
(8) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
450.617 193.743 mov
( ) sh
/ArialMT*4 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
457.841 193.743 mov
(GeV/c) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/T 
<10bf317050d9560b3cb54d581860f439ad72a17a69c33f00af1e6fc67c4b
afccfda0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/ArialMT*14 
[
84{/.notdef}repeat /T 171{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*14 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
374.093 206.493 mov
(T) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
351.593 137.743 mov
( ) sh
restore_ctm
save_ctm
/ArialMT*12 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
358.658 193.743 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9D892360746A8D3
58FD90836DF3EF22CCC199314033B41137183BA9FAE90C80BB0E3B733067D7A2
ECF03BFEB01E4DF679C435B8355B35730CE44C0ACDC5C4564AEAE07D94BE0886
4C9B1F843FFBD3A24ABC0F3798C3400486F049852E6A9E437585AD141B522E5B
A1BD14646414E83D86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 163 /lessequal put
pop
%ADOEndSubsetFont
/Symbol*2 
[
163{/.notdef}repeat /lessequal 92{/.notdef}repeat
] /Symbol nfnt
/Symbol*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
337.843 193.743 mov
(\243) sh
restore_ctm
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
295.843 193.743 mov
(0) sh
/ArialMT*6 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
310.303 193.743 mov
(.) sh
/ArialMT*8 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
317.526 193.743 mov
(6) sh
/ArialMT*2 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
331.986 193.743 mov
( ) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
