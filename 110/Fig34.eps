%!PS-Adobe-3.1 EPSF-3.0
%%Title: PaperRatioKStarDeltaRhoLambdaSigAdobe Illustrator(R) 9.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 7/17/2007
%%CropBox: 0.000000 0.000000 649.898438 418.625000
%%BoundingBox: 0 0 650 419 
%%HiResBoundingBox: 0.000000 0.000000 649.898438 418.625000
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -418.625 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 418.625 ln
649.898 418.625 ln
649.898 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
89.25 369.375 mo
89.25 0.375 ln
633.5 0.375 ln
633.5 369.375 ln
89.25 369.375 ln
cp
false op
0 0 0 1 cmyk
s
89.25 369.375 mo
89.25 0.375 ln
633.5 0.375 ln
633.5 369.375 ln
89.25 369.375 ln
cp
89.25 369.375 mo
633.5 369.375 ln
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/version (001.008) def
/FullName (Symbol) def
/FamilyName (Symbol) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Symbol def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -180 -293 1090 1010 } def
/XUID [6 42996 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECAB94698AF
13A4485757691763CAA8023293C6742E3899EDC5BE94ADFC42A0C0027CA6214B
7F8D5F616C6C2330D450A707B93BDD387F8829CFEF02A72B512D93C14DC1F17C
3175B113E267D8BD6A1447D88A441810C35BAC725EC0017275261A74EB5067CD
9834D1E000DA4929128802A4406C63EAAE5098C3B673FB571CE4AA66227384BC
D1F9516217661F446651CBD433BDBB210B8CB1C0AE7FE1EE2E21077BC11F9270
69E30D1E3AF26358279873C2B62D3AA5368EC87D6A567E789674A8EEED694D74
E8AE78AD599DE625132DC2B96E4C1518B04F598401F1080D43B1530D7089A208
39AB479C8D65D6823FDE8C7085D829EBF9BFD791C95C71C65AE4EC2A01CBA5FA
992ED2E4C180E84DC6E14861844CD132B73A4AA658AD9BE20B35514AC67BF58E
E4587AAC0BA16313B83C2C222F018E737313614351D1EFBF36BD83A38ED9DB6B
D6191BB6160AAC9612D574C3028C8C52B52925658ED342DA958D4100DABE516F
4733BF895741A1EA34A4707864910DD7E8EFE407898B7BCC27AC062D1BA4F11A
73F4342E2D8EF6E101C80AABBFD820974B1F3CC33D070E3C0CF97490AE3CCF18
630A6E2BD4007310EF65E793C445E48BC171043FCE380624354787BC936241D0
3306C33061D7EDD92FAC67F671457CD23F6931B947E97BDA7754E5F56D611220
5C4E82C2815584BF47A854236D460FE90AEE8B7FC419C26F68EB007CE6ED0053
856FABF9D7B6E5E6D910A77FDC4019BC55466E90A87476719B3A8CE5B38E4592
40DEDD91E229FB5784ED9E5A05747D938589B5554723ABC8F7F565F9F7AE6BCF
106F2212EAA54EE7DDD86863B30DFFB84D259A8FD24352AD855813AA02791C07
3824963AA973AEB925BCB75D7B8B65680FFF2B750A7939CBD880C8467D1104DF
9F15B0A8B2E43C7F445BA84DDD777444FD9E2416992213E6D0A936603D381689
9E5E55FFC73083C43CA8A15EAD3BEE4D6AFAD49938AC763CA6CEFF4F499F6EB0
303C5FD86A6DA9601B64F321DE385311C18C43E18842F9D2B0445C853100194C
0EB4F0E368EF73081F98B787C0FD723F3DC0FFF2116676894617D05260524DFA
1C1424BBA73EEF75D8DBD86066850389ABCFEBF01C39C364A46182E47BEB9F55
679298A5A04190FF534218EAB65BEEFD74CF10AB8678EF1F6D0571C160A9603A
CDD271F08AD4812C1D7BD5CCE2DAE0170DD34BEB8CEFCD53644795C872A14E50
D6AAD6F1B8D7189729AE7ADFDCB5DF991B245C81CE2308BCC82D48707AFFA4C9
A4C87D5DC67236E08C7B144AA696669DC25D82589F7BBC7ECEFD474AB108069A
375F2B6B927C6D4C970478E059126CFAAFAE963C89B348FA0CEE452DBAB4A8AA
DC47F03B0A479DA258DE4F981B8B1519E8142B98A32C065A92D354FBE9ECD7A3
B1C375B7A9245CB30CCF340911CC422189F990F60E9BDE6D40634FED7B4C9DE8
DE4FC0918821D85287B01F3603BDBC7AF9F5768AA90AD5833B29F49DCE4F0218
E4E8995D6E2B7AC981B044AA42682C5C58F1309034D95F499747F17B2FEF7005
9658D8CEEAF192415D23A767A630A8BE2578F14BB1F3D57C7DF8EEEE1A0DCCCA
2CDCF9AE2ED4674E41287F2704339F30762269A33BE3522FE6DF5F56D4B58B30
6527CF49C76911FF5E7884FBF6C1C7B9878A01C9230AB399EDB8ECFD6A5D8D06
E3BF3F0B0849558E1E443387C59C0B284A71C196EDEA8DE6D6402CCCADA3980D
0F3D2FD5160EC35C64666EBBBC64A42DAC7FC35F1B2E2054D16ED7260CACD62F
189749B5B078EFAEE16B2D9110B85505D6D7BE91D99D1815BE72DE44384B1956
E29A12E33D430F9FD9758C59FC1ABEDA7E65D02537D85D89857A1F9A48BA6393
BE9D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 104 /eta put
pop
%ADOEndSubsetFont
/Symbol*1 
[
104{/.notdef}repeat /eta 151{/.notdef}repeat
] /Symbol nfnt
/Symbol*1 findfont [23 0 0 -23 0 0 ]mfnt sfnt
BuildWidthShowArray
551.5 407.875 mov
(h) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 47 /slash put
dup 100 /d put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
47{/.notdef}repeat /slash 52{/.notdef}repeat /d 155{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
533 407.875 mov
(/d) sh
restore_ctm
105.75 363.875 mo
105.75 369.375 ln
132 363.875 mo
132 369.375 ln
152.25 363.875 mo
152.25 369.375 ln
168.75 363.875 mo
168.75 369.375 ln
182.75 363.875 mo
182.75 369.375 ln
195 363.875 mo
195 369.375 ln
205.75 363.875 mo
205.75 369.375 ln
215.25 358.375 mo
215.25 369.375 ln
s
save_ctm
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
486.25 407.875 mov
(d) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/N 
<10bf3170258d0fb193698b7049546445ecd17fd85e4bf2706de899f33391
fbaa27f5dc8abddb7736c2d7> ND 
end end
end
/ArialMT findfont /Encoding get
dup 78 /N put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
78{/.notdef}repeat /N 177{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
497.929 407.875 mov
(N) sh
restore_ctm
278.25 363.875 mo
278.25 369.375 ln
315 363.875 mo
315 369.375 ln
341.25 363.875 mo
341.25 369.375 ln
361.5 363.875 mo
361.5 369.375 ln
378 363.875 mo
378 369.375 ln
392 363.875 mo
392 369.375 ln
404 363.875 mo
404 369.375 ln
414.75 363.875 mo
414.75 369.375 ln
424.25 358.375 mo
424.25 369.375 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
end end
end
/ArialMT findfont /Encoding get
dup 48 /zero put
dup 49 /one put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
48{/.notdef}repeat /zero /one 206{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
203.295 396.125 mov
(10) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
431.75 386.375 mov
(2) sh
restore_ctm
487.25 363.875 mo
487.25 369.375 ln
524.25 363.875 mo
524.25 369.375 ln
550.25 363.875 mo
550.25 369.375 ln
570.5 363.875 mo
570.5 369.375 ln
587.25 363.875 mo
587.25 369.375 ln
601.25 363.875 mo
601.25 369.375 ln
613.25 363.875 mo
613.25 369.375 ln
624 363.875 mo
624 369.375 ln
633.5 358.375 mo
633.5 369.375 ln
s
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
408.25 396.125 mov
(10) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d89951110b
adeffb560aa54e338c9127425b06cefdd1d949874d4622c9b30b369b86fa
41b317af240e3deeaa1e9f5a90a07b28e40380e054c3662afb1cf6f51c11
b6836151d28c225e6c4d1016d9fa730c1bf86c199f942682434f25971f32
ae953f8b74fbb716bed8520757e61bce7cf6be4a92865d3717d39c92f18c
1b406caa6c3ed07ea5ff15dde83aea7d31b62642cc5c322a42f14367085d
78b35ebe75a37abae90e77a72aa751401d5e1988c4445fb51991681b7fd3
6a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
51{/.notdef}repeat /three 204{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
641 385.375 mov
(3) sh
restore_ctm
89.25 369.375 mo
89.25 0.375 ln
s
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
617.5 396.125 mov
(10) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/p 
<10bf31703f932f5ecb85f9f26ec0d7d79f07ea232bdef9ac901d627f1d7c
bbc695d54d248636f112e1e558138c8614732404711d922beb14f6e9da7a
f0f6424e78635561b81229fa2a64943f0a34dc93b34efd58286722f3cf61
311ea7fc7d9e5939d3363e9ede71cf70e1e3065ffc3ecb6cd91e476e222f
a9d3eab4d1de767ebebf490a414b0dffbb21fe8991e5077af9877088538e
7a8f585effec91> ND 
end end
end
/ArialMT findfont /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
112{/.notdef}repeat /p 143{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 21.625 mov
(pp) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/space 
<10bf317079c7734bf7> ND 
/R 
<10bf31702819c97bfff21764697e50774ba74072e33752b9757ab1da5110
1cd5007d94ec5ab5df40cad71d9b47c5db20b30e71ec3b2ea4ffb966617b
dd86ea50ab4da70131cee0aeb4868b9a28ad3c7bfd4f03efbe080427ed4f
f28d15b9222e1f65cad625669e8a7a22b058fad3199168f7fd693aea9bbe
853141b98c668a72cafa538bace6827819d98c98da00e70453fb9769adea
4f22cf1b5b62de022aa24acc2658> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/o 
<10bf31705e921373942a1df751ebc6dc1f8ba1849e5d0b813201a0c14072
56efd5ac73b2cc94d73ea025d660f576b0dc46e6510eb657538743c037a9
ef3f1df5fa8600ba31cfa9fb018633830dedfb133aaa4477d4caef3c149d
68283dde65fde31ff05fe29c87c2dcf980686664a1ba1e9317bc4e3671a3
dde8af03d654a3b9278e18f5d604ca7d7f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 82 /R put
dup 97 /a put
dup 105 /i put
dup 111 /o put
dup 116 /t put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
32{/.notdef}repeat /space 49{/.notdef}repeat /R 14{/.notdef}repeat /a 7{/.notdef}repeat /i 
5{/.notdef}repeat /o 4{/.notdef}repeat /t 139{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 90.875 mov
( ) sh
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 85.0405 mov
(/) sh
/ArialMT*7 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 79.2061 mov
( Ratio) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac576702c4654165111c4e219216
925a1bbda37b8221ddb4f3d7ef9dc32fffa987a0f0ea03488171acb09982
96179b683649315a4b1534> ND 
end end
end
/ArialMT findfont /Encoding get
dup 65 /A put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
65{/.notdef}repeat /A 190{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
29.75 110.625 mov
(AA) sh
restore_ctm
105.5 369.375 mo
89.25 369.375 ln
97.5 360.625 mo
89.25 360.625 ln
97.5 351.875 mo
89.25 351.875 ln
97.5 343.125 mo
89.25 343.125 ln
105.5 334.375 mo
89.25 334.375 ln
97.5 325.625 mo
89.25 325.625 ln
97.5 316.875 mo
89.25 316.875 ln
97.5 307.875 mo
89.25 307.875 ln
105.5 299.125 mo
89.25 299.125 ln
97.5 290.375 mo
89.25 290.375 ln
97.5 281.625 mo
89.25 281.625 ln
97.5 272.875 mo
89.25 272.875 ln
105.5 264.125 mo
89.25 264.125 ln
97.5 255.125 mo
89.25 255.125 ln
97.5 246.375 mo
89.25 246.375 ln
97.5 237.625 mo
89.25 237.625 ln
105.5 228.875 mo
89.25 228.875 ln
97.5 220.125 mo
89.25 220.125 ln
97.5 211.375 mo
89.25 211.375 ln
97.5 202.625 mo
89.25 202.625 ln
105.5 193.625 mo
89.25 193.625 ln
97.5 184.875 mo
89.25 184.875 ln
97.5 176.125 mo
89.25 176.125 ln
97.5 167.375 mo
89.25 167.375 ln
105.5 158.625 mo
89.25 158.625 ln
97.5 149.875 mo
89.25 149.875 ln
97.5 141.125 mo
89.25 141.125 ln
97.5 132.125 mo
89.25 132.125 ln
105.5 123.375 mo
89.25 123.375 ln
97.5 114.625 mo
89.25 114.625 ln
97.5 105.875 mo
89.25 105.875 ln
97.5 97.125 mo
89.25 97.125 ln
105.5 88.375 mo
89.25 88.375 ln
97.5 79.375 mo
89.25 79.375 ln
97.5 70.625 mo
89.25 70.625 ln
97.5 61.875 mo
89.25 61.875 ln
105.5 53.125 mo
89.25 53.125 ln
97.5 44.375 mo
89.25 44.375 ln
97.5 35.625 mo
89.25 35.625 ln
97.5 26.875 mo
89.25 26.875 ln
105.5 17.875 mo
89.25 17.875 ln
105.5 17.875 mo
89.25 17.875 ln
97.5 9.125 mo
89.25 9.125 ln
s
save_ctm
/ArialMT*7 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
21 159.125 mov
(Ratio) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.25 378.375 mov
(0) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
46{/.notdef}repeat /period 209{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.9292 378.375 mov
(.) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.7637 378.375 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
44.5 343.375 mov
(0) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.1792 343.375 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
52{/.notdef}repeat /four 203{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.0137 343.375 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.25 308.125 mov
(0) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.9292 308.125 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/six 
<10bf3170435d0d4425184fc061c7faa8dc6baee8c868da453cb6a6f891b2
5354e14cb1bc5e0a0fcae04743a9daec5483058e0dde89957524c8915b19
25146f588ef5a70cf81e2e4fc7890fddf0f5d4c16f77c4469f58479cdd1b
49f5c68eada3087814223d9b5aa8284ce9770f7175297744c20f41a48dc8
d286517deb8893f3230571eaf9ea1ba0abf787d646e1631373082ff4df40
4c74838bb86fd789e63cac0da4dceabebd4d0fc0472fd6a9ca90e64e3c08
8853c020aae52cb442800bb6081c0fefcb0a206f46cf4ec1e25c13c94cbb
330a8f2762> ND 
end end
end
/ArialMT findfont /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
54{/.notdef}repeat /six 201{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.7637 308.125 mov
(6) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.25 272.875 mov
(0) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.9292 272.875 mov
(.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6f92fe7d0382cbfbcdc7b1ae90f5804442d3ad6d5e65
ea646fb35cdd7e11033e2adda681e7c859039849d6dc5ed2ddeff6a08225
d8f51551f3de1fe8a008c3292192037d710bd142b0870ce031e718da3ef6
d3433e72ed0f460e2a4d68b080691bc3e7e1f307fb1e0e53bcb7db60f146
7b82fe22e2d41fbef278c3fdcb5b6d458b0439abc5768f2ce7c9570fa1d6
c4be1808a48200bf465a45f457def4538c8fb72d6cd74c82c40277b5b6e7
fea6be29486ac098b8cb486a6ef4b50bb3d786b334b9913c9609ad75ea2f
ed8e7505ac0f1bb96c923835d10b3ab9> ND 
end end
end
/ArialMT findfont /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/ArialMT*12 
[
56{/.notdef}repeat /eight 199{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*12 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.7637 272.875 mov
(8) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
66 237.625 mov
(1) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.25 202.625 mov
(1) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.9292 202.625 mov
(.) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.7637 202.625 mov
(2) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
44.5 168.375 mov
(1) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.1792 168.375 mov
(.) sh
/ArialMT*10 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.0137 168.375 mov
(4) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.25 133.125 mov
(1) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.9292 133.125 mov
(.) sh
/ArialMT*11 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.7637 133.125 mov
(6) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.25 97.875 mov
(1) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.9292 97.875 mov
(.) sh
/ArialMT*12 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.7637 97.875 mov
(8) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
63 62.875 mov
(2) sh
restore_ctm
3 lw
[3 3 ] 0 dsh
89.25 228.875 mo
633.5 228.875 ln
s
0.75 lw
[] 0 dsh
127.25 127.625 mo
127.25 26.875 ln
125.25 26.875 mo
129.25 26.875 ln
127.25 141.125 mo
127.25 241.875 ln
125.25 241.875 mo
129.25 241.875 ln
186.5 151.375 mo
186.5 59.625 ln
184.75 59.625 mo
188.5 59.625 ln
186.5 165.125 mo
186.5 257.125 ln
184.75 257.125 mo
188.5 257.125 ln
215.25 142.125 mo
215.25 46.625 ln
213.25 46.625 mo
217.25 46.625 ln
215.25 155.875 mo
215.25 251.375 ln
213.25 251.375 mo
217.25 251.375 ln
250.75 123.625 mo
250.75 25.375 ln
248.75 25.375 mo
252.75 25.375 ln
250.75 137.125 mo
250.75 235.375 ln
248.75 235.375 mo
252.75 235.375 ln
s
0 0 0 1 cmyk
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
45.25 27.625 mov
(2) sh
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
56.9292 27.625 mov
(.) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
62.7637 27.625 mov
(2) sh
250.75 137.75 mo
258.125 123 ln
243.375 123 ln
250.75 137.75 ln
0.956863 0.929412 0 0 cmyk
ef
215.25 156.25 mo
222.625 141.5 ln
207.875 141.5 ln
215.25 156.25 ln
ef
186.5 165.75 mo
193.875 151 ln
179.125 151 ln
186.5 165.75 ln
ef
127.25 141.75 mo
134.625 127 ln
119.875 127 ln
127.25 141.75 ln
ef
119.75 197.625 mo
119.75 130.125 ln
118 130.125 mo
121.75 130.125 ln
119.75 206.375 mo
119.75 273.875 ln
118 273.875 mo
121.75 273.875 ln
182.75 232.125 mo
182.75 179.125 ln
180.75 179.125 mo
184.75 179.125 ln
182.75 240.875 mo
182.75 294.125 ln
180.75 294.125 mo
184.75 294.125 ln
212.5 248.375 mo
212.5 193.625 ln
210.5 193.625 mo
214.5 193.625 ln
212.5 257.375 mo
212.5 312.125 ln
210.5 312.125 mo
214.5 312.125 ln
249 266.625 mo
249 228.875 ln
247 228.875 mo
251 228.875 ln
249 275.625 mo
249 313.375 ln
247 313.375 mo
251 313.375 ln
390.75 237.875 mo
390.75 199.375 ln
388.75 199.375 mo
392.5 199.375 ln
390.75 246.625 mo
390.75 285.125 ln
388.75 285.125 mo
392.5 285.125 ln
0 0 0 1 cmyk
s
381.375 239.25 mo
400.125 239.25 ln
384.956 250.271 ln
390.75 232.438 ln
396.544 250.271 ln
381.375 239.25 ln
0.0117647 0.960784 0.913726 0 cmyk
f
239.625 268 mo
258.375 268 ln
243.207 279.021 ln
249 261.188 ln
254.795 279.021 ln
239.625 268 ln
f
203.125 249.75 mo
221.875 249.75 ln
206.707 260.771 ln
212.5 242.938 ln
218.295 260.771 ln
203.125 249.75 ln
f
173.375 233.5 mo
192.125 233.5 ln
176.957 244.521 ln
182.75 226.688 ln
188.545 244.521 ln
173.375 233.5 ln
f
110.375 198.75 mo
129.125 198.75 ln
113.957 209.771 ln
119.75 191.938 ln
125.545 209.771 ln
110.375 198.75 ln
f
142.75 259.375 mo
142.75 221.625 ln
140.75 221.625 mo
144.75 221.625 ln
142.75 271.125 mo
142.75 308.875 ln
140.75 308.875 mo
144.75 308.875 ln
195 259.375 mo
195 235.125 ln
193 235.125 mo
197 235.125 ln
195 271.125 mo
195 295.375 ln
193 295.375 mo
197 295.375 ln
221.25 271.625 mo
221.25 244.625 ln
219.5 244.625 mo
223.25 244.625 ln
221.25 283.125 mo
221.25 310.125 ln
219.5 310.125 mo
223.25 310.125 ln
255 253.375 mo
255 224.375 ln
253 224.375 mo
257 224.375 ln
255 265.125 mo
255 294.125 ln
253 294.125 mo
257 294.125 ln
541.25 216.875 mo
541.25 170.125 ln
539.5 170.125 mo
543.25 170.125 ln
541.25 228.625 mo
541.25 275.625 ln
539.5 275.625 mo
543.25 275.625 ln
0 0 0 1 cmyk
s
541.25 216.25 mo
534.625 216.25 ln
534.625 229.5 ln
547.875 229.5 ln
547.875 216.25 ln
541.25 216.25 ln
0.886275 0.0627451 0.980392 0.00784314 cmyk
ef
255 252.5 mo
248.375 252.5 ln
248.375 265.75 ln
261.625 265.75 ln
261.625 252.5 ln
255 252.5 ln
ef
221.25 270.75 mo
214.625 270.75 ln
214.625 284 ln
227.875 284 ln
227.875 270.75 ln
221.25 270.75 ln
ef
195 258.5 mo
188.375 258.5 ln
188.375 271.75 ln
201.625 271.75 ln
201.625 258.5 ln
195 258.5 ln
ef
142.75 258.5 mo
136.125 258.5 ln
136.125 271.75 ln
149.375 271.75 ln
149.375 258.5 ln
142.75 258.5 ln
ef
132 227.125 mo
132 202.375 ln
130 202.375 mo
134 202.375 ln
132 240.625 mo
132 265.625 ln
130 265.625 mo
134 265.625 ln
189 257.125 mo
189 238.875 ln
187 238.875 mo
191 238.875 ln
189 270.875 mo
189 289.125 ln
187 289.125 mo
191 289.125 ln
217 252.125 mo
217 233.375 ln
215 233.375 mo
219 233.375 ln
217 265.875 mo
217 284.625 ln
215 284.625 mo
219 284.625 ln
252 252.125 mo
252 233.375 ln
250 233.375 mo
254 233.375 ln
252 265.875 mo
252 284.625 ln
250 284.625 mo
254 284.625 ln
358.25 267.125 mo
358.25 242.875 ln
356.25 242.875 mo
360.25 242.875 ln
358.25 280.875 mo
358.25 305.375 ln
356.25 305.375 mo
360.25 305.375 ln
466.75 267.125 mo
466.75 238.625 ln
464.75 238.625 mo
468.75 238.625 ln
466.75 280.875 mo
466.75 309.625 ln
464.75 309.625 mo
468.75 309.625 ln
539.25 277.375 mo
539.25 253.625 ln
537.25 253.625 mo
541.25 253.625 ln
539.25 290.875 mo
539.25 314.625 ln
537.25 314.625 mo
541.25 314.625 ln
590.25 282.375 mo
590.25 259.125 ln
588.25 259.125 mo
592 259.125 ln
590.25 295.875 mo
590.25 319.125 ln
588.25 319.125 mo
592 319.125 ln
597.625 289.105 mo
597.625 285.034 594.321 281.73 590.25 281.73 cv
586.18 281.73 582.875 285.034 582.875 289.105 cv
582.875 293.176 586.18 296.48 590.25 296.48 cv
594.321 296.48 597.625 293.176 597.625 289.105 cv
546.625 284.185 mo
546.625 280.114 543.321 276.81 539.25 276.81 cv
535.18 276.81 531.875 280.114 531.875 284.185 cv
531.875 288.256 535.18 291.56 539.25 291.56 cv
543.321 291.56 546.625 288.256 546.625 284.185 cv
474.146 274.105 mo
474.146 270.034 470.841 266.73 466.771 266.73 cv
462.699 266.73 459.396 270.034 459.396 274.105 cv
459.396 278.176 462.699 281.48 466.771 281.48 cv
470.841 281.48 474.146 278.176 474.146 274.105 cv
365.665 274.105 mo
365.665 270.034 362.362 266.73 358.291 266.73 cv
354.219 266.73 350.916 270.034 350.916 274.105 cv
350.916 278.176 354.219 281.48 358.291 281.48 cv
362.362 281.48 365.665 278.176 365.665 274.105 cv
259.346 259.105 mo
259.346 255.034 256.041 251.73 251.971 251.73 cv
247.9 251.73 244.596 255.034 244.596 259.105 cv
244.596 263.176 247.9 266.48 251.971 266.48 cv
256.041 266.48 259.346 263.176 259.346 259.105 cv
224.426 259.105 mo
224.426 255.034 221.121 251.73 217.051 251.73 cv
212.98 251.73 209.676 255.034 209.676 259.105 cv
209.676 263.176 212.98 266.48 217.051 266.48 cv
221.121 266.48 224.426 263.176 224.426 259.105 cv
196.346 264.145 mo
196.346 260.074 193.041 256.77 188.971 256.77 cv
184.9 256.77 181.596 260.074 181.596 264.145 cv
181.596 268.216 184.9 271.52 188.971 271.52 cv
193.041 271.52 196.346 268.216 196.346 264.145 cv
139.346 233.905 mo
139.346 229.834 136.041 226.53 131.971 226.53 cv
127.9 226.53 124.596 229.834 124.596 233.905 cv
124.596 237.976 127.9 241.28 131.971 241.28 cv
136.041 241.28 139.346 237.976 139.346 233.905 cv
191.5 195.375 mo
191.5 128.875 ln
189.5 128.875 mo
193.5 128.875 ln
191.5 208.875 mo
191.5 275.375 ln
189.5 275.375 mo
193.5 275.375 ln
325.25 254.625 mo
325.25 200.125 ln
323.25 200.125 mo
327 200.125 ln
325.25 268.125 mo
325.25 322.625 ln
323.25 322.625 mo
327 322.625 ln
592.25 323.375 mo
592.25 295.375 ln
590.25 295.375 mo
594.25 295.375 ln
592.25 336.875 mo
592.25 364.875 ln
590.25 364.875 mo
594.25 364.875 ln
0 0 0 1 cmyk
s
592.25 322.75 mo
584.875 337.5 ln
599.625 337.5 ln
592.25 322.75 ln
0.00784314 0.952941 0 0 cmyk
ef
325.25 254 mo
317.875 268.75 ln
332.625 268.75 ln
325.25 254 ln
ef
191.5 194.75 mo
184.125 209.5 ln
198.875 209.5 ln
191.5 194.75 ln
ef
save_ctm
restore_ctm
save_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
end end
end
/ArialMT findfont /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/ArialMT*13 
[
45{/.notdef}repeat /hyphen 210{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
469 34.375 mov
(-) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9C4BF5E2D90ABC4
B1A7C9B4A00FE739837CAD4DD7A9EBDCA8BA1C7BFBCC5CEE89836EBF05CABE14
6EBF549019B7BE841811316EEADFEBCC6518284157D61BF186D5E5A0E2F25A97
A4C9E2CBA60E294E252D7C5D03DE3A087B45360E6143E62BDDCDBA011CCF43EA
5511F3F004D2CE8C56D44EBB1C787B58D60385CBEE6E47025D2168C84FC15CFD
00D8F44BED04723D4E35686BD29715890A355531BEF793D0851D923918CA2558
4EB8432B47E344A079B3C8721C447206DF60BD3862965876258542E7F9D5DCE0
C5929291284D6D80E2647A5744D0666997FB588C40B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 112 /pi put
pop
%ADOEndSubsetFont
/Symbol*2 
[
112{/.notdef}repeat /pi 143{/.notdef}repeat
] /Symbol nfnt
/Symbol*2 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
451.25 41.125 mov
(p) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
443.5 41.125 mov
(/) sh
restore_ctm
save_ctm
/ArialMT*3 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
433.75 33.375 mov
(0) sh
restore_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9C61B1AF530D86A
EA027C70855C41E9C9B209B65E4C9F7B8832A013F3E89248FF22CF3B4F31335D
50716B1434B372B7001778D95030E7515283DF5AD258A00E6A33C7B314F933B3
7CAF420F6B5BB57D32B8BCAF2524587ED535219031A7C10FC8F3424BEF7375A3
911F69612A72E03820D3CE8F3448707E5EA7578BB6E35A4CF693BEBA5EE4B8BA
4B8E2689391D86A44CF2218F0719B9FD478062833F9792F7EF595A50A2A71684
959E7B093CDDB9C221CE3211606804EDC36DD2B2F130DD60411EEEB53ECC4A18
185B50D6F32B2C713E0B9D886DC8CDFEBD500E186ACB5FB55F031D88FE1095BE
BBC6D9D40B6E6DD4E54DAF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 114 /rho put
pop
%ADOEndSubsetFont
/Symbol*3 
[
114{/.notdef}repeat /rho 141{/.notdef}repeat
] /Symbol nfnt
/Symbol*3 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
420 41.125 mov
(r) sh
381.625 33.75 mo
400.375 33.75 ln
385.206 44.771 ln
391 26.9385 ln
396.794 44.771 ln
381.625 33.75 ln
0.0117647 0.960784 0.913726 0 cmyk
f
save_ctm
restore_ctm
save_ctm
0 0 0 1 cmyk
/ArialMT*13 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
475 61.875 mov
(-) sh
restore_ctm
398.425 64.8252 mo
398.425 60.7539 395.121 57.4502 391.05 57.4502 cv
386.979 57.4502 383.675 60.7539 383.675 64.8252 cv
383.675 68.896 386.979 72.2002 391.05 72.2002 cv
395.121 72.2002 398.425 68.896 398.425 64.8252 cv
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/asterisk 
<10bf3170586c89409dd2665c962f73917ff1d99d25547eb97d8d7a1b746b
52bd73aee63f25b04e33ffea373408cea5b18d57735103adadf0d2b607ad
784041cc4f31b413e027687ce43b3535a4680ad8bc60fcb7acaa8519fa55
5f8158dcfff6de858c7134> ND 
/K 
<10bf317026ba62062704f9ba87c1ab1fc7730cdfdacc88df1e45004269f1
b43137c9251fe2841c5423281c9858682237f26a47da9c17460f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 42 /asterisk put
dup 75 /K put
pop
%ADOEndSubsetFont
/ArialMT*14 
[
42{/.notdef}repeat /asterisk 32{/.notdef}repeat /K 180{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*14 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
420 74.375 mov
(K*) sh
/ArialMT*1 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
447.46 74.375 mov
(/) sh
/ArialMT*14 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
454.684 74.375 mov
(K) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
458.25 101.875 mov
(/) sh
/ArialMT*6 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
465.474 101.875 mov
(p) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/ArialMT*15 
[
43{/.notdef}repeat /plus 212{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*15 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
433.75 93.125 mov
(++) sh
restore_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9F0349F697CA426
6AE2982BEC2D25793C326A9B9964A6722F60D7A967FB9FEE225395B703A5DBA4
67BF47C2C03467B5D057A3CDCAFB24A11829AB421433E0A997046E57B69A5ED1
C342F329CB642F19C056A00E677DD9E2FB148CFF48245B7AD6B00C9C4608
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 68 /Delta put
pop
%ADOEndSubsetFont
/Symbol*4 
[
68{/.notdef}repeat /Delta 187{/.notdef}repeat
] /Symbol nfnt
/Symbol*4 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
420 101.875 mov
(D) sh
391 100.5 mo
398.375 85.75 ln
383.625 85.75 ln
391 100.5 ln
0.956863 0.929412 0 0 cmyk
ef
save_ctm
restore_ctm
save_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9F8A5890CFA471E
FA6E448FC89BAEED45C2A2C33EDCA439FA961BC7082B6687577EEB52D920EBB8
5FD93C63BFC5830BDF031B91CF2A55D53C2B3F96310561E454DFD2AB16D8E18F
BC37D21AA910DDA6A30A52508A75934F5D24F71C094C7B000E4157C128EBC2EE
DE894753A2B21C0B6F3F9136C222EC11E3BB4FDFB2875415B71C8F87CED60577
B7ED9A1AACFEFB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 76 /Lambda put
pop
%ADOEndSubsetFont
/Symbol*5 
[
76{/.notdef}repeat /Lambda 179{/.notdef}repeat
] /Symbol nfnt
/Symbol*5 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
455.25 130.125 mov
(L) sh
restore_ctm
save_ctm
/ArialMT*14 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
436.75 131.125 mov
(*) sh
/ArialMT*1 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
446.868 131.125 mov
(/) sh
restore_ctm
0 0 0 1 cmyk
/Symbol*5 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
420 130.125 mov
(L) sh
391 113.75 mo
383.625 128.5 ln
398.375 128.5 ln
391 113.75 ln
0.00784314 0.952941 0 0 cmyk
ef
save_ctm
restore_ctm
save_ctm
0 0 0 1 cmyk
/Symbol*5 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
455.25 157.625 mov
(L) sh
restore_ctm
save_ctm
/ArialMT*14 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
435.75 158.625 mov
(*) sh
/ArialMT*1 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
445.868 158.625 mov
(/) sh
restore_ctm
0 0 0 1 cmyk
%ADOBeginSubsetFont: Symbol AddGlyphs


currentfile eexec A0B00ED553C885B054407600D8001EF7E731258E500186
3D60D7087C9E5BD9B77926DD398D7FAC548A8FD69776502A7C17563724620FE9
028CEA772E687B2DABA3D45FCF81F001DFE7CEE78E8EF8B5CB9D6F8D0538C498
22F2E8F630154A865F7681DBD12D362F4797F99F6C459D5AB9E766B1CAF21878
312E0497AF828EA9C4436A032435DFC750A4117A43A9C3B41DD6C1D8168AE52E
23F9416C6F0B1BBC12AF8595D8968F233123E95506448C83CFB0712C2D9C0DFB
5548AB8F6B2EE546A002085B7514A575F2A55EEC4DF522880BB870C238C500A7
39C0F212A86346702747909348F622E240CF67A41133231EA204443824
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 83 /Sigma put
pop
%ADOEndSubsetFont
/Symbol*6 
[
83{/.notdef}repeat /Sigma 172{/.notdef}repeat
] /Symbol nfnt
/Symbol*6 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
420 158.625 mov
(S) sh
391 142.75 mo
384.375 142.75 ln
384.375 156 ln
397.625 156 ln
397.625 142.75 ln
391 142.75 ln
0.886275 0.0627451 0.980392 0.00784314 cmyk
ef
save_ctm
restore_ctm
save_ctm
0 0 0 1 cmyk
/ArialMT*1 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
161.75 348.125 mov
(d) sh
/ArialMT*15 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
176.766 348.125 mov
(+) sh
/ArialMT*8 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
192.534 348.125 mov
(A) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*16 
[
117{/.notdef}repeat /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*16 findfont [27 0 0 -27 0 0 ]mfnt sfnt
BuildWidthShowArray
210.542 348.125 mov
(u) sh
restore_ctm
save_ctm
/ArialMT*8 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
412.5 348.125 mov
(A) sh
/ArialMT*16 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
429.842 348.125 mov
(u) sh
/ArialMT*15 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
444.302 348.125 mov
(+) sh
/ArialMT*8 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
459.485 348.125 mov
(A) sh
/ArialMT*16 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
476.827 348.125 mov
(u) sh
restore_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd416a4f286324
3708bb18c93b6ff9009987165c661f3cf3b3d4268ae53d21376706d87451
5a09c8e0501f41699e842e2b1499d14714dfea5e38b494c7b6527dbf4887
431b1f716378> ND 
end end
end
/ArialMT findfont /Encoding get
dup 99 /c put
dup 104 /h put
pop
%ADOEndSubsetFont
/ArialMT*17 
[
99{/.notdef}repeat /c 4{/.notdef}repeat /h 151{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*17 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
513.375 413.43 mov
(ch) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
