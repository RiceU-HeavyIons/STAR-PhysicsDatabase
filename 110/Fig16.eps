%!PS-Adobe-3.1 EPSF-3.0
%%Title: PaperLambdaInvMass.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Patricia Fachini
%%CreationDate: 1/2/2008
%%CropBox: 0.000000 0.000000 633.872070 431.568359
%%BoundingBox: 0 0 634 432 
%%HiResBoundingBox: 0.000000 0.000000 633.872070 431.568359
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{$SubstituteFont begin
/$used false def/$fontname 4 index def end 3 index findfont $SubstituteFont
begin $used{false}{dup/FontName known{dup/FontName get $fontname eq 1 index
/DistillerFauxFont known not and}{false}ifelse}ifelse exch pop end{exch pop
exch pop exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch
findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put
copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def
/?add{1 index type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index
findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded
get 1 dict begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3
index putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval
?str1 0 2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict
dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end userdict/$SubstituteFont 20 dict put 1 dict begin
/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}
ifelse def/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{
countdictstack array dictstack 0 get begin userdict begin $SubstituteFont
begin/$str 128 string def/$fontpat 128 string def/$slen 0 def/$sname null def
/$match false def/$fontname null def/$used false def/$fontname null def
/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{
$str cvs dup length $slen sub $slen getinterval}{pop $sname}ifelse $fontpat
dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def mark{
$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}
stopped cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)
putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$used true def dup length $slen gt $sname null ne or $slen 0 gt and{$sname
null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse
dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap findresource
/CIDSystemInfo get{def}forall $findfontByROS}{pop $findfontByEnum}ifelse}{
//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$used
true def dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}
{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{
$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName get 2
index ne}{true}ifelse dup{/$used true def}if{$slen 0 gt $sname null ne 3 index
length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add
dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end
definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if
end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
1 -1 scale 0 -431.568 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 431.568 ln
633.872 431.568 ln
633.872 0 ln
clp
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
86.25 380.5 mo
86.25 11.5 ln
630.5 11.5 ln
630.5 380.5 ln
86.25 380.5 ln
cp
false op
0 0 0 1 cmyk
s
86.25 380.5 mo
86.25 11.5 ln
630.5 11.5 ln
630.5 380.5 ln
86.25 380.5 ln
cp
117.25 317.5 mo
117.25 317 ln
117.25 317 mo
117.25 316.75 ln
111 317 mo
117.25 317 ln
117.25 317 mo
123.5 317 ln
s
117.46 317.03 mo
117.46 316.892 117.348 316.78 117.21 316.78 cv
117.072 316.78 116.96 316.892 116.96 317.03 cv
116.96 317.168 117.072 317.28 117.21 317.28 cv
117.348 317.28 117.46 317.168 117.46 317.03 cv
ef
142 274.75 mo
142 265.5 ln
142 265.5 mo
142 256.5 ln
135.75 265.5 mo
142 265.5 ln
142 265.5 mo
148.25 265.5 ln
s
142.18 265.43 mo
142.18 265.292 142.067 265.18 141.93 265.18 cv
141.792 265.18 141.68 265.292 141.68 265.43 cv
141.68 265.568 141.792 265.68 141.93 265.68 cv
142.067 265.68 142.18 265.568 142.18 265.43 cv
ef
154.25 290.25 mo
154.25 279.75 ln
154.25 279.75 mo
154.25 269.5 ln
148.25 279.75 mo
154.25 279.75 ln
154.25 279.75 mo
160.5 279.75 ln
s
154.42 279.83 mo
154.42 279.692 154.308 279.58 154.17 279.58 cv
154.032 279.58 153.92 279.692 153.92 279.83 cv
153.92 279.968 154.032 280.08 154.17 280.08 cv
154.308 280.08 154.42 279.968 154.42 279.83 cv
ef
166.75 283.5 mo
166.75 272.25 ln
166.75 272.25 mo
166.75 260.75 ln
160.5 272.25 mo
166.75 272.25 ln
166.75 272.25 mo
172.75 272.25 ln
s
166.899 272.15 mo
166.899 272.012 166.788 271.9 166.649 271.9 cv
166.512 271.9 166.399 272.012 166.399 272.15 cv
166.399 272.288 166.512 272.4 166.649 272.4 cv
166.788 272.4 166.899 272.288 166.899 272.15 cv
ef
179 296.25 mo
179 284 ln
179 284 mo
179 272 ln
172.75 284 mo
179 284 ln
179 284 mo
185.25 284 ln
s
179.14 283.91 mo
179.14 283.772 179.027 283.66 178.89 283.66 cv
178.752 283.66 178.64 283.772 178.64 283.91 cv
178.64 284.048 178.752 284.16 178.89 284.16 cv
179.027 284.16 179.14 284.048 179.14 283.91 cv
ef
191.5 230 mo
191.5 217 ln
191.5 217 mo
191.5 204 ln
185.25 217 mo
191.5 217 ln
191.5 217 mo
197.5 217 ln
s
191.74 216.95 mo
191.74 216.813 191.628 216.7 191.49 216.7 cv
191.352 216.7 191.24 216.813 191.24 216.95 cv
191.24 217.088 191.352 217.2 191.49 217.2 cv
191.628 217.2 191.74 217.088 191.74 216.95 cv
ef
203.75 243.5 mo
203.75 230 ln
203.75 230 mo
203.75 216.75 ln
197.5 230 mo
203.75 230 ln
203.75 230 mo
210 230 ln
s
204.1 229.91 mo
204.1 229.772 203.987 229.66 203.85 229.66 cv
203.712 229.66 203.6 229.772 203.6 229.91 cv
203.6 230.048 203.712 230.16 203.85 230.16 cv
203.987 230.16 204.1 230.048 204.1 229.91 cv
ef
216.25 224.25 mo
216.25 210.5 ln
216.25 210.5 mo
216.25 196.75 ln
210 210.5 mo
216.25 210.5 ln
216.25 210.5 mo
222.25 210.5 ln
s
216.58 210.47 mo
216.58 210.332 216.468 210.22 216.33 210.22 cv
216.191 210.22 216.08 210.332 216.08 210.47 cv
216.08 210.608 216.191 210.72 216.33 210.72 cv
216.468 210.72 216.58 210.608 216.58 210.47 cv
ef
228.5 194.25 mo
228.5 180 ln
228.5 180 mo
228.5 166 ln
222.25 180 mo
228.5 180 ln
228.5 180 mo
234.75 180 ln
s
228.819 179.99 mo
228.819 179.852 228.708 179.74 228.569 179.74 cv
228.432 179.74 228.319 179.852 228.319 179.99 cv
228.319 180.128 228.432 180.24 228.569 180.24 cv
228.708 180.24 228.819 180.128 228.819 179.99 cv
ef
241 159.75 mo
241 145.25 ln
241 145.25 mo
241 130.75 ln
234.75 145.25 mo
241 145.25 ln
241 145.25 mo
247 145.25 ln
s
241.3 145.19 mo
241.3 145.052 241.188 144.94 241.05 144.94 cv
240.912 144.94 240.8 145.052 240.8 145.19 cv
240.8 145.328 240.912 145.44 241.05 145.44 cv
241.188 145.44 241.3 145.328 241.3 145.19 cv
ef
253.25 128.75 mo
253.25 114 ln
253.25 114 mo
253.25 99.25 ln
247 114 mo
253.25 114 ln
253.25 114 mo
259.5 114 ln
s
253.54 113.99 mo
253.54 113.852 253.428 113.74 253.29 113.74 cv
253.151 113.74 253.04 113.852 253.04 113.99 cv
253.04 114.128 253.151 114.24 253.29 114.24 cv
253.428 114.24 253.54 114.128 253.54 113.99 cv
ef
265.75 155.75 mo
265.75 141 ln
265.75 141 mo
265.75 126 ln
259.5 141 mo
265.75 141 ln
265.75 141 mo
271.75 141 ln
s
266.02 140.99 mo
266.02 140.852 265.908 140.74 265.77 140.74 cv
265.632 140.74 265.52 140.852 265.52 140.99 cv
265.52 141.128 265.632 141.24 265.77 141.24 cv
265.908 141.24 266.02 141.128 266.02 140.99 cv
ef
278 233.5 mo
278 218.75 ln
278 218.75 mo
278 203.75 ln
271.75 218.75 mo
278 218.75 ln
278 218.75 mo
284.25 218.75 ln
s
278.26 218.75 mo
278.26 218.612 278.147 218.5 278.01 218.5 cv
277.872 218.5 277.76 218.612 277.76 218.75 cv
277.76 218.888 277.872 219 278.01 219 cv
278.147 219 278.26 218.888 278.26 218.75 cv
ef
290.5 243.25 mo
290.5 228.25 ln
290.5 228.25 mo
290.5 213.25 ln
284.25 228.25 mo
290.5 228.25 ln
290.5 228.25 mo
296.5 228.25 ln
s
290.74 228.23 mo
290.74 228.092 290.628 227.98 290.49 227.98 cv
290.352 227.98 290.24 228.092 290.24 228.23 cv
290.24 228.368 290.352 228.48 290.49 228.48 cv
290.628 228.48 290.74 228.368 290.74 228.23 cv
ef
302.75 245.75 mo
302.75 230.75 ln
302.75 230.75 mo
302.75 215.75 ln
296.5 230.75 mo
302.75 230.75 ln
302.75 230.75 mo
309 230.75 ln
s
302.979 230.75 mo
302.979 230.612 302.868 230.5 302.729 230.5 cv
302.592 230.5 302.479 230.612 302.479 230.75 cv
302.479 230.888 302.592 231 302.729 231 cv
302.868 231 302.979 230.888 302.979 230.75 cv
ef
315 297.75 mo
315 282.75 ln
315 282.75 mo
315 267.5 ln
309 282.75 mo
315 282.75 ln
315 282.75 mo
321.25 282.75 ln
s
315.22 282.71 mo
315.22 282.572 315.107 282.46 314.97 282.46 cv
314.832 282.46 314.72 282.572 314.72 282.71 cv
314.72 282.848 314.832 282.96 314.97 282.96 cv
315.107 282.96 315.22 282.848 315.22 282.71 cv
ef
327.5 290.25 mo
327.5 275.25 ln
327.5 275.25 mo
327.5 260 ln
321.25 275.25 mo
327.5 275.25 ln
327.5 275.25 mo
333.75 275.25 ln
s
327.7 275.27 mo
327.7 275.132 327.588 275.02 327.45 275.02 cv
327.312 275.02 327.2 275.132 327.2 275.27 cv
327.2 275.408 327.312 275.52 327.45 275.52 cv
327.588 275.52 327.7 275.408 327.7 275.27 cv
ef
339.75 290 mo
339.75 274.75 ln
339.75 274.75 mo
339.75 259.5 ln
333.75 274.75 mo
339.75 274.75 ln
339.75 274.75 mo
346 274.75 ln
s
339.939 274.79 mo
339.939 274.652 339.828 274.54 339.689 274.54 cv
339.552 274.54 339.439 274.652 339.439 274.79 cv
339.439 274.928 339.552 275.04 339.689 275.04 cv
339.828 275.04 339.939 274.928 339.939 274.79 cv
ef
352.25 274.25 mo
352.25 259 ln
352.25 259 mo
352.25 243.75 ln
346 259 mo
352.25 259 ln
352.25 259 mo
358.5 259 ln
s
352.42 258.95 mo
352.42 258.813 352.308 258.7 352.17 258.7 cv
352.032 258.7 351.92 258.813 351.92 258.95 cv
351.92 259.088 352.032 259.2 352.17 259.2 cv
352.308 259.2 352.42 259.088 352.42 258.95 cv
ef
364.5 308 mo
364.5 292.75 ln
364.5 292.75 mo
364.5 277.75 ln
358.5 292.75 mo
364.5 292.75 ln
364.5 292.75 mo
370.75 292.75 ln
s
364.66 292.79 mo
364.66 292.652 364.548 292.54 364.41 292.54 cv
364.271 292.54 364.16 292.652 364.16 292.79 cv
364.16 292.928 364.271 293.04 364.41 293.04 cv
364.548 293.04 364.66 292.928 364.66 292.79 cv
ef
377 308.25 mo
377 293.25 ln
377 293.25 mo
377 278 ln
370.75 293.25 mo
377 293.25 ln
377 293.25 mo
383.25 293.25 ln
s
377.14 293.27 mo
377.14 293.132 377.027 293.02 376.89 293.02 cv
376.752 293.02 376.64 293.132 376.64 293.27 cv
376.64 293.408 376.752 293.52 376.89 293.52 cv
377.027 293.52 377.14 293.408 377.14 293.27 cv
ef
389.25 301.5 mo
389.25 286.25 ln
389.25 286.25 mo
389.25 271.25 ln
383.25 286.25 mo
389.25 286.25 ln
389.25 286.25 mo
395.5 286.25 ln
s
389.5 286.31 mo
389.5 286.172 389.388 286.06 389.25 286.06 cv
389.112 286.06 389 286.172 389 286.31 cv
389 286.448 389.112 286.56 389.25 286.56 cv
389.388 286.56 389.5 286.448 389.5 286.31 cv
ef
401.75 305.25 mo
401.75 290.25 ln
401.75 290.25 mo
401.75 275 ln
395.5 290.25 mo
401.75 290.25 ln
401.75 290.25 mo
408 290.25 ln
s
402.1 290.15 mo
402.1 290.012 401.988 289.9 401.85 289.9 cv
401.712 289.9 401.6 290.012 401.6 290.15 cv
401.6 290.288 401.712 290.4 401.85 290.4 cv
401.988 290.4 402.1 290.288 402.1 290.15 cv
ef
414 314 mo
414 299 ln
414 299 mo
414 284 ln
408 299 mo
414 299 ln
414 299 mo
420.25 299 ln
s
414.34 299.03 mo
414.34 298.892 414.229 298.78 414.09 298.78 cv
413.952 298.78 413.84 298.892 413.84 299.03 cv
413.84 299.168 413.952 299.28 414.09 299.28 cv
414.229 299.28 414.34 299.168 414.34 299.03 cv
ef
426.5 309.75 mo
426.5 294.75 ln
426.5 294.75 mo
426.5 279.75 ln
420.25 294.75 mo
426.5 294.75 ln
426.5 294.75 mo
432.5 294.75 ln
s
426.82 294.71 mo
426.82 294.572 426.708 294.46 426.57 294.46 cv
426.432 294.46 426.32 294.572 426.32 294.71 cv
426.32 294.848 426.432 294.96 426.57 294.96 cv
426.708 294.96 426.82 294.848 426.82 294.71 cv
ef
438.75 308.25 mo
438.75 293.5 ln
438.75 293.5 mo
438.75 278.5 ln
432.5 293.5 mo
438.75 293.5 ln
438.75 293.5 mo
445 293.5 ln
s
439.06 293.51 mo
439.06 293.372 438.948 293.26 438.81 293.26 cv
438.672 293.26 438.56 293.372 438.56 293.51 cv
438.56 293.648 438.672 293.76 438.81 293.76 cv
438.948 293.76 439.06 293.648 439.06 293.51 cv
ef
451.25 320 mo
451.25 305.25 ln
451.25 305.25 mo
451.25 290.5 ln
445 305.25 mo
451.25 305.25 ln
451.25 305.25 mo
457.25 305.25 ln
s
451.54 305.27 mo
451.54 305.132 451.428 305.02 451.29 305.02 cv
451.152 305.02 451.04 305.132 451.04 305.27 cv
451.04 305.408 451.152 305.52 451.29 305.52 cv
451.428 305.52 451.54 305.408 451.54 305.27 cv
ef
463.5 314 mo
463.5 299.25 ln
463.5 299.25 mo
463.5 284.75 ln
457.25 299.25 mo
463.5 299.25 ln
463.5 299.25 mo
469.75 299.25 ln
s
463.78 299.27 mo
463.78 299.132 463.668 299.02 463.53 299.02 cv
463.392 299.02 463.28 299.132 463.28 299.27 cv
463.28 299.408 463.392 299.52 463.53 299.52 cv
463.668 299.52 463.78 299.408 463.78 299.27 cv
ef
476 321.5 mo
476 307 ln
476 307 mo
476 292.5 ln
469.75 307 mo
476 307 ln
476 307 mo
482 307 ln
s
476.26 306.95 mo
476.26 306.813 476.148 306.7 476.01 306.7 cv
475.872 306.7 475.76 306.813 475.76 306.95 cv
475.76 307.088 475.872 307.2 476.01 307.2 cv
476.148 307.2 476.26 307.088 476.26 306.95 cv
ef
488.25 309.5 mo
488.25 295 ln
488.25 295 mo
488.25 280.5 ln
482 295 mo
488.25 295 ln
488.25 295 mo
494.5 295 ln
s
488.5 294.95 mo
488.5 294.813 488.388 294.7 488.25 294.7 cv
488.112 294.7 488 294.813 488 294.95 cv
488 295.088 488.112 295.2 488.25 295.2 cv
488.388 295.2 488.5 295.088 488.5 294.95 cv
ef
500.75 349 mo
500.75 334.75 ln
500.75 334.75 mo
500.75 320.5 ln
494.5 334.75 mo
500.75 334.75 ln
500.75 334.75 mo
506.75 334.75 ln
s
500.98 334.79 mo
500.98 334.652 500.868 334.54 500.73 334.54 cv
500.592 334.54 500.48 334.652 500.48 334.79 cv
500.48 334.928 500.592 335.04 500.73 335.04 cv
500.868 335.04 500.98 334.928 500.98 334.79 cv
ef
513 335.75 mo
513 321.5 ln
513 321.5 mo
513 307.5 ln
506.75 321.5 mo
513 321.5 ln
513 321.5 mo
519.25 321.5 ln
s
513.22 321.59 mo
513.22 321.452 513.108 321.34 512.97 321.34 cv
512.832 321.34 512.72 321.452 512.72 321.59 cv
512.72 321.729 512.832 321.84 512.97 321.84 cv
513.108 321.84 513.22 321.729 513.22 321.59 cv
ef
525.5 347.75 mo
525.5 333.75 ln
525.5 333.75 mo
525.5 319.75 ln
519.25 333.75 mo
525.5 333.75 ln
525.5 333.75 mo
531.5 333.75 ln
s
525.7 333.83 mo
525.7 333.692 525.588 333.58 525.45 333.58 cv
525.313 333.58 525.2 333.692 525.2 333.83 cv
525.2 333.968 525.313 334.08 525.45 334.08 cv
525.588 334.08 525.7 333.968 525.7 333.83 cv
ef
537.75 346.25 mo
537.75 332.25 ln
537.75 332.25 mo
537.75 318.5 ln
531.5 332.25 mo
537.75 332.25 ln
537.75 332.25 mo
544 332.25 ln
s
537.94 332.15 mo
537.94 332.012 537.828 331.9 537.69 331.9 cv
537.552 331.9 537.44 332.012 537.44 332.15 cv
537.44 332.288 537.552 332.4 537.69 332.4 cv
537.828 332.4 537.94 332.288 537.94 332.15 cv
ef
550.25 344.5 mo
550.25 330.75 ln
550.25 330.75 mo
550.25 317.25 ln
544 330.75 mo
550.25 330.75 ln
550.25 330.75 mo
556.25 330.75 ln
s
550.42 330.71 mo
550.42 330.572 550.308 330.46 550.17 330.46 cv
550.032 330.46 549.92 330.572 549.92 330.71 cv
549.92 330.848 550.032 330.96 550.17 330.96 cv
550.308 330.96 550.42 330.848 550.42 330.71 cv
ef
562.5 343.75 mo
562.5 330.25 ln
562.5 330.25 mo
562.5 316.75 ln
556.25 330.25 mo
562.5 330.25 ln
562.5 330.25 mo
568.75 330.25 ln
s
562.66 330.23 mo
562.66 330.092 562.548 329.98 562.41 329.98 cv
562.272 329.98 562.16 330.092 562.16 330.23 cv
562.16 330.368 562.272 330.48 562.41 330.48 cv
562.548 330.48 562.66 330.368 562.66 330.23 cv
ef
574.75 340.5 mo
574.75 327 ln
574.75 327 mo
574.75 313.75 ln
568.75 327 mo
574.75 327 ln
574.75 327 mo
581 327 ln
s
574.9 326.99 mo
574.9 326.852 574.788 326.74 574.65 326.74 cv
574.512 326.74 574.4 326.852 574.4 326.99 cv
574.4 327.128 574.512 327.24 574.65 327.24 cv
574.788 327.24 574.9 327.128 574.9 326.99 cv
ef
587.25 356.25 mo
587.25 343 ln
587.25 343 mo
587.25 329.75 ln
581 343 mo
587.25 343 ln
587.25 343 mo
593.5 343 ln
s
587.5 342.95 mo
587.5 342.813 587.388 342.7 587.25 342.7 cv
587.112 342.7 587 342.813 587 342.95 cv
587 343.088 587.112 343.2 587.25 343.2 cv
587.388 343.2 587.5 343.088 587.5 342.95 cv
ef
599.5 346.5 mo
599.5 333.5 ln
599.5 333.5 mo
599.5 320.5 ln
593.5 333.5 mo
599.5 333.5 ln
599.5 333.5 mo
605.75 333.5 ln
s
599.74 333.59 mo
599.74 333.452 599.628 333.34 599.49 333.34 cv
599.352 333.34 599.24 333.452 599.24 333.59 cv
599.24 333.729 599.352 333.84 599.49 333.84 cv
599.628 333.84 599.74 333.729 599.74 333.59 cv
ef
612 341.75 mo
612 329 ln
612 329 mo
612 316 ln
605.75 329 mo
612 329 ln
612 329 mo
618.25 329 ln
s
612.34 329.03 mo
612.34 328.892 612.229 328.78 612.09 328.78 cv
611.952 328.78 611.84 328.892 611.84 329.03 cv
611.84 329.168 611.952 329.28 612.09 329.28 cv
612.229 329.28 612.34 329.168 612.34 329.03 cv
ef
624.25 344.5 mo
624.25 331.75 ln
624.25 331.75 mo
624.25 319.25 ln
618.25 331.75 mo
624.25 331.75 ln
624.25 331.75 mo
630.5 331.75 ln
s
624.58 331.67 mo
624.58 331.532 624.468 331.42 624.33 331.42 cv
624.192 331.42 624.08 331.532 624.08 331.67 cv
624.08 331.808 624.192 331.92 624.33 331.92 cv
624.468 331.92 624.58 331.808 624.58 331.67 cv
ef
2.25 lw
137.75 270 mo
141.75 269.5 ln
145.75 268.75 ln
149.75 268.25 ln
153.75 267.5 ln
157.75 266.5 ln
162 265.5 ln
166 264.25 ln
170 262.75 ln
174 261.25 ln
178 259.25 ln
182 257 ln
186 254.25 ln
190 251.25 ln
194 247.75 ln
198 243.5 ln
202 238.5 ln
206 232.5 ln
210.25 225.5 ln
214.25 217.5 ln
218.25 208 ln
222.25 197.25 ln
226.25 185 ln
230.25 171.5 ln
234.25 157.5 ln
238.25 143.5 ln
242.25 131.5 ln
246.25 122.75 ln
250.25 118.75 ln
254.25 120.5 ln
258.25 127.75 ln
262.5 139.25 ln
266.5 153.25 ln
270.5 168 ln
274.5 182.75 ln
278.5 196.25 ln
282.5 208.5 ln
286.5 219.5 ln
290.5 229 ln
294.5 237.25 ln
298.5 244.25 ln
302.5 250.5 ln
306.5 255.75 ln
310.75 260.5 ln
314.75 264.5 ln
318.75 268.25 ln
322.75 271.25 ln
326.75 274.25 ln
330.75 276.75 ln
334.75 279 ln
334.75 279 mo
338.75 281 ln
342.75 283 ln
346.75 284.5 ln
350.75 286.25 ln
354.75 287.75 ln
358.75 289 ln
363 290.25 ln
367 291.5 ln
371 292.5 ln
375 293.5 ln
379 294.5 ln
383 295.5 ln
387 296.25 ln
391 297.25 ln
395 298 ln
399 298.75 ln
403 299.5 ln
407 300.25 ln
411.25 300.75 ln
415.25 301.5 ln
419.25 302.25 ln
423.25 302.75 ln
427.25 303.5 ln
431.25 304 ln
435.25 304.5 ln
439.25 305.25 ln
443.25 305.75 ln
447.25 306.25 ln
451.25 306.75 ln
455.25 307.25 ln
459.25 307.75 ln
463.5 308.25 ln
467.5 308.75 ln
471.5 309.25 ln
475.5 309.75 ln
479.5 310.25 ln
483.5 310.75 ln
487.5 311.25 ln
491.5 311.75 ln
495.5 312.25 ln
499.5 312.75 ln
503.5 313.25 ln
507.5 313.5 ln
511.75 314 ln
515.75 314.5 ln
519.75 315 ln
523.75 315.25 ln
527.75 315.75 ln
531.75 316.25 ln
531.75 316.25 mo
535.75 316.75 ln
0.00784314 0.952941 0 0 cmyk
s
0.75 lw
86.25 380.5 mo
630.5 380.5 ln
0 0 0 1 cmyk
s
save_ctm
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec117da7ee51b33a5a233cda9aa5c3> ND 
/parenright 
<10bf31703a9458c05d79d3ca9c0e25cc2a0a66a567f83e7a9d7321273dd6
91f0a03409afbde1e095be0f2f1ac4ecb4a098aeb71eedbaac852ce8b071
c8aa4ee4536be21e2fdb4e1b96f0c52789> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
41{/.notdef}repeat /parenright 214{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
622.25 424.75 mov
(\)) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/two 
<10bf31705ac903dc9a7655fb1cbe190d27478cd71b680cdd27c584201637
c4fe4b4b405b52ad89527914216baf3bd85ff2c208cb4a52be16604c8a50
dcecbfd5642891867b96216314c81c0e3dfc8fa082d8d8198205214fcd51
241f5962d19caf30548d3aa5d6ec1b5522e103ca20bbd3a0a24f1b42f046
b615f5396ae95aa136f86bb447b4a68e017a7700f7b41cde733dee861b37
3d8f> ND 
end end
end
/ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ArialMT*2 
[
50{/.notdef}repeat /two 205{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*2 findfont [16 0 0 -16 0 0 ]mfnt sfnt
BuildWidthShowArray
612.5 413 mov
(2) sh
restore_ctm
151.25 369.5 mo
151.25 380.5 ln
166.75 375 mo
166.75 380.5 ln
182.25 375 mo
182.25 380.5 ln
197.5 375 mo
197.5 380.5 ln
213 375 mo
213 380.5 ln
228.5 369.5 mo
228.5 380.5 ln
244 375 mo
244 380.5 ln
259.5 375 mo
259.5 380.5 ln
275 375 mo
275 380.5 ln
290.5 375 mo
290.5 380.5 ln
305.75 369.5 mo
305.75 380.5 ln
321.25 375 mo
321.25 380.5 ln
336.75 375 mo
336.75 380.5 ln
352.25 375 mo
352.25 380.5 ln
367.75 375 mo
367.75 380.5 ln
383.25 369.5 mo
383.25 380.5 ln
398.5 375 mo
398.5 380.5 ln
414 375 mo
414 380.5 ln
429.5 375 mo
429.5 380.5 ln
445 375 mo
445 380.5 ln
460.5 369.5 mo
460.5 380.5 ln
476 375 mo
476 380.5 ln
491.5 375 mo
491.5 380.5 ln
506.75 375 mo
506.75 380.5 ln
522.25 375 mo
522.25 380.5 ln
537.75 369.5 mo
537.75 380.5 ln
553.25 375 mo
553.25 380.5 ln
568.75 375 mo
568.75 380.5 ln
584.25 375 mo
584.25 380.5 ln
599.5 375 mo
599.5 380.5 ln
615 369.5 mo
615 380.5 ln
151.25 369.5 mo
151.25 380.5 ln
135.75 375 mo
135.75 380.5 ln
120.25 375 mo
120.25 380.5 ln
104.75 375 mo
104.75 380.5 ln
89.25 375 mo
89.25 380.5 ln
615 369.5 mo
615 380.5 ln
630.5 375 mo
630.5 380.5 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/space 
<10bf317079c7734bf7> ND 
/parenleft 
<10bf31703a9458c05db7ba7a58bcd7a2c9e91ffe666c97ce46717156d1cb
9be91454dd31d143e460cb34ec06d1f2228e435638d9aa27a9bed7243c7e
cc188b1c2069f6d3ef0b0a370df45685e4ba> ND 
/slash 
<10bf317079c7734b2b2d10870fa08bf22c5d2d2b831224fa01d492> ND 
/G 
<10bf317032094fc341dd3fe1e9917e7219e3088328e93e3f86c5266dab4a
4b6a0dbbd499ac2f08f52498a1230ac74b9126578260e72bf920c6626e18
e52befca2ad4c5c494a757a5861d225d61833e7b6db104708e0fcf59a03e
ddf773c2fe0a4faea092dc7a4d01275005fb3564e1d1f76f67c0ded9002e
e506fbb65143c90d6526880b9b4967a1233028aa9e8c3e30f59ec7f29cd2
713cffb71673b8ee9c01e77581750db787f4754cdac76007b210e32a2dfc
77791af6ea67a232e72999312d> ND 
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638bbfe80126114fe37407e2e312c7bcbd2c
1b7b9e7fac2817224e19> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e231374dce1d715d27566dcf
115e95280405ef7103dd8183790f381980b4f25c32c305> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996afd8e100af13d8e4b339158b9d4e
0256bc0329e2558ef3a479ac944060941a5a0ef5dc04c7a41bce2731b9f6
bac3899bfe4b490bb12e4abb60728f8dd08e79a22a9692e2e377b4d6d5c9
90d58983bd1034efca9e5a712e5fac945f9b4432273fa80564af2b96e4b5
70911aa8878cafbb79a548cdf67b5fd07c85ed1a9f7575ac0b1cdc57118f
0bc5ec90d16e3c70642d41ebc8d851a2770f7e9e3366dcaea1eeafe88adc
1075a75e7e694b5e09e5b68c30faa47727bbcc80df324abdee2341fefa79
33b84bfd3fdf5d94b0c28761234c47086bfdc62b798b> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a974ca8bfdce94e11266bf025cb7
0165d6854d700d70cc5444b9f61253adefae30a0411da65b303e54163273
771b8917fdcb996d46a918dadbf0ac7f3fc07110b5e4794547b6eff7de49
7e69fc6e8381938653cd90c476c4aee37f40cb1165ebe6f2b5655eacf33b
1b7c58ec799cd6ac7895a51a3f59a1ac6ba84d> ND 
/e 
<10bf3170422fdb64737aa996af2c16ab61f139259ccfce996f56e5f89332
9f7b50633061a72210c8a6b5d13fe3bb9b88ba842302ec1ae1e32bf6cd49
8b054e2c54c7892b319ccb1b99d65997437b14ddcef375af397068617b4b
a8b59dc2e0e5b584c508b01db96b294c218d115c2d03379ed774785408d4
3e0cb3b8511668ef559f40e3101d956d8627deece251b2315f5de4af> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc333efe38edc6b37b1ff48956
90e91a6df105656658715dd87021b65972ac13dc8aee35ad2f1e0b304a70
d3e1196ff9e3f237aaac2ee9c5140172156ad6cf230f4b01e597d6a59503
d7dcf365e09d2dea787d9e411b> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3490b93b478f689beebddc801
f9ab05d95370b6f2d5e4eaf0e05d2c29f4d91b00084ec9f87aa58fda4ad7
8d5d66fcc7e8afb13d634e9fe58c768d42> ND 
/s 
<10bf3170586c182310772ef569c52e8bfad70b259ad08351d1ee7f8301db
56e87b60c2698b50b73e6d27e51b4b4c4de13e01b73b0e93916fb4e9bc20
eb2383ce966a3f407cc2dd34fe3886d20337fe9b35727881532b2484bb21
37910e0951e4ed8d0834c0f1ea6967e8f5ec97508509903e613c902ab20a
2584a430e00608bec28b5ad77a90ca85cabc0e7931cda83a171815946dc1
e37a6e5968afc67def1b22528a96d5ff182bfd780f19cd36c8689597438e
a97ac397a0bce69309b562a1ba4d9173f5cede5262ffcd19389598a980ab
b12fde1b7188b7ce2e37fd5029f6095ff151c09be98b02a5038a> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9d32cbb67063a44c2c579f
7dba63b8a612937552c38cfc68b9f17d05d08d58687391f101de93fd2f30
d5e833c8aacf98899b18432278e92a0d2275e63883c0cd03457cf82bca12
c1f9c768ea5fd825ff7fce65> ND 
/v 
<10bf31706ae07dd17dfc9e3ad4fb8a8843b0ccd3bf37159e4d997ae7db46
1605af60e723de30a8f7915cee06ac348ee0e2ad17e20e> ND 
end end
end
/ArialMT findfont /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 47 /slash put
dup 71 /G put
dup 73 /I put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
pop
%ADOEndSubsetFont
/ArialMT*3 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft 6{/.notdef}repeat /slash 23{/.notdef}repeat /G 
/.notdef /I 3{/.notdef}repeat /M 8{/.notdef}repeat /V 10{/.notdef}repeat /a 
/.notdef /c /.notdef /e 3{/.notdef}repeat /i 4{/.notdef}repeat /n 
3{/.notdef}repeat /r /s /t /.notdef /v 137{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*3 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
403.75 424.75 mov
(Invariant Mass \(GeV/c) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa65d2deb616de
81764a74cb84561e60b2b8778364d43e0dccd64e05939ef2243c> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f72e955f0050b5472
6b68794743aa9e2640fbbbe965e5c7462a0da2fe3396d6994552b6fd7b9f
c3a7f776be319813ddb449d1a761c2a25379bcdbddb59583b40898699b48
1611e523f8146fbaea058eb8237d1f8ef6c080ecb39f96cb6c0db3e3c586
248bc7c61f659dbd2f8aadac81a2448e7137d524> ND 
end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
dup 49 /one put
dup 52 /four put
dup 53 /five put
pop
%ADOEndSubsetFont
/ArialMT*4 
[
46{/.notdef}repeat /period 2{/.notdef}repeat /one 2{/.notdef}repeat /four /five 202{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
129.75 398.5 mov
(1.45) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
213.75 398.5 mov
(1.5) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
284 398.5 mov
(1.55) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
368.25 398.5 mov
(1.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/six 
<10bf3170435d0d4425184fc061c7faa8dc6baee8c868da453cb6a6f891b2
5354e14cb1bc5e0a0fcae04743a9daec5483058e0dde89957524c8915b19
25146f588ef5a70cf81e2e4fc7890fddf0f5d4c16f77c4469f58479cdd1b
49f5c68eada3087814223d9b5aa8284ce9770f7175297744c20f41a48dc8
d286517deb8893f3230571eaf9ea1ba0abf787d646e1631373082ff4df40
4c74838bb86fd789e63cac0da4dceabebd4d0fc0472fd6a9ca90e64e3c08
8853c020aae52cb442800bb6081c0fefcb0a206f46cf4ec1e25c13c94cbb
330a8f2762> ND 
end end
end
/ArialMT findfont /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ArialMT*5 
[
54{/.notdef}repeat /six 201{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
385.764 398.5 mov
(6) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
438.5 398.5 mov
(1.) sh
/ArialMT*5 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
456.014 398.5 mov
(6) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
467.693 398.5 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
522.5 398.5 mov
(1.) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/seven 
<10bf317048559e9c292b4762aa54ba120a145df60b670d87c36c3ee92d5b
39c9648a6d5ce1131c9257911f8bc7e67b7a2848cf37308ba0025304ca48
4c163915b2d4c913b4486d09> ND 
end end
end
/ArialMT findfont /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/ArialMT*6 
[
55{/.notdef}repeat /seven 200{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
540.014 398.5 mov
(7) sh
restore_ctm
86.25 380.5 mo
86.25 11.5 ln
s
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
593 398.5 mov
(1.) sh
/ArialMT*6 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
610.514 398.5 mov
(7) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
622.193 398.5 mov
(5) sh
restore_ctm
save_ctm
/ArialMT*1 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 59.25 mov
(\)) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [0 -16 -16 0 0 0 ]mfnt sfnt
BuildWidthShowArray
16 69 mov
(2) sh
restore_ctm
102.5 380.5 mo
86.25 380.5 ln
94.5 368.25 mo
86.25 368.25 ln
94.5 356 mo
86.25 356 ln
94.5 343.75 mo
86.25 343.75 ln
94.5 331.5 mo
86.25 331.5 ln
102.5 319 mo
86.25 319 ln
94.5 306.75 mo
86.25 306.75 ln
94.5 294.5 mo
86.25 294.5 ln
94.5 282.25 mo
86.25 282.25 ln
94.5 270 mo
86.25 270 ln
102.5 257.5 mo
86.25 257.5 ln
94.5 245.25 mo
86.25 245.25 ln
94.5 233 mo
86.25 233 ln
94.5 220.75 mo
86.25 220.75 ln
94.5 208.25 mo
86.25 208.25 ln
102.5 196 mo
86.25 196 ln
94.5 183.75 mo
86.25 183.75 ln
94.5 171.5 mo
86.25 171.5 ln
94.5 159.25 mo
86.25 159.25 ln
94.5 146.75 mo
86.25 146.75 ln
102.5 134.5 mo
86.25 134.5 ln
94.5 122.25 mo
86.25 122.25 ln
94.5 110 mo
86.25 110 ln
94.5 97.75 mo
86.25 97.75 ln
94.5 85.25 mo
86.25 85.25 ln
102.5 73 mo
86.25 73 ln
94.5 60.75 mo
86.25 60.75 ln
94.5 48.5 mo
86.25 48.5 ln
94.5 36.25 mo
86.25 36.25 ln
94.5 23.75 mo
86.25 23.75 ln
102.5 11.5 mo
86.25 11.5 ln
s
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6f92fe7d0382cbfbcdc7b1ae90f5804442d3ad6d5e65
ea646fb35cdd7e11033e2adda681e7c859039849d6dc5ed2ddeff6a08225
d8f51551f3de1fe8a008c3292192037d710bd142b0870ce031e718da3ef6
d3433e72ed0f460e2a4d68b080691bc3e7e1f307fb1e0e53bcb7db60f146
7b82fe22e2d41fbef278c3fdcb5b6d458b0439abc5768f2ce7c9570fa1d6
c4be1808a48200bf465a45f457def4538c8fb72d6cd74c82c40277b5b6e7
fea6be29486ac098b8cb486a6ef4b50bb3d786b334b9913c9609ad75ea2f
ed8e7505ac0f1bb96c923835d10b3ab9> ND 
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153f04f4f888
a9793af1cdd76cf42c98e3b7c6efff30aedf23874b961a5a7d8352571859
f2ee15399c0c2d0f0e789c04eb8ab69e8694b49d1cdc36041f81732689ae
c7de70103ef45c5aac1fa0ded9e2cebee882d4e31e26d9203d2435459b9d
1e92bd9bcf321ca456fc2c8b25bf9b414bd39bc63d4e221a0d6aa6fccdc3
c8a808e6ed39733b2c7e47> ND 
/o 
<10bf31705e921373942a1df751ebc6dc1f8ba1849e5d0b813201a0c14072
56efd5ac73b2cc94d73ea025d660f576b0dc46e6510eb657538743c037a9
ef3f1df5fa8600ba31cfa9fb018633830dedfb133aaa4477d4caef3c149d
68283dde65fde31ff05fe29c87c2dcf980686664a1ba1e9317bc4e3671a3
dde8af03d654a3b9278e18f5d604ca7d7f> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa6856179aa35682765
116a1fce2021f370819ea26a9108d7928db21a13158b5ced94492fe7e095
3993158ecb758a77b01eed67c0a218243c618920ead85b637cd5a89e8294
2747d1c7afc089a86d68b6aaa0f7ce5339d56f1a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 56 /eight put
dup 67 /C put
dup 111 /o put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*7 
[
56{/.notdef}repeat /eight 10{/.notdef}repeat /C 43{/.notdef}repeat /o 5{/.notdef}repeat /u 
138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*7 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 226.25 mov
(Cou) sh
/ArialMT*3 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 187.726 mov
(nts/\() sh
/ArialMT*7 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 146.885 mov
(8) sh
/ArialMT*3 findfont [0 -21 -21 0 0 0 ]mfnt sfnt
BuildWidthShowArray
27.75 135.206 mov
( MeV/c) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a1b815a9489d0b76c2a7
a1a44437723fc43a852d949290ad7a94a1b5ad5d7322465603110eea2d34
77620e1e4669220215496cab2a0eab44d5f5a2aab469817248ea06bfb997
f90d6b2f8be1b84eb637a6b37416b9391721d5ec95d3f2f0eeec0c5e7a85
f8647832e3b8bcd2e059dfd8583597637d69623cfac7cc5daff6f821c790
30573bd941aa88a58c5fdad07dc0f98e8a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 45 /hyphen put
dup 48 /zero put
pop
%ADOEndSubsetFont
/ArialMT*8 
[
45{/.notdef}repeat /hyphen 2{/.notdef}repeat /zero 207{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
31.6152 389.5 mov
(-) sh
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
38.6084 389.5 mov
(1) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
50.2876 389.5 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
69.6152 328 mov
(0) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
35.6152 266.5 mov
(1) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.2944 266.5 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*2 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
35.6152 205.75 mov
(2) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.2944 205.75 mov
(000) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/three 
<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d89951110b
adeffb560aa54e338c9127425b06cefdd1d949874d4622c9b30b369b86fa
41b317af240e3deeaa1e9f5a90a07b28e40380e054c3662afb1cf6f51c11
b6836151d28c225e6c4d1016d9fa730c1bf86c199f942682434f25971f32
ae953f8b74fbb716bed8520757e61bce7cf6be4a92865d3717d39c92f18c
1b406caa6c3ed07ea5ff15dde83aea7d31b62642cc5c322a42f14367085d
78b35ebe75a37abae90e77a72aa751401d5e1988c4445fb51991681b7fd3
6a> ND 
end end
end
/ArialMT findfont /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ArialMT*9 
[
51{/.notdef}repeat /three 204{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*9 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
35.6152 144.25 mov
(3) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.2944 144.25 mov
(000) sh
restore_ctm
save_ctm
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
35.6152 82.75 mov
(4) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.2944 82.75 mov
(000) sh
restore_ctm
117.25 317.5 mo
117.25 317 ln
117.25 317 mo
117.25 316.75 ln
111 317 mo
117.25 317 ln
117.25 317 mo
123.5 317 ln
s
117.46 317.03 mo
117.46 316.892 117.348 316.78 117.21 316.78 cv
117.072 316.78 116.96 316.892 116.96 317.03 cv
116.96 317.168 117.072 317.28 117.21 317.28 cv
117.348 317.28 117.46 317.168 117.46 317.03 cv
ef
142 274.75 mo
142 265.5 ln
142 265.5 mo
142 256.5 ln
135.75 265.5 mo
142 265.5 ln
142 265.5 mo
148.25 265.5 ln
s
142.18 265.43 mo
142.18 265.292 142.067 265.18 141.93 265.18 cv
141.792 265.18 141.68 265.292 141.68 265.43 cv
141.68 265.568 141.792 265.68 141.93 265.68 cv
142.067 265.68 142.18 265.568 142.18 265.43 cv
ef
154.25 290.25 mo
154.25 279.75 ln
154.25 279.75 mo
154.25 269.5 ln
148.25 279.75 mo
154.25 279.75 ln
154.25 279.75 mo
160.5 279.75 ln
s
154.42 279.83 mo
154.42 279.692 154.308 279.58 154.17 279.58 cv
154.032 279.58 153.92 279.692 153.92 279.83 cv
153.92 279.968 154.032 280.08 154.17 280.08 cv
154.308 280.08 154.42 279.968 154.42 279.83 cv
ef
166.75 283.5 mo
166.75 272.25 ln
166.75 272.25 mo
166.75 260.75 ln
160.5 272.25 mo
166.75 272.25 ln
166.75 272.25 mo
172.75 272.25 ln
s
166.899 272.15 mo
166.899 272.012 166.788 271.9 166.649 271.9 cv
166.512 271.9 166.399 272.012 166.399 272.15 cv
166.399 272.288 166.512 272.4 166.649 272.4 cv
166.788 272.4 166.899 272.288 166.899 272.15 cv
ef
179 296.25 mo
179 284 ln
179 284 mo
179 272 ln
172.75 284 mo
179 284 ln
179 284 mo
185.25 284 ln
s
179.14 283.91 mo
179.14 283.772 179.027 283.66 178.89 283.66 cv
178.752 283.66 178.64 283.772 178.64 283.91 cv
178.64 284.048 178.752 284.16 178.89 284.16 cv
179.027 284.16 179.14 284.048 179.14 283.91 cv
ef
191.5 230 mo
191.5 217 ln
191.5 217 mo
191.5 204 ln
185.25 217 mo
191.5 217 ln
191.5 217 mo
197.5 217 ln
s
191.74 216.95 mo
191.74 216.813 191.628 216.7 191.49 216.7 cv
191.352 216.7 191.24 216.813 191.24 216.95 cv
191.24 217.088 191.352 217.2 191.49 217.2 cv
191.628 217.2 191.74 217.088 191.74 216.95 cv
ef
203.75 243.5 mo
203.75 230 ln
203.75 230 mo
203.75 216.75 ln
197.5 230 mo
203.75 230 ln
203.75 230 mo
210 230 ln
s
204.1 229.91 mo
204.1 229.772 203.987 229.66 203.85 229.66 cv
203.712 229.66 203.6 229.772 203.6 229.91 cv
203.6 230.048 203.712 230.16 203.85 230.16 cv
203.987 230.16 204.1 230.048 204.1 229.91 cv
ef
216.25 224.25 mo
216.25 210.5 ln
216.25 210.5 mo
216.25 196.75 ln
210 210.5 mo
216.25 210.5 ln
216.25 210.5 mo
222.25 210.5 ln
s
216.58 210.47 mo
216.58 210.332 216.468 210.22 216.33 210.22 cv
216.191 210.22 216.08 210.332 216.08 210.47 cv
216.08 210.608 216.191 210.72 216.33 210.72 cv
216.468 210.72 216.58 210.608 216.58 210.47 cv
ef
228.5 194.25 mo
228.5 180 ln
228.5 180 mo
228.5 166 ln
222.25 180 mo
228.5 180 ln
228.5 180 mo
234.75 180 ln
s
228.819 179.99 mo
228.819 179.852 228.708 179.74 228.569 179.74 cv
228.432 179.74 228.319 179.852 228.319 179.99 cv
228.319 180.128 228.432 180.24 228.569 180.24 cv
228.708 180.24 228.819 180.128 228.819 179.99 cv
ef
241 159.75 mo
241 145.25 ln
241 145.25 mo
241 130.75 ln
234.75 145.25 mo
241 145.25 ln
241 145.25 mo
247 145.25 ln
s
241.3 145.19 mo
241.3 145.052 241.188 144.94 241.05 144.94 cv
240.912 144.94 240.8 145.052 240.8 145.19 cv
240.8 145.328 240.912 145.44 241.05 145.44 cv
241.188 145.44 241.3 145.328 241.3 145.19 cv
ef
253.25 128.75 mo
253.25 114 ln
253.25 114 mo
253.25 99.25 ln
247 114 mo
253.25 114 ln
253.25 114 mo
259.5 114 ln
s
253.54 113.99 mo
253.54 113.852 253.428 113.74 253.29 113.74 cv
253.151 113.74 253.04 113.852 253.04 113.99 cv
253.04 114.128 253.151 114.24 253.29 114.24 cv
253.428 114.24 253.54 114.128 253.54 113.99 cv
ef
265.75 155.75 mo
265.75 141 ln
265.75 141 mo
265.75 126 ln
259.5 141 mo
265.75 141 ln
265.75 141 mo
271.75 141 ln
s
266.02 140.99 mo
266.02 140.852 265.908 140.74 265.77 140.74 cv
265.632 140.74 265.52 140.852 265.52 140.99 cv
265.52 141.128 265.632 141.24 265.77 141.24 cv
265.908 141.24 266.02 141.128 266.02 140.99 cv
ef
278 233.5 mo
278 218.75 ln
278 218.75 mo
278 203.75 ln
271.75 218.75 mo
278 218.75 ln
278 218.75 mo
284.25 218.75 ln
s
278.26 218.75 mo
278.26 218.612 278.147 218.5 278.01 218.5 cv
277.872 218.5 277.76 218.612 277.76 218.75 cv
277.76 218.888 277.872 219 278.01 219 cv
278.147 219 278.26 218.888 278.26 218.75 cv
ef
290.5 243.25 mo
290.5 228.25 ln
290.5 228.25 mo
290.5 213.25 ln
284.25 228.25 mo
290.5 228.25 ln
290.5 228.25 mo
296.5 228.25 ln
s
290.74 228.23 mo
290.74 228.092 290.628 227.98 290.49 227.98 cv
290.352 227.98 290.24 228.092 290.24 228.23 cv
290.24 228.368 290.352 228.48 290.49 228.48 cv
290.628 228.48 290.74 228.368 290.74 228.23 cv
ef
302.75 245.75 mo
302.75 230.75 ln
302.75 230.75 mo
302.75 215.75 ln
296.5 230.75 mo
302.75 230.75 ln
302.75 230.75 mo
309 230.75 ln
s
302.979 230.75 mo
302.979 230.612 302.868 230.5 302.729 230.5 cv
302.592 230.5 302.479 230.612 302.479 230.75 cv
302.479 230.888 302.592 231 302.729 231 cv
302.868 231 302.979 230.888 302.979 230.75 cv
ef
315 297.75 mo
315 282.75 ln
315 282.75 mo
315 267.5 ln
309 282.75 mo
315 282.75 ln
315 282.75 mo
321.25 282.75 ln
s
315.22 282.71 mo
315.22 282.572 315.107 282.46 314.97 282.46 cv
314.832 282.46 314.72 282.572 314.72 282.71 cv
314.72 282.848 314.832 282.96 314.97 282.96 cv
315.107 282.96 315.22 282.848 315.22 282.71 cv
ef
327.5 290.25 mo
327.5 275.25 ln
327.5 275.25 mo
327.5 260 ln
321.25 275.25 mo
327.5 275.25 ln
327.5 275.25 mo
333.75 275.25 ln
s
327.7 275.27 mo
327.7 275.132 327.588 275.02 327.45 275.02 cv
327.312 275.02 327.2 275.132 327.2 275.27 cv
327.2 275.408 327.312 275.52 327.45 275.52 cv
327.588 275.52 327.7 275.408 327.7 275.27 cv
ef
339.75 290 mo
339.75 274.75 ln
339.75 274.75 mo
339.75 259.5 ln
333.75 274.75 mo
339.75 274.75 ln
339.75 274.75 mo
346 274.75 ln
s
339.939 274.79 mo
339.939 274.652 339.828 274.54 339.689 274.54 cv
339.552 274.54 339.439 274.652 339.439 274.79 cv
339.439 274.928 339.552 275.04 339.689 275.04 cv
339.828 275.04 339.939 274.928 339.939 274.79 cv
ef
352.25 274.25 mo
352.25 259 ln
352.25 259 mo
352.25 243.75 ln
346 259 mo
352.25 259 ln
352.25 259 mo
358.5 259 ln
s
352.42 258.95 mo
352.42 258.813 352.308 258.7 352.17 258.7 cv
352.032 258.7 351.92 258.813 351.92 258.95 cv
351.92 259.088 352.032 259.2 352.17 259.2 cv
352.308 259.2 352.42 259.088 352.42 258.95 cv
ef
364.5 308 mo
364.5 292.75 ln
364.5 292.75 mo
364.5 277.75 ln
358.5 292.75 mo
364.5 292.75 ln
364.5 292.75 mo
370.75 292.75 ln
s
364.66 292.79 mo
364.66 292.652 364.548 292.54 364.41 292.54 cv
364.271 292.54 364.16 292.652 364.16 292.79 cv
364.16 292.928 364.271 293.04 364.41 293.04 cv
364.548 293.04 364.66 292.928 364.66 292.79 cv
ef
377 308.25 mo
377 293.25 ln
377 293.25 mo
377 278 ln
370.75 293.25 mo
377 293.25 ln
377 293.25 mo
383.25 293.25 ln
s
377.14 293.27 mo
377.14 293.132 377.027 293.02 376.89 293.02 cv
376.752 293.02 376.64 293.132 376.64 293.27 cv
376.64 293.408 376.752 293.52 376.89 293.52 cv
377.027 293.52 377.14 293.408 377.14 293.27 cv
ef
389.25 301.5 mo
389.25 286.25 ln
389.25 286.25 mo
389.25 271.25 ln
383.25 286.25 mo
389.25 286.25 ln
389.25 286.25 mo
395.5 286.25 ln
s
389.5 286.31 mo
389.5 286.172 389.388 286.06 389.25 286.06 cv
389.112 286.06 389 286.172 389 286.31 cv
389 286.448 389.112 286.56 389.25 286.56 cv
389.388 286.56 389.5 286.448 389.5 286.31 cv
ef
401.75 305.25 mo
401.75 290.25 ln
401.75 290.25 mo
401.75 275 ln
395.5 290.25 mo
401.75 290.25 ln
401.75 290.25 mo
408 290.25 ln
s
402.1 290.15 mo
402.1 290.012 401.988 289.9 401.85 289.9 cv
401.712 289.9 401.6 290.012 401.6 290.15 cv
401.6 290.288 401.712 290.4 401.85 290.4 cv
401.988 290.4 402.1 290.288 402.1 290.15 cv
ef
414 314 mo
414 299 ln
414 299 mo
414 284 ln
408 299 mo
414 299 ln
414 299 mo
420.25 299 ln
s
414.34 299.03 mo
414.34 298.892 414.229 298.78 414.09 298.78 cv
413.952 298.78 413.84 298.892 413.84 299.03 cv
413.84 299.168 413.952 299.28 414.09 299.28 cv
414.229 299.28 414.34 299.168 414.34 299.03 cv
ef
426.5 309.75 mo
426.5 294.75 ln
426.5 294.75 mo
426.5 279.75 ln
420.25 294.75 mo
426.5 294.75 ln
426.5 294.75 mo
432.5 294.75 ln
s
426.82 294.71 mo
426.82 294.572 426.708 294.46 426.57 294.46 cv
426.432 294.46 426.32 294.572 426.32 294.71 cv
426.32 294.848 426.432 294.96 426.57 294.96 cv
426.708 294.96 426.82 294.848 426.82 294.71 cv
ef
438.75 308.25 mo
438.75 293.5 ln
438.75 293.5 mo
438.75 278.5 ln
432.5 293.5 mo
438.75 293.5 ln
438.75 293.5 mo
445 293.5 ln
s
439.06 293.51 mo
439.06 293.372 438.948 293.26 438.81 293.26 cv
438.672 293.26 438.56 293.372 438.56 293.51 cv
438.56 293.648 438.672 293.76 438.81 293.76 cv
438.948 293.76 439.06 293.648 439.06 293.51 cv
ef
451.25 320 mo
451.25 305.25 ln
451.25 305.25 mo
451.25 290.5 ln
445 305.25 mo
451.25 305.25 ln
451.25 305.25 mo
457.25 305.25 ln
s
451.54 305.27 mo
451.54 305.132 451.428 305.02 451.29 305.02 cv
451.152 305.02 451.04 305.132 451.04 305.27 cv
451.04 305.408 451.152 305.52 451.29 305.52 cv
451.428 305.52 451.54 305.408 451.54 305.27 cv
ef
463.5 314 mo
463.5 299.25 ln
463.5 299.25 mo
463.5 284.75 ln
457.25 299.25 mo
463.5 299.25 ln
463.5 299.25 mo
469.75 299.25 ln
s
463.78 299.27 mo
463.78 299.132 463.668 299.02 463.53 299.02 cv
463.392 299.02 463.28 299.132 463.28 299.27 cv
463.28 299.408 463.392 299.52 463.53 299.52 cv
463.668 299.52 463.78 299.408 463.78 299.27 cv
ef
476 321.5 mo
476 307 ln
476 307 mo
476 292.5 ln
469.75 307 mo
476 307 ln
476 307 mo
482 307 ln
s
476.26 306.95 mo
476.26 306.813 476.148 306.7 476.01 306.7 cv
475.872 306.7 475.76 306.813 475.76 306.95 cv
475.76 307.088 475.872 307.2 476.01 307.2 cv
476.148 307.2 476.26 307.088 476.26 306.95 cv
ef
488.25 309.5 mo
488.25 295 ln
488.25 295 mo
488.25 280.5 ln
482 295 mo
488.25 295 ln
488.25 295 mo
494.5 295 ln
s
488.5 294.95 mo
488.5 294.813 488.388 294.7 488.25 294.7 cv
488.112 294.7 488 294.813 488 294.95 cv
488 295.088 488.112 295.2 488.25 295.2 cv
488.388 295.2 488.5 295.088 488.5 294.95 cv
ef
500.75 349 mo
500.75 334.75 ln
500.75 334.75 mo
500.75 320.5 ln
494.5 334.75 mo
500.75 334.75 ln
500.75 334.75 mo
506.75 334.75 ln
s
500.98 334.79 mo
500.98 334.652 500.868 334.54 500.73 334.54 cv
500.592 334.54 500.48 334.652 500.48 334.79 cv
500.48 334.928 500.592 335.04 500.73 335.04 cv
500.868 335.04 500.98 334.928 500.98 334.79 cv
ef
513 335.75 mo
513 321.5 ln
513 321.5 mo
513 307.5 ln
506.75 321.5 mo
513 321.5 ln
513 321.5 mo
519.25 321.5 ln
s
513.22 321.59 mo
513.22 321.452 513.108 321.34 512.97 321.34 cv
512.832 321.34 512.72 321.452 512.72 321.59 cv
512.72 321.729 512.832 321.84 512.97 321.84 cv
513.108 321.84 513.22 321.729 513.22 321.59 cv
ef
525.5 347.75 mo
525.5 333.75 ln
525.5 333.75 mo
525.5 319.75 ln
519.25 333.75 mo
525.5 333.75 ln
525.5 333.75 mo
531.5 333.75 ln
s
525.7 333.83 mo
525.7 333.692 525.588 333.58 525.45 333.58 cv
525.313 333.58 525.2 333.692 525.2 333.83 cv
525.2 333.968 525.313 334.08 525.45 334.08 cv
525.588 334.08 525.7 333.968 525.7 333.83 cv
ef
537.75 346.25 mo
537.75 332.25 ln
537.75 332.25 mo
537.75 318.5 ln
531.5 332.25 mo
537.75 332.25 ln
537.75 332.25 mo
544 332.25 ln
s
537.94 332.15 mo
537.94 332.012 537.828 331.9 537.69 331.9 cv
537.552 331.9 537.44 332.012 537.44 332.15 cv
537.44 332.288 537.552 332.4 537.69 332.4 cv
537.828 332.4 537.94 332.288 537.94 332.15 cv
ef
550.25 344.5 mo
550.25 330.75 ln
550.25 330.75 mo
550.25 317.25 ln
544 330.75 mo
550.25 330.75 ln
550.25 330.75 mo
556.25 330.75 ln
s
550.42 330.71 mo
550.42 330.572 550.308 330.46 550.17 330.46 cv
550.032 330.46 549.92 330.572 549.92 330.71 cv
549.92 330.848 550.032 330.96 550.17 330.96 cv
550.308 330.96 550.42 330.848 550.42 330.71 cv
ef
562.5 343.75 mo
562.5 330.25 ln
562.5 330.25 mo
562.5 316.75 ln
556.25 330.25 mo
562.5 330.25 ln
562.5 330.25 mo
568.75 330.25 ln
s
562.66 330.23 mo
562.66 330.092 562.548 329.98 562.41 329.98 cv
562.272 329.98 562.16 330.092 562.16 330.23 cv
562.16 330.368 562.272 330.48 562.41 330.48 cv
562.548 330.48 562.66 330.368 562.66 330.23 cv
ef
574.75 340.5 mo
574.75 327 ln
574.75 327 mo
574.75 313.75 ln
568.75 327 mo
574.75 327 ln
574.75 327 mo
581 327 ln
s
574.9 326.99 mo
574.9 326.852 574.788 326.74 574.65 326.74 cv
574.512 326.74 574.4 326.852 574.4 326.99 cv
574.4 327.128 574.512 327.24 574.65 327.24 cv
574.788 327.24 574.9 327.128 574.9 326.99 cv
ef
587.25 356.25 mo
587.25 343 ln
587.25 343 mo
587.25 329.75 ln
581 343 mo
587.25 343 ln
587.25 343 mo
593.5 343 ln
s
587.5 342.95 mo
587.5 342.813 587.388 342.7 587.25 342.7 cv
587.112 342.7 587 342.813 587 342.95 cv
587 343.088 587.112 343.2 587.25 343.2 cv
587.388 343.2 587.5 343.088 587.5 342.95 cv
ef
599.5 346.5 mo
599.5 333.5 ln
599.5 333.5 mo
599.5 320.5 ln
593.5 333.5 mo
599.5 333.5 ln
599.5 333.5 mo
605.75 333.5 ln
s
599.74 333.59 mo
599.74 333.452 599.628 333.34 599.49 333.34 cv
599.352 333.34 599.24 333.452 599.24 333.59 cv
599.24 333.729 599.352 333.84 599.49 333.84 cv
599.628 333.84 599.74 333.729 599.74 333.59 cv
ef
612 341.75 mo
612 329 ln
612 329 mo
612 316 ln
605.75 329 mo
612 329 ln
612 329 mo
618.25 329 ln
s
612.34 329.03 mo
612.34 328.892 612.229 328.78 612.09 328.78 cv
611.952 328.78 611.84 328.892 611.84 329.03 cv
611.84 329.168 611.952 329.28 612.09 329.28 cv
612.229 329.28 612.34 329.168 612.34 329.03 cv
ef
624.25 344.5 mo
624.25 331.75 ln
624.25 331.75 mo
624.25 319.25 ln
618.25 331.75 mo
624.25 331.75 ln
624.25 331.75 mo
630.5 331.75 ln
s
624.58 331.67 mo
624.58 331.532 624.468 331.42 624.33 331.42 cv
624.192 331.42 624.08 331.532 624.08 331.67 cv
624.08 331.808 624.192 331.92 624.33 331.92 cv
624.468 331.92 624.58 331.808 624.58 331.67 cv
ef
0 0 0 1 cmyk
/ArialMT*4 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
35.6152 21 mov
(5) sh
/ArialMT*8 findfont [21 0 0 -21 0 0 ]mfnt sfnt
BuildWidthShowArray
47.2944 21 mov
(000) sh
2.25 lw
137.75 270 mo
141.75 269.5 ln
145.75 268.75 ln
149.75 268.25 ln
153.75 267.5 ln
157.75 266.5 ln
162 265.5 ln
166 264.25 ln
170 262.75 ln
174 261.25 ln
178 259.25 ln
182 257 ln
186 254.25 ln
190 251.25 ln
194 247.75 ln
198 243.5 ln
202 238.5 ln
206 232.5 ln
210.25 225.5 ln
214.25 217.5 ln
218.25 208 ln
222.25 197.25 ln
226.25 185 ln
230.25 171.5 ln
234.25 157.5 ln
238.25 143.5 ln
242.25 131.5 ln
246.25 122.75 ln
250.25 118.75 ln
254.25 120.5 ln
258.25 127.75 ln
262.5 139.25 ln
266.5 153.25 ln
270.5 168 ln
274.5 182.75 ln
278.5 196.25 ln
282.5 208.5 ln
286.5 219.5 ln
290.5 229 ln
294.5 237.25 ln
298.5 244.25 ln
302.5 250.5 ln
306.5 255.75 ln
310.75 260.5 ln
314.75 264.5 ln
318.75 268.25 ln
322.75 271.25 ln
326.75 274.25 ln
330.75 276.75 ln
334.75 279 ln
334.75 279 mo
338.75 281 ln
342.75 283 ln
346.75 284.5 ln
350.75 286.25 ln
354.75 287.75 ln
358.75 289 ln
363 290.25 ln
367 291.5 ln
371 292.5 ln
375 293.5 ln
379 294.5 ln
383 295.5 ln
387 296.25 ln
391 297.25 ln
395 298 ln
399 298.75 ln
403 299.5 ln
407 300.25 ln
411.25 300.75 ln
415.25 301.5 ln
419.25 302.25 ln
423.25 302.75 ln
427.25 303.5 ln
431.25 304 ln
435.25 304.5 ln
439.25 305.25 ln
443.25 305.75 ln
447.25 306.25 ln
451.25 306.75 ln
455.25 307.25 ln
459.25 307.75 ln
463.5 308.25 ln
467.5 308.75 ln
471.5 309.25 ln
475.5 309.75 ln
479.5 310.25 ln
483.5 310.75 ln
487.5 311.25 ln
491.5 311.75 ln
495.5 312.25 ln
499.5 312.75 ln
503.5 313.25 ln
507.5 313.5 ln
511.75 314 ln
515.75 314.5 ln
519.75 315 ln
523.75 315.25 ln
527.75 315.75 ln
531.75 316.25 ln
531.75 316.25 mo
535.75 316.75 ln
0.00784314 0.952941 0 0 cmyk
s
3 lw
137.75 270 mo
141.75 269.5 ln
145.75 268.75 ln
149.75 268.25 ln
153.75 267.5 ln
157.75 266.5 ln
162 265.5 ln
166 264.25 ln
170 262.75 ln
174 261.25 ln
178 259.25 ln
182 257 ln
186 254.25 ln
190 251.25 ln
194 247.75 ln
198 243.5 ln
202 238.5 ln
206 232.5 ln
210.25 225.5 ln
214.25 217.5 ln
218.25 208 ln
222.25 197.25 ln
226.25 185 ln
230.25 171.5 ln
234.25 157.5 ln
238.25 143.5 ln
242.25 131.5 ln
246.25 122.75 ln
250.25 118.75 ln
254.25 120.5 ln
258.25 127.75 ln
262.5 139.25 ln
266.5 153.25 ln
270.5 168 ln
274.5 182.75 ln
278.5 196.25 ln
282.5 208.5 ln
286.5 219.5 ln
290.5 229 ln
294.5 237.25 ln
298.5 244.25 ln
302.5 250.5 ln
306.5 255.75 ln
310.75 260.5 ln
314.75 264.5 ln
318.75 268.25 ln
322.75 271.25 ln
326.75 274.25 ln
330.75 276.75 ln
334.75 279 ln
334.75 279 mo
338.75 281 ln
342.75 283 ln
346.75 284.5 ln
350.75 286.25 ln
354.75 287.75 ln
358.75 289 ln
363 290.25 ln
367 291.5 ln
371 292.5 ln
375 293.5 ln
379 294.5 ln
383 295.5 ln
387 296.25 ln
391 297.25 ln
395 298 ln
399 298.75 ln
403 299.5 ln
407 300.25 ln
411.25 300.75 ln
415.25 301.5 ln
419.25 302.25 ln
423.25 302.75 ln
427.25 303.5 ln
431.25 304 ln
435.25 304.5 ln
439.25 305.25 ln
443.25 305.75 ln
447.25 306.25 ln
451.25 306.75 ln
455.25 307.25 ln
459.25 307.75 ln
463.5 308.25 ln
467.5 308.75 ln
471.5 309.25 ln
475.5 309.75 ln
479.5 310.25 ln
483.5 310.75 ln
487.5 311.25 ln
491.5 311.75 ln
495.5 312.25 ln
499.5 312.75 ln
503.5 313.25 ln
507.5 313.5 ln
511.75 314 ln
515.75 314.5 ln
519.75 315 ln
523.75 315.25 ln
527.75 315.75 ln
531.75 316.25 ln
531.75 316.25 mo
535.75 316.75 ln
0 0 0 1 cmyk
s
[3 3 ] 0 dsh
137.75 282 mo
141.75 282.5 ln
145.75 282.75 ln
149.75 283 ln
153.75 283.5 ln
157.75 283.75 ln
162 284.25 ln
166 284.5 ln
170 285 ln
174 285.25 ln
178 285.75 ln
182 286 ln
186 286.5 ln
190 286.75 ln
194 287.25 ln
198 287.5 ln
202 288 ln
206 288.25 ln
210.25 288.75 ln
214.25 289 ln
218.25 289.5 ln
222.25 289.75 ln
226.25 290.25 ln
230.25 290.5 ln
234.25 291 ln
238.25 291.25 ln
242.25 291.75 ln
246.25 292 ln
250.25 292.5 ln
254.25 292.75 ln
258.25 293 ln
262.5 293.5 ln
266.5 293.75 ln
270.5 294.25 ln
274.5 294.5 ln
278.5 295 ln
282.5 295.25 ln
286.5 295.75 ln
290.5 296 ln
294.5 296.5 ln
298.5 296.75 ln
302.5 297.25 ln
306.5 297.5 ln
310.75 298 ln
314.75 298.25 ln
318.75 298.75 ln
322.75 299 ln
326.75 299.5 ln
330.75 299.75 ln
334.75 300.25 ln
334.75 300.25 mo
338.75 300.5 ln
342.75 301 ln
346.75 301.25 ln
350.75 301.75 ln
354.75 302 ln
358.75 302.5 ln
363 302.75 ln
367 303.25 ln
371 303.5 ln
375 303.75 ln
379 304.25 ln
383 304.5 ln
387 305 ln
391 305.25 ln
395 305.75 ln
399 306 ln
403 306.5 ln
407 306.75 ln
411.25 307.25 ln
415.25 307.5 ln
419.25 308 ln
423.25 308.25 ln
427.25 308.75 ln
431.25 309 ln
435.25 309.5 ln
439.25 309.75 ln
443.25 310.25 ln
447.25 310.5 ln
451.25 311 ln
455.25 311.25 ln
459.25 311.75 ln
463.5 312 ln
467.5 312.5 ln
471.5 312.75 ln
475.5 313.25 ln
479.5 313.5 ln
483.5 314 ln
487.5 314.25 ln
491.5 314.5 ln
495.5 315 ln
499.5 315.25 ln
503.5 315.75 ln
507.5 316 ln
511.75 316.5 ln
515.75 316.75 ln
519.75 317.25 ln
523.75 317.5 ln
527.75 318 ln
531.75 318.25 ln
531.75 318.25 mo
535.75 318.75 ln
s
0.75 lw
[] 0 dsh
111 317 mo
113.25 317 ln
121 317 mo
123.5 317 ln
s
120.33 316.91 mo
120.33 315.254 118.985 313.91 117.33 313.91 cv
115.674 313.91 114.33 315.254 114.33 316.91 cv
114.33 318.566 115.674 319.91 117.33 319.91 cv
118.985 319.91 120.33 318.566 120.33 316.91 cv
ef
142 274.75 mo
142 269.5 ln
142 261.75 mo
142 256.5 ln
135.75 265.5 mo
138 265.5 ln
145.75 265.5 mo
148.25 265.5 ln
s
145.05 265.55 mo
145.05 263.894 143.706 262.55 142.05 262.55 cv
140.394 262.55 139.05 263.894 139.05 265.55 cv
139.05 267.206 140.394 268.55 142.05 268.55 cv
143.706 268.55 145.05 267.206 145.05 265.55 cv
ef
154.25 290.25 mo
154.25 283.75 ln
154.25 276 mo
154.25 269.5 ln
148.25 279.75 mo
150.5 279.75 ln
158.25 279.75 mo
160.5 279.75 ln
s
157.29 279.71 mo
157.29 278.054 155.945 276.71 154.29 276.71 cv
152.634 276.71 151.29 278.054 151.29 279.71 cv
151.29 281.366 152.634 282.71 154.29 282.71 cv
155.945 282.71 157.29 281.366 157.29 279.71 cv
ef
166.75 283.5 mo
166.75 276 ln
166.75 268.25 mo
166.75 260.75 ln
160.5 272.25 mo
162.75 272.25 ln
170.5 272.25 mo
172.75 272.25 ln
s
169.77 272.27 mo
169.77 270.614 168.426 269.27 166.77 269.27 cv
165.114 269.27 163.77 270.614 163.77 272.27 cv
163.77 273.926 165.114 275.27 166.77 275.27 cv
168.426 275.27 169.77 273.926 169.77 272.27 cv
ef
179 296.25 mo
179 288 ln
179 280.25 mo
179 272 ln
172.75 284 mo
175.25 284 ln
183 284 mo
185.25 284 ln
s
182.01 284.03 mo
182.01 282.374 180.666 281.03 179.01 281.03 cv
177.354 281.03 176.01 282.374 176.01 284.03 cv
176.01 285.686 177.354 287.03 179.01 287.03 cv
180.666 287.03 182.01 285.686 182.01 284.03 cv
ef
191.5 230 mo
191.5 221 ln
191.5 213 mo
191.5 204 ln
185.25 217 mo
187.5 217 ln
195.25 217 mo
197.5 217 ln
s
194.49 217.07 mo
194.49 215.414 193.146 214.07 191.49 214.07 cv
189.834 214.07 188.49 215.414 188.49 217.07 cv
188.49 218.726 189.834 220.07 191.49 220.07 cv
193.146 220.07 194.49 218.726 194.49 217.07 cv
ef
203.75 243.5 mo
203.75 234 ln
203.75 226.25 mo
203.75 216.75 ln
197.5 230 mo
200 230 ln
207.75 230 mo
210 230 ln
s
206.729 230.03 mo
206.729 228.374 205.386 227.03 203.729 227.03 cv
202.074 227.03 200.729 228.374 200.729 230.03 cv
200.729 231.686 202.074 233.03 203.729 233.03 cv
205.386 233.03 206.729 231.686 206.729 230.03 cv
ef
216.25 224.25 mo
216.25 214.5 ln
216.25 206.5 mo
216.25 196.75 ln
210 210.5 mo
212.25 210.5 ln
220 210.5 mo
222.25 210.5 ln
s
219.21 210.59 mo
219.21 208.934 217.866 207.59 216.21 207.59 cv
214.554 207.59 213.21 208.934 213.21 210.59 cv
213.21 212.246 214.554 213.59 216.21 213.59 cv
217.866 213.59 219.21 212.246 219.21 210.59 cv
ef
228.5 194.25 mo
228.5 184 ln
228.5 176.25 mo
228.5 166 ln
222.25 180 mo
224.5 180 ln
232.5 180 mo
234.75 180 ln
s
231.45 180.11 mo
231.45 178.454 230.105 177.11 228.45 177.11 cv
226.794 177.11 225.45 178.454 225.45 180.11 cv
225.45 181.766 226.794 183.11 228.45 183.11 cv
230.105 183.11 231.45 181.766 231.45 180.11 cv
ef
241 159.75 mo
241 149.25 ln
241 141.5 mo
241 130.75 ln
234.75 145.25 mo
237 145.25 ln
244.75 145.25 mo
247 145.25 ln
s
243.93 145.31 mo
243.93 143.654 242.586 142.31 240.93 142.31 cv
239.273 142.31 237.93 143.654 237.93 145.31 cv
237.93 146.966 239.273 148.31 240.93 148.31 cv
242.586 148.31 243.93 146.966 243.93 145.31 cv
ef
253.25 128.75 mo
253.25 117.75 ln
253.25 110 mo
253.25 99.25 ln
247 114 mo
249.25 114 ln
257.25 114 mo
259.5 114 ln
s
256.17 114.11 mo
256.17 112.454 254.826 111.11 253.17 111.11 cv
251.514 111.11 250.17 112.454 250.17 114.11 cv
250.17 115.766 251.514 117.11 253.17 117.11 cv
254.826 117.11 256.17 115.766 256.17 114.11 cv
ef
265.75 155.75 mo
265.75 144.75 ln
265.75 137 mo
265.75 126 ln
259.5 141 mo
261.75 141 ln
269.5 141 mo
271.75 141 ln
s
268.649 140.99 mo
268.649 139.334 267.306 137.99 265.649 137.99 cv
263.994 137.99 262.649 139.334 262.649 140.99 cv
262.649 142.646 263.994 143.99 265.649 143.99 cv
267.306 143.99 268.649 142.646 268.649 140.99 cv
ef
278 233.5 mo
278 222.5 ln
278 214.75 mo
278 203.75 ln
271.75 218.75 mo
274 218.75 ln
282 218.75 mo
284.25 218.75 ln
s
280.89 218.75 mo
280.89 217.094 279.546 215.75 277.89 215.75 cv
276.233 215.75 274.89 217.094 274.89 218.75 cv
274.89 220.406 276.233 221.75 277.89 221.75 cv
279.546 221.75 280.89 220.406 280.89 218.75 cv
ef
290.5 243.25 mo
290.5 232 ln
290.5 224.25 mo
290.5 213.25 ln
284.25 228.25 mo
286.5 228.25 ln
294.25 228.25 mo
296.5 228.25 ln
s
293.609 228.35 mo
293.609 226.694 292.266 225.35 290.609 225.35 cv
288.954 225.35 287.609 226.694 287.609 228.35 cv
287.609 230.006 288.954 231.35 290.609 231.35 cv
292.266 231.35 293.609 230.006 293.609 228.35 cv
ef
302.75 245.75 mo
302.75 234.5 ln
302.75 226.75 mo
302.75 215.75 ln
296.5 230.75 mo
298.75 230.75 ln
306.75 230.75 mo
309 230.75 ln
s
305.85 230.75 mo
305.85 229.094 304.506 227.75 302.85 227.75 cv
301.193 227.75 299.85 229.094 299.85 230.75 cv
299.85 232.406 301.193 233.75 302.85 233.75 cv
304.506 233.75 305.85 232.406 305.85 230.75 cv
ef
315 297.75 mo
315 286.5 ln
315 278.75 mo
315 267.5 ln
309 282.75 mo
311.25 282.75 ln
319 282.75 mo
321.25 282.75 ln
s
318.09 282.83 mo
318.09 281.174 316.746 279.83 315.09 279.83 cv
313.434 279.83 312.09 281.174 312.09 282.83 cv
312.09 284.486 313.434 285.83 315.09 285.83 cv
316.746 285.83 318.09 284.486 318.09 282.83 cv
ef
327.5 290.25 mo
327.5 279 ln
327.5 271.25 mo
327.5 260 ln
321.25 275.25 mo
323.5 275.25 ln
331.5 275.25 mo
333.75 275.25 ln
s
330.569 275.15 mo
330.569 273.494 329.226 272.15 327.569 272.15 cv
325.914 272.15 324.569 273.494 324.569 275.15 cv
324.569 276.806 325.914 278.15 327.569 278.15 cv
329.226 278.15 330.569 276.806 330.569 275.15 cv
ef
339.75 290 mo
339.75 278.75 ln
339.75 270.75 mo
339.75 259.5 ln
333.75 274.75 mo
336 274.75 ln
343.75 274.75 mo
346 274.75 ln
s
342.81 274.67 mo
342.81 273.014 341.466 271.67 339.81 271.67 cv
338.153 271.67 336.81 273.014 336.81 274.67 cv
336.81 276.326 338.153 277.67 339.81 277.67 cv
341.466 277.67 342.81 276.326 342.81 274.67 cv
ef
352.25 274.25 mo
352.25 263 ln
352.25 255 mo
352.25 243.75 ln
346 259 mo
348.25 259 ln
356.25 259 mo
358.5 259 ln
s
355.29 259.07 mo
355.29 257.414 353.945 256.07 352.29 256.07 cv
350.634 256.07 349.29 257.414 349.29 259.07 cv
349.29 260.726 350.634 262.07 352.29 262.07 cv
353.945 262.07 355.29 260.726 355.29 259.07 cv
ef
364.5 308 mo
364.5 296.75 ln
364.5 289 mo
364.5 277.75 ln
358.5 292.75 mo
360.75 292.75 ln
368.5 292.75 mo
370.75 292.75 ln
s
367.53 292.67 mo
367.53 291.014 366.186 289.67 364.53 289.67 cv
362.874 289.67 361.53 291.014 361.53 292.67 cv
361.53 294.326 362.874 295.67 364.53 295.67 cv
366.186 295.67 367.53 294.326 367.53 292.67 cv
ef
377 308.25 mo
377 297 ln
377 289.25 mo
377 278 ln
370.75 293.25 mo
373 293.25 ln
380.75 293.25 mo
383.25 293.25 ln
s
380.01 293.15 mo
380.01 291.494 378.666 290.15 377.01 290.15 cv
375.354 290.15 374.01 291.494 374.01 293.15 cv
374.01 294.806 375.354 296.15 377.01 296.15 cv
378.666 296.15 380.01 294.806 380.01 293.15 cv
ef
389.25 301.5 mo
389.25 290.25 ln
389.25 282.5 mo
389.25 271.25 ln
383.25 286.25 mo
385.5 286.25 ln
393.25 286.25 mo
395.5 286.25 ln
s
392.25 286.19 mo
392.25 284.534 390.906 283.19 389.25 283.19 cv
387.594 283.19 386.25 284.534 386.25 286.19 cv
386.25 287.846 387.594 289.19 389.25 289.19 cv
390.906 289.19 392.25 287.846 392.25 286.19 cv
ef
401.75 305.25 mo
401.75 294 ln
401.75 286.25 mo
401.75 275 ln
395.5 290.25 mo
397.75 290.25 ln
405.5 290.25 mo
408 290.25 ln
s
404.73 290.27 mo
404.73 288.614 403.386 287.27 401.73 287.27 cv
400.074 287.27 398.73 288.614 398.73 290.27 cv
398.73 291.926 400.074 293.27 401.73 293.27 cv
403.386 293.27 404.73 291.926 404.73 290.27 cv
ef
414 314 mo
414 302.75 ln
414 295 mo
414 284 ln
408 299 mo
410.25 299 ln
418 299 mo
420.25 299 ln
s
416.97 298.91 mo
416.97 297.254 415.626 295.91 413.97 295.91 cv
412.314 295.91 410.97 297.254 410.97 298.91 cv
410.97 300.566 412.314 301.91 413.97 301.91 cv
415.626 301.91 416.97 300.566 416.97 298.91 cv
ef
426.5 309.75 mo
426.5 298.5 ln
426.5 290.75 mo
426.5 279.75 ln
420.25 294.75 mo
422.5 294.75 ln
430.25 294.75 mo
432.5 294.75 ln
s
429.45 294.83 mo
429.45 293.174 428.106 291.83 426.45 291.83 cv
424.794 291.83 423.45 293.174 423.45 294.83 cv
423.45 296.486 424.794 297.83 426.45 297.83 cv
428.106 297.83 429.45 296.486 429.45 294.83 cv
ef
438.75 308.25 mo
438.75 297.25 ln
438.75 289.5 mo
438.75 278.5 ln
432.5 293.5 mo
435 293.5 ln
442.75 293.5 mo
445 293.5 ln
s
441.69 293.39 mo
441.69 291.734 440.346 290.39 438.69 290.39 cv
437.034 290.39 435.69 291.734 435.69 293.39 cv
435.69 295.046 437.034 296.39 438.69 296.39 cv
440.346 296.39 441.69 295.046 441.69 293.39 cv
ef
451.25 320 mo
451.25 309.25 ln
451.25 301.25 mo
451.25 290.5 ln
445 305.25 mo
447.25 305.25 ln
455 305.25 mo
457.25 305.25 ln
s
454.17 305.15 mo
454.17 303.494 452.826 302.15 451.17 302.15 cv
449.514 302.15 448.17 303.494 448.17 305.15 cv
448.17 306.806 449.514 308.15 451.17 308.15 cv
452.826 308.15 454.17 306.806 454.17 305.15 cv
ef
463.5 314 mo
463.5 303.25 ln
463.5 295.25 mo
463.5 284.75 ln
457.25 299.25 mo
459.75 299.25 ln
467.5 299.25 mo
469.75 299.25 ln
s
466.41 299.15 mo
466.41 297.494 465.066 296.15 463.41 296.15 cv
461.754 296.15 460.41 297.494 460.41 299.15 cv
460.41 300.806 461.754 302.15 463.41 302.15 cv
465.066 302.15 466.41 300.806 466.41 299.15 cv
ef
476 321.5 mo
476 310.75 ln
476 303 mo
476 292.5 ln
469.75 307 mo
472 307 ln
479.75 307 mo
482 307 ln
s
478.89 307.07 mo
478.89 305.414 477.546 304.07 475.89 304.07 cv
474.234 304.07 472.89 305.414 472.89 307.07 cv
472.89 308.726 474.234 310.07 475.89 310.07 cv
477.546 310.07 478.89 308.726 478.89 307.07 cv
ef
488.25 309.5 mo
488.25 299 ln
488.25 291 mo
488.25 280.5 ln
482 295 mo
484.5 295 ln
492.25 295 mo
494.5 295 ln
s
491.13 295.07 mo
491.13 293.414 489.786 292.07 488.13 292.07 cv
486.474 292.07 485.13 293.414 485.13 295.07 cv
485.13 296.726 486.474 298.07 488.13 298.07 cv
489.786 298.07 491.13 296.726 491.13 295.07 cv
ef
500.75 349 mo
500.75 338.75 ln
500.75 330.75 mo
500.75 320.5 ln
494.5 334.75 mo
496.75 334.75 ln
504.5 334.75 mo
506.75 334.75 ln
s
503.85 334.67 mo
503.85 333.014 502.506 331.67 500.85 331.67 cv
499.194 331.67 497.85 333.014 497.85 334.67 cv
497.85 336.326 499.194 337.67 500.85 337.67 cv
502.506 337.67 503.85 336.326 503.85 334.67 cv
ef
513 335.75 mo
513 325.5 ln
513 317.5 mo
513 307.5 ln
506.75 321.5 mo
509 321.5 ln
517 321.5 mo
519.25 321.5 ln
s
516.09 321.47 mo
516.09 319.814 514.746 318.47 513.09 318.47 cv
511.434 318.47 510.09 319.814 510.09 321.47 cv
510.09 323.126 511.434 324.47 513.09 324.47 cv
514.746 324.47 516.09 323.126 516.09 321.47 cv
ef
525.5 347.75 mo
525.5 337.5 ln
525.5 329.75 mo
525.5 319.75 ln
519.25 333.75 mo
521.5 333.75 ln
529.25 333.75 mo
531.5 333.75 ln
s
528.57 333.71 mo
528.57 332.054 527.227 330.71 525.57 330.71 cv
523.914 330.71 522.57 332.054 522.57 333.71 cv
522.57 335.366 523.914 336.71 525.57 336.71 cv
527.227 336.71 528.57 335.366 528.57 333.71 cv
ef
537.75 346.25 mo
537.75 336.25 ln
537.75 328.5 mo
537.75 318.5 ln
531.5 332.25 mo
533.75 332.25 ln
541.75 332.25 mo
544 332.25 ln
s
540.811 332.27 mo
540.811 330.614 539.466 329.27 537.811 329.27 cv
536.154 329.27 534.811 330.614 534.811 332.27 cv
534.811 333.926 536.154 335.27 537.811 335.27 cv
539.466 335.27 540.811 333.926 540.811 332.27 cv
ef
550.25 344.5 mo
550.25 334.75 ln
550.25 327 mo
550.25 317.25 ln
544 330.75 mo
546.25 330.75 ln
554 330.75 mo
556.25 330.75 ln
s
553.29 330.83 mo
553.29 329.174 551.946 327.83 550.29 327.83 cv
548.634 327.83 547.29 329.174 547.29 330.83 cv
547.29 332.486 548.634 333.83 550.29 333.83 cv
551.946 333.83 553.29 332.486 553.29 330.83 cv
ef
562.5 343.75 mo
562.5 334.25 ln
562.5 326.5 mo
562.5 316.75 ln
556.25 330.25 mo
558.5 330.25 ln
566.5 330.25 mo
568.75 330.25 ln
s
565.53 330.35 mo
565.53 328.694 564.186 327.35 562.53 327.35 cv
560.874 327.35 559.53 328.694 559.53 330.35 cv
559.53 332.006 560.874 333.35 562.53 333.35 cv
564.186 333.35 565.53 332.006 565.53 330.35 cv
ef
574.75 340.5 mo
574.75 331 ln
574.75 323.25 mo
574.75 313.75 ln
568.75 327 mo
571 327 ln
578.75 327 mo
581 327 ln
s
577.77 326.99 mo
577.77 325.334 576.426 323.99 574.77 323.99 cv
573.114 323.99 571.77 325.334 571.77 326.99 cv
571.77 328.646 573.114 329.99 574.77 329.99 cv
576.426 329.99 577.77 328.646 577.77 326.99 cv
ef
587.25 356.25 mo
587.25 347 ln
587.25 339 mo
587.25 329.75 ln
581 343 mo
583.25 343 ln
591.25 343 mo
593.5 343 ln
s
590.25 343.07 mo
590.25 341.414 588.906 340.07 587.25 340.07 cv
585.594 340.07 584.25 341.414 584.25 343.07 cv
584.25 344.726 585.594 346.07 587.25 346.07 cv
588.906 346.07 590.25 344.726 590.25 343.07 cv
ef
599.5 346.5 mo
599.5 337.25 ln
599.5 329.5 mo
599.5 320.5 ln
593.5 333.5 mo
595.75 333.5 ln
603.5 333.5 mo
605.75 333.5 ln
s
602.49 333.47 mo
602.49 331.814 601.146 330.47 599.49 330.47 cv
597.834 330.47 596.49 331.814 596.49 333.47 cv
596.49 335.126 597.834 336.47 599.49 336.47 cv
601.146 336.47 602.49 335.126 602.49 333.47 cv
ef
612 341.75 mo
612 332.75 ln
612 325 mo
612 316 ln
605.75 329 mo
608 329 ln
616 329 mo
618.25 329 ln
s
614.97 328.91 mo
614.97 327.254 613.626 325.91 611.97 325.91 cv
610.314 325.91 608.97 327.254 608.97 328.91 cv
608.97 330.566 610.314 331.91 611.97 331.91 cv
613.626 331.91 614.97 330.566 614.97 328.91 cv
ef
624.25 344.5 mo
624.25 335.75 ln
624.25 328 mo
624.25 319.25 ln
618.25 331.75 mo
620.5 331.75 ln
628.25 331.75 mo
630.5 331.75 ln
s
627.21 331.79 mo
627.21 330.134 625.866 328.79 624.21 328.79 cv
622.554 328.79 621.21 330.134 621.21 331.79 cv
621.21 333.446 622.554 334.79 624.21 334.79 cv
625.866 334.79 627.21 333.446 627.21 331.79 cv
ef
save_ctm
restore_ctm
save_ctm
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
343.25 156.25 mov
(Mini) sh
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/plus 
<10bf317031d9337ef184b43be498749534943b6b82dfb721a4f1e6478fee
6c1f4763fef70c3e4be97d7fac720dea7a> ND 
/A 
<10bf3170789bec1ccf5fb017e1dd1362ac576702c4654165111c4e219216
925a1bbda37b8221ddb4f3d7ef9dc32fffa987a0f0ea03488171acb09982
96179b683649315a4b1534> ND 
/B 
<10bf317026ba62063ac1fc9b1b7da70a4283bca66508b7487db96d3b5e50
ebb26d781c08b71d8c60e86f5f95e258aadae78cebfccceace7d1e24a04f
7a0ebebb84d24fd6e0dcc7805db6e5cdf4eb0699290a048d32bdfc7bda09
b014801b6912f42581f07cfc0dad1f3a0fda97cccb6dc64f3c2133712b38
17f9dcf78f219a31023477457afb4124f2e67688f81d2fae0a3d889fa20e
a1e4d003c07fa3b1c5e475e398065490772a2317b8a1741177b48843cacc
98258835f7713d01ccd04d20a02276a9eaa215ecd7e642af0d478b9844bc
79867bee2d8cdbfd06> ND 
/d 
<10bf31705fc19346123ea144938c3fcda937cd4a672f6786808342502285
ef1934ea8d92d83b04254379f7e54d6e29c5190a7a8ca45269bc25bf3fdc
c0176673c46f00ae3f8e682761317abadcd2563a67b0b9fa9aab272a6147
645b098862d36c4de3043b72728816e055e72b9d05f1053d17b6056c610c
a2f84c956990b8194da3eb3fb55dcc79196e6f19c531a623b8ce24d6522a
> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b1b2055ad20453a840
b3065aec0c8f0074b9f24b641ee16baa708b1406e6d86ab1aaf424b4283d
6f09747a700244de117dc5840f36eb1772072b40636599bce9d665b54bb3
43a89d88f9e201e5cc1b9fa51aab18b6ab707595fea1b90bfcbdaa8111e5
52483796392ca7d4a49e4e50222fb459739277857fc5f301e9aa1a7b4f6e
fc6a1a78fecb35743baedf> ND 
end end
end
/ArialMT findfont /Encoding get
dup 43 /plus put
dup 65 /A put
dup 66 /B put
dup 100 /d put
dup 109 /m put
pop
%ADOEndSubsetFont
/ArialMT*10 
[
43{/.notdef}repeat /plus 21{/.notdef}repeat /A /B 33{/.notdef}repeat /d 8{/.notdef}repeat 
/m 146{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
390.921 156.25 mov
(m) sh
/ArialMT*7 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
412.579 156.25 mov
(u) sh
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
427.039 156.25 mov
(m) sh
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
448.697 156.25 mov
( ) sh
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
455.921 156.25 mov
(B) sh
/ArialMT*3 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
473.263 156.25 mov
(ias  ) sh
/ArialMT*10 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
520.946 156.25 mov
(d+A) sh
/ArialMT*7 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
567.932 156.25 mov
(u) sh
restore_ctm
save_ctm
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
/asterisk 
<10bf3170586c89409dd2665c962f73917ff1d99d25547eb97d8d7a1b746b
52bd73aee63f25b04e33ffea373408cea5b18d57735103adadf0d2b607ad
784041cc4f31b413e027687ce43b3535a4680ad8bc60fcb7acaa8519fa55
5f8158dcfff6de858c7134> ND 
end end
end
/ArialMT findfont /Encoding get
dup 42 /asterisk put
pop
%ADOEndSubsetFont
/ArialMT*11 
[
42{/.notdef}repeat /asterisk 213{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*11 findfont [19 0 0 -19 0 0 ]mfnt sfnt
BuildWidthShowArray
464 80.5 mov
(*) sh
restore_ctm
%ADOBeginSubsetFont: Symbol Initial
%!FontType1
16 dict begin
/FontInfo 15 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/version (001.008) def
/FullName (Symbol) def
/FamilyName (Symbol) def
/Weight (Medium) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /Symbol def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox { -180 -293 1090 1010 } def
/XUID [6 42996 ] def
/StrokeWidth 0 def
currentdict end
currentfile eexec A0B00ED5187D9C0F1ECDF51878C3AA5CAA3ECAB94698AF
13A4485757691763CAA8023293C6742E3899EDC5BE94ADFC42A0C0027CA6214B
7F8D5F616C6C2330D450A707B93BDD387F8829CFEF02A72B512D93C14DC1F17C
3175B113E267D8BD6A1447D88A441810C35BAC725EC0017275261A74EB5067CD
9834D1E000DA4929128802A4406C63EAAE5098C3B673FB571CE4AA66227384BC
D1F9516217661F446651CBD433BDBB210B8CB1C0AE7FE1EE2E21077BC11F9270
69E30D1E3AF26358279873C2B62D3AA5368EC87D6A567E789674A8EEED694D74
E8AE78AD599DE625132DC2B96E4C1518B04F598401F1080D43B1530D7089A208
39AB479C8D65D6823FDE8C7085D829EBF9BFD791C95C71C65AE4EC2A01CBA5FA
992ED2E4C180E84DC6E14861844CD132B73A4AA658AD9BE20B35514AC67BF58E
E4587AAC0BA16313B83C2C222F018E737313614351D1EFBF36BD83A38ED9DB6B
D6191BB6160AAC9612D574C3028C8C52B52925658ED342DA958D4100DABE516F
4733BF895741A1EA34A4707864910DD7E8EFE407898B7BCC27AC062D1BA4F11A
73F4342E2D8EF6E101C80AABBFD820974B1F3CC33D070E3C0CF97490AE3CCF18
630A6E2BD4007310EF65E793C445E48BC171043FCE380624354787BC936241D0
3306C33061D7EDD92FAC67F671457CD23F6931B947E97BDA7754E5F56D611220
5C4E82C2815584BF47A854236D460FE90AEE8B7FC419C26F68EB007CE6ED0053
856FABF9D7B6E5E6D910A77FDC4019BC55466E90A87476719B3A8CE5B38E4592
40DEDD91E229FB5784ED9E5A05747D938589B5554723ABC8F7F565F9F7AE6BCF
106F2212EAA54EE7DDD86863B30DFFB84D259A8FD24352AD855813AA02791C07
3824963AA973AEB925BCB75D7B8B65680FFF2B750A7939CBD880C8467D1104DF
9F15B0A8B2E43C7F445BA84DDD777444FD9E2416992213E6D0A936603D381689
9E5E55FFC73083C43CA8A15EAD3BEE4D6AFAD49938AC763CA6CEFF4F499F6EB0
303C5FD86A6DA9601B64F321DE385311C18C43E18842F9D2B0445C853100194C
0EB4F0E368EF73081F98B787C0FD723F3DC0FFF2116676894617D05260524DFA
1C1424BBA73EEF75D8DBD86066850389ABCFEBF01C39C364A46182E47BEB9F55
679298A5A04190FF534218EAB65BEEFD74CF10AB8678EF1F6D0571C160A9603A
CDD271F08AD4812C1D7BD5CCE2DAE0170DD34BEB8CEFCD53644795C872A14E50
D6AAD6F1B8D7189729AE7ADFDCB5DF991B245C81CE2308BCC82D48707AFFA4C9
A4C87D5DC67236E08C7B144AA696669DC25D82589F7BBC7ECEFD474AB108069A
375F2B6B927C6D4C970478E059126CFAAFAE963C89B348FA0CEE452DBAB4A8AA
DC47F03B0A479DA258DE4F981B8B1519E8142B98A32C065A92D354FBE9ECD7A3
B1C375B7A9245CB30CCF340911CC422189F990DF8E3C410E468FF4ABC4637F79
2BABDE17A5901342ED411AAD4144259045264A5FBE4651F2F03DE6088D718753
C3434DD486D04FC9A9616126254927A6FFFBB6C83EB692F4E75357EEFE8942B2
CEC26A7C0B3AB448BFB31C1C9EB1A00FEF1F284D77B669EB3FC52B7B0CF8A9E1
D0D8069E1113B9ECF22509627E4861669FE300BF3149C505465B875366C39960
085750E53EF7E6DF637DC0CD6C834D59D896B5CB6A43D578BE86B476BB7E9485
C9D5626835AE75F7646188BAECDF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
/Symbol findfont /Encoding get
dup 76 /Lambda put
pop
%ADOEndSubsetFont
/Symbol*1 
[
76{/.notdef}repeat /Lambda 179{/.notdef}repeat
] /Symbol nfnt
/Symbol*1 findfont [26 0 0 -26 0 0 ]mfnt sfnt
BuildWidthShowArray
446.5 86.5 mov
(L) sh
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
